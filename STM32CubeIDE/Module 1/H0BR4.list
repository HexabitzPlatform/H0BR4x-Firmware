
H0BR4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a6fc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003338  0801a7b8  0801a7b8  0002a7b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801daf0  0801daf0  00030b44  2**0
                  CONTENTS
  4 .ARM          00000008  0801daf0  0801daf0  0002daf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801daf8  0801daf8  00030b44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801daf8  0801daf8  0002daf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801db00  0801db00  0002db00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b44  20000000  0801db04  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006068  20000b48  0801e648  00030b48  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20006bb0  0801e648  00036bb0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030b44  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006d3e7  00000000  00000000  00030b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000a41e  00000000  00000000  0009df53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0002ccf6  00000000  00000000  000a8371  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002a58  00000000  00000000  000d5068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000032a0  00000000  00000000  000d7ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003371e  00000000  00000000  000dad60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00012cf8  00000000  00000000  0010e47e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00121176  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a00  00000000  00000000  001211cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0012abcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0012ac98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000b48 	.word	0x20000b48
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0801a7a0 	.word	0x0801a7a0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000b4c 	.word	0x20000b4c
 8000100:	0801a7a0 	.word	0x0801a7a0

08000104 <strcmp>:
 8000104:	7802      	ldrb	r2, [r0, #0]
 8000106:	780b      	ldrb	r3, [r1, #0]
 8000108:	2a00      	cmp	r2, #0
 800010a:	d003      	beq.n	8000114 <strcmp+0x10>
 800010c:	3001      	adds	r0, #1
 800010e:	3101      	adds	r1, #1
 8000110:	429a      	cmp	r2, r3
 8000112:	d0f7      	beq.n	8000104 <strcmp>
 8000114:	1ad0      	subs	r0, r2, r3
 8000116:	4770      	bx	lr

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__gnu_thumb1_case_uqi>:
 8000128:	b402      	push	{r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	5c09      	ldrb	r1, [r1, r0]
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	448e      	add	lr, r1
 8000136:	bc02      	pop	{r1}
 8000138:	4770      	bx	lr
 800013a:	46c0      	nop			; (mov r8, r8)

0800013c <__gnu_thumb1_case_uhi>:
 800013c:	b403      	push	{r0, r1}
 800013e:	4671      	mov	r1, lr
 8000140:	0849      	lsrs	r1, r1, #1
 8000142:	0040      	lsls	r0, r0, #1
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	5a09      	ldrh	r1, [r1, r0]
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	448e      	add	lr, r1
 800014c:	bc03      	pop	{r0, r1}
 800014e:	4770      	bx	lr

08000150 <__udivsi3>:
 8000150:	2200      	movs	r2, #0
 8000152:	0843      	lsrs	r3, r0, #1
 8000154:	428b      	cmp	r3, r1
 8000156:	d374      	bcc.n	8000242 <__udivsi3+0xf2>
 8000158:	0903      	lsrs	r3, r0, #4
 800015a:	428b      	cmp	r3, r1
 800015c:	d35f      	bcc.n	800021e <__udivsi3+0xce>
 800015e:	0a03      	lsrs	r3, r0, #8
 8000160:	428b      	cmp	r3, r1
 8000162:	d344      	bcc.n	80001ee <__udivsi3+0x9e>
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d328      	bcc.n	80001bc <__udivsi3+0x6c>
 800016a:	0c03      	lsrs	r3, r0, #16
 800016c:	428b      	cmp	r3, r1
 800016e:	d30d      	bcc.n	800018c <__udivsi3+0x3c>
 8000170:	22ff      	movs	r2, #255	; 0xff
 8000172:	0209      	lsls	r1, r1, #8
 8000174:	ba12      	rev	r2, r2
 8000176:	0c03      	lsrs	r3, r0, #16
 8000178:	428b      	cmp	r3, r1
 800017a:	d302      	bcc.n	8000182 <__udivsi3+0x32>
 800017c:	1212      	asrs	r2, r2, #8
 800017e:	0209      	lsls	r1, r1, #8
 8000180:	d065      	beq.n	800024e <__udivsi3+0xfe>
 8000182:	0b03      	lsrs	r3, r0, #12
 8000184:	428b      	cmp	r3, r1
 8000186:	d319      	bcc.n	80001bc <__udivsi3+0x6c>
 8000188:	e000      	b.n	800018c <__udivsi3+0x3c>
 800018a:	0a09      	lsrs	r1, r1, #8
 800018c:	0bc3      	lsrs	r3, r0, #15
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x46>
 8000192:	03cb      	lsls	r3, r1, #15
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b83      	lsrs	r3, r0, #14
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x52>
 800019e:	038b      	lsls	r3, r1, #14
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0b43      	lsrs	r3, r0, #13
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x5e>
 80001aa:	034b      	lsls	r3, r1, #13
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b03      	lsrs	r3, r0, #12
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x6a>
 80001b6:	030b      	lsls	r3, r1, #12
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0ac3      	lsrs	r3, r0, #11
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x76>
 80001c2:	02cb      	lsls	r3, r1, #11
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a83      	lsrs	r3, r0, #10
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x82>
 80001ce:	028b      	lsls	r3, r1, #10
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0a43      	lsrs	r3, r0, #9
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x8e>
 80001da:	024b      	lsls	r3, r1, #9
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a03      	lsrs	r3, r0, #8
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x9a>
 80001e6:	020b      	lsls	r3, r1, #8
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	d2cd      	bcs.n	800018a <__udivsi3+0x3a>
 80001ee:	09c3      	lsrs	r3, r0, #7
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xa8>
 80001f4:	01cb      	lsls	r3, r1, #7
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0983      	lsrs	r3, r0, #6
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xb4>
 8000200:	018b      	lsls	r3, r1, #6
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0943      	lsrs	r3, r0, #5
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xc0>
 800020c:	014b      	lsls	r3, r1, #5
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0903      	lsrs	r3, r0, #4
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xcc>
 8000218:	010b      	lsls	r3, r1, #4
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	08c3      	lsrs	r3, r0, #3
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xd8>
 8000224:	00cb      	lsls	r3, r1, #3
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0883      	lsrs	r3, r0, #2
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xe4>
 8000230:	008b      	lsls	r3, r1, #2
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	0843      	lsrs	r3, r0, #1
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xf0>
 800023c:	004b      	lsls	r3, r1, #1
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	1a41      	subs	r1, r0, r1
 8000244:	d200      	bcs.n	8000248 <__udivsi3+0xf8>
 8000246:	4601      	mov	r1, r0
 8000248:	4152      	adcs	r2, r2
 800024a:	4610      	mov	r0, r2
 800024c:	4770      	bx	lr
 800024e:	e7ff      	b.n	8000250 <__udivsi3+0x100>
 8000250:	b501      	push	{r0, lr}
 8000252:	2000      	movs	r0, #0
 8000254:	f000 f8f0 	bl	8000438 <__aeabi_idiv0>
 8000258:	bd02      	pop	{r1, pc}
 800025a:	46c0      	nop			; (mov r8, r8)

0800025c <__aeabi_uidivmod>:
 800025c:	2900      	cmp	r1, #0
 800025e:	d0f7      	beq.n	8000250 <__udivsi3+0x100>
 8000260:	e776      	b.n	8000150 <__udivsi3>
 8000262:	4770      	bx	lr

08000264 <__divsi3>:
 8000264:	4603      	mov	r3, r0
 8000266:	430b      	orrs	r3, r1
 8000268:	d47f      	bmi.n	800036a <__divsi3+0x106>
 800026a:	2200      	movs	r2, #0
 800026c:	0843      	lsrs	r3, r0, #1
 800026e:	428b      	cmp	r3, r1
 8000270:	d374      	bcc.n	800035c <__divsi3+0xf8>
 8000272:	0903      	lsrs	r3, r0, #4
 8000274:	428b      	cmp	r3, r1
 8000276:	d35f      	bcc.n	8000338 <__divsi3+0xd4>
 8000278:	0a03      	lsrs	r3, r0, #8
 800027a:	428b      	cmp	r3, r1
 800027c:	d344      	bcc.n	8000308 <__divsi3+0xa4>
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d328      	bcc.n	80002d6 <__divsi3+0x72>
 8000284:	0c03      	lsrs	r3, r0, #16
 8000286:	428b      	cmp	r3, r1
 8000288:	d30d      	bcc.n	80002a6 <__divsi3+0x42>
 800028a:	22ff      	movs	r2, #255	; 0xff
 800028c:	0209      	lsls	r1, r1, #8
 800028e:	ba12      	rev	r2, r2
 8000290:	0c03      	lsrs	r3, r0, #16
 8000292:	428b      	cmp	r3, r1
 8000294:	d302      	bcc.n	800029c <__divsi3+0x38>
 8000296:	1212      	asrs	r2, r2, #8
 8000298:	0209      	lsls	r1, r1, #8
 800029a:	d065      	beq.n	8000368 <__divsi3+0x104>
 800029c:	0b03      	lsrs	r3, r0, #12
 800029e:	428b      	cmp	r3, r1
 80002a0:	d319      	bcc.n	80002d6 <__divsi3+0x72>
 80002a2:	e000      	b.n	80002a6 <__divsi3+0x42>
 80002a4:	0a09      	lsrs	r1, r1, #8
 80002a6:	0bc3      	lsrs	r3, r0, #15
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x4c>
 80002ac:	03cb      	lsls	r3, r1, #15
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b83      	lsrs	r3, r0, #14
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x58>
 80002b8:	038b      	lsls	r3, r1, #14
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0b43      	lsrs	r3, r0, #13
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x64>
 80002c4:	034b      	lsls	r3, r1, #13
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b03      	lsrs	r3, r0, #12
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x70>
 80002d0:	030b      	lsls	r3, r1, #12
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0ac3      	lsrs	r3, r0, #11
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x7c>
 80002dc:	02cb      	lsls	r3, r1, #11
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a83      	lsrs	r3, r0, #10
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x88>
 80002e8:	028b      	lsls	r3, r1, #10
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0a43      	lsrs	r3, r0, #9
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x94>
 80002f4:	024b      	lsls	r3, r1, #9
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a03      	lsrs	r3, r0, #8
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0xa0>
 8000300:	020b      	lsls	r3, r1, #8
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	d2cd      	bcs.n	80002a4 <__divsi3+0x40>
 8000308:	09c3      	lsrs	r3, r0, #7
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xae>
 800030e:	01cb      	lsls	r3, r1, #7
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0983      	lsrs	r3, r0, #6
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xba>
 800031a:	018b      	lsls	r3, r1, #6
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0943      	lsrs	r3, r0, #5
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xc6>
 8000326:	014b      	lsls	r3, r1, #5
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xd2>
 8000332:	010b      	lsls	r3, r1, #4
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	08c3      	lsrs	r3, r0, #3
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xde>
 800033e:	00cb      	lsls	r3, r1, #3
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0883      	lsrs	r3, r0, #2
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xea>
 800034a:	008b      	lsls	r3, r1, #2
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	0843      	lsrs	r3, r0, #1
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xf6>
 8000356:	004b      	lsls	r3, r1, #1
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	1a41      	subs	r1, r0, r1
 800035e:	d200      	bcs.n	8000362 <__divsi3+0xfe>
 8000360:	4601      	mov	r1, r0
 8000362:	4152      	adcs	r2, r2
 8000364:	4610      	mov	r0, r2
 8000366:	4770      	bx	lr
 8000368:	e05d      	b.n	8000426 <__divsi3+0x1c2>
 800036a:	0fca      	lsrs	r2, r1, #31
 800036c:	d000      	beq.n	8000370 <__divsi3+0x10c>
 800036e:	4249      	negs	r1, r1
 8000370:	1003      	asrs	r3, r0, #32
 8000372:	d300      	bcc.n	8000376 <__divsi3+0x112>
 8000374:	4240      	negs	r0, r0
 8000376:	4053      	eors	r3, r2
 8000378:	2200      	movs	r2, #0
 800037a:	469c      	mov	ip, r3
 800037c:	0903      	lsrs	r3, r0, #4
 800037e:	428b      	cmp	r3, r1
 8000380:	d32d      	bcc.n	80003de <__divsi3+0x17a>
 8000382:	0a03      	lsrs	r3, r0, #8
 8000384:	428b      	cmp	r3, r1
 8000386:	d312      	bcc.n	80003ae <__divsi3+0x14a>
 8000388:	22fc      	movs	r2, #252	; 0xfc
 800038a:	0189      	lsls	r1, r1, #6
 800038c:	ba12      	rev	r2, r2
 800038e:	0a03      	lsrs	r3, r0, #8
 8000390:	428b      	cmp	r3, r1
 8000392:	d30c      	bcc.n	80003ae <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	1192      	asrs	r2, r2, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d308      	bcc.n	80003ae <__divsi3+0x14a>
 800039c:	0189      	lsls	r1, r1, #6
 800039e:	1192      	asrs	r2, r2, #6
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d304      	bcc.n	80003ae <__divsi3+0x14a>
 80003a4:	0189      	lsls	r1, r1, #6
 80003a6:	d03a      	beq.n	800041e <__divsi3+0x1ba>
 80003a8:	1192      	asrs	r2, r2, #6
 80003aa:	e000      	b.n	80003ae <__divsi3+0x14a>
 80003ac:	0989      	lsrs	r1, r1, #6
 80003ae:	09c3      	lsrs	r3, r0, #7
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x154>
 80003b4:	01cb      	lsls	r3, r1, #7
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0983      	lsrs	r3, r0, #6
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x160>
 80003c0:	018b      	lsls	r3, r1, #6
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0943      	lsrs	r3, r0, #5
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x16c>
 80003cc:	014b      	lsls	r3, r1, #5
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0903      	lsrs	r3, r0, #4
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x178>
 80003d8:	010b      	lsls	r3, r1, #4
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	08c3      	lsrs	r3, r0, #3
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x184>
 80003e4:	00cb      	lsls	r3, r1, #3
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0883      	lsrs	r3, r0, #2
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x190>
 80003f0:	008b      	lsls	r3, r1, #2
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	d2d9      	bcs.n	80003ac <__divsi3+0x148>
 80003f8:	0843      	lsrs	r3, r0, #1
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d301      	bcc.n	8000402 <__divsi3+0x19e>
 80003fe:	004b      	lsls	r3, r1, #1
 8000400:	1ac0      	subs	r0, r0, r3
 8000402:	4152      	adcs	r2, r2
 8000404:	1a41      	subs	r1, r0, r1
 8000406:	d200      	bcs.n	800040a <__divsi3+0x1a6>
 8000408:	4601      	mov	r1, r0
 800040a:	4663      	mov	r3, ip
 800040c:	4152      	adcs	r2, r2
 800040e:	105b      	asrs	r3, r3, #1
 8000410:	4610      	mov	r0, r2
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x1b4>
 8000414:	4240      	negs	r0, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d500      	bpl.n	800041c <__divsi3+0x1b8>
 800041a:	4249      	negs	r1, r1
 800041c:	4770      	bx	lr
 800041e:	4663      	mov	r3, ip
 8000420:	105b      	asrs	r3, r3, #1
 8000422:	d300      	bcc.n	8000426 <__divsi3+0x1c2>
 8000424:	4240      	negs	r0, r0
 8000426:	b501      	push	{r0, lr}
 8000428:	2000      	movs	r0, #0
 800042a:	f000 f805 	bl	8000438 <__aeabi_idiv0>
 800042e:	bd02      	pop	{r1, pc}

08000430 <__aeabi_idivmod>:
 8000430:	2900      	cmp	r1, #0
 8000432:	d0f8      	beq.n	8000426 <__divsi3+0x1c2>
 8000434:	e716      	b.n	8000264 <__divsi3>
 8000436:	4770      	bx	lr

08000438 <__aeabi_idiv0>:
 8000438:	4770      	bx	lr
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdrcmple>:
 800043c:	4684      	mov	ip, r0
 800043e:	1c10      	adds	r0, r2, #0
 8000440:	4662      	mov	r2, ip
 8000442:	468c      	mov	ip, r1
 8000444:	1c19      	adds	r1, r3, #0
 8000446:	4663      	mov	r3, ip
 8000448:	e000      	b.n	800044c <__aeabi_cdcmpeq>
 800044a:	46c0      	nop			; (mov r8, r8)

0800044c <__aeabi_cdcmpeq>:
 800044c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044e:	f001 fe19 	bl	8002084 <__ledf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	d401      	bmi.n	800045a <__aeabi_cdcmpeq+0xe>
 8000456:	2100      	movs	r1, #0
 8000458:	42c8      	cmn	r0, r1
 800045a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800045c <__aeabi_dcmpeq>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fd63 	bl	8001f28 <__eqdf2>
 8000462:	4240      	negs	r0, r0
 8000464:	3001      	adds	r0, #1
 8000466:	bd10      	pop	{r4, pc}

08000468 <__aeabi_dcmplt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f001 fe0b 	bl	8002084 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	db01      	blt.n	8000476 <__aeabi_dcmplt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmple>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f001 fe01 	bl	8002084 <__ledf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dd01      	ble.n	800048a <__aeabi_dcmple+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpgt>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f001 fd85 	bl	8001fa0 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	dc01      	bgt.n	800049e <__aeabi_dcmpgt+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_dcmpge>:
 80004a4:	b510      	push	{r4, lr}
 80004a6:	f001 fd7b 	bl	8001fa0 <__gedf2>
 80004aa:	2800      	cmp	r0, #0
 80004ac:	da01      	bge.n	80004b2 <__aeabi_dcmpge+0xe>
 80004ae:	2000      	movs	r0, #0
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	2001      	movs	r0, #1
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <__aeabi_cfrcmple>:
 80004b8:	4684      	mov	ip, r0
 80004ba:	1c08      	adds	r0, r1, #0
 80004bc:	4661      	mov	r1, ip
 80004be:	e7ff      	b.n	80004c0 <__aeabi_cfcmpeq>

080004c0 <__aeabi_cfcmpeq>:
 80004c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004c2:	f000 fd15 	bl	8000ef0 <__lesf2>
 80004c6:	2800      	cmp	r0, #0
 80004c8:	d401      	bmi.n	80004ce <__aeabi_cfcmpeq+0xe>
 80004ca:	2100      	movs	r1, #0
 80004cc:	42c8      	cmn	r0, r1
 80004ce:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004d0 <__aeabi_fcmpeq>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fc99 	bl	8000e08 <__eqsf2>
 80004d6:	4240      	negs	r0, r0
 80004d8:	3001      	adds	r0, #1
 80004da:	bd10      	pop	{r4, pc}

080004dc <__aeabi_fcmplt>:
 80004dc:	b510      	push	{r4, lr}
 80004de:	f000 fd07 	bl	8000ef0 <__lesf2>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	db01      	blt.n	80004ea <__aeabi_fcmplt+0xe>
 80004e6:	2000      	movs	r0, #0
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	2001      	movs	r0, #1
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	46c0      	nop			; (mov r8, r8)

080004f0 <__aeabi_fcmple>:
 80004f0:	b510      	push	{r4, lr}
 80004f2:	f000 fcfd 	bl	8000ef0 <__lesf2>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	dd01      	ble.n	80004fe <__aeabi_fcmple+0xe>
 80004fa:	2000      	movs	r0, #0
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	2001      	movs	r0, #1
 8000500:	bd10      	pop	{r4, pc}
 8000502:	46c0      	nop			; (mov r8, r8)

08000504 <__aeabi_fcmpgt>:
 8000504:	b510      	push	{r4, lr}
 8000506:	f000 fca7 	bl	8000e58 <__gesf2>
 800050a:	2800      	cmp	r0, #0
 800050c:	dc01      	bgt.n	8000512 <__aeabi_fcmpgt+0xe>
 800050e:	2000      	movs	r0, #0
 8000510:	bd10      	pop	{r4, pc}
 8000512:	2001      	movs	r0, #1
 8000514:	bd10      	pop	{r4, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_fcmpge>:
 8000518:	b510      	push	{r4, lr}
 800051a:	f000 fc9d 	bl	8000e58 <__gesf2>
 800051e:	2800      	cmp	r0, #0
 8000520:	da01      	bge.n	8000526 <__aeabi_fcmpge+0xe>
 8000522:	2000      	movs	r0, #0
 8000524:	bd10      	pop	{r4, pc}
 8000526:	2001      	movs	r0, #1
 8000528:	bd10      	pop	{r4, pc}
 800052a:	46c0      	nop			; (mov r8, r8)

0800052c <__aeabi_ldivmod>:
 800052c:	2b00      	cmp	r3, #0
 800052e:	d115      	bne.n	800055c <__aeabi_ldivmod+0x30>
 8000530:	2a00      	cmp	r2, #0
 8000532:	d113      	bne.n	800055c <__aeabi_ldivmod+0x30>
 8000534:	2900      	cmp	r1, #0
 8000536:	db06      	blt.n	8000546 <__aeabi_ldivmod+0x1a>
 8000538:	dc01      	bgt.n	800053e <__aeabi_ldivmod+0x12>
 800053a:	2800      	cmp	r0, #0
 800053c:	d006      	beq.n	800054c <__aeabi_ldivmod+0x20>
 800053e:	2000      	movs	r0, #0
 8000540:	43c0      	mvns	r0, r0
 8000542:	0841      	lsrs	r1, r0, #1
 8000544:	e002      	b.n	800054c <__aeabi_ldivmod+0x20>
 8000546:	2180      	movs	r1, #128	; 0x80
 8000548:	0609      	lsls	r1, r1, #24
 800054a:	2000      	movs	r0, #0
 800054c:	b407      	push	{r0, r1, r2}
 800054e:	4802      	ldr	r0, [pc, #8]	; (8000558 <__aeabi_ldivmod+0x2c>)
 8000550:	a101      	add	r1, pc, #4	; (adr r1, 8000558 <__aeabi_ldivmod+0x2c>)
 8000552:	1840      	adds	r0, r0, r1
 8000554:	9002      	str	r0, [sp, #8]
 8000556:	bd03      	pop	{r0, r1, pc}
 8000558:	fffffee1 	.word	0xfffffee1
 800055c:	b403      	push	{r0, r1}
 800055e:	4668      	mov	r0, sp
 8000560:	b501      	push	{r0, lr}
 8000562:	9802      	ldr	r0, [sp, #8]
 8000564:	f000 f98a 	bl	800087c <__gnu_ldivmod_helper>
 8000568:	9b01      	ldr	r3, [sp, #4]
 800056a:	469e      	mov	lr, r3
 800056c:	b002      	add	sp, #8
 800056e:	bc0c      	pop	{r2, r3}
 8000570:	4770      	bx	lr
 8000572:	46c0      	nop			; (mov r8, r8)

08000574 <__aeabi_uldivmod>:
 8000574:	2b00      	cmp	r3, #0
 8000576:	d111      	bne.n	800059c <__aeabi_uldivmod+0x28>
 8000578:	2a00      	cmp	r2, #0
 800057a:	d10f      	bne.n	800059c <__aeabi_uldivmod+0x28>
 800057c:	2900      	cmp	r1, #0
 800057e:	d100      	bne.n	8000582 <__aeabi_uldivmod+0xe>
 8000580:	2800      	cmp	r0, #0
 8000582:	d002      	beq.n	800058a <__aeabi_uldivmod+0x16>
 8000584:	2100      	movs	r1, #0
 8000586:	43c9      	mvns	r1, r1
 8000588:	1c08      	adds	r0, r1, #0
 800058a:	b407      	push	{r0, r1, r2}
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <__aeabi_uldivmod+0x24>)
 800058e:	a102      	add	r1, pc, #8	; (adr r1, 8000598 <__aeabi_uldivmod+0x24>)
 8000590:	1840      	adds	r0, r0, r1
 8000592:	9002      	str	r0, [sp, #8]
 8000594:	bd03      	pop	{r0, r1, pc}
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	fffffea1 	.word	0xfffffea1
 800059c:	b403      	push	{r0, r1}
 800059e:	4668      	mov	r0, sp
 80005a0:	b501      	push	{r0, lr}
 80005a2:	9802      	ldr	r0, [sp, #8]
 80005a4:	f000 f89e 	bl	80006e4 <__udivmoddi4>
 80005a8:	9b01      	ldr	r3, [sp, #4]
 80005aa:	469e      	mov	lr, r3
 80005ac:	b002      	add	sp, #8
 80005ae:	bc0c      	pop	{r2, r3}
 80005b0:	4770      	bx	lr
 80005b2:	46c0      	nop			; (mov r8, r8)

080005b4 <__aeabi_lmul>:
 80005b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005b6:	0415      	lsls	r5, r2, #16
 80005b8:	0c2d      	lsrs	r5, r5, #16
 80005ba:	000f      	movs	r7, r1
 80005bc:	0001      	movs	r1, r0
 80005be:	002e      	movs	r6, r5
 80005c0:	46c6      	mov	lr, r8
 80005c2:	4684      	mov	ip, r0
 80005c4:	0400      	lsls	r0, r0, #16
 80005c6:	0c14      	lsrs	r4, r2, #16
 80005c8:	0c00      	lsrs	r0, r0, #16
 80005ca:	0c09      	lsrs	r1, r1, #16
 80005cc:	4346      	muls	r6, r0
 80005ce:	434d      	muls	r5, r1
 80005d0:	4360      	muls	r0, r4
 80005d2:	4361      	muls	r1, r4
 80005d4:	1940      	adds	r0, r0, r5
 80005d6:	0c34      	lsrs	r4, r6, #16
 80005d8:	1824      	adds	r4, r4, r0
 80005da:	b500      	push	{lr}
 80005dc:	42a5      	cmp	r5, r4
 80005de:	d903      	bls.n	80005e8 <__aeabi_lmul+0x34>
 80005e0:	2080      	movs	r0, #128	; 0x80
 80005e2:	0240      	lsls	r0, r0, #9
 80005e4:	4680      	mov	r8, r0
 80005e6:	4441      	add	r1, r8
 80005e8:	0c25      	lsrs	r5, r4, #16
 80005ea:	186d      	adds	r5, r5, r1
 80005ec:	4661      	mov	r1, ip
 80005ee:	4359      	muls	r1, r3
 80005f0:	437a      	muls	r2, r7
 80005f2:	0430      	lsls	r0, r6, #16
 80005f4:	1949      	adds	r1, r1, r5
 80005f6:	0424      	lsls	r4, r4, #16
 80005f8:	0c00      	lsrs	r0, r0, #16
 80005fa:	1820      	adds	r0, r4, r0
 80005fc:	1889      	adds	r1, r1, r2
 80005fe:	bc80      	pop	{r7}
 8000600:	46b8      	mov	r8, r7
 8000602:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000604 <__aeabi_d2uiz>:
 8000604:	b570      	push	{r4, r5, r6, lr}
 8000606:	2200      	movs	r2, #0
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <__aeabi_d2uiz+0x38>)
 800060a:	0004      	movs	r4, r0
 800060c:	000d      	movs	r5, r1
 800060e:	f7ff ff49 	bl	80004a4 <__aeabi_dcmpge>
 8000612:	2800      	cmp	r0, #0
 8000614:	d104      	bne.n	8000620 <__aeabi_d2uiz+0x1c>
 8000616:	0020      	movs	r0, r4
 8000618:	0029      	movs	r1, r5
 800061a:	f002 fbbf 	bl	8002d9c <__aeabi_d2iz>
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <__aeabi_d2uiz+0x38>)
 8000622:	2200      	movs	r2, #0
 8000624:	0020      	movs	r0, r4
 8000626:	0029      	movs	r1, r5
 8000628:	f002 f808 	bl	800263c <__aeabi_dsub>
 800062c:	f002 fbb6 	bl	8002d9c <__aeabi_d2iz>
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	061b      	lsls	r3, r3, #24
 8000634:	469c      	mov	ip, r3
 8000636:	4460      	add	r0, ip
 8000638:	e7f1      	b.n	800061e <__aeabi_d2uiz+0x1a>
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	41e00000 	.word	0x41e00000

08000640 <__aeabi_d2lz>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	0005      	movs	r5, r0
 8000644:	000c      	movs	r4, r1
 8000646:	2200      	movs	r2, #0
 8000648:	2300      	movs	r3, #0
 800064a:	0028      	movs	r0, r5
 800064c:	0021      	movs	r1, r4
 800064e:	f7ff ff0b 	bl	8000468 <__aeabi_dcmplt>
 8000652:	2800      	cmp	r0, #0
 8000654:	d108      	bne.n	8000668 <__aeabi_d2lz+0x28>
 8000656:	0028      	movs	r0, r5
 8000658:	0021      	movs	r1, r4
 800065a:	f000 f80f 	bl	800067c <__aeabi_d2ulz>
 800065e:	0002      	movs	r2, r0
 8000660:	000b      	movs	r3, r1
 8000662:	0010      	movs	r0, r2
 8000664:	0019      	movs	r1, r3
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	061b      	lsls	r3, r3, #24
 800066c:	18e1      	adds	r1, r4, r3
 800066e:	0028      	movs	r0, r5
 8000670:	f000 f804 	bl	800067c <__aeabi_d2ulz>
 8000674:	2300      	movs	r3, #0
 8000676:	4242      	negs	r2, r0
 8000678:	418b      	sbcs	r3, r1
 800067a:	e7f2      	b.n	8000662 <__aeabi_d2lz+0x22>

0800067c <__aeabi_d2ulz>:
 800067c:	b570      	push	{r4, r5, r6, lr}
 800067e:	2200      	movs	r2, #0
 8000680:	4b0b      	ldr	r3, [pc, #44]	; (80006b0 <__aeabi_d2ulz+0x34>)
 8000682:	000d      	movs	r5, r1
 8000684:	0004      	movs	r4, r0
 8000686:	f001 fd6d 	bl	8002164 <__aeabi_dmul>
 800068a:	f7ff ffbb 	bl	8000604 <__aeabi_d2uiz>
 800068e:	0006      	movs	r6, r0
 8000690:	f002 fbea 	bl	8002e68 <__aeabi_ui2d>
 8000694:	2200      	movs	r2, #0
 8000696:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <__aeabi_d2ulz+0x38>)
 8000698:	f001 fd64 	bl	8002164 <__aeabi_dmul>
 800069c:	0002      	movs	r2, r0
 800069e:	000b      	movs	r3, r1
 80006a0:	0020      	movs	r0, r4
 80006a2:	0029      	movs	r1, r5
 80006a4:	f001 ffca 	bl	800263c <__aeabi_dsub>
 80006a8:	f7ff ffac 	bl	8000604 <__aeabi_d2uiz>
 80006ac:	0031      	movs	r1, r6
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	3df00000 	.word	0x3df00000
 80006b4:	41f00000 	.word	0x41f00000

080006b8 <__aeabi_l2d>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	0006      	movs	r6, r0
 80006bc:	0008      	movs	r0, r1
 80006be:	f002 fba3 	bl	8002e08 <__aeabi_i2d>
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <__aeabi_l2d+0x28>)
 80006c6:	f001 fd4d 	bl	8002164 <__aeabi_dmul>
 80006ca:	000d      	movs	r5, r1
 80006cc:	0004      	movs	r4, r0
 80006ce:	0030      	movs	r0, r6
 80006d0:	f002 fbca 	bl	8002e68 <__aeabi_ui2d>
 80006d4:	002b      	movs	r3, r5
 80006d6:	0022      	movs	r2, r4
 80006d8:	f000 fdd4 	bl	8001284 <__aeabi_dadd>
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	41f00000 	.word	0x41f00000

080006e4 <__udivmoddi4>:
 80006e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006e6:	4657      	mov	r7, sl
 80006e8:	464e      	mov	r6, r9
 80006ea:	4645      	mov	r5, r8
 80006ec:	46de      	mov	lr, fp
 80006ee:	b5e0      	push	{r5, r6, r7, lr}
 80006f0:	0004      	movs	r4, r0
 80006f2:	000d      	movs	r5, r1
 80006f4:	4692      	mov	sl, r2
 80006f6:	4699      	mov	r9, r3
 80006f8:	b083      	sub	sp, #12
 80006fa:	428b      	cmp	r3, r1
 80006fc:	d830      	bhi.n	8000760 <__udivmoddi4+0x7c>
 80006fe:	d02d      	beq.n	800075c <__udivmoddi4+0x78>
 8000700:	4649      	mov	r1, r9
 8000702:	4650      	mov	r0, sl
 8000704:	f002 fcc4 	bl	8003090 <__clzdi2>
 8000708:	0029      	movs	r1, r5
 800070a:	0006      	movs	r6, r0
 800070c:	0020      	movs	r0, r4
 800070e:	f002 fcbf 	bl	8003090 <__clzdi2>
 8000712:	1a33      	subs	r3, r6, r0
 8000714:	4698      	mov	r8, r3
 8000716:	3b20      	subs	r3, #32
 8000718:	469b      	mov	fp, r3
 800071a:	d433      	bmi.n	8000784 <__udivmoddi4+0xa0>
 800071c:	465a      	mov	r2, fp
 800071e:	4653      	mov	r3, sl
 8000720:	4093      	lsls	r3, r2
 8000722:	4642      	mov	r2, r8
 8000724:	001f      	movs	r7, r3
 8000726:	4653      	mov	r3, sl
 8000728:	4093      	lsls	r3, r2
 800072a:	001e      	movs	r6, r3
 800072c:	42af      	cmp	r7, r5
 800072e:	d83a      	bhi.n	80007a6 <__udivmoddi4+0xc2>
 8000730:	42af      	cmp	r7, r5
 8000732:	d100      	bne.n	8000736 <__udivmoddi4+0x52>
 8000734:	e078      	b.n	8000828 <__udivmoddi4+0x144>
 8000736:	465b      	mov	r3, fp
 8000738:	1ba4      	subs	r4, r4, r6
 800073a:	41bd      	sbcs	r5, r7
 800073c:	2b00      	cmp	r3, #0
 800073e:	da00      	bge.n	8000742 <__udivmoddi4+0x5e>
 8000740:	e075      	b.n	800082e <__udivmoddi4+0x14a>
 8000742:	2200      	movs	r2, #0
 8000744:	2300      	movs	r3, #0
 8000746:	9200      	str	r2, [sp, #0]
 8000748:	9301      	str	r3, [sp, #4]
 800074a:	2301      	movs	r3, #1
 800074c:	465a      	mov	r2, fp
 800074e:	4093      	lsls	r3, r2
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	2301      	movs	r3, #1
 8000754:	4642      	mov	r2, r8
 8000756:	4093      	lsls	r3, r2
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	e028      	b.n	80007ae <__udivmoddi4+0xca>
 800075c:	4282      	cmp	r2, r0
 800075e:	d9cf      	bls.n	8000700 <__udivmoddi4+0x1c>
 8000760:	2200      	movs	r2, #0
 8000762:	2300      	movs	r3, #0
 8000764:	9200      	str	r2, [sp, #0]
 8000766:	9301      	str	r3, [sp, #4]
 8000768:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <__udivmoddi4+0x8e>
 800076e:	601c      	str	r4, [r3, #0]
 8000770:	605d      	str	r5, [r3, #4]
 8000772:	9800      	ldr	r0, [sp, #0]
 8000774:	9901      	ldr	r1, [sp, #4]
 8000776:	b003      	add	sp, #12
 8000778:	bcf0      	pop	{r4, r5, r6, r7}
 800077a:	46bb      	mov	fp, r7
 800077c:	46b2      	mov	sl, r6
 800077e:	46a9      	mov	r9, r5
 8000780:	46a0      	mov	r8, r4
 8000782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000784:	4642      	mov	r2, r8
 8000786:	2320      	movs	r3, #32
 8000788:	1a9b      	subs	r3, r3, r2
 800078a:	4652      	mov	r2, sl
 800078c:	40da      	lsrs	r2, r3
 800078e:	4641      	mov	r1, r8
 8000790:	0013      	movs	r3, r2
 8000792:	464a      	mov	r2, r9
 8000794:	408a      	lsls	r2, r1
 8000796:	0017      	movs	r7, r2
 8000798:	4642      	mov	r2, r8
 800079a:	431f      	orrs	r7, r3
 800079c:	4653      	mov	r3, sl
 800079e:	4093      	lsls	r3, r2
 80007a0:	001e      	movs	r6, r3
 80007a2:	42af      	cmp	r7, r5
 80007a4:	d9c4      	bls.n	8000730 <__udivmoddi4+0x4c>
 80007a6:	2200      	movs	r2, #0
 80007a8:	2300      	movs	r3, #0
 80007aa:	9200      	str	r2, [sp, #0]
 80007ac:	9301      	str	r3, [sp, #4]
 80007ae:	4643      	mov	r3, r8
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d0d9      	beq.n	8000768 <__udivmoddi4+0x84>
 80007b4:	07fb      	lsls	r3, r7, #31
 80007b6:	0872      	lsrs	r2, r6, #1
 80007b8:	431a      	orrs	r2, r3
 80007ba:	4646      	mov	r6, r8
 80007bc:	087b      	lsrs	r3, r7, #1
 80007be:	e00e      	b.n	80007de <__udivmoddi4+0xfa>
 80007c0:	42ab      	cmp	r3, r5
 80007c2:	d101      	bne.n	80007c8 <__udivmoddi4+0xe4>
 80007c4:	42a2      	cmp	r2, r4
 80007c6:	d80c      	bhi.n	80007e2 <__udivmoddi4+0xfe>
 80007c8:	1aa4      	subs	r4, r4, r2
 80007ca:	419d      	sbcs	r5, r3
 80007cc:	2001      	movs	r0, #1
 80007ce:	1924      	adds	r4, r4, r4
 80007d0:	416d      	adcs	r5, r5
 80007d2:	2100      	movs	r1, #0
 80007d4:	3e01      	subs	r6, #1
 80007d6:	1824      	adds	r4, r4, r0
 80007d8:	414d      	adcs	r5, r1
 80007da:	2e00      	cmp	r6, #0
 80007dc:	d006      	beq.n	80007ec <__udivmoddi4+0x108>
 80007de:	42ab      	cmp	r3, r5
 80007e0:	d9ee      	bls.n	80007c0 <__udivmoddi4+0xdc>
 80007e2:	3e01      	subs	r6, #1
 80007e4:	1924      	adds	r4, r4, r4
 80007e6:	416d      	adcs	r5, r5
 80007e8:	2e00      	cmp	r6, #0
 80007ea:	d1f8      	bne.n	80007de <__udivmoddi4+0xfa>
 80007ec:	9800      	ldr	r0, [sp, #0]
 80007ee:	9901      	ldr	r1, [sp, #4]
 80007f0:	465b      	mov	r3, fp
 80007f2:	1900      	adds	r0, r0, r4
 80007f4:	4169      	adcs	r1, r5
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	db24      	blt.n	8000844 <__udivmoddi4+0x160>
 80007fa:	002b      	movs	r3, r5
 80007fc:	465a      	mov	r2, fp
 80007fe:	4644      	mov	r4, r8
 8000800:	40d3      	lsrs	r3, r2
 8000802:	002a      	movs	r2, r5
 8000804:	40e2      	lsrs	r2, r4
 8000806:	001c      	movs	r4, r3
 8000808:	465b      	mov	r3, fp
 800080a:	0015      	movs	r5, r2
 800080c:	2b00      	cmp	r3, #0
 800080e:	db2a      	blt.n	8000866 <__udivmoddi4+0x182>
 8000810:	0026      	movs	r6, r4
 8000812:	409e      	lsls	r6, r3
 8000814:	0033      	movs	r3, r6
 8000816:	0026      	movs	r6, r4
 8000818:	4647      	mov	r7, r8
 800081a:	40be      	lsls	r6, r7
 800081c:	0032      	movs	r2, r6
 800081e:	1a80      	subs	r0, r0, r2
 8000820:	4199      	sbcs	r1, r3
 8000822:	9000      	str	r0, [sp, #0]
 8000824:	9101      	str	r1, [sp, #4]
 8000826:	e79f      	b.n	8000768 <__udivmoddi4+0x84>
 8000828:	42a3      	cmp	r3, r4
 800082a:	d8bc      	bhi.n	80007a6 <__udivmoddi4+0xc2>
 800082c:	e783      	b.n	8000736 <__udivmoddi4+0x52>
 800082e:	4642      	mov	r2, r8
 8000830:	2320      	movs	r3, #32
 8000832:	2100      	movs	r1, #0
 8000834:	1a9b      	subs	r3, r3, r2
 8000836:	2200      	movs	r2, #0
 8000838:	9100      	str	r1, [sp, #0]
 800083a:	9201      	str	r2, [sp, #4]
 800083c:	2201      	movs	r2, #1
 800083e:	40da      	lsrs	r2, r3
 8000840:	9201      	str	r2, [sp, #4]
 8000842:	e786      	b.n	8000752 <__udivmoddi4+0x6e>
 8000844:	4642      	mov	r2, r8
 8000846:	2320      	movs	r3, #32
 8000848:	1a9b      	subs	r3, r3, r2
 800084a:	002a      	movs	r2, r5
 800084c:	4646      	mov	r6, r8
 800084e:	409a      	lsls	r2, r3
 8000850:	0023      	movs	r3, r4
 8000852:	40f3      	lsrs	r3, r6
 8000854:	4644      	mov	r4, r8
 8000856:	4313      	orrs	r3, r2
 8000858:	002a      	movs	r2, r5
 800085a:	40e2      	lsrs	r2, r4
 800085c:	001c      	movs	r4, r3
 800085e:	465b      	mov	r3, fp
 8000860:	0015      	movs	r5, r2
 8000862:	2b00      	cmp	r3, #0
 8000864:	dad4      	bge.n	8000810 <__udivmoddi4+0x12c>
 8000866:	4642      	mov	r2, r8
 8000868:	002f      	movs	r7, r5
 800086a:	2320      	movs	r3, #32
 800086c:	0026      	movs	r6, r4
 800086e:	4097      	lsls	r7, r2
 8000870:	1a9b      	subs	r3, r3, r2
 8000872:	40de      	lsrs	r6, r3
 8000874:	003b      	movs	r3, r7
 8000876:	4333      	orrs	r3, r6
 8000878:	e7cd      	b.n	8000816 <__udivmoddi4+0x132>
 800087a:	46c0      	nop			; (mov r8, r8)

0800087c <__gnu_ldivmod_helper>:
 800087c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800087e:	46ce      	mov	lr, r9
 8000880:	4647      	mov	r7, r8
 8000882:	b580      	push	{r7, lr}
 8000884:	4691      	mov	r9, r2
 8000886:	4698      	mov	r8, r3
 8000888:	0004      	movs	r4, r0
 800088a:	000d      	movs	r5, r1
 800088c:	f002 fc0c 	bl	80030a8 <__divdi3>
 8000890:	0007      	movs	r7, r0
 8000892:	000e      	movs	r6, r1
 8000894:	0002      	movs	r2, r0
 8000896:	000b      	movs	r3, r1
 8000898:	4648      	mov	r0, r9
 800089a:	4641      	mov	r1, r8
 800089c:	f7ff fe8a 	bl	80005b4 <__aeabi_lmul>
 80008a0:	1a24      	subs	r4, r4, r0
 80008a2:	418d      	sbcs	r5, r1
 80008a4:	9b08      	ldr	r3, [sp, #32]
 80008a6:	0038      	movs	r0, r7
 80008a8:	0031      	movs	r1, r6
 80008aa:	601c      	str	r4, [r3, #0]
 80008ac:	605d      	str	r5, [r3, #4]
 80008ae:	bcc0      	pop	{r6, r7}
 80008b0:	46b9      	mov	r9, r7
 80008b2:	46b0      	mov	r8, r6
 80008b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)

080008b8 <__aeabi_fadd>:
 80008b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ba:	4646      	mov	r6, r8
 80008bc:	46d6      	mov	lr, sl
 80008be:	464f      	mov	r7, r9
 80008c0:	024d      	lsls	r5, r1, #9
 80008c2:	0242      	lsls	r2, r0, #9
 80008c4:	b5c0      	push	{r6, r7, lr}
 80008c6:	0a52      	lsrs	r2, r2, #9
 80008c8:	0a6e      	lsrs	r6, r5, #9
 80008ca:	0047      	lsls	r7, r0, #1
 80008cc:	46b0      	mov	r8, r6
 80008ce:	0e3f      	lsrs	r7, r7, #24
 80008d0:	004e      	lsls	r6, r1, #1
 80008d2:	0fc4      	lsrs	r4, r0, #31
 80008d4:	00d0      	lsls	r0, r2, #3
 80008d6:	4694      	mov	ip, r2
 80008d8:	003b      	movs	r3, r7
 80008da:	4682      	mov	sl, r0
 80008dc:	0e36      	lsrs	r6, r6, #24
 80008de:	0fc9      	lsrs	r1, r1, #31
 80008e0:	09ad      	lsrs	r5, r5, #6
 80008e2:	428c      	cmp	r4, r1
 80008e4:	d06d      	beq.n	80009c2 <__aeabi_fadd+0x10a>
 80008e6:	1bb8      	subs	r0, r7, r6
 80008e8:	4681      	mov	r9, r0
 80008ea:	2800      	cmp	r0, #0
 80008ec:	dd4d      	ble.n	800098a <__aeabi_fadd+0xd2>
 80008ee:	2e00      	cmp	r6, #0
 80008f0:	d100      	bne.n	80008f4 <__aeabi_fadd+0x3c>
 80008f2:	e088      	b.n	8000a06 <__aeabi_fadd+0x14e>
 80008f4:	2fff      	cmp	r7, #255	; 0xff
 80008f6:	d05a      	beq.n	80009ae <__aeabi_fadd+0xf6>
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	04db      	lsls	r3, r3, #19
 80008fc:	431d      	orrs	r5, r3
 80008fe:	464b      	mov	r3, r9
 8000900:	2201      	movs	r2, #1
 8000902:	2b1b      	cmp	r3, #27
 8000904:	dc0a      	bgt.n	800091c <__aeabi_fadd+0x64>
 8000906:	002b      	movs	r3, r5
 8000908:	464a      	mov	r2, r9
 800090a:	4649      	mov	r1, r9
 800090c:	40d3      	lsrs	r3, r2
 800090e:	2220      	movs	r2, #32
 8000910:	1a52      	subs	r2, r2, r1
 8000912:	4095      	lsls	r5, r2
 8000914:	002a      	movs	r2, r5
 8000916:	1e55      	subs	r5, r2, #1
 8000918:	41aa      	sbcs	r2, r5
 800091a:	431a      	orrs	r2, r3
 800091c:	4653      	mov	r3, sl
 800091e:	1a9a      	subs	r2, r3, r2
 8000920:	0153      	lsls	r3, r2, #5
 8000922:	d400      	bmi.n	8000926 <__aeabi_fadd+0x6e>
 8000924:	e0b9      	b.n	8000a9a <__aeabi_fadd+0x1e2>
 8000926:	0192      	lsls	r2, r2, #6
 8000928:	0996      	lsrs	r6, r2, #6
 800092a:	0030      	movs	r0, r6
 800092c:	f002 fb92 	bl	8003054 <__clzsi2>
 8000930:	3805      	subs	r0, #5
 8000932:	4086      	lsls	r6, r0
 8000934:	4287      	cmp	r7, r0
 8000936:	dd00      	ble.n	800093a <__aeabi_fadd+0x82>
 8000938:	e0d4      	b.n	8000ae4 <__aeabi_fadd+0x22c>
 800093a:	0033      	movs	r3, r6
 800093c:	1bc7      	subs	r7, r0, r7
 800093e:	2020      	movs	r0, #32
 8000940:	3701      	adds	r7, #1
 8000942:	40fb      	lsrs	r3, r7
 8000944:	1bc7      	subs	r7, r0, r7
 8000946:	40be      	lsls	r6, r7
 8000948:	0032      	movs	r2, r6
 800094a:	1e56      	subs	r6, r2, #1
 800094c:	41b2      	sbcs	r2, r6
 800094e:	2700      	movs	r7, #0
 8000950:	431a      	orrs	r2, r3
 8000952:	0753      	lsls	r3, r2, #29
 8000954:	d004      	beq.n	8000960 <__aeabi_fadd+0xa8>
 8000956:	230f      	movs	r3, #15
 8000958:	4013      	ands	r3, r2
 800095a:	2b04      	cmp	r3, #4
 800095c:	d000      	beq.n	8000960 <__aeabi_fadd+0xa8>
 800095e:	3204      	adds	r2, #4
 8000960:	0153      	lsls	r3, r2, #5
 8000962:	d400      	bmi.n	8000966 <__aeabi_fadd+0xae>
 8000964:	e09c      	b.n	8000aa0 <__aeabi_fadd+0x1e8>
 8000966:	1c7b      	adds	r3, r7, #1
 8000968:	2ffe      	cmp	r7, #254	; 0xfe
 800096a:	d100      	bne.n	800096e <__aeabi_fadd+0xb6>
 800096c:	e09a      	b.n	8000aa4 <__aeabi_fadd+0x1ec>
 800096e:	0192      	lsls	r2, r2, #6
 8000970:	0a52      	lsrs	r2, r2, #9
 8000972:	4694      	mov	ip, r2
 8000974:	b2db      	uxtb	r3, r3
 8000976:	05d8      	lsls	r0, r3, #23
 8000978:	4663      	mov	r3, ip
 800097a:	07e4      	lsls	r4, r4, #31
 800097c:	4318      	orrs	r0, r3
 800097e:	4320      	orrs	r0, r4
 8000980:	bce0      	pop	{r5, r6, r7}
 8000982:	46ba      	mov	sl, r7
 8000984:	46b1      	mov	r9, r6
 8000986:	46a8      	mov	r8, r5
 8000988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800098a:	2800      	cmp	r0, #0
 800098c:	d049      	beq.n	8000a22 <__aeabi_fadd+0x16a>
 800098e:	1bf3      	subs	r3, r6, r7
 8000990:	2f00      	cmp	r7, #0
 8000992:	d000      	beq.n	8000996 <__aeabi_fadd+0xde>
 8000994:	e0b6      	b.n	8000b04 <__aeabi_fadd+0x24c>
 8000996:	4652      	mov	r2, sl
 8000998:	2a00      	cmp	r2, #0
 800099a:	d060      	beq.n	8000a5e <__aeabi_fadd+0x1a6>
 800099c:	3b01      	subs	r3, #1
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d100      	bne.n	80009a4 <__aeabi_fadd+0xec>
 80009a2:	e0fc      	b.n	8000b9e <__aeabi_fadd+0x2e6>
 80009a4:	2eff      	cmp	r6, #255	; 0xff
 80009a6:	d000      	beq.n	80009aa <__aeabi_fadd+0xf2>
 80009a8:	e0b4      	b.n	8000b14 <__aeabi_fadd+0x25c>
 80009aa:	000c      	movs	r4, r1
 80009ac:	4642      	mov	r2, r8
 80009ae:	2a00      	cmp	r2, #0
 80009b0:	d078      	beq.n	8000aa4 <__aeabi_fadd+0x1ec>
 80009b2:	2080      	movs	r0, #128	; 0x80
 80009b4:	03c0      	lsls	r0, r0, #15
 80009b6:	4310      	orrs	r0, r2
 80009b8:	0242      	lsls	r2, r0, #9
 80009ba:	0a53      	lsrs	r3, r2, #9
 80009bc:	469c      	mov	ip, r3
 80009be:	23ff      	movs	r3, #255	; 0xff
 80009c0:	e7d9      	b.n	8000976 <__aeabi_fadd+0xbe>
 80009c2:	1bb9      	subs	r1, r7, r6
 80009c4:	2900      	cmp	r1, #0
 80009c6:	dd71      	ble.n	8000aac <__aeabi_fadd+0x1f4>
 80009c8:	2e00      	cmp	r6, #0
 80009ca:	d03f      	beq.n	8000a4c <__aeabi_fadd+0x194>
 80009cc:	2fff      	cmp	r7, #255	; 0xff
 80009ce:	d0ee      	beq.n	80009ae <__aeabi_fadd+0xf6>
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	04db      	lsls	r3, r3, #19
 80009d4:	431d      	orrs	r5, r3
 80009d6:	2201      	movs	r2, #1
 80009d8:	291b      	cmp	r1, #27
 80009da:	dc07      	bgt.n	80009ec <__aeabi_fadd+0x134>
 80009dc:	002a      	movs	r2, r5
 80009de:	2320      	movs	r3, #32
 80009e0:	40ca      	lsrs	r2, r1
 80009e2:	1a59      	subs	r1, r3, r1
 80009e4:	408d      	lsls	r5, r1
 80009e6:	1e6b      	subs	r3, r5, #1
 80009e8:	419d      	sbcs	r5, r3
 80009ea:	432a      	orrs	r2, r5
 80009ec:	4452      	add	r2, sl
 80009ee:	0153      	lsls	r3, r2, #5
 80009f0:	d553      	bpl.n	8000a9a <__aeabi_fadd+0x1e2>
 80009f2:	3701      	adds	r7, #1
 80009f4:	2fff      	cmp	r7, #255	; 0xff
 80009f6:	d055      	beq.n	8000aa4 <__aeabi_fadd+0x1ec>
 80009f8:	2301      	movs	r3, #1
 80009fa:	497b      	ldr	r1, [pc, #492]	; (8000be8 <__aeabi_fadd+0x330>)
 80009fc:	4013      	ands	r3, r2
 80009fe:	0852      	lsrs	r2, r2, #1
 8000a00:	400a      	ands	r2, r1
 8000a02:	431a      	orrs	r2, r3
 8000a04:	e7a5      	b.n	8000952 <__aeabi_fadd+0x9a>
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d02c      	beq.n	8000a64 <__aeabi_fadd+0x1ac>
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	425b      	negs	r3, r3
 8000a0e:	469c      	mov	ip, r3
 8000a10:	44e1      	add	r9, ip
 8000a12:	464b      	mov	r3, r9
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d100      	bne.n	8000a1a <__aeabi_fadd+0x162>
 8000a18:	e0ad      	b.n	8000b76 <__aeabi_fadd+0x2be>
 8000a1a:	2fff      	cmp	r7, #255	; 0xff
 8000a1c:	d000      	beq.n	8000a20 <__aeabi_fadd+0x168>
 8000a1e:	e76e      	b.n	80008fe <__aeabi_fadd+0x46>
 8000a20:	e7c5      	b.n	80009ae <__aeabi_fadd+0xf6>
 8000a22:	20fe      	movs	r0, #254	; 0xfe
 8000a24:	1c7e      	adds	r6, r7, #1
 8000a26:	4230      	tst	r0, r6
 8000a28:	d160      	bne.n	8000aec <__aeabi_fadd+0x234>
 8000a2a:	2f00      	cmp	r7, #0
 8000a2c:	d000      	beq.n	8000a30 <__aeabi_fadd+0x178>
 8000a2e:	e093      	b.n	8000b58 <__aeabi_fadd+0x2a0>
 8000a30:	4652      	mov	r2, sl
 8000a32:	2a00      	cmp	r2, #0
 8000a34:	d100      	bne.n	8000a38 <__aeabi_fadd+0x180>
 8000a36:	e0b6      	b.n	8000ba6 <__aeabi_fadd+0x2ee>
 8000a38:	2d00      	cmp	r5, #0
 8000a3a:	d09c      	beq.n	8000976 <__aeabi_fadd+0xbe>
 8000a3c:	1b52      	subs	r2, r2, r5
 8000a3e:	0150      	lsls	r0, r2, #5
 8000a40:	d400      	bmi.n	8000a44 <__aeabi_fadd+0x18c>
 8000a42:	e0c3      	b.n	8000bcc <__aeabi_fadd+0x314>
 8000a44:	4653      	mov	r3, sl
 8000a46:	000c      	movs	r4, r1
 8000a48:	1aea      	subs	r2, r5, r3
 8000a4a:	e782      	b.n	8000952 <__aeabi_fadd+0x9a>
 8000a4c:	2d00      	cmp	r5, #0
 8000a4e:	d009      	beq.n	8000a64 <__aeabi_fadd+0x1ac>
 8000a50:	3901      	subs	r1, #1
 8000a52:	2900      	cmp	r1, #0
 8000a54:	d100      	bne.n	8000a58 <__aeabi_fadd+0x1a0>
 8000a56:	e08b      	b.n	8000b70 <__aeabi_fadd+0x2b8>
 8000a58:	2fff      	cmp	r7, #255	; 0xff
 8000a5a:	d1bc      	bne.n	80009d6 <__aeabi_fadd+0x11e>
 8000a5c:	e7a7      	b.n	80009ae <__aeabi_fadd+0xf6>
 8000a5e:	000c      	movs	r4, r1
 8000a60:	4642      	mov	r2, r8
 8000a62:	0037      	movs	r7, r6
 8000a64:	2fff      	cmp	r7, #255	; 0xff
 8000a66:	d0a2      	beq.n	80009ae <__aeabi_fadd+0xf6>
 8000a68:	0252      	lsls	r2, r2, #9
 8000a6a:	0a53      	lsrs	r3, r2, #9
 8000a6c:	469c      	mov	ip, r3
 8000a6e:	b2fb      	uxtb	r3, r7
 8000a70:	e781      	b.n	8000976 <__aeabi_fadd+0xbe>
 8000a72:	21fe      	movs	r1, #254	; 0xfe
 8000a74:	3701      	adds	r7, #1
 8000a76:	4239      	tst	r1, r7
 8000a78:	d165      	bne.n	8000b46 <__aeabi_fadd+0x28e>
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d17e      	bne.n	8000b7c <__aeabi_fadd+0x2c4>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	d100      	bne.n	8000a84 <__aeabi_fadd+0x1cc>
 8000a82:	e0aa      	b.n	8000bda <__aeabi_fadd+0x322>
 8000a84:	2d00      	cmp	r5, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fadd+0x1d2>
 8000a88:	e775      	b.n	8000976 <__aeabi_fadd+0xbe>
 8000a8a:	002a      	movs	r2, r5
 8000a8c:	4452      	add	r2, sl
 8000a8e:	2700      	movs	r7, #0
 8000a90:	0153      	lsls	r3, r2, #5
 8000a92:	d502      	bpl.n	8000a9a <__aeabi_fadd+0x1e2>
 8000a94:	4b55      	ldr	r3, [pc, #340]	; (8000bec <__aeabi_fadd+0x334>)
 8000a96:	3701      	adds	r7, #1
 8000a98:	401a      	ands	r2, r3
 8000a9a:	0753      	lsls	r3, r2, #29
 8000a9c:	d000      	beq.n	8000aa0 <__aeabi_fadd+0x1e8>
 8000a9e:	e75a      	b.n	8000956 <__aeabi_fadd+0x9e>
 8000aa0:	08d2      	lsrs	r2, r2, #3
 8000aa2:	e7df      	b.n	8000a64 <__aeabi_fadd+0x1ac>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	23ff      	movs	r3, #255	; 0xff
 8000aa8:	4694      	mov	ip, r2
 8000aaa:	e764      	b.n	8000976 <__aeabi_fadd+0xbe>
 8000aac:	2900      	cmp	r1, #0
 8000aae:	d0e0      	beq.n	8000a72 <__aeabi_fadd+0x1ba>
 8000ab0:	1bf3      	subs	r3, r6, r7
 8000ab2:	2f00      	cmp	r7, #0
 8000ab4:	d03e      	beq.n	8000b34 <__aeabi_fadd+0x27c>
 8000ab6:	2eff      	cmp	r6, #255	; 0xff
 8000ab8:	d100      	bne.n	8000abc <__aeabi_fadd+0x204>
 8000aba:	e777      	b.n	80009ac <__aeabi_fadd+0xf4>
 8000abc:	2280      	movs	r2, #128	; 0x80
 8000abe:	0001      	movs	r1, r0
 8000ac0:	04d2      	lsls	r2, r2, #19
 8000ac2:	4311      	orrs	r1, r2
 8000ac4:	468a      	mov	sl, r1
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2b1b      	cmp	r3, #27
 8000aca:	dc08      	bgt.n	8000ade <__aeabi_fadd+0x226>
 8000acc:	4652      	mov	r2, sl
 8000ace:	2120      	movs	r1, #32
 8000ad0:	4650      	mov	r0, sl
 8000ad2:	40da      	lsrs	r2, r3
 8000ad4:	1acb      	subs	r3, r1, r3
 8000ad6:	4098      	lsls	r0, r3
 8000ad8:	1e43      	subs	r3, r0, #1
 8000ada:	4198      	sbcs	r0, r3
 8000adc:	4302      	orrs	r2, r0
 8000ade:	0037      	movs	r7, r6
 8000ae0:	1952      	adds	r2, r2, r5
 8000ae2:	e784      	b.n	80009ee <__aeabi_fadd+0x136>
 8000ae4:	4a41      	ldr	r2, [pc, #260]	; (8000bec <__aeabi_fadd+0x334>)
 8000ae6:	1a3f      	subs	r7, r7, r0
 8000ae8:	4032      	ands	r2, r6
 8000aea:	e732      	b.n	8000952 <__aeabi_fadd+0x9a>
 8000aec:	4653      	mov	r3, sl
 8000aee:	1b5e      	subs	r6, r3, r5
 8000af0:	0173      	lsls	r3, r6, #5
 8000af2:	d42d      	bmi.n	8000b50 <__aeabi_fadd+0x298>
 8000af4:	2e00      	cmp	r6, #0
 8000af6:	d000      	beq.n	8000afa <__aeabi_fadd+0x242>
 8000af8:	e717      	b.n	800092a <__aeabi_fadd+0x72>
 8000afa:	2200      	movs	r2, #0
 8000afc:	2400      	movs	r4, #0
 8000afe:	2300      	movs	r3, #0
 8000b00:	4694      	mov	ip, r2
 8000b02:	e738      	b.n	8000976 <__aeabi_fadd+0xbe>
 8000b04:	2eff      	cmp	r6, #255	; 0xff
 8000b06:	d100      	bne.n	8000b0a <__aeabi_fadd+0x252>
 8000b08:	e74f      	b.n	80009aa <__aeabi_fadd+0xf2>
 8000b0a:	2280      	movs	r2, #128	; 0x80
 8000b0c:	4650      	mov	r0, sl
 8000b0e:	04d2      	lsls	r2, r2, #19
 8000b10:	4310      	orrs	r0, r2
 8000b12:	4682      	mov	sl, r0
 8000b14:	2201      	movs	r2, #1
 8000b16:	2b1b      	cmp	r3, #27
 8000b18:	dc08      	bgt.n	8000b2c <__aeabi_fadd+0x274>
 8000b1a:	4652      	mov	r2, sl
 8000b1c:	2420      	movs	r4, #32
 8000b1e:	4650      	mov	r0, sl
 8000b20:	40da      	lsrs	r2, r3
 8000b22:	1ae3      	subs	r3, r4, r3
 8000b24:	4098      	lsls	r0, r3
 8000b26:	1e43      	subs	r3, r0, #1
 8000b28:	4198      	sbcs	r0, r3
 8000b2a:	4302      	orrs	r2, r0
 8000b2c:	000c      	movs	r4, r1
 8000b2e:	0037      	movs	r7, r6
 8000b30:	1aaa      	subs	r2, r5, r2
 8000b32:	e6f5      	b.n	8000920 <__aeabi_fadd+0x68>
 8000b34:	2800      	cmp	r0, #0
 8000b36:	d093      	beq.n	8000a60 <__aeabi_fadd+0x1a8>
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d04f      	beq.n	8000bde <__aeabi_fadd+0x326>
 8000b3e:	2eff      	cmp	r6, #255	; 0xff
 8000b40:	d1c1      	bne.n	8000ac6 <__aeabi_fadd+0x20e>
 8000b42:	4642      	mov	r2, r8
 8000b44:	e733      	b.n	80009ae <__aeabi_fadd+0xf6>
 8000b46:	2fff      	cmp	r7, #255	; 0xff
 8000b48:	d0ac      	beq.n	8000aa4 <__aeabi_fadd+0x1ec>
 8000b4a:	4455      	add	r5, sl
 8000b4c:	086a      	lsrs	r2, r5, #1
 8000b4e:	e7a4      	b.n	8000a9a <__aeabi_fadd+0x1e2>
 8000b50:	4653      	mov	r3, sl
 8000b52:	000c      	movs	r4, r1
 8000b54:	1aee      	subs	r6, r5, r3
 8000b56:	e6e8      	b.n	800092a <__aeabi_fadd+0x72>
 8000b58:	4653      	mov	r3, sl
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d128      	bne.n	8000bb0 <__aeabi_fadd+0x2f8>
 8000b5e:	2d00      	cmp	r5, #0
 8000b60:	d000      	beq.n	8000b64 <__aeabi_fadd+0x2ac>
 8000b62:	e722      	b.n	80009aa <__aeabi_fadd+0xf2>
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	03db      	lsls	r3, r3, #15
 8000b68:	469c      	mov	ip, r3
 8000b6a:	2400      	movs	r4, #0
 8000b6c:	23ff      	movs	r3, #255	; 0xff
 8000b6e:	e702      	b.n	8000976 <__aeabi_fadd+0xbe>
 8000b70:	002a      	movs	r2, r5
 8000b72:	4452      	add	r2, sl
 8000b74:	e73b      	b.n	80009ee <__aeabi_fadd+0x136>
 8000b76:	4653      	mov	r3, sl
 8000b78:	1b5a      	subs	r2, r3, r5
 8000b7a:	e6d1      	b.n	8000920 <__aeabi_fadd+0x68>
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	d100      	bne.n	8000b82 <__aeabi_fadd+0x2ca>
 8000b80:	e714      	b.n	80009ac <__aeabi_fadd+0xf4>
 8000b82:	2d00      	cmp	r5, #0
 8000b84:	d100      	bne.n	8000b88 <__aeabi_fadd+0x2d0>
 8000b86:	e712      	b.n	80009ae <__aeabi_fadd+0xf6>
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	03db      	lsls	r3, r3, #15
 8000b8c:	421a      	tst	r2, r3
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_fadd+0x2da>
 8000b90:	e70d      	b.n	80009ae <__aeabi_fadd+0xf6>
 8000b92:	4641      	mov	r1, r8
 8000b94:	4219      	tst	r1, r3
 8000b96:	d000      	beq.n	8000b9a <__aeabi_fadd+0x2e2>
 8000b98:	e709      	b.n	80009ae <__aeabi_fadd+0xf6>
 8000b9a:	4642      	mov	r2, r8
 8000b9c:	e707      	b.n	80009ae <__aeabi_fadd+0xf6>
 8000b9e:	000c      	movs	r4, r1
 8000ba0:	0037      	movs	r7, r6
 8000ba2:	1aaa      	subs	r2, r5, r2
 8000ba4:	e6bc      	b.n	8000920 <__aeabi_fadd+0x68>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	d013      	beq.n	8000bd2 <__aeabi_fadd+0x31a>
 8000baa:	000c      	movs	r4, r1
 8000bac:	46c4      	mov	ip, r8
 8000bae:	e6e2      	b.n	8000976 <__aeabi_fadd+0xbe>
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d100      	bne.n	8000bb6 <__aeabi_fadd+0x2fe>
 8000bb4:	e6fb      	b.n	80009ae <__aeabi_fadd+0xf6>
 8000bb6:	2380      	movs	r3, #128	; 0x80
 8000bb8:	03db      	lsls	r3, r3, #15
 8000bba:	421a      	tst	r2, r3
 8000bbc:	d100      	bne.n	8000bc0 <__aeabi_fadd+0x308>
 8000bbe:	e6f6      	b.n	80009ae <__aeabi_fadd+0xf6>
 8000bc0:	4640      	mov	r0, r8
 8000bc2:	4218      	tst	r0, r3
 8000bc4:	d000      	beq.n	8000bc8 <__aeabi_fadd+0x310>
 8000bc6:	e6f2      	b.n	80009ae <__aeabi_fadd+0xf6>
 8000bc8:	000c      	movs	r4, r1
 8000bca:	e6ef      	b.n	80009ac <__aeabi_fadd+0xf4>
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	d000      	beq.n	8000bd2 <__aeabi_fadd+0x31a>
 8000bd0:	e763      	b.n	8000a9a <__aeabi_fadd+0x1e2>
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2400      	movs	r4, #0
 8000bd6:	4694      	mov	ip, r2
 8000bd8:	e6cd      	b.n	8000976 <__aeabi_fadd+0xbe>
 8000bda:	46c4      	mov	ip, r8
 8000bdc:	e6cb      	b.n	8000976 <__aeabi_fadd+0xbe>
 8000bde:	002a      	movs	r2, r5
 8000be0:	0037      	movs	r7, r6
 8000be2:	4452      	add	r2, sl
 8000be4:	e703      	b.n	80009ee <__aeabi_fadd+0x136>
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	7dffffff 	.word	0x7dffffff
 8000bec:	fbffffff 	.word	0xfbffffff

08000bf0 <__aeabi_fdiv>:
 8000bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bf2:	464f      	mov	r7, r9
 8000bf4:	4646      	mov	r6, r8
 8000bf6:	46d6      	mov	lr, sl
 8000bf8:	0245      	lsls	r5, r0, #9
 8000bfa:	b5c0      	push	{r6, r7, lr}
 8000bfc:	0047      	lsls	r7, r0, #1
 8000bfe:	1c0c      	adds	r4, r1, #0
 8000c00:	0a6d      	lsrs	r5, r5, #9
 8000c02:	0e3f      	lsrs	r7, r7, #24
 8000c04:	0fc6      	lsrs	r6, r0, #31
 8000c06:	2f00      	cmp	r7, #0
 8000c08:	d066      	beq.n	8000cd8 <__aeabi_fdiv+0xe8>
 8000c0a:	2fff      	cmp	r7, #255	; 0xff
 8000c0c:	d06c      	beq.n	8000ce8 <__aeabi_fdiv+0xf8>
 8000c0e:	2300      	movs	r3, #0
 8000c10:	00ea      	lsls	r2, r5, #3
 8000c12:	2580      	movs	r5, #128	; 0x80
 8000c14:	4699      	mov	r9, r3
 8000c16:	469a      	mov	sl, r3
 8000c18:	04ed      	lsls	r5, r5, #19
 8000c1a:	4315      	orrs	r5, r2
 8000c1c:	3f7f      	subs	r7, #127	; 0x7f
 8000c1e:	0260      	lsls	r0, r4, #9
 8000c20:	0061      	lsls	r1, r4, #1
 8000c22:	0a43      	lsrs	r3, r0, #9
 8000c24:	4698      	mov	r8, r3
 8000c26:	0e09      	lsrs	r1, r1, #24
 8000c28:	0fe4      	lsrs	r4, r4, #31
 8000c2a:	2900      	cmp	r1, #0
 8000c2c:	d048      	beq.n	8000cc0 <__aeabi_fdiv+0xd0>
 8000c2e:	29ff      	cmp	r1, #255	; 0xff
 8000c30:	d010      	beq.n	8000c54 <__aeabi_fdiv+0x64>
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	00d8      	lsls	r0, r3, #3
 8000c36:	04d2      	lsls	r2, r2, #19
 8000c38:	4302      	orrs	r2, r0
 8000c3a:	4690      	mov	r8, r2
 8000c3c:	2000      	movs	r0, #0
 8000c3e:	397f      	subs	r1, #127	; 0x7f
 8000c40:	464a      	mov	r2, r9
 8000c42:	0033      	movs	r3, r6
 8000c44:	1a7f      	subs	r7, r7, r1
 8000c46:	4302      	orrs	r2, r0
 8000c48:	496c      	ldr	r1, [pc, #432]	; (8000dfc <__aeabi_fdiv+0x20c>)
 8000c4a:	0092      	lsls	r2, r2, #2
 8000c4c:	588a      	ldr	r2, [r1, r2]
 8000c4e:	4063      	eors	r3, r4
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	4697      	mov	pc, r2
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d16d      	bne.n	8000d34 <__aeabi_fdiv+0x144>
 8000c58:	2002      	movs	r0, #2
 8000c5a:	3fff      	subs	r7, #255	; 0xff
 8000c5c:	e033      	b.n	8000cc6 <__aeabi_fdiv+0xd6>
 8000c5e:	2300      	movs	r3, #0
 8000c60:	4698      	mov	r8, r3
 8000c62:	0026      	movs	r6, r4
 8000c64:	4645      	mov	r5, r8
 8000c66:	4682      	mov	sl, r0
 8000c68:	4653      	mov	r3, sl
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_fdiv+0x80>
 8000c6e:	e07f      	b.n	8000d70 <__aeabi_fdiv+0x180>
 8000c70:	2b03      	cmp	r3, #3
 8000c72:	d100      	bne.n	8000c76 <__aeabi_fdiv+0x86>
 8000c74:	e094      	b.n	8000da0 <__aeabi_fdiv+0x1b0>
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d017      	beq.n	8000caa <__aeabi_fdiv+0xba>
 8000c7a:	0038      	movs	r0, r7
 8000c7c:	307f      	adds	r0, #127	; 0x7f
 8000c7e:	2800      	cmp	r0, #0
 8000c80:	dd5f      	ble.n	8000d42 <__aeabi_fdiv+0x152>
 8000c82:	076b      	lsls	r3, r5, #29
 8000c84:	d004      	beq.n	8000c90 <__aeabi_fdiv+0xa0>
 8000c86:	230f      	movs	r3, #15
 8000c88:	402b      	ands	r3, r5
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	d000      	beq.n	8000c90 <__aeabi_fdiv+0xa0>
 8000c8e:	3504      	adds	r5, #4
 8000c90:	012b      	lsls	r3, r5, #4
 8000c92:	d503      	bpl.n	8000c9c <__aeabi_fdiv+0xac>
 8000c94:	0038      	movs	r0, r7
 8000c96:	4b5a      	ldr	r3, [pc, #360]	; (8000e00 <__aeabi_fdiv+0x210>)
 8000c98:	3080      	adds	r0, #128	; 0x80
 8000c9a:	401d      	ands	r5, r3
 8000c9c:	28fe      	cmp	r0, #254	; 0xfe
 8000c9e:	dc67      	bgt.n	8000d70 <__aeabi_fdiv+0x180>
 8000ca0:	01ad      	lsls	r5, r5, #6
 8000ca2:	0a6d      	lsrs	r5, r5, #9
 8000ca4:	b2c0      	uxtb	r0, r0
 8000ca6:	e002      	b.n	8000cae <__aeabi_fdiv+0xbe>
 8000ca8:	001e      	movs	r6, r3
 8000caa:	2000      	movs	r0, #0
 8000cac:	2500      	movs	r5, #0
 8000cae:	05c0      	lsls	r0, r0, #23
 8000cb0:	4328      	orrs	r0, r5
 8000cb2:	07f6      	lsls	r6, r6, #31
 8000cb4:	4330      	orrs	r0, r6
 8000cb6:	bce0      	pop	{r5, r6, r7}
 8000cb8:	46ba      	mov	sl, r7
 8000cba:	46b1      	mov	r9, r6
 8000cbc:	46a8      	mov	r8, r5
 8000cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d12b      	bne.n	8000d1c <__aeabi_fdiv+0x12c>
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	0033      	movs	r3, r6
 8000cca:	494e      	ldr	r1, [pc, #312]	; (8000e04 <__aeabi_fdiv+0x214>)
 8000ccc:	4302      	orrs	r2, r0
 8000cce:	0092      	lsls	r2, r2, #2
 8000cd0:	588a      	ldr	r2, [r1, r2]
 8000cd2:	4063      	eors	r3, r4
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	4697      	mov	pc, r2
 8000cd8:	2d00      	cmp	r5, #0
 8000cda:	d113      	bne.n	8000d04 <__aeabi_fdiv+0x114>
 8000cdc:	2304      	movs	r3, #4
 8000cde:	4699      	mov	r9, r3
 8000ce0:	3b03      	subs	r3, #3
 8000ce2:	2700      	movs	r7, #0
 8000ce4:	469a      	mov	sl, r3
 8000ce6:	e79a      	b.n	8000c1e <__aeabi_fdiv+0x2e>
 8000ce8:	2d00      	cmp	r5, #0
 8000cea:	d105      	bne.n	8000cf8 <__aeabi_fdiv+0x108>
 8000cec:	2308      	movs	r3, #8
 8000cee:	4699      	mov	r9, r3
 8000cf0:	3b06      	subs	r3, #6
 8000cf2:	27ff      	movs	r7, #255	; 0xff
 8000cf4:	469a      	mov	sl, r3
 8000cf6:	e792      	b.n	8000c1e <__aeabi_fdiv+0x2e>
 8000cf8:	230c      	movs	r3, #12
 8000cfa:	4699      	mov	r9, r3
 8000cfc:	3b09      	subs	r3, #9
 8000cfe:	27ff      	movs	r7, #255	; 0xff
 8000d00:	469a      	mov	sl, r3
 8000d02:	e78c      	b.n	8000c1e <__aeabi_fdiv+0x2e>
 8000d04:	0028      	movs	r0, r5
 8000d06:	f002 f9a5 	bl	8003054 <__clzsi2>
 8000d0a:	2776      	movs	r7, #118	; 0x76
 8000d0c:	1f43      	subs	r3, r0, #5
 8000d0e:	409d      	lsls	r5, r3
 8000d10:	2300      	movs	r3, #0
 8000d12:	427f      	negs	r7, r7
 8000d14:	4699      	mov	r9, r3
 8000d16:	469a      	mov	sl, r3
 8000d18:	1a3f      	subs	r7, r7, r0
 8000d1a:	e780      	b.n	8000c1e <__aeabi_fdiv+0x2e>
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f002 f999 	bl	8003054 <__clzsi2>
 8000d22:	4642      	mov	r2, r8
 8000d24:	1f43      	subs	r3, r0, #5
 8000d26:	2176      	movs	r1, #118	; 0x76
 8000d28:	409a      	lsls	r2, r3
 8000d2a:	4249      	negs	r1, r1
 8000d2c:	1a09      	subs	r1, r1, r0
 8000d2e:	4690      	mov	r8, r2
 8000d30:	2000      	movs	r0, #0
 8000d32:	e785      	b.n	8000c40 <__aeabi_fdiv+0x50>
 8000d34:	21ff      	movs	r1, #255	; 0xff
 8000d36:	2003      	movs	r0, #3
 8000d38:	e782      	b.n	8000c40 <__aeabi_fdiv+0x50>
 8000d3a:	001e      	movs	r6, r3
 8000d3c:	20ff      	movs	r0, #255	; 0xff
 8000d3e:	2500      	movs	r5, #0
 8000d40:	e7b5      	b.n	8000cae <__aeabi_fdiv+0xbe>
 8000d42:	2301      	movs	r3, #1
 8000d44:	1a1b      	subs	r3, r3, r0
 8000d46:	2b1b      	cmp	r3, #27
 8000d48:	dcaf      	bgt.n	8000caa <__aeabi_fdiv+0xba>
 8000d4a:	379e      	adds	r7, #158	; 0x9e
 8000d4c:	0029      	movs	r1, r5
 8000d4e:	40bd      	lsls	r5, r7
 8000d50:	40d9      	lsrs	r1, r3
 8000d52:	1e6a      	subs	r2, r5, #1
 8000d54:	4195      	sbcs	r5, r2
 8000d56:	430d      	orrs	r5, r1
 8000d58:	076b      	lsls	r3, r5, #29
 8000d5a:	d004      	beq.n	8000d66 <__aeabi_fdiv+0x176>
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	402b      	ands	r3, r5
 8000d60:	2b04      	cmp	r3, #4
 8000d62:	d000      	beq.n	8000d66 <__aeabi_fdiv+0x176>
 8000d64:	3504      	adds	r5, #4
 8000d66:	016b      	lsls	r3, r5, #5
 8000d68:	d544      	bpl.n	8000df4 <__aeabi_fdiv+0x204>
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	2500      	movs	r5, #0
 8000d6e:	e79e      	b.n	8000cae <__aeabi_fdiv+0xbe>
 8000d70:	20ff      	movs	r0, #255	; 0xff
 8000d72:	2500      	movs	r5, #0
 8000d74:	e79b      	b.n	8000cae <__aeabi_fdiv+0xbe>
 8000d76:	2580      	movs	r5, #128	; 0x80
 8000d78:	2600      	movs	r6, #0
 8000d7a:	20ff      	movs	r0, #255	; 0xff
 8000d7c:	03ed      	lsls	r5, r5, #15
 8000d7e:	e796      	b.n	8000cae <__aeabi_fdiv+0xbe>
 8000d80:	2300      	movs	r3, #0
 8000d82:	4698      	mov	r8, r3
 8000d84:	2080      	movs	r0, #128	; 0x80
 8000d86:	03c0      	lsls	r0, r0, #15
 8000d88:	4205      	tst	r5, r0
 8000d8a:	d009      	beq.n	8000da0 <__aeabi_fdiv+0x1b0>
 8000d8c:	4643      	mov	r3, r8
 8000d8e:	4203      	tst	r3, r0
 8000d90:	d106      	bne.n	8000da0 <__aeabi_fdiv+0x1b0>
 8000d92:	4645      	mov	r5, r8
 8000d94:	4305      	orrs	r5, r0
 8000d96:	026d      	lsls	r5, r5, #9
 8000d98:	0026      	movs	r6, r4
 8000d9a:	20ff      	movs	r0, #255	; 0xff
 8000d9c:	0a6d      	lsrs	r5, r5, #9
 8000d9e:	e786      	b.n	8000cae <__aeabi_fdiv+0xbe>
 8000da0:	2080      	movs	r0, #128	; 0x80
 8000da2:	03c0      	lsls	r0, r0, #15
 8000da4:	4305      	orrs	r5, r0
 8000da6:	026d      	lsls	r5, r5, #9
 8000da8:	20ff      	movs	r0, #255	; 0xff
 8000daa:	0a6d      	lsrs	r5, r5, #9
 8000dac:	e77f      	b.n	8000cae <__aeabi_fdiv+0xbe>
 8000dae:	4641      	mov	r1, r8
 8000db0:	016a      	lsls	r2, r5, #5
 8000db2:	0148      	lsls	r0, r1, #5
 8000db4:	4282      	cmp	r2, r0
 8000db6:	d219      	bcs.n	8000dec <__aeabi_fdiv+0x1fc>
 8000db8:	211b      	movs	r1, #27
 8000dba:	2500      	movs	r5, #0
 8000dbc:	3f01      	subs	r7, #1
 8000dbe:	2601      	movs	r6, #1
 8000dc0:	0014      	movs	r4, r2
 8000dc2:	006d      	lsls	r5, r5, #1
 8000dc4:	0052      	lsls	r2, r2, #1
 8000dc6:	2c00      	cmp	r4, #0
 8000dc8:	db01      	blt.n	8000dce <__aeabi_fdiv+0x1de>
 8000dca:	4290      	cmp	r0, r2
 8000dcc:	d801      	bhi.n	8000dd2 <__aeabi_fdiv+0x1e2>
 8000dce:	1a12      	subs	r2, r2, r0
 8000dd0:	4335      	orrs	r5, r6
 8000dd2:	3901      	subs	r1, #1
 8000dd4:	2900      	cmp	r1, #0
 8000dd6:	d1f3      	bne.n	8000dc0 <__aeabi_fdiv+0x1d0>
 8000dd8:	1e50      	subs	r0, r2, #1
 8000dda:	4182      	sbcs	r2, r0
 8000ddc:	0038      	movs	r0, r7
 8000dde:	307f      	adds	r0, #127	; 0x7f
 8000de0:	001e      	movs	r6, r3
 8000de2:	4315      	orrs	r5, r2
 8000de4:	2800      	cmp	r0, #0
 8000de6:	dd00      	ble.n	8000dea <__aeabi_fdiv+0x1fa>
 8000de8:	e74b      	b.n	8000c82 <__aeabi_fdiv+0x92>
 8000dea:	e7aa      	b.n	8000d42 <__aeabi_fdiv+0x152>
 8000dec:	211a      	movs	r1, #26
 8000dee:	2501      	movs	r5, #1
 8000df0:	1a12      	subs	r2, r2, r0
 8000df2:	e7e4      	b.n	8000dbe <__aeabi_fdiv+0x1ce>
 8000df4:	01ad      	lsls	r5, r5, #6
 8000df6:	2000      	movs	r0, #0
 8000df8:	0a6d      	lsrs	r5, r5, #9
 8000dfa:	e758      	b.n	8000cae <__aeabi_fdiv+0xbe>
 8000dfc:	0801a7c8 	.word	0x0801a7c8
 8000e00:	f7ffffff 	.word	0xf7ffffff
 8000e04:	0801a808 	.word	0x0801a808

08000e08 <__eqsf2>:
 8000e08:	b570      	push	{r4, r5, r6, lr}
 8000e0a:	0042      	lsls	r2, r0, #1
 8000e0c:	024e      	lsls	r6, r1, #9
 8000e0e:	004c      	lsls	r4, r1, #1
 8000e10:	0245      	lsls	r5, r0, #9
 8000e12:	0a6d      	lsrs	r5, r5, #9
 8000e14:	0e12      	lsrs	r2, r2, #24
 8000e16:	0fc3      	lsrs	r3, r0, #31
 8000e18:	0a76      	lsrs	r6, r6, #9
 8000e1a:	0e24      	lsrs	r4, r4, #24
 8000e1c:	0fc9      	lsrs	r1, r1, #31
 8000e1e:	2aff      	cmp	r2, #255	; 0xff
 8000e20:	d00f      	beq.n	8000e42 <__eqsf2+0x3a>
 8000e22:	2cff      	cmp	r4, #255	; 0xff
 8000e24:	d011      	beq.n	8000e4a <__eqsf2+0x42>
 8000e26:	2001      	movs	r0, #1
 8000e28:	42a2      	cmp	r2, r4
 8000e2a:	d000      	beq.n	8000e2e <__eqsf2+0x26>
 8000e2c:	bd70      	pop	{r4, r5, r6, pc}
 8000e2e:	42b5      	cmp	r5, r6
 8000e30:	d1fc      	bne.n	8000e2c <__eqsf2+0x24>
 8000e32:	428b      	cmp	r3, r1
 8000e34:	d00d      	beq.n	8000e52 <__eqsf2+0x4a>
 8000e36:	2a00      	cmp	r2, #0
 8000e38:	d1f8      	bne.n	8000e2c <__eqsf2+0x24>
 8000e3a:	0028      	movs	r0, r5
 8000e3c:	1e45      	subs	r5, r0, #1
 8000e3e:	41a8      	sbcs	r0, r5
 8000e40:	e7f4      	b.n	8000e2c <__eqsf2+0x24>
 8000e42:	2001      	movs	r0, #1
 8000e44:	2d00      	cmp	r5, #0
 8000e46:	d1f1      	bne.n	8000e2c <__eqsf2+0x24>
 8000e48:	e7eb      	b.n	8000e22 <__eqsf2+0x1a>
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d1ed      	bne.n	8000e2c <__eqsf2+0x24>
 8000e50:	e7e9      	b.n	8000e26 <__eqsf2+0x1e>
 8000e52:	2000      	movs	r0, #0
 8000e54:	e7ea      	b.n	8000e2c <__eqsf2+0x24>
 8000e56:	46c0      	nop			; (mov r8, r8)

08000e58 <__gesf2>:
 8000e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e5a:	0042      	lsls	r2, r0, #1
 8000e5c:	0246      	lsls	r6, r0, #9
 8000e5e:	024d      	lsls	r5, r1, #9
 8000e60:	004c      	lsls	r4, r1, #1
 8000e62:	0fc3      	lsrs	r3, r0, #31
 8000e64:	0a76      	lsrs	r6, r6, #9
 8000e66:	0e12      	lsrs	r2, r2, #24
 8000e68:	0a6d      	lsrs	r5, r5, #9
 8000e6a:	0e24      	lsrs	r4, r4, #24
 8000e6c:	0fc8      	lsrs	r0, r1, #31
 8000e6e:	2aff      	cmp	r2, #255	; 0xff
 8000e70:	d01f      	beq.n	8000eb2 <__gesf2+0x5a>
 8000e72:	2cff      	cmp	r4, #255	; 0xff
 8000e74:	d010      	beq.n	8000e98 <__gesf2+0x40>
 8000e76:	2a00      	cmp	r2, #0
 8000e78:	d11f      	bne.n	8000eba <__gesf2+0x62>
 8000e7a:	4271      	negs	r1, r6
 8000e7c:	4171      	adcs	r1, r6
 8000e7e:	2c00      	cmp	r4, #0
 8000e80:	d101      	bne.n	8000e86 <__gesf2+0x2e>
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	d01e      	beq.n	8000ec4 <__gesf2+0x6c>
 8000e86:	2900      	cmp	r1, #0
 8000e88:	d10e      	bne.n	8000ea8 <__gesf2+0x50>
 8000e8a:	4283      	cmp	r3, r0
 8000e8c:	d01e      	beq.n	8000ecc <__gesf2+0x74>
 8000e8e:	2102      	movs	r1, #2
 8000e90:	1e58      	subs	r0, r3, #1
 8000e92:	4008      	ands	r0, r1
 8000e94:	3801      	subs	r0, #1
 8000e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e98:	2d00      	cmp	r5, #0
 8000e9a:	d126      	bne.n	8000eea <__gesf2+0x92>
 8000e9c:	2a00      	cmp	r2, #0
 8000e9e:	d1f4      	bne.n	8000e8a <__gesf2+0x32>
 8000ea0:	4271      	negs	r1, r6
 8000ea2:	4171      	adcs	r1, r6
 8000ea4:	2900      	cmp	r1, #0
 8000ea6:	d0f0      	beq.n	8000e8a <__gesf2+0x32>
 8000ea8:	2800      	cmp	r0, #0
 8000eaa:	d1f4      	bne.n	8000e96 <__gesf2+0x3e>
 8000eac:	2001      	movs	r0, #1
 8000eae:	4240      	negs	r0, r0
 8000eb0:	e7f1      	b.n	8000e96 <__gesf2+0x3e>
 8000eb2:	2e00      	cmp	r6, #0
 8000eb4:	d119      	bne.n	8000eea <__gesf2+0x92>
 8000eb6:	2cff      	cmp	r4, #255	; 0xff
 8000eb8:	d0ee      	beq.n	8000e98 <__gesf2+0x40>
 8000eba:	2c00      	cmp	r4, #0
 8000ebc:	d1e5      	bne.n	8000e8a <__gesf2+0x32>
 8000ebe:	2d00      	cmp	r5, #0
 8000ec0:	d1e3      	bne.n	8000e8a <__gesf2+0x32>
 8000ec2:	e7e4      	b.n	8000e8e <__gesf2+0x36>
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	2e00      	cmp	r6, #0
 8000ec8:	d0e5      	beq.n	8000e96 <__gesf2+0x3e>
 8000eca:	e7e0      	b.n	8000e8e <__gesf2+0x36>
 8000ecc:	42a2      	cmp	r2, r4
 8000ece:	dc05      	bgt.n	8000edc <__gesf2+0x84>
 8000ed0:	dbea      	blt.n	8000ea8 <__gesf2+0x50>
 8000ed2:	42ae      	cmp	r6, r5
 8000ed4:	d802      	bhi.n	8000edc <__gesf2+0x84>
 8000ed6:	d3e7      	bcc.n	8000ea8 <__gesf2+0x50>
 8000ed8:	2000      	movs	r0, #0
 8000eda:	e7dc      	b.n	8000e96 <__gesf2+0x3e>
 8000edc:	4241      	negs	r1, r0
 8000ede:	4141      	adcs	r1, r0
 8000ee0:	4248      	negs	r0, r1
 8000ee2:	2102      	movs	r1, #2
 8000ee4:	4008      	ands	r0, r1
 8000ee6:	3801      	subs	r0, #1
 8000ee8:	e7d5      	b.n	8000e96 <__gesf2+0x3e>
 8000eea:	2002      	movs	r0, #2
 8000eec:	4240      	negs	r0, r0
 8000eee:	e7d2      	b.n	8000e96 <__gesf2+0x3e>

08000ef0 <__lesf2>:
 8000ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ef2:	0042      	lsls	r2, r0, #1
 8000ef4:	0246      	lsls	r6, r0, #9
 8000ef6:	024d      	lsls	r5, r1, #9
 8000ef8:	004c      	lsls	r4, r1, #1
 8000efa:	0fc3      	lsrs	r3, r0, #31
 8000efc:	0a76      	lsrs	r6, r6, #9
 8000efe:	0e12      	lsrs	r2, r2, #24
 8000f00:	0a6d      	lsrs	r5, r5, #9
 8000f02:	0e24      	lsrs	r4, r4, #24
 8000f04:	0fc8      	lsrs	r0, r1, #31
 8000f06:	2aff      	cmp	r2, #255	; 0xff
 8000f08:	d00d      	beq.n	8000f26 <__lesf2+0x36>
 8000f0a:	2cff      	cmp	r4, #255	; 0xff
 8000f0c:	d00f      	beq.n	8000f2e <__lesf2+0x3e>
 8000f0e:	2a00      	cmp	r2, #0
 8000f10:	d123      	bne.n	8000f5a <__lesf2+0x6a>
 8000f12:	4271      	negs	r1, r6
 8000f14:	4171      	adcs	r1, r6
 8000f16:	2c00      	cmp	r4, #0
 8000f18:	d10f      	bne.n	8000f3a <__lesf2+0x4a>
 8000f1a:	2d00      	cmp	r5, #0
 8000f1c:	d10d      	bne.n	8000f3a <__lesf2+0x4a>
 8000f1e:	2000      	movs	r0, #0
 8000f20:	2e00      	cmp	r6, #0
 8000f22:	d014      	beq.n	8000f4e <__lesf2+0x5e>
 8000f24:	e00d      	b.n	8000f42 <__lesf2+0x52>
 8000f26:	2e00      	cmp	r6, #0
 8000f28:	d110      	bne.n	8000f4c <__lesf2+0x5c>
 8000f2a:	2cff      	cmp	r4, #255	; 0xff
 8000f2c:	d115      	bne.n	8000f5a <__lesf2+0x6a>
 8000f2e:	2d00      	cmp	r5, #0
 8000f30:	d10c      	bne.n	8000f4c <__lesf2+0x5c>
 8000f32:	2a00      	cmp	r2, #0
 8000f34:	d103      	bne.n	8000f3e <__lesf2+0x4e>
 8000f36:	4271      	negs	r1, r6
 8000f38:	4171      	adcs	r1, r6
 8000f3a:	2900      	cmp	r1, #0
 8000f3c:	d108      	bne.n	8000f50 <__lesf2+0x60>
 8000f3e:	4283      	cmp	r3, r0
 8000f40:	d010      	beq.n	8000f64 <__lesf2+0x74>
 8000f42:	2102      	movs	r1, #2
 8000f44:	1e58      	subs	r0, r3, #1
 8000f46:	4008      	ands	r0, r1
 8000f48:	3801      	subs	r0, #1
 8000f4a:	e000      	b.n	8000f4e <__lesf2+0x5e>
 8000f4c:	2002      	movs	r0, #2
 8000f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f50:	2800      	cmp	r0, #0
 8000f52:	d1fc      	bne.n	8000f4e <__lesf2+0x5e>
 8000f54:	2001      	movs	r0, #1
 8000f56:	4240      	negs	r0, r0
 8000f58:	e7f9      	b.n	8000f4e <__lesf2+0x5e>
 8000f5a:	2c00      	cmp	r4, #0
 8000f5c:	d1ef      	bne.n	8000f3e <__lesf2+0x4e>
 8000f5e:	2d00      	cmp	r5, #0
 8000f60:	d1ed      	bne.n	8000f3e <__lesf2+0x4e>
 8000f62:	e7ee      	b.n	8000f42 <__lesf2+0x52>
 8000f64:	42a2      	cmp	r2, r4
 8000f66:	dc05      	bgt.n	8000f74 <__lesf2+0x84>
 8000f68:	dbf2      	blt.n	8000f50 <__lesf2+0x60>
 8000f6a:	42ae      	cmp	r6, r5
 8000f6c:	d802      	bhi.n	8000f74 <__lesf2+0x84>
 8000f6e:	d3ef      	bcc.n	8000f50 <__lesf2+0x60>
 8000f70:	2000      	movs	r0, #0
 8000f72:	e7ec      	b.n	8000f4e <__lesf2+0x5e>
 8000f74:	4241      	negs	r1, r0
 8000f76:	4141      	adcs	r1, r0
 8000f78:	4248      	negs	r0, r1
 8000f7a:	2102      	movs	r1, #2
 8000f7c:	4008      	ands	r0, r1
 8000f7e:	3801      	subs	r0, #1
 8000f80:	e7e5      	b.n	8000f4e <__lesf2+0x5e>
 8000f82:	46c0      	nop			; (mov r8, r8)

08000f84 <__aeabi_fmul>:
 8000f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f86:	4657      	mov	r7, sl
 8000f88:	464e      	mov	r6, r9
 8000f8a:	4645      	mov	r5, r8
 8000f8c:	46de      	mov	lr, fp
 8000f8e:	0244      	lsls	r4, r0, #9
 8000f90:	b5e0      	push	{r5, r6, r7, lr}
 8000f92:	0045      	lsls	r5, r0, #1
 8000f94:	1c0f      	adds	r7, r1, #0
 8000f96:	0a64      	lsrs	r4, r4, #9
 8000f98:	0e2d      	lsrs	r5, r5, #24
 8000f9a:	0fc6      	lsrs	r6, r0, #31
 8000f9c:	2d00      	cmp	r5, #0
 8000f9e:	d047      	beq.n	8001030 <__aeabi_fmul+0xac>
 8000fa0:	2dff      	cmp	r5, #255	; 0xff
 8000fa2:	d04d      	beq.n	8001040 <__aeabi_fmul+0xbc>
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	2080      	movs	r0, #128	; 0x80
 8000fa8:	469a      	mov	sl, r3
 8000faa:	469b      	mov	fp, r3
 8000fac:	00e4      	lsls	r4, r4, #3
 8000fae:	04c0      	lsls	r0, r0, #19
 8000fb0:	4304      	orrs	r4, r0
 8000fb2:	3d7f      	subs	r5, #127	; 0x7f
 8000fb4:	0278      	lsls	r0, r7, #9
 8000fb6:	0a43      	lsrs	r3, r0, #9
 8000fb8:	4699      	mov	r9, r3
 8000fba:	007a      	lsls	r2, r7, #1
 8000fbc:	0ffb      	lsrs	r3, r7, #31
 8000fbe:	4698      	mov	r8, r3
 8000fc0:	0e12      	lsrs	r2, r2, #24
 8000fc2:	464b      	mov	r3, r9
 8000fc4:	d044      	beq.n	8001050 <__aeabi_fmul+0xcc>
 8000fc6:	2aff      	cmp	r2, #255	; 0xff
 8000fc8:	d011      	beq.n	8000fee <__aeabi_fmul+0x6a>
 8000fca:	00d8      	lsls	r0, r3, #3
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	04db      	lsls	r3, r3, #19
 8000fd0:	4303      	orrs	r3, r0
 8000fd2:	4699      	mov	r9, r3
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	3a7f      	subs	r2, #127	; 0x7f
 8000fd8:	18ad      	adds	r5, r5, r2
 8000fda:	4647      	mov	r7, r8
 8000fdc:	4653      	mov	r3, sl
 8000fde:	4077      	eors	r7, r6
 8000fe0:	1c69      	adds	r1, r5, #1
 8000fe2:	2b0f      	cmp	r3, #15
 8000fe4:	d83f      	bhi.n	8001066 <__aeabi_fmul+0xe2>
 8000fe6:	4a72      	ldr	r2, [pc, #456]	; (80011b0 <__aeabi_fmul+0x22c>)
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	58d3      	ldr	r3, [r2, r3]
 8000fec:	469f      	mov	pc, r3
 8000fee:	35ff      	adds	r5, #255	; 0xff
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d000      	beq.n	8000ff6 <__aeabi_fmul+0x72>
 8000ff4:	e079      	b.n	80010ea <__aeabi_fmul+0x166>
 8000ff6:	4652      	mov	r2, sl
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	4692      	mov	sl, r2
 8000ffe:	2002      	movs	r0, #2
 8001000:	e7eb      	b.n	8000fda <__aeabi_fmul+0x56>
 8001002:	4647      	mov	r7, r8
 8001004:	464c      	mov	r4, r9
 8001006:	4683      	mov	fp, r0
 8001008:	465b      	mov	r3, fp
 800100a:	2b02      	cmp	r3, #2
 800100c:	d028      	beq.n	8001060 <__aeabi_fmul+0xdc>
 800100e:	2b03      	cmp	r3, #3
 8001010:	d100      	bne.n	8001014 <__aeabi_fmul+0x90>
 8001012:	e0c6      	b.n	80011a2 <__aeabi_fmul+0x21e>
 8001014:	2b01      	cmp	r3, #1
 8001016:	d14f      	bne.n	80010b8 <__aeabi_fmul+0x134>
 8001018:	2000      	movs	r0, #0
 800101a:	2400      	movs	r4, #0
 800101c:	05c0      	lsls	r0, r0, #23
 800101e:	07ff      	lsls	r7, r7, #31
 8001020:	4320      	orrs	r0, r4
 8001022:	4338      	orrs	r0, r7
 8001024:	bcf0      	pop	{r4, r5, r6, r7}
 8001026:	46bb      	mov	fp, r7
 8001028:	46b2      	mov	sl, r6
 800102a:	46a9      	mov	r9, r5
 800102c:	46a0      	mov	r8, r4
 800102e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001030:	2c00      	cmp	r4, #0
 8001032:	d171      	bne.n	8001118 <__aeabi_fmul+0x194>
 8001034:	2304      	movs	r3, #4
 8001036:	469a      	mov	sl, r3
 8001038:	3b03      	subs	r3, #3
 800103a:	2500      	movs	r5, #0
 800103c:	469b      	mov	fp, r3
 800103e:	e7b9      	b.n	8000fb4 <__aeabi_fmul+0x30>
 8001040:	2c00      	cmp	r4, #0
 8001042:	d163      	bne.n	800110c <__aeabi_fmul+0x188>
 8001044:	2308      	movs	r3, #8
 8001046:	469a      	mov	sl, r3
 8001048:	3b06      	subs	r3, #6
 800104a:	25ff      	movs	r5, #255	; 0xff
 800104c:	469b      	mov	fp, r3
 800104e:	e7b1      	b.n	8000fb4 <__aeabi_fmul+0x30>
 8001050:	2b00      	cmp	r3, #0
 8001052:	d150      	bne.n	80010f6 <__aeabi_fmul+0x172>
 8001054:	4652      	mov	r2, sl
 8001056:	3301      	adds	r3, #1
 8001058:	431a      	orrs	r2, r3
 800105a:	4692      	mov	sl, r2
 800105c:	2001      	movs	r0, #1
 800105e:	e7bc      	b.n	8000fda <__aeabi_fmul+0x56>
 8001060:	20ff      	movs	r0, #255	; 0xff
 8001062:	2400      	movs	r4, #0
 8001064:	e7da      	b.n	800101c <__aeabi_fmul+0x98>
 8001066:	4648      	mov	r0, r9
 8001068:	0c26      	lsrs	r6, r4, #16
 800106a:	0424      	lsls	r4, r4, #16
 800106c:	0c22      	lsrs	r2, r4, #16
 800106e:	0404      	lsls	r4, r0, #16
 8001070:	0c24      	lsrs	r4, r4, #16
 8001072:	464b      	mov	r3, r9
 8001074:	0020      	movs	r0, r4
 8001076:	0c1b      	lsrs	r3, r3, #16
 8001078:	4350      	muls	r0, r2
 800107a:	4374      	muls	r4, r6
 800107c:	435a      	muls	r2, r3
 800107e:	435e      	muls	r6, r3
 8001080:	1912      	adds	r2, r2, r4
 8001082:	0c03      	lsrs	r3, r0, #16
 8001084:	189b      	adds	r3, r3, r2
 8001086:	429c      	cmp	r4, r3
 8001088:	d903      	bls.n	8001092 <__aeabi_fmul+0x10e>
 800108a:	2280      	movs	r2, #128	; 0x80
 800108c:	0252      	lsls	r2, r2, #9
 800108e:	4694      	mov	ip, r2
 8001090:	4466      	add	r6, ip
 8001092:	0400      	lsls	r0, r0, #16
 8001094:	041a      	lsls	r2, r3, #16
 8001096:	0c00      	lsrs	r0, r0, #16
 8001098:	1812      	adds	r2, r2, r0
 800109a:	0194      	lsls	r4, r2, #6
 800109c:	1e60      	subs	r0, r4, #1
 800109e:	4184      	sbcs	r4, r0
 80010a0:	0c1b      	lsrs	r3, r3, #16
 80010a2:	0e92      	lsrs	r2, r2, #26
 80010a4:	199b      	adds	r3, r3, r6
 80010a6:	4314      	orrs	r4, r2
 80010a8:	019b      	lsls	r3, r3, #6
 80010aa:	431c      	orrs	r4, r3
 80010ac:	011b      	lsls	r3, r3, #4
 80010ae:	d572      	bpl.n	8001196 <__aeabi_fmul+0x212>
 80010b0:	2001      	movs	r0, #1
 80010b2:	0863      	lsrs	r3, r4, #1
 80010b4:	4004      	ands	r4, r0
 80010b6:	431c      	orrs	r4, r3
 80010b8:	0008      	movs	r0, r1
 80010ba:	307f      	adds	r0, #127	; 0x7f
 80010bc:	2800      	cmp	r0, #0
 80010be:	dd3c      	ble.n	800113a <__aeabi_fmul+0x1b6>
 80010c0:	0763      	lsls	r3, r4, #29
 80010c2:	d004      	beq.n	80010ce <__aeabi_fmul+0x14a>
 80010c4:	230f      	movs	r3, #15
 80010c6:	4023      	ands	r3, r4
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	d000      	beq.n	80010ce <__aeabi_fmul+0x14a>
 80010cc:	3404      	adds	r4, #4
 80010ce:	0123      	lsls	r3, r4, #4
 80010d0:	d503      	bpl.n	80010da <__aeabi_fmul+0x156>
 80010d2:	3180      	adds	r1, #128	; 0x80
 80010d4:	0008      	movs	r0, r1
 80010d6:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <__aeabi_fmul+0x230>)
 80010d8:	401c      	ands	r4, r3
 80010da:	28fe      	cmp	r0, #254	; 0xfe
 80010dc:	dcc0      	bgt.n	8001060 <__aeabi_fmul+0xdc>
 80010de:	01a4      	lsls	r4, r4, #6
 80010e0:	0a64      	lsrs	r4, r4, #9
 80010e2:	b2c0      	uxtb	r0, r0
 80010e4:	e79a      	b.n	800101c <__aeabi_fmul+0x98>
 80010e6:	0037      	movs	r7, r6
 80010e8:	e78e      	b.n	8001008 <__aeabi_fmul+0x84>
 80010ea:	4652      	mov	r2, sl
 80010ec:	2303      	movs	r3, #3
 80010ee:	431a      	orrs	r2, r3
 80010f0:	4692      	mov	sl, r2
 80010f2:	2003      	movs	r0, #3
 80010f4:	e771      	b.n	8000fda <__aeabi_fmul+0x56>
 80010f6:	4648      	mov	r0, r9
 80010f8:	f001 ffac 	bl	8003054 <__clzsi2>
 80010fc:	464a      	mov	r2, r9
 80010fe:	1f43      	subs	r3, r0, #5
 8001100:	409a      	lsls	r2, r3
 8001102:	1a2d      	subs	r5, r5, r0
 8001104:	4691      	mov	r9, r2
 8001106:	2000      	movs	r0, #0
 8001108:	3d76      	subs	r5, #118	; 0x76
 800110a:	e766      	b.n	8000fda <__aeabi_fmul+0x56>
 800110c:	230c      	movs	r3, #12
 800110e:	469a      	mov	sl, r3
 8001110:	3b09      	subs	r3, #9
 8001112:	25ff      	movs	r5, #255	; 0xff
 8001114:	469b      	mov	fp, r3
 8001116:	e74d      	b.n	8000fb4 <__aeabi_fmul+0x30>
 8001118:	0020      	movs	r0, r4
 800111a:	f001 ff9b 	bl	8003054 <__clzsi2>
 800111e:	2576      	movs	r5, #118	; 0x76
 8001120:	1f43      	subs	r3, r0, #5
 8001122:	409c      	lsls	r4, r3
 8001124:	2300      	movs	r3, #0
 8001126:	426d      	negs	r5, r5
 8001128:	469a      	mov	sl, r3
 800112a:	469b      	mov	fp, r3
 800112c:	1a2d      	subs	r5, r5, r0
 800112e:	e741      	b.n	8000fb4 <__aeabi_fmul+0x30>
 8001130:	2480      	movs	r4, #128	; 0x80
 8001132:	2700      	movs	r7, #0
 8001134:	20ff      	movs	r0, #255	; 0xff
 8001136:	03e4      	lsls	r4, r4, #15
 8001138:	e770      	b.n	800101c <__aeabi_fmul+0x98>
 800113a:	2301      	movs	r3, #1
 800113c:	1a1b      	subs	r3, r3, r0
 800113e:	2b1b      	cmp	r3, #27
 8001140:	dd00      	ble.n	8001144 <__aeabi_fmul+0x1c0>
 8001142:	e769      	b.n	8001018 <__aeabi_fmul+0x94>
 8001144:	319e      	adds	r1, #158	; 0x9e
 8001146:	0020      	movs	r0, r4
 8001148:	408c      	lsls	r4, r1
 800114a:	40d8      	lsrs	r0, r3
 800114c:	1e63      	subs	r3, r4, #1
 800114e:	419c      	sbcs	r4, r3
 8001150:	4304      	orrs	r4, r0
 8001152:	0763      	lsls	r3, r4, #29
 8001154:	d004      	beq.n	8001160 <__aeabi_fmul+0x1dc>
 8001156:	230f      	movs	r3, #15
 8001158:	4023      	ands	r3, r4
 800115a:	2b04      	cmp	r3, #4
 800115c:	d000      	beq.n	8001160 <__aeabi_fmul+0x1dc>
 800115e:	3404      	adds	r4, #4
 8001160:	0163      	lsls	r3, r4, #5
 8001162:	d51a      	bpl.n	800119a <__aeabi_fmul+0x216>
 8001164:	2001      	movs	r0, #1
 8001166:	2400      	movs	r4, #0
 8001168:	e758      	b.n	800101c <__aeabi_fmul+0x98>
 800116a:	2080      	movs	r0, #128	; 0x80
 800116c:	03c0      	lsls	r0, r0, #15
 800116e:	4204      	tst	r4, r0
 8001170:	d009      	beq.n	8001186 <__aeabi_fmul+0x202>
 8001172:	464b      	mov	r3, r9
 8001174:	4203      	tst	r3, r0
 8001176:	d106      	bne.n	8001186 <__aeabi_fmul+0x202>
 8001178:	464c      	mov	r4, r9
 800117a:	4304      	orrs	r4, r0
 800117c:	0264      	lsls	r4, r4, #9
 800117e:	4647      	mov	r7, r8
 8001180:	20ff      	movs	r0, #255	; 0xff
 8001182:	0a64      	lsrs	r4, r4, #9
 8001184:	e74a      	b.n	800101c <__aeabi_fmul+0x98>
 8001186:	2080      	movs	r0, #128	; 0x80
 8001188:	03c0      	lsls	r0, r0, #15
 800118a:	4304      	orrs	r4, r0
 800118c:	0264      	lsls	r4, r4, #9
 800118e:	0037      	movs	r7, r6
 8001190:	20ff      	movs	r0, #255	; 0xff
 8001192:	0a64      	lsrs	r4, r4, #9
 8001194:	e742      	b.n	800101c <__aeabi_fmul+0x98>
 8001196:	0029      	movs	r1, r5
 8001198:	e78e      	b.n	80010b8 <__aeabi_fmul+0x134>
 800119a:	01a4      	lsls	r4, r4, #6
 800119c:	2000      	movs	r0, #0
 800119e:	0a64      	lsrs	r4, r4, #9
 80011a0:	e73c      	b.n	800101c <__aeabi_fmul+0x98>
 80011a2:	2080      	movs	r0, #128	; 0x80
 80011a4:	03c0      	lsls	r0, r0, #15
 80011a6:	4304      	orrs	r4, r0
 80011a8:	0264      	lsls	r4, r4, #9
 80011aa:	20ff      	movs	r0, #255	; 0xff
 80011ac:	0a64      	lsrs	r4, r4, #9
 80011ae:	e735      	b.n	800101c <__aeabi_fmul+0x98>
 80011b0:	0801a848 	.word	0x0801a848
 80011b4:	f7ffffff 	.word	0xf7ffffff

080011b8 <__aeabi_f2iz>:
 80011b8:	0241      	lsls	r1, r0, #9
 80011ba:	0042      	lsls	r2, r0, #1
 80011bc:	0fc3      	lsrs	r3, r0, #31
 80011be:	0a49      	lsrs	r1, r1, #9
 80011c0:	2000      	movs	r0, #0
 80011c2:	0e12      	lsrs	r2, r2, #24
 80011c4:	2a7e      	cmp	r2, #126	; 0x7e
 80011c6:	d903      	bls.n	80011d0 <__aeabi_f2iz+0x18>
 80011c8:	2a9d      	cmp	r2, #157	; 0x9d
 80011ca:	d902      	bls.n	80011d2 <__aeabi_f2iz+0x1a>
 80011cc:	4a09      	ldr	r2, [pc, #36]	; (80011f4 <__aeabi_f2iz+0x3c>)
 80011ce:	1898      	adds	r0, r3, r2
 80011d0:	4770      	bx	lr
 80011d2:	2080      	movs	r0, #128	; 0x80
 80011d4:	0400      	lsls	r0, r0, #16
 80011d6:	4301      	orrs	r1, r0
 80011d8:	2a95      	cmp	r2, #149	; 0x95
 80011da:	dc07      	bgt.n	80011ec <__aeabi_f2iz+0x34>
 80011dc:	2096      	movs	r0, #150	; 0x96
 80011de:	1a82      	subs	r2, r0, r2
 80011e0:	40d1      	lsrs	r1, r2
 80011e2:	4248      	negs	r0, r1
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1f3      	bne.n	80011d0 <__aeabi_f2iz+0x18>
 80011e8:	0008      	movs	r0, r1
 80011ea:	e7f1      	b.n	80011d0 <__aeabi_f2iz+0x18>
 80011ec:	3a96      	subs	r2, #150	; 0x96
 80011ee:	4091      	lsls	r1, r2
 80011f0:	e7f7      	b.n	80011e2 <__aeabi_f2iz+0x2a>
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	7fffffff 	.word	0x7fffffff

080011f8 <__aeabi_i2f>:
 80011f8:	b570      	push	{r4, r5, r6, lr}
 80011fa:	2800      	cmp	r0, #0
 80011fc:	d013      	beq.n	8001226 <__aeabi_i2f+0x2e>
 80011fe:	17c3      	asrs	r3, r0, #31
 8001200:	18c5      	adds	r5, r0, r3
 8001202:	405d      	eors	r5, r3
 8001204:	0fc4      	lsrs	r4, r0, #31
 8001206:	0028      	movs	r0, r5
 8001208:	f001 ff24 	bl	8003054 <__clzsi2>
 800120c:	239e      	movs	r3, #158	; 0x9e
 800120e:	0001      	movs	r1, r0
 8001210:	1a1b      	subs	r3, r3, r0
 8001212:	2b96      	cmp	r3, #150	; 0x96
 8001214:	dc0f      	bgt.n	8001236 <__aeabi_i2f+0x3e>
 8001216:	2808      	cmp	r0, #8
 8001218:	dd01      	ble.n	800121e <__aeabi_i2f+0x26>
 800121a:	3908      	subs	r1, #8
 800121c:	408d      	lsls	r5, r1
 800121e:	026d      	lsls	r5, r5, #9
 8001220:	0a6d      	lsrs	r5, r5, #9
 8001222:	b2d8      	uxtb	r0, r3
 8001224:	e002      	b.n	800122c <__aeabi_i2f+0x34>
 8001226:	2400      	movs	r4, #0
 8001228:	2000      	movs	r0, #0
 800122a:	2500      	movs	r5, #0
 800122c:	05c0      	lsls	r0, r0, #23
 800122e:	4328      	orrs	r0, r5
 8001230:	07e4      	lsls	r4, r4, #31
 8001232:	4320      	orrs	r0, r4
 8001234:	bd70      	pop	{r4, r5, r6, pc}
 8001236:	2b99      	cmp	r3, #153	; 0x99
 8001238:	dd0b      	ble.n	8001252 <__aeabi_i2f+0x5a>
 800123a:	2205      	movs	r2, #5
 800123c:	002e      	movs	r6, r5
 800123e:	1a12      	subs	r2, r2, r0
 8001240:	40d6      	lsrs	r6, r2
 8001242:	0002      	movs	r2, r0
 8001244:	321b      	adds	r2, #27
 8001246:	4095      	lsls	r5, r2
 8001248:	0028      	movs	r0, r5
 800124a:	1e45      	subs	r5, r0, #1
 800124c:	41a8      	sbcs	r0, r5
 800124e:	0035      	movs	r5, r6
 8001250:	4305      	orrs	r5, r0
 8001252:	2905      	cmp	r1, #5
 8001254:	dd01      	ble.n	800125a <__aeabi_i2f+0x62>
 8001256:	1f4a      	subs	r2, r1, #5
 8001258:	4095      	lsls	r5, r2
 800125a:	002a      	movs	r2, r5
 800125c:	4e08      	ldr	r6, [pc, #32]	; (8001280 <__aeabi_i2f+0x88>)
 800125e:	4032      	ands	r2, r6
 8001260:	0768      	lsls	r0, r5, #29
 8001262:	d009      	beq.n	8001278 <__aeabi_i2f+0x80>
 8001264:	200f      	movs	r0, #15
 8001266:	4028      	ands	r0, r5
 8001268:	2804      	cmp	r0, #4
 800126a:	d005      	beq.n	8001278 <__aeabi_i2f+0x80>
 800126c:	3204      	adds	r2, #4
 800126e:	0150      	lsls	r0, r2, #5
 8001270:	d502      	bpl.n	8001278 <__aeabi_i2f+0x80>
 8001272:	239f      	movs	r3, #159	; 0x9f
 8001274:	4032      	ands	r2, r6
 8001276:	1a5b      	subs	r3, r3, r1
 8001278:	0192      	lsls	r2, r2, #6
 800127a:	0a55      	lsrs	r5, r2, #9
 800127c:	b2d8      	uxtb	r0, r3
 800127e:	e7d5      	b.n	800122c <__aeabi_i2f+0x34>
 8001280:	fbffffff 	.word	0xfbffffff

08001284 <__aeabi_dadd>:
 8001284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001286:	464f      	mov	r7, r9
 8001288:	46d6      	mov	lr, sl
 800128a:	4646      	mov	r6, r8
 800128c:	000d      	movs	r5, r1
 800128e:	0001      	movs	r1, r0
 8001290:	0018      	movs	r0, r3
 8001292:	b5c0      	push	{r6, r7, lr}
 8001294:	0017      	movs	r7, r2
 8001296:	032b      	lsls	r3, r5, #12
 8001298:	0a5a      	lsrs	r2, r3, #9
 800129a:	0f4b      	lsrs	r3, r1, #29
 800129c:	4313      	orrs	r3, r2
 800129e:	00ca      	lsls	r2, r1, #3
 80012a0:	4691      	mov	r9, r2
 80012a2:	0302      	lsls	r2, r0, #12
 80012a4:	006e      	lsls	r6, r5, #1
 80012a6:	0041      	lsls	r1, r0, #1
 80012a8:	0a52      	lsrs	r2, r2, #9
 80012aa:	0fec      	lsrs	r4, r5, #31
 80012ac:	0f7d      	lsrs	r5, r7, #29
 80012ae:	4315      	orrs	r5, r2
 80012b0:	0d76      	lsrs	r6, r6, #21
 80012b2:	0d49      	lsrs	r1, r1, #21
 80012b4:	0fc0      	lsrs	r0, r0, #31
 80012b6:	4682      	mov	sl, r0
 80012b8:	46ac      	mov	ip, r5
 80012ba:	00ff      	lsls	r7, r7, #3
 80012bc:	1a72      	subs	r2, r6, r1
 80012be:	4284      	cmp	r4, r0
 80012c0:	d100      	bne.n	80012c4 <__aeabi_dadd+0x40>
 80012c2:	e098      	b.n	80013f6 <__aeabi_dadd+0x172>
 80012c4:	2a00      	cmp	r2, #0
 80012c6:	dc00      	bgt.n	80012ca <__aeabi_dadd+0x46>
 80012c8:	e081      	b.n	80013ce <__aeabi_dadd+0x14a>
 80012ca:	2900      	cmp	r1, #0
 80012cc:	d100      	bne.n	80012d0 <__aeabi_dadd+0x4c>
 80012ce:	e0b6      	b.n	800143e <__aeabi_dadd+0x1ba>
 80012d0:	49c9      	ldr	r1, [pc, #804]	; (80015f8 <__aeabi_dadd+0x374>)
 80012d2:	428e      	cmp	r6, r1
 80012d4:	d100      	bne.n	80012d8 <__aeabi_dadd+0x54>
 80012d6:	e172      	b.n	80015be <__aeabi_dadd+0x33a>
 80012d8:	2180      	movs	r1, #128	; 0x80
 80012da:	0028      	movs	r0, r5
 80012dc:	0409      	lsls	r1, r1, #16
 80012de:	4308      	orrs	r0, r1
 80012e0:	4684      	mov	ip, r0
 80012e2:	2a38      	cmp	r2, #56	; 0x38
 80012e4:	dd00      	ble.n	80012e8 <__aeabi_dadd+0x64>
 80012e6:	e15e      	b.n	80015a6 <__aeabi_dadd+0x322>
 80012e8:	2a1f      	cmp	r2, #31
 80012ea:	dd00      	ble.n	80012ee <__aeabi_dadd+0x6a>
 80012ec:	e1ee      	b.n	80016cc <__aeabi_dadd+0x448>
 80012ee:	2020      	movs	r0, #32
 80012f0:	0039      	movs	r1, r7
 80012f2:	4665      	mov	r5, ip
 80012f4:	1a80      	subs	r0, r0, r2
 80012f6:	4087      	lsls	r7, r0
 80012f8:	40d1      	lsrs	r1, r2
 80012fa:	4085      	lsls	r5, r0
 80012fc:	430d      	orrs	r5, r1
 80012fe:	0039      	movs	r1, r7
 8001300:	1e4f      	subs	r7, r1, #1
 8001302:	41b9      	sbcs	r1, r7
 8001304:	4667      	mov	r7, ip
 8001306:	40d7      	lsrs	r7, r2
 8001308:	4329      	orrs	r1, r5
 800130a:	1bdb      	subs	r3, r3, r7
 800130c:	464a      	mov	r2, r9
 800130e:	1a55      	subs	r5, r2, r1
 8001310:	45a9      	cmp	r9, r5
 8001312:	4189      	sbcs	r1, r1
 8001314:	4249      	negs	r1, r1
 8001316:	1a5b      	subs	r3, r3, r1
 8001318:	4698      	mov	r8, r3
 800131a:	4643      	mov	r3, r8
 800131c:	021b      	lsls	r3, r3, #8
 800131e:	d400      	bmi.n	8001322 <__aeabi_dadd+0x9e>
 8001320:	e0cc      	b.n	80014bc <__aeabi_dadd+0x238>
 8001322:	4643      	mov	r3, r8
 8001324:	025b      	lsls	r3, r3, #9
 8001326:	0a5b      	lsrs	r3, r3, #9
 8001328:	4698      	mov	r8, r3
 800132a:	4643      	mov	r3, r8
 800132c:	2b00      	cmp	r3, #0
 800132e:	d100      	bne.n	8001332 <__aeabi_dadd+0xae>
 8001330:	e12c      	b.n	800158c <__aeabi_dadd+0x308>
 8001332:	4640      	mov	r0, r8
 8001334:	f001 fe8e 	bl	8003054 <__clzsi2>
 8001338:	0001      	movs	r1, r0
 800133a:	3908      	subs	r1, #8
 800133c:	2220      	movs	r2, #32
 800133e:	0028      	movs	r0, r5
 8001340:	4643      	mov	r3, r8
 8001342:	1a52      	subs	r2, r2, r1
 8001344:	408b      	lsls	r3, r1
 8001346:	40d0      	lsrs	r0, r2
 8001348:	408d      	lsls	r5, r1
 800134a:	4303      	orrs	r3, r0
 800134c:	428e      	cmp	r6, r1
 800134e:	dd00      	ble.n	8001352 <__aeabi_dadd+0xce>
 8001350:	e117      	b.n	8001582 <__aeabi_dadd+0x2fe>
 8001352:	1b8e      	subs	r6, r1, r6
 8001354:	1c72      	adds	r2, r6, #1
 8001356:	2a1f      	cmp	r2, #31
 8001358:	dd00      	ble.n	800135c <__aeabi_dadd+0xd8>
 800135a:	e1a7      	b.n	80016ac <__aeabi_dadd+0x428>
 800135c:	2120      	movs	r1, #32
 800135e:	0018      	movs	r0, r3
 8001360:	002e      	movs	r6, r5
 8001362:	1a89      	subs	r1, r1, r2
 8001364:	408d      	lsls	r5, r1
 8001366:	4088      	lsls	r0, r1
 8001368:	40d6      	lsrs	r6, r2
 800136a:	40d3      	lsrs	r3, r2
 800136c:	1e69      	subs	r1, r5, #1
 800136e:	418d      	sbcs	r5, r1
 8001370:	4330      	orrs	r0, r6
 8001372:	4698      	mov	r8, r3
 8001374:	2600      	movs	r6, #0
 8001376:	4305      	orrs	r5, r0
 8001378:	076b      	lsls	r3, r5, #29
 800137a:	d009      	beq.n	8001390 <__aeabi_dadd+0x10c>
 800137c:	230f      	movs	r3, #15
 800137e:	402b      	ands	r3, r5
 8001380:	2b04      	cmp	r3, #4
 8001382:	d005      	beq.n	8001390 <__aeabi_dadd+0x10c>
 8001384:	1d2b      	adds	r3, r5, #4
 8001386:	42ab      	cmp	r3, r5
 8001388:	41ad      	sbcs	r5, r5
 800138a:	426d      	negs	r5, r5
 800138c:	44a8      	add	r8, r5
 800138e:	001d      	movs	r5, r3
 8001390:	4643      	mov	r3, r8
 8001392:	021b      	lsls	r3, r3, #8
 8001394:	d400      	bmi.n	8001398 <__aeabi_dadd+0x114>
 8001396:	e094      	b.n	80014c2 <__aeabi_dadd+0x23e>
 8001398:	4b97      	ldr	r3, [pc, #604]	; (80015f8 <__aeabi_dadd+0x374>)
 800139a:	1c72      	adds	r2, r6, #1
 800139c:	429a      	cmp	r2, r3
 800139e:	d100      	bne.n	80013a2 <__aeabi_dadd+0x11e>
 80013a0:	e09d      	b.n	80014de <__aeabi_dadd+0x25a>
 80013a2:	4641      	mov	r1, r8
 80013a4:	4b95      	ldr	r3, [pc, #596]	; (80015fc <__aeabi_dadd+0x378>)
 80013a6:	08ed      	lsrs	r5, r5, #3
 80013a8:	4019      	ands	r1, r3
 80013aa:	000b      	movs	r3, r1
 80013ac:	0552      	lsls	r2, r2, #21
 80013ae:	0749      	lsls	r1, r1, #29
 80013b0:	025b      	lsls	r3, r3, #9
 80013b2:	4329      	orrs	r1, r5
 80013b4:	0b1b      	lsrs	r3, r3, #12
 80013b6:	0d52      	lsrs	r2, r2, #21
 80013b8:	0512      	lsls	r2, r2, #20
 80013ba:	4313      	orrs	r3, r2
 80013bc:	07e4      	lsls	r4, r4, #31
 80013be:	4323      	orrs	r3, r4
 80013c0:	0008      	movs	r0, r1
 80013c2:	0019      	movs	r1, r3
 80013c4:	bce0      	pop	{r5, r6, r7}
 80013c6:	46ba      	mov	sl, r7
 80013c8:	46b1      	mov	r9, r6
 80013ca:	46a8      	mov	r8, r5
 80013cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ce:	2a00      	cmp	r2, #0
 80013d0:	d043      	beq.n	800145a <__aeabi_dadd+0x1d6>
 80013d2:	1b8a      	subs	r2, r1, r6
 80013d4:	2e00      	cmp	r6, #0
 80013d6:	d000      	beq.n	80013da <__aeabi_dadd+0x156>
 80013d8:	e12a      	b.n	8001630 <__aeabi_dadd+0x3ac>
 80013da:	464c      	mov	r4, r9
 80013dc:	431c      	orrs	r4, r3
 80013de:	d100      	bne.n	80013e2 <__aeabi_dadd+0x15e>
 80013e0:	e1d1      	b.n	8001786 <__aeabi_dadd+0x502>
 80013e2:	1e54      	subs	r4, r2, #1
 80013e4:	2a01      	cmp	r2, #1
 80013e6:	d100      	bne.n	80013ea <__aeabi_dadd+0x166>
 80013e8:	e21f      	b.n	800182a <__aeabi_dadd+0x5a6>
 80013ea:	4d83      	ldr	r5, [pc, #524]	; (80015f8 <__aeabi_dadd+0x374>)
 80013ec:	42aa      	cmp	r2, r5
 80013ee:	d100      	bne.n	80013f2 <__aeabi_dadd+0x16e>
 80013f0:	e272      	b.n	80018d8 <__aeabi_dadd+0x654>
 80013f2:	0022      	movs	r2, r4
 80013f4:	e123      	b.n	800163e <__aeabi_dadd+0x3ba>
 80013f6:	2a00      	cmp	r2, #0
 80013f8:	dc00      	bgt.n	80013fc <__aeabi_dadd+0x178>
 80013fa:	e098      	b.n	800152e <__aeabi_dadd+0x2aa>
 80013fc:	2900      	cmp	r1, #0
 80013fe:	d042      	beq.n	8001486 <__aeabi_dadd+0x202>
 8001400:	497d      	ldr	r1, [pc, #500]	; (80015f8 <__aeabi_dadd+0x374>)
 8001402:	428e      	cmp	r6, r1
 8001404:	d100      	bne.n	8001408 <__aeabi_dadd+0x184>
 8001406:	e0da      	b.n	80015be <__aeabi_dadd+0x33a>
 8001408:	2180      	movs	r1, #128	; 0x80
 800140a:	0028      	movs	r0, r5
 800140c:	0409      	lsls	r1, r1, #16
 800140e:	4308      	orrs	r0, r1
 8001410:	4684      	mov	ip, r0
 8001412:	2a38      	cmp	r2, #56	; 0x38
 8001414:	dd00      	ble.n	8001418 <__aeabi_dadd+0x194>
 8001416:	e129      	b.n	800166c <__aeabi_dadd+0x3e8>
 8001418:	2a1f      	cmp	r2, #31
 800141a:	dc00      	bgt.n	800141e <__aeabi_dadd+0x19a>
 800141c:	e187      	b.n	800172e <__aeabi_dadd+0x4aa>
 800141e:	0011      	movs	r1, r2
 8001420:	4665      	mov	r5, ip
 8001422:	3920      	subs	r1, #32
 8001424:	40cd      	lsrs	r5, r1
 8001426:	2a20      	cmp	r2, #32
 8001428:	d004      	beq.n	8001434 <__aeabi_dadd+0x1b0>
 800142a:	2040      	movs	r0, #64	; 0x40
 800142c:	4661      	mov	r1, ip
 800142e:	1a82      	subs	r2, r0, r2
 8001430:	4091      	lsls	r1, r2
 8001432:	430f      	orrs	r7, r1
 8001434:	0039      	movs	r1, r7
 8001436:	1e4f      	subs	r7, r1, #1
 8001438:	41b9      	sbcs	r1, r7
 800143a:	430d      	orrs	r5, r1
 800143c:	e11b      	b.n	8001676 <__aeabi_dadd+0x3f2>
 800143e:	0029      	movs	r1, r5
 8001440:	4339      	orrs	r1, r7
 8001442:	d100      	bne.n	8001446 <__aeabi_dadd+0x1c2>
 8001444:	e0b5      	b.n	80015b2 <__aeabi_dadd+0x32e>
 8001446:	1e51      	subs	r1, r2, #1
 8001448:	2a01      	cmp	r2, #1
 800144a:	d100      	bne.n	800144e <__aeabi_dadd+0x1ca>
 800144c:	e1ab      	b.n	80017a6 <__aeabi_dadd+0x522>
 800144e:	486a      	ldr	r0, [pc, #424]	; (80015f8 <__aeabi_dadd+0x374>)
 8001450:	4282      	cmp	r2, r0
 8001452:	d100      	bne.n	8001456 <__aeabi_dadd+0x1d2>
 8001454:	e1b2      	b.n	80017bc <__aeabi_dadd+0x538>
 8001456:	000a      	movs	r2, r1
 8001458:	e743      	b.n	80012e2 <__aeabi_dadd+0x5e>
 800145a:	4969      	ldr	r1, [pc, #420]	; (8001600 <__aeabi_dadd+0x37c>)
 800145c:	1c75      	adds	r5, r6, #1
 800145e:	420d      	tst	r5, r1
 8001460:	d000      	beq.n	8001464 <__aeabi_dadd+0x1e0>
 8001462:	e0cf      	b.n	8001604 <__aeabi_dadd+0x380>
 8001464:	2e00      	cmp	r6, #0
 8001466:	d000      	beq.n	800146a <__aeabi_dadd+0x1e6>
 8001468:	e193      	b.n	8001792 <__aeabi_dadd+0x50e>
 800146a:	4649      	mov	r1, r9
 800146c:	4319      	orrs	r1, r3
 800146e:	d100      	bne.n	8001472 <__aeabi_dadd+0x1ee>
 8001470:	e1d1      	b.n	8001816 <__aeabi_dadd+0x592>
 8001472:	4661      	mov	r1, ip
 8001474:	4339      	orrs	r1, r7
 8001476:	d000      	beq.n	800147a <__aeabi_dadd+0x1f6>
 8001478:	e1e3      	b.n	8001842 <__aeabi_dadd+0x5be>
 800147a:	4649      	mov	r1, r9
 800147c:	0758      	lsls	r0, r3, #29
 800147e:	08c9      	lsrs	r1, r1, #3
 8001480:	4301      	orrs	r1, r0
 8001482:	08db      	lsrs	r3, r3, #3
 8001484:	e026      	b.n	80014d4 <__aeabi_dadd+0x250>
 8001486:	0029      	movs	r1, r5
 8001488:	4339      	orrs	r1, r7
 800148a:	d100      	bne.n	800148e <__aeabi_dadd+0x20a>
 800148c:	e091      	b.n	80015b2 <__aeabi_dadd+0x32e>
 800148e:	1e51      	subs	r1, r2, #1
 8001490:	2a01      	cmp	r2, #1
 8001492:	d005      	beq.n	80014a0 <__aeabi_dadd+0x21c>
 8001494:	4858      	ldr	r0, [pc, #352]	; (80015f8 <__aeabi_dadd+0x374>)
 8001496:	4282      	cmp	r2, r0
 8001498:	d100      	bne.n	800149c <__aeabi_dadd+0x218>
 800149a:	e18f      	b.n	80017bc <__aeabi_dadd+0x538>
 800149c:	000a      	movs	r2, r1
 800149e:	e7b8      	b.n	8001412 <__aeabi_dadd+0x18e>
 80014a0:	003d      	movs	r5, r7
 80014a2:	444d      	add	r5, r9
 80014a4:	454d      	cmp	r5, r9
 80014a6:	4189      	sbcs	r1, r1
 80014a8:	4463      	add	r3, ip
 80014aa:	4698      	mov	r8, r3
 80014ac:	4249      	negs	r1, r1
 80014ae:	4488      	add	r8, r1
 80014b0:	4643      	mov	r3, r8
 80014b2:	2602      	movs	r6, #2
 80014b4:	021b      	lsls	r3, r3, #8
 80014b6:	d500      	bpl.n	80014ba <__aeabi_dadd+0x236>
 80014b8:	e0eb      	b.n	8001692 <__aeabi_dadd+0x40e>
 80014ba:	3e01      	subs	r6, #1
 80014bc:	076b      	lsls	r3, r5, #29
 80014be:	d000      	beq.n	80014c2 <__aeabi_dadd+0x23e>
 80014c0:	e75c      	b.n	800137c <__aeabi_dadd+0xf8>
 80014c2:	4643      	mov	r3, r8
 80014c4:	08e9      	lsrs	r1, r5, #3
 80014c6:	075a      	lsls	r2, r3, #29
 80014c8:	4311      	orrs	r1, r2
 80014ca:	0032      	movs	r2, r6
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	484a      	ldr	r0, [pc, #296]	; (80015f8 <__aeabi_dadd+0x374>)
 80014d0:	4282      	cmp	r2, r0
 80014d2:	d021      	beq.n	8001518 <__aeabi_dadd+0x294>
 80014d4:	031b      	lsls	r3, r3, #12
 80014d6:	0552      	lsls	r2, r2, #21
 80014d8:	0b1b      	lsrs	r3, r3, #12
 80014da:	0d52      	lsrs	r2, r2, #21
 80014dc:	e76c      	b.n	80013b8 <__aeabi_dadd+0x134>
 80014de:	2300      	movs	r3, #0
 80014e0:	2100      	movs	r1, #0
 80014e2:	e769      	b.n	80013b8 <__aeabi_dadd+0x134>
 80014e4:	002a      	movs	r2, r5
 80014e6:	433a      	orrs	r2, r7
 80014e8:	d069      	beq.n	80015be <__aeabi_dadd+0x33a>
 80014ea:	464a      	mov	r2, r9
 80014ec:	0758      	lsls	r0, r3, #29
 80014ee:	08d1      	lsrs	r1, r2, #3
 80014f0:	08da      	lsrs	r2, r3, #3
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	031b      	lsls	r3, r3, #12
 80014f6:	4308      	orrs	r0, r1
 80014f8:	421a      	tst	r2, r3
 80014fa:	d007      	beq.n	800150c <__aeabi_dadd+0x288>
 80014fc:	0029      	movs	r1, r5
 80014fe:	08ed      	lsrs	r5, r5, #3
 8001500:	421d      	tst	r5, r3
 8001502:	d103      	bne.n	800150c <__aeabi_dadd+0x288>
 8001504:	002a      	movs	r2, r5
 8001506:	08ff      	lsrs	r7, r7, #3
 8001508:	0748      	lsls	r0, r1, #29
 800150a:	4338      	orrs	r0, r7
 800150c:	0f43      	lsrs	r3, r0, #29
 800150e:	00c1      	lsls	r1, r0, #3
 8001510:	075b      	lsls	r3, r3, #29
 8001512:	08c9      	lsrs	r1, r1, #3
 8001514:	4319      	orrs	r1, r3
 8001516:	0013      	movs	r3, r2
 8001518:	000a      	movs	r2, r1
 800151a:	431a      	orrs	r2, r3
 800151c:	d100      	bne.n	8001520 <__aeabi_dadd+0x29c>
 800151e:	e213      	b.n	8001948 <__aeabi_dadd+0x6c4>
 8001520:	2280      	movs	r2, #128	; 0x80
 8001522:	0312      	lsls	r2, r2, #12
 8001524:	4313      	orrs	r3, r2
 8001526:	031b      	lsls	r3, r3, #12
 8001528:	4a33      	ldr	r2, [pc, #204]	; (80015f8 <__aeabi_dadd+0x374>)
 800152a:	0b1b      	lsrs	r3, r3, #12
 800152c:	e744      	b.n	80013b8 <__aeabi_dadd+0x134>
 800152e:	2a00      	cmp	r2, #0
 8001530:	d04b      	beq.n	80015ca <__aeabi_dadd+0x346>
 8001532:	1b8a      	subs	r2, r1, r6
 8001534:	2e00      	cmp	r6, #0
 8001536:	d100      	bne.n	800153a <__aeabi_dadd+0x2b6>
 8001538:	e0e7      	b.n	800170a <__aeabi_dadd+0x486>
 800153a:	482f      	ldr	r0, [pc, #188]	; (80015f8 <__aeabi_dadd+0x374>)
 800153c:	4281      	cmp	r1, r0
 800153e:	d100      	bne.n	8001542 <__aeabi_dadd+0x2be>
 8001540:	e195      	b.n	800186e <__aeabi_dadd+0x5ea>
 8001542:	2080      	movs	r0, #128	; 0x80
 8001544:	0400      	lsls	r0, r0, #16
 8001546:	4303      	orrs	r3, r0
 8001548:	2a38      	cmp	r2, #56	; 0x38
 800154a:	dd00      	ble.n	800154e <__aeabi_dadd+0x2ca>
 800154c:	e143      	b.n	80017d6 <__aeabi_dadd+0x552>
 800154e:	2a1f      	cmp	r2, #31
 8001550:	dd00      	ble.n	8001554 <__aeabi_dadd+0x2d0>
 8001552:	e1db      	b.n	800190c <__aeabi_dadd+0x688>
 8001554:	2020      	movs	r0, #32
 8001556:	001d      	movs	r5, r3
 8001558:	464e      	mov	r6, r9
 800155a:	1a80      	subs	r0, r0, r2
 800155c:	4085      	lsls	r5, r0
 800155e:	40d6      	lsrs	r6, r2
 8001560:	4335      	orrs	r5, r6
 8001562:	464e      	mov	r6, r9
 8001564:	4086      	lsls	r6, r0
 8001566:	0030      	movs	r0, r6
 8001568:	40d3      	lsrs	r3, r2
 800156a:	1e46      	subs	r6, r0, #1
 800156c:	41b0      	sbcs	r0, r6
 800156e:	449c      	add	ip, r3
 8001570:	4305      	orrs	r5, r0
 8001572:	19ed      	adds	r5, r5, r7
 8001574:	42bd      	cmp	r5, r7
 8001576:	419b      	sbcs	r3, r3
 8001578:	425b      	negs	r3, r3
 800157a:	4463      	add	r3, ip
 800157c:	4698      	mov	r8, r3
 800157e:	000e      	movs	r6, r1
 8001580:	e07f      	b.n	8001682 <__aeabi_dadd+0x3fe>
 8001582:	4a1e      	ldr	r2, [pc, #120]	; (80015fc <__aeabi_dadd+0x378>)
 8001584:	1a76      	subs	r6, r6, r1
 8001586:	4013      	ands	r3, r2
 8001588:	4698      	mov	r8, r3
 800158a:	e6f5      	b.n	8001378 <__aeabi_dadd+0xf4>
 800158c:	0028      	movs	r0, r5
 800158e:	f001 fd61 	bl	8003054 <__clzsi2>
 8001592:	0001      	movs	r1, r0
 8001594:	3118      	adds	r1, #24
 8001596:	291f      	cmp	r1, #31
 8001598:	dc00      	bgt.n	800159c <__aeabi_dadd+0x318>
 800159a:	e6cf      	b.n	800133c <__aeabi_dadd+0xb8>
 800159c:	002b      	movs	r3, r5
 800159e:	3808      	subs	r0, #8
 80015a0:	4083      	lsls	r3, r0
 80015a2:	2500      	movs	r5, #0
 80015a4:	e6d2      	b.n	800134c <__aeabi_dadd+0xc8>
 80015a6:	4662      	mov	r2, ip
 80015a8:	433a      	orrs	r2, r7
 80015aa:	0011      	movs	r1, r2
 80015ac:	1e4f      	subs	r7, r1, #1
 80015ae:	41b9      	sbcs	r1, r7
 80015b0:	e6ac      	b.n	800130c <__aeabi_dadd+0x88>
 80015b2:	4649      	mov	r1, r9
 80015b4:	0758      	lsls	r0, r3, #29
 80015b6:	08c9      	lsrs	r1, r1, #3
 80015b8:	4301      	orrs	r1, r0
 80015ba:	08db      	lsrs	r3, r3, #3
 80015bc:	e787      	b.n	80014ce <__aeabi_dadd+0x24a>
 80015be:	4649      	mov	r1, r9
 80015c0:	075a      	lsls	r2, r3, #29
 80015c2:	08c9      	lsrs	r1, r1, #3
 80015c4:	4311      	orrs	r1, r2
 80015c6:	08db      	lsrs	r3, r3, #3
 80015c8:	e7a6      	b.n	8001518 <__aeabi_dadd+0x294>
 80015ca:	490d      	ldr	r1, [pc, #52]	; (8001600 <__aeabi_dadd+0x37c>)
 80015cc:	1c70      	adds	r0, r6, #1
 80015ce:	4208      	tst	r0, r1
 80015d0:	d000      	beq.n	80015d4 <__aeabi_dadd+0x350>
 80015d2:	e0bb      	b.n	800174c <__aeabi_dadd+0x4c8>
 80015d4:	2e00      	cmp	r6, #0
 80015d6:	d000      	beq.n	80015da <__aeabi_dadd+0x356>
 80015d8:	e114      	b.n	8001804 <__aeabi_dadd+0x580>
 80015da:	4649      	mov	r1, r9
 80015dc:	4319      	orrs	r1, r3
 80015de:	d100      	bne.n	80015e2 <__aeabi_dadd+0x35e>
 80015e0:	e175      	b.n	80018ce <__aeabi_dadd+0x64a>
 80015e2:	0029      	movs	r1, r5
 80015e4:	4339      	orrs	r1, r7
 80015e6:	d000      	beq.n	80015ea <__aeabi_dadd+0x366>
 80015e8:	e17e      	b.n	80018e8 <__aeabi_dadd+0x664>
 80015ea:	4649      	mov	r1, r9
 80015ec:	0758      	lsls	r0, r3, #29
 80015ee:	08c9      	lsrs	r1, r1, #3
 80015f0:	4301      	orrs	r1, r0
 80015f2:	08db      	lsrs	r3, r3, #3
 80015f4:	e76e      	b.n	80014d4 <__aeabi_dadd+0x250>
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	000007ff 	.word	0x000007ff
 80015fc:	ff7fffff 	.word	0xff7fffff
 8001600:	000007fe 	.word	0x000007fe
 8001604:	4649      	mov	r1, r9
 8001606:	1bcd      	subs	r5, r1, r7
 8001608:	4661      	mov	r1, ip
 800160a:	1a58      	subs	r0, r3, r1
 800160c:	45a9      	cmp	r9, r5
 800160e:	4189      	sbcs	r1, r1
 8001610:	4249      	negs	r1, r1
 8001612:	4688      	mov	r8, r1
 8001614:	0001      	movs	r1, r0
 8001616:	4640      	mov	r0, r8
 8001618:	1a09      	subs	r1, r1, r0
 800161a:	4688      	mov	r8, r1
 800161c:	0209      	lsls	r1, r1, #8
 800161e:	d500      	bpl.n	8001622 <__aeabi_dadd+0x39e>
 8001620:	e0a6      	b.n	8001770 <__aeabi_dadd+0x4ec>
 8001622:	4641      	mov	r1, r8
 8001624:	4329      	orrs	r1, r5
 8001626:	d000      	beq.n	800162a <__aeabi_dadd+0x3a6>
 8001628:	e67f      	b.n	800132a <__aeabi_dadd+0xa6>
 800162a:	2300      	movs	r3, #0
 800162c:	2400      	movs	r4, #0
 800162e:	e751      	b.n	80014d4 <__aeabi_dadd+0x250>
 8001630:	4cc7      	ldr	r4, [pc, #796]	; (8001950 <__aeabi_dadd+0x6cc>)
 8001632:	42a1      	cmp	r1, r4
 8001634:	d100      	bne.n	8001638 <__aeabi_dadd+0x3b4>
 8001636:	e0c7      	b.n	80017c8 <__aeabi_dadd+0x544>
 8001638:	2480      	movs	r4, #128	; 0x80
 800163a:	0424      	lsls	r4, r4, #16
 800163c:	4323      	orrs	r3, r4
 800163e:	2a38      	cmp	r2, #56	; 0x38
 8001640:	dc54      	bgt.n	80016ec <__aeabi_dadd+0x468>
 8001642:	2a1f      	cmp	r2, #31
 8001644:	dd00      	ble.n	8001648 <__aeabi_dadd+0x3c4>
 8001646:	e0cc      	b.n	80017e2 <__aeabi_dadd+0x55e>
 8001648:	2420      	movs	r4, #32
 800164a:	4648      	mov	r0, r9
 800164c:	1aa4      	subs	r4, r4, r2
 800164e:	001d      	movs	r5, r3
 8001650:	464e      	mov	r6, r9
 8001652:	40a0      	lsls	r0, r4
 8001654:	40d6      	lsrs	r6, r2
 8001656:	40a5      	lsls	r5, r4
 8001658:	0004      	movs	r4, r0
 800165a:	40d3      	lsrs	r3, r2
 800165c:	4662      	mov	r2, ip
 800165e:	4335      	orrs	r5, r6
 8001660:	1e66      	subs	r6, r4, #1
 8001662:	41b4      	sbcs	r4, r6
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	469c      	mov	ip, r3
 8001668:	4325      	orrs	r5, r4
 800166a:	e044      	b.n	80016f6 <__aeabi_dadd+0x472>
 800166c:	4662      	mov	r2, ip
 800166e:	433a      	orrs	r2, r7
 8001670:	0015      	movs	r5, r2
 8001672:	1e6f      	subs	r7, r5, #1
 8001674:	41bd      	sbcs	r5, r7
 8001676:	444d      	add	r5, r9
 8001678:	454d      	cmp	r5, r9
 800167a:	4189      	sbcs	r1, r1
 800167c:	4249      	negs	r1, r1
 800167e:	4688      	mov	r8, r1
 8001680:	4498      	add	r8, r3
 8001682:	4643      	mov	r3, r8
 8001684:	021b      	lsls	r3, r3, #8
 8001686:	d400      	bmi.n	800168a <__aeabi_dadd+0x406>
 8001688:	e718      	b.n	80014bc <__aeabi_dadd+0x238>
 800168a:	4bb1      	ldr	r3, [pc, #708]	; (8001950 <__aeabi_dadd+0x6cc>)
 800168c:	3601      	adds	r6, #1
 800168e:	429e      	cmp	r6, r3
 8001690:	d049      	beq.n	8001726 <__aeabi_dadd+0x4a2>
 8001692:	4642      	mov	r2, r8
 8001694:	4baf      	ldr	r3, [pc, #700]	; (8001954 <__aeabi_dadd+0x6d0>)
 8001696:	2101      	movs	r1, #1
 8001698:	401a      	ands	r2, r3
 800169a:	0013      	movs	r3, r2
 800169c:	086a      	lsrs	r2, r5, #1
 800169e:	400d      	ands	r5, r1
 80016a0:	4315      	orrs	r5, r2
 80016a2:	07d9      	lsls	r1, r3, #31
 80016a4:	085b      	lsrs	r3, r3, #1
 80016a6:	4698      	mov	r8, r3
 80016a8:	430d      	orrs	r5, r1
 80016aa:	e665      	b.n	8001378 <__aeabi_dadd+0xf4>
 80016ac:	0018      	movs	r0, r3
 80016ae:	3e1f      	subs	r6, #31
 80016b0:	40f0      	lsrs	r0, r6
 80016b2:	2a20      	cmp	r2, #32
 80016b4:	d003      	beq.n	80016be <__aeabi_dadd+0x43a>
 80016b6:	2140      	movs	r1, #64	; 0x40
 80016b8:	1a8a      	subs	r2, r1, r2
 80016ba:	4093      	lsls	r3, r2
 80016bc:	431d      	orrs	r5, r3
 80016be:	1e69      	subs	r1, r5, #1
 80016c0:	418d      	sbcs	r5, r1
 80016c2:	2300      	movs	r3, #0
 80016c4:	2600      	movs	r6, #0
 80016c6:	4698      	mov	r8, r3
 80016c8:	4305      	orrs	r5, r0
 80016ca:	e6f7      	b.n	80014bc <__aeabi_dadd+0x238>
 80016cc:	0011      	movs	r1, r2
 80016ce:	4665      	mov	r5, ip
 80016d0:	3920      	subs	r1, #32
 80016d2:	40cd      	lsrs	r5, r1
 80016d4:	2a20      	cmp	r2, #32
 80016d6:	d004      	beq.n	80016e2 <__aeabi_dadd+0x45e>
 80016d8:	2040      	movs	r0, #64	; 0x40
 80016da:	4661      	mov	r1, ip
 80016dc:	1a82      	subs	r2, r0, r2
 80016de:	4091      	lsls	r1, r2
 80016e0:	430f      	orrs	r7, r1
 80016e2:	0039      	movs	r1, r7
 80016e4:	1e4f      	subs	r7, r1, #1
 80016e6:	41b9      	sbcs	r1, r7
 80016e8:	4329      	orrs	r1, r5
 80016ea:	e60f      	b.n	800130c <__aeabi_dadd+0x88>
 80016ec:	464a      	mov	r2, r9
 80016ee:	4313      	orrs	r3, r2
 80016f0:	001d      	movs	r5, r3
 80016f2:	1e6b      	subs	r3, r5, #1
 80016f4:	419d      	sbcs	r5, r3
 80016f6:	1b7d      	subs	r5, r7, r5
 80016f8:	42af      	cmp	r7, r5
 80016fa:	419b      	sbcs	r3, r3
 80016fc:	4662      	mov	r2, ip
 80016fe:	425b      	negs	r3, r3
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	4698      	mov	r8, r3
 8001704:	4654      	mov	r4, sl
 8001706:	000e      	movs	r6, r1
 8001708:	e607      	b.n	800131a <__aeabi_dadd+0x96>
 800170a:	4648      	mov	r0, r9
 800170c:	4318      	orrs	r0, r3
 800170e:	d100      	bne.n	8001712 <__aeabi_dadd+0x48e>
 8001710:	e0b3      	b.n	800187a <__aeabi_dadd+0x5f6>
 8001712:	1e50      	subs	r0, r2, #1
 8001714:	2a01      	cmp	r2, #1
 8001716:	d100      	bne.n	800171a <__aeabi_dadd+0x496>
 8001718:	e10d      	b.n	8001936 <__aeabi_dadd+0x6b2>
 800171a:	4d8d      	ldr	r5, [pc, #564]	; (8001950 <__aeabi_dadd+0x6cc>)
 800171c:	42aa      	cmp	r2, r5
 800171e:	d100      	bne.n	8001722 <__aeabi_dadd+0x49e>
 8001720:	e0a5      	b.n	800186e <__aeabi_dadd+0x5ea>
 8001722:	0002      	movs	r2, r0
 8001724:	e710      	b.n	8001548 <__aeabi_dadd+0x2c4>
 8001726:	0032      	movs	r2, r6
 8001728:	2300      	movs	r3, #0
 800172a:	2100      	movs	r1, #0
 800172c:	e644      	b.n	80013b8 <__aeabi_dadd+0x134>
 800172e:	2120      	movs	r1, #32
 8001730:	0038      	movs	r0, r7
 8001732:	1a89      	subs	r1, r1, r2
 8001734:	4665      	mov	r5, ip
 8001736:	408f      	lsls	r7, r1
 8001738:	408d      	lsls	r5, r1
 800173a:	40d0      	lsrs	r0, r2
 800173c:	1e79      	subs	r1, r7, #1
 800173e:	418f      	sbcs	r7, r1
 8001740:	4305      	orrs	r5, r0
 8001742:	433d      	orrs	r5, r7
 8001744:	4667      	mov	r7, ip
 8001746:	40d7      	lsrs	r7, r2
 8001748:	19db      	adds	r3, r3, r7
 800174a:	e794      	b.n	8001676 <__aeabi_dadd+0x3f2>
 800174c:	4a80      	ldr	r2, [pc, #512]	; (8001950 <__aeabi_dadd+0x6cc>)
 800174e:	4290      	cmp	r0, r2
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x4d0>
 8001752:	e0ec      	b.n	800192e <__aeabi_dadd+0x6aa>
 8001754:	0039      	movs	r1, r7
 8001756:	4449      	add	r1, r9
 8001758:	4549      	cmp	r1, r9
 800175a:	4192      	sbcs	r2, r2
 800175c:	4463      	add	r3, ip
 800175e:	4252      	negs	r2, r2
 8001760:	189b      	adds	r3, r3, r2
 8001762:	07dd      	lsls	r5, r3, #31
 8001764:	0849      	lsrs	r1, r1, #1
 8001766:	085b      	lsrs	r3, r3, #1
 8001768:	4698      	mov	r8, r3
 800176a:	0006      	movs	r6, r0
 800176c:	430d      	orrs	r5, r1
 800176e:	e6a5      	b.n	80014bc <__aeabi_dadd+0x238>
 8001770:	464a      	mov	r2, r9
 8001772:	1abd      	subs	r5, r7, r2
 8001774:	42af      	cmp	r7, r5
 8001776:	4189      	sbcs	r1, r1
 8001778:	4662      	mov	r2, ip
 800177a:	4249      	negs	r1, r1
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	1a5b      	subs	r3, r3, r1
 8001780:	4698      	mov	r8, r3
 8001782:	4654      	mov	r4, sl
 8001784:	e5d1      	b.n	800132a <__aeabi_dadd+0xa6>
 8001786:	076c      	lsls	r4, r5, #29
 8001788:	08f9      	lsrs	r1, r7, #3
 800178a:	4321      	orrs	r1, r4
 800178c:	08eb      	lsrs	r3, r5, #3
 800178e:	0004      	movs	r4, r0
 8001790:	e69d      	b.n	80014ce <__aeabi_dadd+0x24a>
 8001792:	464a      	mov	r2, r9
 8001794:	431a      	orrs	r2, r3
 8001796:	d175      	bne.n	8001884 <__aeabi_dadd+0x600>
 8001798:	4661      	mov	r1, ip
 800179a:	4339      	orrs	r1, r7
 800179c:	d114      	bne.n	80017c8 <__aeabi_dadd+0x544>
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	2400      	movs	r4, #0
 80017a2:	031b      	lsls	r3, r3, #12
 80017a4:	e6bc      	b.n	8001520 <__aeabi_dadd+0x29c>
 80017a6:	464a      	mov	r2, r9
 80017a8:	1bd5      	subs	r5, r2, r7
 80017aa:	45a9      	cmp	r9, r5
 80017ac:	4189      	sbcs	r1, r1
 80017ae:	4662      	mov	r2, ip
 80017b0:	4249      	negs	r1, r1
 80017b2:	1a9b      	subs	r3, r3, r2
 80017b4:	1a5b      	subs	r3, r3, r1
 80017b6:	4698      	mov	r8, r3
 80017b8:	2601      	movs	r6, #1
 80017ba:	e5ae      	b.n	800131a <__aeabi_dadd+0x96>
 80017bc:	464a      	mov	r2, r9
 80017be:	08d1      	lsrs	r1, r2, #3
 80017c0:	075a      	lsls	r2, r3, #29
 80017c2:	4311      	orrs	r1, r2
 80017c4:	08db      	lsrs	r3, r3, #3
 80017c6:	e6a7      	b.n	8001518 <__aeabi_dadd+0x294>
 80017c8:	4663      	mov	r3, ip
 80017ca:	08f9      	lsrs	r1, r7, #3
 80017cc:	075a      	lsls	r2, r3, #29
 80017ce:	4654      	mov	r4, sl
 80017d0:	4311      	orrs	r1, r2
 80017d2:	08db      	lsrs	r3, r3, #3
 80017d4:	e6a0      	b.n	8001518 <__aeabi_dadd+0x294>
 80017d6:	464a      	mov	r2, r9
 80017d8:	4313      	orrs	r3, r2
 80017da:	001d      	movs	r5, r3
 80017dc:	1e6b      	subs	r3, r5, #1
 80017de:	419d      	sbcs	r5, r3
 80017e0:	e6c7      	b.n	8001572 <__aeabi_dadd+0x2ee>
 80017e2:	0014      	movs	r4, r2
 80017e4:	001e      	movs	r6, r3
 80017e6:	3c20      	subs	r4, #32
 80017e8:	40e6      	lsrs	r6, r4
 80017ea:	2a20      	cmp	r2, #32
 80017ec:	d005      	beq.n	80017fa <__aeabi_dadd+0x576>
 80017ee:	2440      	movs	r4, #64	; 0x40
 80017f0:	1aa2      	subs	r2, r4, r2
 80017f2:	4093      	lsls	r3, r2
 80017f4:	464a      	mov	r2, r9
 80017f6:	431a      	orrs	r2, r3
 80017f8:	4691      	mov	r9, r2
 80017fa:	464d      	mov	r5, r9
 80017fc:	1e6b      	subs	r3, r5, #1
 80017fe:	419d      	sbcs	r5, r3
 8001800:	4335      	orrs	r5, r6
 8001802:	e778      	b.n	80016f6 <__aeabi_dadd+0x472>
 8001804:	464a      	mov	r2, r9
 8001806:	431a      	orrs	r2, r3
 8001808:	d000      	beq.n	800180c <__aeabi_dadd+0x588>
 800180a:	e66b      	b.n	80014e4 <__aeabi_dadd+0x260>
 800180c:	076b      	lsls	r3, r5, #29
 800180e:	08f9      	lsrs	r1, r7, #3
 8001810:	4319      	orrs	r1, r3
 8001812:	08eb      	lsrs	r3, r5, #3
 8001814:	e680      	b.n	8001518 <__aeabi_dadd+0x294>
 8001816:	4661      	mov	r1, ip
 8001818:	4339      	orrs	r1, r7
 800181a:	d054      	beq.n	80018c6 <__aeabi_dadd+0x642>
 800181c:	4663      	mov	r3, ip
 800181e:	08f9      	lsrs	r1, r7, #3
 8001820:	075c      	lsls	r4, r3, #29
 8001822:	4321      	orrs	r1, r4
 8001824:	08db      	lsrs	r3, r3, #3
 8001826:	0004      	movs	r4, r0
 8001828:	e654      	b.n	80014d4 <__aeabi_dadd+0x250>
 800182a:	464a      	mov	r2, r9
 800182c:	1abd      	subs	r5, r7, r2
 800182e:	42af      	cmp	r7, r5
 8001830:	4189      	sbcs	r1, r1
 8001832:	4662      	mov	r2, ip
 8001834:	4249      	negs	r1, r1
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	1a5b      	subs	r3, r3, r1
 800183a:	4698      	mov	r8, r3
 800183c:	0004      	movs	r4, r0
 800183e:	2601      	movs	r6, #1
 8001840:	e56b      	b.n	800131a <__aeabi_dadd+0x96>
 8001842:	464a      	mov	r2, r9
 8001844:	1bd5      	subs	r5, r2, r7
 8001846:	45a9      	cmp	r9, r5
 8001848:	4189      	sbcs	r1, r1
 800184a:	4662      	mov	r2, ip
 800184c:	4249      	negs	r1, r1
 800184e:	1a9a      	subs	r2, r3, r2
 8001850:	1a52      	subs	r2, r2, r1
 8001852:	4690      	mov	r8, r2
 8001854:	0212      	lsls	r2, r2, #8
 8001856:	d532      	bpl.n	80018be <__aeabi_dadd+0x63a>
 8001858:	464a      	mov	r2, r9
 800185a:	1abd      	subs	r5, r7, r2
 800185c:	42af      	cmp	r7, r5
 800185e:	4189      	sbcs	r1, r1
 8001860:	4662      	mov	r2, ip
 8001862:	4249      	negs	r1, r1
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	1a5b      	subs	r3, r3, r1
 8001868:	4698      	mov	r8, r3
 800186a:	0004      	movs	r4, r0
 800186c:	e584      	b.n	8001378 <__aeabi_dadd+0xf4>
 800186e:	4663      	mov	r3, ip
 8001870:	08f9      	lsrs	r1, r7, #3
 8001872:	075a      	lsls	r2, r3, #29
 8001874:	4311      	orrs	r1, r2
 8001876:	08db      	lsrs	r3, r3, #3
 8001878:	e64e      	b.n	8001518 <__aeabi_dadd+0x294>
 800187a:	08f9      	lsrs	r1, r7, #3
 800187c:	0768      	lsls	r0, r5, #29
 800187e:	4301      	orrs	r1, r0
 8001880:	08eb      	lsrs	r3, r5, #3
 8001882:	e624      	b.n	80014ce <__aeabi_dadd+0x24a>
 8001884:	4662      	mov	r2, ip
 8001886:	433a      	orrs	r2, r7
 8001888:	d100      	bne.n	800188c <__aeabi_dadd+0x608>
 800188a:	e698      	b.n	80015be <__aeabi_dadd+0x33a>
 800188c:	464a      	mov	r2, r9
 800188e:	08d1      	lsrs	r1, r2, #3
 8001890:	075a      	lsls	r2, r3, #29
 8001892:	4311      	orrs	r1, r2
 8001894:	08da      	lsrs	r2, r3, #3
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	031b      	lsls	r3, r3, #12
 800189a:	421a      	tst	r2, r3
 800189c:	d008      	beq.n	80018b0 <__aeabi_dadd+0x62c>
 800189e:	4660      	mov	r0, ip
 80018a0:	08c5      	lsrs	r5, r0, #3
 80018a2:	421d      	tst	r5, r3
 80018a4:	d104      	bne.n	80018b0 <__aeabi_dadd+0x62c>
 80018a6:	4654      	mov	r4, sl
 80018a8:	002a      	movs	r2, r5
 80018aa:	08f9      	lsrs	r1, r7, #3
 80018ac:	0743      	lsls	r3, r0, #29
 80018ae:	4319      	orrs	r1, r3
 80018b0:	0f4b      	lsrs	r3, r1, #29
 80018b2:	00c9      	lsls	r1, r1, #3
 80018b4:	075b      	lsls	r3, r3, #29
 80018b6:	08c9      	lsrs	r1, r1, #3
 80018b8:	4319      	orrs	r1, r3
 80018ba:	0013      	movs	r3, r2
 80018bc:	e62c      	b.n	8001518 <__aeabi_dadd+0x294>
 80018be:	4641      	mov	r1, r8
 80018c0:	4329      	orrs	r1, r5
 80018c2:	d000      	beq.n	80018c6 <__aeabi_dadd+0x642>
 80018c4:	e5fa      	b.n	80014bc <__aeabi_dadd+0x238>
 80018c6:	2300      	movs	r3, #0
 80018c8:	000a      	movs	r2, r1
 80018ca:	2400      	movs	r4, #0
 80018cc:	e602      	b.n	80014d4 <__aeabi_dadd+0x250>
 80018ce:	076b      	lsls	r3, r5, #29
 80018d0:	08f9      	lsrs	r1, r7, #3
 80018d2:	4319      	orrs	r1, r3
 80018d4:	08eb      	lsrs	r3, r5, #3
 80018d6:	e5fd      	b.n	80014d4 <__aeabi_dadd+0x250>
 80018d8:	4663      	mov	r3, ip
 80018da:	08f9      	lsrs	r1, r7, #3
 80018dc:	075b      	lsls	r3, r3, #29
 80018de:	4319      	orrs	r1, r3
 80018e0:	4663      	mov	r3, ip
 80018e2:	0004      	movs	r4, r0
 80018e4:	08db      	lsrs	r3, r3, #3
 80018e6:	e617      	b.n	8001518 <__aeabi_dadd+0x294>
 80018e8:	003d      	movs	r5, r7
 80018ea:	444d      	add	r5, r9
 80018ec:	4463      	add	r3, ip
 80018ee:	454d      	cmp	r5, r9
 80018f0:	4189      	sbcs	r1, r1
 80018f2:	4698      	mov	r8, r3
 80018f4:	4249      	negs	r1, r1
 80018f6:	4488      	add	r8, r1
 80018f8:	4643      	mov	r3, r8
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	d400      	bmi.n	8001900 <__aeabi_dadd+0x67c>
 80018fe:	e5dd      	b.n	80014bc <__aeabi_dadd+0x238>
 8001900:	4642      	mov	r2, r8
 8001902:	4b14      	ldr	r3, [pc, #80]	; (8001954 <__aeabi_dadd+0x6d0>)
 8001904:	2601      	movs	r6, #1
 8001906:	401a      	ands	r2, r3
 8001908:	4690      	mov	r8, r2
 800190a:	e5d7      	b.n	80014bc <__aeabi_dadd+0x238>
 800190c:	0010      	movs	r0, r2
 800190e:	001e      	movs	r6, r3
 8001910:	3820      	subs	r0, #32
 8001912:	40c6      	lsrs	r6, r0
 8001914:	2a20      	cmp	r2, #32
 8001916:	d005      	beq.n	8001924 <__aeabi_dadd+0x6a0>
 8001918:	2040      	movs	r0, #64	; 0x40
 800191a:	1a82      	subs	r2, r0, r2
 800191c:	4093      	lsls	r3, r2
 800191e:	464a      	mov	r2, r9
 8001920:	431a      	orrs	r2, r3
 8001922:	4691      	mov	r9, r2
 8001924:	464d      	mov	r5, r9
 8001926:	1e6b      	subs	r3, r5, #1
 8001928:	419d      	sbcs	r5, r3
 800192a:	4335      	orrs	r5, r6
 800192c:	e621      	b.n	8001572 <__aeabi_dadd+0x2ee>
 800192e:	0002      	movs	r2, r0
 8001930:	2300      	movs	r3, #0
 8001932:	2100      	movs	r1, #0
 8001934:	e540      	b.n	80013b8 <__aeabi_dadd+0x134>
 8001936:	464a      	mov	r2, r9
 8001938:	19d5      	adds	r5, r2, r7
 800193a:	42bd      	cmp	r5, r7
 800193c:	4189      	sbcs	r1, r1
 800193e:	4463      	add	r3, ip
 8001940:	4698      	mov	r8, r3
 8001942:	4249      	negs	r1, r1
 8001944:	4488      	add	r8, r1
 8001946:	e5b3      	b.n	80014b0 <__aeabi_dadd+0x22c>
 8001948:	2100      	movs	r1, #0
 800194a:	4a01      	ldr	r2, [pc, #4]	; (8001950 <__aeabi_dadd+0x6cc>)
 800194c:	000b      	movs	r3, r1
 800194e:	e533      	b.n	80013b8 <__aeabi_dadd+0x134>
 8001950:	000007ff 	.word	0x000007ff
 8001954:	ff7fffff 	.word	0xff7fffff

08001958 <__aeabi_ddiv>:
 8001958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800195a:	4657      	mov	r7, sl
 800195c:	464e      	mov	r6, r9
 800195e:	4645      	mov	r5, r8
 8001960:	46de      	mov	lr, fp
 8001962:	b5e0      	push	{r5, r6, r7, lr}
 8001964:	4681      	mov	r9, r0
 8001966:	0005      	movs	r5, r0
 8001968:	030c      	lsls	r4, r1, #12
 800196a:	0048      	lsls	r0, r1, #1
 800196c:	4692      	mov	sl, r2
 800196e:	001f      	movs	r7, r3
 8001970:	b085      	sub	sp, #20
 8001972:	0b24      	lsrs	r4, r4, #12
 8001974:	0d40      	lsrs	r0, r0, #21
 8001976:	0fce      	lsrs	r6, r1, #31
 8001978:	2800      	cmp	r0, #0
 800197a:	d059      	beq.n	8001a30 <__aeabi_ddiv+0xd8>
 800197c:	4b87      	ldr	r3, [pc, #540]	; (8001b9c <__aeabi_ddiv+0x244>)
 800197e:	4298      	cmp	r0, r3
 8001980:	d100      	bne.n	8001984 <__aeabi_ddiv+0x2c>
 8001982:	e098      	b.n	8001ab6 <__aeabi_ddiv+0x15e>
 8001984:	0f6b      	lsrs	r3, r5, #29
 8001986:	00e4      	lsls	r4, r4, #3
 8001988:	431c      	orrs	r4, r3
 800198a:	2380      	movs	r3, #128	; 0x80
 800198c:	041b      	lsls	r3, r3, #16
 800198e:	4323      	orrs	r3, r4
 8001990:	4698      	mov	r8, r3
 8001992:	4b83      	ldr	r3, [pc, #524]	; (8001ba0 <__aeabi_ddiv+0x248>)
 8001994:	00ed      	lsls	r5, r5, #3
 8001996:	469b      	mov	fp, r3
 8001998:	2300      	movs	r3, #0
 800199a:	4699      	mov	r9, r3
 800199c:	4483      	add	fp, r0
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	033c      	lsls	r4, r7, #12
 80019a2:	007b      	lsls	r3, r7, #1
 80019a4:	4650      	mov	r0, sl
 80019a6:	0b24      	lsrs	r4, r4, #12
 80019a8:	0d5b      	lsrs	r3, r3, #21
 80019aa:	0fff      	lsrs	r7, r7, #31
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d067      	beq.n	8001a80 <__aeabi_ddiv+0x128>
 80019b0:	4a7a      	ldr	r2, [pc, #488]	; (8001b9c <__aeabi_ddiv+0x244>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d018      	beq.n	80019e8 <__aeabi_ddiv+0x90>
 80019b6:	497a      	ldr	r1, [pc, #488]	; (8001ba0 <__aeabi_ddiv+0x248>)
 80019b8:	0f42      	lsrs	r2, r0, #29
 80019ba:	468c      	mov	ip, r1
 80019bc:	00e4      	lsls	r4, r4, #3
 80019be:	4659      	mov	r1, fp
 80019c0:	4314      	orrs	r4, r2
 80019c2:	2280      	movs	r2, #128	; 0x80
 80019c4:	4463      	add	r3, ip
 80019c6:	0412      	lsls	r2, r2, #16
 80019c8:	1acb      	subs	r3, r1, r3
 80019ca:	4314      	orrs	r4, r2
 80019cc:	469b      	mov	fp, r3
 80019ce:	00c2      	lsls	r2, r0, #3
 80019d0:	2000      	movs	r0, #0
 80019d2:	0033      	movs	r3, r6
 80019d4:	407b      	eors	r3, r7
 80019d6:	469a      	mov	sl, r3
 80019d8:	464b      	mov	r3, r9
 80019da:	2b0f      	cmp	r3, #15
 80019dc:	d900      	bls.n	80019e0 <__aeabi_ddiv+0x88>
 80019de:	e0ef      	b.n	8001bc0 <__aeabi_ddiv+0x268>
 80019e0:	4970      	ldr	r1, [pc, #448]	; (8001ba4 <__aeabi_ddiv+0x24c>)
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	58cb      	ldr	r3, [r1, r3]
 80019e6:	469f      	mov	pc, r3
 80019e8:	4b6f      	ldr	r3, [pc, #444]	; (8001ba8 <__aeabi_ddiv+0x250>)
 80019ea:	4652      	mov	r2, sl
 80019ec:	469c      	mov	ip, r3
 80019ee:	4322      	orrs	r2, r4
 80019f0:	44e3      	add	fp, ip
 80019f2:	2a00      	cmp	r2, #0
 80019f4:	d000      	beq.n	80019f8 <__aeabi_ddiv+0xa0>
 80019f6:	e095      	b.n	8001b24 <__aeabi_ddiv+0x1cc>
 80019f8:	4649      	mov	r1, r9
 80019fa:	2302      	movs	r3, #2
 80019fc:	4319      	orrs	r1, r3
 80019fe:	4689      	mov	r9, r1
 8001a00:	2400      	movs	r4, #0
 8001a02:	2002      	movs	r0, #2
 8001a04:	e7e5      	b.n	80019d2 <__aeabi_ddiv+0x7a>
 8001a06:	2300      	movs	r3, #0
 8001a08:	2400      	movs	r4, #0
 8001a0a:	2500      	movs	r5, #0
 8001a0c:	4652      	mov	r2, sl
 8001a0e:	051b      	lsls	r3, r3, #20
 8001a10:	4323      	orrs	r3, r4
 8001a12:	07d2      	lsls	r2, r2, #31
 8001a14:	4313      	orrs	r3, r2
 8001a16:	0028      	movs	r0, r5
 8001a18:	0019      	movs	r1, r3
 8001a1a:	b005      	add	sp, #20
 8001a1c:	bcf0      	pop	{r4, r5, r6, r7}
 8001a1e:	46bb      	mov	fp, r7
 8001a20:	46b2      	mov	sl, r6
 8001a22:	46a9      	mov	r9, r5
 8001a24:	46a0      	mov	r8, r4
 8001a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a28:	2400      	movs	r4, #0
 8001a2a:	2500      	movs	r5, #0
 8001a2c:	4b5b      	ldr	r3, [pc, #364]	; (8001b9c <__aeabi_ddiv+0x244>)
 8001a2e:	e7ed      	b.n	8001a0c <__aeabi_ddiv+0xb4>
 8001a30:	464b      	mov	r3, r9
 8001a32:	4323      	orrs	r3, r4
 8001a34:	4698      	mov	r8, r3
 8001a36:	d100      	bne.n	8001a3a <__aeabi_ddiv+0xe2>
 8001a38:	e089      	b.n	8001b4e <__aeabi_ddiv+0x1f6>
 8001a3a:	2c00      	cmp	r4, #0
 8001a3c:	d100      	bne.n	8001a40 <__aeabi_ddiv+0xe8>
 8001a3e:	e1e0      	b.n	8001e02 <__aeabi_ddiv+0x4aa>
 8001a40:	0020      	movs	r0, r4
 8001a42:	f001 fb07 	bl	8003054 <__clzsi2>
 8001a46:	0001      	movs	r1, r0
 8001a48:	0002      	movs	r2, r0
 8001a4a:	390b      	subs	r1, #11
 8001a4c:	231d      	movs	r3, #29
 8001a4e:	1a5b      	subs	r3, r3, r1
 8001a50:	4649      	mov	r1, r9
 8001a52:	0010      	movs	r0, r2
 8001a54:	40d9      	lsrs	r1, r3
 8001a56:	3808      	subs	r0, #8
 8001a58:	4084      	lsls	r4, r0
 8001a5a:	000b      	movs	r3, r1
 8001a5c:	464d      	mov	r5, r9
 8001a5e:	4323      	orrs	r3, r4
 8001a60:	4698      	mov	r8, r3
 8001a62:	4085      	lsls	r5, r0
 8001a64:	4851      	ldr	r0, [pc, #324]	; (8001bac <__aeabi_ddiv+0x254>)
 8001a66:	033c      	lsls	r4, r7, #12
 8001a68:	1a83      	subs	r3, r0, r2
 8001a6a:	469b      	mov	fp, r3
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	4699      	mov	r9, r3
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	007b      	lsls	r3, r7, #1
 8001a74:	4650      	mov	r0, sl
 8001a76:	0b24      	lsrs	r4, r4, #12
 8001a78:	0d5b      	lsrs	r3, r3, #21
 8001a7a:	0fff      	lsrs	r7, r7, #31
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d197      	bne.n	80019b0 <__aeabi_ddiv+0x58>
 8001a80:	4652      	mov	r2, sl
 8001a82:	4322      	orrs	r2, r4
 8001a84:	d055      	beq.n	8001b32 <__aeabi_ddiv+0x1da>
 8001a86:	2c00      	cmp	r4, #0
 8001a88:	d100      	bne.n	8001a8c <__aeabi_ddiv+0x134>
 8001a8a:	e1ca      	b.n	8001e22 <__aeabi_ddiv+0x4ca>
 8001a8c:	0020      	movs	r0, r4
 8001a8e:	f001 fae1 	bl	8003054 <__clzsi2>
 8001a92:	0002      	movs	r2, r0
 8001a94:	3a0b      	subs	r2, #11
 8001a96:	231d      	movs	r3, #29
 8001a98:	0001      	movs	r1, r0
 8001a9a:	1a9b      	subs	r3, r3, r2
 8001a9c:	4652      	mov	r2, sl
 8001a9e:	3908      	subs	r1, #8
 8001aa0:	40da      	lsrs	r2, r3
 8001aa2:	408c      	lsls	r4, r1
 8001aa4:	4314      	orrs	r4, r2
 8001aa6:	4652      	mov	r2, sl
 8001aa8:	408a      	lsls	r2, r1
 8001aaa:	4b41      	ldr	r3, [pc, #260]	; (8001bb0 <__aeabi_ddiv+0x258>)
 8001aac:	4458      	add	r0, fp
 8001aae:	469b      	mov	fp, r3
 8001ab0:	4483      	add	fp, r0
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	e78d      	b.n	80019d2 <__aeabi_ddiv+0x7a>
 8001ab6:	464b      	mov	r3, r9
 8001ab8:	4323      	orrs	r3, r4
 8001aba:	4698      	mov	r8, r3
 8001abc:	d140      	bne.n	8001b40 <__aeabi_ddiv+0x1e8>
 8001abe:	2308      	movs	r3, #8
 8001ac0:	4699      	mov	r9, r3
 8001ac2:	3b06      	subs	r3, #6
 8001ac4:	2500      	movs	r5, #0
 8001ac6:	4683      	mov	fp, r0
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	e769      	b.n	80019a0 <__aeabi_ddiv+0x48>
 8001acc:	46b2      	mov	sl, r6
 8001ace:	9b00      	ldr	r3, [sp, #0]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d0a9      	beq.n	8001a28 <__aeabi_ddiv+0xd0>
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d100      	bne.n	8001ada <__aeabi_ddiv+0x182>
 8001ad8:	e211      	b.n	8001efe <__aeabi_ddiv+0x5a6>
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d093      	beq.n	8001a06 <__aeabi_ddiv+0xae>
 8001ade:	4a35      	ldr	r2, [pc, #212]	; (8001bb4 <__aeabi_ddiv+0x25c>)
 8001ae0:	445a      	add	r2, fp
 8001ae2:	2a00      	cmp	r2, #0
 8001ae4:	dc00      	bgt.n	8001ae8 <__aeabi_ddiv+0x190>
 8001ae6:	e13c      	b.n	8001d62 <__aeabi_ddiv+0x40a>
 8001ae8:	076b      	lsls	r3, r5, #29
 8001aea:	d000      	beq.n	8001aee <__aeabi_ddiv+0x196>
 8001aec:	e1a7      	b.n	8001e3e <__aeabi_ddiv+0x4e6>
 8001aee:	08ed      	lsrs	r5, r5, #3
 8001af0:	4643      	mov	r3, r8
 8001af2:	01db      	lsls	r3, r3, #7
 8001af4:	d506      	bpl.n	8001b04 <__aeabi_ddiv+0x1ac>
 8001af6:	4642      	mov	r2, r8
 8001af8:	4b2f      	ldr	r3, [pc, #188]	; (8001bb8 <__aeabi_ddiv+0x260>)
 8001afa:	401a      	ands	r2, r3
 8001afc:	4690      	mov	r8, r2
 8001afe:	2280      	movs	r2, #128	; 0x80
 8001b00:	00d2      	lsls	r2, r2, #3
 8001b02:	445a      	add	r2, fp
 8001b04:	4b2d      	ldr	r3, [pc, #180]	; (8001bbc <__aeabi_ddiv+0x264>)
 8001b06:	429a      	cmp	r2, r3
 8001b08:	dc8e      	bgt.n	8001a28 <__aeabi_ddiv+0xd0>
 8001b0a:	4643      	mov	r3, r8
 8001b0c:	0552      	lsls	r2, r2, #21
 8001b0e:	0758      	lsls	r0, r3, #29
 8001b10:	025c      	lsls	r4, r3, #9
 8001b12:	4305      	orrs	r5, r0
 8001b14:	0b24      	lsrs	r4, r4, #12
 8001b16:	0d53      	lsrs	r3, r2, #21
 8001b18:	e778      	b.n	8001a0c <__aeabi_ddiv+0xb4>
 8001b1a:	46ba      	mov	sl, r7
 8001b1c:	46a0      	mov	r8, r4
 8001b1e:	0015      	movs	r5, r2
 8001b20:	9000      	str	r0, [sp, #0]
 8001b22:	e7d4      	b.n	8001ace <__aeabi_ddiv+0x176>
 8001b24:	464a      	mov	r2, r9
 8001b26:	2303      	movs	r3, #3
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	4691      	mov	r9, r2
 8001b2c:	2003      	movs	r0, #3
 8001b2e:	4652      	mov	r2, sl
 8001b30:	e74f      	b.n	80019d2 <__aeabi_ddiv+0x7a>
 8001b32:	4649      	mov	r1, r9
 8001b34:	2301      	movs	r3, #1
 8001b36:	4319      	orrs	r1, r3
 8001b38:	4689      	mov	r9, r1
 8001b3a:	2400      	movs	r4, #0
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	e748      	b.n	80019d2 <__aeabi_ddiv+0x7a>
 8001b40:	230c      	movs	r3, #12
 8001b42:	4699      	mov	r9, r3
 8001b44:	3b09      	subs	r3, #9
 8001b46:	46a0      	mov	r8, r4
 8001b48:	4683      	mov	fp, r0
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	e728      	b.n	80019a0 <__aeabi_ddiv+0x48>
 8001b4e:	2304      	movs	r3, #4
 8001b50:	4699      	mov	r9, r3
 8001b52:	2300      	movs	r3, #0
 8001b54:	469b      	mov	fp, r3
 8001b56:	3301      	adds	r3, #1
 8001b58:	2500      	movs	r5, #0
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	e720      	b.n	80019a0 <__aeabi_ddiv+0x48>
 8001b5e:	2300      	movs	r3, #0
 8001b60:	2480      	movs	r4, #128	; 0x80
 8001b62:	469a      	mov	sl, r3
 8001b64:	2500      	movs	r5, #0
 8001b66:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <__aeabi_ddiv+0x244>)
 8001b68:	0324      	lsls	r4, r4, #12
 8001b6a:	e74f      	b.n	8001a0c <__aeabi_ddiv+0xb4>
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	4641      	mov	r1, r8
 8001b70:	031b      	lsls	r3, r3, #12
 8001b72:	4219      	tst	r1, r3
 8001b74:	d008      	beq.n	8001b88 <__aeabi_ddiv+0x230>
 8001b76:	421c      	tst	r4, r3
 8001b78:	d106      	bne.n	8001b88 <__aeabi_ddiv+0x230>
 8001b7a:	431c      	orrs	r4, r3
 8001b7c:	0324      	lsls	r4, r4, #12
 8001b7e:	46ba      	mov	sl, r7
 8001b80:	0015      	movs	r5, r2
 8001b82:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <__aeabi_ddiv+0x244>)
 8001b84:	0b24      	lsrs	r4, r4, #12
 8001b86:	e741      	b.n	8001a0c <__aeabi_ddiv+0xb4>
 8001b88:	2480      	movs	r4, #128	; 0x80
 8001b8a:	4643      	mov	r3, r8
 8001b8c:	0324      	lsls	r4, r4, #12
 8001b8e:	431c      	orrs	r4, r3
 8001b90:	0324      	lsls	r4, r4, #12
 8001b92:	46b2      	mov	sl, r6
 8001b94:	4b01      	ldr	r3, [pc, #4]	; (8001b9c <__aeabi_ddiv+0x244>)
 8001b96:	0b24      	lsrs	r4, r4, #12
 8001b98:	e738      	b.n	8001a0c <__aeabi_ddiv+0xb4>
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	000007ff 	.word	0x000007ff
 8001ba0:	fffffc01 	.word	0xfffffc01
 8001ba4:	0801a888 	.word	0x0801a888
 8001ba8:	fffff801 	.word	0xfffff801
 8001bac:	fffffc0d 	.word	0xfffffc0d
 8001bb0:	000003f3 	.word	0x000003f3
 8001bb4:	000003ff 	.word	0x000003ff
 8001bb8:	feffffff 	.word	0xfeffffff
 8001bbc:	000007fe 	.word	0x000007fe
 8001bc0:	4544      	cmp	r4, r8
 8001bc2:	d200      	bcs.n	8001bc6 <__aeabi_ddiv+0x26e>
 8001bc4:	e116      	b.n	8001df4 <__aeabi_ddiv+0x49c>
 8001bc6:	d100      	bne.n	8001bca <__aeabi_ddiv+0x272>
 8001bc8:	e111      	b.n	8001dee <__aeabi_ddiv+0x496>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	425b      	negs	r3, r3
 8001bce:	469c      	mov	ip, r3
 8001bd0:	002e      	movs	r6, r5
 8001bd2:	4640      	mov	r0, r8
 8001bd4:	2500      	movs	r5, #0
 8001bd6:	44e3      	add	fp, ip
 8001bd8:	0223      	lsls	r3, r4, #8
 8001bda:	0e14      	lsrs	r4, r2, #24
 8001bdc:	431c      	orrs	r4, r3
 8001bde:	0c1b      	lsrs	r3, r3, #16
 8001be0:	4699      	mov	r9, r3
 8001be2:	0423      	lsls	r3, r4, #16
 8001be4:	0c1f      	lsrs	r7, r3, #16
 8001be6:	0212      	lsls	r2, r2, #8
 8001be8:	4649      	mov	r1, r9
 8001bea:	9200      	str	r2, [sp, #0]
 8001bec:	9701      	str	r7, [sp, #4]
 8001bee:	f7fe fb35 	bl	800025c <__aeabi_uidivmod>
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	437a      	muls	r2, r7
 8001bf6:	040b      	lsls	r3, r1, #16
 8001bf8:	0c31      	lsrs	r1, r6, #16
 8001bfa:	4680      	mov	r8, r0
 8001bfc:	4319      	orrs	r1, r3
 8001bfe:	428a      	cmp	r2, r1
 8001c00:	d90b      	bls.n	8001c1a <__aeabi_ddiv+0x2c2>
 8001c02:	2301      	movs	r3, #1
 8001c04:	425b      	negs	r3, r3
 8001c06:	469c      	mov	ip, r3
 8001c08:	1909      	adds	r1, r1, r4
 8001c0a:	44e0      	add	r8, ip
 8001c0c:	428c      	cmp	r4, r1
 8001c0e:	d804      	bhi.n	8001c1a <__aeabi_ddiv+0x2c2>
 8001c10:	428a      	cmp	r2, r1
 8001c12:	d902      	bls.n	8001c1a <__aeabi_ddiv+0x2c2>
 8001c14:	1e83      	subs	r3, r0, #2
 8001c16:	4698      	mov	r8, r3
 8001c18:	1909      	adds	r1, r1, r4
 8001c1a:	1a88      	subs	r0, r1, r2
 8001c1c:	4649      	mov	r1, r9
 8001c1e:	f7fe fb1d 	bl	800025c <__aeabi_uidivmod>
 8001c22:	0409      	lsls	r1, r1, #16
 8001c24:	468c      	mov	ip, r1
 8001c26:	0431      	lsls	r1, r6, #16
 8001c28:	4666      	mov	r6, ip
 8001c2a:	9a01      	ldr	r2, [sp, #4]
 8001c2c:	0c09      	lsrs	r1, r1, #16
 8001c2e:	4342      	muls	r2, r0
 8001c30:	0003      	movs	r3, r0
 8001c32:	4331      	orrs	r1, r6
 8001c34:	428a      	cmp	r2, r1
 8001c36:	d904      	bls.n	8001c42 <__aeabi_ddiv+0x2ea>
 8001c38:	1909      	adds	r1, r1, r4
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	428c      	cmp	r4, r1
 8001c3e:	d800      	bhi.n	8001c42 <__aeabi_ddiv+0x2ea>
 8001c40:	e111      	b.n	8001e66 <__aeabi_ddiv+0x50e>
 8001c42:	1a89      	subs	r1, r1, r2
 8001c44:	4642      	mov	r2, r8
 8001c46:	9e00      	ldr	r6, [sp, #0]
 8001c48:	0412      	lsls	r2, r2, #16
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	0c33      	lsrs	r3, r6, #16
 8001c4e:	001f      	movs	r7, r3
 8001c50:	0c10      	lsrs	r0, r2, #16
 8001c52:	4690      	mov	r8, r2
 8001c54:	9302      	str	r3, [sp, #8]
 8001c56:	0413      	lsls	r3, r2, #16
 8001c58:	0432      	lsls	r2, r6, #16
 8001c5a:	0c16      	lsrs	r6, r2, #16
 8001c5c:	0032      	movs	r2, r6
 8001c5e:	0c1b      	lsrs	r3, r3, #16
 8001c60:	435a      	muls	r2, r3
 8001c62:	9603      	str	r6, [sp, #12]
 8001c64:	437b      	muls	r3, r7
 8001c66:	4346      	muls	r6, r0
 8001c68:	4378      	muls	r0, r7
 8001c6a:	0c17      	lsrs	r7, r2, #16
 8001c6c:	46bc      	mov	ip, r7
 8001c6e:	199b      	adds	r3, r3, r6
 8001c70:	4463      	add	r3, ip
 8001c72:	429e      	cmp	r6, r3
 8001c74:	d903      	bls.n	8001c7e <__aeabi_ddiv+0x326>
 8001c76:	2680      	movs	r6, #128	; 0x80
 8001c78:	0276      	lsls	r6, r6, #9
 8001c7a:	46b4      	mov	ip, r6
 8001c7c:	4460      	add	r0, ip
 8001c7e:	0c1e      	lsrs	r6, r3, #16
 8001c80:	1830      	adds	r0, r6, r0
 8001c82:	0416      	lsls	r6, r2, #16
 8001c84:	041b      	lsls	r3, r3, #16
 8001c86:	0c36      	lsrs	r6, r6, #16
 8001c88:	199e      	adds	r6, r3, r6
 8001c8a:	4281      	cmp	r1, r0
 8001c8c:	d200      	bcs.n	8001c90 <__aeabi_ddiv+0x338>
 8001c8e:	e09c      	b.n	8001dca <__aeabi_ddiv+0x472>
 8001c90:	d100      	bne.n	8001c94 <__aeabi_ddiv+0x33c>
 8001c92:	e097      	b.n	8001dc4 <__aeabi_ddiv+0x46c>
 8001c94:	1bae      	subs	r6, r5, r6
 8001c96:	1a09      	subs	r1, r1, r0
 8001c98:	42b5      	cmp	r5, r6
 8001c9a:	4180      	sbcs	r0, r0
 8001c9c:	4240      	negs	r0, r0
 8001c9e:	1a08      	subs	r0, r1, r0
 8001ca0:	4284      	cmp	r4, r0
 8001ca2:	d100      	bne.n	8001ca6 <__aeabi_ddiv+0x34e>
 8001ca4:	e111      	b.n	8001eca <__aeabi_ddiv+0x572>
 8001ca6:	4649      	mov	r1, r9
 8001ca8:	f7fe fad8 	bl	800025c <__aeabi_uidivmod>
 8001cac:	9a01      	ldr	r2, [sp, #4]
 8001cae:	040b      	lsls	r3, r1, #16
 8001cb0:	4342      	muls	r2, r0
 8001cb2:	0c31      	lsrs	r1, r6, #16
 8001cb4:	0005      	movs	r5, r0
 8001cb6:	4319      	orrs	r1, r3
 8001cb8:	428a      	cmp	r2, r1
 8001cba:	d907      	bls.n	8001ccc <__aeabi_ddiv+0x374>
 8001cbc:	1909      	adds	r1, r1, r4
 8001cbe:	3d01      	subs	r5, #1
 8001cc0:	428c      	cmp	r4, r1
 8001cc2:	d803      	bhi.n	8001ccc <__aeabi_ddiv+0x374>
 8001cc4:	428a      	cmp	r2, r1
 8001cc6:	d901      	bls.n	8001ccc <__aeabi_ddiv+0x374>
 8001cc8:	1e85      	subs	r5, r0, #2
 8001cca:	1909      	adds	r1, r1, r4
 8001ccc:	1a88      	subs	r0, r1, r2
 8001cce:	4649      	mov	r1, r9
 8001cd0:	f7fe fac4 	bl	800025c <__aeabi_uidivmod>
 8001cd4:	0409      	lsls	r1, r1, #16
 8001cd6:	468c      	mov	ip, r1
 8001cd8:	0431      	lsls	r1, r6, #16
 8001cda:	4666      	mov	r6, ip
 8001cdc:	9a01      	ldr	r2, [sp, #4]
 8001cde:	0c09      	lsrs	r1, r1, #16
 8001ce0:	4342      	muls	r2, r0
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	4331      	orrs	r1, r6
 8001ce6:	428a      	cmp	r2, r1
 8001ce8:	d907      	bls.n	8001cfa <__aeabi_ddiv+0x3a2>
 8001cea:	1909      	adds	r1, r1, r4
 8001cec:	3b01      	subs	r3, #1
 8001cee:	428c      	cmp	r4, r1
 8001cf0:	d803      	bhi.n	8001cfa <__aeabi_ddiv+0x3a2>
 8001cf2:	428a      	cmp	r2, r1
 8001cf4:	d901      	bls.n	8001cfa <__aeabi_ddiv+0x3a2>
 8001cf6:	1e83      	subs	r3, r0, #2
 8001cf8:	1909      	adds	r1, r1, r4
 8001cfa:	9e03      	ldr	r6, [sp, #12]
 8001cfc:	1a89      	subs	r1, r1, r2
 8001cfe:	0032      	movs	r2, r6
 8001d00:	042d      	lsls	r5, r5, #16
 8001d02:	431d      	orrs	r5, r3
 8001d04:	9f02      	ldr	r7, [sp, #8]
 8001d06:	042b      	lsls	r3, r5, #16
 8001d08:	0c1b      	lsrs	r3, r3, #16
 8001d0a:	435a      	muls	r2, r3
 8001d0c:	437b      	muls	r3, r7
 8001d0e:	469c      	mov	ip, r3
 8001d10:	0c28      	lsrs	r0, r5, #16
 8001d12:	4346      	muls	r6, r0
 8001d14:	0c13      	lsrs	r3, r2, #16
 8001d16:	44b4      	add	ip, r6
 8001d18:	4463      	add	r3, ip
 8001d1a:	4378      	muls	r0, r7
 8001d1c:	429e      	cmp	r6, r3
 8001d1e:	d903      	bls.n	8001d28 <__aeabi_ddiv+0x3d0>
 8001d20:	2680      	movs	r6, #128	; 0x80
 8001d22:	0276      	lsls	r6, r6, #9
 8001d24:	46b4      	mov	ip, r6
 8001d26:	4460      	add	r0, ip
 8001d28:	0c1e      	lsrs	r6, r3, #16
 8001d2a:	0412      	lsls	r2, r2, #16
 8001d2c:	041b      	lsls	r3, r3, #16
 8001d2e:	0c12      	lsrs	r2, r2, #16
 8001d30:	1830      	adds	r0, r6, r0
 8001d32:	189b      	adds	r3, r3, r2
 8001d34:	4281      	cmp	r1, r0
 8001d36:	d306      	bcc.n	8001d46 <__aeabi_ddiv+0x3ee>
 8001d38:	d002      	beq.n	8001d40 <__aeabi_ddiv+0x3e8>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	431d      	orrs	r5, r3
 8001d3e:	e6ce      	b.n	8001ade <__aeabi_ddiv+0x186>
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d100      	bne.n	8001d46 <__aeabi_ddiv+0x3ee>
 8001d44:	e6cb      	b.n	8001ade <__aeabi_ddiv+0x186>
 8001d46:	1861      	adds	r1, r4, r1
 8001d48:	1e6e      	subs	r6, r5, #1
 8001d4a:	42a1      	cmp	r1, r4
 8001d4c:	d200      	bcs.n	8001d50 <__aeabi_ddiv+0x3f8>
 8001d4e:	e0a4      	b.n	8001e9a <__aeabi_ddiv+0x542>
 8001d50:	4281      	cmp	r1, r0
 8001d52:	d200      	bcs.n	8001d56 <__aeabi_ddiv+0x3fe>
 8001d54:	e0c9      	b.n	8001eea <__aeabi_ddiv+0x592>
 8001d56:	d100      	bne.n	8001d5a <__aeabi_ddiv+0x402>
 8001d58:	e0d9      	b.n	8001f0e <__aeabi_ddiv+0x5b6>
 8001d5a:	0035      	movs	r5, r6
 8001d5c:	e7ed      	b.n	8001d3a <__aeabi_ddiv+0x3e2>
 8001d5e:	2501      	movs	r5, #1
 8001d60:	426d      	negs	r5, r5
 8001d62:	2101      	movs	r1, #1
 8001d64:	1a89      	subs	r1, r1, r2
 8001d66:	2938      	cmp	r1, #56	; 0x38
 8001d68:	dd00      	ble.n	8001d6c <__aeabi_ddiv+0x414>
 8001d6a:	e64c      	b.n	8001a06 <__aeabi_ddiv+0xae>
 8001d6c:	291f      	cmp	r1, #31
 8001d6e:	dc00      	bgt.n	8001d72 <__aeabi_ddiv+0x41a>
 8001d70:	e07f      	b.n	8001e72 <__aeabi_ddiv+0x51a>
 8001d72:	231f      	movs	r3, #31
 8001d74:	425b      	negs	r3, r3
 8001d76:	1a9a      	subs	r2, r3, r2
 8001d78:	4643      	mov	r3, r8
 8001d7a:	40d3      	lsrs	r3, r2
 8001d7c:	2920      	cmp	r1, #32
 8001d7e:	d004      	beq.n	8001d8a <__aeabi_ddiv+0x432>
 8001d80:	4644      	mov	r4, r8
 8001d82:	4a65      	ldr	r2, [pc, #404]	; (8001f18 <__aeabi_ddiv+0x5c0>)
 8001d84:	445a      	add	r2, fp
 8001d86:	4094      	lsls	r4, r2
 8001d88:	4325      	orrs	r5, r4
 8001d8a:	1e6a      	subs	r2, r5, #1
 8001d8c:	4195      	sbcs	r5, r2
 8001d8e:	2207      	movs	r2, #7
 8001d90:	432b      	orrs	r3, r5
 8001d92:	0015      	movs	r5, r2
 8001d94:	2400      	movs	r4, #0
 8001d96:	401d      	ands	r5, r3
 8001d98:	421a      	tst	r2, r3
 8001d9a:	d100      	bne.n	8001d9e <__aeabi_ddiv+0x446>
 8001d9c:	e0a1      	b.n	8001ee2 <__aeabi_ddiv+0x58a>
 8001d9e:	220f      	movs	r2, #15
 8001da0:	2400      	movs	r4, #0
 8001da2:	401a      	ands	r2, r3
 8001da4:	2a04      	cmp	r2, #4
 8001da6:	d100      	bne.n	8001daa <__aeabi_ddiv+0x452>
 8001da8:	e098      	b.n	8001edc <__aeabi_ddiv+0x584>
 8001daa:	1d1a      	adds	r2, r3, #4
 8001dac:	429a      	cmp	r2, r3
 8001dae:	419b      	sbcs	r3, r3
 8001db0:	425b      	negs	r3, r3
 8001db2:	18e4      	adds	r4, r4, r3
 8001db4:	0013      	movs	r3, r2
 8001db6:	0222      	lsls	r2, r4, #8
 8001db8:	d400      	bmi.n	8001dbc <__aeabi_ddiv+0x464>
 8001dba:	e08f      	b.n	8001edc <__aeabi_ddiv+0x584>
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	2400      	movs	r4, #0
 8001dc0:	2500      	movs	r5, #0
 8001dc2:	e623      	b.n	8001a0c <__aeabi_ddiv+0xb4>
 8001dc4:	42b5      	cmp	r5, r6
 8001dc6:	d300      	bcc.n	8001dca <__aeabi_ddiv+0x472>
 8001dc8:	e764      	b.n	8001c94 <__aeabi_ddiv+0x33c>
 8001dca:	4643      	mov	r3, r8
 8001dcc:	1e5a      	subs	r2, r3, #1
 8001dce:	9b00      	ldr	r3, [sp, #0]
 8001dd0:	469c      	mov	ip, r3
 8001dd2:	4465      	add	r5, ip
 8001dd4:	001f      	movs	r7, r3
 8001dd6:	429d      	cmp	r5, r3
 8001dd8:	419b      	sbcs	r3, r3
 8001dda:	425b      	negs	r3, r3
 8001ddc:	191b      	adds	r3, r3, r4
 8001dde:	18c9      	adds	r1, r1, r3
 8001de0:	428c      	cmp	r4, r1
 8001de2:	d23a      	bcs.n	8001e5a <__aeabi_ddiv+0x502>
 8001de4:	4288      	cmp	r0, r1
 8001de6:	d863      	bhi.n	8001eb0 <__aeabi_ddiv+0x558>
 8001de8:	d060      	beq.n	8001eac <__aeabi_ddiv+0x554>
 8001dea:	4690      	mov	r8, r2
 8001dec:	e752      	b.n	8001c94 <__aeabi_ddiv+0x33c>
 8001dee:	42aa      	cmp	r2, r5
 8001df0:	d900      	bls.n	8001df4 <__aeabi_ddiv+0x49c>
 8001df2:	e6ea      	b.n	8001bca <__aeabi_ddiv+0x272>
 8001df4:	4643      	mov	r3, r8
 8001df6:	07de      	lsls	r6, r3, #31
 8001df8:	0858      	lsrs	r0, r3, #1
 8001dfa:	086b      	lsrs	r3, r5, #1
 8001dfc:	431e      	orrs	r6, r3
 8001dfe:	07ed      	lsls	r5, r5, #31
 8001e00:	e6ea      	b.n	8001bd8 <__aeabi_ddiv+0x280>
 8001e02:	4648      	mov	r0, r9
 8001e04:	f001 f926 	bl	8003054 <__clzsi2>
 8001e08:	0001      	movs	r1, r0
 8001e0a:	0002      	movs	r2, r0
 8001e0c:	3115      	adds	r1, #21
 8001e0e:	3220      	adds	r2, #32
 8001e10:	291c      	cmp	r1, #28
 8001e12:	dc00      	bgt.n	8001e16 <__aeabi_ddiv+0x4be>
 8001e14:	e61a      	b.n	8001a4c <__aeabi_ddiv+0xf4>
 8001e16:	464b      	mov	r3, r9
 8001e18:	3808      	subs	r0, #8
 8001e1a:	4083      	lsls	r3, r0
 8001e1c:	2500      	movs	r5, #0
 8001e1e:	4698      	mov	r8, r3
 8001e20:	e620      	b.n	8001a64 <__aeabi_ddiv+0x10c>
 8001e22:	f001 f917 	bl	8003054 <__clzsi2>
 8001e26:	0003      	movs	r3, r0
 8001e28:	001a      	movs	r2, r3
 8001e2a:	3215      	adds	r2, #21
 8001e2c:	3020      	adds	r0, #32
 8001e2e:	2a1c      	cmp	r2, #28
 8001e30:	dc00      	bgt.n	8001e34 <__aeabi_ddiv+0x4dc>
 8001e32:	e630      	b.n	8001a96 <__aeabi_ddiv+0x13e>
 8001e34:	4654      	mov	r4, sl
 8001e36:	3b08      	subs	r3, #8
 8001e38:	2200      	movs	r2, #0
 8001e3a:	409c      	lsls	r4, r3
 8001e3c:	e635      	b.n	8001aaa <__aeabi_ddiv+0x152>
 8001e3e:	230f      	movs	r3, #15
 8001e40:	402b      	ands	r3, r5
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d100      	bne.n	8001e48 <__aeabi_ddiv+0x4f0>
 8001e46:	e652      	b.n	8001aee <__aeabi_ddiv+0x196>
 8001e48:	2305      	movs	r3, #5
 8001e4a:	425b      	negs	r3, r3
 8001e4c:	42ab      	cmp	r3, r5
 8001e4e:	419b      	sbcs	r3, r3
 8001e50:	3504      	adds	r5, #4
 8001e52:	425b      	negs	r3, r3
 8001e54:	08ed      	lsrs	r5, r5, #3
 8001e56:	4498      	add	r8, r3
 8001e58:	e64a      	b.n	8001af0 <__aeabi_ddiv+0x198>
 8001e5a:	428c      	cmp	r4, r1
 8001e5c:	d1c5      	bne.n	8001dea <__aeabi_ddiv+0x492>
 8001e5e:	42af      	cmp	r7, r5
 8001e60:	d9c0      	bls.n	8001de4 <__aeabi_ddiv+0x48c>
 8001e62:	4690      	mov	r8, r2
 8001e64:	e716      	b.n	8001c94 <__aeabi_ddiv+0x33c>
 8001e66:	428a      	cmp	r2, r1
 8001e68:	d800      	bhi.n	8001e6c <__aeabi_ddiv+0x514>
 8001e6a:	e6ea      	b.n	8001c42 <__aeabi_ddiv+0x2ea>
 8001e6c:	1e83      	subs	r3, r0, #2
 8001e6e:	1909      	adds	r1, r1, r4
 8001e70:	e6e7      	b.n	8001c42 <__aeabi_ddiv+0x2ea>
 8001e72:	4a2a      	ldr	r2, [pc, #168]	; (8001f1c <__aeabi_ddiv+0x5c4>)
 8001e74:	0028      	movs	r0, r5
 8001e76:	445a      	add	r2, fp
 8001e78:	4643      	mov	r3, r8
 8001e7a:	4095      	lsls	r5, r2
 8001e7c:	4093      	lsls	r3, r2
 8001e7e:	40c8      	lsrs	r0, r1
 8001e80:	1e6a      	subs	r2, r5, #1
 8001e82:	4195      	sbcs	r5, r2
 8001e84:	4644      	mov	r4, r8
 8001e86:	4303      	orrs	r3, r0
 8001e88:	432b      	orrs	r3, r5
 8001e8a:	40cc      	lsrs	r4, r1
 8001e8c:	075a      	lsls	r2, r3, #29
 8001e8e:	d092      	beq.n	8001db6 <__aeabi_ddiv+0x45e>
 8001e90:	220f      	movs	r2, #15
 8001e92:	401a      	ands	r2, r3
 8001e94:	2a04      	cmp	r2, #4
 8001e96:	d188      	bne.n	8001daa <__aeabi_ddiv+0x452>
 8001e98:	e78d      	b.n	8001db6 <__aeabi_ddiv+0x45e>
 8001e9a:	0035      	movs	r5, r6
 8001e9c:	4281      	cmp	r1, r0
 8001e9e:	d000      	beq.n	8001ea2 <__aeabi_ddiv+0x54a>
 8001ea0:	e74b      	b.n	8001d3a <__aeabi_ddiv+0x3e2>
 8001ea2:	9a00      	ldr	r2, [sp, #0]
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d000      	beq.n	8001eaa <__aeabi_ddiv+0x552>
 8001ea8:	e747      	b.n	8001d3a <__aeabi_ddiv+0x3e2>
 8001eaa:	e618      	b.n	8001ade <__aeabi_ddiv+0x186>
 8001eac:	42ae      	cmp	r6, r5
 8001eae:	d99c      	bls.n	8001dea <__aeabi_ddiv+0x492>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	425b      	negs	r3, r3
 8001eb4:	469c      	mov	ip, r3
 8001eb6:	9b00      	ldr	r3, [sp, #0]
 8001eb8:	44e0      	add	r8, ip
 8001eba:	469c      	mov	ip, r3
 8001ebc:	4465      	add	r5, ip
 8001ebe:	429d      	cmp	r5, r3
 8001ec0:	419b      	sbcs	r3, r3
 8001ec2:	425b      	negs	r3, r3
 8001ec4:	191b      	adds	r3, r3, r4
 8001ec6:	18c9      	adds	r1, r1, r3
 8001ec8:	e6e4      	b.n	8001c94 <__aeabi_ddiv+0x33c>
 8001eca:	4a15      	ldr	r2, [pc, #84]	; (8001f20 <__aeabi_ddiv+0x5c8>)
 8001ecc:	445a      	add	r2, fp
 8001ece:	2a00      	cmp	r2, #0
 8001ed0:	dc00      	bgt.n	8001ed4 <__aeabi_ddiv+0x57c>
 8001ed2:	e744      	b.n	8001d5e <__aeabi_ddiv+0x406>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	2500      	movs	r5, #0
 8001ed8:	4498      	add	r8, r3
 8001eda:	e609      	b.n	8001af0 <__aeabi_ddiv+0x198>
 8001edc:	0765      	lsls	r5, r4, #29
 8001ede:	0264      	lsls	r4, r4, #9
 8001ee0:	0b24      	lsrs	r4, r4, #12
 8001ee2:	08db      	lsrs	r3, r3, #3
 8001ee4:	431d      	orrs	r5, r3
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e590      	b.n	8001a0c <__aeabi_ddiv+0xb4>
 8001eea:	9e00      	ldr	r6, [sp, #0]
 8001eec:	3d02      	subs	r5, #2
 8001eee:	0072      	lsls	r2, r6, #1
 8001ef0:	42b2      	cmp	r2, r6
 8001ef2:	41bf      	sbcs	r7, r7
 8001ef4:	427f      	negs	r7, r7
 8001ef6:	193c      	adds	r4, r7, r4
 8001ef8:	1909      	adds	r1, r1, r4
 8001efa:	9200      	str	r2, [sp, #0]
 8001efc:	e7ce      	b.n	8001e9c <__aeabi_ddiv+0x544>
 8001efe:	2480      	movs	r4, #128	; 0x80
 8001f00:	4643      	mov	r3, r8
 8001f02:	0324      	lsls	r4, r4, #12
 8001f04:	431c      	orrs	r4, r3
 8001f06:	0324      	lsls	r4, r4, #12
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <__aeabi_ddiv+0x5cc>)
 8001f0a:	0b24      	lsrs	r4, r4, #12
 8001f0c:	e57e      	b.n	8001a0c <__aeabi_ddiv+0xb4>
 8001f0e:	9a00      	ldr	r2, [sp, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d3ea      	bcc.n	8001eea <__aeabi_ddiv+0x592>
 8001f14:	0035      	movs	r5, r6
 8001f16:	e7c4      	b.n	8001ea2 <__aeabi_ddiv+0x54a>
 8001f18:	0000043e 	.word	0x0000043e
 8001f1c:	0000041e 	.word	0x0000041e
 8001f20:	000003ff 	.word	0x000003ff
 8001f24:	000007ff 	.word	0x000007ff

08001f28 <__eqdf2>:
 8001f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f2a:	464f      	mov	r7, r9
 8001f2c:	4646      	mov	r6, r8
 8001f2e:	46d6      	mov	lr, sl
 8001f30:	4694      	mov	ip, r2
 8001f32:	4691      	mov	r9, r2
 8001f34:	031a      	lsls	r2, r3, #12
 8001f36:	0b12      	lsrs	r2, r2, #12
 8001f38:	4d18      	ldr	r5, [pc, #96]	; (8001f9c <__eqdf2+0x74>)
 8001f3a:	b5c0      	push	{r6, r7, lr}
 8001f3c:	004c      	lsls	r4, r1, #1
 8001f3e:	030f      	lsls	r7, r1, #12
 8001f40:	4692      	mov	sl, r2
 8001f42:	005a      	lsls	r2, r3, #1
 8001f44:	0006      	movs	r6, r0
 8001f46:	4680      	mov	r8, r0
 8001f48:	0b3f      	lsrs	r7, r7, #12
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	0d64      	lsrs	r4, r4, #21
 8001f4e:	0fc9      	lsrs	r1, r1, #31
 8001f50:	0d52      	lsrs	r2, r2, #21
 8001f52:	0fdb      	lsrs	r3, r3, #31
 8001f54:	42ac      	cmp	r4, r5
 8001f56:	d00a      	beq.n	8001f6e <__eqdf2+0x46>
 8001f58:	42aa      	cmp	r2, r5
 8001f5a:	d003      	beq.n	8001f64 <__eqdf2+0x3c>
 8001f5c:	4294      	cmp	r4, r2
 8001f5e:	d101      	bne.n	8001f64 <__eqdf2+0x3c>
 8001f60:	4557      	cmp	r7, sl
 8001f62:	d00d      	beq.n	8001f80 <__eqdf2+0x58>
 8001f64:	bce0      	pop	{r5, r6, r7}
 8001f66:	46ba      	mov	sl, r7
 8001f68:	46b1      	mov	r9, r6
 8001f6a:	46a8      	mov	r8, r5
 8001f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f6e:	003d      	movs	r5, r7
 8001f70:	4335      	orrs	r5, r6
 8001f72:	d1f7      	bne.n	8001f64 <__eqdf2+0x3c>
 8001f74:	42a2      	cmp	r2, r4
 8001f76:	d1f5      	bne.n	8001f64 <__eqdf2+0x3c>
 8001f78:	4652      	mov	r2, sl
 8001f7a:	4665      	mov	r5, ip
 8001f7c:	432a      	orrs	r2, r5
 8001f7e:	d1f1      	bne.n	8001f64 <__eqdf2+0x3c>
 8001f80:	2001      	movs	r0, #1
 8001f82:	45c8      	cmp	r8, r9
 8001f84:	d1ee      	bne.n	8001f64 <__eqdf2+0x3c>
 8001f86:	4299      	cmp	r1, r3
 8001f88:	d006      	beq.n	8001f98 <__eqdf2+0x70>
 8001f8a:	2c00      	cmp	r4, #0
 8001f8c:	d1ea      	bne.n	8001f64 <__eqdf2+0x3c>
 8001f8e:	433e      	orrs	r6, r7
 8001f90:	0030      	movs	r0, r6
 8001f92:	1e46      	subs	r6, r0, #1
 8001f94:	41b0      	sbcs	r0, r6
 8001f96:	e7e5      	b.n	8001f64 <__eqdf2+0x3c>
 8001f98:	2000      	movs	r0, #0
 8001f9a:	e7e3      	b.n	8001f64 <__eqdf2+0x3c>
 8001f9c:	000007ff 	.word	0x000007ff

08001fa0 <__gedf2>:
 8001fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fa2:	464e      	mov	r6, r9
 8001fa4:	4645      	mov	r5, r8
 8001fa6:	4657      	mov	r7, sl
 8001fa8:	46de      	mov	lr, fp
 8001faa:	0004      	movs	r4, r0
 8001fac:	0018      	movs	r0, r3
 8001fae:	b5e0      	push	{r5, r6, r7, lr}
 8001fb0:	0016      	movs	r6, r2
 8001fb2:	031b      	lsls	r3, r3, #12
 8001fb4:	0b1b      	lsrs	r3, r3, #12
 8001fb6:	4d32      	ldr	r5, [pc, #200]	; (8002080 <__gedf2+0xe0>)
 8001fb8:	030f      	lsls	r7, r1, #12
 8001fba:	004a      	lsls	r2, r1, #1
 8001fbc:	4699      	mov	r9, r3
 8001fbe:	0043      	lsls	r3, r0, #1
 8001fc0:	46a4      	mov	ip, r4
 8001fc2:	46b0      	mov	r8, r6
 8001fc4:	0b3f      	lsrs	r7, r7, #12
 8001fc6:	0d52      	lsrs	r2, r2, #21
 8001fc8:	0fc9      	lsrs	r1, r1, #31
 8001fca:	0d5b      	lsrs	r3, r3, #21
 8001fcc:	0fc0      	lsrs	r0, r0, #31
 8001fce:	42aa      	cmp	r2, r5
 8001fd0:	d029      	beq.n	8002026 <__gedf2+0x86>
 8001fd2:	42ab      	cmp	r3, r5
 8001fd4:	d018      	beq.n	8002008 <__gedf2+0x68>
 8001fd6:	2a00      	cmp	r2, #0
 8001fd8:	d12a      	bne.n	8002030 <__gedf2+0x90>
 8001fda:	433c      	orrs	r4, r7
 8001fdc:	46a3      	mov	fp, r4
 8001fde:	4265      	negs	r5, r4
 8001fe0:	4165      	adcs	r5, r4
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d102      	bne.n	8001fec <__gedf2+0x4c>
 8001fe6:	464c      	mov	r4, r9
 8001fe8:	4326      	orrs	r6, r4
 8001fea:	d027      	beq.n	800203c <__gedf2+0x9c>
 8001fec:	2d00      	cmp	r5, #0
 8001fee:	d115      	bne.n	800201c <__gedf2+0x7c>
 8001ff0:	4281      	cmp	r1, r0
 8001ff2:	d028      	beq.n	8002046 <__gedf2+0xa6>
 8001ff4:	2002      	movs	r0, #2
 8001ff6:	3901      	subs	r1, #1
 8001ff8:	4008      	ands	r0, r1
 8001ffa:	3801      	subs	r0, #1
 8001ffc:	bcf0      	pop	{r4, r5, r6, r7}
 8001ffe:	46bb      	mov	fp, r7
 8002000:	46b2      	mov	sl, r6
 8002002:	46a9      	mov	r9, r5
 8002004:	46a0      	mov	r8, r4
 8002006:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002008:	464d      	mov	r5, r9
 800200a:	432e      	orrs	r6, r5
 800200c:	d12f      	bne.n	800206e <__gedf2+0xce>
 800200e:	2a00      	cmp	r2, #0
 8002010:	d1ee      	bne.n	8001ff0 <__gedf2+0x50>
 8002012:	433c      	orrs	r4, r7
 8002014:	4265      	negs	r5, r4
 8002016:	4165      	adcs	r5, r4
 8002018:	2d00      	cmp	r5, #0
 800201a:	d0e9      	beq.n	8001ff0 <__gedf2+0x50>
 800201c:	2800      	cmp	r0, #0
 800201e:	d1ed      	bne.n	8001ffc <__gedf2+0x5c>
 8002020:	2001      	movs	r0, #1
 8002022:	4240      	negs	r0, r0
 8002024:	e7ea      	b.n	8001ffc <__gedf2+0x5c>
 8002026:	003d      	movs	r5, r7
 8002028:	4325      	orrs	r5, r4
 800202a:	d120      	bne.n	800206e <__gedf2+0xce>
 800202c:	4293      	cmp	r3, r2
 800202e:	d0eb      	beq.n	8002008 <__gedf2+0x68>
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1dd      	bne.n	8001ff0 <__gedf2+0x50>
 8002034:	464c      	mov	r4, r9
 8002036:	4326      	orrs	r6, r4
 8002038:	d1da      	bne.n	8001ff0 <__gedf2+0x50>
 800203a:	e7db      	b.n	8001ff4 <__gedf2+0x54>
 800203c:	465b      	mov	r3, fp
 800203e:	2000      	movs	r0, #0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0db      	beq.n	8001ffc <__gedf2+0x5c>
 8002044:	e7d6      	b.n	8001ff4 <__gedf2+0x54>
 8002046:	429a      	cmp	r2, r3
 8002048:	dc0a      	bgt.n	8002060 <__gedf2+0xc0>
 800204a:	dbe7      	blt.n	800201c <__gedf2+0x7c>
 800204c:	454f      	cmp	r7, r9
 800204e:	d8d1      	bhi.n	8001ff4 <__gedf2+0x54>
 8002050:	d010      	beq.n	8002074 <__gedf2+0xd4>
 8002052:	2000      	movs	r0, #0
 8002054:	454f      	cmp	r7, r9
 8002056:	d2d1      	bcs.n	8001ffc <__gedf2+0x5c>
 8002058:	2900      	cmp	r1, #0
 800205a:	d0e1      	beq.n	8002020 <__gedf2+0x80>
 800205c:	0008      	movs	r0, r1
 800205e:	e7cd      	b.n	8001ffc <__gedf2+0x5c>
 8002060:	4243      	negs	r3, r0
 8002062:	4158      	adcs	r0, r3
 8002064:	2302      	movs	r3, #2
 8002066:	4240      	negs	r0, r0
 8002068:	4018      	ands	r0, r3
 800206a:	3801      	subs	r0, #1
 800206c:	e7c6      	b.n	8001ffc <__gedf2+0x5c>
 800206e:	2002      	movs	r0, #2
 8002070:	4240      	negs	r0, r0
 8002072:	e7c3      	b.n	8001ffc <__gedf2+0x5c>
 8002074:	45c4      	cmp	ip, r8
 8002076:	d8bd      	bhi.n	8001ff4 <__gedf2+0x54>
 8002078:	2000      	movs	r0, #0
 800207a:	45c4      	cmp	ip, r8
 800207c:	d2be      	bcs.n	8001ffc <__gedf2+0x5c>
 800207e:	e7eb      	b.n	8002058 <__gedf2+0xb8>
 8002080:	000007ff 	.word	0x000007ff

08002084 <__ledf2>:
 8002084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002086:	464e      	mov	r6, r9
 8002088:	4645      	mov	r5, r8
 800208a:	4657      	mov	r7, sl
 800208c:	46de      	mov	lr, fp
 800208e:	0004      	movs	r4, r0
 8002090:	0018      	movs	r0, r3
 8002092:	b5e0      	push	{r5, r6, r7, lr}
 8002094:	0016      	movs	r6, r2
 8002096:	031b      	lsls	r3, r3, #12
 8002098:	0b1b      	lsrs	r3, r3, #12
 800209a:	4d31      	ldr	r5, [pc, #196]	; (8002160 <__ledf2+0xdc>)
 800209c:	030f      	lsls	r7, r1, #12
 800209e:	004a      	lsls	r2, r1, #1
 80020a0:	4699      	mov	r9, r3
 80020a2:	0043      	lsls	r3, r0, #1
 80020a4:	46a4      	mov	ip, r4
 80020a6:	46b0      	mov	r8, r6
 80020a8:	0b3f      	lsrs	r7, r7, #12
 80020aa:	0d52      	lsrs	r2, r2, #21
 80020ac:	0fc9      	lsrs	r1, r1, #31
 80020ae:	0d5b      	lsrs	r3, r3, #21
 80020b0:	0fc0      	lsrs	r0, r0, #31
 80020b2:	42aa      	cmp	r2, r5
 80020b4:	d011      	beq.n	80020da <__ledf2+0x56>
 80020b6:	42ab      	cmp	r3, r5
 80020b8:	d014      	beq.n	80020e4 <__ledf2+0x60>
 80020ba:	2a00      	cmp	r2, #0
 80020bc:	d12f      	bne.n	800211e <__ledf2+0x9a>
 80020be:	433c      	orrs	r4, r7
 80020c0:	46a3      	mov	fp, r4
 80020c2:	4265      	negs	r5, r4
 80020c4:	4165      	adcs	r5, r4
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d114      	bne.n	80020f4 <__ledf2+0x70>
 80020ca:	464c      	mov	r4, r9
 80020cc:	4326      	orrs	r6, r4
 80020ce:	d111      	bne.n	80020f4 <__ledf2+0x70>
 80020d0:	465b      	mov	r3, fp
 80020d2:	2000      	movs	r0, #0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d017      	beq.n	8002108 <__ledf2+0x84>
 80020d8:	e010      	b.n	80020fc <__ledf2+0x78>
 80020da:	003d      	movs	r5, r7
 80020dc:	4325      	orrs	r5, r4
 80020de:	d112      	bne.n	8002106 <__ledf2+0x82>
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d11c      	bne.n	800211e <__ledf2+0x9a>
 80020e4:	464d      	mov	r5, r9
 80020e6:	432e      	orrs	r6, r5
 80020e8:	d10d      	bne.n	8002106 <__ledf2+0x82>
 80020ea:	2a00      	cmp	r2, #0
 80020ec:	d104      	bne.n	80020f8 <__ledf2+0x74>
 80020ee:	433c      	orrs	r4, r7
 80020f0:	4265      	negs	r5, r4
 80020f2:	4165      	adcs	r5, r4
 80020f4:	2d00      	cmp	r5, #0
 80020f6:	d10d      	bne.n	8002114 <__ledf2+0x90>
 80020f8:	4281      	cmp	r1, r0
 80020fa:	d016      	beq.n	800212a <__ledf2+0xa6>
 80020fc:	2002      	movs	r0, #2
 80020fe:	3901      	subs	r1, #1
 8002100:	4008      	ands	r0, r1
 8002102:	3801      	subs	r0, #1
 8002104:	e000      	b.n	8002108 <__ledf2+0x84>
 8002106:	2002      	movs	r0, #2
 8002108:	bcf0      	pop	{r4, r5, r6, r7}
 800210a:	46bb      	mov	fp, r7
 800210c:	46b2      	mov	sl, r6
 800210e:	46a9      	mov	r9, r5
 8002110:	46a0      	mov	r8, r4
 8002112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002114:	2800      	cmp	r0, #0
 8002116:	d1f7      	bne.n	8002108 <__ledf2+0x84>
 8002118:	2001      	movs	r0, #1
 800211a:	4240      	negs	r0, r0
 800211c:	e7f4      	b.n	8002108 <__ledf2+0x84>
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1ea      	bne.n	80020f8 <__ledf2+0x74>
 8002122:	464c      	mov	r4, r9
 8002124:	4326      	orrs	r6, r4
 8002126:	d1e7      	bne.n	80020f8 <__ledf2+0x74>
 8002128:	e7e8      	b.n	80020fc <__ledf2+0x78>
 800212a:	429a      	cmp	r2, r3
 800212c:	dd06      	ble.n	800213c <__ledf2+0xb8>
 800212e:	4243      	negs	r3, r0
 8002130:	4158      	adcs	r0, r3
 8002132:	2302      	movs	r3, #2
 8002134:	4240      	negs	r0, r0
 8002136:	4018      	ands	r0, r3
 8002138:	3801      	subs	r0, #1
 800213a:	e7e5      	b.n	8002108 <__ledf2+0x84>
 800213c:	429a      	cmp	r2, r3
 800213e:	dbe9      	blt.n	8002114 <__ledf2+0x90>
 8002140:	454f      	cmp	r7, r9
 8002142:	d8db      	bhi.n	80020fc <__ledf2+0x78>
 8002144:	d006      	beq.n	8002154 <__ledf2+0xd0>
 8002146:	2000      	movs	r0, #0
 8002148:	454f      	cmp	r7, r9
 800214a:	d2dd      	bcs.n	8002108 <__ledf2+0x84>
 800214c:	2900      	cmp	r1, #0
 800214e:	d0e3      	beq.n	8002118 <__ledf2+0x94>
 8002150:	0008      	movs	r0, r1
 8002152:	e7d9      	b.n	8002108 <__ledf2+0x84>
 8002154:	45c4      	cmp	ip, r8
 8002156:	d8d1      	bhi.n	80020fc <__ledf2+0x78>
 8002158:	2000      	movs	r0, #0
 800215a:	45c4      	cmp	ip, r8
 800215c:	d2d4      	bcs.n	8002108 <__ledf2+0x84>
 800215e:	e7f5      	b.n	800214c <__ledf2+0xc8>
 8002160:	000007ff 	.word	0x000007ff

08002164 <__aeabi_dmul>:
 8002164:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002166:	4657      	mov	r7, sl
 8002168:	464e      	mov	r6, r9
 800216a:	4645      	mov	r5, r8
 800216c:	46de      	mov	lr, fp
 800216e:	b5e0      	push	{r5, r6, r7, lr}
 8002170:	4698      	mov	r8, r3
 8002172:	030c      	lsls	r4, r1, #12
 8002174:	004b      	lsls	r3, r1, #1
 8002176:	0006      	movs	r6, r0
 8002178:	4692      	mov	sl, r2
 800217a:	b087      	sub	sp, #28
 800217c:	0b24      	lsrs	r4, r4, #12
 800217e:	0d5b      	lsrs	r3, r3, #21
 8002180:	0fcf      	lsrs	r7, r1, #31
 8002182:	2b00      	cmp	r3, #0
 8002184:	d06c      	beq.n	8002260 <__aeabi_dmul+0xfc>
 8002186:	4add      	ldr	r2, [pc, #884]	; (80024fc <__aeabi_dmul+0x398>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d100      	bne.n	800218e <__aeabi_dmul+0x2a>
 800218c:	e086      	b.n	800229c <__aeabi_dmul+0x138>
 800218e:	0f42      	lsrs	r2, r0, #29
 8002190:	00e4      	lsls	r4, r4, #3
 8002192:	4314      	orrs	r4, r2
 8002194:	2280      	movs	r2, #128	; 0x80
 8002196:	0412      	lsls	r2, r2, #16
 8002198:	4314      	orrs	r4, r2
 800219a:	4ad9      	ldr	r2, [pc, #868]	; (8002500 <__aeabi_dmul+0x39c>)
 800219c:	00c5      	lsls	r5, r0, #3
 800219e:	4694      	mov	ip, r2
 80021a0:	4463      	add	r3, ip
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	2300      	movs	r3, #0
 80021a6:	4699      	mov	r9, r3
 80021a8:	469b      	mov	fp, r3
 80021aa:	4643      	mov	r3, r8
 80021ac:	4642      	mov	r2, r8
 80021ae:	031e      	lsls	r6, r3, #12
 80021b0:	0fd2      	lsrs	r2, r2, #31
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	4650      	mov	r0, sl
 80021b6:	4690      	mov	r8, r2
 80021b8:	0b36      	lsrs	r6, r6, #12
 80021ba:	0d5b      	lsrs	r3, r3, #21
 80021bc:	d100      	bne.n	80021c0 <__aeabi_dmul+0x5c>
 80021be:	e078      	b.n	80022b2 <__aeabi_dmul+0x14e>
 80021c0:	4ace      	ldr	r2, [pc, #824]	; (80024fc <__aeabi_dmul+0x398>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d01d      	beq.n	8002202 <__aeabi_dmul+0x9e>
 80021c6:	49ce      	ldr	r1, [pc, #824]	; (8002500 <__aeabi_dmul+0x39c>)
 80021c8:	0f42      	lsrs	r2, r0, #29
 80021ca:	468c      	mov	ip, r1
 80021cc:	9900      	ldr	r1, [sp, #0]
 80021ce:	4463      	add	r3, ip
 80021d0:	00f6      	lsls	r6, r6, #3
 80021d2:	468c      	mov	ip, r1
 80021d4:	4316      	orrs	r6, r2
 80021d6:	2280      	movs	r2, #128	; 0x80
 80021d8:	449c      	add	ip, r3
 80021da:	0412      	lsls	r2, r2, #16
 80021dc:	4663      	mov	r3, ip
 80021de:	4316      	orrs	r6, r2
 80021e0:	00c2      	lsls	r2, r0, #3
 80021e2:	2000      	movs	r0, #0
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	9900      	ldr	r1, [sp, #0]
 80021e8:	4643      	mov	r3, r8
 80021ea:	3101      	adds	r1, #1
 80021ec:	468c      	mov	ip, r1
 80021ee:	4649      	mov	r1, r9
 80021f0:	407b      	eors	r3, r7
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	290f      	cmp	r1, #15
 80021f6:	d900      	bls.n	80021fa <__aeabi_dmul+0x96>
 80021f8:	e07e      	b.n	80022f8 <__aeabi_dmul+0x194>
 80021fa:	4bc2      	ldr	r3, [pc, #776]	; (8002504 <__aeabi_dmul+0x3a0>)
 80021fc:	0089      	lsls	r1, r1, #2
 80021fe:	5859      	ldr	r1, [r3, r1]
 8002200:	468f      	mov	pc, r1
 8002202:	4652      	mov	r2, sl
 8002204:	9b00      	ldr	r3, [sp, #0]
 8002206:	4332      	orrs	r2, r6
 8002208:	d000      	beq.n	800220c <__aeabi_dmul+0xa8>
 800220a:	e156      	b.n	80024ba <__aeabi_dmul+0x356>
 800220c:	49bb      	ldr	r1, [pc, #748]	; (80024fc <__aeabi_dmul+0x398>)
 800220e:	2600      	movs	r6, #0
 8002210:	468c      	mov	ip, r1
 8002212:	4463      	add	r3, ip
 8002214:	4649      	mov	r1, r9
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	2302      	movs	r3, #2
 800221a:	4319      	orrs	r1, r3
 800221c:	4689      	mov	r9, r1
 800221e:	2002      	movs	r0, #2
 8002220:	e7e1      	b.n	80021e6 <__aeabi_dmul+0x82>
 8002222:	4643      	mov	r3, r8
 8002224:	9301      	str	r3, [sp, #4]
 8002226:	0034      	movs	r4, r6
 8002228:	0015      	movs	r5, r2
 800222a:	4683      	mov	fp, r0
 800222c:	465b      	mov	r3, fp
 800222e:	2b02      	cmp	r3, #2
 8002230:	d05e      	beq.n	80022f0 <__aeabi_dmul+0x18c>
 8002232:	2b03      	cmp	r3, #3
 8002234:	d100      	bne.n	8002238 <__aeabi_dmul+0xd4>
 8002236:	e1f3      	b.n	8002620 <__aeabi_dmul+0x4bc>
 8002238:	2b01      	cmp	r3, #1
 800223a:	d000      	beq.n	800223e <__aeabi_dmul+0xda>
 800223c:	e118      	b.n	8002470 <__aeabi_dmul+0x30c>
 800223e:	2200      	movs	r2, #0
 8002240:	2400      	movs	r4, #0
 8002242:	2500      	movs	r5, #0
 8002244:	9b01      	ldr	r3, [sp, #4]
 8002246:	0512      	lsls	r2, r2, #20
 8002248:	4322      	orrs	r2, r4
 800224a:	07db      	lsls	r3, r3, #31
 800224c:	431a      	orrs	r2, r3
 800224e:	0028      	movs	r0, r5
 8002250:	0011      	movs	r1, r2
 8002252:	b007      	add	sp, #28
 8002254:	bcf0      	pop	{r4, r5, r6, r7}
 8002256:	46bb      	mov	fp, r7
 8002258:	46b2      	mov	sl, r6
 800225a:	46a9      	mov	r9, r5
 800225c:	46a0      	mov	r8, r4
 800225e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002260:	0025      	movs	r5, r4
 8002262:	4305      	orrs	r5, r0
 8002264:	d100      	bne.n	8002268 <__aeabi_dmul+0x104>
 8002266:	e141      	b.n	80024ec <__aeabi_dmul+0x388>
 8002268:	2c00      	cmp	r4, #0
 800226a:	d100      	bne.n	800226e <__aeabi_dmul+0x10a>
 800226c:	e1ad      	b.n	80025ca <__aeabi_dmul+0x466>
 800226e:	0020      	movs	r0, r4
 8002270:	f000 fef0 	bl	8003054 <__clzsi2>
 8002274:	0001      	movs	r1, r0
 8002276:	0002      	movs	r2, r0
 8002278:	390b      	subs	r1, #11
 800227a:	231d      	movs	r3, #29
 800227c:	0010      	movs	r0, r2
 800227e:	1a5b      	subs	r3, r3, r1
 8002280:	0031      	movs	r1, r6
 8002282:	0035      	movs	r5, r6
 8002284:	3808      	subs	r0, #8
 8002286:	4084      	lsls	r4, r0
 8002288:	40d9      	lsrs	r1, r3
 800228a:	4085      	lsls	r5, r0
 800228c:	430c      	orrs	r4, r1
 800228e:	489e      	ldr	r0, [pc, #632]	; (8002508 <__aeabi_dmul+0x3a4>)
 8002290:	1a83      	subs	r3, r0, r2
 8002292:	9300      	str	r3, [sp, #0]
 8002294:	2300      	movs	r3, #0
 8002296:	4699      	mov	r9, r3
 8002298:	469b      	mov	fp, r3
 800229a:	e786      	b.n	80021aa <__aeabi_dmul+0x46>
 800229c:	0005      	movs	r5, r0
 800229e:	4325      	orrs	r5, r4
 80022a0:	d000      	beq.n	80022a4 <__aeabi_dmul+0x140>
 80022a2:	e11c      	b.n	80024de <__aeabi_dmul+0x37a>
 80022a4:	2208      	movs	r2, #8
 80022a6:	9300      	str	r3, [sp, #0]
 80022a8:	2302      	movs	r3, #2
 80022aa:	2400      	movs	r4, #0
 80022ac:	4691      	mov	r9, r2
 80022ae:	469b      	mov	fp, r3
 80022b0:	e77b      	b.n	80021aa <__aeabi_dmul+0x46>
 80022b2:	4652      	mov	r2, sl
 80022b4:	4332      	orrs	r2, r6
 80022b6:	d100      	bne.n	80022ba <__aeabi_dmul+0x156>
 80022b8:	e10a      	b.n	80024d0 <__aeabi_dmul+0x36c>
 80022ba:	2e00      	cmp	r6, #0
 80022bc:	d100      	bne.n	80022c0 <__aeabi_dmul+0x15c>
 80022be:	e176      	b.n	80025ae <__aeabi_dmul+0x44a>
 80022c0:	0030      	movs	r0, r6
 80022c2:	f000 fec7 	bl	8003054 <__clzsi2>
 80022c6:	0002      	movs	r2, r0
 80022c8:	3a0b      	subs	r2, #11
 80022ca:	231d      	movs	r3, #29
 80022cc:	0001      	movs	r1, r0
 80022ce:	1a9b      	subs	r3, r3, r2
 80022d0:	4652      	mov	r2, sl
 80022d2:	3908      	subs	r1, #8
 80022d4:	40da      	lsrs	r2, r3
 80022d6:	408e      	lsls	r6, r1
 80022d8:	4316      	orrs	r6, r2
 80022da:	4652      	mov	r2, sl
 80022dc:	408a      	lsls	r2, r1
 80022de:	9b00      	ldr	r3, [sp, #0]
 80022e0:	4989      	ldr	r1, [pc, #548]	; (8002508 <__aeabi_dmul+0x3a4>)
 80022e2:	1a18      	subs	r0, r3, r0
 80022e4:	0003      	movs	r3, r0
 80022e6:	468c      	mov	ip, r1
 80022e8:	4463      	add	r3, ip
 80022ea:	2000      	movs	r0, #0
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	e77a      	b.n	80021e6 <__aeabi_dmul+0x82>
 80022f0:	2400      	movs	r4, #0
 80022f2:	2500      	movs	r5, #0
 80022f4:	4a81      	ldr	r2, [pc, #516]	; (80024fc <__aeabi_dmul+0x398>)
 80022f6:	e7a5      	b.n	8002244 <__aeabi_dmul+0xe0>
 80022f8:	0c2f      	lsrs	r7, r5, #16
 80022fa:	042d      	lsls	r5, r5, #16
 80022fc:	0c2d      	lsrs	r5, r5, #16
 80022fe:	002b      	movs	r3, r5
 8002300:	0c11      	lsrs	r1, r2, #16
 8002302:	0412      	lsls	r2, r2, #16
 8002304:	0c12      	lsrs	r2, r2, #16
 8002306:	4353      	muls	r3, r2
 8002308:	4698      	mov	r8, r3
 800230a:	0013      	movs	r3, r2
 800230c:	0028      	movs	r0, r5
 800230e:	437b      	muls	r3, r7
 8002310:	4699      	mov	r9, r3
 8002312:	4348      	muls	r0, r1
 8002314:	4448      	add	r0, r9
 8002316:	4683      	mov	fp, r0
 8002318:	4640      	mov	r0, r8
 800231a:	000b      	movs	r3, r1
 800231c:	0c00      	lsrs	r0, r0, #16
 800231e:	4682      	mov	sl, r0
 8002320:	4658      	mov	r0, fp
 8002322:	437b      	muls	r3, r7
 8002324:	4450      	add	r0, sl
 8002326:	9302      	str	r3, [sp, #8]
 8002328:	4581      	cmp	r9, r0
 800232a:	d906      	bls.n	800233a <__aeabi_dmul+0x1d6>
 800232c:	469a      	mov	sl, r3
 800232e:	2380      	movs	r3, #128	; 0x80
 8002330:	025b      	lsls	r3, r3, #9
 8002332:	4699      	mov	r9, r3
 8002334:	44ca      	add	sl, r9
 8002336:	4653      	mov	r3, sl
 8002338:	9302      	str	r3, [sp, #8]
 800233a:	0c03      	lsrs	r3, r0, #16
 800233c:	469b      	mov	fp, r3
 800233e:	4643      	mov	r3, r8
 8002340:	041b      	lsls	r3, r3, #16
 8002342:	0400      	lsls	r0, r0, #16
 8002344:	0c1b      	lsrs	r3, r3, #16
 8002346:	4698      	mov	r8, r3
 8002348:	0003      	movs	r3, r0
 800234a:	4443      	add	r3, r8
 800234c:	9304      	str	r3, [sp, #16]
 800234e:	0c33      	lsrs	r3, r6, #16
 8002350:	4699      	mov	r9, r3
 8002352:	002b      	movs	r3, r5
 8002354:	0436      	lsls	r6, r6, #16
 8002356:	0c36      	lsrs	r6, r6, #16
 8002358:	4373      	muls	r3, r6
 800235a:	4698      	mov	r8, r3
 800235c:	0033      	movs	r3, r6
 800235e:	437b      	muls	r3, r7
 8002360:	469a      	mov	sl, r3
 8002362:	464b      	mov	r3, r9
 8002364:	435d      	muls	r5, r3
 8002366:	435f      	muls	r7, r3
 8002368:	4643      	mov	r3, r8
 800236a:	4455      	add	r5, sl
 800236c:	0c18      	lsrs	r0, r3, #16
 800236e:	1940      	adds	r0, r0, r5
 8002370:	4582      	cmp	sl, r0
 8002372:	d903      	bls.n	800237c <__aeabi_dmul+0x218>
 8002374:	2380      	movs	r3, #128	; 0x80
 8002376:	025b      	lsls	r3, r3, #9
 8002378:	469a      	mov	sl, r3
 800237a:	4457      	add	r7, sl
 800237c:	0c05      	lsrs	r5, r0, #16
 800237e:	19eb      	adds	r3, r5, r7
 8002380:	9305      	str	r3, [sp, #20]
 8002382:	4643      	mov	r3, r8
 8002384:	041d      	lsls	r5, r3, #16
 8002386:	0c2d      	lsrs	r5, r5, #16
 8002388:	0400      	lsls	r0, r0, #16
 800238a:	1940      	adds	r0, r0, r5
 800238c:	0c25      	lsrs	r5, r4, #16
 800238e:	0424      	lsls	r4, r4, #16
 8002390:	0c24      	lsrs	r4, r4, #16
 8002392:	0027      	movs	r7, r4
 8002394:	4357      	muls	r7, r2
 8002396:	436a      	muls	r2, r5
 8002398:	4690      	mov	r8, r2
 800239a:	002a      	movs	r2, r5
 800239c:	0c3b      	lsrs	r3, r7, #16
 800239e:	469a      	mov	sl, r3
 80023a0:	434a      	muls	r2, r1
 80023a2:	4361      	muls	r1, r4
 80023a4:	4441      	add	r1, r8
 80023a6:	4451      	add	r1, sl
 80023a8:	4483      	add	fp, r0
 80023aa:	4588      	cmp	r8, r1
 80023ac:	d903      	bls.n	80023b6 <__aeabi_dmul+0x252>
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	025b      	lsls	r3, r3, #9
 80023b2:	4698      	mov	r8, r3
 80023b4:	4442      	add	r2, r8
 80023b6:	043f      	lsls	r7, r7, #16
 80023b8:	0c0b      	lsrs	r3, r1, #16
 80023ba:	0c3f      	lsrs	r7, r7, #16
 80023bc:	0409      	lsls	r1, r1, #16
 80023be:	19c9      	adds	r1, r1, r7
 80023c0:	0027      	movs	r7, r4
 80023c2:	4698      	mov	r8, r3
 80023c4:	464b      	mov	r3, r9
 80023c6:	4377      	muls	r7, r6
 80023c8:	435c      	muls	r4, r3
 80023ca:	436e      	muls	r6, r5
 80023cc:	435d      	muls	r5, r3
 80023ce:	0c3b      	lsrs	r3, r7, #16
 80023d0:	4699      	mov	r9, r3
 80023d2:	19a4      	adds	r4, r4, r6
 80023d4:	444c      	add	r4, r9
 80023d6:	4442      	add	r2, r8
 80023d8:	9503      	str	r5, [sp, #12]
 80023da:	42a6      	cmp	r6, r4
 80023dc:	d904      	bls.n	80023e8 <__aeabi_dmul+0x284>
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	025b      	lsls	r3, r3, #9
 80023e2:	4698      	mov	r8, r3
 80023e4:	4445      	add	r5, r8
 80023e6:	9503      	str	r5, [sp, #12]
 80023e8:	9b02      	ldr	r3, [sp, #8]
 80023ea:	043f      	lsls	r7, r7, #16
 80023ec:	445b      	add	r3, fp
 80023ee:	001e      	movs	r6, r3
 80023f0:	4283      	cmp	r3, r0
 80023f2:	4180      	sbcs	r0, r0
 80023f4:	0423      	lsls	r3, r4, #16
 80023f6:	4698      	mov	r8, r3
 80023f8:	9b05      	ldr	r3, [sp, #20]
 80023fa:	0c3f      	lsrs	r7, r7, #16
 80023fc:	4447      	add	r7, r8
 80023fe:	4698      	mov	r8, r3
 8002400:	1876      	adds	r6, r6, r1
 8002402:	428e      	cmp	r6, r1
 8002404:	4189      	sbcs	r1, r1
 8002406:	4447      	add	r7, r8
 8002408:	4240      	negs	r0, r0
 800240a:	183d      	adds	r5, r7, r0
 800240c:	46a8      	mov	r8, r5
 800240e:	4693      	mov	fp, r2
 8002410:	4249      	negs	r1, r1
 8002412:	468a      	mov	sl, r1
 8002414:	44c3      	add	fp, r8
 8002416:	429f      	cmp	r7, r3
 8002418:	41bf      	sbcs	r7, r7
 800241a:	4580      	cmp	r8, r0
 800241c:	4180      	sbcs	r0, r0
 800241e:	9b03      	ldr	r3, [sp, #12]
 8002420:	44da      	add	sl, fp
 8002422:	4698      	mov	r8, r3
 8002424:	4653      	mov	r3, sl
 8002426:	4240      	negs	r0, r0
 8002428:	427f      	negs	r7, r7
 800242a:	4307      	orrs	r7, r0
 800242c:	0c24      	lsrs	r4, r4, #16
 800242e:	4593      	cmp	fp, r2
 8002430:	4192      	sbcs	r2, r2
 8002432:	458a      	cmp	sl, r1
 8002434:	4189      	sbcs	r1, r1
 8002436:	193f      	adds	r7, r7, r4
 8002438:	0ddc      	lsrs	r4, r3, #23
 800243a:	9b04      	ldr	r3, [sp, #16]
 800243c:	0275      	lsls	r5, r6, #9
 800243e:	431d      	orrs	r5, r3
 8002440:	1e68      	subs	r0, r5, #1
 8002442:	4185      	sbcs	r5, r0
 8002444:	4653      	mov	r3, sl
 8002446:	4252      	negs	r2, r2
 8002448:	4249      	negs	r1, r1
 800244a:	430a      	orrs	r2, r1
 800244c:	18bf      	adds	r7, r7, r2
 800244e:	4447      	add	r7, r8
 8002450:	0df6      	lsrs	r6, r6, #23
 8002452:	027f      	lsls	r7, r7, #9
 8002454:	4335      	orrs	r5, r6
 8002456:	025a      	lsls	r2, r3, #9
 8002458:	433c      	orrs	r4, r7
 800245a:	4315      	orrs	r5, r2
 800245c:	01fb      	lsls	r3, r7, #7
 800245e:	d400      	bmi.n	8002462 <__aeabi_dmul+0x2fe>
 8002460:	e0c1      	b.n	80025e6 <__aeabi_dmul+0x482>
 8002462:	2101      	movs	r1, #1
 8002464:	086a      	lsrs	r2, r5, #1
 8002466:	400d      	ands	r5, r1
 8002468:	4315      	orrs	r5, r2
 800246a:	07e2      	lsls	r2, r4, #31
 800246c:	4315      	orrs	r5, r2
 800246e:	0864      	lsrs	r4, r4, #1
 8002470:	4926      	ldr	r1, [pc, #152]	; (800250c <__aeabi_dmul+0x3a8>)
 8002472:	4461      	add	r1, ip
 8002474:	2900      	cmp	r1, #0
 8002476:	dd56      	ble.n	8002526 <__aeabi_dmul+0x3c2>
 8002478:	076b      	lsls	r3, r5, #29
 800247a:	d009      	beq.n	8002490 <__aeabi_dmul+0x32c>
 800247c:	220f      	movs	r2, #15
 800247e:	402a      	ands	r2, r5
 8002480:	2a04      	cmp	r2, #4
 8002482:	d005      	beq.n	8002490 <__aeabi_dmul+0x32c>
 8002484:	1d2a      	adds	r2, r5, #4
 8002486:	42aa      	cmp	r2, r5
 8002488:	41ad      	sbcs	r5, r5
 800248a:	426d      	negs	r5, r5
 800248c:	1964      	adds	r4, r4, r5
 800248e:	0015      	movs	r5, r2
 8002490:	01e3      	lsls	r3, r4, #7
 8002492:	d504      	bpl.n	800249e <__aeabi_dmul+0x33a>
 8002494:	2180      	movs	r1, #128	; 0x80
 8002496:	4a1e      	ldr	r2, [pc, #120]	; (8002510 <__aeabi_dmul+0x3ac>)
 8002498:	00c9      	lsls	r1, r1, #3
 800249a:	4014      	ands	r4, r2
 800249c:	4461      	add	r1, ip
 800249e:	4a1d      	ldr	r2, [pc, #116]	; (8002514 <__aeabi_dmul+0x3b0>)
 80024a0:	4291      	cmp	r1, r2
 80024a2:	dd00      	ble.n	80024a6 <__aeabi_dmul+0x342>
 80024a4:	e724      	b.n	80022f0 <__aeabi_dmul+0x18c>
 80024a6:	0762      	lsls	r2, r4, #29
 80024a8:	08ed      	lsrs	r5, r5, #3
 80024aa:	0264      	lsls	r4, r4, #9
 80024ac:	0549      	lsls	r1, r1, #21
 80024ae:	4315      	orrs	r5, r2
 80024b0:	0b24      	lsrs	r4, r4, #12
 80024b2:	0d4a      	lsrs	r2, r1, #21
 80024b4:	e6c6      	b.n	8002244 <__aeabi_dmul+0xe0>
 80024b6:	9701      	str	r7, [sp, #4]
 80024b8:	e6b8      	b.n	800222c <__aeabi_dmul+0xc8>
 80024ba:	4a10      	ldr	r2, [pc, #64]	; (80024fc <__aeabi_dmul+0x398>)
 80024bc:	2003      	movs	r0, #3
 80024be:	4694      	mov	ip, r2
 80024c0:	4463      	add	r3, ip
 80024c2:	464a      	mov	r2, r9
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	2303      	movs	r3, #3
 80024c8:	431a      	orrs	r2, r3
 80024ca:	4691      	mov	r9, r2
 80024cc:	4652      	mov	r2, sl
 80024ce:	e68a      	b.n	80021e6 <__aeabi_dmul+0x82>
 80024d0:	4649      	mov	r1, r9
 80024d2:	2301      	movs	r3, #1
 80024d4:	4319      	orrs	r1, r3
 80024d6:	4689      	mov	r9, r1
 80024d8:	2600      	movs	r6, #0
 80024da:	2001      	movs	r0, #1
 80024dc:	e683      	b.n	80021e6 <__aeabi_dmul+0x82>
 80024de:	220c      	movs	r2, #12
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	2303      	movs	r3, #3
 80024e4:	0005      	movs	r5, r0
 80024e6:	4691      	mov	r9, r2
 80024e8:	469b      	mov	fp, r3
 80024ea:	e65e      	b.n	80021aa <__aeabi_dmul+0x46>
 80024ec:	2304      	movs	r3, #4
 80024ee:	4699      	mov	r9, r3
 80024f0:	2300      	movs	r3, #0
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	3301      	adds	r3, #1
 80024f6:	2400      	movs	r4, #0
 80024f8:	469b      	mov	fp, r3
 80024fa:	e656      	b.n	80021aa <__aeabi_dmul+0x46>
 80024fc:	000007ff 	.word	0x000007ff
 8002500:	fffffc01 	.word	0xfffffc01
 8002504:	0801a8c8 	.word	0x0801a8c8
 8002508:	fffffc0d 	.word	0xfffffc0d
 800250c:	000003ff 	.word	0x000003ff
 8002510:	feffffff 	.word	0xfeffffff
 8002514:	000007fe 	.word	0x000007fe
 8002518:	2300      	movs	r3, #0
 800251a:	2480      	movs	r4, #128	; 0x80
 800251c:	2500      	movs	r5, #0
 800251e:	4a44      	ldr	r2, [pc, #272]	; (8002630 <__aeabi_dmul+0x4cc>)
 8002520:	9301      	str	r3, [sp, #4]
 8002522:	0324      	lsls	r4, r4, #12
 8002524:	e68e      	b.n	8002244 <__aeabi_dmul+0xe0>
 8002526:	2001      	movs	r0, #1
 8002528:	1a40      	subs	r0, r0, r1
 800252a:	2838      	cmp	r0, #56	; 0x38
 800252c:	dd00      	ble.n	8002530 <__aeabi_dmul+0x3cc>
 800252e:	e686      	b.n	800223e <__aeabi_dmul+0xda>
 8002530:	281f      	cmp	r0, #31
 8002532:	dd5b      	ble.n	80025ec <__aeabi_dmul+0x488>
 8002534:	221f      	movs	r2, #31
 8002536:	0023      	movs	r3, r4
 8002538:	4252      	negs	r2, r2
 800253a:	1a51      	subs	r1, r2, r1
 800253c:	40cb      	lsrs	r3, r1
 800253e:	0019      	movs	r1, r3
 8002540:	2820      	cmp	r0, #32
 8002542:	d003      	beq.n	800254c <__aeabi_dmul+0x3e8>
 8002544:	4a3b      	ldr	r2, [pc, #236]	; (8002634 <__aeabi_dmul+0x4d0>)
 8002546:	4462      	add	r2, ip
 8002548:	4094      	lsls	r4, r2
 800254a:	4325      	orrs	r5, r4
 800254c:	1e6a      	subs	r2, r5, #1
 800254e:	4195      	sbcs	r5, r2
 8002550:	002a      	movs	r2, r5
 8002552:	430a      	orrs	r2, r1
 8002554:	2107      	movs	r1, #7
 8002556:	000d      	movs	r5, r1
 8002558:	2400      	movs	r4, #0
 800255a:	4015      	ands	r5, r2
 800255c:	4211      	tst	r1, r2
 800255e:	d05b      	beq.n	8002618 <__aeabi_dmul+0x4b4>
 8002560:	210f      	movs	r1, #15
 8002562:	2400      	movs	r4, #0
 8002564:	4011      	ands	r1, r2
 8002566:	2904      	cmp	r1, #4
 8002568:	d053      	beq.n	8002612 <__aeabi_dmul+0x4ae>
 800256a:	1d11      	adds	r1, r2, #4
 800256c:	4291      	cmp	r1, r2
 800256e:	4192      	sbcs	r2, r2
 8002570:	4252      	negs	r2, r2
 8002572:	18a4      	adds	r4, r4, r2
 8002574:	000a      	movs	r2, r1
 8002576:	0223      	lsls	r3, r4, #8
 8002578:	d54b      	bpl.n	8002612 <__aeabi_dmul+0x4ae>
 800257a:	2201      	movs	r2, #1
 800257c:	2400      	movs	r4, #0
 800257e:	2500      	movs	r5, #0
 8002580:	e660      	b.n	8002244 <__aeabi_dmul+0xe0>
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	031b      	lsls	r3, r3, #12
 8002586:	421c      	tst	r4, r3
 8002588:	d009      	beq.n	800259e <__aeabi_dmul+0x43a>
 800258a:	421e      	tst	r6, r3
 800258c:	d107      	bne.n	800259e <__aeabi_dmul+0x43a>
 800258e:	4333      	orrs	r3, r6
 8002590:	031c      	lsls	r4, r3, #12
 8002592:	4643      	mov	r3, r8
 8002594:	0015      	movs	r5, r2
 8002596:	0b24      	lsrs	r4, r4, #12
 8002598:	4a25      	ldr	r2, [pc, #148]	; (8002630 <__aeabi_dmul+0x4cc>)
 800259a:	9301      	str	r3, [sp, #4]
 800259c:	e652      	b.n	8002244 <__aeabi_dmul+0xe0>
 800259e:	2280      	movs	r2, #128	; 0x80
 80025a0:	0312      	lsls	r2, r2, #12
 80025a2:	4314      	orrs	r4, r2
 80025a4:	0324      	lsls	r4, r4, #12
 80025a6:	4a22      	ldr	r2, [pc, #136]	; (8002630 <__aeabi_dmul+0x4cc>)
 80025a8:	0b24      	lsrs	r4, r4, #12
 80025aa:	9701      	str	r7, [sp, #4]
 80025ac:	e64a      	b.n	8002244 <__aeabi_dmul+0xe0>
 80025ae:	f000 fd51 	bl	8003054 <__clzsi2>
 80025b2:	0003      	movs	r3, r0
 80025b4:	001a      	movs	r2, r3
 80025b6:	3215      	adds	r2, #21
 80025b8:	3020      	adds	r0, #32
 80025ba:	2a1c      	cmp	r2, #28
 80025bc:	dc00      	bgt.n	80025c0 <__aeabi_dmul+0x45c>
 80025be:	e684      	b.n	80022ca <__aeabi_dmul+0x166>
 80025c0:	4656      	mov	r6, sl
 80025c2:	3b08      	subs	r3, #8
 80025c4:	2200      	movs	r2, #0
 80025c6:	409e      	lsls	r6, r3
 80025c8:	e689      	b.n	80022de <__aeabi_dmul+0x17a>
 80025ca:	f000 fd43 	bl	8003054 <__clzsi2>
 80025ce:	0001      	movs	r1, r0
 80025d0:	0002      	movs	r2, r0
 80025d2:	3115      	adds	r1, #21
 80025d4:	3220      	adds	r2, #32
 80025d6:	291c      	cmp	r1, #28
 80025d8:	dc00      	bgt.n	80025dc <__aeabi_dmul+0x478>
 80025da:	e64e      	b.n	800227a <__aeabi_dmul+0x116>
 80025dc:	0034      	movs	r4, r6
 80025de:	3808      	subs	r0, #8
 80025e0:	2500      	movs	r5, #0
 80025e2:	4084      	lsls	r4, r0
 80025e4:	e653      	b.n	800228e <__aeabi_dmul+0x12a>
 80025e6:	9b00      	ldr	r3, [sp, #0]
 80025e8:	469c      	mov	ip, r3
 80025ea:	e741      	b.n	8002470 <__aeabi_dmul+0x30c>
 80025ec:	4912      	ldr	r1, [pc, #72]	; (8002638 <__aeabi_dmul+0x4d4>)
 80025ee:	0022      	movs	r2, r4
 80025f0:	4461      	add	r1, ip
 80025f2:	002e      	movs	r6, r5
 80025f4:	408d      	lsls	r5, r1
 80025f6:	408a      	lsls	r2, r1
 80025f8:	40c6      	lsrs	r6, r0
 80025fa:	1e69      	subs	r1, r5, #1
 80025fc:	418d      	sbcs	r5, r1
 80025fe:	4332      	orrs	r2, r6
 8002600:	432a      	orrs	r2, r5
 8002602:	40c4      	lsrs	r4, r0
 8002604:	0753      	lsls	r3, r2, #29
 8002606:	d0b6      	beq.n	8002576 <__aeabi_dmul+0x412>
 8002608:	210f      	movs	r1, #15
 800260a:	4011      	ands	r1, r2
 800260c:	2904      	cmp	r1, #4
 800260e:	d1ac      	bne.n	800256a <__aeabi_dmul+0x406>
 8002610:	e7b1      	b.n	8002576 <__aeabi_dmul+0x412>
 8002612:	0765      	lsls	r5, r4, #29
 8002614:	0264      	lsls	r4, r4, #9
 8002616:	0b24      	lsrs	r4, r4, #12
 8002618:	08d2      	lsrs	r2, r2, #3
 800261a:	4315      	orrs	r5, r2
 800261c:	2200      	movs	r2, #0
 800261e:	e611      	b.n	8002244 <__aeabi_dmul+0xe0>
 8002620:	2280      	movs	r2, #128	; 0x80
 8002622:	0312      	lsls	r2, r2, #12
 8002624:	4314      	orrs	r4, r2
 8002626:	0324      	lsls	r4, r4, #12
 8002628:	4a01      	ldr	r2, [pc, #4]	; (8002630 <__aeabi_dmul+0x4cc>)
 800262a:	0b24      	lsrs	r4, r4, #12
 800262c:	e60a      	b.n	8002244 <__aeabi_dmul+0xe0>
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	000007ff 	.word	0x000007ff
 8002634:	0000043e 	.word	0x0000043e
 8002638:	0000041e 	.word	0x0000041e

0800263c <__aeabi_dsub>:
 800263c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	464e      	mov	r6, r9
 8002642:	4645      	mov	r5, r8
 8002644:	46de      	mov	lr, fp
 8002646:	0004      	movs	r4, r0
 8002648:	b5e0      	push	{r5, r6, r7, lr}
 800264a:	001f      	movs	r7, r3
 800264c:	0010      	movs	r0, r2
 800264e:	030b      	lsls	r3, r1, #12
 8002650:	0f62      	lsrs	r2, r4, #29
 8002652:	004e      	lsls	r6, r1, #1
 8002654:	0fcd      	lsrs	r5, r1, #31
 8002656:	0a5b      	lsrs	r3, r3, #9
 8002658:	0339      	lsls	r1, r7, #12
 800265a:	4313      	orrs	r3, r2
 800265c:	0a49      	lsrs	r1, r1, #9
 800265e:	00e2      	lsls	r2, r4, #3
 8002660:	0f44      	lsrs	r4, r0, #29
 8002662:	4321      	orrs	r1, r4
 8002664:	4cc2      	ldr	r4, [pc, #776]	; (8002970 <__aeabi_dsub+0x334>)
 8002666:	4691      	mov	r9, r2
 8002668:	4692      	mov	sl, r2
 800266a:	00c0      	lsls	r0, r0, #3
 800266c:	007a      	lsls	r2, r7, #1
 800266e:	4680      	mov	r8, r0
 8002670:	0d76      	lsrs	r6, r6, #21
 8002672:	0d52      	lsrs	r2, r2, #21
 8002674:	0fff      	lsrs	r7, r7, #31
 8002676:	42a2      	cmp	r2, r4
 8002678:	d100      	bne.n	800267c <__aeabi_dsub+0x40>
 800267a:	e0b4      	b.n	80027e6 <__aeabi_dsub+0x1aa>
 800267c:	2401      	movs	r4, #1
 800267e:	4067      	eors	r7, r4
 8002680:	46bb      	mov	fp, r7
 8002682:	42bd      	cmp	r5, r7
 8002684:	d100      	bne.n	8002688 <__aeabi_dsub+0x4c>
 8002686:	e088      	b.n	800279a <__aeabi_dsub+0x15e>
 8002688:	1ab4      	subs	r4, r6, r2
 800268a:	46a4      	mov	ip, r4
 800268c:	2c00      	cmp	r4, #0
 800268e:	dc00      	bgt.n	8002692 <__aeabi_dsub+0x56>
 8002690:	e0b2      	b.n	80027f8 <__aeabi_dsub+0x1bc>
 8002692:	2a00      	cmp	r2, #0
 8002694:	d100      	bne.n	8002698 <__aeabi_dsub+0x5c>
 8002696:	e0c5      	b.n	8002824 <__aeabi_dsub+0x1e8>
 8002698:	4ab5      	ldr	r2, [pc, #724]	; (8002970 <__aeabi_dsub+0x334>)
 800269a:	4296      	cmp	r6, r2
 800269c:	d100      	bne.n	80026a0 <__aeabi_dsub+0x64>
 800269e:	e28b      	b.n	8002bb8 <__aeabi_dsub+0x57c>
 80026a0:	2280      	movs	r2, #128	; 0x80
 80026a2:	0412      	lsls	r2, r2, #16
 80026a4:	4311      	orrs	r1, r2
 80026a6:	4662      	mov	r2, ip
 80026a8:	2a38      	cmp	r2, #56	; 0x38
 80026aa:	dd00      	ble.n	80026ae <__aeabi_dsub+0x72>
 80026ac:	e1a1      	b.n	80029f2 <__aeabi_dsub+0x3b6>
 80026ae:	2a1f      	cmp	r2, #31
 80026b0:	dd00      	ble.n	80026b4 <__aeabi_dsub+0x78>
 80026b2:	e216      	b.n	8002ae2 <__aeabi_dsub+0x4a6>
 80026b4:	2720      	movs	r7, #32
 80026b6:	000c      	movs	r4, r1
 80026b8:	1abf      	subs	r7, r7, r2
 80026ba:	40bc      	lsls	r4, r7
 80026bc:	0002      	movs	r2, r0
 80026be:	46a0      	mov	r8, r4
 80026c0:	4664      	mov	r4, ip
 80026c2:	40b8      	lsls	r0, r7
 80026c4:	40e2      	lsrs	r2, r4
 80026c6:	4644      	mov	r4, r8
 80026c8:	4314      	orrs	r4, r2
 80026ca:	0002      	movs	r2, r0
 80026cc:	1e50      	subs	r0, r2, #1
 80026ce:	4182      	sbcs	r2, r0
 80026d0:	4660      	mov	r0, ip
 80026d2:	40c1      	lsrs	r1, r0
 80026d4:	4322      	orrs	r2, r4
 80026d6:	1a5b      	subs	r3, r3, r1
 80026d8:	4649      	mov	r1, r9
 80026da:	1a8c      	subs	r4, r1, r2
 80026dc:	45a1      	cmp	r9, r4
 80026de:	4192      	sbcs	r2, r2
 80026e0:	4252      	negs	r2, r2
 80026e2:	1a9b      	subs	r3, r3, r2
 80026e4:	4698      	mov	r8, r3
 80026e6:	4643      	mov	r3, r8
 80026e8:	021b      	lsls	r3, r3, #8
 80026ea:	d400      	bmi.n	80026ee <__aeabi_dsub+0xb2>
 80026ec:	e117      	b.n	800291e <__aeabi_dsub+0x2e2>
 80026ee:	4643      	mov	r3, r8
 80026f0:	025b      	lsls	r3, r3, #9
 80026f2:	0a5b      	lsrs	r3, r3, #9
 80026f4:	4698      	mov	r8, r3
 80026f6:	4643      	mov	r3, r8
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d100      	bne.n	80026fe <__aeabi_dsub+0xc2>
 80026fc:	e16c      	b.n	80029d8 <__aeabi_dsub+0x39c>
 80026fe:	4640      	mov	r0, r8
 8002700:	f000 fca8 	bl	8003054 <__clzsi2>
 8002704:	0002      	movs	r2, r0
 8002706:	3a08      	subs	r2, #8
 8002708:	2120      	movs	r1, #32
 800270a:	0020      	movs	r0, r4
 800270c:	4643      	mov	r3, r8
 800270e:	1a89      	subs	r1, r1, r2
 8002710:	4093      	lsls	r3, r2
 8002712:	40c8      	lsrs	r0, r1
 8002714:	4094      	lsls	r4, r2
 8002716:	4303      	orrs	r3, r0
 8002718:	4296      	cmp	r6, r2
 800271a:	dd00      	ble.n	800271e <__aeabi_dsub+0xe2>
 800271c:	e157      	b.n	80029ce <__aeabi_dsub+0x392>
 800271e:	1b96      	subs	r6, r2, r6
 8002720:	1c71      	adds	r1, r6, #1
 8002722:	291f      	cmp	r1, #31
 8002724:	dd00      	ble.n	8002728 <__aeabi_dsub+0xec>
 8002726:	e1cb      	b.n	8002ac0 <__aeabi_dsub+0x484>
 8002728:	2220      	movs	r2, #32
 800272a:	0018      	movs	r0, r3
 800272c:	0026      	movs	r6, r4
 800272e:	1a52      	subs	r2, r2, r1
 8002730:	4094      	lsls	r4, r2
 8002732:	4090      	lsls	r0, r2
 8002734:	40ce      	lsrs	r6, r1
 8002736:	40cb      	lsrs	r3, r1
 8002738:	1e62      	subs	r2, r4, #1
 800273a:	4194      	sbcs	r4, r2
 800273c:	4330      	orrs	r0, r6
 800273e:	4698      	mov	r8, r3
 8002740:	2600      	movs	r6, #0
 8002742:	4304      	orrs	r4, r0
 8002744:	0763      	lsls	r3, r4, #29
 8002746:	d009      	beq.n	800275c <__aeabi_dsub+0x120>
 8002748:	230f      	movs	r3, #15
 800274a:	4023      	ands	r3, r4
 800274c:	2b04      	cmp	r3, #4
 800274e:	d005      	beq.n	800275c <__aeabi_dsub+0x120>
 8002750:	1d23      	adds	r3, r4, #4
 8002752:	42a3      	cmp	r3, r4
 8002754:	41a4      	sbcs	r4, r4
 8002756:	4264      	negs	r4, r4
 8002758:	44a0      	add	r8, r4
 800275a:	001c      	movs	r4, r3
 800275c:	4643      	mov	r3, r8
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	d400      	bmi.n	8002764 <__aeabi_dsub+0x128>
 8002762:	e0df      	b.n	8002924 <__aeabi_dsub+0x2e8>
 8002764:	4b82      	ldr	r3, [pc, #520]	; (8002970 <__aeabi_dsub+0x334>)
 8002766:	3601      	adds	r6, #1
 8002768:	429e      	cmp	r6, r3
 800276a:	d100      	bne.n	800276e <__aeabi_dsub+0x132>
 800276c:	e0fb      	b.n	8002966 <__aeabi_dsub+0x32a>
 800276e:	4642      	mov	r2, r8
 8002770:	4b80      	ldr	r3, [pc, #512]	; (8002974 <__aeabi_dsub+0x338>)
 8002772:	08e4      	lsrs	r4, r4, #3
 8002774:	401a      	ands	r2, r3
 8002776:	0013      	movs	r3, r2
 8002778:	0571      	lsls	r1, r6, #21
 800277a:	0752      	lsls	r2, r2, #29
 800277c:	025b      	lsls	r3, r3, #9
 800277e:	4322      	orrs	r2, r4
 8002780:	0b1b      	lsrs	r3, r3, #12
 8002782:	0d49      	lsrs	r1, r1, #21
 8002784:	0509      	lsls	r1, r1, #20
 8002786:	07ed      	lsls	r5, r5, #31
 8002788:	4319      	orrs	r1, r3
 800278a:	4329      	orrs	r1, r5
 800278c:	0010      	movs	r0, r2
 800278e:	bcf0      	pop	{r4, r5, r6, r7}
 8002790:	46bb      	mov	fp, r7
 8002792:	46b2      	mov	sl, r6
 8002794:	46a9      	mov	r9, r5
 8002796:	46a0      	mov	r8, r4
 8002798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800279a:	1ab4      	subs	r4, r6, r2
 800279c:	46a4      	mov	ip, r4
 800279e:	2c00      	cmp	r4, #0
 80027a0:	dd58      	ble.n	8002854 <__aeabi_dsub+0x218>
 80027a2:	2a00      	cmp	r2, #0
 80027a4:	d100      	bne.n	80027a8 <__aeabi_dsub+0x16c>
 80027a6:	e09e      	b.n	80028e6 <__aeabi_dsub+0x2aa>
 80027a8:	4a71      	ldr	r2, [pc, #452]	; (8002970 <__aeabi_dsub+0x334>)
 80027aa:	4296      	cmp	r6, r2
 80027ac:	d100      	bne.n	80027b0 <__aeabi_dsub+0x174>
 80027ae:	e13b      	b.n	8002a28 <__aeabi_dsub+0x3ec>
 80027b0:	2280      	movs	r2, #128	; 0x80
 80027b2:	0412      	lsls	r2, r2, #16
 80027b4:	4311      	orrs	r1, r2
 80027b6:	4662      	mov	r2, ip
 80027b8:	2a38      	cmp	r2, #56	; 0x38
 80027ba:	dd00      	ble.n	80027be <__aeabi_dsub+0x182>
 80027bc:	e0c1      	b.n	8002942 <__aeabi_dsub+0x306>
 80027be:	2a1f      	cmp	r2, #31
 80027c0:	dc00      	bgt.n	80027c4 <__aeabi_dsub+0x188>
 80027c2:	e1bb      	b.n	8002b3c <__aeabi_dsub+0x500>
 80027c4:	000c      	movs	r4, r1
 80027c6:	3a20      	subs	r2, #32
 80027c8:	40d4      	lsrs	r4, r2
 80027ca:	0022      	movs	r2, r4
 80027cc:	4664      	mov	r4, ip
 80027ce:	2c20      	cmp	r4, #32
 80027d0:	d004      	beq.n	80027dc <__aeabi_dsub+0x1a0>
 80027d2:	2740      	movs	r7, #64	; 0x40
 80027d4:	1b3f      	subs	r7, r7, r4
 80027d6:	40b9      	lsls	r1, r7
 80027d8:	4308      	orrs	r0, r1
 80027da:	4680      	mov	r8, r0
 80027dc:	4644      	mov	r4, r8
 80027de:	1e61      	subs	r1, r4, #1
 80027e0:	418c      	sbcs	r4, r1
 80027e2:	4314      	orrs	r4, r2
 80027e4:	e0b1      	b.n	800294a <__aeabi_dsub+0x30e>
 80027e6:	000c      	movs	r4, r1
 80027e8:	4304      	orrs	r4, r0
 80027ea:	d02a      	beq.n	8002842 <__aeabi_dsub+0x206>
 80027ec:	46bb      	mov	fp, r7
 80027ee:	42bd      	cmp	r5, r7
 80027f0:	d02d      	beq.n	800284e <__aeabi_dsub+0x212>
 80027f2:	4c61      	ldr	r4, [pc, #388]	; (8002978 <__aeabi_dsub+0x33c>)
 80027f4:	46a4      	mov	ip, r4
 80027f6:	44b4      	add	ip, r6
 80027f8:	4664      	mov	r4, ip
 80027fa:	2c00      	cmp	r4, #0
 80027fc:	d05c      	beq.n	80028b8 <__aeabi_dsub+0x27c>
 80027fe:	1b94      	subs	r4, r2, r6
 8002800:	46a4      	mov	ip, r4
 8002802:	2e00      	cmp	r6, #0
 8002804:	d000      	beq.n	8002808 <__aeabi_dsub+0x1cc>
 8002806:	e115      	b.n	8002a34 <__aeabi_dsub+0x3f8>
 8002808:	464d      	mov	r5, r9
 800280a:	431d      	orrs	r5, r3
 800280c:	d100      	bne.n	8002810 <__aeabi_dsub+0x1d4>
 800280e:	e1c3      	b.n	8002b98 <__aeabi_dsub+0x55c>
 8002810:	1e65      	subs	r5, r4, #1
 8002812:	2c01      	cmp	r4, #1
 8002814:	d100      	bne.n	8002818 <__aeabi_dsub+0x1dc>
 8002816:	e20c      	b.n	8002c32 <__aeabi_dsub+0x5f6>
 8002818:	4e55      	ldr	r6, [pc, #340]	; (8002970 <__aeabi_dsub+0x334>)
 800281a:	42b4      	cmp	r4, r6
 800281c:	d100      	bne.n	8002820 <__aeabi_dsub+0x1e4>
 800281e:	e1f8      	b.n	8002c12 <__aeabi_dsub+0x5d6>
 8002820:	46ac      	mov	ip, r5
 8002822:	e10e      	b.n	8002a42 <__aeabi_dsub+0x406>
 8002824:	000a      	movs	r2, r1
 8002826:	4302      	orrs	r2, r0
 8002828:	d100      	bne.n	800282c <__aeabi_dsub+0x1f0>
 800282a:	e136      	b.n	8002a9a <__aeabi_dsub+0x45e>
 800282c:	0022      	movs	r2, r4
 800282e:	3a01      	subs	r2, #1
 8002830:	2c01      	cmp	r4, #1
 8002832:	d100      	bne.n	8002836 <__aeabi_dsub+0x1fa>
 8002834:	e1c6      	b.n	8002bc4 <__aeabi_dsub+0x588>
 8002836:	4c4e      	ldr	r4, [pc, #312]	; (8002970 <__aeabi_dsub+0x334>)
 8002838:	45a4      	cmp	ip, r4
 800283a:	d100      	bne.n	800283e <__aeabi_dsub+0x202>
 800283c:	e0f4      	b.n	8002a28 <__aeabi_dsub+0x3ec>
 800283e:	4694      	mov	ip, r2
 8002840:	e731      	b.n	80026a6 <__aeabi_dsub+0x6a>
 8002842:	2401      	movs	r4, #1
 8002844:	4067      	eors	r7, r4
 8002846:	46bb      	mov	fp, r7
 8002848:	42bd      	cmp	r5, r7
 800284a:	d000      	beq.n	800284e <__aeabi_dsub+0x212>
 800284c:	e71c      	b.n	8002688 <__aeabi_dsub+0x4c>
 800284e:	4c4a      	ldr	r4, [pc, #296]	; (8002978 <__aeabi_dsub+0x33c>)
 8002850:	46a4      	mov	ip, r4
 8002852:	44b4      	add	ip, r6
 8002854:	4664      	mov	r4, ip
 8002856:	2c00      	cmp	r4, #0
 8002858:	d100      	bne.n	800285c <__aeabi_dsub+0x220>
 800285a:	e0cf      	b.n	80029fc <__aeabi_dsub+0x3c0>
 800285c:	1b94      	subs	r4, r2, r6
 800285e:	46a4      	mov	ip, r4
 8002860:	2e00      	cmp	r6, #0
 8002862:	d100      	bne.n	8002866 <__aeabi_dsub+0x22a>
 8002864:	e15c      	b.n	8002b20 <__aeabi_dsub+0x4e4>
 8002866:	4e42      	ldr	r6, [pc, #264]	; (8002970 <__aeabi_dsub+0x334>)
 8002868:	42b2      	cmp	r2, r6
 800286a:	d100      	bne.n	800286e <__aeabi_dsub+0x232>
 800286c:	e1ec      	b.n	8002c48 <__aeabi_dsub+0x60c>
 800286e:	2680      	movs	r6, #128	; 0x80
 8002870:	0436      	lsls	r6, r6, #16
 8002872:	4333      	orrs	r3, r6
 8002874:	4664      	mov	r4, ip
 8002876:	2c38      	cmp	r4, #56	; 0x38
 8002878:	dd00      	ble.n	800287c <__aeabi_dsub+0x240>
 800287a:	e1b3      	b.n	8002be4 <__aeabi_dsub+0x5a8>
 800287c:	2c1f      	cmp	r4, #31
 800287e:	dd00      	ble.n	8002882 <__aeabi_dsub+0x246>
 8002880:	e238      	b.n	8002cf4 <__aeabi_dsub+0x6b8>
 8002882:	2620      	movs	r6, #32
 8002884:	1b36      	subs	r6, r6, r4
 8002886:	001c      	movs	r4, r3
 8002888:	40b4      	lsls	r4, r6
 800288a:	464f      	mov	r7, r9
 800288c:	46a0      	mov	r8, r4
 800288e:	4664      	mov	r4, ip
 8002890:	40e7      	lsrs	r7, r4
 8002892:	4644      	mov	r4, r8
 8002894:	433c      	orrs	r4, r7
 8002896:	464f      	mov	r7, r9
 8002898:	40b7      	lsls	r7, r6
 800289a:	003e      	movs	r6, r7
 800289c:	1e77      	subs	r7, r6, #1
 800289e:	41be      	sbcs	r6, r7
 80028a0:	4334      	orrs	r4, r6
 80028a2:	4666      	mov	r6, ip
 80028a4:	40f3      	lsrs	r3, r6
 80028a6:	18c9      	adds	r1, r1, r3
 80028a8:	1824      	adds	r4, r4, r0
 80028aa:	4284      	cmp	r4, r0
 80028ac:	419b      	sbcs	r3, r3
 80028ae:	425b      	negs	r3, r3
 80028b0:	4698      	mov	r8, r3
 80028b2:	0016      	movs	r6, r2
 80028b4:	4488      	add	r8, r1
 80028b6:	e04e      	b.n	8002956 <__aeabi_dsub+0x31a>
 80028b8:	4a30      	ldr	r2, [pc, #192]	; (800297c <__aeabi_dsub+0x340>)
 80028ba:	1c74      	adds	r4, r6, #1
 80028bc:	4214      	tst	r4, r2
 80028be:	d000      	beq.n	80028c2 <__aeabi_dsub+0x286>
 80028c0:	e0d6      	b.n	8002a70 <__aeabi_dsub+0x434>
 80028c2:	464a      	mov	r2, r9
 80028c4:	431a      	orrs	r2, r3
 80028c6:	2e00      	cmp	r6, #0
 80028c8:	d000      	beq.n	80028cc <__aeabi_dsub+0x290>
 80028ca:	e15b      	b.n	8002b84 <__aeabi_dsub+0x548>
 80028cc:	2a00      	cmp	r2, #0
 80028ce:	d100      	bne.n	80028d2 <__aeabi_dsub+0x296>
 80028d0:	e1a5      	b.n	8002c1e <__aeabi_dsub+0x5e2>
 80028d2:	000a      	movs	r2, r1
 80028d4:	4302      	orrs	r2, r0
 80028d6:	d000      	beq.n	80028da <__aeabi_dsub+0x29e>
 80028d8:	e1bb      	b.n	8002c52 <__aeabi_dsub+0x616>
 80028da:	464a      	mov	r2, r9
 80028dc:	0759      	lsls	r1, r3, #29
 80028de:	08d2      	lsrs	r2, r2, #3
 80028e0:	430a      	orrs	r2, r1
 80028e2:	08db      	lsrs	r3, r3, #3
 80028e4:	e027      	b.n	8002936 <__aeabi_dsub+0x2fa>
 80028e6:	000a      	movs	r2, r1
 80028e8:	4302      	orrs	r2, r0
 80028ea:	d100      	bne.n	80028ee <__aeabi_dsub+0x2b2>
 80028ec:	e174      	b.n	8002bd8 <__aeabi_dsub+0x59c>
 80028ee:	0022      	movs	r2, r4
 80028f0:	3a01      	subs	r2, #1
 80028f2:	2c01      	cmp	r4, #1
 80028f4:	d005      	beq.n	8002902 <__aeabi_dsub+0x2c6>
 80028f6:	4c1e      	ldr	r4, [pc, #120]	; (8002970 <__aeabi_dsub+0x334>)
 80028f8:	45a4      	cmp	ip, r4
 80028fa:	d100      	bne.n	80028fe <__aeabi_dsub+0x2c2>
 80028fc:	e094      	b.n	8002a28 <__aeabi_dsub+0x3ec>
 80028fe:	4694      	mov	ip, r2
 8002900:	e759      	b.n	80027b6 <__aeabi_dsub+0x17a>
 8002902:	4448      	add	r0, r9
 8002904:	4548      	cmp	r0, r9
 8002906:	4192      	sbcs	r2, r2
 8002908:	185b      	adds	r3, r3, r1
 800290a:	4698      	mov	r8, r3
 800290c:	0004      	movs	r4, r0
 800290e:	4252      	negs	r2, r2
 8002910:	4490      	add	r8, r2
 8002912:	4643      	mov	r3, r8
 8002914:	2602      	movs	r6, #2
 8002916:	021b      	lsls	r3, r3, #8
 8002918:	d500      	bpl.n	800291c <__aeabi_dsub+0x2e0>
 800291a:	e0c4      	b.n	8002aa6 <__aeabi_dsub+0x46a>
 800291c:	3e01      	subs	r6, #1
 800291e:	0763      	lsls	r3, r4, #29
 8002920:	d000      	beq.n	8002924 <__aeabi_dsub+0x2e8>
 8002922:	e711      	b.n	8002748 <__aeabi_dsub+0x10c>
 8002924:	4643      	mov	r3, r8
 8002926:	46b4      	mov	ip, r6
 8002928:	0759      	lsls	r1, r3, #29
 800292a:	08e2      	lsrs	r2, r4, #3
 800292c:	430a      	orrs	r2, r1
 800292e:	08db      	lsrs	r3, r3, #3
 8002930:	490f      	ldr	r1, [pc, #60]	; (8002970 <__aeabi_dsub+0x334>)
 8002932:	458c      	cmp	ip, r1
 8002934:	d040      	beq.n	80029b8 <__aeabi_dsub+0x37c>
 8002936:	4661      	mov	r1, ip
 8002938:	031b      	lsls	r3, r3, #12
 800293a:	0549      	lsls	r1, r1, #21
 800293c:	0b1b      	lsrs	r3, r3, #12
 800293e:	0d49      	lsrs	r1, r1, #21
 8002940:	e720      	b.n	8002784 <__aeabi_dsub+0x148>
 8002942:	4301      	orrs	r1, r0
 8002944:	000c      	movs	r4, r1
 8002946:	1e61      	subs	r1, r4, #1
 8002948:	418c      	sbcs	r4, r1
 800294a:	444c      	add	r4, r9
 800294c:	454c      	cmp	r4, r9
 800294e:	4192      	sbcs	r2, r2
 8002950:	4252      	negs	r2, r2
 8002952:	4690      	mov	r8, r2
 8002954:	4498      	add	r8, r3
 8002956:	4643      	mov	r3, r8
 8002958:	021b      	lsls	r3, r3, #8
 800295a:	d5e0      	bpl.n	800291e <__aeabi_dsub+0x2e2>
 800295c:	4b04      	ldr	r3, [pc, #16]	; (8002970 <__aeabi_dsub+0x334>)
 800295e:	3601      	adds	r6, #1
 8002960:	429e      	cmp	r6, r3
 8002962:	d000      	beq.n	8002966 <__aeabi_dsub+0x32a>
 8002964:	e09f      	b.n	8002aa6 <__aeabi_dsub+0x46a>
 8002966:	0031      	movs	r1, r6
 8002968:	2300      	movs	r3, #0
 800296a:	2200      	movs	r2, #0
 800296c:	e70a      	b.n	8002784 <__aeabi_dsub+0x148>
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	000007ff 	.word	0x000007ff
 8002974:	ff7fffff 	.word	0xff7fffff
 8002978:	fffff801 	.word	0xfffff801
 800297c:	000007fe 	.word	0x000007fe
 8002980:	2a00      	cmp	r2, #0
 8002982:	d100      	bne.n	8002986 <__aeabi_dsub+0x34a>
 8002984:	e160      	b.n	8002c48 <__aeabi_dsub+0x60c>
 8002986:	000a      	movs	r2, r1
 8002988:	4302      	orrs	r2, r0
 800298a:	d04d      	beq.n	8002a28 <__aeabi_dsub+0x3ec>
 800298c:	464a      	mov	r2, r9
 800298e:	075c      	lsls	r4, r3, #29
 8002990:	08d2      	lsrs	r2, r2, #3
 8002992:	4322      	orrs	r2, r4
 8002994:	2480      	movs	r4, #128	; 0x80
 8002996:	08db      	lsrs	r3, r3, #3
 8002998:	0324      	lsls	r4, r4, #12
 800299a:	4223      	tst	r3, r4
 800299c:	d007      	beq.n	80029ae <__aeabi_dsub+0x372>
 800299e:	08ce      	lsrs	r6, r1, #3
 80029a0:	4226      	tst	r6, r4
 80029a2:	d104      	bne.n	80029ae <__aeabi_dsub+0x372>
 80029a4:	465d      	mov	r5, fp
 80029a6:	0033      	movs	r3, r6
 80029a8:	08c2      	lsrs	r2, r0, #3
 80029aa:	0749      	lsls	r1, r1, #29
 80029ac:	430a      	orrs	r2, r1
 80029ae:	0f51      	lsrs	r1, r2, #29
 80029b0:	00d2      	lsls	r2, r2, #3
 80029b2:	08d2      	lsrs	r2, r2, #3
 80029b4:	0749      	lsls	r1, r1, #29
 80029b6:	430a      	orrs	r2, r1
 80029b8:	0011      	movs	r1, r2
 80029ba:	4319      	orrs	r1, r3
 80029bc:	d100      	bne.n	80029c0 <__aeabi_dsub+0x384>
 80029be:	e1c8      	b.n	8002d52 <__aeabi_dsub+0x716>
 80029c0:	2180      	movs	r1, #128	; 0x80
 80029c2:	0309      	lsls	r1, r1, #12
 80029c4:	430b      	orrs	r3, r1
 80029c6:	031b      	lsls	r3, r3, #12
 80029c8:	49d5      	ldr	r1, [pc, #852]	; (8002d20 <__aeabi_dsub+0x6e4>)
 80029ca:	0b1b      	lsrs	r3, r3, #12
 80029cc:	e6da      	b.n	8002784 <__aeabi_dsub+0x148>
 80029ce:	49d5      	ldr	r1, [pc, #852]	; (8002d24 <__aeabi_dsub+0x6e8>)
 80029d0:	1ab6      	subs	r6, r6, r2
 80029d2:	400b      	ands	r3, r1
 80029d4:	4698      	mov	r8, r3
 80029d6:	e6b5      	b.n	8002744 <__aeabi_dsub+0x108>
 80029d8:	0020      	movs	r0, r4
 80029da:	f000 fb3b 	bl	8003054 <__clzsi2>
 80029de:	0002      	movs	r2, r0
 80029e0:	3218      	adds	r2, #24
 80029e2:	2a1f      	cmp	r2, #31
 80029e4:	dc00      	bgt.n	80029e8 <__aeabi_dsub+0x3ac>
 80029e6:	e68f      	b.n	8002708 <__aeabi_dsub+0xcc>
 80029e8:	0023      	movs	r3, r4
 80029ea:	3808      	subs	r0, #8
 80029ec:	4083      	lsls	r3, r0
 80029ee:	2400      	movs	r4, #0
 80029f0:	e692      	b.n	8002718 <__aeabi_dsub+0xdc>
 80029f2:	4308      	orrs	r0, r1
 80029f4:	0002      	movs	r2, r0
 80029f6:	1e50      	subs	r0, r2, #1
 80029f8:	4182      	sbcs	r2, r0
 80029fa:	e66d      	b.n	80026d8 <__aeabi_dsub+0x9c>
 80029fc:	4cca      	ldr	r4, [pc, #808]	; (8002d28 <__aeabi_dsub+0x6ec>)
 80029fe:	1c72      	adds	r2, r6, #1
 8002a00:	4222      	tst	r2, r4
 8002a02:	d000      	beq.n	8002a06 <__aeabi_dsub+0x3ca>
 8002a04:	e0ad      	b.n	8002b62 <__aeabi_dsub+0x526>
 8002a06:	464a      	mov	r2, r9
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	2e00      	cmp	r6, #0
 8002a0c:	d1b8      	bne.n	8002980 <__aeabi_dsub+0x344>
 8002a0e:	2a00      	cmp	r2, #0
 8002a10:	d100      	bne.n	8002a14 <__aeabi_dsub+0x3d8>
 8002a12:	e158      	b.n	8002cc6 <__aeabi_dsub+0x68a>
 8002a14:	000a      	movs	r2, r1
 8002a16:	4302      	orrs	r2, r0
 8002a18:	d000      	beq.n	8002a1c <__aeabi_dsub+0x3e0>
 8002a1a:	e159      	b.n	8002cd0 <__aeabi_dsub+0x694>
 8002a1c:	464a      	mov	r2, r9
 8002a1e:	0759      	lsls	r1, r3, #29
 8002a20:	08d2      	lsrs	r2, r2, #3
 8002a22:	430a      	orrs	r2, r1
 8002a24:	08db      	lsrs	r3, r3, #3
 8002a26:	e786      	b.n	8002936 <__aeabi_dsub+0x2fa>
 8002a28:	464a      	mov	r2, r9
 8002a2a:	0759      	lsls	r1, r3, #29
 8002a2c:	08d2      	lsrs	r2, r2, #3
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	08db      	lsrs	r3, r3, #3
 8002a32:	e7c1      	b.n	80029b8 <__aeabi_dsub+0x37c>
 8002a34:	4dba      	ldr	r5, [pc, #744]	; (8002d20 <__aeabi_dsub+0x6e4>)
 8002a36:	42aa      	cmp	r2, r5
 8002a38:	d100      	bne.n	8002a3c <__aeabi_dsub+0x400>
 8002a3a:	e11e      	b.n	8002c7a <__aeabi_dsub+0x63e>
 8002a3c:	2580      	movs	r5, #128	; 0x80
 8002a3e:	042d      	lsls	r5, r5, #16
 8002a40:	432b      	orrs	r3, r5
 8002a42:	4664      	mov	r4, ip
 8002a44:	2c38      	cmp	r4, #56	; 0x38
 8002a46:	dc5d      	bgt.n	8002b04 <__aeabi_dsub+0x4c8>
 8002a48:	2c1f      	cmp	r4, #31
 8002a4a:	dd00      	ble.n	8002a4e <__aeabi_dsub+0x412>
 8002a4c:	e0d0      	b.n	8002bf0 <__aeabi_dsub+0x5b4>
 8002a4e:	2520      	movs	r5, #32
 8002a50:	4667      	mov	r7, ip
 8002a52:	1b2d      	subs	r5, r5, r4
 8002a54:	464e      	mov	r6, r9
 8002a56:	001c      	movs	r4, r3
 8002a58:	40fe      	lsrs	r6, r7
 8002a5a:	40ac      	lsls	r4, r5
 8002a5c:	4334      	orrs	r4, r6
 8002a5e:	464e      	mov	r6, r9
 8002a60:	40ae      	lsls	r6, r5
 8002a62:	0035      	movs	r5, r6
 8002a64:	40fb      	lsrs	r3, r7
 8002a66:	1e6e      	subs	r6, r5, #1
 8002a68:	41b5      	sbcs	r5, r6
 8002a6a:	1ac9      	subs	r1, r1, r3
 8002a6c:	432c      	orrs	r4, r5
 8002a6e:	e04e      	b.n	8002b0e <__aeabi_dsub+0x4d2>
 8002a70:	464a      	mov	r2, r9
 8002a72:	1a14      	subs	r4, r2, r0
 8002a74:	45a1      	cmp	r9, r4
 8002a76:	4192      	sbcs	r2, r2
 8002a78:	4252      	negs	r2, r2
 8002a7a:	4690      	mov	r8, r2
 8002a7c:	1a5f      	subs	r7, r3, r1
 8002a7e:	003a      	movs	r2, r7
 8002a80:	4647      	mov	r7, r8
 8002a82:	1bd2      	subs	r2, r2, r7
 8002a84:	4690      	mov	r8, r2
 8002a86:	0212      	lsls	r2, r2, #8
 8002a88:	d500      	bpl.n	8002a8c <__aeabi_dsub+0x450>
 8002a8a:	e08b      	b.n	8002ba4 <__aeabi_dsub+0x568>
 8002a8c:	4642      	mov	r2, r8
 8002a8e:	4322      	orrs	r2, r4
 8002a90:	d000      	beq.n	8002a94 <__aeabi_dsub+0x458>
 8002a92:	e630      	b.n	80026f6 <__aeabi_dsub+0xba>
 8002a94:	2300      	movs	r3, #0
 8002a96:	2500      	movs	r5, #0
 8002a98:	e74d      	b.n	8002936 <__aeabi_dsub+0x2fa>
 8002a9a:	464a      	mov	r2, r9
 8002a9c:	0759      	lsls	r1, r3, #29
 8002a9e:	08d2      	lsrs	r2, r2, #3
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	08db      	lsrs	r3, r3, #3
 8002aa4:	e744      	b.n	8002930 <__aeabi_dsub+0x2f4>
 8002aa6:	4642      	mov	r2, r8
 8002aa8:	4b9e      	ldr	r3, [pc, #632]	; (8002d24 <__aeabi_dsub+0x6e8>)
 8002aaa:	0861      	lsrs	r1, r4, #1
 8002aac:	401a      	ands	r2, r3
 8002aae:	0013      	movs	r3, r2
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	4014      	ands	r4, r2
 8002ab4:	430c      	orrs	r4, r1
 8002ab6:	07da      	lsls	r2, r3, #31
 8002ab8:	085b      	lsrs	r3, r3, #1
 8002aba:	4698      	mov	r8, r3
 8002abc:	4314      	orrs	r4, r2
 8002abe:	e641      	b.n	8002744 <__aeabi_dsub+0x108>
 8002ac0:	001a      	movs	r2, r3
 8002ac2:	3e1f      	subs	r6, #31
 8002ac4:	40f2      	lsrs	r2, r6
 8002ac6:	0016      	movs	r6, r2
 8002ac8:	2920      	cmp	r1, #32
 8002aca:	d003      	beq.n	8002ad4 <__aeabi_dsub+0x498>
 8002acc:	2240      	movs	r2, #64	; 0x40
 8002ace:	1a51      	subs	r1, r2, r1
 8002ad0:	408b      	lsls	r3, r1
 8002ad2:	431c      	orrs	r4, r3
 8002ad4:	1e62      	subs	r2, r4, #1
 8002ad6:	4194      	sbcs	r4, r2
 8002ad8:	2300      	movs	r3, #0
 8002ada:	4334      	orrs	r4, r6
 8002adc:	4698      	mov	r8, r3
 8002ade:	2600      	movs	r6, #0
 8002ae0:	e71d      	b.n	800291e <__aeabi_dsub+0x2e2>
 8002ae2:	000c      	movs	r4, r1
 8002ae4:	3a20      	subs	r2, #32
 8002ae6:	40d4      	lsrs	r4, r2
 8002ae8:	0022      	movs	r2, r4
 8002aea:	4664      	mov	r4, ip
 8002aec:	2c20      	cmp	r4, #32
 8002aee:	d004      	beq.n	8002afa <__aeabi_dsub+0x4be>
 8002af0:	2740      	movs	r7, #64	; 0x40
 8002af2:	1b3f      	subs	r7, r7, r4
 8002af4:	40b9      	lsls	r1, r7
 8002af6:	4308      	orrs	r0, r1
 8002af8:	4680      	mov	r8, r0
 8002afa:	4644      	mov	r4, r8
 8002afc:	1e61      	subs	r1, r4, #1
 8002afe:	418c      	sbcs	r4, r1
 8002b00:	4322      	orrs	r2, r4
 8002b02:	e5e9      	b.n	80026d8 <__aeabi_dsub+0x9c>
 8002b04:	464c      	mov	r4, r9
 8002b06:	4323      	orrs	r3, r4
 8002b08:	001c      	movs	r4, r3
 8002b0a:	1e63      	subs	r3, r4, #1
 8002b0c:	419c      	sbcs	r4, r3
 8002b0e:	1b04      	subs	r4, r0, r4
 8002b10:	42a0      	cmp	r0, r4
 8002b12:	419b      	sbcs	r3, r3
 8002b14:	425b      	negs	r3, r3
 8002b16:	1acb      	subs	r3, r1, r3
 8002b18:	4698      	mov	r8, r3
 8002b1a:	465d      	mov	r5, fp
 8002b1c:	0016      	movs	r6, r2
 8002b1e:	e5e2      	b.n	80026e6 <__aeabi_dsub+0xaa>
 8002b20:	464e      	mov	r6, r9
 8002b22:	431e      	orrs	r6, r3
 8002b24:	d100      	bne.n	8002b28 <__aeabi_dsub+0x4ec>
 8002b26:	e0ae      	b.n	8002c86 <__aeabi_dsub+0x64a>
 8002b28:	1e66      	subs	r6, r4, #1
 8002b2a:	2c01      	cmp	r4, #1
 8002b2c:	d100      	bne.n	8002b30 <__aeabi_dsub+0x4f4>
 8002b2e:	e0fd      	b.n	8002d2c <__aeabi_dsub+0x6f0>
 8002b30:	4f7b      	ldr	r7, [pc, #492]	; (8002d20 <__aeabi_dsub+0x6e4>)
 8002b32:	42bc      	cmp	r4, r7
 8002b34:	d100      	bne.n	8002b38 <__aeabi_dsub+0x4fc>
 8002b36:	e107      	b.n	8002d48 <__aeabi_dsub+0x70c>
 8002b38:	46b4      	mov	ip, r6
 8002b3a:	e69b      	b.n	8002874 <__aeabi_dsub+0x238>
 8002b3c:	4664      	mov	r4, ip
 8002b3e:	2220      	movs	r2, #32
 8002b40:	1b12      	subs	r2, r2, r4
 8002b42:	000c      	movs	r4, r1
 8002b44:	4094      	lsls	r4, r2
 8002b46:	0007      	movs	r7, r0
 8002b48:	4090      	lsls	r0, r2
 8002b4a:	46a0      	mov	r8, r4
 8002b4c:	4664      	mov	r4, ip
 8002b4e:	1e42      	subs	r2, r0, #1
 8002b50:	4190      	sbcs	r0, r2
 8002b52:	4662      	mov	r2, ip
 8002b54:	40e7      	lsrs	r7, r4
 8002b56:	4644      	mov	r4, r8
 8002b58:	40d1      	lsrs	r1, r2
 8002b5a:	433c      	orrs	r4, r7
 8002b5c:	4304      	orrs	r4, r0
 8002b5e:	185b      	adds	r3, r3, r1
 8002b60:	e6f3      	b.n	800294a <__aeabi_dsub+0x30e>
 8002b62:	4c6f      	ldr	r4, [pc, #444]	; (8002d20 <__aeabi_dsub+0x6e4>)
 8002b64:	42a2      	cmp	r2, r4
 8002b66:	d100      	bne.n	8002b6a <__aeabi_dsub+0x52e>
 8002b68:	e0d5      	b.n	8002d16 <__aeabi_dsub+0x6da>
 8002b6a:	4448      	add	r0, r9
 8002b6c:	185b      	adds	r3, r3, r1
 8002b6e:	4548      	cmp	r0, r9
 8002b70:	4189      	sbcs	r1, r1
 8002b72:	4249      	negs	r1, r1
 8002b74:	185b      	adds	r3, r3, r1
 8002b76:	07dc      	lsls	r4, r3, #31
 8002b78:	0840      	lsrs	r0, r0, #1
 8002b7a:	085b      	lsrs	r3, r3, #1
 8002b7c:	4698      	mov	r8, r3
 8002b7e:	0016      	movs	r6, r2
 8002b80:	4304      	orrs	r4, r0
 8002b82:	e6cc      	b.n	800291e <__aeabi_dsub+0x2e2>
 8002b84:	2a00      	cmp	r2, #0
 8002b86:	d000      	beq.n	8002b8a <__aeabi_dsub+0x54e>
 8002b88:	e082      	b.n	8002c90 <__aeabi_dsub+0x654>
 8002b8a:	000a      	movs	r2, r1
 8002b8c:	4302      	orrs	r2, r0
 8002b8e:	d140      	bne.n	8002c12 <__aeabi_dsub+0x5d6>
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	2500      	movs	r5, #0
 8002b94:	031b      	lsls	r3, r3, #12
 8002b96:	e713      	b.n	80029c0 <__aeabi_dsub+0x384>
 8002b98:	074b      	lsls	r3, r1, #29
 8002b9a:	08c2      	lsrs	r2, r0, #3
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	465d      	mov	r5, fp
 8002ba0:	08cb      	lsrs	r3, r1, #3
 8002ba2:	e6c5      	b.n	8002930 <__aeabi_dsub+0x2f4>
 8002ba4:	464a      	mov	r2, r9
 8002ba6:	1a84      	subs	r4, r0, r2
 8002ba8:	42a0      	cmp	r0, r4
 8002baa:	4192      	sbcs	r2, r2
 8002bac:	1acb      	subs	r3, r1, r3
 8002bae:	4252      	negs	r2, r2
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	4698      	mov	r8, r3
 8002bb4:	465d      	mov	r5, fp
 8002bb6:	e59e      	b.n	80026f6 <__aeabi_dsub+0xba>
 8002bb8:	464a      	mov	r2, r9
 8002bba:	0759      	lsls	r1, r3, #29
 8002bbc:	08d2      	lsrs	r2, r2, #3
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	08db      	lsrs	r3, r3, #3
 8002bc2:	e6f9      	b.n	80029b8 <__aeabi_dsub+0x37c>
 8002bc4:	464a      	mov	r2, r9
 8002bc6:	1a14      	subs	r4, r2, r0
 8002bc8:	45a1      	cmp	r9, r4
 8002bca:	4192      	sbcs	r2, r2
 8002bcc:	1a5b      	subs	r3, r3, r1
 8002bce:	4252      	negs	r2, r2
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	4698      	mov	r8, r3
 8002bd4:	2601      	movs	r6, #1
 8002bd6:	e586      	b.n	80026e6 <__aeabi_dsub+0xaa>
 8002bd8:	464a      	mov	r2, r9
 8002bda:	0759      	lsls	r1, r3, #29
 8002bdc:	08d2      	lsrs	r2, r2, #3
 8002bde:	430a      	orrs	r2, r1
 8002be0:	08db      	lsrs	r3, r3, #3
 8002be2:	e6a5      	b.n	8002930 <__aeabi_dsub+0x2f4>
 8002be4:	464c      	mov	r4, r9
 8002be6:	4323      	orrs	r3, r4
 8002be8:	001c      	movs	r4, r3
 8002bea:	1e63      	subs	r3, r4, #1
 8002bec:	419c      	sbcs	r4, r3
 8002bee:	e65b      	b.n	80028a8 <__aeabi_dsub+0x26c>
 8002bf0:	4665      	mov	r5, ip
 8002bf2:	001e      	movs	r6, r3
 8002bf4:	3d20      	subs	r5, #32
 8002bf6:	40ee      	lsrs	r6, r5
 8002bf8:	2c20      	cmp	r4, #32
 8002bfa:	d005      	beq.n	8002c08 <__aeabi_dsub+0x5cc>
 8002bfc:	2540      	movs	r5, #64	; 0x40
 8002bfe:	1b2d      	subs	r5, r5, r4
 8002c00:	40ab      	lsls	r3, r5
 8002c02:	464c      	mov	r4, r9
 8002c04:	431c      	orrs	r4, r3
 8002c06:	46a2      	mov	sl, r4
 8002c08:	4654      	mov	r4, sl
 8002c0a:	1e63      	subs	r3, r4, #1
 8002c0c:	419c      	sbcs	r4, r3
 8002c0e:	4334      	orrs	r4, r6
 8002c10:	e77d      	b.n	8002b0e <__aeabi_dsub+0x4d2>
 8002c12:	074b      	lsls	r3, r1, #29
 8002c14:	08c2      	lsrs	r2, r0, #3
 8002c16:	431a      	orrs	r2, r3
 8002c18:	465d      	mov	r5, fp
 8002c1a:	08cb      	lsrs	r3, r1, #3
 8002c1c:	e6cc      	b.n	80029b8 <__aeabi_dsub+0x37c>
 8002c1e:	000a      	movs	r2, r1
 8002c20:	4302      	orrs	r2, r0
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5ea>
 8002c24:	e736      	b.n	8002a94 <__aeabi_dsub+0x458>
 8002c26:	074b      	lsls	r3, r1, #29
 8002c28:	08c2      	lsrs	r2, r0, #3
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	465d      	mov	r5, fp
 8002c2e:	08cb      	lsrs	r3, r1, #3
 8002c30:	e681      	b.n	8002936 <__aeabi_dsub+0x2fa>
 8002c32:	464a      	mov	r2, r9
 8002c34:	1a84      	subs	r4, r0, r2
 8002c36:	42a0      	cmp	r0, r4
 8002c38:	4192      	sbcs	r2, r2
 8002c3a:	1acb      	subs	r3, r1, r3
 8002c3c:	4252      	negs	r2, r2
 8002c3e:	1a9b      	subs	r3, r3, r2
 8002c40:	4698      	mov	r8, r3
 8002c42:	465d      	mov	r5, fp
 8002c44:	2601      	movs	r6, #1
 8002c46:	e54e      	b.n	80026e6 <__aeabi_dsub+0xaa>
 8002c48:	074b      	lsls	r3, r1, #29
 8002c4a:	08c2      	lsrs	r2, r0, #3
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	08cb      	lsrs	r3, r1, #3
 8002c50:	e6b2      	b.n	80029b8 <__aeabi_dsub+0x37c>
 8002c52:	464a      	mov	r2, r9
 8002c54:	1a14      	subs	r4, r2, r0
 8002c56:	45a1      	cmp	r9, r4
 8002c58:	4192      	sbcs	r2, r2
 8002c5a:	1a5f      	subs	r7, r3, r1
 8002c5c:	4252      	negs	r2, r2
 8002c5e:	1aba      	subs	r2, r7, r2
 8002c60:	4690      	mov	r8, r2
 8002c62:	0212      	lsls	r2, r2, #8
 8002c64:	d56b      	bpl.n	8002d3e <__aeabi_dsub+0x702>
 8002c66:	464a      	mov	r2, r9
 8002c68:	1a84      	subs	r4, r0, r2
 8002c6a:	42a0      	cmp	r0, r4
 8002c6c:	4192      	sbcs	r2, r2
 8002c6e:	1acb      	subs	r3, r1, r3
 8002c70:	4252      	negs	r2, r2
 8002c72:	1a9b      	subs	r3, r3, r2
 8002c74:	4698      	mov	r8, r3
 8002c76:	465d      	mov	r5, fp
 8002c78:	e564      	b.n	8002744 <__aeabi_dsub+0x108>
 8002c7a:	074b      	lsls	r3, r1, #29
 8002c7c:	08c2      	lsrs	r2, r0, #3
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	465d      	mov	r5, fp
 8002c82:	08cb      	lsrs	r3, r1, #3
 8002c84:	e698      	b.n	80029b8 <__aeabi_dsub+0x37c>
 8002c86:	074b      	lsls	r3, r1, #29
 8002c88:	08c2      	lsrs	r2, r0, #3
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	08cb      	lsrs	r3, r1, #3
 8002c8e:	e64f      	b.n	8002930 <__aeabi_dsub+0x2f4>
 8002c90:	000a      	movs	r2, r1
 8002c92:	4302      	orrs	r2, r0
 8002c94:	d090      	beq.n	8002bb8 <__aeabi_dsub+0x57c>
 8002c96:	464a      	mov	r2, r9
 8002c98:	075c      	lsls	r4, r3, #29
 8002c9a:	08d2      	lsrs	r2, r2, #3
 8002c9c:	4314      	orrs	r4, r2
 8002c9e:	2280      	movs	r2, #128	; 0x80
 8002ca0:	08db      	lsrs	r3, r3, #3
 8002ca2:	0312      	lsls	r2, r2, #12
 8002ca4:	4213      	tst	r3, r2
 8002ca6:	d008      	beq.n	8002cba <__aeabi_dsub+0x67e>
 8002ca8:	08ce      	lsrs	r6, r1, #3
 8002caa:	4216      	tst	r6, r2
 8002cac:	d105      	bne.n	8002cba <__aeabi_dsub+0x67e>
 8002cae:	08c0      	lsrs	r0, r0, #3
 8002cb0:	0749      	lsls	r1, r1, #29
 8002cb2:	4308      	orrs	r0, r1
 8002cb4:	0004      	movs	r4, r0
 8002cb6:	465d      	mov	r5, fp
 8002cb8:	0033      	movs	r3, r6
 8002cba:	0f61      	lsrs	r1, r4, #29
 8002cbc:	00e2      	lsls	r2, r4, #3
 8002cbe:	0749      	lsls	r1, r1, #29
 8002cc0:	08d2      	lsrs	r2, r2, #3
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	e678      	b.n	80029b8 <__aeabi_dsub+0x37c>
 8002cc6:	074b      	lsls	r3, r1, #29
 8002cc8:	08c2      	lsrs	r2, r0, #3
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	08cb      	lsrs	r3, r1, #3
 8002cce:	e632      	b.n	8002936 <__aeabi_dsub+0x2fa>
 8002cd0:	4448      	add	r0, r9
 8002cd2:	185b      	adds	r3, r3, r1
 8002cd4:	4548      	cmp	r0, r9
 8002cd6:	4192      	sbcs	r2, r2
 8002cd8:	4698      	mov	r8, r3
 8002cda:	4252      	negs	r2, r2
 8002cdc:	4490      	add	r8, r2
 8002cde:	4643      	mov	r3, r8
 8002ce0:	0004      	movs	r4, r0
 8002ce2:	021b      	lsls	r3, r3, #8
 8002ce4:	d400      	bmi.n	8002ce8 <__aeabi_dsub+0x6ac>
 8002ce6:	e61a      	b.n	800291e <__aeabi_dsub+0x2e2>
 8002ce8:	4642      	mov	r2, r8
 8002cea:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <__aeabi_dsub+0x6e8>)
 8002cec:	2601      	movs	r6, #1
 8002cee:	401a      	ands	r2, r3
 8002cf0:	4690      	mov	r8, r2
 8002cf2:	e614      	b.n	800291e <__aeabi_dsub+0x2e2>
 8002cf4:	4666      	mov	r6, ip
 8002cf6:	001f      	movs	r7, r3
 8002cf8:	3e20      	subs	r6, #32
 8002cfa:	40f7      	lsrs	r7, r6
 8002cfc:	2c20      	cmp	r4, #32
 8002cfe:	d005      	beq.n	8002d0c <__aeabi_dsub+0x6d0>
 8002d00:	2640      	movs	r6, #64	; 0x40
 8002d02:	1b36      	subs	r6, r6, r4
 8002d04:	40b3      	lsls	r3, r6
 8002d06:	464c      	mov	r4, r9
 8002d08:	431c      	orrs	r4, r3
 8002d0a:	46a2      	mov	sl, r4
 8002d0c:	4654      	mov	r4, sl
 8002d0e:	1e63      	subs	r3, r4, #1
 8002d10:	419c      	sbcs	r4, r3
 8002d12:	433c      	orrs	r4, r7
 8002d14:	e5c8      	b.n	80028a8 <__aeabi_dsub+0x26c>
 8002d16:	0011      	movs	r1, r2
 8002d18:	2300      	movs	r3, #0
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	e532      	b.n	8002784 <__aeabi_dsub+0x148>
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	000007ff 	.word	0x000007ff
 8002d24:	ff7fffff 	.word	0xff7fffff
 8002d28:	000007fe 	.word	0x000007fe
 8002d2c:	464a      	mov	r2, r9
 8002d2e:	1814      	adds	r4, r2, r0
 8002d30:	4284      	cmp	r4, r0
 8002d32:	4192      	sbcs	r2, r2
 8002d34:	185b      	adds	r3, r3, r1
 8002d36:	4698      	mov	r8, r3
 8002d38:	4252      	negs	r2, r2
 8002d3a:	4490      	add	r8, r2
 8002d3c:	e5e9      	b.n	8002912 <__aeabi_dsub+0x2d6>
 8002d3e:	4642      	mov	r2, r8
 8002d40:	4322      	orrs	r2, r4
 8002d42:	d100      	bne.n	8002d46 <__aeabi_dsub+0x70a>
 8002d44:	e6a6      	b.n	8002a94 <__aeabi_dsub+0x458>
 8002d46:	e5ea      	b.n	800291e <__aeabi_dsub+0x2e2>
 8002d48:	074b      	lsls	r3, r1, #29
 8002d4a:	08c2      	lsrs	r2, r0, #3
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	08cb      	lsrs	r3, r1, #3
 8002d50:	e632      	b.n	80029b8 <__aeabi_dsub+0x37c>
 8002d52:	2200      	movs	r2, #0
 8002d54:	4901      	ldr	r1, [pc, #4]	; (8002d5c <__aeabi_dsub+0x720>)
 8002d56:	0013      	movs	r3, r2
 8002d58:	e514      	b.n	8002784 <__aeabi_dsub+0x148>
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	000007ff 	.word	0x000007ff

08002d60 <__aeabi_dcmpun>:
 8002d60:	b570      	push	{r4, r5, r6, lr}
 8002d62:	0005      	movs	r5, r0
 8002d64:	480c      	ldr	r0, [pc, #48]	; (8002d98 <__aeabi_dcmpun+0x38>)
 8002d66:	030c      	lsls	r4, r1, #12
 8002d68:	0016      	movs	r6, r2
 8002d6a:	0049      	lsls	r1, r1, #1
 8002d6c:	031a      	lsls	r2, r3, #12
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	0b24      	lsrs	r4, r4, #12
 8002d72:	0d49      	lsrs	r1, r1, #21
 8002d74:	0b12      	lsrs	r2, r2, #12
 8002d76:	0d5b      	lsrs	r3, r3, #21
 8002d78:	4281      	cmp	r1, r0
 8002d7a:	d008      	beq.n	8002d8e <__aeabi_dcmpun+0x2e>
 8002d7c:	4906      	ldr	r1, [pc, #24]	; (8002d98 <__aeabi_dcmpun+0x38>)
 8002d7e:	2000      	movs	r0, #0
 8002d80:	428b      	cmp	r3, r1
 8002d82:	d103      	bne.n	8002d8c <__aeabi_dcmpun+0x2c>
 8002d84:	4332      	orrs	r2, r6
 8002d86:	0010      	movs	r0, r2
 8002d88:	1e42      	subs	r2, r0, #1
 8002d8a:	4190      	sbcs	r0, r2
 8002d8c:	bd70      	pop	{r4, r5, r6, pc}
 8002d8e:	2001      	movs	r0, #1
 8002d90:	432c      	orrs	r4, r5
 8002d92:	d1fb      	bne.n	8002d8c <__aeabi_dcmpun+0x2c>
 8002d94:	e7f2      	b.n	8002d7c <__aeabi_dcmpun+0x1c>
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	000007ff 	.word	0x000007ff

08002d9c <__aeabi_d2iz>:
 8002d9c:	000a      	movs	r2, r1
 8002d9e:	b530      	push	{r4, r5, lr}
 8002da0:	4c13      	ldr	r4, [pc, #76]	; (8002df0 <__aeabi_d2iz+0x54>)
 8002da2:	0053      	lsls	r3, r2, #1
 8002da4:	0309      	lsls	r1, r1, #12
 8002da6:	0005      	movs	r5, r0
 8002da8:	0b09      	lsrs	r1, r1, #12
 8002daa:	2000      	movs	r0, #0
 8002dac:	0d5b      	lsrs	r3, r3, #21
 8002dae:	0fd2      	lsrs	r2, r2, #31
 8002db0:	42a3      	cmp	r3, r4
 8002db2:	dd04      	ble.n	8002dbe <__aeabi_d2iz+0x22>
 8002db4:	480f      	ldr	r0, [pc, #60]	; (8002df4 <__aeabi_d2iz+0x58>)
 8002db6:	4283      	cmp	r3, r0
 8002db8:	dd02      	ble.n	8002dc0 <__aeabi_d2iz+0x24>
 8002dba:	4b0f      	ldr	r3, [pc, #60]	; (8002df8 <__aeabi_d2iz+0x5c>)
 8002dbc:	18d0      	adds	r0, r2, r3
 8002dbe:	bd30      	pop	{r4, r5, pc}
 8002dc0:	2080      	movs	r0, #128	; 0x80
 8002dc2:	0340      	lsls	r0, r0, #13
 8002dc4:	4301      	orrs	r1, r0
 8002dc6:	480d      	ldr	r0, [pc, #52]	; (8002dfc <__aeabi_d2iz+0x60>)
 8002dc8:	1ac0      	subs	r0, r0, r3
 8002dca:	281f      	cmp	r0, #31
 8002dcc:	dd08      	ble.n	8002de0 <__aeabi_d2iz+0x44>
 8002dce:	480c      	ldr	r0, [pc, #48]	; (8002e00 <__aeabi_d2iz+0x64>)
 8002dd0:	1ac3      	subs	r3, r0, r3
 8002dd2:	40d9      	lsrs	r1, r3
 8002dd4:	000b      	movs	r3, r1
 8002dd6:	4258      	negs	r0, r3
 8002dd8:	2a00      	cmp	r2, #0
 8002dda:	d1f0      	bne.n	8002dbe <__aeabi_d2iz+0x22>
 8002ddc:	0018      	movs	r0, r3
 8002dde:	e7ee      	b.n	8002dbe <__aeabi_d2iz+0x22>
 8002de0:	4c08      	ldr	r4, [pc, #32]	; (8002e04 <__aeabi_d2iz+0x68>)
 8002de2:	40c5      	lsrs	r5, r0
 8002de4:	46a4      	mov	ip, r4
 8002de6:	4463      	add	r3, ip
 8002de8:	4099      	lsls	r1, r3
 8002dea:	000b      	movs	r3, r1
 8002dec:	432b      	orrs	r3, r5
 8002dee:	e7f2      	b.n	8002dd6 <__aeabi_d2iz+0x3a>
 8002df0:	000003fe 	.word	0x000003fe
 8002df4:	0000041d 	.word	0x0000041d
 8002df8:	7fffffff 	.word	0x7fffffff
 8002dfc:	00000433 	.word	0x00000433
 8002e00:	00000413 	.word	0x00000413
 8002e04:	fffffbed 	.word	0xfffffbed

08002e08 <__aeabi_i2d>:
 8002e08:	b570      	push	{r4, r5, r6, lr}
 8002e0a:	2800      	cmp	r0, #0
 8002e0c:	d016      	beq.n	8002e3c <__aeabi_i2d+0x34>
 8002e0e:	17c3      	asrs	r3, r0, #31
 8002e10:	18c5      	adds	r5, r0, r3
 8002e12:	405d      	eors	r5, r3
 8002e14:	0fc4      	lsrs	r4, r0, #31
 8002e16:	0028      	movs	r0, r5
 8002e18:	f000 f91c 	bl	8003054 <__clzsi2>
 8002e1c:	4a11      	ldr	r2, [pc, #68]	; (8002e64 <__aeabi_i2d+0x5c>)
 8002e1e:	1a12      	subs	r2, r2, r0
 8002e20:	280a      	cmp	r0, #10
 8002e22:	dc16      	bgt.n	8002e52 <__aeabi_i2d+0x4a>
 8002e24:	0003      	movs	r3, r0
 8002e26:	002e      	movs	r6, r5
 8002e28:	3315      	adds	r3, #21
 8002e2a:	409e      	lsls	r6, r3
 8002e2c:	230b      	movs	r3, #11
 8002e2e:	1a18      	subs	r0, r3, r0
 8002e30:	40c5      	lsrs	r5, r0
 8002e32:	0553      	lsls	r3, r2, #21
 8002e34:	032d      	lsls	r5, r5, #12
 8002e36:	0b2d      	lsrs	r5, r5, #12
 8002e38:	0d5b      	lsrs	r3, r3, #21
 8002e3a:	e003      	b.n	8002e44 <__aeabi_i2d+0x3c>
 8002e3c:	2400      	movs	r4, #0
 8002e3e:	2300      	movs	r3, #0
 8002e40:	2500      	movs	r5, #0
 8002e42:	2600      	movs	r6, #0
 8002e44:	051b      	lsls	r3, r3, #20
 8002e46:	432b      	orrs	r3, r5
 8002e48:	07e4      	lsls	r4, r4, #31
 8002e4a:	4323      	orrs	r3, r4
 8002e4c:	0030      	movs	r0, r6
 8002e4e:	0019      	movs	r1, r3
 8002e50:	bd70      	pop	{r4, r5, r6, pc}
 8002e52:	380b      	subs	r0, #11
 8002e54:	4085      	lsls	r5, r0
 8002e56:	0553      	lsls	r3, r2, #21
 8002e58:	032d      	lsls	r5, r5, #12
 8002e5a:	2600      	movs	r6, #0
 8002e5c:	0b2d      	lsrs	r5, r5, #12
 8002e5e:	0d5b      	lsrs	r3, r3, #21
 8002e60:	e7f0      	b.n	8002e44 <__aeabi_i2d+0x3c>
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	0000041e 	.word	0x0000041e

08002e68 <__aeabi_ui2d>:
 8002e68:	b510      	push	{r4, lr}
 8002e6a:	1e04      	subs	r4, r0, #0
 8002e6c:	d010      	beq.n	8002e90 <__aeabi_ui2d+0x28>
 8002e6e:	f000 f8f1 	bl	8003054 <__clzsi2>
 8002e72:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <__aeabi_ui2d+0x48>)
 8002e74:	1a1b      	subs	r3, r3, r0
 8002e76:	280a      	cmp	r0, #10
 8002e78:	dc11      	bgt.n	8002e9e <__aeabi_ui2d+0x36>
 8002e7a:	220b      	movs	r2, #11
 8002e7c:	0021      	movs	r1, r4
 8002e7e:	1a12      	subs	r2, r2, r0
 8002e80:	40d1      	lsrs	r1, r2
 8002e82:	3015      	adds	r0, #21
 8002e84:	030a      	lsls	r2, r1, #12
 8002e86:	055b      	lsls	r3, r3, #21
 8002e88:	4084      	lsls	r4, r0
 8002e8a:	0b12      	lsrs	r2, r2, #12
 8002e8c:	0d5b      	lsrs	r3, r3, #21
 8002e8e:	e001      	b.n	8002e94 <__aeabi_ui2d+0x2c>
 8002e90:	2300      	movs	r3, #0
 8002e92:	2200      	movs	r2, #0
 8002e94:	051b      	lsls	r3, r3, #20
 8002e96:	4313      	orrs	r3, r2
 8002e98:	0020      	movs	r0, r4
 8002e9a:	0019      	movs	r1, r3
 8002e9c:	bd10      	pop	{r4, pc}
 8002e9e:	0022      	movs	r2, r4
 8002ea0:	380b      	subs	r0, #11
 8002ea2:	4082      	lsls	r2, r0
 8002ea4:	055b      	lsls	r3, r3, #21
 8002ea6:	0312      	lsls	r2, r2, #12
 8002ea8:	2400      	movs	r4, #0
 8002eaa:	0b12      	lsrs	r2, r2, #12
 8002eac:	0d5b      	lsrs	r3, r3, #21
 8002eae:	e7f1      	b.n	8002e94 <__aeabi_ui2d+0x2c>
 8002eb0:	0000041e 	.word	0x0000041e

08002eb4 <__aeabi_f2d>:
 8002eb4:	b570      	push	{r4, r5, r6, lr}
 8002eb6:	0043      	lsls	r3, r0, #1
 8002eb8:	0246      	lsls	r6, r0, #9
 8002eba:	0fc4      	lsrs	r4, r0, #31
 8002ebc:	20fe      	movs	r0, #254	; 0xfe
 8002ebe:	0e1b      	lsrs	r3, r3, #24
 8002ec0:	1c59      	adds	r1, r3, #1
 8002ec2:	0a75      	lsrs	r5, r6, #9
 8002ec4:	4208      	tst	r0, r1
 8002ec6:	d00c      	beq.n	8002ee2 <__aeabi_f2d+0x2e>
 8002ec8:	22e0      	movs	r2, #224	; 0xe0
 8002eca:	0092      	lsls	r2, r2, #2
 8002ecc:	4694      	mov	ip, r2
 8002ece:	076d      	lsls	r5, r5, #29
 8002ed0:	0b36      	lsrs	r6, r6, #12
 8002ed2:	4463      	add	r3, ip
 8002ed4:	051b      	lsls	r3, r3, #20
 8002ed6:	4333      	orrs	r3, r6
 8002ed8:	07e4      	lsls	r4, r4, #31
 8002eda:	4323      	orrs	r3, r4
 8002edc:	0028      	movs	r0, r5
 8002ede:	0019      	movs	r1, r3
 8002ee0:	bd70      	pop	{r4, r5, r6, pc}
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d114      	bne.n	8002f10 <__aeabi_f2d+0x5c>
 8002ee6:	2d00      	cmp	r5, #0
 8002ee8:	d01b      	beq.n	8002f22 <__aeabi_f2d+0x6e>
 8002eea:	0028      	movs	r0, r5
 8002eec:	f000 f8b2 	bl	8003054 <__clzsi2>
 8002ef0:	280a      	cmp	r0, #10
 8002ef2:	dc1c      	bgt.n	8002f2e <__aeabi_f2d+0x7a>
 8002ef4:	230b      	movs	r3, #11
 8002ef6:	002a      	movs	r2, r5
 8002ef8:	1a1b      	subs	r3, r3, r0
 8002efa:	40da      	lsrs	r2, r3
 8002efc:	0003      	movs	r3, r0
 8002efe:	3315      	adds	r3, #21
 8002f00:	409d      	lsls	r5, r3
 8002f02:	4b0e      	ldr	r3, [pc, #56]	; (8002f3c <__aeabi_f2d+0x88>)
 8002f04:	0312      	lsls	r2, r2, #12
 8002f06:	1a1b      	subs	r3, r3, r0
 8002f08:	055b      	lsls	r3, r3, #21
 8002f0a:	0b16      	lsrs	r6, r2, #12
 8002f0c:	0d5b      	lsrs	r3, r3, #21
 8002f0e:	e7e1      	b.n	8002ed4 <__aeabi_f2d+0x20>
 8002f10:	2d00      	cmp	r5, #0
 8002f12:	d009      	beq.n	8002f28 <__aeabi_f2d+0x74>
 8002f14:	0b32      	lsrs	r2, r6, #12
 8002f16:	2680      	movs	r6, #128	; 0x80
 8002f18:	0336      	lsls	r6, r6, #12
 8002f1a:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <__aeabi_f2d+0x8c>)
 8002f1c:	076d      	lsls	r5, r5, #29
 8002f1e:	4316      	orrs	r6, r2
 8002f20:	e7d8      	b.n	8002ed4 <__aeabi_f2d+0x20>
 8002f22:	2300      	movs	r3, #0
 8002f24:	2600      	movs	r6, #0
 8002f26:	e7d5      	b.n	8002ed4 <__aeabi_f2d+0x20>
 8002f28:	2600      	movs	r6, #0
 8002f2a:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <__aeabi_f2d+0x8c>)
 8002f2c:	e7d2      	b.n	8002ed4 <__aeabi_f2d+0x20>
 8002f2e:	0003      	movs	r3, r0
 8002f30:	002a      	movs	r2, r5
 8002f32:	3b0b      	subs	r3, #11
 8002f34:	409a      	lsls	r2, r3
 8002f36:	2500      	movs	r5, #0
 8002f38:	e7e3      	b.n	8002f02 <__aeabi_f2d+0x4e>
 8002f3a:	46c0      	nop			; (mov r8, r8)
 8002f3c:	00000389 	.word	0x00000389
 8002f40:	000007ff 	.word	0x000007ff

08002f44 <__aeabi_d2f>:
 8002f44:	0002      	movs	r2, r0
 8002f46:	004b      	lsls	r3, r1, #1
 8002f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f4a:	0308      	lsls	r0, r1, #12
 8002f4c:	0d5b      	lsrs	r3, r3, #21
 8002f4e:	4e3d      	ldr	r6, [pc, #244]	; (8003044 <__aeabi_d2f+0x100>)
 8002f50:	0fcc      	lsrs	r4, r1, #31
 8002f52:	0a40      	lsrs	r0, r0, #9
 8002f54:	0f51      	lsrs	r1, r2, #29
 8002f56:	1c5f      	adds	r7, r3, #1
 8002f58:	4308      	orrs	r0, r1
 8002f5a:	00d5      	lsls	r5, r2, #3
 8002f5c:	4237      	tst	r7, r6
 8002f5e:	d00a      	beq.n	8002f76 <__aeabi_d2f+0x32>
 8002f60:	4939      	ldr	r1, [pc, #228]	; (8003048 <__aeabi_d2f+0x104>)
 8002f62:	185e      	adds	r6, r3, r1
 8002f64:	2efe      	cmp	r6, #254	; 0xfe
 8002f66:	dd16      	ble.n	8002f96 <__aeabi_d2f+0x52>
 8002f68:	23ff      	movs	r3, #255	; 0xff
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	05db      	lsls	r3, r3, #23
 8002f6e:	430b      	orrs	r3, r1
 8002f70:	07e0      	lsls	r0, r4, #31
 8002f72:	4318      	orrs	r0, r3
 8002f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d106      	bne.n	8002f88 <__aeabi_d2f+0x44>
 8002f7a:	4328      	orrs	r0, r5
 8002f7c:	d027      	beq.n	8002fce <__aeabi_d2f+0x8a>
 8002f7e:	2105      	movs	r1, #5
 8002f80:	0189      	lsls	r1, r1, #6
 8002f82:	0a49      	lsrs	r1, r1, #9
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	e7f1      	b.n	8002f6c <__aeabi_d2f+0x28>
 8002f88:	4305      	orrs	r5, r0
 8002f8a:	d0ed      	beq.n	8002f68 <__aeabi_d2f+0x24>
 8002f8c:	2180      	movs	r1, #128	; 0x80
 8002f8e:	03c9      	lsls	r1, r1, #15
 8002f90:	23ff      	movs	r3, #255	; 0xff
 8002f92:	4301      	orrs	r1, r0
 8002f94:	e7ea      	b.n	8002f6c <__aeabi_d2f+0x28>
 8002f96:	2e00      	cmp	r6, #0
 8002f98:	dd1c      	ble.n	8002fd4 <__aeabi_d2f+0x90>
 8002f9a:	0192      	lsls	r2, r2, #6
 8002f9c:	0011      	movs	r1, r2
 8002f9e:	1e4a      	subs	r2, r1, #1
 8002fa0:	4191      	sbcs	r1, r2
 8002fa2:	00c0      	lsls	r0, r0, #3
 8002fa4:	0f6d      	lsrs	r5, r5, #29
 8002fa6:	4301      	orrs	r1, r0
 8002fa8:	4329      	orrs	r1, r5
 8002faa:	074b      	lsls	r3, r1, #29
 8002fac:	d048      	beq.n	8003040 <__aeabi_d2f+0xfc>
 8002fae:	230f      	movs	r3, #15
 8002fb0:	400b      	ands	r3, r1
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d000      	beq.n	8002fb8 <__aeabi_d2f+0x74>
 8002fb6:	3104      	adds	r1, #4
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	04db      	lsls	r3, r3, #19
 8002fbc:	400b      	ands	r3, r1
 8002fbe:	d03f      	beq.n	8003040 <__aeabi_d2f+0xfc>
 8002fc0:	1c72      	adds	r2, r6, #1
 8002fc2:	2efe      	cmp	r6, #254	; 0xfe
 8002fc4:	d0d0      	beq.n	8002f68 <__aeabi_d2f+0x24>
 8002fc6:	0189      	lsls	r1, r1, #6
 8002fc8:	0a49      	lsrs	r1, r1, #9
 8002fca:	b2d3      	uxtb	r3, r2
 8002fcc:	e7ce      	b.n	8002f6c <__aeabi_d2f+0x28>
 8002fce:	2300      	movs	r3, #0
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	e7cb      	b.n	8002f6c <__aeabi_d2f+0x28>
 8002fd4:	0032      	movs	r2, r6
 8002fd6:	3217      	adds	r2, #23
 8002fd8:	db22      	blt.n	8003020 <__aeabi_d2f+0xdc>
 8002fda:	2180      	movs	r1, #128	; 0x80
 8002fdc:	221e      	movs	r2, #30
 8002fde:	0409      	lsls	r1, r1, #16
 8002fe0:	4308      	orrs	r0, r1
 8002fe2:	1b92      	subs	r2, r2, r6
 8002fe4:	2a1f      	cmp	r2, #31
 8002fe6:	dd1d      	ble.n	8003024 <__aeabi_d2f+0xe0>
 8002fe8:	2102      	movs	r1, #2
 8002fea:	4249      	negs	r1, r1
 8002fec:	1b8e      	subs	r6, r1, r6
 8002fee:	0001      	movs	r1, r0
 8002ff0:	40f1      	lsrs	r1, r6
 8002ff2:	000e      	movs	r6, r1
 8002ff4:	2a20      	cmp	r2, #32
 8002ff6:	d004      	beq.n	8003002 <__aeabi_d2f+0xbe>
 8002ff8:	4a14      	ldr	r2, [pc, #80]	; (800304c <__aeabi_d2f+0x108>)
 8002ffa:	4694      	mov	ip, r2
 8002ffc:	4463      	add	r3, ip
 8002ffe:	4098      	lsls	r0, r3
 8003000:	4305      	orrs	r5, r0
 8003002:	0029      	movs	r1, r5
 8003004:	1e4d      	subs	r5, r1, #1
 8003006:	41a9      	sbcs	r1, r5
 8003008:	4331      	orrs	r1, r6
 800300a:	2600      	movs	r6, #0
 800300c:	074b      	lsls	r3, r1, #29
 800300e:	d1ce      	bne.n	8002fae <__aeabi_d2f+0x6a>
 8003010:	2080      	movs	r0, #128	; 0x80
 8003012:	000b      	movs	r3, r1
 8003014:	04c0      	lsls	r0, r0, #19
 8003016:	2201      	movs	r2, #1
 8003018:	4003      	ands	r3, r0
 800301a:	4201      	tst	r1, r0
 800301c:	d1d3      	bne.n	8002fc6 <__aeabi_d2f+0x82>
 800301e:	e7af      	b.n	8002f80 <__aeabi_d2f+0x3c>
 8003020:	2300      	movs	r3, #0
 8003022:	e7ac      	b.n	8002f7e <__aeabi_d2f+0x3a>
 8003024:	490a      	ldr	r1, [pc, #40]	; (8003050 <__aeabi_d2f+0x10c>)
 8003026:	468c      	mov	ip, r1
 8003028:	0029      	movs	r1, r5
 800302a:	4463      	add	r3, ip
 800302c:	40d1      	lsrs	r1, r2
 800302e:	409d      	lsls	r5, r3
 8003030:	000a      	movs	r2, r1
 8003032:	0029      	movs	r1, r5
 8003034:	4098      	lsls	r0, r3
 8003036:	1e4d      	subs	r5, r1, #1
 8003038:	41a9      	sbcs	r1, r5
 800303a:	4301      	orrs	r1, r0
 800303c:	4311      	orrs	r1, r2
 800303e:	e7e4      	b.n	800300a <__aeabi_d2f+0xc6>
 8003040:	0033      	movs	r3, r6
 8003042:	e79d      	b.n	8002f80 <__aeabi_d2f+0x3c>
 8003044:	000007fe 	.word	0x000007fe
 8003048:	fffffc80 	.word	0xfffffc80
 800304c:	fffffca2 	.word	0xfffffca2
 8003050:	fffffc82 	.word	0xfffffc82

08003054 <__clzsi2>:
 8003054:	211c      	movs	r1, #28
 8003056:	2301      	movs	r3, #1
 8003058:	041b      	lsls	r3, r3, #16
 800305a:	4298      	cmp	r0, r3
 800305c:	d301      	bcc.n	8003062 <__clzsi2+0xe>
 800305e:	0c00      	lsrs	r0, r0, #16
 8003060:	3910      	subs	r1, #16
 8003062:	0a1b      	lsrs	r3, r3, #8
 8003064:	4298      	cmp	r0, r3
 8003066:	d301      	bcc.n	800306c <__clzsi2+0x18>
 8003068:	0a00      	lsrs	r0, r0, #8
 800306a:	3908      	subs	r1, #8
 800306c:	091b      	lsrs	r3, r3, #4
 800306e:	4298      	cmp	r0, r3
 8003070:	d301      	bcc.n	8003076 <__clzsi2+0x22>
 8003072:	0900      	lsrs	r0, r0, #4
 8003074:	3904      	subs	r1, #4
 8003076:	a202      	add	r2, pc, #8	; (adr r2, 8003080 <__clzsi2+0x2c>)
 8003078:	5c10      	ldrb	r0, [r2, r0]
 800307a:	1840      	adds	r0, r0, r1
 800307c:	4770      	bx	lr
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	02020304 	.word	0x02020304
 8003084:	01010101 	.word	0x01010101
	...

08003090 <__clzdi2>:
 8003090:	b510      	push	{r4, lr}
 8003092:	2900      	cmp	r1, #0
 8003094:	d103      	bne.n	800309e <__clzdi2+0xe>
 8003096:	f7ff ffdd 	bl	8003054 <__clzsi2>
 800309a:	3020      	adds	r0, #32
 800309c:	e002      	b.n	80030a4 <__clzdi2+0x14>
 800309e:	1c08      	adds	r0, r1, #0
 80030a0:	f7ff ffd8 	bl	8003054 <__clzsi2>
 80030a4:	bd10      	pop	{r4, pc}
 80030a6:	46c0      	nop			; (mov r8, r8)

080030a8 <__divdi3>:
 80030a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030aa:	4657      	mov	r7, sl
 80030ac:	464e      	mov	r6, r9
 80030ae:	4645      	mov	r5, r8
 80030b0:	46de      	mov	lr, fp
 80030b2:	b5e0      	push	{r5, r6, r7, lr}
 80030b4:	000f      	movs	r7, r1
 80030b6:	0019      	movs	r1, r3
 80030b8:	2300      	movs	r3, #0
 80030ba:	0006      	movs	r6, r0
 80030bc:	4698      	mov	r8, r3
 80030be:	0010      	movs	r0, r2
 80030c0:	b083      	sub	sp, #12
 80030c2:	2f00      	cmp	r7, #0
 80030c4:	da07      	bge.n	80030d6 <__divdi3+0x2e>
 80030c6:	0033      	movs	r3, r6
 80030c8:	003c      	movs	r4, r7
 80030ca:	2700      	movs	r7, #0
 80030cc:	425e      	negs	r6, r3
 80030ce:	41a7      	sbcs	r7, r4
 80030d0:	2301      	movs	r3, #1
 80030d2:	425b      	negs	r3, r3
 80030d4:	4698      	mov	r8, r3
 80030d6:	2900      	cmp	r1, #0
 80030d8:	da07      	bge.n	80030ea <__divdi3+0x42>
 80030da:	4643      	mov	r3, r8
 80030dc:	43db      	mvns	r3, r3
 80030de:	000c      	movs	r4, r1
 80030e0:	4698      	mov	r8, r3
 80030e2:	0003      	movs	r3, r0
 80030e4:	2100      	movs	r1, #0
 80030e6:	4258      	negs	r0, r3
 80030e8:	41a1      	sbcs	r1, r4
 80030ea:	0034      	movs	r4, r6
 80030ec:	003d      	movs	r5, r7
 80030ee:	4682      	mov	sl, r0
 80030f0:	4689      	mov	r9, r1
 80030f2:	42b9      	cmp	r1, r7
 80030f4:	d86a      	bhi.n	80031cc <__divdi3+0x124>
 80030f6:	d067      	beq.n	80031c8 <__divdi3+0x120>
 80030f8:	4649      	mov	r1, r9
 80030fa:	4650      	mov	r0, sl
 80030fc:	f7ff ffc8 	bl	8003090 <__clzdi2>
 8003100:	4683      	mov	fp, r0
 8003102:	0039      	movs	r1, r7
 8003104:	0030      	movs	r0, r6
 8003106:	f7ff ffc3 	bl	8003090 <__clzdi2>
 800310a:	465b      	mov	r3, fp
 800310c:	1a1b      	subs	r3, r3, r0
 800310e:	469c      	mov	ip, r3
 8003110:	3b20      	subs	r3, #32
 8003112:	469b      	mov	fp, r3
 8003114:	d46b      	bmi.n	80031ee <__divdi3+0x146>
 8003116:	4658      	mov	r0, fp
 8003118:	4651      	mov	r1, sl
 800311a:	4081      	lsls	r1, r0
 800311c:	4660      	mov	r0, ip
 800311e:	000b      	movs	r3, r1
 8003120:	4651      	mov	r1, sl
 8003122:	4081      	lsls	r1, r0
 8003124:	000a      	movs	r2, r1
 8003126:	42bb      	cmp	r3, r7
 8003128:	d900      	bls.n	800312c <__divdi3+0x84>
 800312a:	e072      	b.n	8003212 <__divdi3+0x16a>
 800312c:	42bb      	cmp	r3, r7
 800312e:	d100      	bne.n	8003132 <__divdi3+0x8a>
 8003130:	e079      	b.n	8003226 <__divdi3+0x17e>
 8003132:	0034      	movs	r4, r6
 8003134:	003d      	movs	r5, r7
 8003136:	4659      	mov	r1, fp
 8003138:	1aa4      	subs	r4, r4, r2
 800313a:	419d      	sbcs	r5, r3
 800313c:	2900      	cmp	r1, #0
 800313e:	da00      	bge.n	8003142 <__divdi3+0x9a>
 8003140:	e074      	b.n	800322c <__divdi3+0x184>
 8003142:	2100      	movs	r1, #0
 8003144:	2000      	movs	r0, #0
 8003146:	2601      	movs	r6, #1
 8003148:	9000      	str	r0, [sp, #0]
 800314a:	9101      	str	r1, [sp, #4]
 800314c:	4659      	mov	r1, fp
 800314e:	408e      	lsls	r6, r1
 8003150:	9601      	str	r6, [sp, #4]
 8003152:	4661      	mov	r1, ip
 8003154:	2601      	movs	r6, #1
 8003156:	408e      	lsls	r6, r1
 8003158:	4661      	mov	r1, ip
 800315a:	9600      	str	r6, [sp, #0]
 800315c:	2900      	cmp	r1, #0
 800315e:	d05f      	beq.n	8003220 <__divdi3+0x178>
 8003160:	07d9      	lsls	r1, r3, #31
 8003162:	0856      	lsrs	r6, r2, #1
 8003164:	430e      	orrs	r6, r1
 8003166:	085f      	lsrs	r7, r3, #1
 8003168:	4661      	mov	r1, ip
 800316a:	2201      	movs	r2, #1
 800316c:	2300      	movs	r3, #0
 800316e:	e00c      	b.n	800318a <__divdi3+0xe2>
 8003170:	42af      	cmp	r7, r5
 8003172:	d101      	bne.n	8003178 <__divdi3+0xd0>
 8003174:	42a6      	cmp	r6, r4
 8003176:	d80a      	bhi.n	800318e <__divdi3+0xe6>
 8003178:	1ba4      	subs	r4, r4, r6
 800317a:	41bd      	sbcs	r5, r7
 800317c:	1924      	adds	r4, r4, r4
 800317e:	416d      	adcs	r5, r5
 8003180:	3901      	subs	r1, #1
 8003182:	18a4      	adds	r4, r4, r2
 8003184:	415d      	adcs	r5, r3
 8003186:	2900      	cmp	r1, #0
 8003188:	d006      	beq.n	8003198 <__divdi3+0xf0>
 800318a:	42af      	cmp	r7, r5
 800318c:	d9f0      	bls.n	8003170 <__divdi3+0xc8>
 800318e:	3901      	subs	r1, #1
 8003190:	1924      	adds	r4, r4, r4
 8003192:	416d      	adcs	r5, r5
 8003194:	2900      	cmp	r1, #0
 8003196:	d1f8      	bne.n	800318a <__divdi3+0xe2>
 8003198:	9800      	ldr	r0, [sp, #0]
 800319a:	9901      	ldr	r1, [sp, #4]
 800319c:	465b      	mov	r3, fp
 800319e:	1900      	adds	r0, r0, r4
 80031a0:	4169      	adcs	r1, r5
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	db4d      	blt.n	8003242 <__divdi3+0x19a>
 80031a6:	002e      	movs	r6, r5
 80031a8:	002c      	movs	r4, r5
 80031aa:	40de      	lsrs	r6, r3
 80031ac:	4663      	mov	r3, ip
 80031ae:	40dc      	lsrs	r4, r3
 80031b0:	465b      	mov	r3, fp
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	db55      	blt.n	8003262 <__divdi3+0x1ba>
 80031b6:	0034      	movs	r4, r6
 80031b8:	409c      	lsls	r4, r3
 80031ba:	0023      	movs	r3, r4
 80031bc:	4664      	mov	r4, ip
 80031be:	40a6      	lsls	r6, r4
 80031c0:	0032      	movs	r2, r6
 80031c2:	1a80      	subs	r0, r0, r2
 80031c4:	4199      	sbcs	r1, r3
 80031c6:	e003      	b.n	80031d0 <__divdi3+0x128>
 80031c8:	42b0      	cmp	r0, r6
 80031ca:	d995      	bls.n	80030f8 <__divdi3+0x50>
 80031cc:	2000      	movs	r0, #0
 80031ce:	2100      	movs	r1, #0
 80031d0:	4643      	mov	r3, r8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d004      	beq.n	80031e0 <__divdi3+0x138>
 80031d6:	0003      	movs	r3, r0
 80031d8:	000c      	movs	r4, r1
 80031da:	2100      	movs	r1, #0
 80031dc:	4258      	negs	r0, r3
 80031de:	41a1      	sbcs	r1, r4
 80031e0:	b003      	add	sp, #12
 80031e2:	bcf0      	pop	{r4, r5, r6, r7}
 80031e4:	46bb      	mov	fp, r7
 80031e6:	46b2      	mov	sl, r6
 80031e8:	46a9      	mov	r9, r5
 80031ea:	46a0      	mov	r8, r4
 80031ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ee:	4662      	mov	r2, ip
 80031f0:	4648      	mov	r0, r9
 80031f2:	2320      	movs	r3, #32
 80031f4:	4651      	mov	r1, sl
 80031f6:	4090      	lsls	r0, r2
 80031f8:	1a9b      	subs	r3, r3, r2
 80031fa:	40d9      	lsrs	r1, r3
 80031fc:	0003      	movs	r3, r0
 80031fe:	9100      	str	r1, [sp, #0]
 8003200:	9900      	ldr	r1, [sp, #0]
 8003202:	4660      	mov	r0, ip
 8003204:	430b      	orrs	r3, r1
 8003206:	4651      	mov	r1, sl
 8003208:	4081      	lsls	r1, r0
 800320a:	000a      	movs	r2, r1
 800320c:	42bb      	cmp	r3, r7
 800320e:	d800      	bhi.n	8003212 <__divdi3+0x16a>
 8003210:	e78c      	b.n	800312c <__divdi3+0x84>
 8003212:	2100      	movs	r1, #0
 8003214:	2000      	movs	r0, #0
 8003216:	9000      	str	r0, [sp, #0]
 8003218:	9101      	str	r1, [sp, #4]
 800321a:	4661      	mov	r1, ip
 800321c:	2900      	cmp	r1, #0
 800321e:	d19f      	bne.n	8003160 <__divdi3+0xb8>
 8003220:	9800      	ldr	r0, [sp, #0]
 8003222:	9901      	ldr	r1, [sp, #4]
 8003224:	e7d4      	b.n	80031d0 <__divdi3+0x128>
 8003226:	42b1      	cmp	r1, r6
 8003228:	d8f3      	bhi.n	8003212 <__divdi3+0x16a>
 800322a:	e782      	b.n	8003132 <__divdi3+0x8a>
 800322c:	4661      	mov	r1, ip
 800322e:	2620      	movs	r6, #32
 8003230:	2701      	movs	r7, #1
 8003232:	1a76      	subs	r6, r6, r1
 8003234:	2000      	movs	r0, #0
 8003236:	2100      	movs	r1, #0
 8003238:	40f7      	lsrs	r7, r6
 800323a:	9000      	str	r0, [sp, #0]
 800323c:	9101      	str	r1, [sp, #4]
 800323e:	9701      	str	r7, [sp, #4]
 8003240:	e787      	b.n	8003152 <__divdi3+0xaa>
 8003242:	4662      	mov	r2, ip
 8003244:	2320      	movs	r3, #32
 8003246:	1a9b      	subs	r3, r3, r2
 8003248:	002a      	movs	r2, r5
 800324a:	409a      	lsls	r2, r3
 800324c:	0026      	movs	r6, r4
 800324e:	0013      	movs	r3, r2
 8003250:	4662      	mov	r2, ip
 8003252:	40d6      	lsrs	r6, r2
 8003254:	002c      	movs	r4, r5
 8003256:	431e      	orrs	r6, r3
 8003258:	4663      	mov	r3, ip
 800325a:	40dc      	lsrs	r4, r3
 800325c:	465b      	mov	r3, fp
 800325e:	2b00      	cmp	r3, #0
 8003260:	daa9      	bge.n	80031b6 <__divdi3+0x10e>
 8003262:	4662      	mov	r2, ip
 8003264:	2320      	movs	r3, #32
 8003266:	0035      	movs	r5, r6
 8003268:	4094      	lsls	r4, r2
 800326a:	1a9b      	subs	r3, r3, r2
 800326c:	40dd      	lsrs	r5, r3
 800326e:	0023      	movs	r3, r4
 8003270:	432b      	orrs	r3, r5
 8003272:	e7a3      	b.n	80031bc <__divdi3+0x114>

08003274 <minArr>:
*/
																															 
/* --- Used by FoundRoute: Find the index of the minimum module in dist that is still unvisited 
*/
uint8_t minArr(uint8_t* arr, uint8_t* Q)
{
 8003274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003276:	0005      	movs	r5, r0
	uint8_t smallest = 0xFF; uint8_t index = 0;

	/* Consider first element as smallest */
	if (!Q[0])						// Not visited yet
 8003278:	780b      	ldrb	r3, [r1, #0]
	uint8_t smallest = 0xFF; uint8_t index = 0;
 800327a:	24ff      	movs	r4, #255	; 0xff
	if (!Q[0])						// Not visited yet
 800327c:	2b00      	cmp	r3, #0
 800327e:	d100      	bne.n	8003282 <minArr+0xe>
		smallest = arr[0];
 8003280:	7804      	ldrb	r4, [r0, #0]

	for (int i=0 ; i<N ; i++) {
 8003282:	4b0a      	ldr	r3, [pc, #40]	; (80032ac <minArr+0x38>)
 8003284:	781e      	ldrb	r6, [r3, #0]
 8003286:	2e00      	cmp	r6, #0
 8003288:	dd0e      	ble.n	80032a8 <minArr+0x34>
 800328a:	2300      	movs	r3, #0
 800328c:	2000      	movs	r0, #0
 800328e:	e002      	b.n	8003296 <minArr+0x22>
 8003290:	3301      	adds	r3, #1
 8003292:	42b3      	cmp	r3, r6
 8003294:	da09      	bge.n	80032aa <minArr+0x36>
		if ((arr[i] < smallest) && !Q[i]) {
 8003296:	5cea      	ldrb	r2, [r5, r3]
 8003298:	42a2      	cmp	r2, r4
 800329a:	d2f9      	bcs.n	8003290 <minArr+0x1c>
 800329c:	5ccf      	ldrb	r7, [r1, r3]
 800329e:	2f00      	cmp	r7, #0
 80032a0:	d1f6      	bne.n	8003290 <minArr+0x1c>
			smallest = arr[i];
			index = i;
 80032a2:	b2d8      	uxtb	r0, r3
			smallest = arr[i];
 80032a4:	0014      	movs	r4, r2
 80032a6:	e7f3      	b.n	8003290 <minArr+0x1c>
	for (int i=0 ; i<N ; i++) {
 80032a8:	2000      	movs	r0, #0
		}
	}
	
	return index;
}
 80032aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032ac:	2000001c 	.word	0x2000001c

080032b0 <QnotEmpty>:
/*-----------------------------------------------------------*/

/* --- Used by FoundRoute: Check if Q is empty (all modules have been visited) 
*/
uint8_t QnotEmpty(uint8_t* Q)
{		
 80032b0:	b510      	push	{r4, lr}
 80032b2:	0001      	movs	r1, r0
	char temp = 1;

	for (int i=0 ; i<N ; i++) {
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <QnotEmpty+0x20>)
 80032b6:	781c      	ldrb	r4, [r3, #0]
 80032b8:	2c00      	cmp	r4, #0
 80032ba:	dd07      	ble.n	80032cc <QnotEmpty+0x1c>
 80032bc:	2300      	movs	r3, #0
	char temp = 1;
 80032be:	2001      	movs	r0, #1
		temp &= Q[i];
 80032c0:	5cca      	ldrb	r2, [r1, r3]
 80032c2:	4010      	ands	r0, r2
	for (int i=0 ; i<N ; i++) {
 80032c4:	3301      	adds	r3, #1
 80032c6:	42a3      	cmp	r3, r4
 80032c8:	dbfa      	blt.n	80032c0 <QnotEmpty+0x10>
	}	
	
	return temp;
}
 80032ca:	bd10      	pop	{r4, pc}
	char temp = 1;
 80032cc:	2001      	movs	r0, #1
 80032ce:	e7fc      	b.n	80032ca <QnotEmpty+0x1a>
 80032d0:	2000001c 	.word	0x2000001c

080032d4 <LoadROsnippets>:
/*-----------------------------------------------------------*/

/* --- Load Command Snippets stored in Flash RO --- 
*/
uint8_t LoadROsnippets(void)
{
 80032d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032d6:	46de      	mov	lr, fp
 80032d8:	4657      	mov	r7, sl
 80032da:	464e      	mov	r6, r9
 80032dc:	4645      	mov	r5, r8
 80032de:	b5e0      	push	{r5, r6, r7, lr}
	uint8_t i = 0;
	int currentAdd = RO_MID_ADDRESS;
	char *snipBuffer = (char *) malloc(cmdMAX_INPUT_SIZE);
 80032e0:	2032      	movs	r0, #50	; 0x32
 80032e2:	f010 ff07 	bl	80140f4 <malloc>
 80032e6:	4680      	mov	r8, r0
	if (snipBuffer == NULL)	return BOS_MEM_FULL;
 80032e8:	2800      	cmp	r0, #0
 80032ea:	d06c      	beq.n	80033c6 <LoadROsnippets+0xf2>
	
	// Exit if no recorded Snippets
	if (*(uint8_t *)currentAdd != 0xFE)	return BOS_ERROR;
 80032ec:	4b38      	ldr	r3, [pc, #224]	; (80033d0 <LoadROsnippets+0xfc>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2bfe      	cmp	r3, #254	; 0xfe
 80032f2:	d16a      	bne.n	80033ca <LoadROsnippets+0xf6>
 80032f4:	4b37      	ldr	r3, [pc, #220]	; (80033d4 <LoadROsnippets+0x100>)
 80032f6:	4699      	mov	r9, r3
	int currentAdd = RO_MID_ADDRESS;
 80032f8:	4c35      	ldr	r4, [pc, #212]	; (80033d0 <LoadROsnippets+0xfc>)
	for(uint8_t s=0 ; s<MAX_SNIPPETS ; s++)
	{
		// Load conditions starting at RO_MID_ADDRESS
		for(i=0 ; i<sizeof(snippet_t) ; i++)
			snipBuffer[i] = (*(__IO uint8_t*)(currentAdd++)); 
		memcpy( (uint8_t *)&snippets[s], (uint8_t *)&snipBuffer[1], sizeof(snippet_t));
 80032fa:	2301      	movs	r3, #1
 80032fc:	4443      	add	r3, r8
 80032fe:	469a      	mov	sl, r3
 8003300:	e026      	b.n	8003350 <LoadROsnippets+0x7c>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 8003302:	2500      	movs	r5, #0
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
		{
			snipBuffer[i] = *(uint8_t *)currentAdd;
			++currentAdd; ++i;
		}
		if (snipBuffer[i-1] != 0)		++i;	// String termination char was not recorded, then add one
 8003304:	4643      	mov	r3, r8
 8003306:	195b      	adds	r3, r3, r5
 8003308:	3b01      	subs	r3, #1
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d001      	beq.n	8003314 <LoadROsnippets+0x40>
 8003310:	3501      	adds	r5, #1
 8003312:	b2ed      	uxtb	r5, r5
		// Allocate buffer for the Snippet commands
		snippets[s].cmd = (char *) malloc(i);
 8003314:	0028      	movs	r0, r5
 8003316:	f010 feed 	bl	80140f4 <malloc>
 800331a:	465b      	mov	r3, fp
 800331c:	60d8      	str	r0, [r3, #12]
		if (snippets[s].cmd == NULL) {
 800331e:	2800      	cmp	r0, #0
 8003320:	d03d      	beq.n	800339e <LoadROsnippets+0xca>
			memset(&snippets[s], 0, sizeof(snippet_t) );
			free(snipBuffer);			
			return BOS_ERR_SNIP_MEM_FULL;
		} else {	
			// Copy the command
			memcpy(snippets[s].cmd, snipBuffer, i);
 8003322:	002a      	movs	r2, r5
 8003324:	4641      	mov	r1, r8
 8003326:	f011 f91b 	bl	8014560 <memcpy>
			++numOfRecordedSnippets;		// Record a successful Snippet
 800332a:	4b2b      	ldr	r3, [pc, #172]	; (80033d8 <LoadROsnippets+0x104>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	3301      	adds	r3, #1
 8003330:	4a29      	ldr	r2, [pc, #164]	; (80033d8 <LoadROsnippets+0x104>)
 8003332:	7013      	strb	r3, [r2, #0]
			memset(snipBuffer, 0, i);		
 8003334:	002a      	movs	r2, r5
 8003336:	2100      	movs	r1, #0
 8003338:	4640      	mov	r0, r8
 800333a:	f011 f91a 	bl	8014572 <memset>
		}
		// Exit if no more Snippets
		if (*(uint8_t *)currentAdd != 0xFE)	break;
 800333e:	783b      	ldrb	r3, [r7, #0]
 8003340:	2bfe      	cmp	r3, #254	; 0xfe
 8003342:	d136      	bne.n	80033b2 <LoadROsnippets+0xde>
	for(uint8_t s=0 ; s<MAX_SNIPPETS ; s++)
 8003344:	3bea      	subs	r3, #234	; 0xea
 8003346:	469c      	mov	ip, r3
 8003348:	44e1      	add	r9, ip
 800334a:	4b24      	ldr	r3, [pc, #144]	; (80033dc <LoadROsnippets+0x108>)
 800334c:	4599      	cmp	r9, r3
 800334e:	d030      	beq.n	80033b2 <LoadROsnippets+0xde>
		for(i=0 ; i<sizeof(snippet_t) ; i++)
 8003350:	0021      	movs	r1, r4
 8003352:	3114      	adds	r1, #20
{
 8003354:	0023      	movs	r3, r4
 8003356:	4642      	mov	r2, r8
 8003358:	1b16      	subs	r6, r2, r4
			snipBuffer[i] = (*(__IO uint8_t*)(currentAdd++)); 
 800335a:	781a      	ldrb	r2, [r3, #0]
 800335c:	54f2      	strb	r2, [r6, r3]
		for(i=0 ; i<sizeof(snippet_t) ; i++)
 800335e:	3301      	adds	r3, #1
 8003360:	428b      	cmp	r3, r1
 8003362:	d1fa      	bne.n	800335a <LoadROsnippets+0x86>
 8003364:	3414      	adds	r4, #20
		memcpy( (uint8_t *)&snippets[s], (uint8_t *)&snipBuffer[1], sizeof(snippet_t));
 8003366:	46cb      	mov	fp, r9
 8003368:	2214      	movs	r2, #20
 800336a:	4651      	mov	r1, sl
 800336c:	4648      	mov	r0, r9
 800336e:	f011 f8f7 	bl	8014560 <memcpy>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 8003372:	2214      	movs	r2, #20
 8003374:	2100      	movs	r1, #0
 8003376:	4640      	mov	r0, r8
 8003378:	f011 f8fb 	bl	8014572 <memset>
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
 800337c:	0027      	movs	r7, r4
 800337e:	7823      	ldrb	r3, [r4, #0]
 8003380:	2bfd      	cmp	r3, #253	; 0xfd
 8003382:	d8be      	bhi.n	8003302 <LoadROsnippets+0x2e>
		memset(snipBuffer, 0, sizeof(snippet_t)); i = 0;
 8003384:	2500      	movs	r5, #0
			snipBuffer[i] = *(uint8_t *)currentAdd;
 8003386:	3e14      	subs	r6, #20
 8003388:	5533      	strb	r3, [r6, r4]
			++currentAdd; ++i;
 800338a:	3401      	adds	r4, #1
 800338c:	3501      	adds	r5, #1
 800338e:	b2ed      	uxtb	r5, r5
		while (*(uint8_t *)currentAdd != 0xFE && *(uint8_t *)currentAdd != 0xFF && i<cmdMAX_INPUT_SIZE)
 8003390:	0027      	movs	r7, r4
 8003392:	7823      	ldrb	r3, [r4, #0]
 8003394:	2bfd      	cmp	r3, #253	; 0xfd
 8003396:	d8b5      	bhi.n	8003304 <LoadROsnippets+0x30>
 8003398:	2d32      	cmp	r5, #50	; 0x32
 800339a:	d1f5      	bne.n	8003388 <LoadROsnippets+0xb4>
 800339c:	e7b2      	b.n	8003304 <LoadROsnippets+0x30>
			memset(&snippets[s], 0, sizeof(snippet_t) );
 800339e:	2214      	movs	r2, #20
 80033a0:	2100      	movs	r1, #0
 80033a2:	4658      	mov	r0, fp
 80033a4:	f011 f8e5 	bl	8014572 <memset>
			free(snipBuffer);			
 80033a8:	4640      	mov	r0, r8
 80033aa:	f010 fead 	bl	8014108 <free>
			return BOS_ERR_SNIP_MEM_FULL;
 80033ae:	200e      	movs	r0, #14
 80033b0:	e003      	b.n	80033ba <LoadROsnippets+0xe6>
	}	
	
	free(snipBuffer);
 80033b2:	4640      	mov	r0, r8
 80033b4:	f010 fea8 	bl	8014108 <free>
	return BOS_OK;
 80033b8:	2000      	movs	r0, #0
}
 80033ba:	bcf0      	pop	{r4, r5, r6, r7}
 80033bc:	46bb      	mov	fp, r7
 80033be:	46b2      	mov	sl, r6
 80033c0:	46a9      	mov	r9, r5
 80033c2:	46a0      	mov	r8, r4
 80033c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (snipBuffer == NULL)	return BOS_MEM_FULL;
 80033c6:	20fb      	movs	r0, #251	; 0xfb
 80033c8:	e7f7      	b.n	80033ba <LoadROsnippets+0xe6>
	if (*(uint8_t *)currentAdd != 0xFE)	return BOS_ERROR;
 80033ca:	20ff      	movs	r0, #255	; 0xff
 80033cc:	e7f5      	b.n	80033ba <LoadROsnippets+0xe6>
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	0801dc00 	.word	0x0801dc00
 80033d4:	20006700 	.word	0x20006700
 80033d8:	20000f57 	.word	0x20000f57
 80033dc:	20006764 	.word	0x20006764

080033e0 <SaveEEportsDir>:


/* --- Save array ports directions in EEPROM --- 
*/
BOS_Status SaveEEportsDir(void)
{
 80033e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK; 
	
	for(uint8_t i=1 ; i<=N ; i++)
 80033e2:	4b0e      	ldr	r3, [pc, #56]	; (800341c <SaveEEportsDir+0x3c>)
 80033e4:	781d      	ldrb	r5, [r3, #0]
 80033e6:	2d00      	cmp	r5, #0
 80033e8:	d016      	beq.n	8003418 <SaveEEportsDir+0x38>
 80033ea:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 80033ec:	2500      	movs	r5, #0
	{
		if (arrayPortsDir[i-1])
 80033ee:	4f0c      	ldr	r7, [pc, #48]	; (8003420 <SaveEEportsDir+0x40>)
	for(uint8_t i=1 ; i<=N ; i++)
 80033f0:	001e      	movs	r6, r3
 80033f2:	e008      	b.n	8003406 <SaveEEportsDir+0x26>
			EE_WriteVariable(_EE_PORT_DIR_BASE+i-1, arrayPortsDir[i-1]);		
 80033f4:	1c60      	adds	r0, r4, #1
 80033f6:	f004 fb69 	bl	8007acc <EE_WriteVariable>
 80033fa:	e009      	b.n	8003410 <SaveEEportsDir+0x30>
	for(uint8_t i=1 ; i<=N ; i++)
 80033fc:	3401      	adds	r4, #1
 80033fe:	b2e4      	uxtb	r4, r4
 8003400:	7833      	ldrb	r3, [r6, #0]
 8003402:	42a3      	cmp	r3, r4
 8003404:	d308      	bcc.n	8003418 <SaveEEportsDir+0x38>
		if (arrayPortsDir[i-1])
 8003406:	1e63      	subs	r3, r4, #1
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	5bd9      	ldrh	r1, [r3, r7]
 800340c:	2900      	cmp	r1, #0
 800340e:	d1f1      	bne.n	80033f4 <SaveEEportsDir+0x14>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 8003410:	2c19      	cmp	r4, #25
 8003412:	d9f3      	bls.n	80033fc <SaveEEportsDir+0x1c>
			result = BOS_ERR_EEPROM;
 8003414:	250a      	movs	r5, #10
 8003416:	e7f1      	b.n	80033fc <SaveEEportsDir+0x1c>
	}
	
	return result;
}
 8003418:	0028      	movs	r0, r5
 800341a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800341c:	2000001c 	.word	0x2000001c
 8003420:	20006b38 	.word	0x20006b38

08003424 <ClearEEportsDir>:
/*-----------------------------------------------------------*/

/* --- Clear array ports directions in EEPROM --- 
*/
BOS_Status ClearEEportsDir(void)
{
 8003424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK; 
	
	memset(arrayPortsDir, 0, sizeof(arrayPortsDir));
 8003426:	2204      	movs	r2, #4
 8003428:	2100      	movs	r1, #0
 800342a:	4810      	ldr	r0, [pc, #64]	; (800346c <ClearEEportsDir+0x48>)
 800342c:	f011 f8a1 	bl	8014572 <memset>
	
	for(uint8_t i=1 ; i<=N ; i++)
 8003430:	4b0f      	ldr	r3, [pc, #60]	; (8003470 <ClearEEportsDir+0x4c>)
 8003432:	781d      	ldrb	r5, [r3, #0]
 8003434:	2d00      	cmp	r5, #0
 8003436:	d016      	beq.n	8003466 <ClearEEportsDir+0x42>
 8003438:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 800343a:	2500      	movs	r5, #0
	{
		if (arrayPortsDir[i-1])
 800343c:	4f0b      	ldr	r7, [pc, #44]	; (800346c <ClearEEportsDir+0x48>)
	for(uint8_t i=1 ; i<=N ; i++)
 800343e:	001e      	movs	r6, r3
 8003440:	e008      	b.n	8003454 <ClearEEportsDir+0x30>
			EE_WriteVariable(_EE_PORT_DIR_BASE+i-1, arrayPortsDir[i-1]);		
 8003442:	1c60      	adds	r0, r4, #1
 8003444:	f004 fb42 	bl	8007acc <EE_WriteVariable>
 8003448:	e009      	b.n	800345e <ClearEEportsDir+0x3a>
	for(uint8_t i=1 ; i<=N ; i++)
 800344a:	3401      	adds	r4, #1
 800344c:	b2e4      	uxtb	r4, r4
 800344e:	7833      	ldrb	r3, [r6, #0]
 8003450:	42a3      	cmp	r3, r4
 8003452:	d308      	bcc.n	8003466 <ClearEEportsDir+0x42>
		if (arrayPortsDir[i-1])
 8003454:	1e63      	subs	r3, r4, #1
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	5bd9      	ldrh	r1, [r3, r7]
 800345a:	2900      	cmp	r1, #0
 800345c:	d1f1      	bne.n	8003442 <ClearEEportsDir+0x1e>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 800345e:	2c19      	cmp	r4, #25
 8003460:	d9f3      	bls.n	800344a <ClearEEportsDir+0x26>
			result = BOS_ERR_EEPROM;
 8003462:	250a      	movs	r5, #10
 8003464:	e7f1      	b.n	800344a <ClearEEportsDir+0x26>
	}
	
	return result;
}
 8003466:	0028      	movs	r0, r5
 8003468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800346a:	46c0      	nop			; (mov r8, r8)
 800346c:	20006b38 	.word	0x20006b38
 8003470:	2000001c 	.word	0x2000001c

08003474 <LoadEEportsDir>:
/*-----------------------------------------------------------*/

/* --- Load array ports directions stored in EEPROM --- 
*/
BOS_Status LoadEEportsDir(void)
{
 8003474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	BOS_Status result = BOS_OK; 
	
	for(uint8_t i=1 ; i<=N ; i++)
 8003476:	4b0e      	ldr	r3, [pc, #56]	; (80034b0 <LoadEEportsDir+0x3c>)
 8003478:	781d      	ldrb	r5, [r3, #0]
 800347a:	2d00      	cmp	r5, #0
 800347c:	d016      	beq.n	80034ac <LoadEEportsDir+0x38>
	{
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 800347e:	490d      	ldr	r1, [pc, #52]	; (80034b4 <LoadEEportsDir+0x40>)
 8003480:	2002      	movs	r0, #2
 8003482:	f004 faf7 	bl	8007a74 <EE_ReadVariable>
	for(uint8_t i=1 ; i<=N ; i++)
 8003486:	2401      	movs	r4, #1
	BOS_Status result = BOS_OK; 
 8003488:	2500      	movs	r5, #0
	for(uint8_t i=1 ; i<=N ; i++)
 800348a:	4e09      	ldr	r6, [pc, #36]	; (80034b0 <LoadEEportsDir+0x3c>)
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 800348c:	4f09      	ldr	r7, [pc, #36]	; (80034b4 <LoadEEportsDir+0x40>)
	for(uint8_t i=1 ; i<=N ; i++)
 800348e:	3401      	adds	r4, #1
 8003490:	b2e4      	uxtb	r4, r4
 8003492:	7833      	ldrb	r3, [r6, #0]
 8003494:	42a3      	cmp	r3, r4
 8003496:	d309      	bcc.n	80034ac <LoadEEportsDir+0x38>
		EE_ReadVariable(_EE_PORT_DIR_BASE+i-1, &arrayPortsDir[i-1]);		
 8003498:	1e61      	subs	r1, r4, #1
 800349a:	0049      	lsls	r1, r1, #1
 800349c:	19c9      	adds	r1, r1, r7
 800349e:	1c60      	adds	r0, r4, #1
 80034a0:	f004 fae8 	bl	8007a74 <EE_ReadVariable>
		
		if ((i+_EE_PORT_DIR_BASE) >= _EE_ALIAS_BASE)
 80034a4:	2c19      	cmp	r4, #25
 80034a6:	d9f2      	bls.n	800348e <LoadEEportsDir+0x1a>
			result = BOS_ERR_EEPROM;
 80034a8:	250a      	movs	r5, #10
 80034aa:	e7f0      	b.n	800348e <LoadEEportsDir+0x1a>
	}
	
	return result;
}
 80034ac:	0028      	movs	r0, r5
 80034ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034b0:	2000001c 	.word	0x2000001c
 80034b4:	20006b38 	.word	0x20006b38

080034b8 <SaveEEalias>:
/*-----------------------------------------------------------*/

/* --- Save module alias in EEPROM --- 
*/
BOS_Status SaveEEalias(void)
{
 80034b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ba:	46de      	mov	lr, fp
 80034bc:	464f      	mov	r7, r9
 80034be:	4646      	mov	r6, r8
 80034c0:	b5c0      	push	{r6, r7, lr}
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0;
	
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 80034c2:	2500      	movs	r5, #0
	uint16_t add = 0, temp = 0;
 80034c4:	2300      	movs	r3, #0
 80034c6:	4699      	mov	r9, r3
	{
		if (moduleAlias[i][0]) 				
 80034c8:	4b1a      	ldr	r3, [pc, #104]	; (8003534 <SaveEEalias+0x7c>)
 80034ca:	469b      	mov	fp, r3
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 80034cc:	4f1a      	ldr	r7, [pc, #104]	; (8003538 <SaveEEalias+0x80>)
 80034ce:	e004      	b.n	80034da <SaveEEalias+0x22>
 80034d0:	3501      	adds	r5, #1
 80034d2:	b2ed      	uxtb	r5, r5
 80034d4:	783b      	ldrb	r3, [r7, #0]
 80034d6:	42ab      	cmp	r3, r5
 80034d8:	d325      	bcc.n	8003526 <SaveEEalias+0x6e>
		if (moduleAlias[i][0]) 				
 80034da:	00ab      	lsls	r3, r5, #2
 80034dc:	195b      	adds	r3, r3, r5
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	465a      	mov	r2, fp
 80034e2:	5c9b      	ldrb	r3, [r3, r2]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d0f3      	beq.n	80034d0 <SaveEEalias+0x18>
 80034e8:	00ae      	lsls	r6, r5, #2
 80034ea:	1976      	adds	r6, r6, r5
 80034ec:	0076      	lsls	r6, r6, #1
 80034ee:	4b11      	ldr	r3, [pc, #68]	; (8003534 <SaveEEalias+0x7c>)
 80034f0:	469c      	mov	ip, r3
 80034f2:	4466      	add	r6, ip
 80034f4:	464c      	mov	r4, r9
 80034f6:	341c      	adds	r4, #28
 80034f8:	b2a4      	uxth	r4, r4
 80034fa:	464b      	mov	r3, r9
 80034fc:	3321      	adds	r3, #33	; 0x21
 80034fe:	b29b      	uxth	r3, r3
 8003500:	4698      	mov	r8, r3
		{
			for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
			{
				temp = (uint16_t) (moduleAlias[i][j-1]<<8) + moduleAlias[i][j];
 8003502:	7833      	ldrb	r3, [r6, #0]
 8003504:	021b      	lsls	r3, r3, #8
 8003506:	7871      	ldrb	r1, [r6, #1]
 8003508:	18c9      	adds	r1, r1, r3
				EE_WriteVariable(_EE_ALIAS_BASE+add, temp);
 800350a:	b289      	uxth	r1, r1
 800350c:	0020      	movs	r0, r4
 800350e:	f004 fadd 	bl	8007acc <EE_WriteVariable>
			for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8003512:	3602      	adds	r6, #2
 8003514:	3401      	adds	r4, #1
 8003516:	b2a4      	uxth	r4, r4
 8003518:	45a0      	cmp	r8, r4
 800351a:	d1f2      	bne.n	8003502 <SaveEEalias+0x4a>
 800351c:	464b      	mov	r3, r9
 800351e:	3305      	adds	r3, #5
 8003520:	b29b      	uxth	r3, r3
 8003522:	4699      	mov	r9, r3
 8003524:	e7d4      	b.n	80034d0 <SaveEEalias+0x18>
			}
		}			
	}
	
	return result;
}
 8003526:	2000      	movs	r0, #0
 8003528:	bce0      	pop	{r5, r6, r7}
 800352a:	46bb      	mov	fp, r7
 800352c:	46b1      	mov	r9, r6
 800352e:	46a8      	mov	r8, r5
 8003530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003532:	46c0      	nop			; (mov r8, r8)
 8003534:	20000dd4 	.word	0x20000dd4
 8003538:	2000001c 	.word	0x2000001c

0800353c <LoadEEalias>:
/*-----------------------------------------------------------*/

/* --- Load module alias stored in EEPROM --- 
*/
BOS_Status LoadEEalias(void)
{
 800353c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800353e:	46de      	mov	lr, fp
 8003540:	4657      	mov	r7, sl
 8003542:	464e      	mov	r6, r9
 8003544:	4645      	mov	r5, r8
 8003546:	b5e0      	push	{r5, r6, r7, lr}
 8003548:	b083      	sub	sp, #12
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0;
 800354a:	466b      	mov	r3, sp
 800354c:	2200      	movs	r2, #0
 800354e:	80da      	strh	r2, [r3, #6]
 8003550:	2721      	movs	r7, #33	; 0x21
	
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 8003552:	2300      	movs	r3, #0
 8003554:	4698      	mov	r8, r3
 8003556:	4b1a      	ldr	r3, [pc, #104]	; (80035c0 <LoadEEalias+0x84>)
 8003558:	469b      	mov	fp, r3
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
			moduleAlias[i][j] = (uint8_t) temp;
			moduleAlias[i][j-1] = (uint8_t) (temp>>8);
			add++;			
		}
		moduleAlias[i][MaxLengthOfAlias] = '\0';
 800355a:	469a      	mov	sl, r3
 800355c:	e010      	b.n	8003580 <LoadEEalias+0x44>
 800355e:	464b      	mov	r3, r9
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	444b      	add	r3, r9
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	4453      	add	r3, sl
 8003568:	2200      	movs	r2, #0
 800356a:	725a      	strb	r2, [r3, #9]
	for(uint8_t i=0 ; i<=N ; i++)				// N+1 module aliases
 800356c:	4643      	mov	r3, r8
 800356e:	3301      	adds	r3, #1
 8003570:	b2db      	uxtb	r3, r3
 8003572:	4698      	mov	r8, r3
 8003574:	3705      	adds	r7, #5
 8003576:	b2bf      	uxth	r7, r7
 8003578:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <LoadEEalias+0x88>)
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	4543      	cmp	r3, r8
 800357e:	d317      	bcc.n	80035b0 <LoadEEalias+0x74>
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8003580:	1f7c      	subs	r4, r7, #5
 8003582:	b2a4      	uxth	r4, r4
 8003584:	4643      	mov	r3, r8
 8003586:	009d      	lsls	r5, r3, #2
 8003588:	4445      	add	r5, r8
 800358a:	006d      	lsls	r5, r5, #1
 800358c:	445d      	add	r5, fp
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
 800358e:	466b      	mov	r3, sp
 8003590:	1d9e      	adds	r6, r3, #6
			moduleAlias[i][j] = (uint8_t) temp;
 8003592:	46c1      	mov	r9, r8
			EE_ReadVariable(_EE_ALIAS_BASE+add, &temp);
 8003594:	0031      	movs	r1, r6
 8003596:	0020      	movs	r0, r4
 8003598:	f004 fa6c 	bl	8007a74 <EE_ReadVariable>
			moduleAlias[i][j] = (uint8_t) temp;
 800359c:	8833      	ldrh	r3, [r6, #0]
 800359e:	706b      	strb	r3, [r5, #1]
			moduleAlias[i][j-1] = (uint8_t) (temp>>8);
 80035a0:	0a1b      	lsrs	r3, r3, #8
 80035a2:	702b      	strb	r3, [r5, #0]
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 80035a4:	3401      	adds	r4, #1
 80035a6:	b2a4      	uxth	r4, r4
 80035a8:	3502      	adds	r5, #2
 80035aa:	42a7      	cmp	r7, r4
 80035ac:	d1f2      	bne.n	8003594 <LoadEEalias+0x58>
 80035ae:	e7d6      	b.n	800355e <LoadEEalias+0x22>
	}
	
	return result;
}
 80035b0:	2000      	movs	r0, #0
 80035b2:	b003      	add	sp, #12
 80035b4:	bcf0      	pop	{r4, r5, r6, r7}
 80035b6:	46bb      	mov	fp, r7
 80035b8:	46b2      	mov	sl, r6
 80035ba:	46a9      	mov	r9, r5
 80035bc:	46a0      	mov	r8, r4
 80035be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035c0:	20000dd4 	.word	0x20000dd4
 80035c4:	2000001c 	.word	0x2000001c

080035c8 <LoadEEgroup>:
/*-----------------------------------------------------------*/

/* --- Load module groups stored in EEPROM --- 
*/
BOS_Status LoadEEgroup(void)
{
 80035c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ca:	46d6      	mov	lr, sl
 80035cc:	464f      	mov	r7, r9
 80035ce:	4646      	mov	r6, r8
 80035d0:	b5c0      	push	{r6, r7, lr}
 80035d2:	b082      	sub	sp, #8
	BOS_Status result = BOS_OK; 
	uint16_t add = 0, temp = 0; uint8_t i=0;
 80035d4:	466b      	mov	r3, sp
 80035d6:	2200      	movs	r2, #0
 80035d8:	80da      	strh	r2, [r3, #6]
	
	/* Load group members */
	for(i=0 ; i<N ; i++)			// N modules
 80035da:	4b23      	ldr	r3, [pc, #140]	; (8003668 <LoadEEgroup+0xa0>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d01d      	beq.n	800361e <LoadEEgroup+0x56>
	uint16_t add = 0, temp = 0; uint8_t i=0;
 80035e2:	2400      	movs	r4, #0
	{
		EE_ReadVariable(_EE_GROUP_MODULES_BASE+add, &groupModules[i]);
 80035e4:	4e21      	ldr	r6, [pc, #132]	; (800366c <LoadEEgroup+0xa4>)
	for(i=0 ; i<N ; i++)			// N modules
 80035e6:	4d20      	ldr	r5, [pc, #128]	; (8003668 <LoadEEgroup+0xa0>)
		EE_ReadVariable(_EE_GROUP_MODULES_BASE+add, &groupModules[i]);
 80035e8:	b2e1      	uxtb	r1, r4
 80035ea:	0049      	lsls	r1, r1, #1
 80035ec:	1871      	adds	r1, r6, r1
 80035ee:	0020      	movs	r0, r4
 80035f0:	30cb      	adds	r0, #203	; 0xcb
 80035f2:	b280      	uxth	r0, r0
 80035f4:	f004 fa3e 	bl	8007a74 <EE_ReadVariable>
		add++;
 80035f8:	1c63      	adds	r3, r4, #1
 80035fa:	b29c      	uxth	r4, r3
	for(i=0 ; i<N ; i++)			// N modules
 80035fc:	782a      	ldrb	r2, [r5, #0]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	429a      	cmp	r2, r3
 8003602:	d8f1      	bhi.n	80035e8 <LoadEEgroup+0x20>
	}

	/* Load group alias */
	for(i=0 ; i<MaxNumOfGroups ; i++)		// MaxNumOfGroups group aliases
 8003604:	4b1a      	ldr	r3, [pc, #104]	; (8003670 <LoadEEgroup+0xa8>)
 8003606:	4699      	mov	r9, r3
 8003608:	0027      	movs	r7, r4
 800360a:	379e      	adds	r7, #158	; 0x9e
 800360c:	b2bf      	uxth	r7, r7
 800360e:	34d0      	adds	r4, #208	; 0xd0
 8003610:	b2a3      	uxth	r3, r4
 8003612:	4698      	mov	r8, r3
	{
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
		{
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE+add, &temp);
 8003614:	466b      	mov	r3, sp
 8003616:	1d9e      	adds	r6, r3, #6
			groupAlias[i][j] = (uint8_t) temp;
			groupAlias[i][j-1] = (uint8_t) (temp>>8);
			add++;			
		}
		groupAlias[i][MaxLengthOfAlias] = '\0';
 8003618:	2300      	movs	r3, #0
 800361a:	469a      	mov	sl, r3
 800361c:	e00b      	b.n	8003636 <LoadEEgroup+0x6e>
	uint16_t add = 0, temp = 0; uint8_t i=0;
 800361e:	2400      	movs	r4, #0
 8003620:	e7f0      	b.n	8003604 <LoadEEgroup+0x3c>
		groupAlias[i][MaxLengthOfAlias] = '\0';
 8003622:	464b      	mov	r3, r9
 8003624:	4652      	mov	r2, sl
 8003626:	725a      	strb	r2, [r3, #9]
	for(i=0 ; i<MaxNumOfGroups ; i++)		// MaxNumOfGroups group aliases
 8003628:	230a      	movs	r3, #10
 800362a:	469c      	mov	ip, r3
 800362c:	44e1      	add	r9, ip
 800362e:	3705      	adds	r7, #5
 8003630:	b2bf      	uxth	r7, r7
 8003632:	4547      	cmp	r7, r8
 8003634:	d010      	beq.n	8003658 <LoadEEgroup+0x90>
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 8003636:	1f7c      	subs	r4, r7, #5
 8003638:	b2a4      	uxth	r4, r4
	uint16_t add = 0, temp = 0; uint8_t i=0;
 800363a:	464d      	mov	r5, r9
			EE_ReadVariable(_EE_GROUP_ALIAS_BASE+add, &temp);
 800363c:	0031      	movs	r1, r6
 800363e:	0020      	movs	r0, r4
 8003640:	f004 fa18 	bl	8007a74 <EE_ReadVariable>
			groupAlias[i][j] = (uint8_t) temp;
 8003644:	8833      	ldrh	r3, [r6, #0]
 8003646:	706b      	strb	r3, [r5, #1]
			groupAlias[i][j-1] = (uint8_t) (temp>>8);
 8003648:	0a1b      	lsrs	r3, r3, #8
 800364a:	702b      	strb	r3, [r5, #0]
		for(uint8_t j=1 ; j<=MaxLengthOfAlias ; j+=2)
 800364c:	3401      	adds	r4, #1
 800364e:	b2a4      	uxth	r4, r4
 8003650:	3502      	adds	r5, #2
 8003652:	42bc      	cmp	r4, r7
 8003654:	d1f2      	bne.n	800363c <LoadEEgroup+0x74>
 8003656:	e7e4      	b.n	8003622 <LoadEEgroup+0x5a>
	}
	
	return result;
}
 8003658:	2000      	movs	r0, #0
 800365a:	b002      	add	sp, #8
 800365c:	bce0      	pop	{r5, r6, r7}
 800365e:	46ba      	mov	sl, r7
 8003660:	46b1      	mov	r9, r6
 8003662:	46a8      	mov	r8, r5
 8003664:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	2000001c 	.word	0x2000001c
 800366c:	20000d5c 	.word	0x20000d5c
 8003670:	20000cf8 	.word	0x20000cf8

08003674 <LoadEEstreams>:
/*-----------------------------------------------------------*/

/* --- Load module DMA streams --- 
*/
BOS_Status LoadEEstreams(void)
{
 8003674:	b570      	push	{r4, r5, r6, lr}
 8003676:	b084      	sub	sp, #16
	BOS_Status result = BOS_OK; 
	uint16_t temp1 = 0, temp2 = 0, status1 = 0, status2 = 0; 
 8003678:	210e      	movs	r1, #14
 800367a:	4469      	add	r1, sp
 800367c:	2300      	movs	r3, #0
 800367e:	800b      	strh	r3, [r1, #0]
 8003680:	aa03      	add	r2, sp, #12
 8003682:	8013      	strh	r3, [r2, #0]
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
	static uint8_t src1, dst1, src2, dst2, src3, dst3;
	
	/* Direction */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE, &temp1);
 8003684:	20e4      	movs	r0, #228	; 0xe4
 8003686:	f004 f9f5 	bl	8007a74 <EE_ReadVariable>
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 800368a:	2500      	movs	r5, #0
	if (!status1) {
 800368c:	2800      	cmp	r0, #0
 800368e:	d102      	bne.n	8003696 <LoadEEstreams+0x22>
		direction = (uint8_t) temp1;
 8003690:	230e      	movs	r3, #14
 8003692:	446b      	add	r3, sp
 8003694:	781d      	ldrb	r5, [r3, #0]
	}

	/* Count */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+1, &temp1);
 8003696:	210e      	movs	r1, #14
 8003698:	4469      	add	r1, sp
 800369a:	20e5      	movs	r0, #229	; 0xe5
 800369c:	f004 f9ea 	bl	8007a74 <EE_ReadVariable>
 80036a0:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE+2, &temp2);
 80036a2:	a903      	add	r1, sp, #12
 80036a4:	20e6      	movs	r0, #230	; 0xe6
 80036a6:	f004 f9e5 	bl	8007a74 <EE_ReadVariable>
	if (!status1 && !status2) {
 80036aa:	4304      	orrs	r4, r0
 80036ac:	b2a4      	uxth	r4, r4
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 80036ae:	2600      	movs	r6, #0
	if (!status1 && !status2) {
 80036b0:	2c00      	cmp	r4, #0
 80036b2:	d106      	bne.n	80036c2 <LoadEEstreams+0x4e>
		count = ( (uint32_t) temp1 << 16 ) + temp2;
 80036b4:	230e      	movs	r3, #14
 80036b6:	446b      	add	r3, sp
 80036b8:	881e      	ldrh	r6, [r3, #0]
 80036ba:	0436      	lsls	r6, r6, #16
 80036bc:	ab03      	add	r3, sp, #12
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	18f6      	adds	r6, r6, r3
	}
	
	/* Timeout */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+3, &temp1);
 80036c2:	210e      	movs	r1, #14
 80036c4:	4469      	add	r1, sp
 80036c6:	20e7      	movs	r0, #231	; 0xe7
 80036c8:	f004 f9d4 	bl	8007a74 <EE_ReadVariable>
 80036cc:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_DMA_STREAM_BASE+4, &temp2);
 80036ce:	a903      	add	r1, sp, #12
 80036d0:	20e8      	movs	r0, #232	; 0xe8
 80036d2:	f004 f9cf 	bl	8007a74 <EE_ReadVariable>
	if (!status1 && !status2) {
 80036d6:	4320      	orrs	r0, r4
 80036d8:	b280      	uxth	r0, r0
	uint8_t direction = 0; uint32_t count = 0, timeout = 0;
 80036da:	2400      	movs	r4, #0
	if (!status1 && !status2) {
 80036dc:	2800      	cmp	r0, #0
 80036de:	d106      	bne.n	80036ee <LoadEEstreams+0x7a>
		timeout = ( (uint32_t) temp1 << 16 ) + temp2;
 80036e0:	230e      	movs	r3, #14
 80036e2:	446b      	add	r3, sp
 80036e4:	881c      	ldrh	r4, [r3, #0]
 80036e6:	0424      	lsls	r4, r4, #16
 80036e8:	ab03      	add	r3, sp, #12
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	18e4      	adds	r4, r4, r3
	}
	
	/* src1 | dst1 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+5, &temp1);
 80036ee:	210e      	movs	r1, #14
 80036f0:	4469      	add	r1, sp
 80036f2:	20e9      	movs	r0, #233	; 0xe9
 80036f4:	f004 f9be 	bl	8007a74 <EE_ReadVariable>
	if (!status1) {
 80036f8:	2800      	cmp	r0, #0
 80036fa:	d107      	bne.n	800370c <LoadEEstreams+0x98>
		src1 = (uint8_t) (temp1 >> 8);
 80036fc:	230e      	movs	r3, #14
 80036fe:	446b      	add	r3, sp
 8003700:	881b      	ldrh	r3, [r3, #0]
 8003702:	0a19      	lsrs	r1, r3, #8
 8003704:	4a28      	ldr	r2, [pc, #160]	; (80037a8 <LoadEEstreams+0x134>)
 8003706:	7011      	strb	r1, [r2, #0]
		dst1 = (uint8_t) temp1;
 8003708:	4a28      	ldr	r2, [pc, #160]	; (80037ac <LoadEEstreams+0x138>)
 800370a:	7013      	strb	r3, [r2, #0]
	}
	
	/* src2 | dst2 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+6, &temp1);
 800370c:	210e      	movs	r1, #14
 800370e:	4469      	add	r1, sp
 8003710:	20ea      	movs	r0, #234	; 0xea
 8003712:	f004 f9af 	bl	8007a74 <EE_ReadVariable>
	if (!status1) {
 8003716:	2800      	cmp	r0, #0
 8003718:	d107      	bne.n	800372a <LoadEEstreams+0xb6>
		src2 = (uint8_t) (temp1 >> 8);
 800371a:	230e      	movs	r3, #14
 800371c:	446b      	add	r3, sp
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	0a19      	lsrs	r1, r3, #8
 8003722:	4a23      	ldr	r2, [pc, #140]	; (80037b0 <LoadEEstreams+0x13c>)
 8003724:	7011      	strb	r1, [r2, #0]
		dst2 = (uint8_t) temp1;	
 8003726:	4a23      	ldr	r2, [pc, #140]	; (80037b4 <LoadEEstreams+0x140>)
 8003728:	7013      	strb	r3, [r2, #0]
	}

	/* src3 | dst3 */
	status1 = EE_ReadVariable(_EE_DMA_STREAM_BASE+7, &temp1);
 800372a:	210e      	movs	r1, #14
 800372c:	4469      	add	r1, sp
 800372e:	20eb      	movs	r0, #235	; 0xeb
 8003730:	f004 f9a0 	bl	8007a74 <EE_ReadVariable>
	if (!status1) {
 8003734:	2800      	cmp	r0, #0
 8003736:	d107      	bne.n	8003748 <LoadEEstreams+0xd4>
		src3 = (uint8_t) (temp1 >> 8);
 8003738:	230e      	movs	r3, #14
 800373a:	446b      	add	r3, sp
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	0a19      	lsrs	r1, r3, #8
 8003740:	4a1d      	ldr	r2, [pc, #116]	; (80037b8 <LoadEEstreams+0x144>)
 8003742:	7011      	strb	r1, [r2, #0]
		dst3 = (uint8_t) temp1;
 8003744:	4a1d      	ldr	r2, [pc, #116]	; (80037bc <LoadEEstreams+0x148>)
 8003746:	7013      	strb	r3, [r2, #0]
	}
	
	/* Activate the DMA streams */
	if (src1 && dst1)
 8003748:	4b17      	ldr	r3, [pc, #92]	; (80037a8 <LoadEEstreams+0x134>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <LoadEEstreams+0xe4>
 8003750:	4a16      	ldr	r2, [pc, #88]	; (80037ac <LoadEEstreams+0x138>)
 8003752:	7812      	ldrb	r2, [r2, #0]
 8003754:	2a00      	cmp	r2, #0
 8003756:	d112      	bne.n	800377e <LoadEEstreams+0x10a>
		SetupDMAStreams(direction, count, timeout, src1, dst1);
	if (src2 && dst2)
 8003758:	4b15      	ldr	r3, [pc, #84]	; (80037b0 <LoadEEstreams+0x13c>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <LoadEEstreams+0xf4>
 8003760:	4a14      	ldr	r2, [pc, #80]	; (80037b4 <LoadEEstreams+0x140>)
 8003762:	7812      	ldrb	r2, [r2, #0]
 8003764:	2a00      	cmp	r2, #0
 8003766:	d111      	bne.n	800378c <LoadEEstreams+0x118>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
	if (src3 && dst3)
 8003768:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <LoadEEstreams+0x144>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <LoadEEstreams+0x104>
 8003770:	4a12      	ldr	r2, [pc, #72]	; (80037bc <LoadEEstreams+0x148>)
 8003772:	7812      	ldrb	r2, [r2, #0]
 8003774:	2a00      	cmp	r2, #0
 8003776:	d110      	bne.n	800379a <LoadEEstreams+0x126>
		SetupDMAStreams(direction, count, timeout, src3, dst3);
	
	return result;
}
 8003778:	2000      	movs	r0, #0
 800377a:	b004      	add	sp, #16
 800377c:	bd70      	pop	{r4, r5, r6, pc}
		SetupDMAStreams(direction, count, timeout, src1, dst1);
 800377e:	9200      	str	r2, [sp, #0]
 8003780:	0022      	movs	r2, r4
 8003782:	0031      	movs	r1, r6
 8003784:	0028      	movs	r0, r5
 8003786:	f005 fb87 	bl	8008e98 <SetupDMAStreams>
 800378a:	e7e5      	b.n	8003758 <LoadEEstreams+0xe4>
		SetupDMAStreams(direction, count, timeout, src2, dst2);
 800378c:	9200      	str	r2, [sp, #0]
 800378e:	0022      	movs	r2, r4
 8003790:	0031      	movs	r1, r6
 8003792:	0028      	movs	r0, r5
 8003794:	f005 fb80 	bl	8008e98 <SetupDMAStreams>
 8003798:	e7e6      	b.n	8003768 <LoadEEstreams+0xf4>
		SetupDMAStreams(direction, count, timeout, src3, dst3);
 800379a:	9200      	str	r2, [sp, #0]
 800379c:	0022      	movs	r2, r4
 800379e:	0031      	movs	r1, r6
 80037a0:	0028      	movs	r0, r5
 80037a2:	f005 fb79 	bl	8008e98 <SetupDMAStreams>
 80037a6:	e7e7      	b.n	8003778 <LoadEEstreams+0x104>
 80037a8:	20000e82 	.word	0x20000e82
 80037ac:	20000cf5 	.word	0x20000cf5
 80037b0:	20000e83 	.word	0x20000e83
 80037b4:	20000cf6 	.word	0x20000cf6
 80037b8:	20000e84 	.word	0x20000e84
 80037bc:	20000cf7 	.word	0x20000cf7

080037c0 <SaveEEstreams>:

/* --- Save DMA streams to emulated EEPROM. --- 
*/
BOS_Status SaveEEstreams(uint8_t direction, uint32_t count, uint32_t timeout, uint8_t src1, uint8_t dst1, uint8_t src2, \
	uint8_t dst2, uint8_t src3, uint8_t dst3)
{
 80037c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037c2:	46de      	mov	lr, fp
 80037c4:	4657      	mov	r7, sl
 80037c6:	464e      	mov	r6, r9
 80037c8:	4645      	mov	r5, r8
 80037ca:	b5e0      	push	{r5, r6, r7, lr}
 80037cc:	000f      	movs	r7, r1
 80037ce:	0016      	movs	r6, r2
 80037d0:	001c      	movs	r4, r3
 80037d2:	ab0a      	add	r3, sp, #40	; 0x28
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	469b      	mov	fp, r3
 80037d8:	ab0b      	add	r3, sp, #44	; 0x2c
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	469a      	mov	sl, r3
 80037de:	ab0c      	add	r3, sp, #48	; 0x30
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	4699      	mov	r9, r3
 80037e4:	ab0d      	add	r3, sp, #52	; 0x34
 80037e6:	781d      	ldrb	r5, [r3, #0]
 80037e8:	ab0e      	add	r3, sp, #56	; 0x38
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	4698      	mov	r8, r3
	BOS_Status result = BOS_OK; 
	
	EE_WriteVariable(_EE_DMA_STREAM_BASE, direction);			/* Direction */
 80037ee:	0001      	movs	r1, r0
 80037f0:	20e4      	movs	r0, #228	; 0xe4
 80037f2:	f004 f96b 	bl	8007acc <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+1, ( (uint16_t) (count >> 8)));				/* Count high half-word */
 80037f6:	0a39      	lsrs	r1, r7, #8
 80037f8:	b289      	uxth	r1, r1
 80037fa:	20e5      	movs	r0, #229	; 0xe5
 80037fc:	f004 f966 	bl	8007acc <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+2, ( (uint16_t) count));								/* Count low half-word */
 8003800:	b2b9      	uxth	r1, r7
 8003802:	20e6      	movs	r0, #230	; 0xe6
 8003804:	f004 f962 	bl	8007acc <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+3, ( (uint16_t) (timeout >> 8)));			/* Timeout high half-word */
 8003808:	0a31      	lsrs	r1, r6, #8
 800380a:	b289      	uxth	r1, r1
 800380c:	20e7      	movs	r0, #231	; 0xe7
 800380e:	f004 f95d 	bl	8007acc <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+4, ( (uint16_t) timeout));							/* Timeout low half-word */
 8003812:	b2b1      	uxth	r1, r6
 8003814:	20e8      	movs	r0, #232	; 0xe8
 8003816:	f004 f959 	bl	8007acc <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+5, ( (uint16_t) (src1 << 8) ) + (uint16_t) dst1);			/* src1 | dst1 */
 800381a:	0224      	lsls	r4, r4, #8
 800381c:	445c      	add	r4, fp
 800381e:	b2a1      	uxth	r1, r4
 8003820:	20e9      	movs	r0, #233	; 0xe9
 8003822:	f004 f953 	bl	8007acc <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+6, ( (uint16_t) (src2 << 8) ) + (uint16_t) dst2);			/* src1 | dst1 */
 8003826:	4653      	mov	r3, sl
 8003828:	0219      	lsls	r1, r3, #8
 800382a:	4449      	add	r1, r9
 800382c:	b289      	uxth	r1, r1
 800382e:	20ea      	movs	r0, #234	; 0xea
 8003830:	f004 f94c 	bl	8007acc <EE_WriteVariable>
	EE_WriteVariable(_EE_DMA_STREAM_BASE+7, ( (uint16_t) (src3 << 8) ) + (uint16_t) dst3);			/* src1 | dst1 */
 8003834:	022d      	lsls	r5, r5, #8
 8003836:	4445      	add	r5, r8
 8003838:	b2a9      	uxth	r1, r5
 800383a:	20eb      	movs	r0, #235	; 0xeb
 800383c:	f004 f946 	bl	8007acc <EE_WriteVariable>
	
	return result;
}
 8003840:	2000      	movs	r0, #0
 8003842:	bcf0      	pop	{r4, r5, r6, r7}
 8003844:	46bb      	mov	fp, r7
 8003846:	46b2      	mov	sl, r6
 8003848:	46a9      	mov	r9, r5
 800384a:	46a0      	mov	r8, r4
 800384c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003850 <LoadEEparams>:
/*-----------------------------------------------------------*/	

/* --- Load module parameters from emulated EEPROM. If erased, loade defualts --- 
*/
BOS_Status LoadEEparams(void)
{
 8003850:	b510      	push	{r4, lr}
 8003852:	b082      	sub	sp, #8
	BOS_Status result = BOS_OK; 
	uint16_t temp1, temp2, status1, status2; 
	
	/* Read params base - BOS response and BOS trace */
	status1 = EE_ReadVariable(_EE_PARAMS_BASE, &temp1);
 8003854:	208a      	movs	r0, #138	; 0x8a
 8003856:	466b      	mov	r3, sp
 8003858:	1d99      	adds	r1, r3, #6
 800385a:	0040      	lsls	r0, r0, #1
 800385c:	f004 f90a 	bl	8007a74 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if (!status1) {
 8003860:	2800      	cmp	r0, #0
 8003862:	d000      	beq.n	8003866 <LoadEEparams+0x16>
 8003864:	e064      	b.n	8003930 <LoadEEparams+0xe0>
		BOS.response = (uint8_t)temp1;
 8003866:	466b      	mov	r3, sp
 8003868:	3306      	adds	r3, #6
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	4a46      	ldr	r2, [pc, #280]	; (8003988 <LoadEEparams+0x138>)
 800386e:	7193      	strb	r3, [r2, #6]
		BOS.trace = (traceOptions_t)(temp1>>8);
 8003870:	0a1b      	lsrs	r3, r3, #8
 8003872:	71d3      	strb	r3, [r2, #7]
		BOS.response = BOS_default.response;
		BOS.trace = BOS_default.trace;
	}
		
	/* Read Button debounce */
	status1 = EE_ReadVariable(_EE_PARAMS_DEBOUNCE, &temp1);
 8003874:	2016      	movs	r0, #22
 8003876:	466b      	mov	r3, sp
 8003878:	1d99      	adds	r1, r3, #6
 800387a:	30ff      	adds	r0, #255	; 0xff
 800387c:	f004 f8fa 	bl	8007a74 <EE_ReadVariable>
	if (!status1) 
 8003880:	2800      	cmp	r0, #0
 8003882:	d15c      	bne.n	800393e <LoadEEparams+0xee>
		BOS.buttons.debounce = temp1;
 8003884:	466b      	mov	r3, sp
 8003886:	88da      	ldrh	r2, [r3, #6]
 8003888:	4b3f      	ldr	r3, [pc, #252]	; (8003988 <LoadEEparams+0x138>)
 800388a:	801a      	strh	r2, [r3, #0]
	else
		BOS.buttons.debounce = BOS_default.buttons.debounce;

	/* Read Button single click time */
	status1 = EE_ReadVariable(_EE_PARAMS_SINGLE_CLICK, &temp1);
 800388c:	208b      	movs	r0, #139	; 0x8b
 800388e:	466b      	mov	r3, sp
 8003890:	1d99      	adds	r1, r3, #6
 8003892:	0040      	lsls	r0, r0, #1
 8003894:	f004 f8ee 	bl	8007a74 <EE_ReadVariable>
	if (!status1) 
 8003898:	2800      	cmp	r0, #0
 800389a:	d153      	bne.n	8003944 <LoadEEparams+0xf4>
		BOS.buttons.singleClickTime = temp1;
 800389c:	466b      	mov	r3, sp
 800389e:	88da      	ldrh	r2, [r3, #6]
 80038a0:	4b39      	ldr	r3, [pc, #228]	; (8003988 <LoadEEparams+0x138>)
 80038a2:	805a      	strh	r2, [r3, #2]
	else
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;	

	/* Read Button double click time (min and max inter-click) */
	status1 = EE_ReadVariable(_EE_PARAMS_DBL_CLICK, &temp1);
 80038a4:	2018      	movs	r0, #24
 80038a6:	466b      	mov	r3, sp
 80038a8:	1d99      	adds	r1, r3, #6
 80038aa:	30ff      	adds	r0, #255	; 0xff
 80038ac:	f004 f8e2 	bl	8007a74 <EE_ReadVariable>
	if (!status1) {
 80038b0:	2800      	cmp	r0, #0
 80038b2:	d14a      	bne.n	800394a <LoadEEparams+0xfa>
		BOS.buttons.minInterClickTime = (uint8_t)temp1;
 80038b4:	466b      	mov	r3, sp
 80038b6:	3306      	adds	r3, #6
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	4a33      	ldr	r2, [pc, #204]	; (8003988 <LoadEEparams+0x138>)
 80038bc:	7113      	strb	r3, [r2, #4]
		BOS.buttons.maxInterClickTime = (uint8_t)(temp1>>8);
 80038be:	0a1b      	lsrs	r3, r3, #8
 80038c0:	7153      	strb	r3, [r2, #5]
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;	
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;	
	}
	
	/* Read CLI baudrate */
	status1 = EE_ReadVariable(_EE_CLI_BAUD, &temp1);
 80038c2:	208c      	movs	r0, #140	; 0x8c
 80038c4:	466b      	mov	r3, sp
 80038c6:	1d99      	adds	r1, r3, #6
 80038c8:	0040      	lsls	r0, r0, #1
 80038ca:	f004 f8d3 	bl	8007a74 <EE_ReadVariable>
 80038ce:	0004      	movs	r4, r0
	status2 = EE_ReadVariable(_EE_CLI_BAUD+1, &temp2);
 80038d0:	201a      	movs	r0, #26
 80038d2:	a901      	add	r1, sp, #4
 80038d4:	30ff      	adds	r0, #255	; 0xff
 80038d6:	f004 f8cd 	bl	8007a74 <EE_ReadVariable>
	if (!status1 && !status2) 
 80038da:	4304      	orrs	r4, r0
 80038dc:	b2a4      	uxth	r4, r4
 80038de:	2c00      	cmp	r4, #0
 80038e0:	d13a      	bne.n	8003958 <LoadEEparams+0x108>
	{
		BOS.clibaudrate = (uint32_t)temp1 | (((uint32_t)temp2)<<16);
 80038e2:	ab01      	add	r3, sp, #4
 80038e4:	881b      	ldrh	r3, [r3, #0]
 80038e6:	041b      	lsls	r3, r3, #16
 80038e8:	466a      	mov	r2, sp
 80038ea:	3206      	adds	r2, #6
 80038ec:	8812      	ldrh	r2, [r2, #0]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	4a25      	ldr	r2, [pc, #148]	; (8003988 <LoadEEparams+0x138>)
 80038f2:	6093      	str	r3, [r2, #8]
		BOS.clibaudrate = CLI_BAUDRATE_1;
	else
		BOS.clibaudrate = BOS_default.clibaudrate;
	
	/* Read RTC hourformat and daylightsaving */
	status1 = EE_ReadVariable(_EE_PARAMS_RTC, &temp1);
 80038f4:	208d      	movs	r0, #141	; 0x8d
 80038f6:	466b      	mov	r3, sp
 80038f8:	1d99      	adds	r1, r3, #6
 80038fa:	0040      	lsls	r0, r0, #1
 80038fc:	f004 f8ba 	bl	8007a74 <EE_ReadVariable>
	if (!status1) {
 8003900:	2800      	cmp	r0, #0
 8003902:	d137      	bne.n	8003974 <LoadEEparams+0x124>
		BOS.daylightsaving = (int8_t)temp1;
 8003904:	466b      	mov	r3, sp
 8003906:	3306      	adds	r3, #6
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	4a1f      	ldr	r2, [pc, #124]	; (8003988 <LoadEEparams+0x138>)
 800390c:	7313      	strb	r3, [r2, #12]
		BOS.hourformat = (uint8_t)(temp1>>8);
 800390e:	0a1b      	lsrs	r3, r3, #8
 8003910:	7353      	strb	r3, [r2, #13]
		BOS.hourformat = 24;
		BOS.daylightsaving = DAYLIGHT_NONE;
	}		
	
	/* Read disableCLI */
	status1 = EE_ReadVariable(_EE_PARAMS_DISABLE_CLI, &temp1);
 8003912:	201c      	movs	r0, #28
 8003914:	466b      	mov	r3, sp
 8003916:	1d99      	adds	r1, r3, #6
 8003918:	30ff      	adds	r0, #255	; 0xff
 800391a:	f004 f8ab 	bl	8007a74 <EE_ReadVariable>
	/* Found the variable (EEPROM is not cleared) */
	if (!status1) {
 800391e:	2800      	cmp	r0, #0
 8003920:	d12e      	bne.n	8003980 <LoadEEparams+0x130>
		BOS.disableCLI = (uint8_t)temp1;
 8003922:	466b      	mov	r3, sp
 8003924:	799a      	ldrb	r2, [r3, #6]
 8003926:	4b18      	ldr	r3, [pc, #96]	; (8003988 <LoadEEparams+0x138>)
 8003928:	76da      	strb	r2, [r3, #27]
	} else {
		BOS.disableCLI = BOS_default.disableCLI;
	}
	
	return result;
}
 800392a:	2000      	movs	r0, #0
 800392c:	b002      	add	sp, #8
 800392e:	bd10      	pop	{r4, pc}
		BOS.response = BOS_default.response;
 8003930:	4b15      	ldr	r3, [pc, #84]	; (8003988 <LoadEEparams+0x138>)
 8003932:	4a16      	ldr	r2, [pc, #88]	; (800398c <LoadEEparams+0x13c>)
 8003934:	7991      	ldrb	r1, [r2, #6]
 8003936:	7199      	strb	r1, [r3, #6]
		BOS.trace = BOS_default.trace;
 8003938:	79d2      	ldrb	r2, [r2, #7]
 800393a:	71da      	strb	r2, [r3, #7]
 800393c:	e79a      	b.n	8003874 <LoadEEparams+0x24>
		BOS.buttons.debounce = BOS_default.buttons.debounce;
 800393e:	4b13      	ldr	r3, [pc, #76]	; (800398c <LoadEEparams+0x13c>)
 8003940:	881a      	ldrh	r2, [r3, #0]
 8003942:	e7a1      	b.n	8003888 <LoadEEparams+0x38>
		BOS.buttons.singleClickTime = BOS_default.buttons.singleClickTime;	
 8003944:	4b11      	ldr	r3, [pc, #68]	; (800398c <LoadEEparams+0x13c>)
 8003946:	885a      	ldrh	r2, [r3, #2]
 8003948:	e7aa      	b.n	80038a0 <LoadEEparams+0x50>
		BOS.buttons.minInterClickTime = BOS_default.buttons.minInterClickTime;	
 800394a:	4b0f      	ldr	r3, [pc, #60]	; (8003988 <LoadEEparams+0x138>)
 800394c:	4a0f      	ldr	r2, [pc, #60]	; (800398c <LoadEEparams+0x13c>)
 800394e:	7911      	ldrb	r1, [r2, #4]
 8003950:	7119      	strb	r1, [r3, #4]
		BOS.buttons.maxInterClickTime = BOS_default.buttons.maxInterClickTime;	
 8003952:	7952      	ldrb	r2, [r2, #5]
 8003954:	715a      	strb	r2, [r3, #5]
 8003956:	e7b4      	b.n	80038c2 <LoadEEparams+0x72>
	else if(CLI_LOW_Baudrate_Flag)
 8003958:	4b0d      	ldr	r3, [pc, #52]	; (8003990 <LoadEEparams+0x140>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d004      	beq.n	800396a <LoadEEparams+0x11a>
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003960:	4b09      	ldr	r3, [pc, #36]	; (8003988 <LoadEEparams+0x138>)
 8003962:	22e1      	movs	r2, #225	; 0xe1
 8003964:	0252      	lsls	r2, r2, #9
 8003966:	609a      	str	r2, [r3, #8]
 8003968:	e7c4      	b.n	80038f4 <LoadEEparams+0xa4>
		BOS.clibaudrate = BOS_default.clibaudrate;
 800396a:	4b08      	ldr	r3, [pc, #32]	; (800398c <LoadEEparams+0x13c>)
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	4b06      	ldr	r3, [pc, #24]	; (8003988 <LoadEEparams+0x138>)
 8003970:	609a      	str	r2, [r3, #8]
 8003972:	e7bf      	b.n	80038f4 <LoadEEparams+0xa4>
		BOS.hourformat = 24;
 8003974:	4b04      	ldr	r3, [pc, #16]	; (8003988 <LoadEEparams+0x138>)
 8003976:	2218      	movs	r2, #24
 8003978:	735a      	strb	r2, [r3, #13]
		BOS.daylightsaving = DAYLIGHT_NONE;
 800397a:	2200      	movs	r2, #0
 800397c:	731a      	strb	r2, [r3, #12]
 800397e:	e7c8      	b.n	8003912 <LoadEEparams+0xc2>
		BOS.disableCLI = BOS_default.disableCLI;
 8003980:	4b02      	ldr	r3, [pc, #8]	; (800398c <LoadEEparams+0x13c>)
 8003982:	7eda      	ldrb	r2, [r3, #27]
 8003984:	e7cf      	b.n	8003926 <LoadEEparams+0xd6>
 8003986:	46c0      	nop			; (mov r8, r8)
 8003988:	200066e4 	.word	0x200066e4
 800398c:	20000000 	.word	0x20000000
 8003990:	20000b66 	.word	0x20000b66

08003994 <SaveEEparams>:
/*-----------------------------------------------------------*/	

/* --- Save module parameters to emulated EEPROM. --- 
*/
BOS_Status SaveEEparams(void)
{
 8003994:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK; 
	
	/* Save params base - BOS response & BOS trace */
	EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<5) | (uint16_t)BOS.response);
 8003996:	4c1a      	ldr	r4, [pc, #104]	; (8003a00 <SaveEEparams+0x6c>)
 8003998:	79e3      	ldrb	r3, [r4, #7]
 800399a:	015b      	lsls	r3, r3, #5
 800399c:	79a1      	ldrb	r1, [r4, #6]
 800399e:	4319      	orrs	r1, r3
 80039a0:	208a      	movs	r0, #138	; 0x8a
 80039a2:	0040      	lsls	r0, r0, #1
 80039a4:	f004 f892 	bl	8007acc <EE_WriteVariable>
		
	/* Save Button debounce */
	EE_WriteVariable(_EE_PARAMS_DEBOUNCE, BOS.buttons.debounce);
 80039a8:	8821      	ldrh	r1, [r4, #0]
 80039aa:	2016      	movs	r0, #22
 80039ac:	30ff      	adds	r0, #255	; 0xff
 80039ae:	f004 f88d 	bl	8007acc <EE_WriteVariable>

	/* Save Button single click time */
	EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, BOS.buttons.singleClickTime);
 80039b2:	8861      	ldrh	r1, [r4, #2]
 80039b4:	208b      	movs	r0, #139	; 0x8b
 80039b6:	0040      	lsls	r0, r0, #1
 80039b8:	f004 f888 	bl	8007acc <EE_WriteVariable>

	/* Save Button double click time (min and max inter-click) */
	EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.daylightsaving);
 80039bc:	7963      	ldrb	r3, [r4, #5]
 80039be:	021b      	lsls	r3, r3, #8
 80039c0:	7b21      	ldrb	r1, [r4, #12]
 80039c2:	4319      	orrs	r1, r3
 80039c4:	2018      	movs	r0, #24
 80039c6:	30ff      	adds	r0, #255	; 0xff
 80039c8:	f004 f880 	bl	8007acc <EE_WriteVariable>

	/* Save CLI baudrate */
	EE_WriteVariable(_EE_CLI_BAUD, (uint16_t)BOS.clibaudrate);
 80039cc:	8921      	ldrh	r1, [r4, #8]
 80039ce:	208c      	movs	r0, #140	; 0x8c
 80039d0:	0040      	lsls	r0, r0, #1
 80039d2:	f004 f87b 	bl	8007acc <EE_WriteVariable>
	EE_WriteVariable(_EE_CLI_BAUD+1, (uint16_t)(BOS.clibaudrate>>16));
 80039d6:	8961      	ldrh	r1, [r4, #10]
 80039d8:	201a      	movs	r0, #26
 80039da:	30ff      	adds	r0, #255	; 0xff
 80039dc:	f004 f876 	bl	8007acc <EE_WriteVariable>
	
	/* Save RTC hourformat and daylightsaving */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 80039e0:	7b63      	ldrb	r3, [r4, #13]
 80039e2:	021b      	lsls	r3, r3, #8
 80039e4:	7921      	ldrb	r1, [r4, #4]
 80039e6:	4319      	orrs	r1, r3
 80039e8:	208d      	movs	r0, #141	; 0x8d
 80039ea:	0040      	lsls	r0, r0, #1
 80039ec:	f004 f86e 	bl	8007acc <EE_WriteVariable>

	/* Save disableCLI */
	EE_WriteVariable(_EE_PARAMS_DISABLE_CLI, (uint16_t)BOS.disableCLI);
 80039f0:	7ee1      	ldrb	r1, [r4, #27]
 80039f2:	201c      	movs	r0, #28
 80039f4:	30ff      	adds	r0, #255	; 0xff
 80039f6:	f004 f869 	bl	8007acc <EE_WriteVariable>
	
	return result;
}
 80039fa:	2000      	movs	r0, #0
 80039fc:	bd10      	pop	{r4, pc}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	200066e4 	.word	0x200066e4

08003a04 <LoadEEbuttons>:
/*-----------------------------------------------------------*/	

/* --- Load button definitions and events from EEPROM --- 
*/
BOS_Status LoadEEbuttons(void)
{
 8003a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a06:	46ce      	mov	lr, r9
 8003a08:	4647      	mov	r7, r8
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b089      	sub	sp, #36	; 0x24
	BOS_Status result = BOS_OK; 
	uint16_t temp16 = 0, status1 = 0; 
 8003a0e:	231e      	movs	r3, #30
 8003a10:	446b      	add	r3, sp
 8003a12:	2200      	movs	r2, #0
 8003a14:	801a      	strh	r2, [r3, #0]
	uint8_t temp8 = 0;
	
	for(uint8_t i=0 ; i<=NumOfPorts ; i++)
 8003a16:	4e36      	ldr	r6, [pc, #216]	; (8003af0 <LoadEEbuttons+0xec>)
	uint16_t temp16 = 0, status1 = 0; 
 8003a18:	24ec      	movs	r4, #236	; 0xec
 8003a1a:	2501      	movs	r5, #1
 8003a1c:	270f      	movs	r7, #15
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+3, &temp16);
				button[i+1].pressedX3Sec = (uint8_t)(temp16 >> 8);
				button[i+1].releasedY3Sec = (uint8_t)temp16;
				/* Setup the button and its events */
				AddPortButton(button[i+1].type, i+1);
				SetButtonEvents(i+1, (button[i+1].events & BUTTON_EVENT_CLICKED), ((button[i+1].events & BUTTON_EVENT_DBL_CLICKED)>>1), button[i+1].pressedX1Sec,\
 8003a1e:	2301      	movs	r3, #1
 8003a20:	4698      	mov	r8, r3
 8003a22:	e04c      	b.n	8003abe <LoadEEbuttons+0xba>
				button[i+1].type = temp8 & 0x0F;
 8003a24:	72b2      	strb	r2, [r6, #10]
				button[i+1].events = (uint8_t)temp16;
 8003a26:	7473      	strb	r3, [r6, #17]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+1, &temp16);
 8003a28:	00a8      	lsls	r0, r5, #2
 8003a2a:	b283      	uxth	r3, r0
 8003a2c:	4699      	mov	r9, r3
 8003a2e:	0018      	movs	r0, r3
 8003a30:	30e9      	adds	r0, #233	; 0xe9
 8003a32:	b280      	uxth	r0, r0
 8003a34:	231e      	movs	r3, #30
 8003a36:	446b      	add	r3, sp
 8003a38:	0019      	movs	r1, r3
 8003a3a:	f004 f81b 	bl	8007a74 <EE_ReadVariable>
				button[i+1].pressedX1Sec = (uint8_t)(temp16 >> 8);
 8003a3e:	466b      	mov	r3, sp
 8003a40:	8bdb      	ldrh	r3, [r3, #30]
 8003a42:	0a1a      	lsrs	r2, r3, #8
 8003a44:	72f2      	strb	r2, [r6, #11]
				button[i+1].releasedY1Sec = (uint8_t)temp16;
 8003a46:	73b3      	strb	r3, [r6, #14]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+2, &temp16);
 8003a48:	4648      	mov	r0, r9
 8003a4a:	30ea      	adds	r0, #234	; 0xea
 8003a4c:	b280      	uxth	r0, r0
 8003a4e:	231e      	movs	r3, #30
 8003a50:	446b      	add	r3, sp
 8003a52:	0019      	movs	r1, r3
 8003a54:	f004 f80e 	bl	8007a74 <EE_ReadVariable>
				button[i+1].pressedX2Sec = (uint8_t)(temp16 >> 8);
 8003a58:	466b      	mov	r3, sp
 8003a5a:	8bdb      	ldrh	r3, [r3, #30]
 8003a5c:	0a1a      	lsrs	r2, r3, #8
 8003a5e:	7332      	strb	r2, [r6, #12]
				button[i+1].releasedY2Sec = (uint8_t)temp16;
 8003a60:	73f3      	strb	r3, [r6, #15]
				EE_ReadVariable(_EE_BUTTON_BASE+4*(i)+3, &temp16);
 8003a62:	4648      	mov	r0, r9
 8003a64:	30eb      	adds	r0, #235	; 0xeb
 8003a66:	b280      	uxth	r0, r0
 8003a68:	231e      	movs	r3, #30
 8003a6a:	446b      	add	r3, sp
 8003a6c:	0019      	movs	r1, r3
 8003a6e:	f004 f801 	bl	8007a74 <EE_ReadVariable>
				button[i+1].pressedX3Sec = (uint8_t)(temp16 >> 8);
 8003a72:	466b      	mov	r3, sp
 8003a74:	8bdb      	ldrh	r3, [r3, #30]
 8003a76:	0a1a      	lsrs	r2, r3, #8
 8003a78:	7372      	strb	r2, [r6, #13]
				button[i+1].releasedY3Sec = (uint8_t)temp16;
 8003a7a:	7433      	strb	r3, [r6, #16]
				AddPortButton(button[i+1].type, i+1);
 8003a7c:	b2eb      	uxtb	r3, r5
 8003a7e:	7ab0      	ldrb	r0, [r6, #10]
 8003a80:	4699      	mov	r9, r3
 8003a82:	0019      	movs	r1, r3
 8003a84:	f004 ff2a 	bl	80088dc <AddPortButton>
				SetButtonEvents(i+1, (button[i+1].events & BUTTON_EVENT_CLICKED), ((button[i+1].events & BUTTON_EVENT_DBL_CLICKED)>>1), button[i+1].pressedX1Sec,\
 8003a88:	7c71      	ldrb	r1, [r6, #17]
 8003a8a:	7af3      	ldrb	r3, [r6, #11]
 8003a8c:	104a      	asrs	r2, r1, #1
 8003a8e:	4640      	mov	r0, r8
 8003a90:	4002      	ands	r2, r0
 8003a92:	4001      	ands	r1, r0
 8003a94:	2000      	movs	r0, #0
 8003a96:	9005      	str	r0, [sp, #20]
 8003a98:	7c30      	ldrb	r0, [r6, #16]
 8003a9a:	9004      	str	r0, [sp, #16]
 8003a9c:	7bf0      	ldrb	r0, [r6, #15]
 8003a9e:	9003      	str	r0, [sp, #12]
 8003aa0:	7bb0      	ldrb	r0, [r6, #14]
 8003aa2:	9002      	str	r0, [sp, #8]
 8003aa4:	7b70      	ldrb	r0, [r6, #13]
 8003aa6:	9001      	str	r0, [sp, #4]
 8003aa8:	7b30      	ldrb	r0, [r6, #12]
 8003aaa:	9000      	str	r0, [sp, #0]
 8003aac:	4648      	mov	r0, r9
 8003aae:	f005 f82f 	bl	8008b10 <SetButtonEvents>
	for(uint8_t i=0 ; i<=NumOfPorts ; i++)
 8003ab2:	3501      	adds	r5, #1
 8003ab4:	3404      	adds	r4, #4
 8003ab6:	b2a4      	uxth	r4, r4
 8003ab8:	3609      	adds	r6, #9
 8003aba:	2d08      	cmp	r5, #8
 8003abc:	d012      	beq.n	8003ae4 <LoadEEbuttons+0xe0>
		status1 = EE_ReadVariable(_EE_BUTTON_BASE+4*(i), &temp16);
 8003abe:	231e      	movs	r3, #30
 8003ac0:	446b      	add	r3, sp
 8003ac2:	0019      	movs	r1, r3
 8003ac4:	0020      	movs	r0, r4
 8003ac6:	f003 ffd5 	bl	8007a74 <EE_ReadVariable>
		if(!status1)																												// This variable exists
 8003aca:	2800      	cmp	r0, #0
 8003acc:	d1f1      	bne.n	8003ab2 <LoadEEbuttons+0xae>
			temp8 = (uint8_t)(temp16 >> 8);
 8003ace:	466b      	mov	r3, sp
 8003ad0:	8bdb      	ldrh	r3, [r3, #30]
 8003ad2:	0a19      	lsrs	r1, r3, #8
			if ( ((temp8 >> 4) == i+1) && ((temp8 & 0x0F) != NONE) )					// This is same port and button type is not none
 8003ad4:	0b1a      	lsrs	r2, r3, #12
 8003ad6:	42aa      	cmp	r2, r5
 8003ad8:	d1eb      	bne.n	8003ab2 <LoadEEbuttons+0xae>
 8003ada:	003a      	movs	r2, r7
 8003adc:	400a      	ands	r2, r1
 8003ade:	420f      	tst	r7, r1
 8003ae0:	d0e7      	beq.n	8003ab2 <LoadEEbuttons+0xae>
 8003ae2:	e79f      	b.n	8003a24 <LoadEEbuttons+0x20>
			}
		}
	}
	
	return result;
}
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	b009      	add	sp, #36	; 0x24
 8003ae8:	bcc0      	pop	{r6, r7}
 8003aea:	46b9      	mov	r9, r7
 8003aec:	46b0      	mov	r8, r6
 8003aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003af0:	20001240 	.word	0x20001240

08003af4 <LoadEEvars>:
{
 8003af4:	b510      	push	{r4, lr}
	LoadEEportsDir();
 8003af6:	f7ff fcbd 	bl	8003474 <LoadEEportsDir>
	LoadEEalias();
 8003afa:	f7ff fd1f 	bl	800353c <LoadEEalias>
	LoadEEgroup();
 8003afe:	f7ff fd63 	bl	80035c8 <LoadEEgroup>
	LoadEEstreams();
 8003b02:	f7ff fdb7 	bl	8003674 <LoadEEstreams>
	LoadEEparams();	
 8003b06:	f7ff fea3 	bl	8003850 <LoadEEparams>
	LoadEEbuttons();	
 8003b0a:	f7ff ff7b 	bl	8003a04 <LoadEEbuttons>
	LoadROsnippets();
 8003b0e:	f7ff fbe1 	bl	80032d4 <LoadROsnippets>
}
 8003b12:	bd10      	pop	{r4, pc}

08003b14 <IsLowerCLIbaud>:

/* --- Check if booting into lower CLI baudrate:
				- Connect P1 TXD and P2 RXD to boot CLI at 115200
*/
uint8_t IsLowerCLIbaud(void)
{
 8003b14:	b530      	push	{r4, r5, lr}
 8003b16:	b08f      	sub	sp, #60	; 0x3c
	uint16_t P1_TX_Pin, P1_RX_Pin, P2_TX_Pin, P2_RX_Pin;
	
	/* -- Setup GPIOs -- */
	
	/* Get GPIOs */
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 8003b18:	ab04      	add	r3, sp, #16
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	ab07      	add	r3, sp, #28
 8003b1e:	2212      	movs	r2, #18
 8003b20:	446a      	add	r2, sp
 8003b22:	a908      	add	r1, sp, #32
 8003b24:	2001      	movs	r0, #1
 8003b26:	f009 fc6f 	bl	800d408 <GetPortGPIOs>
	GetPortGPIOs(P2, &P2_TX_Port, &P2_TX_Pin, &P2_RX_Port, &P2_RX_Pin);
 8003b2a:	ac03      	add	r4, sp, #12
 8003b2c:	9400      	str	r4, [sp, #0]
 8003b2e:	ab05      	add	r3, sp, #20
 8003b30:	220e      	movs	r2, #14
 8003b32:	446a      	add	r2, sp
 8003b34:	a906      	add	r1, sp, #24
 8003b36:	2002      	movs	r0, #2
 8003b38:	f009 fc66 	bl	800d408 <GetPortGPIOs>
	
	/* P1 TXD */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	930a      	str	r3, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b40:	2500      	movs	r5, #0
 8003b42:	950b      	str	r5, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 8003b44:	466b      	mov	r3, sp
 8003b46:	8a5b      	ldrh	r3, [r3, #18]
 8003b48:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 8003b4a:	a909      	add	r1, sp, #36	; 0x24
 8003b4c:	9808      	ldr	r0, [sp, #32]
 8003b4e:	f00e f83b 	bl	8011bc8 <HAL_GPIO_Init>
	
	/* P2 RXD */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b52:	950a      	str	r5, [sp, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 8003b54:	2302      	movs	r3, #2
 8003b56:	930b      	str	r3, [sp, #44]	; 0x2c
	GPIO_InitStruct.Pin = P2_RX_Pin;
 8003b58:	8823      	ldrh	r3, [r4, #0]
 8003b5a:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)P2_RX_Port, &GPIO_InitStruct);	
 8003b5c:	a909      	add	r1, sp, #36	; 0x24
 8003b5e:	9805      	ldr	r0, [sp, #20]
 8003b60:	f00e f832 	bl	8011bc8 <HAL_GPIO_Init>
	
	/* Check for lower CLI baudrate conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 8003b64:	466b      	mov	r3, sp
 8003b66:	8a59      	ldrh	r1, [r3, #18]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	9808      	ldr	r0, [sp, #32]
 8003b6c:	f00e f91c 	bl	8011da8 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);		
 8003b70:	2005      	movs	r0, #5
 8003b72:	f00a f887 	bl	800dc84 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == RESET)
 8003b76:	8821      	ldrh	r1, [r4, #0]
 8003b78:	9805      	ldr	r0, [sp, #20]
 8003b7a:	f00e f90f 	bl	8011d9c <HAL_GPIO_ReadPin>
 8003b7e:	0003      	movs	r3, r0
		{
			return 1;
		}
	}

	return 0;
 8003b80:	2000      	movs	r0, #0
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == RESET)
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <IsLowerCLIbaud+0x76>
}
 8003b86:	b00f      	add	sp, #60	; 0x3c
 8003b88:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 8003b8a:	3312      	adds	r3, #18
 8003b8c:	446b      	add	r3, sp
 8003b8e:	8819      	ldrh	r1, [r3, #0]
 8003b90:	2201      	movs	r2, #1
 8003b92:	9808      	ldr	r0, [sp, #32]
 8003b94:	f00e f908 	bl	8011da8 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);		
 8003b98:	2005      	movs	r0, #5
 8003b9a:	f00a f873 	bl	800dc84 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P2_RX_Port,P2_RX_Pin) == SET) 
 8003b9e:	ab03      	add	r3, sp, #12
 8003ba0:	8819      	ldrh	r1, [r3, #0]
 8003ba2:	9805      	ldr	r0, [sp, #20]
 8003ba4:	f00e f8fa 	bl	8011d9c <HAL_GPIO_ReadPin>
 8003ba8:	3801      	subs	r0, #1
 8003baa:	4243      	negs	r3, r0
 8003bac:	4158      	adcs	r0, r3
			return 1;
 8003bae:	b2c0      	uxtb	r0, r0
 8003bb0:	e7e9      	b.n	8003b86 <IsLowerCLIbaud+0x72>
	...

08003bb4 <EE_FormatForFactoryReset>:
/*-----------------------------------------------------------*/	

/* --- Format emulated EEPROM for a factory reset
*/
void EE_FormatForFactoryReset(void)
{
 8003bb4:	b510      	push	{r4, lr}
	/* Check if EEPROM was just formated? */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	if (*((unsigned long *)0x20007FF0) == 0xBEEFDEAD)
 8003bb6:	4b07      	ldr	r3, [pc, #28]	; (8003bd4 <EE_FormatForFactoryReset+0x20>)
 8003bb8:	4a07      	ldr	r2, [pc, #28]	; (8003bd8 <EE_FormatForFactoryReset+0x24>)
 8003bba:	6812      	ldr	r2, [r2, #0]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d100      	bne.n	8003bc2 <EE_FormatForFactoryReset+0xe>
			/* Set flag for formated EEPROM */
			*((unsigned long *)0x20007FF0) = 0xBEEFDEAD; 
		}
	}
	
}
 8003bc0:	bd10      	pop	{r4, pc}
		if (EE_Format() == HAL_OK) 
 8003bc2:	f004 f833 	bl	8007c2c <EE_Format>
 8003bc6:	2800      	cmp	r0, #0
 8003bc8:	d1fa      	bne.n	8003bc0 <EE_FormatForFactoryReset+0xc>
			*((unsigned long *)0x20007FF0) = 0xBEEFDEAD; 
 8003bca:	4b03      	ldr	r3, [pc, #12]	; (8003bd8 <EE_FormatForFactoryReset+0x24>)
 8003bcc:	4a01      	ldr	r2, [pc, #4]	; (8003bd4 <EE_FormatForFactoryReset+0x20>)
 8003bce:	601a      	str	r2, [r3, #0]
}
 8003bd0:	e7f6      	b.n	8003bc0 <EE_FormatForFactoryReset+0xc>
 8003bd2:	46c0      	nop			; (mov r8, r8)
 8003bd4:	beefdead 	.word	0xbeefdead
 8003bd8:	20007ff0 	.word	0x20007ff0

08003bdc <SetupPortForRemoteBootloaderUpdate>:
				- Set baudrate to 57600
				- Enable even parity
				- Set datasize to 9 bits
*/
void SetupPortForRemoteBootloaderUpdate(uint8_t port)
{
 8003bdc:	b510      	push	{r4, lr}
	UART_HandleTypeDef *huart = GetUart(port);
 8003bde:	f00a fa41 	bl	800e064 <GetUart>
 8003be2:	0004      	movs	r4, r0

	huart->Init.BaudRate = 57600;
 8003be4:	23e1      	movs	r3, #225	; 0xe1
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	6043      	str	r3, [r0, #4]
	huart->Init.Parity = UART_PARITY_EVEN;
 8003bea:	2380      	movs	r3, #128	; 0x80
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	6103      	str	r3, [r0, #16]
	huart->Init.WordLength = UART_WORDLENGTH_9B;
 8003bf0:	2380      	movs	r3, #128	; 0x80
 8003bf2:	015b      	lsls	r3, r3, #5
 8003bf4:	6083      	str	r3, [r0, #8]
	HAL_UART_Init(huart);	
 8003bf6:	f010 f8e3 	bl	8013dc0 <HAL_UART_Init>
	
	/* The CLI port RXNE interrupt might be disabled so enable here again to be sure */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003bfa:	6822      	ldr	r2, [r4, #0]
 8003bfc:	6813      	ldr	r3, [r2, #0]
 8003bfe:	2120      	movs	r1, #32
 8003c00:	430b      	orrs	r3, r1
 8003c02:	6013      	str	r3, [r2, #0]
}
 8003c04:	bd10      	pop	{r4, pc}
	...

08003c08 <IsModuleParameter>:
/*-----------------------------------------------------------*/

/* --- Check if this string is a local module parameter or event. Returns parameter index+1
*/
uint8_t IsModuleParameter(char* name)
{
 8003c08:	b570      	push	{r4, r5, r6, lr}
 8003c0a:	0006      	movs	r6, r0
	for(uint8_t i=0; i<NUM_MODULE_PARAMS ;i++)
 8003c0c:	4d08      	ldr	r5, [pc, #32]	; (8003c30 <IsModuleParameter+0x28>)
 8003c0e:	2400      	movs	r4, #0
  {
		if (!strcmp(name, (const char *)(modParam[i].paramName)))
 8003c10:	6829      	ldr	r1, [r5, #0]
 8003c12:	0030      	movs	r0, r6
 8003c14:	f7fc fa76 	bl	8000104 <strcmp>
 8003c18:	2800      	cmp	r0, #0
 8003c1a:	d006      	beq.n	8003c2a <IsModuleParameter+0x22>
	for(uint8_t i=0; i<NUM_MODULE_PARAMS ;i++)
 8003c1c:	3401      	adds	r4, #1
 8003c1e:	b2e4      	uxtb	r4, r4
 8003c20:	350c      	adds	r5, #12
 8003c22:	2c0d      	cmp	r4, #13
 8003c24:	d1f4      	bne.n	8003c10 <IsModuleParameter+0x8>
			return i+1;
  }
	return 0;
 8003c26:	2000      	movs	r0, #0
}
 8003c28:	bd70      	pop	{r4, r5, r6, pc}
			return i+1;
 8003c2a:	3401      	adds	r4, #1
 8003c2c:	b2e0      	uxtb	r0, r4
 8003c2e:	e7fb      	b.n	8003c28 <IsModuleParameter+0x20>
 8003c30:	200000e4 	.word	0x200000e4

08003c34 <IsMathOperator>:
/*-----------------------------------------------------------*/

/* --- Check if this string is a math operator and return its enum
*/
uint8_t IsMathOperator(char* string)
{
 8003c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c36:	0005      	movs	r5, r0
	for(uint8_t i=0; i<NUM_MATH_OPERATORS ;i++)
  {
		if (!strcmp(string, "="))
 8003c38:	491b      	ldr	r1, [pc, #108]	; (8003ca8 <IsMathOperator+0x74>)
 8003c3a:	f7fc fa63 	bl	8000104 <strcmp>
 8003c3e:	0006      	movs	r6, r0
 8003c40:	2706      	movs	r7, #6
			return MATH_EQUAL;
		else if (!strcmp(string, ">"))
 8003c42:	4c1a      	ldr	r4, [pc, #104]	; (8003cac <IsMathOperator+0x78>)
		if (!strcmp(string, "="))
 8003c44:	2e00      	cmp	r6, #0
 8003c46:	d023      	beq.n	8003c90 <IsMathOperator+0x5c>
		else if (!strcmp(string, ">"))
 8003c48:	0021      	movs	r1, r4
 8003c4a:	0028      	movs	r0, r5
 8003c4c:	f7fc fa5a 	bl	8000104 <strcmp>
 8003c50:	2800      	cmp	r0, #0
 8003c52:	d01f      	beq.n	8003c94 <IsMathOperator+0x60>
			return MATH_GREATER;
		else if (!strcmp(string, "<"))
 8003c54:	4916      	ldr	r1, [pc, #88]	; (8003cb0 <IsMathOperator+0x7c>)
 8003c56:	0028      	movs	r0, r5
 8003c58:	f7fc fa54 	bl	8000104 <strcmp>
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	d01b      	beq.n	8003c98 <IsMathOperator+0x64>
			return MATH_SMALLER;
		else if (!strcmp(string, ">="))
 8003c60:	4914      	ldr	r1, [pc, #80]	; (8003cb4 <IsMathOperator+0x80>)
 8003c62:	0028      	movs	r0, r5
 8003c64:	f7fc fa4e 	bl	8000104 <strcmp>
 8003c68:	2800      	cmp	r0, #0
 8003c6a:	d017      	beq.n	8003c9c <IsMathOperator+0x68>
			return MATH_GREATER_EQUAL;
		else if (!strcmp(string, "<="))
 8003c6c:	4912      	ldr	r1, [pc, #72]	; (8003cb8 <IsMathOperator+0x84>)
 8003c6e:	0028      	movs	r0, r5
 8003c70:	f7fc fa48 	bl	8000104 <strcmp>
 8003c74:	2800      	cmp	r0, #0
 8003c76:	d013      	beq.n	8003ca0 <IsMathOperator+0x6c>
			return MATH_SMALLER_EQUAL;
		else if (!strcmp(string, "!="))
 8003c78:	4910      	ldr	r1, [pc, #64]	; (8003cbc <IsMathOperator+0x88>)
 8003c7a:	0028      	movs	r0, r5
 8003c7c:	f7fc fa42 	bl	8000104 <strcmp>
 8003c80:	2800      	cmp	r0, #0
 8003c82:	d00f      	beq.n	8003ca4 <IsMathOperator+0x70>
	for(uint8_t i=0; i<NUM_MATH_OPERATORS ;i++)
 8003c84:	3f01      	subs	r7, #1
 8003c86:	b2ff      	uxtb	r7, r7
 8003c88:	2f00      	cmp	r7, #0
 8003c8a:	d1db      	bne.n	8003c44 <IsMathOperator+0x10>
			return MATH_NOT_EQUAL;
  }
	return 0;
}
 8003c8c:	0038      	movs	r0, r7
 8003c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return MATH_EQUAL;
 8003c90:	2701      	movs	r7, #1
 8003c92:	e7fb      	b.n	8003c8c <IsMathOperator+0x58>
			return MATH_GREATER;
 8003c94:	2702      	movs	r7, #2
 8003c96:	e7f9      	b.n	8003c8c <IsMathOperator+0x58>
			return MATH_SMALLER;
 8003c98:	2703      	movs	r7, #3
 8003c9a:	e7f7      	b.n	8003c8c <IsMathOperator+0x58>
			return MATH_GREATER_EQUAL;
 8003c9c:	2704      	movs	r7, #4
 8003c9e:	e7f5      	b.n	8003c8c <IsMathOperator+0x58>
			return MATH_SMALLER_EQUAL;
 8003ca0:	2705      	movs	r7, #5
 8003ca2:	e7f3      	b.n	8003c8c <IsMathOperator+0x58>
			return MATH_NOT_EQUAL;
 8003ca4:	2706      	movs	r7, #6
 8003ca6:	e7f1      	b.n	8003c8c <IsMathOperator+0x58>
 8003ca8:	0801a908 	.word	0x0801a908
 8003cac:	0801a90c 	.word	0x0801a90c
 8003cb0:	0801a910 	.word	0x0801a910
 8003cb4:	0801a914 	.word	0x0801a914
 8003cb8:	0801a918 	.word	0x0801a918
 8003cbc:	0801a91c 	.word	0x0801a91c

08003cc0 <BOS_Init>:
*/

/* --- BitzOS initialization. 
*/
void BOS_Init(void)
{
 8003cc0:	b570      	push	{r4, r5, r6, lr}
	/* Initialize and configure RTC */
	RTC_Init();
 8003cc2:	f009 fe97 	bl	800d9f4 <RTC_Init>
	GetTimeDate();
 8003cc6:	f009 ff35 	bl	800db34 <GetTimeDate>

	/* EEPROM Init */
	EE_Init();
 8003cca:	f004 f813 	bl	8007cf4 <EE_Init>
	
  /* Initialize all configured peripherals */
  GPIO_Init();
 8003cce:	f009 fb63 	bl	800d398 <GPIO_Init>
	DMA_Init();
 8003cd2:	f008 faa9 	bl	800c228 <DMA_Init>
	TIM_USEC_Init();
 8003cd6:	f009 ff61 	bl	800db9c <TIM_USEC_Init>
	CRC_Init();
 8003cda:	f009 fad7 	bl	800d28c <CRC_Init>
	TIM_MSEC_Init();
 8003cde:	f009 ff8f 	bl	800dc00 <TIM_MSEC_Init>
	
	/* Check for factory reset */
	if (IsFactoryReset())
 8003ce2:	f009 fbfd 	bl	800d4e0 <IsFactoryReset>
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	d11a      	bne.n	8003d20 <BOS_Init+0x60>
		/* Software reset */
		NVIC_SystemReset();
	}
	
	/* Check if booting at lower CLI baudrate */
	if (IsLowerCLIbaud())
 8003cea:	f7ff ff13 	bl	8003b14 <IsLowerCLIbaud>
 8003cee:	2800      	cmp	r0, #0
 8003cf0:	d021      	beq.n	8003d36 <BOS_Init+0x76>
	{
		CLI_LOW_Baudrate_Flag = 1;
 8003cf2:	4b3d      	ldr	r3, [pc, #244]	; (8003de8 <BOS_Init+0x128>)
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	701a      	strb	r2, [r3, #0]
		/* Initialize the module */
		Delay_ms_no_rtos(50);					// Give other modules time to finish factory reset and baudrate check
 8003cf8:	2032      	movs	r0, #50	; 0x32
 8003cfa:	f009 ffc3 	bl	800dc84 <StartMilliDelay>
		Module_Init();	
 8003cfe:	f007 fc63 	bl	800b5c8 <Module_Init>
		
		BOS.clibaudrate = CLI_BAUDRATE_1;
 8003d02:	4b3a      	ldr	r3, [pc, #232]	; (8003dec <BOS_Init+0x12c>)
 8003d04:	22e1      	movs	r2, #225	; 0xe1
 8003d06:	0252      	lsls	r2, r2, #9
 8003d08:	609a      	str	r2, [r3, #8]
		/* Update all ports to lower baudrate */
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8003d0a:	2401      	movs	r4, #1
		{	
			UpdateBaudrate(port, BOS.clibaudrate);
 8003d0c:	001d      	movs	r5, r3
 8003d0e:	68a9      	ldr	r1, [r5, #8]
 8003d10:	0020      	movs	r0, r4
 8003d12:	f00a fa39 	bl	800e188 <UpdateBaudrate>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8003d16:	3401      	adds	r4, #1
 8003d18:	b2e4      	uxtb	r4, r4
 8003d1a:	2c07      	cmp	r4, #7
 8003d1c:	d1f7      	bne.n	8003d0e <BOS_Init+0x4e>
 8003d1e:	e00f      	b.n	8003d40 <BOS_Init+0x80>
		EE_FormatForFactoryReset();
 8003d20:	f7ff ff48 	bl	8003bb4 <EE_FormatForFactoryReset>
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003d24:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d28:	4b31      	ldr	r3, [pc, #196]	; (8003df0 <BOS_Init+0x130>)
 8003d2a:	4a32      	ldr	r2, [pc, #200]	; (8003df4 <BOS_Init+0x134>)
 8003d2c:	60da      	str	r2, [r3, #12]
 8003d2e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	e7fd      	b.n	8003d32 <BOS_Init+0x72>
		}
	}
	else
	{
		/* Initialize the module with default baudrate */
		Delay_ms_no_rtos(50);					// Give other modules time to finish factory reset and baudrate check
 8003d36:	2032      	movs	r0, #50	; 0x32
 8003d38:	f009 ffa4 	bl	800dc84 <StartMilliDelay>
		Module_Init();				
 8003d3c:	f007 fc44 	bl	800b5c8 <Module_Init>
	}
	
	/* Load stored EEPROM variables */
	LoadEEvars();
 8003d40:	f7ff fed8 	bl	8003af4 <LoadEEvars>
#ifndef __N
	UpdateMyPortsDir();
#endif	
	
	/* Start backend messaging DMAs */
	SetupMessagingRxDMAs();
 8003d44:	f008 fede 	bl	800cb04 <SetupMessagingRxDMAs>

	/* Startup indicator sequence */
	if (myID == 0)		/* Native module */
 8003d48:	4b2b      	ldr	r3, [pc, #172]	; (8003df8 <BOS_Init+0x138>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d117      	bne.n	8003d80 <BOS_Init+0xc0>
	{
		IND_ON();	Delay_ms_no_rtos(500); IND_OFF();
 8003d50:	2580      	movs	r5, #128	; 0x80
 8003d52:	012d      	lsls	r5, r5, #4
 8003d54:	2490      	movs	r4, #144	; 0x90
 8003d56:	05e4      	lsls	r4, r4, #23
 8003d58:	2201      	movs	r2, #1
 8003d5a:	0029      	movs	r1, r5
 8003d5c:	0020      	movs	r0, r4
 8003d5e:	f00e f823 	bl	8011da8 <HAL_GPIO_WritePin>
 8003d62:	20fa      	movs	r0, #250	; 0xfa
 8003d64:	0040      	lsls	r0, r0, #1
 8003d66:	f009 ff8d 	bl	800dc84 <StartMilliDelay>
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	0029      	movs	r1, r5
 8003d6e:	0020      	movs	r0, r4
 8003d70:	f00e f81a 	bl	8011da8 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
		IND_ON();	Delay_ms_no_rtos(100); IND_OFF();
	}
	
	/* Reset UART overrun errors in case other modules were already transmitting on startup */
	ResetUartORE();
 8003d74:	f003 fdf4 	bl	8007960 <ResetUartORE>

	BOS_initialized = 1;
 8003d78:	4b20      	ldr	r3, [pc, #128]	; (8003dfc <BOS_Init+0x13c>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	701a      	strb	r2, [r3, #0]
}
 8003d7e:	bd70      	pop	{r4, r5, r6, pc}
		IND_ON();	Delay_ms_no_rtos(500); IND_OFF();
 8003d80:	2580      	movs	r5, #128	; 0x80
 8003d82:	012d      	lsls	r5, r5, #4
 8003d84:	2490      	movs	r4, #144	; 0x90
 8003d86:	05e4      	lsls	r4, r4, #23
 8003d88:	2201      	movs	r2, #1
 8003d8a:	0029      	movs	r1, r5
 8003d8c:	0020      	movs	r0, r4
 8003d8e:	f00e f80b 	bl	8011da8 <HAL_GPIO_WritePin>
 8003d92:	20fa      	movs	r0, #250	; 0xfa
 8003d94:	0040      	lsls	r0, r0, #1
 8003d96:	f009 ff75 	bl	800dc84 <StartMilliDelay>
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	0029      	movs	r1, r5
 8003d9e:	0020      	movs	r0, r4
 8003da0:	f00e f802 	bl	8011da8 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003da4:	2064      	movs	r0, #100	; 0x64
 8003da6:	f009 ff6d 	bl	800dc84 <StartMilliDelay>
		IND_ON();	Delay_ms_no_rtos(100); IND_OFF();
 8003daa:	2201      	movs	r2, #1
 8003dac:	0029      	movs	r1, r5
 8003dae:	0020      	movs	r0, r4
 8003db0:	f00d fffa 	bl	8011da8 <HAL_GPIO_WritePin>
 8003db4:	2064      	movs	r0, #100	; 0x64
 8003db6:	f009 ff65 	bl	800dc84 <StartMilliDelay>
 8003dba:	2200      	movs	r2, #0
 8003dbc:	0029      	movs	r1, r5
 8003dbe:	0020      	movs	r0, r4
 8003dc0:	f00d fff2 	bl	8011da8 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(100);
 8003dc4:	2064      	movs	r0, #100	; 0x64
 8003dc6:	f009 ff5d 	bl	800dc84 <StartMilliDelay>
		IND_ON();	Delay_ms_no_rtos(100); IND_OFF();
 8003dca:	2201      	movs	r2, #1
 8003dcc:	0029      	movs	r1, r5
 8003dce:	0020      	movs	r0, r4
 8003dd0:	f00d ffea 	bl	8011da8 <HAL_GPIO_WritePin>
 8003dd4:	2064      	movs	r0, #100	; 0x64
 8003dd6:	f009 ff55 	bl	800dc84 <StartMilliDelay>
 8003dda:	2200      	movs	r2, #0
 8003ddc:	0029      	movs	r1, r5
 8003dde:	0020      	movs	r0, r4
 8003de0:	f00d ffe2 	bl	8011da8 <HAL_GPIO_WritePin>
 8003de4:	e7c6      	b.n	8003d74 <BOS_Init+0xb4>
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	20000b66 	.word	0x20000b66
 8003dec:	200066e4 	.word	0x200066e4
 8003df0:	e000ed00 	.word	0xe000ed00
 8003df4:	05fa0004 	.word	0x05fa0004
 8003df8:	20000070 	.word	0x20000070
 8003dfc:	20000b65 	.word	0x20000b65

08003e00 <FindBroadcastRoutes>:

/* --- Find array broadcast routes starting from a given module 
				(Takes about 50 usec)
*/
BOS_Status FindBroadcastRoutes(uint8_t src)
{
 8003e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e02:	46de      	mov	lr, fp
 8003e04:	4657      	mov	r7, sl
 8003e06:	464e      	mov	r6, r9
 8003e08:	4645      	mov	r5, r8
 8003e0a:	b5e0      	push	{r5, r6, r7, lr}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
	BOS_Status result = BOS_OK; 
	uint8_t p = 0, m = 0, level = 0, untaged = 0; 
	uint8_t  modules[N];			// Todo: Optimize to make bit-wise
 8003e10:	4b44      	ldr	r3, [pc, #272]	; (8003f24 <FindBroadcastRoutes+0x124>)
 8003e12:	781a      	ldrb	r2, [r3, #0]
 8003e14:	1dd3      	adds	r3, r2, #7
 8003e16:	08db      	lsrs	r3, r3, #3
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4669      	mov	r1, sp
 8003e1c:	1acb      	subs	r3, r1, r3
 8003e1e:	469d      	mov	sp, r3
	
	/* 1. Initialize modules list and broadcast routes */
	
	for(m=0 ; m<N ; m++)
 8003e20:	2a00      	cmp	r2, #0
 8003e22:	d009      	beq.n	8003e38 <FindBroadcastRoutes+0x38>
 8003e24:	4c40      	ldr	r4, [pc, #256]	; (8003f28 <FindBroadcastRoutes+0x128>)
 8003e26:	2100      	movs	r1, #0
	{	
		modules[m] = 0;
 8003e28:	2500      	movs	r5, #0
 8003e2a:	545d      	strb	r5, [r3, r1]
		bcastRoutes[m] = 0;
 8003e2c:	8025      	strh	r5, [r4, #0]
	for(m=0 ; m<N ; m++)
 8003e2e:	3101      	adds	r1, #1
 8003e30:	3402      	adds	r4, #2
 8003e32:	b2ce      	uxtb	r6, r1
 8003e34:	42b2      	cmp	r2, r6
 8003e36:	d8f8      	bhi.n	8003e2a <FindBroadcastRoutes+0x2a>
	}
	modules[src-1] = ++level;					// Tag the source
 8003e38:	3801      	subs	r0, #1
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	5419      	strb	r1, [r3, r0]
	
	/* 2. Source module should send to all neighbors */
	
	++level;													// Move one level
	
	for(p=1 ; p<=NumOfPorts ; p++)
 8003e3e:	00c5      	lsls	r5, r0, #3
 8003e40:	1a2d      	subs	r5, r5, r0
 8003e42:	006d      	lsls	r5, r5, #1
 8003e44:	3502      	adds	r5, #2
 8003e46:	4939      	ldr	r1, [pc, #228]	; (8003f2c <FindBroadcastRoutes+0x12c>)
 8003e48:	194d      	adds	r5, r1, r5
	modules[src-1] = ++level;					// Tag the source
 8003e4a:	2400      	movs	r4, #0
	{
		if (array[src-1][p]) 
		{
			bcastRoutes[src-1] |= (0x01 << (p-1));
 8003e4c:	4e36      	ldr	r6, [pc, #216]	; (8003f28 <FindBroadcastRoutes+0x128>)
 8003e4e:	0040      	lsls	r0, r0, #1
 8003e50:	2101      	movs	r1, #1
 8003e52:	4688      	mov	r8, r1
			modules[(array[src-1][p] >> 3)-1] = level;			// Tag this module as already broadcasted-to 
 8003e54:	3101      	adds	r1, #1
 8003e56:	468c      	mov	ip, r1
 8003e58:	607a      	str	r2, [r7, #4]
 8003e5a:	469b      	mov	fp, r3
 8003e5c:	e003      	b.n	8003e66 <FindBroadcastRoutes+0x66>
	for(p=1 ; p<=NumOfPorts ; p++)
 8003e5e:	3401      	adds	r4, #1
 8003e60:	3502      	adds	r5, #2
 8003e62:	2c06      	cmp	r4, #6
 8003e64:	d011      	beq.n	8003e8a <FindBroadcastRoutes+0x8a>
		if (array[src-1][p]) 
 8003e66:	8829      	ldrh	r1, [r5, #0]
 8003e68:	2900      	cmp	r1, #0
 8003e6a:	d0f8      	beq.n	8003e5e <FindBroadcastRoutes+0x5e>
			bcastRoutes[src-1] |= (0x01 << (p-1));
 8003e6c:	5b82      	ldrh	r2, [r0, r6]
 8003e6e:	4691      	mov	r9, r2
 8003e70:	4642      	mov	r2, r8
 8003e72:	40a2      	lsls	r2, r4
 8003e74:	4692      	mov	sl, r2
 8003e76:	464a      	mov	r2, r9
 8003e78:	4653      	mov	r3, sl
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	5382      	strh	r2, [r0, r6]
			modules[(array[src-1][p] >> 3)-1] = level;			// Tag this module as already broadcasted-to 
 8003e7e:	08c9      	lsrs	r1, r1, #3
 8003e80:	4459      	add	r1, fp
 8003e82:	3901      	subs	r1, #1
 8003e84:	4663      	mov	r3, ip
 8003e86:	700b      	strb	r3, [r1, #0]
 8003e88:	e7e9      	b.n	8003e5e <FindBroadcastRoutes+0x5e>
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	465b      	mov	r3, fp
	++level;													// Move one level
 8003e8e:	2102      	movs	r1, #2
 8003e90:	468c      	mov	ip, r1
 8003e92:	4926      	ldr	r1, [pc, #152]	; (8003f2c <FindBroadcastRoutes+0x12c>)
 8003e94:	3102      	adds	r1, #2
 8003e96:	468b      	mov	fp, r1
			{			
				for(p=1 ; p<=NumOfPorts ; p++)								// Check all neighbors if they're not already broadcasted-to
				{
					if (array[m][p] && (modules[(array[m][p] >> 3)-1] == 0)) 			// Found an untaged module
					{
						bcastRoutes[m] |= (0x01 << (p-1));
 8003e98:	0019      	movs	r1, r3
 8003e9a:	4663      	mov	r3, ip
 8003e9c:	4694      	mov	ip, r2
 8003e9e:	000a      	movs	r2, r1
		for(m=0 ; m<N ; m++)															// Scan all modules in the list
 8003ea0:	4661      	mov	r1, ip
 8003ea2:	2900      	cmp	r1, #0
 8003ea4:	d012      	beq.n	8003ecc <FindBroadcastRoutes+0xcc>
		++level;																					// Move one level
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	4e1f      	ldr	r6, [pc, #124]	; (8003f28 <FindBroadcastRoutes+0x128>)
 8003eac:	2100      	movs	r1, #0
		untaged = 0;																			// Reset the untaged counter
 8003eae:	2000      	movs	r0, #0
 8003eb0:	4682      	mov	sl, r0
			if (modules[m] == (level-1))										// This module is already broadcasted-to from the previous level 
 8003eb2:	1e58      	subs	r0, r3, #1
 8003eb4:	4681      	mov	r9, r0
 8003eb6:	5c50      	ldrb	r0, [r2, r1]
 8003eb8:	4548      	cmp	r0, r9
 8003eba:	d010      	beq.n	8003ede <FindBroadcastRoutes+0xde>
		for(m=0 ; m<N ; m++)															// Scan all modules in the list
 8003ebc:	3101      	adds	r1, #1
 8003ebe:	3602      	adds	r6, #2
 8003ec0:	b2c8      	uxtb	r0, r1
 8003ec2:	4584      	cmp	ip, r0
 8003ec4:	d8f7      	bhi.n	8003eb6 <FindBroadcastRoutes+0xb6>
					}
				}			
			}
		}
	} 
	while (untaged);
 8003ec6:	4651      	mov	r1, sl
 8003ec8:	2900      	cmp	r1, #0
 8003eca:	d1e9      	bne.n	8003ea0 <FindBroadcastRoutes+0xa0>

	
	return result;
}
 8003ecc:	2000      	movs	r0, #0
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	b003      	add	sp, #12
 8003ed2:	bcf0      	pop	{r4, r5, r6, r7}
 8003ed4:	46bb      	mov	fp, r7
 8003ed6:	46b2      	mov	sl, r6
 8003ed8:	46a9      	mov	r9, r5
 8003eda:	46a0      	mov	r8, r4
 8003edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ede:	00cc      	lsls	r4, r1, #3
 8003ee0:	1a64      	subs	r4, r4, r1
 8003ee2:	0064      	lsls	r4, r4, #1
 8003ee4:	445c      	add	r4, fp
			if (modules[m] == (level-1))										// This module is already broadcasted-to from the previous level 
 8003ee6:	2500      	movs	r5, #0
 8003ee8:	4698      	mov	r8, r3
 8003eea:	6079      	str	r1, [r7, #4]
 8003eec:	e003      	b.n	8003ef6 <FindBroadcastRoutes+0xf6>
				for(p=1 ; p<=NumOfPorts ; p++)								// Check all neighbors if they're not already broadcasted-to
 8003eee:	3501      	adds	r5, #1
 8003ef0:	3402      	adds	r4, #2
 8003ef2:	2d06      	cmp	r5, #6
 8003ef4:	d013      	beq.n	8003f1e <FindBroadcastRoutes+0x11e>
					if (array[m][p] && (modules[(array[m][p] >> 3)-1] == 0)) 			// Found an untaged module
 8003ef6:	8820      	ldrh	r0, [r4, #0]
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	d0f8      	beq.n	8003eee <FindBroadcastRoutes+0xee>
 8003efc:	08c0      	lsrs	r0, r0, #3
 8003efe:	3801      	subs	r0, #1
 8003f00:	5c13      	ldrb	r3, [r2, r0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f3      	bne.n	8003eee <FindBroadcastRoutes+0xee>
						bcastRoutes[m] |= (0x01 << (p-1));
 8003f06:	8833      	ldrh	r3, [r6, #0]
 8003f08:	2101      	movs	r1, #1
 8003f0a:	40a9      	lsls	r1, r5
 8003f0c:	430b      	orrs	r3, r1
 8003f0e:	8033      	strh	r3, [r6, #0]
						modules[(array[m][p] >> 3)-1] = level;		// Tag this module as already broadcasted-to 
 8003f10:	4643      	mov	r3, r8
 8003f12:	5413      	strb	r3, [r2, r0]
						++untaged;
 8003f14:	4653      	mov	r3, sl
 8003f16:	3301      	adds	r3, #1
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	469a      	mov	sl, r3
 8003f1c:	e7e7      	b.n	8003eee <FindBroadcastRoutes+0xee>
 8003f1e:	4643      	mov	r3, r8
 8003f20:	6879      	ldr	r1, [r7, #4]
 8003f22:	e7cb      	b.n	8003ebc <FindBroadcastRoutes+0xbc>
 8003f24:	2000001c 	.word	0x2000001c
 8003f28:	20000b6c 	.word	0x20000b6c
 8003f2c:	20000020 	.word	0x20000020

08003f30 <FindRoute>:
6- Otherwise, select the unvisited node that is marked with the smallest tentative distance, 
set it as the new "current node", and go back to step 3.

 */
uint8_t FindRoute(uint8_t sourceID, uint8_t desID)
{
 8003f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f32:	46de      	mov	lr, fp
 8003f34:	4657      	mov	r7, sl
 8003f36:	464e      	mov	r6, r9
 8003f38:	4645      	mov	r5, r8
 8003f3a:	b5e0      	push	{r5, r6, r7, lr}
 8003f3c:	b091      	sub	sp, #68	; 0x44
 8003f3e:	0006      	movs	r6, r0
 8003f40:	468a      	mov	sl, r1
#ifdef ___N
	uint8_t Q[__N] = {0};		// All nodes initially in Q (unvisited nodes)
#else
	uint8_t Q[50] = {0};		// All nodes initially in Q (unvisited nodes)
 8003f42:	2400      	movs	r4, #0
 8003f44:	9403      	str	r4, [sp, #12]
 8003f46:	222e      	movs	r2, #46	; 0x2e
 8003f48:	2100      	movs	r1, #0
 8003f4a:	a804      	add	r0, sp, #16
 8003f4c:	f010 fb11 	bl	8014572 <memset>
#endif
	
	uint8_t alt = 0; uint8_t u = 0; uint8_t v = 0; uint8_t j = 0;
	
	memset(route,0,sizeof(route));
 8003f50:	2202      	movs	r2, #2
 8003f52:	2100      	movs	r1, #0
 8003f54:	485a      	ldr	r0, [pc, #360]	; (80040c0 <FindRoute+0x190>)
 8003f56:	f010 fb0c 	bl	8014572 <memset>
	routeDist[sourceID-1] = 0;                  // Distance from source to source
 8003f5a:	0031      	movs	r1, r6
 8003f5c:	1e70      	subs	r0, r6, #1
 8003f5e:	4b59      	ldr	r3, [pc, #356]	; (80040c4 <FindRoute+0x194>)
 8003f60:	541c      	strb	r4, [r3, r0]
	routePrev[sourceID-1] = 0;               		// Previous node in optimal path initialization undefined
 8003f62:	4b59      	ldr	r3, [pc, #356]	; (80040c8 <FindRoute+0x198>)
 8003f64:	541c      	strb	r4, [r3, r0]
		
	/* Check adjacent neighbors first! */
	for(int col=1 ; col<=6 ; col++)
 8003f66:	00c6      	lsls	r6, r0, #3
 8003f68:	1a36      	subs	r6, r6, r0
 8003f6a:	0076      	lsls	r6, r6, #1
 8003f6c:	3602      	adds	r6, #2
 8003f6e:	4b57      	ldr	r3, [pc, #348]	; (80040cc <FindRoute+0x19c>)
 8003f70:	199b      	adds	r3, r3, r6
 8003f72:	9301      	str	r3, [sp, #4]
	routePrev[sourceID-1] = 0;               		// Previous node in optimal path initialization undefined
 8003f74:	001a      	movs	r2, r3
	for(int col=1 ; col<=6 ; col++)
 8003f76:	2001      	movs	r0, #1
	{
		if (array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == desID)) {
 8003f78:	4653      	mov	r3, sl
 8003f7a:	b29c      	uxth	r4, r3
 8003f7c:	e003      	b.n	8003f86 <FindRoute+0x56>
	for(int col=1 ; col<=6 ; col++)
 8003f7e:	3001      	adds	r0, #1
 8003f80:	3202      	adds	r2, #2
 8003f82:	2807      	cmp	r0, #7
 8003f84:	d00f      	beq.n	8003fa6 <FindRoute+0x76>
		if (array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == desID)) {
 8003f86:	8813      	ldrh	r3, [r2, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d0f8      	beq.n	8003f7e <FindRoute+0x4e>
 8003f8c:	08db      	lsrs	r3, r3, #3
 8003f8e:	42a3      	cmp	r3, r4
 8003f90:	d1f5      	bne.n	8003f7e <FindRoute+0x4e>
			routeDist[desID-1] = 1;
 8003f92:	4b4c      	ldr	r3, [pc, #304]	; (80040c4 <FindRoute+0x194>)
 8003f94:	4453      	add	r3, sl
 8003f96:	3b01      	subs	r3, #1
 8003f98:	2201      	movs	r2, #1
 8003f9a:	701a      	strb	r2, [r3, #0]
			route[0] = desID;
 8003f9c:	4b48      	ldr	r3, [pc, #288]	; (80040c0 <FindRoute+0x190>)
 8003f9e:	4652      	mov	r2, sl
 8003fa0:	701a      	strb	r2, [r3, #0]
			return col;	
 8003fa2:	b2c0      	uxtb	r0, r0
 8003fa4:	e084      	b.n	80040b0 <FindRoute+0x180>
		}
	}						
	
	/* Initialization */
	for (int i=1 ; i<=N ; i++)   					
 8003fa6:	4b4a      	ldr	r3, [pc, #296]	; (80040d0 <FindRoute+0x1a0>)
 8003fa8:	781a      	ldrb	r2, [r3, #0]
 8003faa:	2a00      	cmp	r2, #0
 8003fac:	dd14      	ble.n	8003fd8 <FindRoute+0xa8>
 8003fae:	2301      	movs	r3, #1
	{
		if (i != sourceID)            				// Where i has not yet been removed from Q (unvisited nodes)
		{
			routeDist[i-1] = 0xFF;        			// Unknown distance function from source to i
 8003fb0:	4844      	ldr	r0, [pc, #272]	; (80040c4 <FindRoute+0x194>)
 8003fb2:	1e44      	subs	r4, r0, #1
 8003fb4:	20ff      	movs	r0, #255	; 0xff
 8003fb6:	4680      	mov	r8, r0
			routePrev[i-1] = 0;            			// Previous node in optimal path from source
 8003fb8:	4843      	ldr	r0, [pc, #268]	; (80040c8 <FindRoute+0x198>)
 8003fba:	3801      	subs	r0, #1
 8003fbc:	2500      	movs	r5, #0
 8003fbe:	46ac      	mov	ip, r5
 8003fc0:	e002      	b.n	8003fc8 <FindRoute+0x98>
	for (int i=1 ; i<=N ; i++)   					
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	dc07      	bgt.n	8003fd8 <FindRoute+0xa8>
		if (i != sourceID)            				// Where i has not yet been removed from Q (unvisited nodes)
 8003fc8:	4299      	cmp	r1, r3
 8003fca:	d0fa      	beq.n	8003fc2 <FindRoute+0x92>
			routeDist[i-1] = 0xFF;        			// Unknown distance function from source to i
 8003fcc:	4645      	mov	r5, r8
 8003fce:	54e5      	strb	r5, [r4, r3]
			routePrev[i-1] = 0;            			// Previous node in optimal path from source
 8003fd0:	181d      	adds	r5, r3, r0
 8003fd2:	4666      	mov	r6, ip
 8003fd4:	702e      	strb	r6, [r5, #0]
 8003fd6:	e7f4      	b.n	8003fc2 <FindRoute+0x92>
	uint8_t alt = 0; uint8_t u = 0; uint8_t v = 0; uint8_t j = 0;
 8003fd8:	2400      	movs	r4, #0
 8003fda:	4b3c      	ldr	r3, [pc, #240]	; (80040cc <FindRoute+0x19c>)
 8003fdc:	4698      	mov	r8, r3
 8003fde:	230e      	movs	r3, #14
 8003fe0:	4443      	add	r3, r8
 8003fe2:	4699      	mov	r9, r3
			if (array[u-1][n])										// There's a neighbor v at this port n
			{	
				v = (array[u-1][n]>>3);
				if (!Q[v-1])												// v is still in Q
				{
					alt = routeDist[u-1] + 1;					// Add one hop
 8003fe4:	4d37      	ldr	r5, [pc, #220]	; (80040c4 <FindRoute+0x194>)
 8003fe6:	46d3      	mov	fp, sl
	while (!QnotEmpty(Q))
 8003fe8:	a803      	add	r0, sp, #12
 8003fea:	f7ff f961 	bl	80032b0 <QnotEmpty>
 8003fee:	2800      	cmp	r0, #0
 8003ff0:	d12f      	bne.n	8004052 <FindRoute+0x122>
		u = minArr(routeDist, Q)+1;						// Source node in first case
 8003ff2:	a903      	add	r1, sp, #12
 8003ff4:	4833      	ldr	r0, [pc, #204]	; (80040c4 <FindRoute+0x194>)
 8003ff6:	f7ff f93d 	bl	8003274 <minArr>
 8003ffa:	3001      	adds	r0, #1
 8003ffc:	b2c4      	uxtb	r4, r0
		if (u == desID) 
 8003ffe:	455c      	cmp	r4, fp
 8004000:	d00c      	beq.n	800401c <FindRoute+0xec>
			Q[u-1] = 1;													// Remove u from Q 
 8004002:	1e67      	subs	r7, r4, #1
 8004004:	ab03      	add	r3, sp, #12
 8004006:	2201      	movs	r2, #1
 8004008:	55da      	strb	r2, [r3, r7]
		for (uint8_t n=1 ; n<=6 ; n++)      		// Check all module ports
 800400a:	00f8      	lsls	r0, r7, #3
 800400c:	1bc0      	subs	r0, r0, r7
 800400e:	0040      	lsls	r0, r0, #1
 8004010:	1c81      	adds	r1, r0, #2
 8004012:	4441      	add	r1, r8
 8004014:	4448      	add	r0, r9
				if (!Q[v-1])												// v is still in Q
 8004016:	001a      	movs	r2, r3
 8004018:	46ba      	mov	sl, r7
 800401a:	e005      	b.n	8004028 <FindRoute+0xf8>
 800401c:	46da      	mov	sl, fp
		u = minArr(routeDist, Q)+1;						// Source node in first case
 800401e:	465c      	mov	r4, fp
 8004020:	e018      	b.n	8004054 <FindRoute+0x124>
		for (uint8_t n=1 ; n<=6 ; n++)      		// Check all module ports
 8004022:	3102      	adds	r1, #2
 8004024:	4281      	cmp	r1, r0
 8004026:	d0df      	beq.n	8003fe8 <FindRoute+0xb8>
			if (array[u-1][n])										// There's a neighbor v at this port n
 8004028:	880b      	ldrh	r3, [r1, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f9      	beq.n	8004022 <FindRoute+0xf2>
				v = (array[u-1][n]>>3);
 800402e:	08db      	lsrs	r3, r3, #3
				if (!Q[v-1])												// v is still in Q
 8004030:	b2db      	uxtb	r3, r3
 8004032:	3b01      	subs	r3, #1
 8004034:	5cd6      	ldrb	r6, [r2, r3]
 8004036:	2e00      	cmp	r6, #0
 8004038:	d1f3      	bne.n	8004022 <FindRoute+0xf2>
					alt = routeDist[u-1] + 1;					// Add one hop
 800403a:	4656      	mov	r6, sl
 800403c:	5dae      	ldrb	r6, [r5, r6]
 800403e:	3601      	adds	r6, #1
 8004040:	b2f6      	uxtb	r6, r6
					if (alt < routeDist[v-1])      		// A shorter path to v has been found
 8004042:	5cef      	ldrb	r7, [r5, r3]
 8004044:	42b7      	cmp	r7, r6
 8004046:	d9ec      	bls.n	8004022 <FindRoute+0xf2>
					{
						routeDist[v-1] = alt; 
 8004048:	4f1e      	ldr	r7, [pc, #120]	; (80040c4 <FindRoute+0x194>)
 800404a:	54fe      	strb	r6, [r7, r3]
						routePrev[v-1] = u; 
 800404c:	4e1e      	ldr	r6, [pc, #120]	; (80040c8 <FindRoute+0x198>)
 800404e:	54f4      	strb	r4, [r6, r3]
 8004050:	e7e7      	b.n	8004022 <FindRoute+0xf2>
 8004052:	46da      	mov	sl, fp
	}	
		
finishedRoute:
		
	/* Build the virtual route */	
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 8004054:	4b1c      	ldr	r3, [pc, #112]	; (80040c8 <FindRoute+0x198>)
 8004056:	191b      	adds	r3, r3, r4
 8004058:	3b01      	subs	r3, #1
 800405a:	7819      	ldrb	r1, [r3, #0]
 800405c:	2300      	movs	r3, #0
 800405e:	2900      	cmp	r1, #0
 8004060:	d00d      	beq.n	800407e <FindRoute+0x14e>
	{
		route[j++] = u;          				// Push the vertex onto the stack
 8004062:	4d17      	ldr	r5, [pc, #92]	; (80040c0 <FindRoute+0x190>)
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 8004064:	4818      	ldr	r0, [pc, #96]	; (80040c8 <FindRoute+0x198>)
 8004066:	e000      	b.n	800406a <FindRoute+0x13a>
 8004068:	0011      	movs	r1, r2
		route[j++] = u;          				// Push the vertex onto the stack
 800406a:	001a      	movs	r2, r3
 800406c:	3301      	adds	r3, #1
 800406e:	b2db      	uxtb	r3, r3
 8004070:	54ac      	strb	r4, [r5, r2]
	while (routePrev[u-1])        		// Construct the shortest path with a stack route
 8004072:	1842      	adds	r2, r0, r1
 8004074:	3a01      	subs	r2, #1
 8004076:	7812      	ldrb	r2, [r2, #0]
 8004078:	000c      	movs	r4, r1
 800407a:	2a00      	cmp	r2, #0
 800407c:	d1f4      	bne.n	8004068 <FindRoute+0x138>
		u = routePrev[u-1];           	// Traverse from target to source
	}
	
	/* Check which port leads to the correct module */
	for(int col=1 ; col<=6 ; col++)	
 800407e:	2001      	movs	r0, #1
	{					
		if ( array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == route[routeDist[desID-1]-1]) ) {
 8004080:	4c0f      	ldr	r4, [pc, #60]	; (80040c0 <FindRoute+0x190>)
 8004082:	4b10      	ldr	r3, [pc, #64]	; (80040c4 <FindRoute+0x194>)
 8004084:	4453      	add	r3, sl
 8004086:	001f      	movs	r7, r3
 8004088:	3f01      	subs	r7, #1
 800408a:	9901      	ldr	r1, [sp, #4]
 800408c:	e003      	b.n	8004096 <FindRoute+0x166>
	for(int col=1 ; col<=6 ; col++)	
 800408e:	3001      	adds	r0, #1
 8004090:	3102      	adds	r1, #2
 8004092:	2807      	cmp	r0, #7
 8004094:	d00b      	beq.n	80040ae <FindRoute+0x17e>
		if ( array[sourceID-1][col] && ((array[sourceID-1][col]>>3) == route[routeDist[desID-1]-1]) ) {
 8004096:	880b      	ldrh	r3, [r1, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0f8      	beq.n	800408e <FindRoute+0x15e>
 800409c:	783a      	ldrb	r2, [r7, #0]
 800409e:	18a2      	adds	r2, r4, r2
 80040a0:	3a01      	subs	r2, #1
 80040a2:	7812      	ldrb	r2, [r2, #0]
 80040a4:	08db      	lsrs	r3, r3, #3
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d1f1      	bne.n	800408e <FindRoute+0x15e>
			return col;	
 80040aa:	b2c0      	uxtb	r0, r0
 80040ac:	e000      	b.n	80040b0 <FindRoute+0x180>
		}
	}	

	return 0;			
 80040ae:	2000      	movs	r0, #0
}
 80040b0:	b011      	add	sp, #68	; 0x44
 80040b2:	bcf0      	pop	{r4, r5, r6, r7}
 80040b4:	46bb      	mov	fp, r7
 80040b6:	46b2      	mov	sl, r6
 80040b8:	46a9      	mov	r9, r5
 80040ba:	46a0      	mov	r8, r4
 80040bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040be:	46c0      	nop			; (mov r8, r8)
 80040c0:	2000679c 	.word	0x2000679c
 80040c4:	20000e7c 	.word	0x20000e7c
 80040c8:	20000e80 	.word	0x20000e80
 80040cc:	20000020 	.word	0x20000020
 80040d0:	2000001c 	.word	0x2000001c

080040d4 <remoteBootloaderUpdate>:
{
 80040d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040d6:	46ce      	mov	lr, r9
 80040d8:	4647      	mov	r7, r8
 80040da:	b580      	push	{r7, lr}
 80040dc:	b085      	sub	sp, #20
 80040de:	4680      	mov	r8, r0
 80040e0:	000d      	movs	r5, r1
 80040e2:	0016      	movs	r6, r2
 80040e4:	001f      	movs	r7, r3
	myOutport = FindRoute(myID, dst);
 80040e6:	4b36      	ldr	r3, [pc, #216]	; (80041c0 <remoteBootloaderUpdate+0xec>)
 80040e8:	7818      	ldrb	r0, [r3, #0]
 80040ea:	f7ff ff21 	bl	8003f30 <FindRoute>
 80040ee:	0004      	movs	r4, r0
	if (outport && dst == myID) {												/* This is a 'via port' update and I'm the last module */
 80040f0:	2f00      	cmp	r7, #0
 80040f2:	d024      	beq.n	800413e <remoteBootloaderUpdate+0x6a>
 80040f4:	4b32      	ldr	r3, [pc, #200]	; (80041c0 <remoteBootloaderUpdate+0xec>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	42ab      	cmp	r3, r5
 80040fa:	d05e      	beq.n	80041ba <remoteBootloaderUpdate+0xe6>
	uint8_t myOutport = 0, lastModule = 0; int8_t *pcOutputString;
 80040fc:	2200      	movs	r2, #0
 80040fe:	4691      	mov	r9, r2
	if (src == myID)
 8004100:	4543      	cmp	r3, r8
 8004102:	d050      	beq.n	80041a6 <remoteBootloaderUpdate+0xd2>
	SetupPortForRemoteBootloaderUpdate(inport);
 8004104:	0030      	movs	r0, r6
 8004106:	f7ff fd69 	bl	8003bdc <SetupPortForRemoteBootloaderUpdate>
	SetupPortForRemoteBootloaderUpdate(myOutport);
 800410a:	0020      	movs	r0, r4
 800410c:	f7ff fd66 	bl	8003bdc <SetupPortForRemoteBootloaderUpdate>
	if (lastModule == myID) {
 8004110:	4b2b      	ldr	r3, [pc, #172]	; (80041c0 <remoteBootloaderUpdate+0xec>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	454b      	cmp	r3, r9
 8004116:	d03f      	beq.n	8004198 <remoteBootloaderUpdate+0xc4>
	StartScastDMAStream(inport, myID, myOutport, myID, BIDIRECTIONAL, 0xFFFFFFFF, 0xFFFFFFFF, false);	
 8004118:	4b29      	ldr	r3, [pc, #164]	; (80041c0 <remoteBootloaderUpdate+0xec>)
 800411a:	7819      	ldrb	r1, [r3, #0]
 800411c:	2300      	movs	r3, #0
 800411e:	9303      	str	r3, [sp, #12]
 8004120:	3b01      	subs	r3, #1
 8004122:	9302      	str	r3, [sp, #8]
 8004124:	9301      	str	r3, [sp, #4]
 8004126:	3303      	adds	r3, #3
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	000b      	movs	r3, r1
 800412c:	0022      	movs	r2, r4
 800412e:	0030      	movs	r0, r6
 8004130:	f005 fa1e 	bl	8009570 <StartScastDMAStream>
}
 8004134:	b005      	add	sp, #20
 8004136:	bcc0      	pop	{r6, r7}
 8004138:	46b9      	mov	r9, r7
 800413a:	46b0      	mov	r8, r6
 800413c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (NumberOfHops(dst) == 1)
 800413e:	4b21      	ldr	r3, [pc, #132]	; (80041c4 <remoteBootloaderUpdate+0xf0>)
 8004140:	195b      	adds	r3, r3, r5
 8004142:	3b01      	subs	r3, #1
 8004144:	781a      	ldrb	r2, [r3, #0]
 8004146:	2a01      	cmp	r2, #1
 8004148:	d022      	beq.n	8004190 <remoteBootloaderUpdate+0xbc>
			lastModule = route[NumberOfHops(dst)-1];				/* previous module = route[Number of hops - 1] */
 800414a:	4b1f      	ldr	r3, [pc, #124]	; (80041c8 <remoteBootloaderUpdate+0xf4>)
 800414c:	189b      	adds	r3, r3, r2
 800414e:	3b01      	subs	r3, #1
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	4699      	mov	r9, r3
	if (src == myID)
 8004154:	4b1a      	ldr	r3, [pc, #104]	; (80041c0 <remoteBootloaderUpdate+0xec>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	4543      	cmp	r3, r8
 800415a:	d1d3      	bne.n	8004104 <remoteBootloaderUpdate+0x30>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800415c:	f00a fdf2 	bl	800ed44 <FreeRTOS_CLIGetOutputBuffer>
 8004160:	4680      	mov	r8, r0
			sprintf( ( char * ) pcOutputString, pcRemoteBootloaderUpdateMessage, dst);
 8004162:	4b1a      	ldr	r3, [pc, #104]	; (80041cc <remoteBootloaderUpdate+0xf8>)
 8004164:	6819      	ldr	r1, [r3, #0]
 8004166:	002a      	movs	r2, r5
 8004168:	f010 fc2c 	bl	80149c4 <sprintf>
		strcat(( char * ) pcOutputString, pcRemoteBootloaderUpdateWarningMessage);
 800416c:	4b18      	ldr	r3, [pc, #96]	; (80041d0 <remoteBootloaderUpdate+0xfc>)
 800416e:	6819      	ldr	r1, [r3, #0]
 8004170:	4640      	mov	r0, r8
 8004172:	f010 fc47 	bl	8014a04 <strcat>
		writePxITMutex(inport, ( char * ) pcOutputString, strlen(( char * )pcOutputString), cmd50ms);
 8004176:	4640      	mov	r0, r8
 8004178:	f7fb ffce 	bl	8000118 <strlen>
 800417c:	b282      	uxth	r2, r0
 800417e:	2332      	movs	r3, #50	; 0x32
 8004180:	4641      	mov	r1, r8
 8004182:	0030      	movs	r0, r6
 8004184:	f009 ffbc 	bl	800e100 <writePxITMutex>
		Delay_ms(100);
 8004188:	2064      	movs	r0, #100	; 0x64
 800418a:	f00c fd2b 	bl	8010be4 <HAL_Delay>
 800418e:	e7b9      	b.n	8004104 <remoteBootloaderUpdate+0x30>
			lastModule = myID;
 8004190:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <remoteBootloaderUpdate+0xec>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	4699      	mov	r9, r3
 8004196:	e7dd      	b.n	8004154 <remoteBootloaderUpdate+0x80>
		SwapUartPins(GetUart(myOutport), REVERSED);
 8004198:	0020      	movs	r0, r4
 800419a:	f009 ff63 	bl	800e064 <GetUart>
 800419e:	2101      	movs	r1, #1
 80041a0:	f009 fffc 	bl	800e19c <SwapUartPins>
 80041a4:	e7b8      	b.n	8004118 <remoteBootloaderUpdate+0x44>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 80041a6:	f00a fdcd 	bl	800ed44 <FreeRTOS_CLIGetOutputBuffer>
 80041aa:	4680      	mov	r8, r0
			sprintf( ( char * ) pcOutputString, pcRemoteBootloaderUpdateViaPortMessage, dst, outport);
 80041ac:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <remoteBootloaderUpdate+0x100>)
 80041ae:	6819      	ldr	r1, [r3, #0]
 80041b0:	003b      	movs	r3, r7
 80041b2:	002a      	movs	r2, r5
 80041b4:	f010 fc06 	bl	80149c4 <sprintf>
 80041b8:	e7d8      	b.n	800416c <remoteBootloaderUpdate+0x98>
		lastModule = myID;
 80041ba:	46a9      	mov	r9, r5
		myOutport = outport;
 80041bc:	003c      	movs	r4, r7
 80041be:	e79f      	b.n	8004100 <remoteBootloaderUpdate+0x2c>
 80041c0:	20000070 	.word	0x20000070
 80041c4:	20000e7c 	.word	0x20000e7c
 80041c8:	2000679c 	.word	0x2000679c
 80041cc:	20000098 	.word	0x20000098
 80041d0:	200000a0 	.word	0x200000a0
 80041d4:	2000009c 	.word	0x2000009c

080041d8 <DisplayTopology>:
/*-----------------------------------------------------------*/

/* --- Display array topology in human-readable format through module port --- 
*/
void DisplayTopology(uint8_t port)
{
 80041d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041da:	46de      	mov	lr, fp
 80041dc:	4657      	mov	r7, sl
 80041de:	464e      	mov	r6, r9
 80041e0:	4645      	mov	r5, r8
 80041e2:	b5e0      	push	{r5, r6, r7, lr}
 80041e4:	b083      	sub	sp, #12
 80041e6:	0007      	movs	r7, r0
	/* Print table header */
	sprintf(pcUserMessage, "\n\r(Module:Port)\t\t");
 80041e8:	4c5b      	ldr	r4, [pc, #364]	; (8004358 <DisplayTopology+0x180>)
 80041ea:	4b5c      	ldr	r3, [pc, #368]	; (800435c <DisplayTopology+0x184>)
 80041ec:	0022      	movs	r2, r4
 80041ee:	cb23      	ldmia	r3!, {r0, r1, r5}
 80041f0:	c223      	stmia	r2!, {r0, r1, r5}
 80041f2:	6819      	ldr	r1, [r3, #0]
 80041f4:	6011      	str	r1, [r2, #0]
 80041f6:	889b      	ldrh	r3, [r3, #4]
 80041f8:	8093      	strh	r3, [r2, #4]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80041fa:	0020      	movs	r0, r4
 80041fc:	f7fb ff8c 	bl	8000118 <strlen>
 8004200:	b282      	uxth	r2, r0
 8004202:	2301      	movs	r3, #1
 8004204:	425b      	negs	r3, r3
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	3333      	adds	r3, #51	; 0x33
 800420a:	0021      	movs	r1, r4
 800420c:	0038      	movs	r0, r7
 800420e:	f009 ff4b 	bl	800e0a8 <writePxMutex>
 8004212:	2401      	movs	r4, #1
	for (uint8_t i=1 ; i<=NumOfPorts ; i++) 
	{
		sprintf(pcUserMessage, "P%d\t", i);
 8004214:	4b52      	ldr	r3, [pc, #328]	; (8004360 <DisplayTopology+0x188>)
 8004216:	4698      	mov	r8, r3
 8004218:	4d4f      	ldr	r5, [pc, #316]	; (8004358 <DisplayTopology+0x180>)
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 800421a:	2601      	movs	r6, #1
 800421c:	4276      	negs	r6, r6
		sprintf(pcUserMessage, "P%d\t", i);
 800421e:	0022      	movs	r2, r4
 8004220:	4641      	mov	r1, r8
 8004222:	0028      	movs	r0, r5
 8004224:	f010 fbce 	bl	80149c4 <sprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8004228:	0028      	movs	r0, r5
 800422a:	f7fb ff75 	bl	8000118 <strlen>
 800422e:	b282      	uxth	r2, r0
 8004230:	9600      	str	r6, [sp, #0]
 8004232:	2332      	movs	r3, #50	; 0x32
 8004234:	0029      	movs	r1, r5
 8004236:	0038      	movs	r0, r7
 8004238:	f009 ff36 	bl	800e0a8 <writePxMutex>
	for (uint8_t i=1 ; i<=NumOfPorts ; i++) 
 800423c:	3401      	adds	r4, #1
 800423e:	2c07      	cmp	r4, #7
 8004240:	d1ed      	bne.n	800421e <DisplayTopology+0x46>
	}
	writePxMutex(port, "\n\n\r", 3, cmd50ms, HAL_MAX_DELAY);
 8004242:	2301      	movs	r3, #1
 8004244:	425b      	negs	r3, r3
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	3333      	adds	r3, #51	; 0x33
 800424a:	2203      	movs	r2, #3
 800424c:	4945      	ldr	r1, [pc, #276]	; (8004364 <DisplayTopology+0x18c>)
 800424e:	0038      	movs	r0, r7
 8004250:	f009 ff2a 	bl	800e0a8 <writePxMutex>
	
	/* Print each row */
	for(uint8_t row=0 ; row<N ; row++)
 8004254:	4b44      	ldr	r3, [pc, #272]	; (8004368 <DisplayTopology+0x190>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d06d      	beq.n	8004338 <DisplayTopology+0x160>
 800425c:	2300      	movs	r3, #0
 800425e:	469b      	mov	fp, r3
	{
		sprintf(pcUserMessage, "Module %d:\t",row+1);
 8004260:	4b42      	ldr	r3, [pc, #264]	; (800436c <DisplayTopology+0x194>)
 8004262:	469a      	mov	sl, r3
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8004264:	2601      	movs	r6, #1
 8004266:	4276      	negs	r6, r6
		/* Module PN */
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 8004268:	4b41      	ldr	r3, [pc, #260]	; (8004370 <DisplayTopology+0x198>)
 800426a:	4699      	mov	r9, r3
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
		{
			if (!array[row][col])
				sprintf(pcUserMessage, "%d\t",0);
			else
				sprintf(pcUserMessage, "%d:%d\t", (array[row][col]>>3), (array[row][col]&0x07) );
 800426c:	46b8      	mov	r8, r7
 800426e:	e02b      	b.n	80042c8 <DisplayTopology+0xf0>
 8004270:	2307      	movs	r3, #7
 8004272:	4013      	ands	r3, r2
 8004274:	08d2      	lsrs	r2, r2, #3
 8004276:	493f      	ldr	r1, [pc, #252]	; (8004374 <DisplayTopology+0x19c>)
 8004278:	4837      	ldr	r0, [pc, #220]	; (8004358 <DisplayTopology+0x180>)
 800427a:	f010 fba3 	bl	80149c4 <sprintf>
			writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);			
 800427e:	4d36      	ldr	r5, [pc, #216]	; (8004358 <DisplayTopology+0x180>)
 8004280:	0028      	movs	r0, r5
 8004282:	f7fb ff49 	bl	8000118 <strlen>
 8004286:	b282      	uxth	r2, r0
 8004288:	9600      	str	r6, [sp, #0]
 800428a:	2332      	movs	r3, #50	; 0x32
 800428c:	0029      	movs	r1, r5
 800428e:	4640      	mov	r0, r8
 8004290:	f009 ff0a 	bl	800e0a8 <writePxMutex>
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
 8004294:	3402      	adds	r4, #2
 8004296:	42bc      	cmp	r4, r7
 8004298:	d007      	beq.n	80042aa <DisplayTopology+0xd2>
			if (!array[row][col])
 800429a:	8822      	ldrh	r2, [r4, #0]
 800429c:	2a00      	cmp	r2, #0
 800429e:	d1e7      	bne.n	8004270 <DisplayTopology+0x98>
				sprintf(pcUserMessage, "%d\t",0);
 80042a0:	4935      	ldr	r1, [pc, #212]	; (8004378 <DisplayTopology+0x1a0>)
 80042a2:	482d      	ldr	r0, [pc, #180]	; (8004358 <DisplayTopology+0x180>)
 80042a4:	f010 fb8e 	bl	80149c4 <sprintf>
 80042a8:	e7e9      	b.n	800427e <DisplayTopology+0xa6>
		}
		writePxMutex(port, "\n\r", 2, cmd50ms, HAL_MAX_DELAY);
 80042aa:	9600      	str	r6, [sp, #0]
 80042ac:	2332      	movs	r3, #50	; 0x32
 80042ae:	2202      	movs	r2, #2
 80042b0:	4932      	ldr	r1, [pc, #200]	; (800437c <DisplayTopology+0x1a4>)
 80042b2:	4640      	mov	r0, r8
 80042b4:	f009 fef8 	bl	800e0a8 <writePxMutex>
	for(uint8_t row=0 ; row<N ; row++)
 80042b8:	465b      	mov	r3, fp
 80042ba:	3301      	adds	r3, #1
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	469b      	mov	fp, r3
 80042c0:	4b29      	ldr	r3, [pc, #164]	; (8004368 <DisplayTopology+0x190>)
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	455b      	cmp	r3, fp
 80042c6:	d936      	bls.n	8004336 <DisplayTopology+0x15e>
		sprintf(pcUserMessage, "Module %d:\t",row+1);
 80042c8:	465b      	mov	r3, fp
 80042ca:	1c5a      	adds	r2, r3, #1
 80042cc:	4c22      	ldr	r4, [pc, #136]	; (8004358 <DisplayTopology+0x180>)
 80042ce:	4651      	mov	r1, sl
 80042d0:	0020      	movs	r0, r4
 80042d2:	f010 fb77 	bl	80149c4 <sprintf>
		writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80042d6:	0020      	movs	r0, r4
 80042d8:	f7fb ff1e 	bl	8000118 <strlen>
 80042dc:	b282      	uxth	r2, r0
 80042de:	9600      	str	r6, [sp, #0]
 80042e0:	2332      	movs	r3, #50	; 0x32
 80042e2:	0021      	movs	r1, r4
 80042e4:	4640      	mov	r0, r8
 80042e6:	f009 fedf 	bl	800e0a8 <writePxMutex>
		strncpy(pcUserMessage, modulePNstring[(array[row][0])], 5);
 80042ea:	465b      	mov	r3, fp
 80042ec:	00df      	lsls	r7, r3, #3
 80042ee:	1afb      	subs	r3, r7, r3
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	464a      	mov	r2, r9
 80042f4:	5a9b      	ldrh	r3, [r3, r2]
 80042f6:	0059      	lsls	r1, r3, #1
 80042f8:	18c9      	adds	r1, r1, r3
 80042fa:	0049      	lsls	r1, r1, #1
 80042fc:	4b20      	ldr	r3, [pc, #128]	; (8004380 <DisplayTopology+0x1a8>)
 80042fe:	18c9      	adds	r1, r1, r3
 8004300:	2205      	movs	r2, #5
 8004302:	0020      	movs	r0, r4
 8004304:	f010 fbb2 	bl	8014a6c <strncpy>
		writePxMutex(port, pcUserMessage, 5, cmd50ms, HAL_MAX_DELAY);
 8004308:	9600      	str	r6, [sp, #0]
 800430a:	2332      	movs	r3, #50	; 0x32
 800430c:	2205      	movs	r2, #5
 800430e:	0021      	movs	r1, r4
 8004310:	4640      	mov	r0, r8
 8004312:	f009 fec9 	bl	800e0a8 <writePxMutex>
		writePxMutex(port, "\t", 1, cmd50ms, HAL_MAX_DELAY);
 8004316:	9600      	str	r6, [sp, #0]
 8004318:	2332      	movs	r3, #50	; 0x32
 800431a:	2201      	movs	r2, #1
 800431c:	4919      	ldr	r1, [pc, #100]	; (8004384 <DisplayTopology+0x1ac>)
 800431e:	4640      	mov	r0, r8
 8004320:	f009 fec2 	bl	800e0a8 <writePxMutex>
		for(uint8_t col=1 ; col<=NumOfPorts ; col++)
 8004324:	465b      	mov	r3, fp
 8004326:	1aff      	subs	r7, r7, r3
 8004328:	007f      	lsls	r7, r7, #1
 800432a:	1cbc      	adds	r4, r7, #2
 800432c:	444c      	add	r4, r9
 800432e:	4b16      	ldr	r3, [pc, #88]	; (8004388 <DisplayTopology+0x1b0>)
 8004330:	469c      	mov	ip, r3
 8004332:	4467      	add	r7, ip
 8004334:	e7b1      	b.n	800429a <DisplayTopology+0xc2>
 8004336:	4647      	mov	r7, r8
	}
	
	writePxMutex(port, "\n", 1, cmd50ms, HAL_MAX_DELAY);
 8004338:	2301      	movs	r3, #1
 800433a:	425b      	negs	r3, r3
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	3333      	adds	r3, #51	; 0x33
 8004340:	2201      	movs	r2, #1
 8004342:	4912      	ldr	r1, [pc, #72]	; (800438c <DisplayTopology+0x1b4>)
 8004344:	0038      	movs	r0, r7
 8004346:	f009 feaf 	bl	800e0a8 <writePxMutex>
}
 800434a:	b003      	add	sp, #12
 800434c:	bcf0      	pop	{r4, r5, r6, r7}
 800434e:	46bb      	mov	fp, r7
 8004350:	46b2      	mov	sl, r6
 8004352:	46a9      	mov	r9, r5
 8004354:	46a0      	mov	r8, r4
 8004356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004358:	20000e0c 	.word	0x20000e0c
 800435c:	0801a920 	.word	0x0801a920
 8004360:	0801a934 	.word	0x0801a934
 8004364:	0801b328 	.word	0x0801b328
 8004368:	2000001c 	.word	0x2000001c
 800436c:	0801a93c 	.word	0x0801a93c
 8004370:	20000020 	.word	0x20000020
 8004374:	0801a94c 	.word	0x0801a94c
 8004378:	0801a948 	.word	0x0801a948
 800437c:	0801aa58 	.word	0x0801aa58
 8004380:	0801add0 	.word	0x0801add0
 8004384:	0801a930 	.word	0x0801a930
 8004388:	2000002e 	.word	0x2000002e
 800438c:	0801c6b8 	.word	0x0801c6b8

08004390 <DisplayPortsDir>:
/*-----------------------------------------------------------*/

/* --- Display ports directions in human-readable format through module port --- 
*/
void DisplayPortsDir(uint8_t port)
{
 8004390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004392:	46d6      	mov	lr, sl
 8004394:	464f      	mov	r7, r9
 8004396:	4646      	mov	r6, r8
 8004398:	b5c0      	push	{r6, r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	4680      	mov	r8, r0
	sprintf(pcUserMessage, "\n\rThese ports are reversed:");
 800439e:	4c31      	ldr	r4, [pc, #196]	; (8004464 <DisplayPortsDir+0xd4>)
 80043a0:	4b31      	ldr	r3, [pc, #196]	; (8004468 <DisplayPortsDir+0xd8>)
 80043a2:	0022      	movs	r2, r4
 80043a4:	cb23      	ldmia	r3!, {r0, r1, r5}
 80043a6:	c223      	stmia	r2!, {r0, r1, r5}
 80043a8:	cb23      	ldmia	r3!, {r0, r1, r5}
 80043aa:	c223      	stmia	r2!, {r0, r1, r5}
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6013      	str	r3, [r2, #0]
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80043b0:	0020      	movs	r0, r4
 80043b2:	f7fb feb1 	bl	8000118 <strlen>
 80043b6:	b282      	uxth	r2, r0
 80043b8:	2301      	movs	r3, #1
 80043ba:	425b      	negs	r3, r3
 80043bc:	9300      	str	r3, [sp, #0]
 80043be:	3333      	adds	r3, #51	; 0x33
 80043c0:	0021      	movs	r1, r4
 80043c2:	4640      	mov	r0, r8
 80043c4:	f009 fe70 	bl	800e0a8 <writePxMutex>
	
	for (uint8_t i=1 ; i<=N ; i++) 
 80043c8:	4b28      	ldr	r3, [pc, #160]	; (800446c <DisplayPortsDir+0xdc>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2701      	movs	r7, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d02c      	beq.n	800442c <DisplayPortsDir+0x9c>
	{
		for (uint8_t p=1 ; p<=MaxNumOfPorts ; p++) 
		{		
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 80043d2:	4e27      	ldr	r6, [pc, #156]	; (8004470 <DisplayPortsDir+0xe0>)
			{
				sprintf(pcUserMessage, "\n\rModule %d : P%d", i, p);
 80043d4:	4b27      	ldr	r3, [pc, #156]	; (8004474 <DisplayPortsDir+0xe4>)
 80043d6:	4699      	mov	r9, r3
 80043d8:	e024      	b.n	8004424 <DisplayPortsDir+0x94>
 80043da:	4b22      	ldr	r3, [pc, #136]	; (8004464 <DisplayPortsDir+0xd4>)
 80043dc:	469a      	mov	sl, r3
 80043de:	0023      	movs	r3, r4
 80043e0:	003a      	movs	r2, r7
 80043e2:	4649      	mov	r1, r9
 80043e4:	4650      	mov	r0, sl
 80043e6:	f010 faed 	bl	80149c4 <sprintf>
				writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 80043ea:	4650      	mov	r0, sl
 80043ec:	f7fb fe94 	bl	8000118 <strlen>
 80043f0:	b282      	uxth	r2, r0
 80043f2:	2301      	movs	r3, #1
 80043f4:	425b      	negs	r3, r3
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	3333      	adds	r3, #51	; 0x33
 80043fa:	4651      	mov	r1, sl
 80043fc:	4640      	mov	r0, r8
 80043fe:	f009 fe53 	bl	800e0a8 <writePxMutex>
		for (uint8_t p=1 ; p<=MaxNumOfPorts ; p++) 
 8004402:	2c0a      	cmp	r4, #10
 8004404:	d008      	beq.n	8004418 <DisplayPortsDir+0x88>
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8004406:	0021      	movs	r1, r4
 8004408:	3401      	adds	r4, #1
 800440a:	5baa      	ldrh	r2, [r5, r6]
 800440c:	2380      	movs	r3, #128	; 0x80
 800440e:	021b      	lsls	r3, r3, #8
 8004410:	410b      	asrs	r3, r1
 8004412:	4213      	tst	r3, r2
 8004414:	d0f5      	beq.n	8004402 <DisplayPortsDir+0x72>
 8004416:	e7e0      	b.n	80043da <DisplayPortsDir+0x4a>
	for (uint8_t i=1 ; i<=N ; i++) 
 8004418:	3701      	adds	r7, #1
 800441a:	b2ff      	uxtb	r7, r7
 800441c:	4b13      	ldr	r3, [pc, #76]	; (800446c <DisplayPortsDir+0xdc>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	42bb      	cmp	r3, r7
 8004422:	d303      	bcc.n	800442c <DisplayPortsDir+0x9c>
{
 8004424:	2400      	movs	r4, #0
			if ( (arrayPortsDir[i-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 8004426:	1e7d      	subs	r5, r7, #1
 8004428:	006d      	lsls	r5, r5, #1
 800442a:	e7ec      	b.n	8004406 <DisplayPortsDir+0x76>
			}	
		}
	}
	
	sprintf(pcUserMessage, "\n\n\rAll other ports are normal\n\r");
 800442c:	4c0d      	ldr	r4, [pc, #52]	; (8004464 <DisplayPortsDir+0xd4>)
 800442e:	4b12      	ldr	r3, [pc, #72]	; (8004478 <DisplayPortsDir+0xe8>)
 8004430:	0022      	movs	r2, r4
 8004432:	cb23      	ldmia	r3!, {r0, r1, r5}
 8004434:	c223      	stmia	r2!, {r0, r1, r5}
 8004436:	cb23      	ldmia	r3!, {r0, r1, r5}
 8004438:	c223      	stmia	r2!, {r0, r1, r5}
 800443a:	cb03      	ldmia	r3!, {r0, r1}
 800443c:	c203      	stmia	r2!, {r0, r1}
	writePxMutex(port, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 800443e:	0020      	movs	r0, r4
 8004440:	f7fb fe6a 	bl	8000118 <strlen>
 8004444:	b282      	uxth	r2, r0
 8004446:	2301      	movs	r3, #1
 8004448:	425b      	negs	r3, r3
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	3333      	adds	r3, #51	; 0x33
 800444e:	0021      	movs	r1, r4
 8004450:	4640      	mov	r0, r8
 8004452:	f009 fe29 	bl	800e0a8 <writePxMutex>
}
 8004456:	b002      	add	sp, #8
 8004458:	bce0      	pop	{r5, r6, r7}
 800445a:	46ba      	mov	sl, r7
 800445c:	46b1      	mov	r9, r6
 800445e:	46a8      	mov	r8, r5
 8004460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	20000e0c 	.word	0x20000e0c
 8004468:	0801a954 	.word	0x0801a954
 800446c:	2000001c 	.word	0x2000001c
 8004470:	20006b38 	.word	0x20006b38
 8004474:	0801a970 	.word	0x0801a970
 8004478:	0801a984 	.word	0x0801a984

0800447c <DisplayModuleStatus>:
/*-----------------------------------------------------------*/

/* --- Display a description of current module status (Firmware, Ports, P2P DMAs) --- 
*/
void DisplayModuleStatus(uint8_t port)
{
 800447c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800447e:	46d6      	mov	lr, sl
 8004480:	464f      	mov	r7, r9
 8004482:	4646      	mov	r6, r8
 8004484:	b5c0      	push	{r6, r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	4680      	mov	r8, r0
	int8_t *pcOutputString;
	uint16_t temp = 0;
	
	/* Obtain the address of the output buffer. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800448a:	f00a fc5b 	bl	800ed44 <FreeRTOS_CLIGetOutputBuffer>
 800448e:	0004      	movs	r4, r0
	
	strcpy( (char *) pcOutputString, "");
 8004490:	2300      	movs	r3, #0
 8004492:	7003      	strb	r3, [r0, #0]
	
	sprintf(pcUserMessage, "\n\r*** Module %d Status ***\n", myID);
 8004494:	4b91      	ldr	r3, [pc, #580]	; (80046dc <DisplayModuleStatus+0x260>)
 8004496:	781a      	ldrb	r2, [r3, #0]
 8004498:	4d91      	ldr	r5, [pc, #580]	; (80046e0 <DisplayModuleStatus+0x264>)
 800449a:	4992      	ldr	r1, [pc, #584]	; (80046e4 <DisplayModuleStatus+0x268>)
 800449c:	0028      	movs	r0, r5
 800449e:	f010 fa91 	bl	80149c4 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 80044a2:	0029      	movs	r1, r5
 80044a4:	0020      	movs	r0, r4
 80044a6:	f010 faad 	bl	8014a04 <strcat>
	sprintf(pcUserMessage, "\n\rConnected via port: P%d\n\r", PcPort);
 80044aa:	4b8f      	ldr	r3, [pc, #572]	; (80046e8 <DisplayModuleStatus+0x26c>)
 80044ac:	781a      	ldrb	r2, [r3, #0]
 80044ae:	498f      	ldr	r1, [pc, #572]	; (80046ec <DisplayModuleStatus+0x270>)
 80044b0:	0028      	movs	r0, r5
 80044b2:	f010 fa87 	bl	80149c4 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 80044b6:	0029      	movs	r1, r5
 80044b8:	0020      	movs	r0, r4
 80044ba:	f010 faa3 	bl	8014a04 <strcat>
	
	/* Firmware */
	sprintf(pcUserMessage, "\n\rFirmware version: %d.%d.%d", _firmMajor, _firmMinor, _firmPatch);
 80044be:	2304      	movs	r3, #4
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	3b02      	subs	r3, #2
 80044c4:	2200      	movs	r2, #0
 80044c6:	498a      	ldr	r1, [pc, #552]	; (80046f0 <DisplayModuleStatus+0x274>)
 80044c8:	0028      	movs	r0, r5
 80044ca:	f010 fa7b 	bl	80149c4 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 80044ce:	0029      	movs	r1, r5
 80044d0:	0020      	movs	r0, r4
 80044d2:	f010 fa97 	bl	8014a04 <strcat>
	sprintf(pcUserMessage, "\n\rFirmware date:    %s", _firmDate);
 80044d6:	4a87      	ldr	r2, [pc, #540]	; (80046f4 <DisplayModuleStatus+0x278>)
 80044d8:	4987      	ldr	r1, [pc, #540]	; (80046f8 <DisplayModuleStatus+0x27c>)
 80044da:	0028      	movs	r0, r5
 80044dc:	f010 fa72 	bl	80149c4 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);
 80044e0:	0029      	movs	r1, r5
 80044e2:	0020      	movs	r0, r4
 80044e4:	f010 fa8e 	bl	8014a04 <strcat>
	sprintf(pcUserMessage, "\n\rFirmware time:    %s\n\r", _firmTime);
 80044e8:	4a84      	ldr	r2, [pc, #528]	; (80046fc <DisplayModuleStatus+0x280>)
 80044ea:	4985      	ldr	r1, [pc, #532]	; (8004700 <DisplayModuleStatus+0x284>)
 80044ec:	0028      	movs	r0, r5
 80044ee:	f010 fa69 	bl	80149c4 <sprintf>
	strcat( (char *) pcOutputString, pcUserMessage);	
 80044f2:	0029      	movs	r1, r5
 80044f4:	0020      	movs	r0, r4
 80044f6:	f010 fa85 	bl	8014a04 <strcat>
	
	/* Ports */
	sprintf(pcUserMessage, "\n\rPorts Status:\n\n\r");
 80044fa:	4b82      	ldr	r3, [pc, #520]	; (8004704 <DisplayModuleStatus+0x288>)
 80044fc:	002a      	movs	r2, r5
 80044fe:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004500:	c243      	stmia	r2!, {r0, r1, r6}
 8004502:	6819      	ldr	r1, [r3, #0]
 8004504:	6011      	str	r1, [r2, #0]
 8004506:	8899      	ldrh	r1, [r3, #4]
 8004508:	8091      	strh	r1, [r2, #4]
 800450a:	799b      	ldrb	r3, [r3, #6]
 800450c:	7193      	strb	r3, [r2, #6]
	strcat( (char *) pcOutputString, pcUserMessage);
 800450e:	0029      	movs	r1, r5
 8004510:	0020      	movs	r0, r4
 8004512:	f010 fa77 	bl	8014a04 <strcat>
 8004516:	2501      	movs	r5, #1
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
	{
		sprintf(pcUserMessage, "P%d: ", i);
 8004518:	4b7b      	ldr	r3, [pc, #492]	; (8004708 <DisplayModuleStatus+0x28c>)
 800451a:	4699      	mov	r9, r3
 800451c:	4f70      	ldr	r7, [pc, #448]	; (80046e0 <DisplayModuleStatus+0x264>)
		strcat( (char *) pcOutputString, pcUserMessage);
		switch (portStatus[i])
 800451e:	4b7b      	ldr	r3, [pc, #492]	; (800470c <DisplayModuleStatus+0x290>)
 8004520:	469a      	mov	sl, r3
 8004522:	e00e      	b.n	8004542 <DisplayModuleStatus+0xc6>
		{
				case FREE : 
						sprintf(pcUserMessage, "Free\n\r"); break;
 8004524:	4b6e      	ldr	r3, [pc, #440]	; (80046e0 <DisplayModuleStatus+0x264>)
 8004526:	4a7a      	ldr	r2, [pc, #488]	; (8004710 <DisplayModuleStatus+0x294>)
 8004528:	6811      	ldr	r1, [r2, #0]
 800452a:	6019      	str	r1, [r3, #0]
 800452c:	8891      	ldrh	r1, [r2, #4]
 800452e:	8099      	strh	r1, [r3, #4]
 8004530:	7992      	ldrb	r2, [r2, #6]
 8004532:	719a      	strb	r2, [r3, #6]
				case PORTBUTTON :
						sprintf(pcUserMessage, "Connected to a button/switch\n\r"); break;
				default:
						break;
		}		
		strcat( (char *) pcOutputString, pcUserMessage);
 8004534:	496a      	ldr	r1, [pc, #424]	; (80046e0 <DisplayModuleStatus+0x264>)
 8004536:	0020      	movs	r0, r4
 8004538:	f010 fa64 	bl	8014a04 <strcat>
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 800453c:	3501      	adds	r5, #1
 800453e:	2d07      	cmp	r5, #7
 8004540:	d039      	beq.n	80045b6 <DisplayModuleStatus+0x13a>
		sprintf(pcUserMessage, "P%d: ", i);
 8004542:	002a      	movs	r2, r5
 8004544:	4649      	mov	r1, r9
 8004546:	0038      	movs	r0, r7
 8004548:	f010 fa3c 	bl	80149c4 <sprintf>
		strcat( (char *) pcOutputString, pcUserMessage);
 800454c:	0039      	movs	r1, r7
 800454e:	0020      	movs	r0, r4
 8004550:	f010 fa58 	bl	8014a04 <strcat>
		switch (portStatus[i])
 8004554:	4653      	mov	r3, sl
 8004556:	5ceb      	ldrb	r3, [r5, r3]
 8004558:	2b04      	cmp	r3, #4
 800455a:	d8eb      	bhi.n	8004534 <DisplayModuleStatus+0xb8>
 800455c:	4653      	mov	r3, sl
 800455e:	5ceb      	ldrb	r3, [r5, r3]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4a6c      	ldr	r2, [pc, #432]	; (8004714 <DisplayModuleStatus+0x298>)
 8004564:	58d3      	ldr	r3, [r2, r3]
 8004566:	469f      	mov	pc, r3
						sprintf(pcUserMessage, "Receiving messages\n\r"); break;
 8004568:	495d      	ldr	r1, [pc, #372]	; (80046e0 <DisplayModuleStatus+0x264>)
 800456a:	4b6b      	ldr	r3, [pc, #428]	; (8004718 <DisplayModuleStatus+0x29c>)
 800456c:	000a      	movs	r2, r1
 800456e:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004570:	c243      	stmia	r2!, {r0, r1, r6}
 8004572:	cb03      	ldmia	r3!, {r0, r1}
 8004574:	c203      	stmia	r2!, {r0, r1}
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	7013      	strb	r3, [r2, #0]
 800457a:	e7db      	b.n	8004534 <DisplayModuleStatus+0xb8>
						sprintf(pcUserMessage, "Streaming\n\r"); break;
 800457c:	4a58      	ldr	r2, [pc, #352]	; (80046e0 <DisplayModuleStatus+0x264>)
 800457e:	4b67      	ldr	r3, [pc, #412]	; (800471c <DisplayModuleStatus+0x2a0>)
 8004580:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004582:	c243      	stmia	r2!, {r0, r1, r6}
 8004584:	e7d6      	b.n	8004534 <DisplayModuleStatus+0xb8>
						sprintf(pcUserMessage, "Receiving user commands\n\r"); break;
 8004586:	4956      	ldr	r1, [pc, #344]	; (80046e0 <DisplayModuleStatus+0x264>)
 8004588:	4b65      	ldr	r3, [pc, #404]	; (8004720 <DisplayModuleStatus+0x2a4>)
 800458a:	000a      	movs	r2, r1
 800458c:	cb43      	ldmia	r3!, {r0, r1, r6}
 800458e:	c243      	stmia	r2!, {r0, r1, r6}
 8004590:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004592:	c243      	stmia	r2!, {r0, r1, r6}
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	8013      	strh	r3, [r2, #0]
 8004598:	e7cc      	b.n	8004534 <DisplayModuleStatus+0xb8>
						sprintf(pcUserMessage, "Connected to a button/switch\n\r"); break;
 800459a:	4951      	ldr	r1, [pc, #324]	; (80046e0 <DisplayModuleStatus+0x264>)
 800459c:	4b61      	ldr	r3, [pc, #388]	; (8004724 <DisplayModuleStatus+0x2a8>)
 800459e:	000a      	movs	r2, r1
 80045a0:	cb43      	ldmia	r3!, {r0, r1, r6}
 80045a2:	c243      	stmia	r2!, {r0, r1, r6}
 80045a4:	cb43      	ldmia	r3!, {r0, r1, r6}
 80045a6:	c243      	stmia	r2!, {r0, r1, r6}
 80045a8:	6819      	ldr	r1, [r3, #0]
 80045aa:	6011      	str	r1, [r2, #0]
 80045ac:	8899      	ldrh	r1, [r3, #4]
 80045ae:	8091      	strh	r1, [r2, #4]
 80045b0:	799b      	ldrb	r3, [r3, #6]
 80045b2:	7193      	strb	r3, [r2, #6]
 80045b4:	e7be      	b.n	8004534 <DisplayModuleStatus+0xb8>
	}	

	/* P2P DMAs */
	sprintf(pcUserMessage, "\n\rDMA Streams Status:\n\r");
 80045b6:	494a      	ldr	r1, [pc, #296]	; (80046e0 <DisplayModuleStatus+0x264>)
 80045b8:	4b5b      	ldr	r3, [pc, #364]	; (8004728 <DisplayModuleStatus+0x2ac>)
 80045ba:	000a      	movs	r2, r1
 80045bc:	cb61      	ldmia	r3!, {r0, r5, r6}
 80045be:	c261      	stmia	r2!, {r0, r5, r6}
 80045c0:	cb61      	ldmia	r3!, {r0, r5, r6}
 80045c2:	c261      	stmia	r2!, {r0, r5, r6}
	strcat( (char *) pcOutputString, pcUserMessage);	
 80045c4:	0020      	movs	r0, r4
 80045c6:	f010 fa1d 	bl	8014a04 <strcat>
	for (char i=1 ; i<=6 ; i++) {
 80045ca:	4e58      	ldr	r6, [pc, #352]	; (800472c <DisplayModuleStatus+0x2b0>)
	strcat( (char *) pcOutputString, pcUserMessage);	
 80045cc:	2701      	movs	r7, #1
		if (streamDMA[i-1].Instance == 0) {
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is free", i);
				strcat( (char *) pcOutputString, pcUserMessage);
		} else {
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is streaming from P%d to P%d", i, GetPort(streamDMA[i-1].Parent), GetPort(dmaStreamDst[i-1]));
 80045ce:	4d44      	ldr	r5, [pc, #272]	; (80046e0 <DisplayModuleStatus+0x264>)
 80045d0:	e00e      	b.n	80045f0 <DisplayModuleStatus+0x174>
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is free", i);
 80045d2:	4b43      	ldr	r3, [pc, #268]	; (80046e0 <DisplayModuleStatus+0x264>)
 80045d4:	469a      	mov	sl, r3
 80045d6:	003a      	movs	r2, r7
 80045d8:	4955      	ldr	r1, [pc, #340]	; (8004730 <DisplayModuleStatus+0x2b4>)
 80045da:	0018      	movs	r0, r3
 80045dc:	f010 f9f2 	bl	80149c4 <sprintf>
				strcat( (char *) pcOutputString, pcUserMessage);
 80045e0:	4651      	mov	r1, sl
 80045e2:	0020      	movs	r0, r4
 80045e4:	f010 fa0e 	bl	8014a04 <strcat>
	for (char i=1 ; i<=6 ; i++) {
 80045e8:	3701      	adds	r7, #1
 80045ea:	3638      	adds	r6, #56	; 0x38
 80045ec:	2f07      	cmp	r7, #7
 80045ee:	d017      	beq.n	8004620 <DisplayModuleStatus+0x1a4>
		if (streamDMA[i-1].Instance == 0) {
 80045f0:	6833      	ldr	r3, [r6, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d0ed      	beq.n	80045d2 <DisplayModuleStatus+0x156>
				sprintf(pcUserMessage, "\n\rStreaming DMA %d is streaming from P%d to P%d", i, GetPort(streamDMA[i-1].Parent), GetPort(dmaStreamDst[i-1]));
 80045f6:	6a70      	ldr	r0, [r6, #36]	; 0x24
 80045f8:	f007 f89a 	bl	800b730 <GetPort>
 80045fc:	4682      	mov	sl, r0
 80045fe:	00bb      	lsls	r3, r7, #2
 8004600:	4a4c      	ldr	r2, [pc, #304]	; (8004734 <DisplayModuleStatus+0x2b8>)
 8004602:	58d0      	ldr	r0, [r2, r3]
 8004604:	f007 f894 	bl	800b730 <GetPort>
 8004608:	9000      	str	r0, [sp, #0]
 800460a:	4653      	mov	r3, sl
 800460c:	003a      	movs	r2, r7
 800460e:	494a      	ldr	r1, [pc, #296]	; (8004738 <DisplayModuleStatus+0x2bc>)
 8004610:	0028      	movs	r0, r5
 8004612:	f010 f9d7 	bl	80149c4 <sprintf>
				strcat( (char *) pcOutputString, pcUserMessage);
 8004616:	0029      	movs	r1, r5
 8004618:	0020      	movs	r0, r4
 800461a:	f010 f9f3 	bl	8014a04 <strcat>
 800461e:	e7e3      	b.n	80045e8 <DisplayModuleStatus+0x16c>
		}
	}
	strcat( (char *) pcOutputString, "\n\r");
 8004620:	0020      	movs	r0, r4
 8004622:	f7fb fd79 	bl	8000118 <strlen>
 8004626:	1820      	adds	r0, r4, r0
 8004628:	2203      	movs	r2, #3
 800462a:	4944      	ldr	r1, [pc, #272]	; (800473c <DisplayModuleStatus+0x2c0>)
 800462c:	f00f ff98 	bl	8014560 <memcpy>
	
	/* Ports direction */
	strcat( (char *) pcOutputString, "\n\rThese ports are reversed: ");
 8004630:	0020      	movs	r0, r4
 8004632:	f7fb fd71 	bl	8000118 <strlen>
 8004636:	1820      	adds	r0, r4, r0
 8004638:	221d      	movs	r2, #29
 800463a:	4941      	ldr	r1, [pc, #260]	; (8004740 <DisplayModuleStatus+0x2c4>)
 800463c:	f00f ff90 	bl	8014560 <memcpy>
	temp = strlen( (char *) pcOutputString);
 8004640:	0020      	movs	r0, r4
 8004642:	f7fb fd69 	bl	8000118 <strlen>
 8004646:	4681      	mov	r9, r0
 8004648:	2500      	movs	r5, #0
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
	{		
		if ( (arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 800464a:	4e3e      	ldr	r6, [pc, #248]	; (8004744 <DisplayModuleStatus+0x2c8>)
 800464c:	4f23      	ldr	r7, [pc, #140]	; (80046dc <DisplayModuleStatus+0x260>)
 800464e:	e00c      	b.n	800466a <DisplayModuleStatus+0x1ee>
		{
			sprintf(pcUserMessage, "P%d ", p);
 8004650:	4b23      	ldr	r3, [pc, #140]	; (80046e0 <DisplayModuleStatus+0x264>)
 8004652:	469a      	mov	sl, r3
 8004654:	002a      	movs	r2, r5
 8004656:	493c      	ldr	r1, [pc, #240]	; (8004748 <DisplayModuleStatus+0x2cc>)
 8004658:	0018      	movs	r0, r3
 800465a:	f010 f9b3 	bl	80149c4 <sprintf>
			strcat( (char *) pcOutputString, pcUserMessage);
 800465e:	4651      	mov	r1, sl
 8004660:	0020      	movs	r0, r4
 8004662:	f010 f9cf 	bl	8014a04 <strcat>
	for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 8004666:	2d06      	cmp	r5, #6
 8004668:	d00b      	beq.n	8004682 <DisplayModuleStatus+0x206>
		if ( (arrayPortsDir[myID-1] & (0x8000>>(p-1))) ) 			/* Port is reversed */
 800466a:	0029      	movs	r1, r5
 800466c:	3501      	adds	r5, #1
 800466e:	783b      	ldrb	r3, [r7, #0]
 8004670:	3b01      	subs	r3, #1
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	5b9a      	ldrh	r2, [r3, r6]
 8004676:	2380      	movs	r3, #128	; 0x80
 8004678:	021b      	lsls	r3, r3, #8
 800467a:	410b      	asrs	r3, r1
 800467c:	4213      	tst	r3, r2
 800467e:	d0f2      	beq.n	8004666 <DisplayModuleStatus+0x1ea>
 8004680:	e7e6      	b.n	8004650 <DisplayModuleStatus+0x1d4>
		}	
	}
	if (temp == strlen( (char *) pcOutputString)) {				/* All ports are normal */
 8004682:	0020      	movs	r0, r4
 8004684:	f7fb fd48 	bl	8000118 <strlen>
 8004688:	464b      	mov	r3, r9
 800468a:	041e      	lsls	r6, r3, #16
 800468c:	0c36      	lsrs	r6, r6, #16
 800468e:	42b0      	cmp	r0, r6
 8004690:	d010      	beq.n	80046b4 <DisplayModuleStatus+0x238>
		strcat( (char *) pcOutputString, "None");
	}
	strcat( (char *) pcOutputString, "\n\r");
 8004692:	0020      	movs	r0, r4
 8004694:	f7fb fd40 	bl	8000118 <strlen>
 8004698:	1820      	adds	r0, r4, r0
 800469a:	2203      	movs	r2, #3
 800469c:	4927      	ldr	r1, [pc, #156]	; (800473c <DisplayModuleStatus+0x2c0>)
 800469e:	f00f ff5f 	bl	8014560 <memcpy>
	
	/* Display output */
	if (port)
 80046a2:	4643      	mov	r3, r8
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10b      	bne.n	80046c0 <DisplayModuleStatus+0x244>
		writePxMutex(port, (char *) pcOutputString, strlen( (char *) pcOutputString), cmd50ms, HAL_MAX_DELAY);
	
}
 80046a8:	b002      	add	sp, #8
 80046aa:	bce0      	pop	{r5, r6, r7}
 80046ac:	46ba      	mov	sl, r7
 80046ae:	46b1      	mov	r9, r6
 80046b0:	46a8      	mov	r8, r5
 80046b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcat( (char *) pcOutputString, "None");
 80046b4:	1820      	adds	r0, r4, r0
 80046b6:	2205      	movs	r2, #5
 80046b8:	4924      	ldr	r1, [pc, #144]	; (800474c <DisplayModuleStatus+0x2d0>)
 80046ba:	f00f ff51 	bl	8014560 <memcpy>
 80046be:	e7e8      	b.n	8004692 <DisplayModuleStatus+0x216>
		writePxMutex(port, (char *) pcOutputString, strlen( (char *) pcOutputString), cmd50ms, HAL_MAX_DELAY);
 80046c0:	0020      	movs	r0, r4
 80046c2:	f7fb fd29 	bl	8000118 <strlen>
 80046c6:	b282      	uxth	r2, r0
 80046c8:	2301      	movs	r3, #1
 80046ca:	425b      	negs	r3, r3
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	3333      	adds	r3, #51	; 0x33
 80046d0:	0021      	movs	r1, r4
 80046d2:	4640      	mov	r0, r8
 80046d4:	f009 fce8 	bl	800e0a8 <writePxMutex>
}
 80046d8:	e7e6      	b.n	80046a8 <DisplayModuleStatus+0x22c>
 80046da:	46c0      	nop			; (mov r8, r8)
 80046dc:	20000070 	.word	0x20000070
 80046e0:	20000e0c 	.word	0x20000e0c
 80046e4:	0801a9a4 	.word	0x0801a9a4
 80046e8:	20000b67 	.word	0x20000b67
 80046ec:	0801a9c0 	.word	0x0801a9c0
 80046f0:	0801a9dc 	.word	0x0801a9dc
 80046f4:	0801a9fc 	.word	0x0801a9fc
 80046f8:	0801aa08 	.word	0x0801aa08
 80046fc:	0801aa20 	.word	0x0801aa20
 8004700:	0801aa2c 	.word	0x0801aa2c
 8004704:	0801aa48 	.word	0x0801aa48
 8004708:	0801aa5c 	.word	0x0801aa5c
 800470c:	20000e5c 	.word	0x20000e5c
 8004710:	0801aa64 	.word	0x0801aa64
 8004714:	0801ab60 	.word	0x0801ab60
 8004718:	0801aa6c 	.word	0x0801aa6c
 800471c:	0801aa84 	.word	0x0801aa84
 8004720:	0801aa90 	.word	0x0801aa90
 8004724:	0801aaac 	.word	0x0801aaac
 8004728:	0801aacc 	.word	0x0801aacc
 800472c:	200016b4 	.word	0x200016b4
 8004730:	0801aae4 	.word	0x0801aae4
 8004734:	200011dc 	.word	0x200011dc
 8004738:	0801ab00 	.word	0x0801ab00
 800473c:	0801aa58 	.word	0x0801aa58
 8004740:	0801ab30 	.word	0x0801ab30
 8004744:	20006b38 	.word	0x20006b38
 8004748:	0801ab50 	.word	0x0801ab50
 800474c:	0801ab58 	.word	0x0801ab58

08004750 <GetID>:
/*-----------------------------------------------------------*/

/* --- Extract module ID from it's alias, ID string or keyword --- 
*/
int16_t GetID(char* string)
{
 8004750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004752:	46c6      	mov	lr, r8
 8004754:	b500      	push	{lr}
 8004756:	0006      	movs	r6, r0
	uint8_t id = 0, i = 0;
	
	if(!strcmp(string, "me"))							/* Check keywords */
 8004758:	4929      	ldr	r1, [pc, #164]	; (8004800 <GetID+0xb0>)
 800475a:	f7fb fcd3 	bl	8000104 <strcmp>
 800475e:	2800      	cmp	r0, #0
 8004760:	d010      	beq.n	8004784 <GetID+0x34>
		return myID;
	else if(!strcmp(string, "all"))							
 8004762:	4928      	ldr	r1, [pc, #160]	; (8004804 <GetID+0xb4>)
 8004764:	0030      	movs	r0, r6
 8004766:	f7fb fccd 	bl	8000104 <strcmp>
 800476a:	2800      	cmp	r0, #0
 800476c:	d045      	beq.n	80047fa <GetID+0xaa>
		return BOS_BROADCAST;				
	else if (string[0] == '#') 						/* Check IDs */
 800476e:	7833      	ldrb	r3, [r6, #0]
 8004770:	4698      	mov	r8, r3
 8004772:	2b23      	cmp	r3, #35	; 0x23
 8004774:	d00b      	beq.n	800478e <GetID+0x3e>
			return BOS_ERR_WrongID;				
	} 
	else 																	/* Check alias */
	{															
		/* Check module alias */
		for (i=0 ; i<N ; i++) {
 8004776:	4b24      	ldr	r3, [pc, #144]	; (8004808 <GetID+0xb8>)
 8004778:	781f      	ldrb	r7, [r3, #0]
 800477a:	2f00      	cmp	r7, #0
 800477c:	d02a      	beq.n	80047d4 <GetID+0x84>
 800477e:	4d23      	ldr	r5, [pc, #140]	; (800480c <GetID+0xbc>)
 8004780:	2400      	movs	r4, #0
 8004782:	e01c      	b.n	80047be <GetID+0x6e>
		return myID;
 8004784:	4b22      	ldr	r3, [pc, #136]	; (8004810 <GetID+0xc0>)
 8004786:	7818      	ldrb	r0, [r3, #0]
		}			
		
		return BOS_ERR_WrongName;			
	}
	
}
 8004788:	bc80      	pop	{r7}
 800478a:	46b8      	mov	r8, r7
 800478c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		id = atol(string+1);
 800478e:	1c70      	adds	r0, r6, #1
 8004790:	f00f fc85 	bl	801409e <atol>
 8004794:	b2c3      	uxtb	r3, r0
		if (id > 0 && id <= N)
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <GetID+0x52>
 800479a:	4a1b      	ldr	r2, [pc, #108]	; (8004808 <GetID+0xb8>)
 800479c:	7812      	ldrb	r2, [r2, #0]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d206      	bcs.n	80047b0 <GetID+0x60>
		else if (id == myID)
 80047a2:	4a1b      	ldr	r2, [pc, #108]	; (8004810 <GetID+0xc0>)
 80047a4:	7812      	ldrb	r2, [r2, #0]
			return BOS_ERR_WrongID;				
 80047a6:	2066      	movs	r0, #102	; 0x66
		else if (id == myID)
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d1ed      	bne.n	8004788 <GetID+0x38>
			return myID;
 80047ac:	b218      	sxth	r0, r3
 80047ae:	e7eb      	b.n	8004788 <GetID+0x38>
			return id;
 80047b0:	b218      	sxth	r0, r3
 80047b2:	e7e9      	b.n	8004788 <GetID+0x38>
		for (i=0 ; i<N ; i++) {
 80047b4:	3401      	adds	r4, #1
 80047b6:	b2e4      	uxtb	r4, r4
 80047b8:	350a      	adds	r5, #10
 80047ba:	42bc      	cmp	r4, r7
 80047bc:	d00a      	beq.n	80047d4 <GetID+0x84>
			if(!strcmp(string, moduleAlias[i]) && (*string != 0))	return (i);	
 80047be:	0029      	movs	r1, r5
 80047c0:	0030      	movs	r0, r6
 80047c2:	f7fb fc9f 	bl	8000104 <strcmp>
 80047c6:	2800      	cmp	r0, #0
 80047c8:	d1f4      	bne.n	80047b4 <GetID+0x64>
 80047ca:	4643      	mov	r3, r8
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0f1      	beq.n	80047b4 <GetID+0x64>
 80047d0:	b220      	sxth	r0, r4
 80047d2:	e7d9      	b.n	8004788 <GetID+0x38>
 80047d4:	4f0f      	ldr	r7, [pc, #60]	; (8004814 <GetID+0xc4>)
		for (i=0 ; i<N ; i++) {
 80047d6:	2500      	movs	r5, #0
			if (!strcmp(string, groupAlias[i]))	return (BOS_MULTICAST|(i<<8));
 80047d8:	0039      	movs	r1, r7
 80047da:	0030      	movs	r0, r6
 80047dc:	f7fb fc92 	bl	8000104 <strcmp>
 80047e0:	2800      	cmp	r0, #0
 80047e2:	d005      	beq.n	80047f0 <GetID+0xa0>
		for(i=0 ; i<MaxNumOfGroups ; i++) {
 80047e4:	3501      	adds	r5, #1
 80047e6:	370a      	adds	r7, #10
 80047e8:	2d0a      	cmp	r5, #10
 80047ea:	d1f5      	bne.n	80047d8 <GetID+0x88>
		return BOS_ERR_WrongName;			
 80047ec:	2064      	movs	r0, #100	; 0x64
 80047ee:	e7cb      	b.n	8004788 <GetID+0x38>
			if (!strcmp(string, groupAlias[i]))	return (BOS_MULTICAST|(i<<8));
 80047f0:	022c      	lsls	r4, r5, #8
 80047f2:	20fe      	movs	r0, #254	; 0xfe
 80047f4:	4320      	orrs	r0, r4
 80047f6:	b200      	sxth	r0, r0
 80047f8:	e7c6      	b.n	8004788 <GetID+0x38>
		return BOS_BROADCAST;				
 80047fa:	20ff      	movs	r0, #255	; 0xff
 80047fc:	e7c4      	b.n	8004788 <GetID+0x38>
 80047fe:	46c0      	nop			; (mov r8, r8)
 8004800:	0801ab74 	.word	0x0801ab74
 8004804:	0801ab78 	.word	0x0801ab78
 8004808:	2000001c 	.word	0x2000001c
 800480c:	20000dd4 	.word	0x20000dd4
 8004810:	20000070 	.word	0x20000070
 8004814:	20000cf8 	.word	0x20000cf8

08004818 <NameModule>:
/*-----------------------------------------------------------*/

/* --- Name a module with an alias --- 
*/
BOS_Status NameModule(uint8_t module, char* alias)
{
 8004818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800481a:	b083      	sub	sp, #12
 800481c:	9001      	str	r0, [sp, #4]
 800481e:	000f      	movs	r7, r1
	static const CLI_Definition_List_Item_t *pxCommand = NULL;
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;

	/* 1. Check module alias with keywords */
	for(i=0 ; i<NumOfKeywords ; i++)
 8004820:	4c29      	ldr	r4, [pc, #164]	; (80048c8 <NameModule+0xb0>)
 8004822:	0025      	movs	r5, r4
 8004824:	3510      	adds	r5, #16
	{
		if (!strcmp(alias, BOSkeywords[i]))	
 8004826:	0021      	movs	r1, r4
 8004828:	0038      	movs	r0, r7
 800482a:	f7fb fc6b 	bl	8000104 <strcmp>
 800482e:	2800      	cmp	r0, #0
 8004830:	d040      	beq.n	80048b4 <NameModule+0x9c>
	for(i=0 ; i<NumOfKeywords ; i++)
 8004832:	3404      	adds	r4, #4
 8004834:	42ac      	cmp	r4, r5
 8004836:	d1f6      	bne.n	8004826 <NameModule+0xe>
			return BOS_ERR_Keyword;
	}
	
	/* 2. Check module alias with other module aliases */
	for(i=1 ; i<N ; i++)
 8004838:	4b24      	ldr	r3, [pc, #144]	; (80048cc <NameModule+0xb4>)
 800483a:	781e      	ldrb	r6, [r3, #0]
 800483c:	2e01      	cmp	r6, #1
 800483e:	dd0c      	ble.n	800485a <NameModule+0x42>
 8004840:	4c23      	ldr	r4, [pc, #140]	; (80048d0 <NameModule+0xb8>)
 8004842:	340a      	adds	r4, #10
 8004844:	2501      	movs	r5, #1
	{
		if (!strcmp(alias, moduleAlias[i]))	
 8004846:	0021      	movs	r1, r4
 8004848:	0038      	movs	r0, r7
 800484a:	f7fb fc5b 	bl	8000104 <strcmp>
 800484e:	2800      	cmp	r0, #0
 8004850:	d032      	beq.n	80048b8 <NameModule+0xa0>
	for(i=1 ; i<N ; i++)
 8004852:	3501      	adds	r5, #1
 8004854:	340a      	adds	r4, #10
 8004856:	42b5      	cmp	r5, r6
 8004858:	dbf5      	blt.n	8004846 <NameModule+0x2e>
 800485a:	4c1e      	ldr	r4, [pc, #120]	; (80048d4 <NameModule+0xbc>)
 800485c:	0025      	movs	r5, r4
 800485e:	3564      	adds	r5, #100	; 0x64
	}

	/* 3. Check module alias with group aliases */
	for(i=0 ; i<MaxNumOfGroups ; i++)
	{
		if (!strcmp(alias, groupAlias[i]))	
 8004860:	0021      	movs	r1, r4
 8004862:	0038      	movs	r0, r7
 8004864:	f7fb fc4e 	bl	8000104 <strcmp>
 8004868:	2800      	cmp	r0, #0
 800486a:	d028      	beq.n	80048be <NameModule+0xa6>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 800486c:	340a      	adds	r4, #10
 800486e:	42ac      	cmp	r4, r5
 8004870:	d1f6      	bne.n	8004860 <NameModule+0x48>
			return BOS_ERR_ExistingAlias;
	}
	
	/* 4. Check alias with BOS and module commands */
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8004872:	4c19      	ldr	r4, [pc, #100]	; (80048d8 <NameModule+0xc0>)
 8004874:	4b19      	ldr	r3, [pc, #100]	; (80048dc <NameModule+0xc4>)
 8004876:	601c      	str	r4, [r3, #0]
 8004878:	001e      	movs	r6, r3
	{
		pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800487e:	0028      	movs	r0, r5
 8004880:	f7fb fc4a 	bl	8000118 <strlen>
 8004884:	0002      	movs	r2, r0
		
		if( !strncmp(alias, (const char *) pcRegisteredCommandString, xCommandStringLength ) ) {
 8004886:	0029      	movs	r1, r5
 8004888:	0038      	movs	r0, r7
 800488a:	f010 f8de 	bl	8014a4a <strncmp>
 800488e:	2800      	cmp	r0, #0
 8004890:	d017      	beq.n	80048c2 <NameModule+0xaa>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8004892:	6864      	ldr	r4, [r4, #4]
 8004894:	6034      	str	r4, [r6, #0]
 8004896:	2c00      	cmp	r4, #0
 8004898:	d1ef      	bne.n	800487a <NameModule+0x62>
			return BOS_ERR_ExistingCmd;
		}
	}
	
	/* 5. Module alias is unique */
	strcpy(moduleAlias[module], alias);
 800489a:	9b01      	ldr	r3, [sp, #4]
 800489c:	0098      	lsls	r0, r3, #2
 800489e:	469c      	mov	ip, r3
 80048a0:	4460      	add	r0, ip
 80048a2:	0040      	lsls	r0, r0, #1
 80048a4:	4e0a      	ldr	r6, [pc, #40]	; (80048d0 <NameModule+0xb8>)
 80048a6:	1830      	adds	r0, r6, r0
 80048a8:	0039      	movs	r1, r7
 80048aa:	f010 f8c6 	bl	8014a3a <strcpy>
	
	/* 6. Share new module alias with other modules */
	
	
	/* 7. Save new alias to emulated EEPROM */
	result = SaveEEalias();
 80048ae:	f7fe fe03 	bl	80034b8 <SaveEEalias>
	
	return result;
 80048b2:	e002      	b.n	80048ba <NameModule+0xa2>
			return BOS_ERR_Keyword;
 80048b4:	2006      	movs	r0, #6
 80048b6:	e000      	b.n	80048ba <NameModule+0xa2>
			return BOS_ERR_ExistingAlias;
 80048b8:	2007      	movs	r0, #7
}
 80048ba:	b003      	add	sp, #12
 80048bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return BOS_ERR_ExistingAlias;
 80048be:	2007      	movs	r0, #7
 80048c0:	e7fb      	b.n	80048ba <NameModule+0xa2>
			return BOS_ERR_ExistingCmd;
 80048c2:	2008      	movs	r0, #8
 80048c4:	e7f9      	b.n	80048ba <NameModule+0xa2>
 80048c6:	46c0      	nop			; (mov r8, r8)
 80048c8:	0801adac 	.word	0x0801adac
 80048cc:	2000001c 	.word	0x2000001c
 80048d0:	20000dd4 	.word	0x20000dd4
 80048d4:	20000cf8 	.word	0x20000cf8
 80048d8:	20000180 	.word	0x20000180
 80048dc:	20000e64 	.word	0x20000e64

080048e0 <AddModuleToGroup>:
/*-----------------------------------------------------------*/

/* --- Add a module to this group --- 
*/
BOS_Status AddModuleToGroup(uint8_t module, char* group)
{
 80048e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048e2:	46ce      	mov	lr, r9
 80048e4:	b500      	push	{lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	9001      	str	r0, [sp, #4]
 80048ea:	000e      	movs	r6, r1
	const int8_t *pcRegisteredCommandString;
	size_t xCommandStringLength;

	/* Check alias with other group aliases */
	
	for(i=0 ; i<MaxNumOfGroups ; i++)
 80048ec:	4f36      	ldr	r7, [pc, #216]	; (80049c8 <AddModuleToGroup+0xe8>)
{
 80048ee:	003d      	movs	r5, r7
	for(i=0 ; i<MaxNumOfGroups ; i++)
 80048f0:	2400      	movs	r4, #0
	{
		/* This group already exists */
		if (!strcmp(group, groupAlias[i]))	
 80048f2:	0029      	movs	r1, r5
 80048f4:	0030      	movs	r0, r6
 80048f6:	f7fb fc05 	bl	8000104 <strcmp>
 80048fa:	2800      	cmp	r0, #0
 80048fc:	d048      	beq.n	8004990 <AddModuleToGroup+0xb0>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 80048fe:	3401      	adds	r4, #1
 8004900:	350a      	adds	r5, #10
 8004902:	2c0a      	cmp	r4, #10
 8004904:	d1f5      	bne.n	80048f2 <AddModuleToGroup+0x12>
 8004906:	4c31      	ldr	r4, [pc, #196]	; (80049cc <AddModuleToGroup+0xec>)
 8004908:	0025      	movs	r5, r4
 800490a:	3510      	adds	r5, #16
	/* This is a new group - Verify alias and create the group */
	
	/* 1. Check group alias with keywords */
	for(j=0 ; j<NumOfKeywords ; j++)
	{
		if (!strcmp(group, BOSkeywords[j]))	
 800490c:	0021      	movs	r1, r4
 800490e:	0030      	movs	r0, r6
 8004910:	f7fb fbf8 	bl	8000104 <strcmp>
 8004914:	2800      	cmp	r0, #0
 8004916:	d051      	beq.n	80049bc <AddModuleToGroup+0xdc>
	for(j=0 ; j<NumOfKeywords ; j++)
 8004918:	3404      	adds	r4, #4
 800491a:	42ac      	cmp	r4, r5
 800491c:	d1f6      	bne.n	800490c <AddModuleToGroup+0x2c>
			return BOS_ERR_Keyword;
	}	

	/* 2. Check group alias with module aliases */
	for(j=1 ; j<N ; j++)
 800491e:	4b2c      	ldr	r3, [pc, #176]	; (80049d0 <AddModuleToGroup+0xf0>)
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	4699      	mov	r9, r3
 8004924:	2b01      	cmp	r3, #1
 8004926:	dd0c      	ble.n	8004942 <AddModuleToGroup+0x62>
 8004928:	4c2a      	ldr	r4, [pc, #168]	; (80049d4 <AddModuleToGroup+0xf4>)
 800492a:	340a      	adds	r4, #10
 800492c:	2501      	movs	r5, #1
	{
		if (!strcmp(group, moduleAlias[j]))	
 800492e:	0021      	movs	r1, r4
 8004930:	0030      	movs	r0, r6
 8004932:	f7fb fbe7 	bl	8000104 <strcmp>
 8004936:	2800      	cmp	r0, #0
 8004938:	d042      	beq.n	80049c0 <AddModuleToGroup+0xe0>
	for(j=1 ; j<N ; j++)
 800493a:	3501      	adds	r5, #1
 800493c:	340a      	adds	r4, #10
 800493e:	454d      	cmp	r5, r9
 8004940:	dbf5      	blt.n	800492e <AddModuleToGroup+0x4e>
			return BOS_ERR_ExistingAlias;
	}		
	
	/* 3. Check group alias with BOS and module commands */
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8004942:	4c25      	ldr	r4, [pc, #148]	; (80049d8 <AddModuleToGroup+0xf8>)
 8004944:	4b25      	ldr	r3, [pc, #148]	; (80049dc <AddModuleToGroup+0xfc>)
 8004946:	601c      	str	r4, [r3, #0]
 8004948:	4699      	mov	r9, r3
	{
		pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	681d      	ldr	r5, [r3, #0]
		xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800494e:	0028      	movs	r0, r5
 8004950:	f7fb fbe2 	bl	8000118 <strlen>
 8004954:	0002      	movs	r2, r0
		
		if( !strncmp(group, (const char *) pcRegisteredCommandString, xCommandStringLength ) ) {
 8004956:	0029      	movs	r1, r5
 8004958:	0030      	movs	r0, r6
 800495a:	f010 f876 	bl	8014a4a <strncmp>
 800495e:	2800      	cmp	r0, #0
 8004960:	d030      	beq.n	80049c4 <AddModuleToGroup+0xe4>
	for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8004962:	6864      	ldr	r4, [r4, #4]
 8004964:	464b      	mov	r3, r9
 8004966:	601c      	str	r4, [r3, #0]
 8004968:	2c00      	cmp	r4, #0
 800496a:	d1ee      	bne.n	800494a <AddModuleToGroup+0x6a>
	}			
	
	/* 4. Group alias is unique - copy to first empty location */
	for(i=0 ; i<MaxNumOfGroups ; i++)
	{
		if (!groupAlias[i][0]) {	
 800496c:	783b      	ldrb	r3, [r7, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d01b      	beq.n	80049aa <AddModuleToGroup+0xca>
	for(i=0 ; i<MaxNumOfGroups ; i++)
 8004972:	3401      	adds	r4, #1
 8004974:	370a      	adds	r7, #10
 8004976:	2c0a      	cmp	r4, #10
 8004978:	d1f8      	bne.n	800496c <AddModuleToGroup+0x8c>
			break;
		}
	}		
	
	/* 5. Add this module to the new group */
	groupModules[module-1] |= (0x0001<<i);
 800497a:	9f01      	ldr	r7, [sp, #4]
 800497c:	3f01      	subs	r7, #1
 800497e:	4918      	ldr	r1, [pc, #96]	; (80049e0 <AddModuleToGroup+0x100>)
 8004980:	007f      	lsls	r7, r7, #1
 8004982:	2201      	movs	r2, #1
 8004984:	40a2      	lsls	r2, r4
 8004986:	5a7b      	ldrh	r3, [r7, r1]
 8004988:	4313      	orrs	r3, r2
 800498a:	527b      	strh	r3, [r7, r1]


	/* 7. Save new group to emulated EEPROM - Should call this manually */
	//result = SaveEEgroup();			
	
	return result;
 800498c:	2000      	movs	r0, #0
 800498e:	e008      	b.n	80049a2 <AddModuleToGroup+0xc2>
			groupModules[module-1] |= (0x0001<<i);	
 8004990:	9f01      	ldr	r7, [sp, #4]
 8004992:	3f01      	subs	r7, #1
 8004994:	4912      	ldr	r1, [pc, #72]	; (80049e0 <AddModuleToGroup+0x100>)
 8004996:	007f      	lsls	r7, r7, #1
 8004998:	2201      	movs	r2, #1
 800499a:	40a2      	lsls	r2, r4
 800499c:	5a7b      	ldrh	r3, [r7, r1]
 800499e:	4313      	orrs	r3, r2
 80049a0:	527b      	strh	r3, [r7, r1]
}
 80049a2:	b002      	add	sp, #8
 80049a4:	bc80      	pop	{r7}
 80049a6:	46b9      	mov	r9, r7
 80049a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			strcpy(groupAlias[i], group);	
 80049aa:	00a0      	lsls	r0, r4, #2
 80049ac:	1900      	adds	r0, r0, r4
 80049ae:	0040      	lsls	r0, r0, #1
 80049b0:	4b05      	ldr	r3, [pc, #20]	; (80049c8 <AddModuleToGroup+0xe8>)
 80049b2:	1818      	adds	r0, r3, r0
 80049b4:	0031      	movs	r1, r6
 80049b6:	f010 f840 	bl	8014a3a <strcpy>
			break;
 80049ba:	e7de      	b.n	800497a <AddModuleToGroup+0x9a>
			return BOS_ERR_Keyword;
 80049bc:	2006      	movs	r0, #6
 80049be:	e7f0      	b.n	80049a2 <AddModuleToGroup+0xc2>
			return BOS_ERR_ExistingAlias;
 80049c0:	2007      	movs	r0, #7
 80049c2:	e7ee      	b.n	80049a2 <AddModuleToGroup+0xc2>
			return BOS_ERR_ExistingCmd;
 80049c4:	2008      	movs	r0, #8
 80049c6:	e7ec      	b.n	80049a2 <AddModuleToGroup+0xc2>
 80049c8:	20000cf8 	.word	0x20000cf8
 80049cc:	0801adac 	.word	0x0801adac
 80049d0:	2000001c 	.word	0x2000001c
 80049d4:	20000dd4 	.word	0x20000dd4
 80049d8:	20000180 	.word	0x20000180
 80049dc:	20000e68 	.word	0x20000e68
 80049e0:	20000d5c 	.word	0x20000d5c

080049e4 <ReadPortsDir>:
/*-----------------------------------------------------------*/

/* --- Read Ports directions when a pre-defined topology file is used --- 
*/
BOS_Status ReadPortsDir(void)
{
 80049e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049e6:	46de      	mov	lr, fp
 80049e8:	4657      	mov	r7, sl
 80049ea:	464e      	mov	r6, r9
 80049ec:	4645      	mov	r5, r8
 80049ee:	b5e0      	push	{r5, r6, r7, lr}
	BOS_Status result = BOS_OK; 
	
	/* Ask all other modules for their ports directions */
	for (uint8_t i=1 ; i<=N ; i++) 
 80049f0:	4b23      	ldr	r3, [pc, #140]	; (8004a80 <ReadPortsDir+0x9c>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	4699      	mov	r9, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d03a      	beq.n	8004a70 <ReadPortsDir+0x8c>
 80049fa:	2501      	movs	r5, #1
	BOS_Status result = BOS_OK; 
 80049fc:	2300      	movs	r3, #0
 80049fe:	4699      	mov	r9, r3
	{
		if (i != myID) {
 8004a00:	4b20      	ldr	r3, [pc, #128]	; (8004a84 <ReadPortsDir+0xa0>)
 8004a02:	4698      	mov	r8, r3
			} 	
		} else {
			/* Check my own ports */
			for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
					arrayPortsDir[myID-1] |= (0x8000>>(p-1));		/* Set bit to 1 */
 8004a04:	469b      	mov	fp, r3
 8004a06:	4f20      	ldr	r7, [pc, #128]	; (8004a88 <ReadPortsDir+0xa4>)
			if (responseStatus != BOS_OK)	{
 8004a08:	4b20      	ldr	r3, [pc, #128]	; (8004a8c <ReadPortsDir+0xa8>)
 8004a0a:	469a      	mov	sl, r3
 8004a0c:	e01d      	b.n	8004a4a <ReadPortsDir+0x66>
 8004a0e:	2400      	movs	r4, #0
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8004a10:	2680      	movs	r6, #128	; 0x80
 8004a12:	0236      	lsls	r6, r6, #8
 8004a14:	e002      	b.n	8004a1c <ReadPortsDir+0x38>
			for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 8004a16:	3401      	adds	r4, #1
 8004a18:	2c06      	cmp	r4, #6
 8004a1a:	d010      	beq.n	8004a3e <ReadPortsDir+0x5a>
				if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 8004a1c:	1c60      	adds	r0, r4, #1
 8004a1e:	b2c0      	uxtb	r0, r0
 8004a20:	f009 fb20 	bl	800e064 <GetUart>
 8004a24:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004a26:	42b3      	cmp	r3, r6
 8004a28:	d1f5      	bne.n	8004a16 <ReadPortsDir+0x32>
					arrayPortsDir[myID-1] |= (0x8000>>(p-1));		/* Set bit to 1 */
 8004a2a:	465b      	mov	r3, fp
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	5bda      	ldrh	r2, [r3, r7]
 8004a34:	0031      	movs	r1, r6
 8004a36:	4121      	asrs	r1, r4
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	53da      	strh	r2, [r3, r7]
 8004a3c:	e7eb      	b.n	8004a16 <ReadPortsDir+0x32>
	for (uint8_t i=1 ; i<=N ; i++) 
 8004a3e:	3501      	adds	r5, #1
 8004a40:	b2ed      	uxtb	r5, r5
 8004a42:	4b0f      	ldr	r3, [pc, #60]	; (8004a80 <ReadPortsDir+0x9c>)
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	42ab      	cmp	r3, r5
 8004a48:	d312      	bcc.n	8004a70 <ReadPortsDir+0x8c>
		if (i != myID) {
 8004a4a:	4643      	mov	r3, r8
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	42ab      	cmp	r3, r5
 8004a50:	d0dd      	beq.n	8004a0e <ReadPortsDir+0x2a>
			SendMessageToModule(i, CODE_READ_PORT_DIR, 0);
 8004a52:	2200      	movs	r2, #0
 8004a54:	2113      	movs	r1, #19
 8004a56:	0028      	movs	r0, r5
 8004a58:	f004 fd64 	bl	8009524 <SendMessageToModule>
			Delay_ms_no_rtos(50);
 8004a5c:	2032      	movs	r0, #50	; 0x32
 8004a5e:	f009 f911 	bl	800dc84 <StartMilliDelay>
			if (responseStatus != BOS_OK)	{
 8004a62:	4653      	mov	r3, sl
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0e9      	beq.n	8004a3e <ReadPortsDir+0x5a>
				result = BOS_ERR_NoResponse;
 8004a6a:	2302      	movs	r3, #2
 8004a6c:	4699      	mov	r9, r3
 8004a6e:	e7e6      	b.n	8004a3e <ReadPortsDir+0x5a>
			}
		}
	}
	
	return result;
}
 8004a70:	4648      	mov	r0, r9
 8004a72:	bcf0      	pop	{r4, r5, r6, r7}
 8004a74:	46bb      	mov	fp, r7
 8004a76:	46b2      	mov	sl, r6
 8004a78:	46a9      	mov	r9, r5
 8004a7a:	46a0      	mov	r8, r4
 8004a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a7e:	46c0      	nop			; (mov r8, r8)
 8004a80:	2000001c 	.word	0x2000001c
 8004a84:	20000070 	.word	0x20000070
 8004a88:	20006b38 	.word	0x20006b38
 8004a8c:	20000e78 	.word	0x20000e78

08004a90 <GetDateString>:
/*-----------------------------------------------------------*/

/* --- Make a data string with format weekday / month / date / year 
*/
char *GetDateString(void)
{
 8004a90:	b510      	push	{r4, lr}
 8004a92:	b082      	sub	sp, #8
  static const char formatDateStr[] = "%s %02d/%02d/%04d";
  char *buffer = malloc(30 * sizeof(int8_t));
 8004a94:	201e      	movs	r0, #30
 8004a96:	f00f fb2d 	bl	80140f4 <malloc>
 8004a9a:	0004      	movs	r4, r0
  memset (buffer, 0x00, 30 * sizeof(int8_t));
 8004a9c:	221e      	movs	r2, #30
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	f00f fd67 	bl	8014572 <memset>
  sprintf(buffer, formatDateStr, weekdayString[BOS.date.weekday-1], BOS.date.month, BOS.date.day, BOS.date.year);
 8004aa4:	4908      	ldr	r1, [pc, #32]	; (8004ac8 <GetDateString+0x38>)
 8004aa6:	7d8b      	ldrb	r3, [r1, #22]
 8004aa8:	7d0a      	ldrb	r2, [r1, #20]
 8004aaa:	3a01      	subs	r2, #1
 8004aac:	0092      	lsls	r2, r2, #2
 8004aae:	4807      	ldr	r0, [pc, #28]	; (8004acc <GetDateString+0x3c>)
 8004ab0:	5812      	ldr	r2, [r2, r0]
 8004ab2:	8b08      	ldrh	r0, [r1, #24]
 8004ab4:	9001      	str	r0, [sp, #4]
 8004ab6:	7d49      	ldrb	r1, [r1, #21]
 8004ab8:	9100      	str	r1, [sp, #0]
 8004aba:	4905      	ldr	r1, [pc, #20]	; (8004ad0 <GetDateString+0x40>)
 8004abc:	0020      	movs	r0, r4
 8004abe:	f00f ff81 	bl	80149c4 <sprintf>
  return buffer;
}
 8004ac2:	0020      	movs	r0, r4
 8004ac4:	b002      	add	sp, #8
 8004ac6:	bd10      	pop	{r4, pc}
 8004ac8:	200066e4 	.word	0x200066e4
 8004acc:	0801ae54 	.word	0x0801ae54
 8004ad0:	0801adbc 	.word	0x0801adbc

08004ad4 <Bridge>:
/*-----------------------------------------------------------*/

/* --- Bridge two array/communication ports together
*/
BOS_Status Bridge(uint8_t port1, uint8_t port2)
{
 8004ad4:	b500      	push	{lr}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	000a      	movs	r2, r1
	// Link the ports together with an infinite DMA stream
	return StartScastDMAStream(port1, myID, port2, myID, BIDIRECTIONAL, 0xFFFFFFFF, 0xFFFFFFFF, true);
 8004ada:	4b07      	ldr	r3, [pc, #28]	; (8004af8 <Bridge+0x24>)
 8004adc:	7819      	ldrb	r1, [r3, #0]
 8004ade:	2301      	movs	r3, #1
 8004ae0:	9303      	str	r3, [sp, #12]
 8004ae2:	3b02      	subs	r3, #2
 8004ae4:	9302      	str	r3, [sp, #8]
 8004ae6:	9301      	str	r3, [sp, #4]
 8004ae8:	3303      	adds	r3, #3
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	000b      	movs	r3, r1
 8004aee:	f004 fd3f 	bl	8009570 <StartScastDMAStream>
}
 8004af2:	b005      	add	sp, #20
 8004af4:	bd00      	pop	{pc}
 8004af6:	46c0      	nop			; (mov r8, r8)
 8004af8:	20000070 	.word	0x20000070

08004afc <Unbridge>:
/*-----------------------------------------------------------*/

/* --- Un-bridge two array/communication ports
*/
BOS_Status Unbridge(uint8_t port1, uint8_t port2)
{		
 8004afc:	b530      	push	{r4, r5, lr}
 8004afe:	b087      	sub	sp, #28
 8004b00:	0005      	movs	r5, r0
 8004b02:	000c      	movs	r4, r1
	// Remove the stream from EEPROM
	SaveEEstreams(0, 0, 0, 0, 0, 0, 0, 0, 0);
 8004b04:	2300      	movs	r3, #0
 8004b06:	9304      	str	r3, [sp, #16]
 8004b08:	9303      	str	r3, [sp, #12]
 8004b0a:	9302      	str	r3, [sp, #8]
 8004b0c:	9301      	str	r3, [sp, #4]
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	2200      	movs	r2, #0
 8004b12:	2100      	movs	r1, #0
 8004b14:	2000      	movs	r0, #0
 8004b16:	f7fe fe53 	bl	80037c0 <SaveEEstreams>
	
	// Stop the DMA streams and enable messaging back on these ports
	if(streamDMA[port1-1].Instance != 0 && streamDMA[port2-1].Instance != 0) 
 8004b1a:	1e6a      	subs	r2, r5, #1
 8004b1c:	00d3      	lsls	r3, r2, #3
 8004b1e:	1a9b      	subs	r3, r3, r2
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	4a14      	ldr	r2, [pc, #80]	; (8004b74 <Unbridge+0x78>)
 8004b24:	589b      	ldr	r3, [r3, r2]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d014      	beq.n	8004b54 <Unbridge+0x58>
 8004b2a:	1e62      	subs	r2, r4, #1
 8004b2c:	00d3      	lsls	r3, r2, #3
 8004b2e:	1a9b      	subs	r3, r3, r2
 8004b30:	00db      	lsls	r3, r3, #3
 8004b32:	4a10      	ldr	r2, [pc, #64]	; (8004b74 <Unbridge+0x78>)
 8004b34:	589b      	ldr	r3, [r3, r2]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d104      	bne.n	8004b44 <Unbridge+0x48>
			{SwitchStreamDMAToMsg(port1);SwitchStreamDMAToMsg(port2);return BOS_OK;}
	else if (streamDMA[port1-1].Instance != 0)
			{SwitchStreamDMAToMsg(port1);return BOS_OK;}
 8004b3a:	0028      	movs	r0, r5
 8004b3c:	f002 fe80 	bl	8007840 <SwitchStreamDMAToMsg>
 8004b40:	2000      	movs	r0, #0
 8004b42:	e013      	b.n	8004b6c <Unbridge+0x70>
			{SwitchStreamDMAToMsg(port1);SwitchStreamDMAToMsg(port2);return BOS_OK;}
 8004b44:	0028      	movs	r0, r5
 8004b46:	f002 fe7b 	bl	8007840 <SwitchStreamDMAToMsg>
 8004b4a:	0020      	movs	r0, r4
 8004b4c:	f002 fe78 	bl	8007840 <SwitchStreamDMAToMsg>
 8004b50:	2000      	movs	r0, #0
 8004b52:	e00b      	b.n	8004b6c <Unbridge+0x70>
	else if (streamDMA[port2-1].Instance != 0)
 8004b54:	1e62      	subs	r2, r4, #1
 8004b56:	00d3      	lsls	r3, r2, #3
 8004b58:	1a9b      	subs	r3, r3, r2
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	4a05      	ldr	r2, [pc, #20]	; (8004b74 <Unbridge+0x78>)
 8004b5e:	589b      	ldr	r3, [r3, r2]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d005      	beq.n	8004b70 <Unbridge+0x74>
			{SwitchStreamDMAToMsg(port2);return BOS_OK;}	
 8004b64:	0020      	movs	r0, r4
 8004b66:	f002 fe6b 	bl	8007840 <SwitchStreamDMAToMsg>
 8004b6a:	2000      	movs	r0, #0
	else {return BOS_ERR_WrongValue;}
}
 8004b6c:	b007      	add	sp, #28
 8004b6e:	bd30      	pop	{r4, r5, pc}
	else {return BOS_ERR_WrongValue;}
 8004b70:	2068      	movs	r0, #104	; 0x68
 8004b72:	e7fb      	b.n	8004b6c <Unbridge+0x70>
 8004b74:	200016b4 	.word	0x200016b4

08004b78 <StringToLowerCase>:
/*-----------------------------------------------------------*/

/* Convert a string to lower case
*/
void StringToLowerCase(char *string)
{
 8004b78:	b530      	push	{r4, r5, lr}
	for(int i = 0; string[i]; i++){
 8004b7a:	7803      	ldrb	r3, [r0, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00f      	beq.n	8004ba0 <StringToLowerCase+0x28>
		string[i] = tolower(string[i]);
 8004b80:	4d08      	ldr	r5, [pc, #32]	; (8004ba4 <StringToLowerCase+0x2c>)
 8004b82:	2403      	movs	r4, #3
 8004b84:	e004      	b.n	8004b90 <StringToLowerCase+0x18>
 8004b86:	7001      	strb	r1, [r0, #0]
	for(int i = 0; string[i]; i++){
 8004b88:	3001      	adds	r0, #1
 8004b8a:	7803      	ldrb	r3, [r0, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d007      	beq.n	8004ba0 <StringToLowerCase+0x28>
		string[i] = tolower(string[i]);
 8004b90:	5cea      	ldrb	r2, [r5, r3]
 8004b92:	4022      	ands	r2, r4
 8004b94:	0019      	movs	r1, r3
 8004b96:	2a01      	cmp	r2, #1
 8004b98:	d1f5      	bne.n	8004b86 <StringToLowerCase+0xe>
 8004b9a:	3320      	adds	r3, #32
 8004b9c:	0019      	movs	r1, r3
 8004b9e:	e7f2      	b.n	8004b86 <StringToLowerCase+0xe>
	}
}
 8004ba0:	bd30      	pop	{r4, r5, pc}
 8004ba2:	46c0      	nop			; (mov r8, r8)
 8004ba4:	0801d691 	.word	0x0801d691

08004ba8 <ParseSnippetCondition>:
/*-----------------------------------------------------------*/

/* Parse Snippet conditions into the internal buffer
*/
BOS_Status ParseSnippetCondition(char *string)
{
 8004ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004baa:	46ce      	mov	lr, r9
 8004bac:	4647      	mov	r7, r8
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b089      	sub	sp, #36	; 0x24
 8004bb2:	0005      	movs	r5, r0
	static int8_t cInputString[ cmdMAX_INPUT_SIZE ];
	BOS_Status status = BOS_OK;
	uint8_t port = 0;
	
	// A. Verify first there's still memory left to store Snippets	
	if (numOfRecordedSnippets == MAX_SNIPPETS)
 8004bb4:	4bde      	ldr	r3, [pc, #888]	; (8004f30 <ParseSnippetCondition+0x388>)
 8004bb6:	781c      	ldrb	r4, [r3, #0]
 8004bb8:	2c05      	cmp	r4, #5
 8004bba:	d100      	bne.n	8004bbe <ParseSnippetCondition+0x16>
 8004bbc:	e21a      	b.n	8004ff4 <ParseSnippetCondition+0x44c>
		return BOS_ERR_SNIP_MEM_FULL;
	}
	// Initialize the next empty location
	else
	{
		snippets[numOfRecordedSnippets].cond.conditionType = 0;
 8004bbe:	49dd      	ldr	r1, [pc, #884]	; (8004f34 <ParseSnippetCondition+0x38c>)
 8004bc0:	00a3      	lsls	r3, r4, #2
 8004bc2:	191a      	adds	r2, r3, r4
 8004bc4:	0092      	lsls	r2, r2, #2
 8004bc6:	2000      	movs	r0, #0
 8004bc8:	5450      	strb	r0, [r2, r1]
		snippets[numOfRecordedSnippets].cond.mathOperator = 0;			
 8004bca:	191a      	adds	r2, r3, r4
 8004bcc:	0092      	lsls	r2, r2, #2
 8004bce:	188a      	adds	r2, r1, r2
 8004bd0:	7050      	strb	r0, [r2, #1]
		memset(snippets[numOfRecordedSnippets].cond.buffer1, 0, 4);			
 8004bd2:	1918      	adds	r0, r3, r4
 8004bd4:	0080      	lsls	r0, r0, #2
 8004bd6:	3002      	adds	r0, #2
 8004bd8:	1840      	adds	r0, r0, r1
 8004bda:	2204      	movs	r2, #4
 8004bdc:	2100      	movs	r1, #0
 8004bde:	f00f fcc8 	bl	8014572 <memset>
	}
	
	// B. Parse Snippets based on their condition type 
	
	// #1: Button event: condition starts with "bx." 
	if(string[0] == 'b' && string[2] == '.')
 8004be2:	782b      	ldrb	r3, [r5, #0]
 8004be4:	2b62      	cmp	r3, #98	; 0x62
 8004be6:	d102      	bne.n	8004bee <ParseSnippetCondition+0x46>
 8004be8:	78ab      	ldrb	r3, [r5, #2]
 8004bea:	2b2e      	cmp	r3, #46	; 0x2e
 8004bec:	d032      	beq.n	8004c54 <ParseSnippetCondition+0xac>
		}
	}
	// Module-related conditions (local only for now)
	else
	{
		strcpy( (char *)cInputString, string);
 8004bee:	4cd2      	ldr	r4, [pc, #840]	; (8004f38 <ParseSnippetCondition+0x390>)
 8004bf0:	0029      	movs	r1, r5
 8004bf2:	0020      	movs	r0, r4
 8004bf4:	f00f ff21 	bl	8014a3a <strcpy>

		// This is probably a three part condition, extract them out
		char *firstPart, *secondPart, *thirdPart; uint8_t modPar1 = 0, modPar2 = 0;
		firstPart = strtok ( (char *)cInputString, " ");
 8004bf8:	4dd0      	ldr	r5, [pc, #832]	; (8004f3c <ParseSnippetCondition+0x394>)
 8004bfa:	0029      	movs	r1, r5
 8004bfc:	0020      	movs	r0, r4
 8004bfe:	f010 fd93 	bl	8015728 <strtok>
 8004c02:	0004      	movs	r4, r0
		secondPart = strtok ( NULL, " ");
 8004c04:	0029      	movs	r1, r5
 8004c06:	2000      	movs	r0, #0
 8004c08:	f010 fd8e 	bl	8015728 <strtok>
 8004c0c:	0006      	movs	r6, r0
		thirdPart = strtok ( NULL, " ");
 8004c0e:	0029      	movs	r1, r5
 8004c10:	2000      	movs	r0, #0
 8004c12:	f010 fd89 	bl	8015728 <strtok>
 8004c16:	0005      	movs	r5, r0
		
		// Check if first part is module parameter or event
		if (firstPart == NULL) 
 8004c18:	2c00      	cmp	r4, #0
 8004c1a:	d100      	bne.n	8004c1e <ParseSnippetCondition+0x76>
 8004c1c:	e1ec      	b.n	8004ff8 <ParseSnippetCondition+0x450>
		{
			return BOS_ERR_WrongParam;
		} 
		else 
		{
			modPar1 = IsModuleParameter(firstPart);
 8004c1e:	0020      	movs	r0, r4
 8004c20:	f7fe fff2 	bl	8003c08 <IsModuleParameter>
 8004c24:	1e04      	subs	r4, r0, #0
			// Found a module parameter and no more strings
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 8004c26:	d100      	bne.n	8004c2a <ParseSnippetCondition+0x82>
 8004c28:	e194      	b.n	8004f54 <ParseSnippetCondition+0x3ac>
 8004c2a:	2e00      	cmp	r6, #0
 8004c2c:	d000      	beq.n	8004c30 <ParseSnippetCondition+0x88>
 8004c2e:	e193      	b.n	8004f58 <ParseSnippetCondition+0x3b0>
				++numOfRecordedSnippets;		// Record a successful Snippet
				return BOS_OK;				
			} 
			else 
			{
				return BOS_ERR_WrongParam;
 8004c30:	3667      	adds	r6, #103	; 0x67
			if (modPar1 && secondPart == NULL && thirdPart == NULL) 
 8004c32:	2d00      	cmp	r5, #0
 8004c34:	d000      	beq.n	8004c38 <ParseSnippetCondition+0x90>
 8004c36:	e1ba      	b.n	8004fae <ParseSnippetCondition+0x406>
				snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_EVENT;			
 8004c38:	4dbd      	ldr	r5, [pc, #756]	; (8004f30 <ParseSnippetCondition+0x388>)
 8004c3a:	782b      	ldrb	r3, [r5, #0]
 8004c3c:	49bd      	ldr	r1, [pc, #756]	; (8004f34 <ParseSnippetCondition+0x38c>)
 8004c3e:	009a      	lsls	r2, r3, #2
 8004c40:	18d0      	adds	r0, r2, r3
 8004c42:	0080      	lsls	r0, r0, #2
 8004c44:	3e65      	subs	r6, #101	; 0x65
 8004c46:	5446      	strb	r6, [r0, r1]
				snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8004c48:	180a      	adds	r2, r1, r0
 8004c4a:	70d4      	strb	r4, [r2, #3]
				++numOfRecordedSnippets;		// Record a successful Snippet	
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	702b      	strb	r3, [r5, #0]
				return BOS_OK;
 8004c50:	2600      	movs	r6, #0
 8004c52:	e1ac      	b.n	8004fae <ParseSnippetCondition+0x406>
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 8004c54:	786f      	ldrb	r7, [r5, #1]
 8004c56:	3f30      	subs	r7, #48	; 0x30
 8004c58:	b2ff      	uxtb	r7, r7
	BOS_Status status = BOS_OK;
 8004c5a:	2600      	movs	r6, #0
		if(string[1] >= '0' && string[1] <= (NumOfPorts+'0'))		// Valid port number
 8004c5c:	2f06      	cmp	r7, #6
 8004c5e:	d900      	bls.n	8004c62 <ParseSnippetCondition+0xba>
 8004c60:	e1a5      	b.n	8004fae <ParseSnippetCondition+0x406>
			snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_BUTTON_EVENT;
 8004c62:	4ab4      	ldr	r2, [pc, #720]	; (8004f34 <ParseSnippetCondition+0x38c>)
 8004c64:	00a3      	lsls	r3, r4, #2
 8004c66:	1919      	adds	r1, r3, r4
 8004c68:	0089      	lsls	r1, r1, #2
 8004c6a:	2001      	movs	r0, #1
 8004c6c:	5488      	strb	r0, [r1, r2]
			snippets[numOfRecordedSnippets].cond.mathOperator = 0;			// No math operations
 8004c6e:	1853      	adds	r3, r2, r1
 8004c70:	2200      	movs	r2, #0
 8004c72:	705a      	strb	r2, [r3, #1]
			snippets[numOfRecordedSnippets].cond.buffer1[0] = port;		// Store button port number	
 8004c74:	709f      	strb	r7, [r3, #2]
			if (!strncmp((char *)&string[3], "clicked", 7))
 8004c76:	1cee      	adds	r6, r5, #3
 8004c78:	3207      	adds	r2, #7
 8004c7a:	49b1      	ldr	r1, [pc, #708]	; (8004f40 <ParseSnippetCondition+0x398>)
 8004c7c:	0030      	movs	r0, r6
 8004c7e:	f00f fee4 	bl	8014a4a <strncmp>
 8004c82:	2800      	cmp	r0, #0
 8004c84:	d124      	bne.n	8004cd0 <ParseSnippetCondition+0x128>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = CLICKED;	
 8004c86:	00a3      	lsls	r3, r4, #2
 8004c88:	191c      	adds	r4, r3, r4
 8004c8a:	00a4      	lsls	r4, r4, #2
 8004c8c:	4ba9      	ldr	r3, [pc, #676]	; (8004f34 <ParseSnippetCondition+0x38c>)
 8004c8e:	191c      	adds	r4, r3, r4
 8004c90:	2305      	movs	r3, #5
 8004c92:	70e3      	strb	r3, [r4, #3]
				if ((button[port].events & BUTTON_EVENT_CLICKED) != BUTTON_EVENT_CLICKED)		// Enable the event
 8004c94:	00fa      	lsls	r2, r7, #3
 8004c96:	19d2      	adds	r2, r2, r7
 8004c98:	4baa      	ldr	r3, [pc, #680]	; (8004f44 <ParseSnippetCondition+0x39c>)
 8004c9a:	189b      	adds	r3, r3, r2
 8004c9c:	7a1b      	ldrb	r3, [r3, #8]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	0016      	movs	r6, r2
 8004ca2:	401e      	ands	r6, r3
 8004ca4:	421a      	tst	r2, r3
 8004ca6:	d005      	beq.n	8004cb4 <ParseSnippetCondition+0x10c>
				status = BOS_OK;
 8004ca8:	2600      	movs	r6, #0
			++numOfRecordedSnippets;		// Record a successful Snippet			
 8004caa:	4aa1      	ldr	r2, [pc, #644]	; (8004f30 <ParseSnippetCondition+0x388>)
 8004cac:	7813      	ldrb	r3, [r2, #0]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	7013      	strb	r3, [r2, #0]
 8004cb2:	e17c      	b.n	8004fae <ParseSnippetCondition+0x406>
					SetButtonEvents(port, 1, 0, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	9305      	str	r3, [sp, #20]
 8004cb8:	2300      	movs	r3, #0
 8004cba:	9304      	str	r3, [sp, #16]
 8004cbc:	9303      	str	r3, [sp, #12]
 8004cbe:	9302      	str	r3, [sp, #8]
 8004cc0:	9301      	str	r3, [sp, #4]
 8004cc2:	9300      	str	r3, [sp, #0]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	0038      	movs	r0, r7
 8004cca:	f003 ff21 	bl	8008b10 <SetButtonEvents>
 8004cce:	e7ec      	b.n	8004caa <ParseSnippetCondition+0x102>
			else if (!strncmp((char *)&string[3], "double clicked", 14))
 8004cd0:	220e      	movs	r2, #14
 8004cd2:	499d      	ldr	r1, [pc, #628]	; (8004f48 <ParseSnippetCondition+0x3a0>)
 8004cd4:	0030      	movs	r0, r6
 8004cd6:	f00f feb8 	bl	8014a4a <strncmp>
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	d120      	bne.n	8004d20 <ParseSnippetCondition+0x178>
				snippets[numOfRecordedSnippets].cond.buffer1[1] = DBL_CLICKED;			
 8004cde:	00a3      	lsls	r3, r4, #2
 8004ce0:	191c      	adds	r4, r3, r4
 8004ce2:	00a4      	lsls	r4, r4, #2
 8004ce4:	4b93      	ldr	r3, [pc, #588]	; (8004f34 <ParseSnippetCondition+0x38c>)
 8004ce6:	191c      	adds	r4, r3, r4
 8004ce8:	2306      	movs	r3, #6
 8004cea:	70e3      	strb	r3, [r4, #3]
				if ((button[port].events & BUTTON_EVENT_DBL_CLICKED) != BUTTON_EVENT_DBL_CLICKED)
 8004cec:	00fa      	lsls	r2, r7, #3
 8004cee:	19d2      	adds	r2, r2, r7
 8004cf0:	4b94      	ldr	r3, [pc, #592]	; (8004f44 <ParseSnippetCondition+0x39c>)
 8004cf2:	189b      	adds	r3, r3, r2
 8004cf4:	7a1b      	ldrb	r3, [r3, #8]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	0016      	movs	r6, r2
 8004cfa:	401e      	ands	r6, r3
 8004cfc:	421a      	tst	r2, r3
 8004cfe:	d001      	beq.n	8004d04 <ParseSnippetCondition+0x15c>
				status = BOS_OK;					
 8004d00:	2600      	movs	r6, #0
 8004d02:	e7d2      	b.n	8004caa <ParseSnippetCondition+0x102>
					SetButtonEvents(port, 0, 1, 0, 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004d04:	2301      	movs	r3, #1
 8004d06:	9305      	str	r3, [sp, #20]
 8004d08:	2300      	movs	r3, #0
 8004d0a:	9304      	str	r3, [sp, #16]
 8004d0c:	9303      	str	r3, [sp, #12]
 8004d0e:	9302      	str	r3, [sp, #8]
 8004d10:	9301      	str	r3, [sp, #4]
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	3a01      	subs	r2, #1
 8004d16:	2100      	movs	r1, #0
 8004d18:	0038      	movs	r0, r7
 8004d1a:	f003 fef9 	bl	8008b10 <SetButtonEvents>
 8004d1e:	e7c4      	b.n	8004caa <ParseSnippetCondition+0x102>
			else if (!strncmp((char *)&string[3], "pressed for ", 12))
 8004d20:	220c      	movs	r2, #12
 8004d22:	498a      	ldr	r1, [pc, #552]	; (8004f4c <ParseSnippetCondition+0x3a4>)
 8004d24:	0030      	movs	r0, r6
 8004d26:	f00f fe90 	bl	8014a4a <strncmp>
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	d17b      	bne.n	8004e26 <ParseSnippetCondition+0x27e>
				if (!button[port].pressedX1Sec) {	
 8004d2e:	00fa      	lsls	r2, r7, #3
 8004d30:	19d2      	adds	r2, r2, r7
 8004d32:	4b84      	ldr	r3, [pc, #528]	; (8004f44 <ParseSnippetCondition+0x39c>)
 8004d34:	189b      	adds	r3, r3, r2
 8004d36:	789e      	ldrb	r6, [r3, #2]
 8004d38:	2e00      	cmp	r6, #0
 8004d3a:	d00f      	beq.n	8004d5c <ParseSnippetCondition+0x1b4>
				} else if (!button[port].pressedX2Sec) {	
 8004d3c:	00fa      	lsls	r2, r7, #3
 8004d3e:	19d2      	adds	r2, r2, r7
 8004d40:	4b80      	ldr	r3, [pc, #512]	; (8004f44 <ParseSnippetCondition+0x39c>)
 8004d42:	189b      	adds	r3, r3, r2
 8004d44:	78de      	ldrb	r6, [r3, #3]
 8004d46:	2e00      	cmp	r6, #0
 8004d48:	d029      	beq.n	8004d9e <ParseSnippetCondition+0x1f6>
				} else if (!button[port].pressedX3Sec) {	
 8004d4a:	00fa      	lsls	r2, r7, #3
 8004d4c:	19d2      	adds	r2, r2, r7
 8004d4e:	4b7d      	ldr	r3, [pc, #500]	; (8004f44 <ParseSnippetCondition+0x39c>)
 8004d50:	189b      	adds	r3, r3, r2
 8004d52:	791e      	ldrb	r6, [r3, #4]
 8004d54:	2e00      	cmp	r6, #0
 8004d56:	d044      	beq.n	8004de2 <ParseSnippetCondition+0x23a>
					status = BOS_ERR_BUTTON_PRESS_EVENT_FULL;
 8004d58:	260c      	movs	r6, #12
 8004d5a:	e7a6      	b.n	8004caa <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X1_SEC;	
 8004d5c:	4b75      	ldr	r3, [pc, #468]	; (8004f34 <ParseSnippetCondition+0x38c>)
 8004d5e:	4698      	mov	r8, r3
 8004d60:	00a3      	lsls	r3, r4, #2
 8004d62:	191b      	adds	r3, r3, r4
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4443      	add	r3, r8
 8004d68:	2209      	movs	r2, #9
 8004d6a:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8004d6c:	0028      	movs	r0, r5
 8004d6e:	300f      	adds	r0, #15
 8004d70:	f00f f98f 	bl	8014092 <atoi>
 8004d74:	b2c3      	uxtb	r3, r0
 8004d76:	4a6e      	ldr	r2, [pc, #440]	; (8004f30 <ParseSnippetCondition+0x388>)
 8004d78:	7811      	ldrb	r1, [r2, #0]
 8004d7a:	008a      	lsls	r2, r1, #2
 8004d7c:	1852      	adds	r2, r2, r1
 8004d7e:	0092      	lsls	r2, r2, #2
 8004d80:	4442      	add	r2, r8
 8004d82:	7113      	strb	r3, [r2, #4]
					SetButtonEvents(port, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004d84:	2201      	movs	r2, #1
 8004d86:	9205      	str	r2, [sp, #20]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	9204      	str	r2, [sp, #16]
 8004d8c:	9203      	str	r2, [sp, #12]
 8004d8e:	9202      	str	r2, [sp, #8]
 8004d90:	9201      	str	r2, [sp, #4]
 8004d92:	9200      	str	r2, [sp, #0]
 8004d94:	2100      	movs	r1, #0
 8004d96:	0038      	movs	r0, r7
 8004d98:	f003 feba 	bl	8008b10 <SetButtonEvents>
					status = BOS_OK;
 8004d9c:	e785      	b.n	8004caa <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X2_SEC;	
 8004d9e:	4b65      	ldr	r3, [pc, #404]	; (8004f34 <ParseSnippetCondition+0x38c>)
 8004da0:	4698      	mov	r8, r3
 8004da2:	00a3      	lsls	r3, r4, #2
 8004da4:	191b      	adds	r3, r3, r4
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4443      	add	r3, r8
 8004daa:	220a      	movs	r2, #10
 8004dac:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8004dae:	0028      	movs	r0, r5
 8004db0:	300f      	adds	r0, #15
 8004db2:	f00f f96e 	bl	8014092 <atoi>
 8004db6:	b2c0      	uxtb	r0, r0
 8004db8:	4b5d      	ldr	r3, [pc, #372]	; (8004f30 <ParseSnippetCondition+0x388>)
 8004dba:	781a      	ldrb	r2, [r3, #0]
 8004dbc:	0093      	lsls	r3, r2, #2
 8004dbe:	189b      	adds	r3, r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4443      	add	r3, r8
 8004dc4:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	9305      	str	r3, [sp, #20]
 8004dca:	2300      	movs	r3, #0
 8004dcc:	9304      	str	r3, [sp, #16]
 8004dce:	9303      	str	r3, [sp, #12]
 8004dd0:	9302      	str	r3, [sp, #8]
 8004dd2:	9301      	str	r3, [sp, #4]
 8004dd4:	9000      	str	r0, [sp, #0]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	2100      	movs	r1, #0
 8004dda:	0038      	movs	r0, r7
 8004ddc:	f003 fe98 	bl	8008b10 <SetButtonEvents>
					status = BOS_OK;		
 8004de0:	e763      	b.n	8004caa <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = PRESSED_FOR_X3_SEC;	
 8004de2:	4b54      	ldr	r3, [pc, #336]	; (8004f34 <ParseSnippetCondition+0x38c>)
 8004de4:	4698      	mov	r8, r3
 8004de6:	00a3      	lsls	r3, r4, #2
 8004de8:	191b      	adds	r3, r3, r4
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4443      	add	r3, r8
 8004dee:	220b      	movs	r2, #11
 8004df0:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[15]);
 8004df2:	0028      	movs	r0, r5
 8004df4:	300f      	adds	r0, #15
 8004df6:	f00f f94c 	bl	8014092 <atoi>
 8004dfa:	b2c0      	uxtb	r0, r0
 8004dfc:	4b4c      	ldr	r3, [pc, #304]	; (8004f30 <ParseSnippetCondition+0x388>)
 8004dfe:	781a      	ldrb	r2, [r3, #0]
 8004e00:	0093      	lsls	r3, r2, #2
 8004e02:	189b      	adds	r3, r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4443      	add	r3, r8
 8004e08:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, 0, BUTTON_EVENT_MODE_OR);
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	9305      	str	r3, [sp, #20]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	9304      	str	r3, [sp, #16]
 8004e12:	9303      	str	r3, [sp, #12]
 8004e14:	9302      	str	r3, [sp, #8]
 8004e16:	9001      	str	r0, [sp, #4]
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	0038      	movs	r0, r7
 8004e20:	f003 fe76 	bl	8008b10 <SetButtonEvents>
					status = BOS_OK;	
 8004e24:	e741      	b.n	8004caa <ParseSnippetCondition+0x102>
			else if (!strncmp((char *)&string[3], "released for ", 13))
 8004e26:	220d      	movs	r2, #13
 8004e28:	4949      	ldr	r1, [pc, #292]	; (8004f50 <ParseSnippetCondition+0x3a8>)
 8004e2a:	0030      	movs	r0, r6
 8004e2c:	f00f fe0d 	bl	8014a4a <strncmp>
	BOS_Status status = BOS_OK;
 8004e30:	2600      	movs	r6, #0
			else if (!strncmp((char *)&string[3], "released for ", 13))
 8004e32:	2800      	cmp	r0, #0
 8004e34:	d000      	beq.n	8004e38 <ParseSnippetCondition+0x290>
 8004e36:	e738      	b.n	8004caa <ParseSnippetCondition+0x102>
				if (!button[port].releasedY1Sec) {	
 8004e38:	00fa      	lsls	r2, r7, #3
 8004e3a:	19d2      	adds	r2, r2, r7
 8004e3c:	4b41      	ldr	r3, [pc, #260]	; (8004f44 <ParseSnippetCondition+0x39c>)
 8004e3e:	189b      	adds	r3, r3, r2
 8004e40:	795e      	ldrb	r6, [r3, #5]
 8004e42:	2e00      	cmp	r6, #0
 8004e44:	d00f      	beq.n	8004e66 <ParseSnippetCondition+0x2be>
				} else if (!button[port].releasedY2Sec) {	
 8004e46:	00fa      	lsls	r2, r7, #3
 8004e48:	19d2      	adds	r2, r2, r7
 8004e4a:	4b3e      	ldr	r3, [pc, #248]	; (8004f44 <ParseSnippetCondition+0x39c>)
 8004e4c:	189b      	adds	r3, r3, r2
 8004e4e:	799e      	ldrb	r6, [r3, #6]
 8004e50:	2e00      	cmp	r6, #0
 8004e52:	d02a      	beq.n	8004eaa <ParseSnippetCondition+0x302>
				} else if (!button[port].releasedY3Sec) {	
 8004e54:	00fa      	lsls	r2, r7, #3
 8004e56:	19d2      	adds	r2, r2, r7
 8004e58:	4b3a      	ldr	r3, [pc, #232]	; (8004f44 <ParseSnippetCondition+0x39c>)
 8004e5a:	189b      	adds	r3, r3, r2
 8004e5c:	79de      	ldrb	r6, [r3, #7]
 8004e5e:	2e00      	cmp	r6, #0
 8004e60:	d044      	beq.n	8004eec <ParseSnippetCondition+0x344>
					status = BOS_ERR_BUTTON_RELEASE_EVENT_FULL;
 8004e62:	260d      	movs	r6, #13
 8004e64:	e721      	b.n	8004caa <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y1_SEC;	
 8004e66:	4b33      	ldr	r3, [pc, #204]	; (8004f34 <ParseSnippetCondition+0x38c>)
 8004e68:	4698      	mov	r8, r3
 8004e6a:	00a3      	lsls	r3, r4, #2
 8004e6c:	191b      	adds	r3, r3, r4
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4443      	add	r3, r8
 8004e72:	220c      	movs	r2, #12
 8004e74:	70da      	strb	r2, [r3, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8004e76:	0028      	movs	r0, r5
 8004e78:	3010      	adds	r0, #16
 8004e7a:	f00f f90a 	bl	8014092 <atoi>
 8004e7e:	b2c0      	uxtb	r0, r0
 8004e80:	4b2b      	ldr	r3, [pc, #172]	; (8004f30 <ParseSnippetCondition+0x388>)
 8004e82:	781a      	ldrb	r2, [r3, #0]
 8004e84:	0093      	lsls	r3, r2, #2
 8004e86:	189b      	adds	r3, r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4443      	add	r3, r8
 8004e8c:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, 0, BUTTON_EVENT_MODE_OR);
 8004e8e:	2301      	movs	r3, #1
 8004e90:	9305      	str	r3, [sp, #20]
 8004e92:	2300      	movs	r3, #0
 8004e94:	9304      	str	r3, [sp, #16]
 8004e96:	9303      	str	r3, [sp, #12]
 8004e98:	9002      	str	r0, [sp, #8]
 8004e9a:	9301      	str	r3, [sp, #4]
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	0038      	movs	r0, r7
 8004ea4:	f003 fe34 	bl	8008b10 <SetButtonEvents>
					status = BOS_OK;
 8004ea8:	e6ff      	b.n	8004caa <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y2_SEC;	
 8004eaa:	4b22      	ldr	r3, [pc, #136]	; (8004f34 <ParseSnippetCondition+0x38c>)
 8004eac:	4698      	mov	r8, r3
 8004eae:	2314      	movs	r3, #20
 8004eb0:	4699      	mov	r9, r3
 8004eb2:	435c      	muls	r4, r3
 8004eb4:	4444      	add	r4, r8
 8004eb6:	3b07      	subs	r3, #7
 8004eb8:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8004eba:	0028      	movs	r0, r5
 8004ebc:	3010      	adds	r0, #16
 8004ebe:	f00f f8e8 	bl	8014092 <atoi>
 8004ec2:	b2c0      	uxtb	r0, r0
 8004ec4:	4b1a      	ldr	r3, [pc, #104]	; (8004f30 <ParseSnippetCondition+0x388>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	464a      	mov	r2, r9
 8004eca:	4353      	muls	r3, r2
 8004ecc:	4443      	add	r3, r8
 8004ece:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], 0, BUTTON_EVENT_MODE_OR);
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	9305      	str	r3, [sp, #20]
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	9104      	str	r1, [sp, #16]
 8004ed8:	9003      	str	r0, [sp, #12]
 8004eda:	9102      	str	r1, [sp, #8]
 8004edc:	9101      	str	r1, [sp, #4]
 8004ede:	9100      	str	r1, [sp, #0]
 8004ee0:	000b      	movs	r3, r1
 8004ee2:	000a      	movs	r2, r1
 8004ee4:	0038      	movs	r0, r7
 8004ee6:	f003 fe13 	bl	8008b10 <SetButtonEvents>
					status = BOS_OK;		
 8004eea:	e6de      	b.n	8004caa <ParseSnippetCondition+0x102>
					snippets[numOfRecordedSnippets].cond.buffer1[1] = RELEASED_FOR_Y3_SEC;	
 8004eec:	4b11      	ldr	r3, [pc, #68]	; (8004f34 <ParseSnippetCondition+0x38c>)
 8004eee:	4698      	mov	r8, r3
 8004ef0:	2314      	movs	r3, #20
 8004ef2:	4699      	mov	r9, r3
 8004ef4:	435c      	muls	r4, r3
 8004ef6:	4444      	add	r4, r8
 8004ef8:	3b06      	subs	r3, #6
 8004efa:	70e3      	strb	r3, [r4, #3]
					snippets[numOfRecordedSnippets].cond.buffer1[2] = atoi((char *)&string[16]);
 8004efc:	0028      	movs	r0, r5
 8004efe:	3010      	adds	r0, #16
 8004f00:	f00f f8c7 	bl	8014092 <atoi>
 8004f04:	b2c0      	uxtb	r0, r0
 8004f06:	4b0a      	ldr	r3, [pc, #40]	; (8004f30 <ParseSnippetCondition+0x388>)
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	464a      	mov	r2, r9
 8004f0c:	4353      	muls	r3, r2
 8004f0e:	4443      	add	r3, r8
 8004f10:	7118      	strb	r0, [r3, #4]
					SetButtonEvents(port, 0, 0, 0, 0, 0, 0, 0, snippets[numOfRecordedSnippets].cond.buffer1[2], BUTTON_EVENT_MODE_OR);					
 8004f12:	2301      	movs	r3, #1
 8004f14:	9305      	str	r3, [sp, #20]
 8004f16:	9004      	str	r0, [sp, #16]
 8004f18:	2100      	movs	r1, #0
 8004f1a:	9103      	str	r1, [sp, #12]
 8004f1c:	9102      	str	r1, [sp, #8]
 8004f1e:	9101      	str	r1, [sp, #4]
 8004f20:	9100      	str	r1, [sp, #0]
 8004f22:	000b      	movs	r3, r1
 8004f24:	000a      	movs	r2, r1
 8004f26:	0038      	movs	r0, r7
 8004f28:	f003 fdf2 	bl	8008b10 <SetButtonEvents>
					status = BOS_OK;	
 8004f2c:	e6bd      	b.n	8004caa <ParseSnippetCondition+0x102>
 8004f2e:	46c0      	nop			; (mov r8, r8)
 8004f30:	20000f57 	.word	0x20000f57
 8004f34:	20006700 	.word	0x20006700
 8004f38:	20000ebc 	.word	0x20000ebc
 8004f3c:	0801aa60 	.word	0x0801aa60
 8004f40:	0801b604 	.word	0x0801b604
 8004f44:	20001240 	.word	0x20001240
 8004f48:	0801ae70 	.word	0x0801ae70
 8004f4c:	0801ae80 	.word	0x0801ae80
 8004f50:	0801ae90 	.word	0x0801ae90
			else if (secondPart != NULL && thirdPart != NULL) 
 8004f54:	2e00      	cmp	r6, #0
 8004f56:	d051      	beq.n	8004ffc <ParseSnippetCondition+0x454>
 8004f58:	2d00      	cmp	r5, #0
 8004f5a:	d051      	beq.n	8005000 <ParseSnippetCondition+0x458>
				modPar2 = IsModuleParameter(thirdPart);
 8004f5c:	0028      	movs	r0, r5
 8004f5e:	f7fe fe53 	bl	8003c08 <IsModuleParameter>
				if (modPar2) 		// Found a module parameter
 8004f62:	2800      	cmp	r0, #0
 8004f64:	d029      	beq.n	8004fba <ParseSnippetCondition+0x412>
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_PARAM;
 8004f66:	4b28      	ldr	r3, [pc, #160]	; (8005008 <ParseSnippetCondition+0x460>)
 8004f68:	781d      	ldrb	r5, [r3, #0]
 8004f6a:	4a28      	ldr	r2, [pc, #160]	; (800500c <ParseSnippetCondition+0x464>)
 8004f6c:	00ab      	lsls	r3, r5, #2
 8004f6e:	1959      	adds	r1, r3, r5
 8004f70:	0089      	lsls	r1, r1, #2
 8004f72:	2704      	movs	r7, #4
 8004f74:	548f      	strb	r7, [r1, r2]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8004f76:	1959      	adds	r1, r3, r5
 8004f78:	0089      	lsls	r1, r1, #2
 8004f7a:	1851      	adds	r1, r2, r1
 8004f7c:	70cc      	strb	r4, [r1, #3]
					snippets[numOfRecordedSnippets].cond.buffer2[1] = modPar2;		// Leaving first buffer byte for remote module ID				
 8004f7e:	71c8      	strb	r0, [r1, #7]
				snippets[numOfRecordedSnippets].cond.mathOperator = IsMathOperator(secondPart);
 8004f80:	4c21      	ldr	r4, [pc, #132]	; (8005008 <ParseSnippetCondition+0x460>)
 8004f82:	7825      	ldrb	r5, [r4, #0]
 8004f84:	0030      	movs	r0, r6
 8004f86:	f7fe fe55 	bl	8003c34 <IsMathOperator>
 8004f8a:	4a20      	ldr	r2, [pc, #128]	; (800500c <ParseSnippetCondition+0x464>)
 8004f8c:	00ab      	lsls	r3, r5, #2
 8004f8e:	195b      	adds	r3, r3, r5
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	18d3      	adds	r3, r2, r3
 8004f94:	7058      	strb	r0, [r3, #1]
				if (!snippets[numOfRecordedSnippets].cond.mathOperator)
 8004f96:	7821      	ldrb	r1, [r4, #0]
 8004f98:	008b      	lsls	r3, r1, #2
 8004f9a:	185b      	adds	r3, r3, r1
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	18d3      	adds	r3, r2, r3
 8004fa0:	785b      	ldrb	r3, [r3, #1]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d02e      	beq.n	8005004 <ParseSnippetCondition+0x45c>
				++numOfRecordedSnippets;		// Record a successful Snippet
 8004fa6:	3101      	adds	r1, #1
 8004fa8:	4b17      	ldr	r3, [pc, #92]	; (8005008 <ParseSnippetCondition+0x460>)
 8004faa:	7019      	strb	r1, [r3, #0]
				return BOS_OK;				
 8004fac:	2600      	movs	r6, #0
	}
	
	// Note: after exiting this function, numOfRecordedSnippets refers to the next empty Snippet. Substract by one to reference the last Snippet.
	
	return status;
}
 8004fae:	0030      	movs	r0, r6
 8004fb0:	b009      	add	sp, #36	; 0x24
 8004fb2:	bcc0      	pop	{r6, r7}
 8004fb4:	46b9      	mov	r9, r7
 8004fb6:	46b0      	mov	r8, r6
 8004fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					snippets[numOfRecordedSnippets].cond.conditionType = SNIP_COND_MODULE_PARAM_CONST;
 8004fba:	4b13      	ldr	r3, [pc, #76]	; (8005008 <ParseSnippetCondition+0x460>)
 8004fbc:	4698      	mov	r8, r3
 8004fbe:	781a      	ldrb	r2, [r3, #0]
 8004fc0:	4f12      	ldr	r7, [pc, #72]	; (800500c <ParseSnippetCondition+0x464>)
 8004fc2:	0093      	lsls	r3, r2, #2
 8004fc4:	1899      	adds	r1, r3, r2
 8004fc6:	0089      	lsls	r1, r1, #2
 8004fc8:	2003      	movs	r0, #3
 8004fca:	55c8      	strb	r0, [r1, r7]
					snippets[numOfRecordedSnippets].cond.buffer1[1] = modPar1;		// Leaving first buffer byte for remote module ID
 8004fcc:	187b      	adds	r3, r7, r1
 8004fce:	70dc      	strb	r4, [r3, #3]
					float constant = atof(thirdPart);
 8004fd0:	0028      	movs	r0, r5
 8004fd2:	f00f f859 	bl	8014088 <atof>
 8004fd6:	f7fd ffb5 	bl	8002f44 <__aeabi_d2f>
 8004fda:	9007      	str	r0, [sp, #28]
					memcpy(snippets[numOfRecordedSnippets].cond.buffer2, &constant, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 8004fdc:	4643      	mov	r3, r8
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	0098      	lsls	r0, r3, #2
 8004fe2:	18c0      	adds	r0, r0, r3
 8004fe4:	0080      	lsls	r0, r0, #2
 8004fe6:	3006      	adds	r0, #6
 8004fe8:	19c0      	adds	r0, r0, r7
 8004fea:	2204      	movs	r2, #4
 8004fec:	a907      	add	r1, sp, #28
 8004fee:	f00f fab7 	bl	8014560 <memcpy>
 8004ff2:	e7c5      	b.n	8004f80 <ParseSnippetCondition+0x3d8>
		return BOS_ERR_SNIP_MEM_FULL;
 8004ff4:	260e      	movs	r6, #14
 8004ff6:	e7da      	b.n	8004fae <ParseSnippetCondition+0x406>
			return BOS_ERR_WrongParam;
 8004ff8:	2667      	movs	r6, #103	; 0x67
 8004ffa:	e7d8      	b.n	8004fae <ParseSnippetCondition+0x406>
				return BOS_ERR_WrongParam;
 8004ffc:	2667      	movs	r6, #103	; 0x67
 8004ffe:	e7d6      	b.n	8004fae <ParseSnippetCondition+0x406>
 8005000:	2667      	movs	r6, #103	; 0x67
 8005002:	e7d4      	b.n	8004fae <ParseSnippetCondition+0x406>
					return BOS_ERR_WrongParam;
 8005004:	2667      	movs	r6, #103	; 0x67
 8005006:	e7d2      	b.n	8004fae <ParseSnippetCondition+0x406>
 8005008:	20000f57 	.word	0x20000f57
 800500c:	20006700 	.word	0x20006700

08005010 <AddSnippet>:
{
 8005010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005012:	000c      	movs	r4, r1
	switch (code)
 8005014:	2802      	cmp	r0, #2
 8005016:	d017      	beq.n	8005048 <AddSnippet+0x38>
 8005018:	2803      	cmp	r0, #3
 800501a:	d003      	beq.n	8005024 <AddSnippet+0x14>
 800501c:	2801      	cmp	r0, #1
 800501e:	d00f      	beq.n	8005040 <AddSnippet+0x30>
 8005020:	2000      	movs	r0, #0
}
 8005022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			snippets[numOfRecordedSnippets-1].state = true;
 8005024:	4b35      	ldr	r3, [pc, #212]	; (80050fc <AddSnippet+0xec>)
 8005026:	781a      	ldrb	r2, [r3, #0]
 8005028:	3a01      	subs	r2, #1
 800502a:	0093      	lsls	r3, r2, #2
 800502c:	189b      	adds	r3, r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4a33      	ldr	r2, [pc, #204]	; (8005100 <AddSnippet+0xf0>)
 8005032:	18d3      	adds	r3, r2, r3
 8005034:	2201      	movs	r2, #1
 8005036:	741a      	strb	r2, [r3, #16]
			SaveToRO();
 8005038:	f006 ffb4 	bl	800bfa4 <SaveToRO>
	return BOS_OK;
 800503c:	2000      	movs	r0, #0
			break;
 800503e:	e7f0      	b.n	8005022 <AddSnippet+0x12>
			return ParseSnippetCondition(string);
 8005040:	0008      	movs	r0, r1
 8005042:	f7ff fdb1 	bl	8004ba8 <ParseSnippetCondition>
 8005046:	e7ec      	b.n	8005022 <AddSnippet+0x12>
			if (snippets[numOfRecordedSnippets-1].cmd != NULL) 
 8005048:	4b2c      	ldr	r3, [pc, #176]	; (80050fc <AddSnippet+0xec>)
 800504a:	781d      	ldrb	r5, [r3, #0]
 800504c:	3d01      	subs	r5, #1
 800504e:	00ab      	lsls	r3, r5, #2
 8005050:	195b      	adds	r3, r3, r5
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4a2a      	ldr	r2, [pc, #168]	; (8005100 <AddSnippet+0xf0>)
 8005056:	18d3      	adds	r3, r2, r3
 8005058:	68de      	ldr	r6, [r3, #12]
 800505a:	2e00      	cmp	r6, #0
 800505c:	d032      	beq.n	80050c4 <AddSnippet+0xb4>
				int currentLenght = strlen(snippets[numOfRecordedSnippets-1].cmd);
 800505e:	0030      	movs	r0, r6
 8005060:	f7fb f85a 	bl	8000118 <strlen>
 8005064:	0007      	movs	r7, r0
				snippets[numOfRecordedSnippets-1].cmd = (char *) realloc(snippets[numOfRecordedSnippets-1].cmd, currentLenght+strlen(string)+2);
 8005066:	0020      	movs	r0, r4
 8005068:	f7fb f856 	bl	8000118 <strlen>
 800506c:	1839      	adds	r1, r7, r0
 800506e:	3102      	adds	r1, #2
 8005070:	0030      	movs	r0, r6
 8005072:	f00f fab1 	bl	80145d8 <realloc>
 8005076:	4e22      	ldr	r6, [pc, #136]	; (8005100 <AddSnippet+0xf0>)
 8005078:	00ab      	lsls	r3, r5, #2
 800507a:	195d      	adds	r5, r3, r5
 800507c:	00ad      	lsls	r5, r5, #2
 800507e:	1975      	adds	r5, r6, r5
 8005080:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd + currentLenght + 1, string);
 8005082:	4d1e      	ldr	r5, [pc, #120]	; (80050fc <AddSnippet+0xec>)
 8005084:	782a      	ldrb	r2, [r5, #0]
 8005086:	3a01      	subs	r2, #1
 8005088:	0093      	lsls	r3, r2, #2
 800508a:	189b      	adds	r3, r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	18f3      	adds	r3, r6, r3
 8005090:	1c7a      	adds	r2, r7, #1
 8005092:	68d8      	ldr	r0, [r3, #12]
 8005094:	1880      	adds	r0, r0, r2
 8005096:	0021      	movs	r1, r4
 8005098:	f00f fccf 	bl	8014a3a <strcpy>
				*(snippets[numOfRecordedSnippets-1].cmd + currentLenght) = 0x13;		// ENTER key between commands
 800509c:	782a      	ldrb	r2, [r5, #0]
 800509e:	3a01      	subs	r2, #1
 80050a0:	0093      	lsls	r3, r2, #2
 80050a2:	189b      	adds	r3, r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	18f3      	adds	r3, r6, r3
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	2213      	movs	r2, #19
 80050ac:	55da      	strb	r2, [r3, r7]
			if (snippets[numOfRecordedSnippets-1].cmd == NULL) {
 80050ae:	782a      	ldrb	r2, [r5, #0]
 80050b0:	3a01      	subs	r2, #1
 80050b2:	0093      	lsls	r3, r2, #2
 80050b4:	189b      	adds	r3, r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	18f6      	adds	r6, r6, r3
 80050ba:	68f3      	ldr	r3, [r6, #12]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d012      	beq.n	80050e6 <AddSnippet+0xd6>
	return BOS_OK;
 80050c0:	2000      	movs	r0, #0
 80050c2:	e7ae      	b.n	8005022 <AddSnippet+0x12>
				snippets[numOfRecordedSnippets-1].cmd = (char *) malloc(strlen(string)+1);
 80050c4:	0008      	movs	r0, r1
 80050c6:	f7fb f827 	bl	8000118 <strlen>
 80050ca:	3001      	adds	r0, #1
 80050cc:	f00f f812 	bl	80140f4 <malloc>
 80050d0:	00ab      	lsls	r3, r5, #2
 80050d2:	195d      	adds	r5, r3, r5
 80050d4:	00ad      	lsls	r5, r5, #2
 80050d6:	4b0a      	ldr	r3, [pc, #40]	; (8005100 <AddSnippet+0xf0>)
 80050d8:	195d      	adds	r5, r3, r5
 80050da:	60e8      	str	r0, [r5, #12]
				strcpy(snippets[numOfRecordedSnippets-1].cmd, string);
 80050dc:	0021      	movs	r1, r4
 80050de:	f00f fcac 	bl	8014a3a <strcpy>
	return BOS_OK;
 80050e2:	2000      	movs	r0, #0
 80050e4:	e79d      	b.n	8005022 <AddSnippet+0x12>
				memset(&snippets[numOfRecordedSnippets-1], 0, sizeof(snippet_t) );
 80050e6:	0090      	lsls	r0, r2, #2
 80050e8:	1880      	adds	r0, r0, r2
 80050ea:	0080      	lsls	r0, r0, #2
 80050ec:	4a04      	ldr	r2, [pc, #16]	; (8005100 <AddSnippet+0xf0>)
 80050ee:	1880      	adds	r0, r0, r2
 80050f0:	2214      	movs	r2, #20
 80050f2:	2100      	movs	r1, #0
 80050f4:	f00f fa3d 	bl	8014572 <memset>
				return BOS_ERR_SNIP_MEM_FULL;
 80050f8:	200e      	movs	r0, #14
 80050fa:	e792      	b.n	8005022 <AddSnippet+0x12>
 80050fc:	20000f57 	.word	0x20000f57
 8005100:	20006700 	.word	0x20006700

08005104 <CLI_CommandParser>:
{
 8005104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005106:	46de      	mov	lr, fp
 8005108:	4657      	mov	r7, sl
 800510a:	464e      	mov	r6, r9
 800510c:	4645      	mov	r5, r8
 800510e:	b5e0      	push	{r5, r6, r7, lr}
 8005110:	b08b      	sub	sp, #44	; 0x2c
 8005112:	9004      	str	r0, [sp, #16]
 8005114:	9103      	str	r1, [sp, #12]
 8005116:	0015      	movs	r5, r2
 8005118:	001c      	movs	r4, r3
	char* loc = 0; int16_t id = 0; char idString[MaxLengthOfAlias] = {0};
 800511a:	2300      	movs	r3, #0
 800511c:	9307      	str	r3, [sp, #28]
 800511e:	2205      	movs	r2, #5
 8005120:	2100      	movs	r1, #0
 8005122:	a808      	add	r0, sp, #32
 8005124:	f00f fa25 	bl	8014572 <memset>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 8005128:	4bd8      	ldr	r3, [pc, #864]	; (800548c <CLI_CommandParser+0x388>)
 800512a:	4699      	mov	r9, r3
 800512c:	e129      	b.n	8005382 <CLI_CommandParser+0x27e>
			if (AddSnippet(SNIPPET_CONDITION, ( char * ) (cInputString+3)) != BOS_OK) {
 800512e:	1ce9      	adds	r1, r5, #3
 8005130:	3001      	adds	r0, #1
 8005132:	f7ff ff6d 	bl	8005010 <AddSnippet>
 8005136:	2800      	cmp	r0, #0
 8005138:	d105      	bne.n	8005146 <CLI_CommandParser+0x42>
				recordSnippet = SNIPPET_COMMANDS;
 800513a:	4bd4      	ldr	r3, [pc, #848]	; (800548c <CLI_CommandParser+0x388>)
 800513c:	2202      	movs	r2, #2
 800513e:	701a      	strb	r2, [r3, #0]
				pcOutputString[0] = '\r';
 8005140:	230d      	movs	r3, #13
 8005142:	7023      	strb	r3, [r4, #0]
 8005144:	e027      	b.n	8005196 <CLI_CommandParser+0x92>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 8005146:	2252      	movs	r2, #82	; 0x52
 8005148:	49d1      	ldr	r1, [pc, #836]	; (8005490 <CLI_CommandParser+0x38c>)
 800514a:	0020      	movs	r0, r4
 800514c:	f00f fa08 	bl	8014560 <memcpy>
				recordSnippet = 0;
 8005150:	4bce      	ldr	r3, [pc, #824]	; (800548c <CLI_CommandParser+0x388>)
 8005152:	2200      	movs	r2, #0
 8005154:	701a      	strb	r2, [r3, #0]
 8005156:	e01e      	b.n	8005196 <CLI_CommandParser+0x92>
		else if (recordSnippet && !strncmp((char *)cInputString, "end if", 6))
 8005158:	2206      	movs	r2, #6
 800515a:	49ce      	ldr	r1, [pc, #824]	; (8005494 <CLI_CommandParser+0x390>)
 800515c:	0028      	movs	r0, r5
 800515e:	f00f fc74 	bl	8014a4a <strncmp>
 8005162:	2800      	cmp	r0, #0
 8005164:	d00b      	beq.n	800517e <CLI_CommandParser+0x7a>
		else if (recordSnippet == SNIPPET_COMMANDS)
 8005166:	2e02      	cmp	r6, #2
 8005168:	d000      	beq.n	800516c <CLI_CommandParser+0x68>
 800516a:	e11a      	b.n	80053a2 <CLI_CommandParser+0x29e>
			if (AddSnippet(SNIPPET_COMMANDS, ( char * ) cInputString) != BOS_OK)
 800516c:	0029      	movs	r1, r5
 800516e:	2002      	movs	r0, #2
 8005170:	f7ff ff4e 	bl	8005010 <AddSnippet>
 8005174:	2800      	cmp	r0, #0
 8005176:	d124      	bne.n	80051c2 <CLI_CommandParser+0xbe>
				pcOutputString[0] = '\r';
 8005178:	230d      	movs	r3, #13
 800517a:	7023      	strb	r3, [r4, #0]
 800517c:	e00b      	b.n	8005196 <CLI_CommandParser+0x92>
			recordSnippet = 0;
 800517e:	4bc3      	ldr	r3, [pc, #780]	; (800548c <CLI_CommandParser+0x388>)
 8005180:	2200      	movs	r2, #0
 8005182:	701a      	strb	r2, [r3, #0]
			AddSnippet(SNIPPET_ACTIVATE, "");				
 8005184:	49c4      	ldr	r1, [pc, #784]	; (8005498 <CLI_CommandParser+0x394>)
 8005186:	3003      	adds	r0, #3
 8005188:	f7ff ff42 	bl	8005010 <AddSnippet>
			sprintf( ( char * ) pcOutputString, "\nConditional statement accepted and added to Command Snippets.\n\r");
 800518c:	2241      	movs	r2, #65	; 0x41
 800518e:	49c3      	ldr	r1, [pc, #780]	; (800549c <CLI_CommandParser+0x398>)
 8005190:	0020      	movs	r0, r4
 8005192:	f00f f9e5 	bl	8014560 <memcpy>
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 8005196:	7823      	ldrb	r3, [r4, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d100      	bne.n	800519e <CLI_CommandParser+0x9a>
 800519c:	e1a8      	b.n	80054f0 <CLI_CommandParser+0x3ec>
 800519e:	9b03      	ldr	r3, [sp, #12]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d100      	bne.n	80051a6 <CLI_CommandParser+0xa2>
 80051a4:	e1bf      	b.n	8005526 <CLI_CommandParser+0x422>
 80051a6:	2700      	movs	r7, #0
			writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, HAL_MAX_DELAY);		
 80051a8:	0020      	movs	r0, r4
 80051aa:	f7fa ffb5 	bl	8000118 <strlen>
 80051ae:	b282      	uxth	r2, r0
 80051b0:	2301      	movs	r3, #1
 80051b2:	425b      	negs	r3, r3
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	3333      	adds	r3, #51	; 0x33
 80051b8:	0021      	movs	r1, r4
 80051ba:	9804      	ldr	r0, [sp, #16]
 80051bc:	f008 ff74 	bl	800e0a8 <writePxMutex>
 80051c0:	e0d4      	b.n	800536c <CLI_CommandParser+0x268>
				sprintf( ( char * ) pcOutputString, "\nCannot store more Command Snippets. Please delete existing ones and try again.\n\r");
 80051c2:	2252      	movs	r2, #82	; 0x52
 80051c4:	49b2      	ldr	r1, [pc, #712]	; (8005490 <CLI_CommandParser+0x38c>)
 80051c6:	0020      	movs	r0, r4
 80051c8:	f00f f9ca 	bl	8014560 <memcpy>
 80051cc:	e7e3      	b.n	8005196 <CLI_CommandParser+0x92>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 80051ce:	2299      	movs	r2, #153	; 0x99
 80051d0:	1c70      	adds	r0, r6, #1
 80051d2:	0092      	lsls	r2, r2, #2
 80051d4:	0021      	movs	r1, r4
 80051d6:	f009 fd2b 	bl	800ec30 <FreeRTOS_CLIProcessCommand>
 80051da:	0007      	movs	r7, r0
 80051dc:	e0c2      	b.n	8005364 <CLI_CommandParser+0x260>
					sprintf( ( char * ) pcOutputString, "Wrong module name! Please try again.\n\r");
 80051de:	2227      	movs	r2, #39	; 0x27
 80051e0:	49af      	ldr	r1, [pc, #700]	; (80054a0 <CLI_CommandParser+0x39c>)
 80051e2:	0020      	movs	r0, r4
 80051e4:	f00f f9bc 	bl	8014560 <memcpy>
					xReturned = pdFALSE;
 80051e8:	e7d5      	b.n	8005196 <CLI_CommandParser+0x92>
					sprintf( ( char * ) pcOutputString, "Wrong module ID! Please try again.\n\r");
 80051ea:	2225      	movs	r2, #37	; 0x25
 80051ec:	49ad      	ldr	r1, [pc, #692]	; (80054a4 <CLI_CommandParser+0x3a0>)
 80051ee:	0020      	movs	r0, r4
 80051f0:	f00f f9b6 	bl	8014560 <memcpy>
					xReturned = pdFALSE;						
 80051f4:	e7cf      	b.n	8005196 <CLI_CommandParser+0x92>
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 80051f6:	2202      	movs	r2, #2
 80051f8:	2100      	movs	r1, #0
 80051fa:	48ab      	ldr	r0, [pc, #684]	; (80054a8 <CLI_CommandParser+0x3a4>)
 80051fc:	f00f f9b9 	bl	8014572 <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 8005200:	3601      	adds	r6, #1
 8005202:	0028      	movs	r0, r5
 8005204:	f7fa ff88 	bl	8000118 <strlen>
 8005208:	0007      	movs	r7, r0
 800520a:	a807      	add	r0, sp, #28
 800520c:	f7fa ff84 	bl	8000118 <strlen>
 8005210:	3f01      	subs	r7, #1
 8005212:	1a3a      	subs	r2, r7, r0
 8005214:	0031      	movs	r1, r6
 8005216:	48a5      	ldr	r0, [pc, #660]	; (80054ac <CLI_CommandParser+0x3a8>)
 8005218:	f00f fc28 	bl	8014a6c <strncpy>
							BroadcastMessage(myID, BOS_BROADCAST, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 800521c:	0028      	movs	r0, r5
 800521e:	f7fa ff7b 	bl	8000118 <strlen>
 8005222:	0007      	movs	r7, r0
 8005224:	a807      	add	r0, sp, #28
 8005226:	f7fa ff77 	bl	8000118 <strlen>
 800522a:	1a3b      	subs	r3, r7, r0
 800522c:	b29b      	uxth	r3, r3
 800522e:	2217      	movs	r2, #23
 8005230:	21ff      	movs	r1, #255	; 0xff
 8005232:	4640      	mov	r0, r8
 8005234:	f004 f94e 	bl	80094d4 <BroadcastMessage>
					xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 8005238:	2299      	movs	r2, #153	; 0x99
 800523a:	0092      	lsls	r2, r2, #2
 800523c:	0021      	movs	r1, r4
 800523e:	0030      	movs	r0, r6
 8005240:	f009 fcf6 	bl	800ec30 <FreeRTOS_CLIProcessCommand>
 8005244:	0007      	movs	r7, r0
					strcat( ( char * ) pcOutputString, "Command broadcasted to all\n\r");
 8005246:	0020      	movs	r0, r4
 8005248:	f7fa ff66 	bl	8000118 <strlen>
 800524c:	1820      	adds	r0, r4, r0
 800524e:	221d      	movs	r2, #29
 8005250:	4997      	ldr	r1, [pc, #604]	; (80054b0 <CLI_CommandParser+0x3ac>)
 8005252:	f00f f985 	bl	8014560 <memcpy>
 8005256:	e085      	b.n	8005364 <CLI_CommandParser+0x260>
					group = id >> 8;
 8005258:	9b05      	ldr	r3, [sp, #20]
 800525a:	1218      	asrs	r0, r3, #8
 800525c:	b2c3      	uxtb	r3, r0
 800525e:	469a      	mov	sl, r3
 8005260:	4b94      	ldr	r3, [pc, #592]	; (80054b4 <CLI_CommandParser+0x3b0>)
 8005262:	469b      	mov	fp, r3
 8005264:	4652      	mov	r2, sl
 8005266:	701a      	strb	r2, [r3, #0]
					memset( broadcastResponse, 0x00, sizeof(broadcastResponse) );
 8005268:	2202      	movs	r2, #2
 800526a:	2100      	movs	r1, #0
 800526c:	488e      	ldr	r0, [pc, #568]	; (80054a8 <CLI_CommandParser+0x3a4>)
 800526e:	f00f f980 	bl	8014572 <memset>
					strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen( (char*) cInputString)-strlen( (char*) idString)-1));
 8005272:	1c73      	adds	r3, r6, #1
 8005274:	9305      	str	r3, [sp, #20]
 8005276:	0028      	movs	r0, r5
 8005278:	f7fa ff4e 	bl	8000118 <strlen>
 800527c:	0006      	movs	r6, r0
 800527e:	a807      	add	r0, sp, #28
 8005280:	f7fa ff4a 	bl	8000118 <strlen>
 8005284:	3e01      	subs	r6, #1
 8005286:	1a32      	subs	r2, r6, r0
 8005288:	9905      	ldr	r1, [sp, #20]
 800528a:	4888      	ldr	r0, [pc, #544]	; (80054ac <CLI_CommandParser+0x3a8>)
 800528c:	f00f fbee 	bl	8014a6c <strncpy>
							BroadcastMessage(myID, group, CODE_CLI_COMMAND, strlen( (char*) cInputString)-strlen( (char*) idString));		// Send terminating zero
 8005290:	0028      	movs	r0, r5
 8005292:	f7fa ff41 	bl	8000118 <strlen>
 8005296:	0006      	movs	r6, r0
 8005298:	a807      	add	r0, sp, #28
 800529a:	f7fa ff3d 	bl	8000118 <strlen>
 800529e:	1a33      	subs	r3, r6, r0
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2217      	movs	r2, #23
 80052a4:	4651      	mov	r1, sl
 80052a6:	4640      	mov	r0, r8
 80052a8:	f004 f914 	bl	80094d4 <BroadcastMessage>
					if (InGroup(myID, group))
 80052ac:	4b82      	ldr	r3, [pc, #520]	; (80054b8 <CLI_CommandParser+0x3b4>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	3b01      	subs	r3, #1
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	4a81      	ldr	r2, [pc, #516]	; (80054bc <CLI_CommandParser+0x3b8>)
 80052b6:	5a9b      	ldrh	r3, [r3, r2]
 80052b8:	465a      	mov	r2, fp
 80052ba:	7812      	ldrb	r2, [r2, #0]
 80052bc:	4113      	asrs	r3, r2
 80052be:	07db      	lsls	r3, r3, #31
 80052c0:	d406      	bmi.n	80052d0 <CLI_CommandParser+0x1cc>
					sprintf( ( char * ) pcOutputString, "%sMulticast Command forwarded to group %s\n\r", pcOutputString, idString);
 80052c2:	ab07      	add	r3, sp, #28
 80052c4:	0022      	movs	r2, r4
 80052c6:	497e      	ldr	r1, [pc, #504]	; (80054c0 <CLI_CommandParser+0x3bc>)
 80052c8:	0020      	movs	r0, r4
 80052ca:	f00f fb7b 	bl	80149c4 <sprintf>
 80052ce:	e049      	b.n	8005364 <CLI_CommandParser+0x260>
						xReturned = FreeRTOS_CLIProcessCommand( (const signed char*)(loc+1), pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 80052d0:	2299      	movs	r2, #153	; 0x99
 80052d2:	0092      	lsls	r2, r2, #2
 80052d4:	0021      	movs	r1, r4
 80052d6:	9805      	ldr	r0, [sp, #20]
 80052d8:	f009 fcaa 	bl	800ec30 <FreeRTOS_CLIProcessCommand>
 80052dc:	0007      	movs	r7, r0
 80052de:	e7f0      	b.n	80052c2 <CLI_CommandParser+0x1be>
						strncpy( ( char * ) messageParams, loc+1, (size_t)(strlen((char*) cInputString)-strlen((char*) idString)-1));
 80052e0:	0028      	movs	r0, r5
 80052e2:	f7fa ff19 	bl	8000118 <strlen>
 80052e6:	0007      	movs	r7, r0
 80052e8:	a807      	add	r0, sp, #28
 80052ea:	f7fa ff15 	bl	8000118 <strlen>
 80052ee:	3f01      	subs	r7, #1
 80052f0:	1a3a      	subs	r2, r7, r0
 80052f2:	0031      	movs	r1, r6
 80052f4:	486d      	ldr	r0, [pc, #436]	; (80054ac <CLI_CommandParser+0x3a8>)
 80052f6:	f00f fbb9 	bl	8014a6c <strncpy>
								SendMessageToModule(id, CODE_CLI_COMMAND, strlen((char*) cInputString)-strlen((char*) idString)-1);
 80052fa:	0028      	movs	r0, r5
 80052fc:	f7fa ff0c 	bl	8000118 <strlen>
 8005300:	0006      	movs	r6, r0
 8005302:	a807      	add	r0, sp, #28
 8005304:	f7fa ff08 	bl	8000118 <strlen>
 8005308:	3e01      	subs	r6, #1
 800530a:	1a36      	subs	r6, r6, r0
 800530c:	b2b2      	uxth	r2, r6
 800530e:	2117      	movs	r1, #23
 8005310:	4650      	mov	r0, sl
 8005312:	f004 f907 	bl	8009524 <SendMessageToModule>
						sprintf( ( char * ) pcOutputString, "Command forwarded to Module %d\n\r", id);
 8005316:	9a05      	ldr	r2, [sp, #20]
 8005318:	496a      	ldr	r1, [pc, #424]	; (80054c4 <CLI_CommandParser+0x3c0>)
 800531a:	0020      	movs	r0, r4
 800531c:	f00f fb52 	bl	80149c4 <sprintf>
						if ((strlen((char*)pcOutputString) > 0) && enableOutput)
 8005320:	7823      	ldrb	r3, [r4, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <CLI_CommandParser+0x228>
 8005326:	9b03      	ldr	r3, [sp, #12]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d108      	bne.n	800533e <CLI_CommandParser+0x23a>
						memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 800532c:	0020      	movs	r0, r4
 800532e:	f7fa fef3 	bl	8000118 <strlen>
 8005332:	0002      	movs	r2, r0
 8005334:	2100      	movs	r1, #0
 8005336:	0020      	movs	r0, r4
 8005338:	f00f f91b 	bl	8014572 <memset>
 800533c:	e07c      	b.n	8005438 <CLI_CommandParser+0x334>
							writePxMutex(port, (char*)pcOutputString, strlen((char*)pcOutputString), cmd50ms, 1);		
 800533e:	0020      	movs	r0, r4
 8005340:	f7fa feea 	bl	8000118 <strlen>
 8005344:	b282      	uxth	r2, r0
 8005346:	2301      	movs	r3, #1
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	3331      	adds	r3, #49	; 0x31
 800534c:	0021      	movs	r1, r4
 800534e:	9804      	ldr	r0, [sp, #16]
 8005350:	f008 feaa 	bl	800e0a8 <writePxMutex>
 8005354:	e7ea      	b.n	800532c <CLI_CommandParser+0x228>
				xReturned = FreeRTOS_CLIProcessCommand( cInputString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );		
 8005356:	2299      	movs	r2, #153	; 0x99
 8005358:	0092      	lsls	r2, r2, #2
 800535a:	0021      	movs	r1, r4
 800535c:	0028      	movs	r0, r5
 800535e:	f009 fc67 	bl	800ec30 <FreeRTOS_CLIProcessCommand>
 8005362:	0007      	movs	r7, r0
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 8005364:	7823      	ldrb	r3, [r4, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d000      	beq.n	800536c <CLI_CommandParser+0x268>
 800536a:	e07f      	b.n	800546c <CLI_CommandParser+0x368>
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 800536c:	0020      	movs	r0, r4
 800536e:	f7fa fed3 	bl	8000118 <strlen>
 8005372:	0002      	movs	r2, r0
 8005374:	2100      	movs	r1, #0
 8005376:	0020      	movs	r0, r4
 8005378:	f00f f8fb 	bl	8014572 <memset>
	} while( xReturned != pdFALSE );
 800537c:	2f00      	cmp	r7, #0
 800537e:	d100      	bne.n	8005382 <CLI_CommandParser+0x27e>
 8005380:	e0be      	b.n	8005500 <CLI_CommandParser+0x3fc>
		StringToLowerCase(( char * )cInputString);
 8005382:	0028      	movs	r0, r5
 8005384:	f7ff fbf8 	bl	8004b78 <StringToLowerCase>
		if (!recordSnippet && !strncmp((char *)cInputString, "if ", 3)) 
 8005388:	464b      	mov	r3, r9
 800538a:	781e      	ldrb	r6, [r3, #0]
 800538c:	2e00      	cmp	r6, #0
 800538e:	d000      	beq.n	8005392 <CLI_CommandParser+0x28e>
 8005390:	e6e2      	b.n	8005158 <CLI_CommandParser+0x54>
 8005392:	2203      	movs	r2, #3
 8005394:	494c      	ldr	r1, [pc, #304]	; (80054c8 <CLI_CommandParser+0x3c4>)
 8005396:	0028      	movs	r0, r5
 8005398:	f00f fb57 	bl	8014a4a <strncmp>
 800539c:	2800      	cmp	r0, #0
 800539e:	d100      	bne.n	80053a2 <CLI_CommandParser+0x29e>
 80053a0:	e6c5      	b.n	800512e <CLI_CommandParser+0x2a>
			loc = strchr( ( char * ) cInputString, '.');
 80053a2:	212e      	movs	r1, #46	; 0x2e
 80053a4:	0028      	movs	r0, r5
 80053a6:	f00f fb3a 	bl	8014a1e <strchr>
 80053aa:	1e06      	subs	r6, r0, #0
			if ( loc != NULL && strncmp((char *)loc-3, "bos", 3) && !isdigit(*(loc+1)) ) 
 80053ac:	d0d3      	beq.n	8005356 <CLI_CommandParser+0x252>
 80053ae:	3803      	subs	r0, #3
 80053b0:	2203      	movs	r2, #3
 80053b2:	4946      	ldr	r1, [pc, #280]	; (80054cc <CLI_CommandParser+0x3c8>)
 80053b4:	f00f fb49 	bl	8014a4a <strncmp>
 80053b8:	2800      	cmp	r0, #0
 80053ba:	d0cc      	beq.n	8005356 <CLI_CommandParser+0x252>
 80053bc:	7873      	ldrb	r3, [r6, #1]
 80053be:	4a44      	ldr	r2, [pc, #272]	; (80054d0 <CLI_CommandParser+0x3cc>)
 80053c0:	5cd3      	ldrb	r3, [r2, r3]
 80053c2:	075b      	lsls	r3, r3, #29
 80053c4:	d4c7      	bmi.n	8005356 <CLI_CommandParser+0x252>
				strncpy(idString, ( char * ) cInputString, (size_t) (loc - (char*)cInputString));
 80053c6:	1b72      	subs	r2, r6, r5
 80053c8:	0029      	movs	r1, r5
 80053ca:	a807      	add	r0, sp, #28
 80053cc:	f00f fb4e 	bl	8014a6c <strncpy>
				id = GetID(idString);
 80053d0:	a807      	add	r0, sp, #28
 80053d2:	f7ff f9bd 	bl	8004750 <GetID>
 80053d6:	9005      	str	r0, [sp, #20]
				if (id == myID) {
 80053d8:	4a37      	ldr	r2, [pc, #220]	; (80054b8 <CLI_CommandParser+0x3b4>)
 80053da:	7812      	ldrb	r2, [r2, #0]
 80053dc:	4690      	mov	r8, r2
 80053de:	4290      	cmp	r0, r2
 80053e0:	d100      	bne.n	80053e4 <CLI_CommandParser+0x2e0>
 80053e2:	e6f4      	b.n	80051ce <CLI_CommandParser+0xca>
				}	else if (id == BOS_ERR_WrongName) {		
 80053e4:	2864      	cmp	r0, #100	; 0x64
 80053e6:	d100      	bne.n	80053ea <CLI_CommandParser+0x2e6>
 80053e8:	e6f9      	b.n	80051de <CLI_CommandParser+0xda>
				}	else if (id == BOS_ERR_WrongID) {
 80053ea:	2866      	cmp	r0, #102	; 0x66
 80053ec:	d100      	bne.n	80053f0 <CLI_CommandParser+0x2ec>
 80053ee:	e6fc      	b.n	80051ea <CLI_CommandParser+0xe6>
				}	else if (id == BOS_BROADCAST) {
 80053f0:	28ff      	cmp	r0, #255	; 0xff
 80053f2:	d100      	bne.n	80053f6 <CLI_CommandParser+0x2f2>
 80053f4:	e6ff      	b.n	80051f6 <CLI_CommandParser+0xf2>
				}	else if ((uint8_t)id == BOS_MULTICAST) {	
 80053f6:	466b      	mov	r3, sp
 80053f8:	7d1b      	ldrb	r3, [r3, #20]
 80053fa:	469a      	mov	sl, r3
 80053fc:	2bfe      	cmp	r3, #254	; 0xfe
 80053fe:	d100      	bne.n	8005402 <CLI_CommandParser+0x2fe>
 8005400:	e72a      	b.n	8005258 <CLI_CommandParser+0x154>
					if (!strncmp((char *)loc+1, "update", 6)) {			// remote update
 8005402:	3601      	adds	r6, #1
 8005404:	2206      	movs	r2, #6
 8005406:	4933      	ldr	r1, [pc, #204]	; (80054d4 <CLI_CommandParser+0x3d0>)
 8005408:	0030      	movs	r0, r6
 800540a:	f00f fb1e 	bl	8014a4a <strncmp>
 800540e:	2800      	cmp	r0, #0
 8005410:	d000      	beq.n	8005414 <CLI_CommandParser+0x310>
 8005412:	e765      	b.n	80052e0 <CLI_CommandParser+0x1dc>
						BOS.response = BOS_RESPONSE_NONE;				
 8005414:	4b30      	ldr	r3, [pc, #192]	; (80054d8 <CLI_CommandParser+0x3d4>)
 8005416:	2200      	movs	r2, #0
 8005418:	719a      	strb	r2, [r3, #6]
								SendMessageToModule(id, CODE_UPDATE, 0);
 800541a:	2119      	movs	r1, #25
 800541c:	4650      	mov	r0, sl
 800541e:	f004 f881 	bl	8009524 <SendMessageToModule>
						osDelay(100);
 8005422:	2064      	movs	r0, #100	; 0x64
 8005424:	f009 fb6b 	bl	800eafe <osDelay>
						remoteBootloaderUpdate(myID, id, PcPort, 0);
 8005428:	4b2c      	ldr	r3, [pc, #176]	; (80054dc <CLI_CommandParser+0x3d8>)
 800542a:	781a      	ldrb	r2, [r3, #0]
 800542c:	4b22      	ldr	r3, [pc, #136]	; (80054b8 <CLI_CommandParser+0x3b4>)
 800542e:	7818      	ldrb	r0, [r3, #0]
 8005430:	2300      	movs	r3, #0
 8005432:	4651      	mov	r1, sl
 8005434:	f7fe fe4e 	bl	80040d4 <remoteBootloaderUpdate>
					if (BOS.response == BOS_RESPONSE_ALL)
 8005438:	4b27      	ldr	r3, [pc, #156]	; (80054d8 <CLI_CommandParser+0x3d4>)
 800543a:	799b      	ldrb	r3, [r3, #6]
 800543c:	2b60      	cmp	r3, #96	; 0x60
 800543e:	d000      	beq.n	8005442 <CLI_CommandParser+0x33e>
 8005440:	e6a9      	b.n	8005196 <CLI_CommandParser+0x92>
						ulTaskNotifyTake(pdTRUE, 1000);		//cmd500ms
 8005442:	21fa      	movs	r1, #250	; 0xfa
 8005444:	0089      	lsls	r1, r1, #2
 8005446:	2001      	movs	r0, #1
 8005448:	f00a ff76 	bl	8010338 <ulTaskNotifyTake>
								if (responseStatus != BOS_OK) {
 800544c:	4b24      	ldr	r3, [pc, #144]	; (80054e0 <CLI_CommandParser+0x3dc>)
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d100      	bne.n	8005456 <CLI_CommandParser+0x352>
 8005454:	e69f      	b.n	8005196 <CLI_CommandParser+0x92>
									++timedoutMsg;
 8005456:	4a23      	ldr	r2, [pc, #140]	; (80054e4 <CLI_CommandParser+0x3e0>)
 8005458:	8813      	ldrh	r3, [r2, #0]
 800545a:	3301      	adds	r3, #1
 800545c:	8013      	strh	r3, [r2, #0]
									sprintf( ( char * ) pcOutputString, "%sModule %d is not reachable.\n\r", ( char * ) pcOutputString, id);
 800545e:	9b05      	ldr	r3, [sp, #20]
 8005460:	0022      	movs	r2, r4
 8005462:	4921      	ldr	r1, [pc, #132]	; (80054e8 <CLI_CommandParser+0x3e4>)
 8005464:	0020      	movs	r0, r4
 8005466:	f00f faad 	bl	80149c4 <sprintf>
 800546a:	e694      	b.n	8005196 <CLI_CommandParser+0x92>
		if (strlen((char*)pcOutputString) > 0 && enableOutput)
 800546c:	9b03      	ldr	r3, [sp, #12]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d100      	bne.n	8005474 <CLI_CommandParser+0x370>
 8005472:	e77b      	b.n	800536c <CLI_CommandParser+0x268>
 8005474:	e698      	b.n	80051a8 <CLI_CommandParser+0xa4>
		writePxMutex(port, pcEndOfCommandOutputString, strlen(pcEndOfCommandOutputString), cmd50ms, HAL_MAX_DELAY);		
 8005476:	2301      	movs	r3, #1
 8005478:	425b      	negs	r3, r3
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	3333      	adds	r3, #51	; 0x33
 800547e:	2238      	movs	r2, #56	; 0x38
 8005480:	491a      	ldr	r1, [pc, #104]	; (80054ec <CLI_CommandParser+0x3e8>)
 8005482:	9804      	ldr	r0, [sp, #16]
 8005484:	f008 fe10 	bl	800e0a8 <writePxMutex>
}
 8005488:	e046      	b.n	8005518 <CLI_CommandParser+0x414>
 800548a:	46c0      	nop			; (mov r8, r8)
 800548c:	20000f84 	.word	0x20000f84
 8005490:	0801aea4 	.word	0x0801aea4
 8005494:	0801aef8 	.word	0x0801aef8
 8005498:	0801a938 	.word	0x0801a938
 800549c:	0801af00 	.word	0x0801af00
 80054a0:	0801af48 	.word	0x0801af48
 80054a4:	0801af70 	.word	0x0801af70
 80054a8:	20000ba0 	.word	0x20000ba0
 80054ac:	20000da4 	.word	0x20000da4
 80054b0:	0801af98 	.word	0x0801af98
 80054b4:	20000f56 	.word	0x20000f56
 80054b8:	20000070 	.word	0x20000070
 80054bc:	20000d5c 	.word	0x20000d5c
 80054c0:	0801afb8 	.word	0x0801afb8
 80054c4:	0801afec 	.word	0x0801afec
 80054c8:	0801aea0 	.word	0x0801aea0
 80054cc:	0801af44 	.word	0x0801af44
 80054d0:	0801d691 	.word	0x0801d691
 80054d4:	0801afe4 	.word	0x0801afe4
 80054d8:	200066e4 	.word	0x200066e4
 80054dc:	20000b67 	.word	0x20000b67
 80054e0:	20000e78 	.word	0x20000e78
 80054e4:	20001466 	.word	0x20001466
 80054e8:	0801b010 	.word	0x0801b010
 80054ec:	0801b030 	.word	0x0801b030
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 80054f0:	0020      	movs	r0, r4
 80054f2:	f7fa fe11 	bl	8000118 <strlen>
 80054f6:	0002      	movs	r2, r0
 80054f8:	2100      	movs	r1, #0
 80054fa:	0020      	movs	r0, r4
 80054fc:	f00f f839 	bl	8014572 <memset>
	memset( idString, 0x00, MaxLengthOfAlias );
 8005500:	2209      	movs	r2, #9
 8005502:	2100      	movs	r1, #0
 8005504:	a807      	add	r0, sp, #28
 8005506:	f00f f834 	bl	8014572 <memset>
	if(!recordSnippet && enableOutput)
 800550a:	4b0b      	ldr	r3, [pc, #44]	; (8005538 <CLI_CommandParser+0x434>)
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d102      	bne.n	8005518 <CLI_CommandParser+0x414>
 8005512:	9b03      	ldr	r3, [sp, #12]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1ae      	bne.n	8005476 <CLI_CommandParser+0x372>
}
 8005518:	b00b      	add	sp, #44	; 0x2c
 800551a:	bcf0      	pop	{r4, r5, r6, r7}
 800551c:	46bb      	mov	fp, r7
 800551e:	46b2      	mov	sl, r6
 8005520:	46a9      	mov	r9, r5
 8005522:	46a0      	mov	r8, r4
 8005524:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 8005526:	0020      	movs	r0, r4
 8005528:	f7fa fdf6 	bl	8000118 <strlen>
 800552c:	0002      	movs	r2, r0
 800552e:	2100      	movs	r1, #0
 8005530:	0020      	movs	r0, r4
 8005532:	f00f f81e 	bl	8014572 <memset>
	} while( xReturned != pdFALSE );
 8005536:	e7e3      	b.n	8005500 <CLI_CommandParser+0x3fc>
 8005538:	20000f84 	.word	0x20000f84

0800553c <prvCLITask>:
{
 800553c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800553e:	46d6      	mov	lr, sl
 8005540:	464f      	mov	r7, r9
 8005542:	4646      	mov	r6, r8
 8005544:	b5c0      	push	{r6, r7, lr}
 8005546:	b084      	sub	sp, #16
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8005548:	2101      	movs	r1, #1
 800554a:	4249      	negs	r1, r1
 800554c:	2001      	movs	r0, #1
 800554e:	f00a fef3 	bl	8010338 <ulTaskNotifyTake>
	cRxedChar = '\0';
 8005552:	230f      	movs	r3, #15
 8005554:	446b      	add	r3, sp
 8005556:	2200      	movs	r2, #0
 8005558:	701a      	strb	r2, [r3, #0]
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800555a:	f009 fbf3 	bl	800ed44 <FreeRTOS_CLIGetOutputBuffer>
 800555e:	4682      	mov	sl, r0
	if (BOS.clibaudrate != DEF_ARRAY_BAUDRATE)
 8005560:	23e1      	movs	r3, #225	; 0xe1
 8005562:	031b      	lsls	r3, r3, #12
 8005564:	4a58      	ldr	r2, [pc, #352]	; (80056c8 <prvCLITask+0x18c>)
 8005566:	6892      	ldr	r2, [r2, #8]
 8005568:	429a      	cmp	r2, r3
 800556a:	d00f      	beq.n	800558c <prvCLITask+0x50>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 800556c:	2401      	movs	r4, #1
			if (port != PcPort)
 800556e:	4e57      	ldr	r6, [pc, #348]	; (80056cc <prvCLITask+0x190>)
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 8005570:	001d      	movs	r5, r3
 8005572:	e003      	b.n	800557c <prvCLITask+0x40>
		for (uint8_t port=1 ; port<=NumOfPorts ; port++) 
 8005574:	3401      	adds	r4, #1
 8005576:	b2e4      	uxtb	r4, r4
 8005578:	2c07      	cmp	r4, #7
 800557a:	d007      	beq.n	800558c <prvCLITask+0x50>
			if (port != PcPort)
 800557c:	7833      	ldrb	r3, [r6, #0]
 800557e:	42a3      	cmp	r3, r4
 8005580:	d0f8      	beq.n	8005574 <prvCLITask+0x38>
				UpdateBaudrate(port, DEF_ARRAY_BAUDRATE);
 8005582:	0029      	movs	r1, r5
 8005584:	0020      	movs	r0, r4
 8005586:	f008 fdff 	bl	800e188 <UpdateBaudrate>
 800558a:	e7f3      	b.n	8005574 <prvCLITask+0x38>
	sprintf(pcWelcomePortMessage, "Connected to module %d (%s), port P%d.\n\n\r>", myID, modulePNstring[myPN], PcPort);
 800558c:	4b50      	ldr	r3, [pc, #320]	; (80056d0 <prvCLITask+0x194>)
 800558e:	881a      	ldrh	r2, [r3, #0]
 8005590:	0053      	lsls	r3, r2, #1
 8005592:	189b      	adds	r3, r3, r2
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	4a4f      	ldr	r2, [pc, #316]	; (80056d4 <prvCLITask+0x198>)
 8005598:	189b      	adds	r3, r3, r2
 800559a:	4a4f      	ldr	r2, [pc, #316]	; (80056d8 <prvCLITask+0x19c>)
 800559c:	7812      	ldrb	r2, [r2, #0]
 800559e:	4c4f      	ldr	r4, [pc, #316]	; (80056dc <prvCLITask+0x1a0>)
 80055a0:	4d4a      	ldr	r5, [pc, #296]	; (80056cc <prvCLITask+0x190>)
 80055a2:	7829      	ldrb	r1, [r5, #0]
 80055a4:	9100      	str	r1, [sp, #0]
 80055a6:	494e      	ldr	r1, [pc, #312]	; (80056e0 <prvCLITask+0x1a4>)
 80055a8:	0020      	movs	r0, r4
 80055aa:	f00f fa0b 	bl	80149c4 <sprintf>
	writePxITMutex(PcPort, pcWelcomeMessage, strlen(pcWelcomeMessage), 10);
 80055ae:	7828      	ldrb	r0, [r5, #0]
 80055b0:	230a      	movs	r3, #10
 80055b2:	4a4c      	ldr	r2, [pc, #304]	; (80056e4 <prvCLITask+0x1a8>)
 80055b4:	494c      	ldr	r1, [pc, #304]	; (80056e8 <prvCLITask+0x1ac>)
 80055b6:	f008 fda3 	bl	800e100 <writePxITMutex>
	writePxITMutex(PcPort, pcWelcomePortMessage, strlen(pcWelcomePortMessage), 10);
 80055ba:	0020      	movs	r0, r4
 80055bc:	f7fa fdac 	bl	8000118 <strlen>
 80055c0:	b282      	uxth	r2, r0
 80055c2:	7828      	ldrb	r0, [r5, #0]
 80055c4:	230a      	movs	r3, #10
 80055c6:	0021      	movs	r1, r4
 80055c8:	f008 fd9a 	bl	800e100 <writePxITMutex>
char cRxedChar; int8_t cInputIndex = 0, *pcOutputString; 
 80055cc:	2300      	movs	r3, #0
 80055ce:	4698      	mov	r8, r3
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 80055d0:	4b46      	ldr	r3, [pc, #280]	; (80056ec <prvCLITask+0x1b0>)
 80055d2:	4699      	mov	r9, r3
				chr = UARTRxBufIndex[PcPort-1] = 0;
 80055d4:	001f      	movs	r7, r3
 80055d6:	e05c      	b.n	8005692 <prvCLITask+0x156>
				cRxedChar = UARTRxBuf[PcPort-1][chr];
 80055d8:	200f      	movs	r0, #15
 80055da:	4468      	add	r0, sp
 80055dc:	7002      	strb	r2, [r0, #0]
				UARTRxBuf[PcPort-1][chr] = 0;
 80055de:	0198      	lsls	r0, r3, #6
 80055e0:	4a43      	ldr	r2, [pc, #268]	; (80056f0 <prvCLITask+0x1b4>)
 80055e2:	1812      	adds	r2, r2, r0
 80055e4:	2000      	movs	r0, #0
 80055e6:	5510      	strb	r0, [r2, r4]
				UARTRxBufIndex[PcPort-1] = chr;
 80055e8:	4a40      	ldr	r2, [pc, #256]	; (80056ec <prvCLITask+0x1b0>)
 80055ea:	54d4      	strb	r4, [r2, r3]
		writePxITMutex(PcPort, &cRxedChar, 1, 10);
 80055ec:	240f      	movs	r4, #15
 80055ee:	446c      	add	r4, sp
 80055f0:	4b36      	ldr	r3, [pc, #216]	; (80056cc <prvCLITask+0x190>)
 80055f2:	7818      	ldrb	r0, [r3, #0]
 80055f4:	230a      	movs	r3, #10
 80055f6:	2201      	movs	r2, #1
 80055f8:	0021      	movs	r1, r4
 80055fa:	f008 fd81 	bl	800e100 <writePxITMutex>
		if( cRxedChar == '\r' )
 80055fe:	7823      	ldrb	r3, [r4, #0]
 8005600:	2b0d      	cmp	r3, #13
 8005602:	d027      	beq.n	8005654 <prvCLITask+0x118>
			if( cRxedChar == '\n' )
 8005604:	2b0a      	cmp	r3, #10
 8005606:	d042      	beq.n	800568e <prvCLITask+0x152>
			else if( cRxedChar == '\b' )
 8005608:	2b08      	cmp	r3, #8
 800560a:	d051      	beq.n	80056b0 <prvCLITask+0x174>
				if( ( cRxedChar >= ' ' ) && ( cRxedChar <= '~' ) )
 800560c:	001a      	movs	r2, r3
 800560e:	3a20      	subs	r2, #32
 8005610:	2a5e      	cmp	r2, #94	; 0x5e
 8005612:	d83c      	bhi.n	800568e <prvCLITask+0x152>
					if( cInputIndex < cmdMAX_INPUT_SIZE )
 8005614:	4642      	mov	r2, r8
 8005616:	2a31      	cmp	r2, #49	; 0x31
 8005618:	dc39      	bgt.n	800568e <prvCLITask+0x152>
						cInputString[ cInputIndex ] = cRxedChar;
 800561a:	4a36      	ldr	r2, [pc, #216]	; (80056f4 <prvCLITask+0x1b8>)
 800561c:	4641      	mov	r1, r8
 800561e:	5453      	strb	r3, [r2, r1]
						cInputIndex++;
 8005620:	4643      	mov	r3, r8
 8005622:	3301      	adds	r3, #1
 8005624:	b25b      	sxtb	r3, r3
 8005626:	4698      	mov	r8, r3
 8005628:	e031      	b.n	800568e <prvCLITask+0x152>
				chr = UARTRxBufIndex[PcPort-1] = 0;
 800562a:	2200      	movs	r2, #0
 800562c:	54fa      	strb	r2, [r7, r3]
			taskYIELD();
 800562e:	f00b f95f 	bl	80108f0 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8005632:	3c3e      	subs	r4, #62	; 0x3e
			if (UARTRxBuf[PcPort-1][chr]) {
 8005634:	7833      	ldrb	r3, [r6, #0]
 8005636:	3b01      	subs	r3, #1
 8005638:	019a      	lsls	r2, r3, #6
 800563a:	18aa      	adds	r2, r5, r2
 800563c:	5d12      	ldrb	r2, [r2, r4]
 800563e:	2a00      	cmp	r2, #0
 8005640:	d1ca      	bne.n	80055d8 <prvCLITask+0x9c>
			if (chr == MSG_RX_BUF_SIZE-1)	{
 8005642:	2c3f      	cmp	r4, #63	; 0x3f
 8005644:	d0f1      	beq.n	800562a <prvCLITask+0xee>
			taskYIELD();
 8005646:	f00b f953 	bl	80108f0 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 800564a:	3401      	adds	r4, #1
 800564c:	b2a4      	uxth	r4, r4
 800564e:	2c3f      	cmp	r4, #63	; 0x3f
 8005650:	d9f0      	bls.n	8005634 <prvCLITask+0xf8>
 8005652:	e7cb      	b.n	80055ec <prvCLITask+0xb0>
			writePxITMutex(PcPort, pcNewLine, strlen(pcNewLine), 10);
 8005654:	4b1d      	ldr	r3, [pc, #116]	; (80056cc <prvCLITask+0x190>)
 8005656:	7818      	ldrb	r0, [r3, #0]
 8005658:	230a      	movs	r3, #10
 800565a:	2202      	movs	r2, #2
 800565c:	4926      	ldr	r1, [pc, #152]	; (80056f8 <prvCLITask+0x1bc>)
 800565e:	f008 fd4f 	bl	800e100 <writePxITMutex>
			if( cInputIndex == 0 )
 8005662:	4643      	mov	r3, r8
 8005664:	2b00      	cmp	r3, #0
 8005666:	d01e      	beq.n	80056a6 <prvCLITask+0x16a>
			CLI_CommandParser(PcPort, true, cInputString, pcOutputString);
 8005668:	4c22      	ldr	r4, [pc, #136]	; (80056f4 <prvCLITask+0x1b8>)
 800566a:	4b18      	ldr	r3, [pc, #96]	; (80056cc <prvCLITask+0x190>)
 800566c:	7818      	ldrb	r0, [r3, #0]
 800566e:	4653      	mov	r3, sl
 8005670:	0022      	movs	r2, r4
 8005672:	2101      	movs	r1, #1
 8005674:	f7ff fd46 	bl	8005104 <CLI_CommandParser>
			strcpy( ( char * ) cLastInputString, ( char * ) cInputString );
 8005678:	0021      	movs	r1, r4
 800567a:	4820      	ldr	r0, [pc, #128]	; (80056fc <prvCLITask+0x1c0>)
 800567c:	f00f f9dd 	bl	8014a3a <strcpy>
			memset( cInputString, 0x00, cmdMAX_INPUT_SIZE );
 8005680:	2232      	movs	r2, #50	; 0x32
 8005682:	2100      	movs	r1, #0
 8005684:	0020      	movs	r0, r4
 8005686:	f00e ff74 	bl	8014572 <memset>
			cInputIndex = 0;
 800568a:	2300      	movs	r3, #0
 800568c:	4698      	mov	r8, r3
		taskYIELD();
 800568e:	f00b f92f 	bl	80108f0 <vPortYield>
		for (chr=UARTRxBufIndex[PcPort-1] ; chr<MSG_RX_BUF_SIZE ; chr++)
 8005692:	4b0e      	ldr	r3, [pc, #56]	; (80056cc <prvCLITask+0x190>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	444b      	add	r3, r9
 8005698:	3b01      	subs	r3, #1
 800569a:	781c      	ldrb	r4, [r3, #0]
 800569c:	2c3f      	cmp	r4, #63	; 0x3f
 800569e:	d8a5      	bhi.n	80055ec <prvCLITask+0xb0>
			if (UARTRxBuf[PcPort-1][chr]) {
 80056a0:	4e0a      	ldr	r6, [pc, #40]	; (80056cc <prvCLITask+0x190>)
 80056a2:	4d13      	ldr	r5, [pc, #76]	; (80056f0 <prvCLITask+0x1b4>)
 80056a4:	e7c6      	b.n	8005634 <prvCLITask+0xf8>
				strcpy( ( char * ) cInputString, ( char * ) cLastInputString );
 80056a6:	4915      	ldr	r1, [pc, #84]	; (80056fc <prvCLITask+0x1c0>)
 80056a8:	4812      	ldr	r0, [pc, #72]	; (80056f4 <prvCLITask+0x1b8>)
 80056aa:	f00f f9c6 	bl	8014a3a <strcpy>
 80056ae:	e7db      	b.n	8005668 <prvCLITask+0x12c>
				if( cInputIndex > 0 )
 80056b0:	4643      	mov	r3, r8
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	ddeb      	ble.n	800568e <prvCLITask+0x152>
					cInputIndex--;
 80056b6:	3b01      	subs	r3, #1
 80056b8:	b25b      	sxtb	r3, r3
 80056ba:	4698      	mov	r8, r3
					cInputString[ cInputIndex ] = '\0';
 80056bc:	4b0d      	ldr	r3, [pc, #52]	; (80056f4 <prvCLITask+0x1b8>)
 80056be:	2200      	movs	r2, #0
 80056c0:	4641      	mov	r1, r8
 80056c2:	545a      	strb	r2, [r3, r1]
 80056c4:	e7e3      	b.n	800568e <prvCLITask+0x152>
 80056c6:	46c0      	nop			; (mov r8, r8)
 80056c8:	200066e4 	.word	0x200066e4
 80056cc:	20000b67 	.word	0x20000b67
 80056d0:	20000072 	.word	0x20000072
 80056d4:	0801add0 	.word	0x0801add0
 80056d8:	20000070 	.word	0x20000070
 80056dc:	20000f58 	.word	0x20000f58
 80056e0:	0801b06c 	.word	0x0801b06c
 80056e4:	00000293 	.word	0x00000293
 80056e8:	0801b098 	.word	0x0801b098
 80056ec:	20001188 	.word	0x20001188
 80056f0:	20001008 	.word	0x20001008
 80056f4:	20000e88 	.word	0x20000e88
 80056f8:	0801c42c 	.word	0x0801c42c
 80056fc:	20000f24 	.word	0x20000f24

08005700 <ParseSnippetCommand>:
/*-----------------------------------------------------------*/

/* Parse Snippet commands into the internal buffer
*/
bool ParseSnippetCommand(char *snippetBuffer, int8_t *cliBuffer)
{
 8005700:	b570      	push	{r4, r5, r6, lr}
 8005702:	000c      	movs	r4, r1
	static char *ptrStart, *ptrEnd;
	
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 8005704:	4b1c      	ldr	r3, [pc, #112]	; (8005778 <ParseSnippetCommand+0x78>)
 8005706:	781a      	ldrb	r2, [r3, #0]
 8005708:	3a01      	subs	r2, #1
 800570a:	0093      	lsls	r3, r2, #2
 800570c:	189b      	adds	r3, r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4a1a      	ldr	r2, [pc, #104]	; (800577c <ParseSnippetCommand+0x7c>)
 8005712:	18d3      	adds	r3, r2, r3
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d02c      	beq.n	8005774 <ParseSnippetCommand+0x74>
	
	// Initialize the start pointer to snippet buffer address
	if (!ptrStart)	ptrStart = snippetBuffer;	
 800571a:	4b19      	ldr	r3, [pc, #100]	; (8005780 <ParseSnippetCommand+0x80>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d014      	beq.n	800574c <ParseSnippetCommand+0x4c>
	
	// Did we already reach end of Snippet buffer?
	if (*ptrStart == 0x00) {
 8005722:	4b17      	ldr	r3, [pc, #92]	; (8005780 <ParseSnippetCommand+0x80>)
 8005724:	681e      	ldr	r6, [r3, #0]
 8005726:	7833      	ldrb	r3, [r6, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d012      	beq.n	8005752 <ParseSnippetCommand+0x52>
		cliBuffer = NULL;
		return false;
	}
	
	// Search the buffer for first occurance of 0x13 (ENTER key)
	ptrEnd = strchr(ptrStart,0x13);
 800572c:	2113      	movs	r1, #19
 800572e:	0030      	movs	r0, r6
 8005730:	f00f f975 	bl	8014a1e <strchr>
 8005734:	1e05      	subs	r5, r0, #0
	if (ptrEnd != NULL)
 8005736:	d011      	beq.n	800575c <ParseSnippetCommand+0x5c>
	{
		strncpy((char *)cliBuffer, ptrStart, ptrEnd-ptrStart);
 8005738:	1b82      	subs	r2, r0, r6
 800573a:	0031      	movs	r1, r6
 800573c:	0020      	movs	r0, r4
 800573e:	f00f f995 	bl	8014a6c <strncpy>
		ptrStart = ptrEnd+1;
 8005742:	3501      	adds	r5, #1
 8005744:	4b0e      	ldr	r3, [pc, #56]	; (8005780 <ParseSnippetCommand+0x80>)
 8005746:	601d      	str	r5, [r3, #0]
	{
		strcpy((char *)cliBuffer, ptrStart);
		ptrStart += strlen((const char *) cliBuffer);
	}

	return true;
 8005748:	2001      	movs	r0, #1
}
 800574a:	bd70      	pop	{r4, r5, r6, pc}
	if (!ptrStart)	ptrStart = snippetBuffer;	
 800574c:	4b0c      	ldr	r3, [pc, #48]	; (8005780 <ParseSnippetCommand+0x80>)
 800574e:	6018      	str	r0, [r3, #0]
 8005750:	e7e7      	b.n	8005722 <ParseSnippetCommand+0x22>
		ptrStart = 0;		// Initialize the start pointer for next Snippet
 8005752:	4b0b      	ldr	r3, [pc, #44]	; (8005780 <ParseSnippetCommand+0x80>)
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]
		return false;
 8005758:	2000      	movs	r0, #0
 800575a:	e7f6      	b.n	800574a <ParseSnippetCommand+0x4a>
		strcpy((char *)cliBuffer, ptrStart);
 800575c:	0031      	movs	r1, r6
 800575e:	0020      	movs	r0, r4
 8005760:	f00f f96b 	bl	8014a3a <strcpy>
		ptrStart += strlen((const char *) cliBuffer);
 8005764:	0020      	movs	r0, r4
 8005766:	f7fa fcd7 	bl	8000118 <strlen>
 800576a:	1836      	adds	r6, r6, r0
 800576c:	4b04      	ldr	r3, [pc, #16]	; (8005780 <ParseSnippetCommand+0x80>)
 800576e:	601e      	str	r6, [r3, #0]
	return true;
 8005770:	2001      	movs	r0, #1
 8005772:	e7ea      	b.n	800574a <ParseSnippetCommand+0x4a>
	if (snippets[numOfRecordedSnippets-1].cmd == NULL)	return false;
 8005774:	2000      	movs	r0, #0
 8005776:	e7e8      	b.n	800574a <ParseSnippetCommand+0x4a>
 8005778:	20000f57 	.word	0x20000f57
 800577c:	20006700 	.word	0x20006700
 8005780:	20000f80 	.word	0x20000f80

08005784 <CheckSnippetCondition>:
/*-----------------------------------------------------------*/

/* Check if Snippet conditional is true or false
*/
bool CheckSnippetCondition(uint8_t index)
{
 8005784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005786:	b083      	sub	sp, #12
 8005788:	0004      	movs	r4, r0
	uint8_t temp8;
	float flt1, flt2;
	
	/* Check conditions based on Snippet tupe */	

	switch (snippets[index].cond.conditionType)
 800578a:	0083      	lsls	r3, r0, #2
 800578c:	181b      	adds	r3, r3, r0
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4a3e      	ldr	r2, [pc, #248]	; (800588c <CheckSnippetCondition+0x108>)
 8005792:	5c9b      	ldrb	r3, [r3, r2]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d021      	beq.n	80057dc <CheckSnippetCondition+0x58>
 8005798:	2000      	movs	r0, #0
 800579a:	2b03      	cmp	r3, #3
 800579c:	d130      	bne.n	8005800 <CheckSnippetCondition+0x7c>
			break;
			
						
		case SNIP_COND_MODULE_PARAM_CONST :	
			// Get the constant and module parameter values. 
			flt1 = *(float *)modParam[snippets[index].cond.buffer1[1]-1].paramPtr;
 800579e:	4d3b      	ldr	r5, [pc, #236]	; (800588c <CheckSnippetCondition+0x108>)
 80057a0:	00a6      	lsls	r6, r4, #2
 80057a2:	1933      	adds	r3, r6, r4
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	18eb      	adds	r3, r5, r3
 80057a8:	78da      	ldrb	r2, [r3, #3]
 80057aa:	3a01      	subs	r2, #1
 80057ac:	0053      	lsls	r3, r2, #1
 80057ae:	189b      	adds	r3, r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4a37      	ldr	r2, [pc, #220]	; (8005890 <CheckSnippetCondition+0x10c>)
 80057b4:	589b      	ldr	r3, [r3, r2]
 80057b6:	681f      	ldr	r7, [r3, #0]
			memcpy( (uint8_t *)&flt2, &snippets[index].cond.buffer2, sizeof(float));		// This buffer can be misaligned and cause hardfault on F0
 80057b8:	1931      	adds	r1, r6, r4
 80057ba:	0089      	lsls	r1, r1, #2
 80057bc:	3106      	adds	r1, #6
 80057be:	1949      	adds	r1, r1, r5
 80057c0:	2204      	movs	r2, #4
 80057c2:	a801      	add	r0, sp, #4
 80057c4:	f00e fecc 	bl	8014560 <memcpy>
			// Compare them mathematically
			switch (snippets[index].cond.mathOperator)
 80057c8:	1936      	adds	r6, r6, r4
 80057ca:	00b6      	lsls	r6, r6, #2
 80057cc:	19ad      	adds	r5, r5, r6
 80057ce:	786b      	ldrb	r3, [r5, #1]
 80057d0:	2b06      	cmp	r3, #6
 80057d2:	d853      	bhi.n	800587c <CheckSnippetCondition+0xf8>
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4a2f      	ldr	r2, [pc, #188]	; (8005894 <CheckSnippetCondition+0x110>)
 80057d8:	58d3      	ldr	r3, [r2, r3]
 80057da:	469f      	mov	pc, r3
  		temp8 = snippets[index].cond.buffer1[0]; 	// Button port
 80057dc:	4a2b      	ldr	r2, [pc, #172]	; (800588c <CheckSnippetCondition+0x108>)
 80057de:	0080      	lsls	r0, r0, #2
 80057e0:	1903      	adds	r3, r0, r4
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	18d3      	adds	r3, r2, r3
			if (snippets[index].cond.buffer1[1] == button[temp8].state)
 80057e6:	7899      	ldrb	r1, [r3, #2]
 80057e8:	00cb      	lsls	r3, r1, #3
 80057ea:	185b      	adds	r3, r3, r1
 80057ec:	1900      	adds	r0, r0, r4
 80057ee:	0080      	lsls	r0, r0, #2
 80057f0:	1812      	adds	r2, r2, r0
 80057f2:	4929      	ldr	r1, [pc, #164]	; (8005898 <CheckSnippetCondition+0x114>)
 80057f4:	5c58      	ldrb	r0, [r3, r1]
 80057f6:	78d3      	ldrb	r3, [r2, #3]
 80057f8:	1ac0      	subs	r0, r0, r3
 80057fa:	4243      	negs	r3, r0
 80057fc:	4158      	adcs	r0, r3
 80057fe:	b2c0      	uxtb	r0, r0
  	default:
  		break;
  }
	
	return false;
}
 8005800:	b003      	add	sp, #12
 8005802:	bdf0      	pop	{r4, r5, r6, r7, pc}
      	case MATH_EQUAL:					if (flt1 == flt2)	return true;	break;
 8005804:	1c39      	adds	r1, r7, #0
 8005806:	9801      	ldr	r0, [sp, #4]
 8005808:	f7fa fe62 	bl	80004d0 <__aeabi_fcmpeq>
 800580c:	1e43      	subs	r3, r0, #1
 800580e:	4198      	sbcs	r0, r3
 8005810:	e7f6      	b.n	8005800 <CheckSnippetCondition+0x7c>
      	case MATH_GREATER:				if (flt1 > flt2)	return true;	break;
 8005812:	1c39      	adds	r1, r7, #0
 8005814:	9801      	ldr	r0, [sp, #4]
 8005816:	f7fa fe61 	bl	80004dc <__aeabi_fcmplt>
 800581a:	1e43      	subs	r3, r0, #1
 800581c:	4198      	sbcs	r0, r3
 800581e:	e7ef      	b.n	8005800 <CheckSnippetCondition+0x7c>
		    case MATH_SMALLER:				if (flt1 < flt2 && flt1 != 0.0f)	return true;	break;
 8005820:	1c39      	adds	r1, r7, #0
 8005822:	9801      	ldr	r0, [sp, #4]
 8005824:	f7fa fe6e 	bl	8000504 <__aeabi_fcmpgt>
 8005828:	2800      	cmp	r0, #0
 800582a:	d029      	beq.n	8005880 <CheckSnippetCondition+0xfc>
 800582c:	2100      	movs	r1, #0
 800582e:	1c38      	adds	r0, r7, #0
 8005830:	f7fa fe4e 	bl	80004d0 <__aeabi_fcmpeq>
 8005834:	4243      	negs	r3, r0
 8005836:	4158      	adcs	r0, r3
 8005838:	e7e2      	b.n	8005800 <CheckSnippetCondition+0x7c>
			  case MATH_GREATER_EQUAL:	if (flt1 >= flt2)	return true;	break;
 800583a:	1c39      	adds	r1, r7, #0
 800583c:	9801      	ldr	r0, [sp, #4]
 800583e:	f7fa fe57 	bl	80004f0 <__aeabi_fcmple>
 8005842:	1e43      	subs	r3, r0, #1
 8005844:	4198      	sbcs	r0, r3
 8005846:	e7db      	b.n	8005800 <CheckSnippetCondition+0x7c>
			  case MATH_SMALLER_EQUAL:	if (flt1 <= flt2 && flt1 != 0.0f)	return true;	break;
 8005848:	1c39      	adds	r1, r7, #0
 800584a:	9801      	ldr	r0, [sp, #4]
 800584c:	f7fa fe64 	bl	8000518 <__aeabi_fcmpge>
 8005850:	2800      	cmp	r0, #0
 8005852:	d017      	beq.n	8005884 <CheckSnippetCondition+0x100>
 8005854:	2100      	movs	r1, #0
 8005856:	1c38      	adds	r0, r7, #0
 8005858:	f7fa fe3a 	bl	80004d0 <__aeabi_fcmpeq>
 800585c:	4243      	negs	r3, r0
 800585e:	4158      	adcs	r0, r3
 8005860:	e7ce      	b.n	8005800 <CheckSnippetCondition+0x7c>
				case MATH_NOT_EQUAL:			if (flt1 != flt2 && flt1 != 0.0f)	return true;	break;
 8005862:	1c39      	adds	r1, r7, #0
 8005864:	9801      	ldr	r0, [sp, #4]
 8005866:	f7fa fe33 	bl	80004d0 <__aeabi_fcmpeq>
 800586a:	2800      	cmp	r0, #0
 800586c:	d10c      	bne.n	8005888 <CheckSnippetCondition+0x104>
 800586e:	2100      	movs	r1, #0
 8005870:	1c38      	adds	r0, r7, #0
 8005872:	f7fa fe2d 	bl	80004d0 <__aeabi_fcmpeq>
 8005876:	4243      	negs	r3, r0
 8005878:	4158      	adcs	r0, r3
 800587a:	e7c1      	b.n	8005800 <CheckSnippetCondition+0x7c>
			switch (snippets[index].cond.mathOperator)
 800587c:	2000      	movs	r0, #0
 800587e:	e7bf      	b.n	8005800 <CheckSnippetCondition+0x7c>
	return false;
 8005880:	2000      	movs	r0, #0
 8005882:	e7bd      	b.n	8005800 <CheckSnippetCondition+0x7c>
 8005884:	2000      	movs	r0, #0
 8005886:	e7bb      	b.n	8005800 <CheckSnippetCondition+0x7c>
 8005888:	2000      	movs	r0, #0
 800588a:	e7b9      	b.n	8005800 <CheckSnippetCondition+0x7c>
 800588c:	20006700 	.word	0x20006700
 8005890:	200000dc 	.word	0x200000dc
 8005894:	0801b32c 	.word	0x0801b32c
 8005898:	20001240 	.word	0x20001240

0800589c <ExecuteSnippet>:
/*-----------------------------------------------------------*/

/* Execute activated Command Snippets
*/
BOS_Status ExecuteSnippet(void)
{
 800589c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589e:	46ce      	mov	lr, r9
 80058a0:	4647      	mov	r7, r8
 80058a2:	b580      	push	{r7, lr}
	
	/* Must get this address even if output is not used otherwise memory will corrupt */
	/* Obtain the address of the output buffer.  Note there is no mutual
	exclusion on this buffer as it is assumed only one command console
	interface will be used at any one time. */
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();	
 80058a4:	f009 fa4e 	bl	800ed44 <FreeRTOS_CLIGetOutputBuffer>
 80058a8:	0006      	movs	r6, r0
	
	/* Go through activated Snippets */
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 80058aa:	4b20      	ldr	r3, [pc, #128]	; (800592c <ExecuteSnippet+0x90>)
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d036      	beq.n	8005920 <ExecuteSnippet+0x84>
 80058b2:	2400      	movs	r4, #0
  {
		if (snippets[s].state)								// Check for activated Snippets
 80058b4:	4f1e      	ldr	r7, [pc, #120]	; (8005930 <ExecuteSnippet+0x94>)
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
				{			
					/* Pass the received command to the command interpreter.  The
					command interpreter is called repeatedly until it returns
					pdFALSE as it might generate more than one string. */
					CLI_CommandParser(PcPort, false, cInputString, pcOutputString);
 80058b6:	4b1f      	ldr	r3, [pc, #124]	; (8005934 <ExecuteSnippet+0x98>)
 80058b8:	4698      	mov	r8, r3
 80058ba:	e01a      	b.n	80058f2 <ExecuteSnippet+0x56>
 80058bc:	4b1e      	ldr	r3, [pc, #120]	; (8005938 <ExecuteSnippet+0x9c>)
 80058be:	7818      	ldrb	r0, [r3, #0]
 80058c0:	0033      	movs	r3, r6
 80058c2:	4642      	mov	r2, r8
 80058c4:	2100      	movs	r1, #0
 80058c6:	f7ff fc1d 	bl	8005104 <CLI_CommandParser>
					
					/* Clear output buffer since we do not need it. Input buffer is cleared in  CLI_CommandParser */
					memset( pcOutputString, 0x00, strlen((char*) pcOutputString) );
 80058ca:	0030      	movs	r0, r6
 80058cc:	f7fa fc24 	bl	8000118 <strlen>
 80058d0:	0002      	movs	r2, r0
 80058d2:	2100      	movs	r1, #0
 80058d4:	0030      	movs	r0, r6
 80058d6:	f00e fe4c 	bl	8014572 <memset>
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 80058da:	4649      	mov	r1, r9
 80058dc:	68e8      	ldr	r0, [r5, #12]
 80058de:	f7ff ff0f 	bl	8005700 <ParseSnippetCommand>
 80058e2:	2800      	cmp	r0, #0
 80058e4:	d1ea      	bne.n	80058bc <ExecuteSnippet+0x20>
	for(s=0 ; s<numOfRecordedSnippets ; s++)
 80058e6:	3401      	adds	r4, #1
 80058e8:	b2a4      	uxth	r4, r4
 80058ea:	4b10      	ldr	r3, [pc, #64]	; (800592c <ExecuteSnippet+0x90>)
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	42a3      	cmp	r3, r4
 80058f0:	d916      	bls.n	8005920 <ExecuteSnippet+0x84>
		if (snippets[s].state)								// Check for activated Snippets
 80058f2:	00a3      	lsls	r3, r4, #2
 80058f4:	191b      	adds	r3, r3, r4
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	18fb      	adds	r3, r7, r3
 80058fa:	7c1b      	ldrb	r3, [r3, #16]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0f2      	beq.n	80058e6 <ExecuteSnippet+0x4a>
			if (CheckSnippetCondition(s))				// Process Snippet condition 				
 8005900:	b2e0      	uxtb	r0, r4
 8005902:	f7ff ff3f 	bl	8005784 <CheckSnippetCondition>
 8005906:	2800      	cmp	r0, #0
 8005908:	d0ed      	beq.n	80058e6 <ExecuteSnippet+0x4a>
				BOS.response = BOS_RESPONSE_MSG;		// Disable CLI response
 800590a:	4b0c      	ldr	r3, [pc, #48]	; (800593c <ExecuteSnippet+0xa0>)
 800590c:	2220      	movs	r2, #32
 800590e:	719a      	strb	r2, [r3, #6]
				while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &cInputString) != false)
 8005910:	4b08      	ldr	r3, [pc, #32]	; (8005934 <ExecuteSnippet+0x98>)
 8005912:	4699      	mov	r9, r3
 8005914:	00a3      	lsls	r3, r4, #2
 8005916:	191d      	adds	r5, r3, r4
 8005918:	00ad      	lsls	r5, r5, #2
 800591a:	4b05      	ldr	r3, [pc, #20]	; (8005930 <ExecuteSnippet+0x94>)
 800591c:	195d      	adds	r5, r3, r5
 800591e:	e7dc      	b.n	80058da <ExecuteSnippet+0x3e>
			}
		}
  }
	
	return result;
}
 8005920:	2000      	movs	r0, #0
 8005922:	bcc0      	pop	{r6, r7}
 8005924:	46b9      	mov	r9, r7
 8005926:	46b0      	mov	r8, r6
 8005928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800592a:	46c0      	nop			; (mov r8, r8)
 800592c:	20000f57 	.word	0x20000f57
 8005930:	20006700 	.word	0x20006700
 8005934:	20000ef0 	.word	0x20000ef0
 8005938:	20000b67 	.word	0x20000b67
 800593c:	200066e4 	.word	0x200066e4

08005940 <setBaudrateCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE setBaudrateCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{
 8005940:	b570      	push	{r4, r5, r6, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	0004      	movs	r4, r0
 8005946:	0015      	movs	r5, r2
	BOS_Status result = BOS_OK;

	int8_t *pcParameterString1;
	int8_t *pcParameterString2;
	portBASE_TYPE xParameterStringLength1 = 0;
 8005948:	2300      	movs	r3, #0
 800594a:	9301      	str	r3, [sp, #4]
	portBASE_TYPE xParameterStringLength2 = 0;
 800594c:	9300      	str	r3, [sp, #0]

	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 800594e:	2800      	cmp	r0, #0
 8005950:	d015      	beq.n	800597e <setBaudrateCommand+0x3e>

	/* 1st parameter for port name: P1 to P6 */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005952:	aa01      	add	r2, sp, #4
 8005954:	2101      	movs	r1, #1
 8005956:	0028      	movs	r0, r5
 8005958:	f009 f9f8 	bl	800ed4c <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 800595c:	2300      	movs	r3, #0
 800595e:	56c3      	ldrsb	r3, [r0, r3]
 8005960:	2b70      	cmp	r3, #112	; 0x70
 8005962:	d00e      	beq.n	8005982 <setBaudrateCommand+0x42>
	else
	{
		result = BOS_ERR_WrongValue;
	}
  /* 2nd parameter for baudrate */
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005964:	466a      	mov	r2, sp
 8005966:	2102      	movs	r1, #2
 8005968:	0028      	movs	r0, r5
 800596a:	f009 f9ef 	bl	800ed4c <FreeRTOS_CLIGetParameter>
	baudrate = ( uint32_t ) atol( ( char * ) pcParameterString2 );
 800596e:	f00e fb96 	bl	801409e <atol>

	/* Respond to the command */
	if (BOS_ERR_WrongValue == result)
	{
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 8005972:	2213      	movs	r2, #19
 8005974:	4910      	ldr	r1, [pc, #64]	; (80059b8 <setBaudrateCommand+0x78>)
 8005976:	0020      	movs	r0, r4
 8005978:	f00e fdf2 	bl	8014560 <memcpy>
		UpdateBaudrate(port, baudrate);
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, baudrate, port);
  }

	/* There is no more data to return after this single string, so return pdFALSE. */
	return pdFALSE;
 800597c:	e018      	b.n	80059b0 <setBaudrateCommand+0x70>
	configASSERT( pcWriteBuffer );
 800597e:	b672      	cpsid	i
 8005980:	e7fe      	b.n	8005980 <setBaudrateCommand+0x40>
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8005982:	3001      	adds	r0, #1
 8005984:	f00e fb8b 	bl	801409e <atol>
 8005988:	0006      	movs	r6, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800598a:	466a      	mov	r2, sp
 800598c:	2102      	movs	r1, #2
 800598e:	0028      	movs	r0, r5
 8005990:	f009 f9dc 	bl	800ed4c <FreeRTOS_CLIGetParameter>
	baudrate = ( uint32_t ) atol( ( char * ) pcParameterString2 );
 8005994:	f00e fb83 	bl	801409e <atol>
 8005998:	0005      	movs	r5, r0
		UpdateBaudrate(port, baudrate);
 800599a:	b2f0      	uxtb	r0, r6
 800599c:	0029      	movs	r1, r5
 800599e:	f008 fbf3 	bl	800e188 <UpdateBaudrate>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, baudrate, port);
 80059a2:	23ff      	movs	r3, #255	; 0xff
 80059a4:	4033      	ands	r3, r6
 80059a6:	002a      	movs	r2, r5
 80059a8:	4904      	ldr	r1, [pc, #16]	; (80059bc <setBaudrateCommand+0x7c>)
 80059aa:	0020      	movs	r0, r4
 80059ac:	f00f f80a 	bl	80149c4 <sprintf>
}
 80059b0:	2000      	movs	r0, #0
 80059b2:	b002      	add	sp, #8
 80059b4:	bd70      	pop	{r4, r5, r6, pc}
 80059b6:	46c0      	nop			; (mov r8, r8)
 80059b8:	0801b370 	.word	0x0801b370
 80059bc:	0801b348 	.word	0x0801b348

080059c0 <flashsizeCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE flashsizeCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 80059c0:	b510      	push	{r4, lr}
	
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 80059c2:	2800      	cmp	r0, #0
 80059c4:	d006      	beq.n	80059d4 <flashsizeCommand+0x14>
	
	/* Respond to the command */
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFLASH, (*(uint32_t *) (MCU_F0_FLASH_SIZE_BASE)) & 0x0000FFFF );
 80059c6:	4b04      	ldr	r3, [pc, #16]	; (80059d8 <flashsizeCommand+0x18>)
 80059c8:	881a      	ldrh	r2, [r3, #0]
 80059ca:	4904      	ldr	r1, [pc, #16]	; (80059dc <flashsizeCommand+0x1c>)
 80059cc:	f00e fffa 	bl	80149c4 <sprintf>


	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 80059d0:	2000      	movs	r0, #0
 80059d2:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 80059d4:	b672      	cpsid	i
 80059d6:	e7fe      	b.n	80059d6 <flashsizeCommand+0x16>
 80059d8:	1ffff7cc 	.word	0x1ffff7cc
 80059dc:	0801b384 	.word	0x0801b384

080059e0 <testportCommand>:
}

/*-----------------------------------------------------------*/

static portBASE_TYPE testportCommand( int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString )
{	
 80059e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059e2:	46d6      	mov	lr, sl
 80059e4:	464f      	mov	r7, r9
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b085      	sub	sp, #20
 80059ea:	0004      	movs	r4, r0
 80059ec:	0010      	movs	r0, r2
	static const int8_t *pcMessageWrong = ( int8_t * ) "Wrong syntax\n\r";
	static const int8_t *pcMessageFail = ( int8_t * ) "P%d test failed\n\r";
  static const int8_t *pcMessageWrong1 = ( int8_t * ) "the port number is wrong\n\r";
  static const int8_t *pcMessageWait = ( int8_t * )"Please shorten the next port and press any key to continue testing the next one\n\r\n\r";
	int8_t *pcParameterString1;
	portBASE_TYPE xParameterStringLength1 = 0;
 80059ee:	2300      	movs	r3, #0
 80059f0:	9303      	str	r3, [sp, #12]
	BOS_Status result = BOS_OK;
	uint8_t portt,ports;
  extern uint8_t UARTRxBufIndex[NumOfPorts];
  char WriteVaule[1]="H";
 80059f2:	4b63      	ldr	r3, [pc, #396]	; (8005b80 <testportCommand+0x1a0>)
 80059f4:	781a      	ldrb	r2, [r3, #0]
 80059f6:	ab02      	add	r3, sp, #8
 80059f8:	701a      	strb	r2, [r3, #0]
  int LastEnter=0;
	/* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) xWriteBufferLen;
	configASSERT( pcWriteBuffer );
 80059fa:	2c00      	cmp	r4, #0
 80059fc:	d012      	beq.n	8005a24 <testportCommand+0x44>
	
	/* Obtain the 1st parameter string. */
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80059fe:	aa03      	add	r2, sp, #12
 8005a00:	2101      	movs	r1, #1
 8005a02:	f009 f9a3 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 8005a06:	0005      	movs	r5, r0
  if(strcmp((char *)pcParameterString1,"all")==0)
 8005a08:	495e      	ldr	r1, [pc, #376]	; (8005b84 <testportCommand+0x1a4>)
 8005a0a:	f7fa fb7b 	bl	8000104 <strcmp>
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	d174      	bne.n	8005afc <testportCommand+0x11c>
  { 
    if(LastEnter==0)
      LastEnter=  UARTRxBufIndex[PcPort-1];
 8005a12:	4b5d      	ldr	r3, [pc, #372]	; (8005b88 <testportCommand+0x1a8>)
 8005a14:	781a      	ldrb	r2, [r3, #0]
 8005a16:	4b5d      	ldr	r3, [pc, #372]	; (8005b8c <testportCommand+0x1ac>)
 8005a18:	189b      	adds	r3, r3, r2
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	781f      	ldrb	r7, [r3, #0]
 8005a1e:	2501      	movs	r5, #1
    for (ports=1;ports<=NumOfPorts;ports++)
    {
      if(PcPort!=ports)
 8005a20:	4e59      	ldr	r6, [pc, #356]	; (8005b88 <testportCommand+0x1a8>)
 8005a22:	e03e      	b.n	8005aa2 <testportCommand+0xc2>
	configASSERT( pcWriteBuffer );
 8005a24:	b672      	cpsid	i
 8005a26:	e7fe      	b.n	8005a26 <testportCommand+0x46>
        result = BOS_OK;
      else
        result = BOS_ERR_Keyword;
      
      if (result == BOS_OK){ 
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, ports);
 8005a28:	002a      	movs	r2, r5
 8005a2a:	4959      	ldr	r1, [pc, #356]	; (8005b90 <testportCommand+0x1b0>)
 8005a2c:	0020      	movs	r0, r4
 8005a2e:	f00e ffc9 	bl	80149c4 <sprintf>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
 8005a32:	0020      	movs	r0, r4
 8005a34:	f7fa fb70 	bl	8000118 <strlen>
 8005a38:	b282      	uxth	r2, r0
 8005a3a:	4b53      	ldr	r3, [pc, #332]	; (8005b88 <testportCommand+0x1a8>)
 8005a3c:	7818      	ldrb	r0, [r3, #0]
 8005a3e:	2364      	movs	r3, #100	; 0x64
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	3b5a      	subs	r3, #90	; 0x5a
 8005a44:	0021      	movs	r1, r4
 8005a46:	f008 fb2f 	bl	800e0a8 <writePxMutex>
     	else if (result == BOS_ERR_Keyword){
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, ports );	
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
       strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWait );	
 8005a4a:	2254      	movs	r2, #84	; 0x54
 8005a4c:	4951      	ldr	r1, [pc, #324]	; (8005b94 <testportCommand+0x1b4>)
 8005a4e:	0020      	movs	r0, r4
 8005a50:	f00e fd86 	bl	8014560 <memcpy>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);
 8005a54:	0020      	movs	r0, r4
 8005a56:	f7fa fb5f 	bl	8000118 <strlen>
 8005a5a:	b282      	uxth	r2, r0
 8005a5c:	4b4a      	ldr	r3, [pc, #296]	; (8005b88 <testportCommand+0x1a8>)
 8005a5e:	7818      	ldrb	r0, [r3, #0]
 8005a60:	2364      	movs	r3, #100	; 0x64
 8005a62:	9300      	str	r3, [sp, #0]
 8005a64:	3b5a      	subs	r3, #90	; 0x5a
 8005a66:	0021      	movs	r1, r4
 8005a68:	f008 fb1e 	bl	800e0a8 <writePxMutex>
       while(UARTRxBuf[PcPort-1][LastEnter+1]==0){Delay_ms(1);}
 8005a6c:	3701      	adds	r7, #1
 8005a6e:	4b46      	ldr	r3, [pc, #280]	; (8005b88 <testportCommand+0x1a8>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	3b01      	subs	r3, #1
 8005a74:	019b      	lsls	r3, r3, #6
 8005a76:	4a48      	ldr	r2, [pc, #288]	; (8005b98 <testportCommand+0x1b8>)
 8005a78:	18d3      	adds	r3, r2, r3
 8005a7a:	5ddb      	ldrb	r3, [r3, r7]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10d      	bne.n	8005a9c <testportCommand+0xbc>
 8005a80:	4692      	mov	sl, r2
 8005a82:	4b41      	ldr	r3, [pc, #260]	; (8005b88 <testportCommand+0x1a8>)
 8005a84:	4699      	mov	r9, r3
 8005a86:	2001      	movs	r0, #1
 8005a88:	f00b f8ac 	bl	8010be4 <HAL_Delay>
 8005a8c:	464b      	mov	r3, r9
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	3b01      	subs	r3, #1
 8005a92:	019b      	lsls	r3, r3, #6
 8005a94:	4453      	add	r3, sl
 8005a96:	5ddb      	ldrb	r3, [r3, r7]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d0f4      	beq.n	8005a86 <testportCommand+0xa6>
    for (ports=1;ports<=NumOfPorts;ports++)
 8005a9c:	3501      	adds	r5, #1
 8005a9e:	2d07      	cmp	r5, #7
 8005aa0:	d035      	beq.n	8005b0e <testportCommand+0x12e>
 8005aa2:	b2eb      	uxtb	r3, r5
 8005aa4:	4699      	mov	r9, r3
      if(PcPort!=ports)
 8005aa6:	7833      	ldrb	r3, [r6, #0]
 8005aa8:	454b      	cmp	r3, r9
 8005aaa:	d0f7      	beq.n	8005a9c <testportCommand+0xbc>
        WriteVaule[0]=rand();
 8005aac:	f00e fd7a 	bl	80145a4 <rand>
 8005ab0:	466b      	mov	r3, sp
 8005ab2:	7218      	strb	r0, [r3, #8]
        writePxMutex(ports, WriteVaule,1, 10, 100);
 8005ab4:	2364      	movs	r3, #100	; 0x64
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	3b5a      	subs	r3, #90	; 0x5a
 8005aba:	2201      	movs	r2, #1
 8005abc:	a902      	add	r1, sp, #8
 8005abe:	4648      	mov	r0, r9
 8005ac0:	f008 faf2 	bl	800e0a8 <writePxMutex>
        ReadValue[0]= (GetUart(ports)->Instance->RDR);
 8005ac4:	4648      	mov	r0, r9
 8005ac6:	f008 facd 	bl	800e064 <GetUart>
 8005aca:	6803      	ldr	r3, [r0, #0]
 8005acc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
      if(WriteVaule[0]==ReadValue[0])
 8005ace:	466a      	mov	r2, sp
 8005ad0:	7a12      	ldrb	r2, [r2, #8]
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d0a7      	beq.n	8005a28 <testportCommand+0x48>
       sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, ports );	
 8005ad8:	002a      	movs	r2, r5
 8005ada:	4930      	ldr	r1, [pc, #192]	; (8005b9c <testportCommand+0x1bc>)
 8005adc:	0020      	movs	r0, r4
 8005ade:	f00e ff71 	bl	80149c4 <sprintf>
       writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), 10, 100);}
 8005ae2:	0020      	movs	r0, r4
 8005ae4:	f7fa fb18 	bl	8000118 <strlen>
 8005ae8:	b282      	uxth	r2, r0
 8005aea:	4b27      	ldr	r3, [pc, #156]	; (8005b88 <testportCommand+0x1a8>)
 8005aec:	7818      	ldrb	r0, [r3, #0]
 8005aee:	2364      	movs	r3, #100	; 0x64
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	3b5a      	subs	r3, #90	; 0x5a
 8005af4:	0021      	movs	r1, r4
 8005af6:	f008 fad7 	bl	800e0a8 <writePxMutex>
 8005afa:	e7a6      	b.n	8005a4a <testportCommand+0x6a>
       LastEnter++;
        }
      }
    }
	else if (pcParameterString1[0] == 'p') {
 8005afc:	2300      	movs	r3, #0
 8005afe:	56eb      	ldrsb	r3, [r5, r3]
 8005b00:	2b70      	cmp	r3, #112	; 0x70
 8005b02:	d00a      	beq.n	8005b1a <testportCommand+0x13a>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong1 );	
	else if (result == BOS_ERR_Keyword)  
    sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, portt );
    }
    else {
    strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8005b04:	220f      	movs	r2, #15
 8005b06:	4926      	ldr	r1, [pc, #152]	; (8005ba0 <testportCommand+0x1c0>)
 8005b08:	0020      	movs	r0, r4
 8005b0a:	f00e fd29 	bl	8014560 <memcpy>
	}
	/* There is no more data to return after this single string, so return
	pdFALSE. */
	return pdFALSE;
}
 8005b0e:	2000      	movs	r0, #0
 8005b10:	b005      	add	sp, #20
 8005b12:	bcc0      	pop	{r6, r7}
 8005b14:	46ba      	mov	sl, r7
 8005b16:	46b1      	mov	r9, r6
 8005b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		portt = ( uint8_t ) atol( ( char * ) pcParameterString1+1);
 8005b1a:	1c68      	adds	r0, r5, #1
 8005b1c:	f00e fabf 	bl	801409e <atol>
 8005b20:	0005      	movs	r5, r0
 8005b22:	b2c6      	uxtb	r6, r0
    if(portt>0 && portt<=NumOfPorts)
 8005b24:	1e73      	subs	r3, r6, #1
 8005b26:	2b05      	cmp	r3, #5
 8005b28:	d905      	bls.n	8005b36 <testportCommand+0x156>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong1 );	
 8005b2a:	221b      	movs	r2, #27
 8005b2c:	491d      	ldr	r1, [pc, #116]	; (8005ba4 <testportCommand+0x1c4>)
 8005b2e:	0020      	movs	r0, r4
 8005b30:	f00e fd16 	bl	8014560 <memcpy>
	return pdFALSE;
 8005b34:	e7eb      	b.n	8005b0e <testportCommand+0x12e>
        WriteVaule[0]=rand();
 8005b36:	f00e fd35 	bl	80145a4 <rand>
 8005b3a:	466b      	mov	r3, sp
 8005b3c:	7218      	strb	r0, [r3, #8]
        writePxMutex(portt, WriteVaule,1, cmd50ms, 100);
 8005b3e:	2364      	movs	r3, #100	; 0x64
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	3b32      	subs	r3, #50	; 0x32
 8005b44:	2201      	movs	r2, #1
 8005b46:	a902      	add	r1, sp, #8
 8005b48:	0030      	movs	r0, r6
 8005b4a:	f008 faad 	bl	800e0a8 <writePxMutex>
        ReadValue[0]= (GetUart(portt)->Instance->RDR);
 8005b4e:	0030      	movs	r0, r6
 8005b50:	f008 fa88 	bl	800e064 <GetUart>
 8005b54:	6803      	ldr	r3, [r0, #0]
 8005b56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  if(WriteVaule[0]==ReadValue[0])
 8005b58:	466a      	mov	r2, sp
 8005b5a:	7a12      	ldrb	r2, [r2, #8]
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d006      	beq.n	8005b70 <testportCommand+0x190>
    sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail, portt );
 8005b62:	22ff      	movs	r2, #255	; 0xff
 8005b64:	402a      	ands	r2, r5
 8005b66:	490d      	ldr	r1, [pc, #52]	; (8005b9c <testportCommand+0x1bc>)
 8005b68:	0020      	movs	r0, r4
 8005b6a:	f00e ff2b 	bl	80149c4 <sprintf>
 8005b6e:	e7ce      	b.n	8005b0e <testportCommand+0x12e>
   sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, portt);
 8005b70:	22ff      	movs	r2, #255	; 0xff
 8005b72:	402a      	ands	r2, r5
 8005b74:	4906      	ldr	r1, [pc, #24]	; (8005b90 <testportCommand+0x1b0>)
 8005b76:	0020      	movs	r0, r4
 8005b78:	f00e ff24 	bl	80149c4 <sprintf>
 8005b7c:	e7c7      	b.n	8005b0e <testportCommand+0x12e>
 8005b7e:	46c0      	nop			; (mov r8, r8)
 8005b80:	0801b454 	.word	0x0801b454
 8005b84:	0801ab78 	.word	0x0801ab78
 8005b88:	20000b67 	.word	0x20000b67
 8005b8c:	20001188 	.word	0x20001188
 8005b90:	0801b3a4 	.word	0x0801b3a4
 8005b94:	0801b3d4 	.word	0x0801b3d4
 8005b98:	20001008 	.word	0x20001008
 8005b9c:	0801b3c0 	.word	0x0801b3c0
 8005ba0:	0801b428 	.word	0x0801b428
 8005ba4:	0801b438 	.word	0x0801b438

08005ba8 <unbridgeCommand>:
{	
 8005ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005baa:	b083      	sub	sp, #12
 8005bac:	0004      	movs	r4, r0
 8005bae:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	9301      	str	r3, [sp, #4]
 8005bb4:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	d017      	beq.n	8005bea <unbridgeCommand+0x42>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005bba:	aa01      	add	r2, sp, #4
 8005bbc:	2101      	movs	r1, #1
 8005bbe:	0028      	movs	r0, r5
 8005bc0:	f009 f8c4 	bl	800ed4c <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	56c3      	ldrsb	r3, [r0, r3]
 8005bc8:	2b70      	cmp	r3, #112	; 0x70
 8005bca:	d010      	beq.n	8005bee <unbridgeCommand+0x46>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005bcc:	466a      	mov	r2, sp
 8005bce:	2102      	movs	r1, #2
 8005bd0:	0028      	movs	r0, r5
 8005bd2:	f009 f8bb 	bl	800ed4c <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	56c3      	ldrsb	r3, [r0, r3]
 8005bda:	2b70      	cmp	r3, #112	; 0x70
 8005bdc:	d028      	beq.n	8005c30 <unbridgeCommand+0x88>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8005bde:	220f      	movs	r2, #15
 8005be0:	491a      	ldr	r1, [pc, #104]	; (8005c4c <unbridgeCommand+0xa4>)
 8005be2:	0020      	movs	r0, r4
 8005be4:	f00e fcbc 	bl	8014560 <memcpy>
 8005be8:	e02d      	b.n	8005c46 <unbridgeCommand+0x9e>
	configASSERT( pcWriteBuffer );
 8005bea:	b672      	cpsid	i
 8005bec:	e7fe      	b.n	8005bec <unbridgeCommand+0x44>
		port1 = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8005bee:	3001      	adds	r0, #1
 8005bf0:	f00e fa55 	bl	801409e <atol>
 8005bf4:	0006      	movs	r6, r0
 8005bf6:	b2c7      	uxtb	r7, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005bf8:	466a      	mov	r2, sp
 8005bfa:	2102      	movs	r1, #2
 8005bfc:	0028      	movs	r0, r5
 8005bfe:	f009 f8a5 	bl	800ed4c <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005c02:	2300      	movs	r3, #0
 8005c04:	56c3      	ldrsb	r3, [r0, r3]
 8005c06:	2b70      	cmp	r3, #112	; 0x70
 8005c08:	d1e9      	bne.n	8005bde <unbridgeCommand+0x36>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	f00e fa47 	bl	801409e <atol>
 8005c10:	0005      	movs	r5, r0
		result = Unbridge(port1, port2);
 8005c12:	b2c1      	uxtb	r1, r0
 8005c14:	0038      	movs	r0, r7
 8005c16:	f7fe ff71 	bl	8004afc <Unbridge>
	if (result == BOS_OK) 
 8005c1a:	2800      	cmp	r0, #0
 8005c1c:	d10c      	bne.n	8005c38 <unbridgeCommand+0x90>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, port1, port2 );
 8005c1e:	22ff      	movs	r2, #255	; 0xff
 8005c20:	002b      	movs	r3, r5
 8005c22:	4013      	ands	r3, r2
 8005c24:	4032      	ands	r2, r6
 8005c26:	490a      	ldr	r1, [pc, #40]	; (8005c50 <unbridgeCommand+0xa8>)
 8005c28:	0020      	movs	r0, r4
 8005c2a:	f00e fecb 	bl	80149c4 <sprintf>
 8005c2e:	e00a      	b.n	8005c46 <unbridgeCommand+0x9e>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8005c30:	3001      	adds	r0, #1
 8005c32:	f00e fa34 	bl	801409e <atol>
	else if (result == BOS_ERR_WrongParam) 
 8005c36:	e7d2      	b.n	8005bde <unbridgeCommand+0x36>
 8005c38:	2867      	cmp	r0, #103	; 0x67
 8005c3a:	d0d0      	beq.n	8005bde <unbridgeCommand+0x36>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail );	
 8005c3c:	2219      	movs	r2, #25
 8005c3e:	4905      	ldr	r1, [pc, #20]	; (8005c54 <unbridgeCommand+0xac>)
 8005c40:	0020      	movs	r0, r4
 8005c42:	f00e fc8d 	bl	8014560 <memcpy>
}
 8005c46:	2000      	movs	r0, #0
 8005c48:	b003      	add	sp, #12
 8005c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c4c:	0801b428 	.word	0x0801b428
 8005c50:	0801b458 	.word	0x0801b458
 8005c54:	0801b478 	.word	0x0801b478

08005c58 <bridgeCommand>:
{	
 8005c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	0004      	movs	r4, r0
 8005c5e:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8005c60:	2300      	movs	r3, #0
 8005c62:	9301      	str	r3, [sp, #4]
 8005c64:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 8005c66:	2800      	cmp	r0, #0
 8005c68:	d017      	beq.n	8005c9a <bridgeCommand+0x42>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005c6a:	aa01      	add	r2, sp, #4
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	0028      	movs	r0, r5
 8005c70:	f009 f86c 	bl	800ed4c <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8005c74:	2300      	movs	r3, #0
 8005c76:	56c3      	ldrsb	r3, [r0, r3]
 8005c78:	2b70      	cmp	r3, #112	; 0x70
 8005c7a:	d010      	beq.n	8005c9e <bridgeCommand+0x46>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005c7c:	466a      	mov	r2, sp
 8005c7e:	2102      	movs	r1, #2
 8005c80:	0028      	movs	r0, r5
 8005c82:	f009 f863 	bl	800ed4c <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005c86:	2300      	movs	r3, #0
 8005c88:	56c3      	ldrsb	r3, [r0, r3]
 8005c8a:	2b70      	cmp	r3, #112	; 0x70
 8005c8c:	d028      	beq.n	8005ce0 <bridgeCommand+0x88>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );	
 8005c8e:	220f      	movs	r2, #15
 8005c90:	491a      	ldr	r1, [pc, #104]	; (8005cfc <bridgeCommand+0xa4>)
 8005c92:	0020      	movs	r0, r4
 8005c94:	f00e fc64 	bl	8014560 <memcpy>
 8005c98:	e02d      	b.n	8005cf6 <bridgeCommand+0x9e>
	configASSERT( pcWriteBuffer );
 8005c9a:	b672      	cpsid	i
 8005c9c:	e7fe      	b.n	8005c9c <bridgeCommand+0x44>
		port1 = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8005c9e:	3001      	adds	r0, #1
 8005ca0:	f00e f9fd 	bl	801409e <atol>
 8005ca4:	0006      	movs	r6, r0
 8005ca6:	b2c7      	uxtb	r7, r0
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8005ca8:	466a      	mov	r2, sp
 8005caa:	2102      	movs	r1, #2
 8005cac:	0028      	movs	r0, r5
 8005cae:	f009 f84d 	bl	800ed4c <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	56c3      	ldrsb	r3, [r0, r3]
 8005cb6:	2b70      	cmp	r3, #112	; 0x70
 8005cb8:	d1e9      	bne.n	8005c8e <bridgeCommand+0x36>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8005cba:	3001      	adds	r0, #1
 8005cbc:	f00e f9ef 	bl	801409e <atol>
 8005cc0:	0005      	movs	r5, r0
		result = Bridge(port1, port2);
 8005cc2:	b2c1      	uxtb	r1, r0
 8005cc4:	0038      	movs	r0, r7
 8005cc6:	f7fe ff05 	bl	8004ad4 <Bridge>
	if (result == BOS_OK) 
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	d10c      	bne.n	8005ce8 <bridgeCommand+0x90>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, port1, port2 );
 8005cce:	22ff      	movs	r2, #255	; 0xff
 8005cd0:	002b      	movs	r3, r5
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	4032      	ands	r2, r6
 8005cd6:	490a      	ldr	r1, [pc, #40]	; (8005d00 <bridgeCommand+0xa8>)
 8005cd8:	0020      	movs	r0, r4
 8005cda:	f00e fe73 	bl	80149c4 <sprintf>
 8005cde:	e00a      	b.n	8005cf6 <bridgeCommand+0x9e>
		port2 = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8005ce0:	3001      	adds	r0, #1
 8005ce2:	f00e f9dc 	bl	801409e <atol>
	else if (result == BOS_ERR_WrongParam) 
 8005ce6:	e7d2      	b.n	8005c8e <bridgeCommand+0x36>
 8005ce8:	2867      	cmp	r0, #103	; 0x67
 8005cea:	d0d0      	beq.n	8005c8e <bridgeCommand+0x36>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageFail );	
 8005cec:	2217      	movs	r2, #23
 8005cee:	4905      	ldr	r1, [pc, #20]	; (8005d04 <bridgeCommand+0xac>)
 8005cf0:	0020      	movs	r0, r4
 8005cf2:	f00e fc35 	bl	8014560 <memcpy>
}
 8005cf6:	2000      	movs	r0, #0
 8005cf8:	b003      	add	sp, #12
 8005cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cfc:	0801b428 	.word	0x0801b428
 8005d00:	0801b494 	.word	0x0801b494
 8005d04:	0801b4b8 	.word	0x0801b4b8

08005d08 <delSnipCommand>:
{	
 8005d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d0a:	46de      	mov	lr, fp
 8005d0c:	4657      	mov	r7, sl
 8005d0e:	464e      	mov	r6, r9
 8005d10:	4645      	mov	r5, r8
 8005d12:	b5e0      	push	{r5, r6, r7, lr}
 8005d14:	b083      	sub	sp, #12
 8005d16:	0007      	movs	r7, r0
 8005d18:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8005d1e:	2f00      	cmp	r7, #0
 8005d20:	d013      	beq.n	8005d4a <delSnipCommand+0x42>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005d22:	aa01      	add	r2, sp, #4
 8005d24:	2101      	movs	r1, #1
 8005d26:	f009 f811 	bl	800ed4c <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8005d2a:	f00e f9b2 	bl	8014092 <atoi>
 8005d2e:	4681      	mov	r9, r0
 8005d30:	b2c5      	uxtb	r5, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8005d32:	2d00      	cmp	r5, #0
 8005d34:	d003      	beq.n	8005d3e <delSnipCommand+0x36>
 8005d36:	4b31      	ldr	r3, [pc, #196]	; (8005dfc <delSnipCommand+0xf4>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	42ab      	cmp	r3, r5
 8005d3c:	d207      	bcs.n	8005d4e <delSnipCommand+0x46>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8005d3e:	2223      	movs	r2, #35	; 0x23
 8005d40:	492f      	ldr	r1, [pc, #188]	; (8005e00 <delSnipCommand+0xf8>)
 8005d42:	0038      	movs	r0, r7
 8005d44:	f00e fc0c 	bl	8014560 <memcpy>
	return pdFALSE;
 8005d48:	e04f      	b.n	8005dea <delSnipCommand+0xe2>
	configASSERT( pcWriteBuffer );
 8005d4a:	b672      	cpsid	i
 8005d4c:	e7fe      	b.n	8005d4c <delSnipCommand+0x44>
		snippets[index-1].cond.conditionType = 0;
 8005d4e:	24ff      	movs	r4, #255	; 0xff
 8005d50:	4004      	ands	r4, r0
 8005d52:	3c01      	subs	r4, #1
 8005d54:	4b2b      	ldr	r3, [pc, #172]	; (8005e04 <delSnipCommand+0xfc>)
 8005d56:	4698      	mov	r8, r3
 8005d58:	00a6      	lsls	r6, r4, #2
 8005d5a:	1933      	adds	r3, r6, r4
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	2200      	movs	r2, #0
 8005d60:	4692      	mov	sl, r2
 8005d62:	4642      	mov	r2, r8
 8005d64:	4651      	mov	r1, sl
 8005d66:	5499      	strb	r1, [r3, r2]
		snippets[index-1].cond.mathOperator = 0;
 8005d68:	1933      	adds	r3, r6, r4
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	4443      	add	r3, r8
 8005d6e:	469b      	mov	fp, r3
 8005d70:	4652      	mov	r2, sl
 8005d72:	7059      	strb	r1, [r3, #1]
		memset(snippets[index-1].cond.buffer1, 0, 4);
 8005d74:	1930      	adds	r0, r6, r4
 8005d76:	0080      	lsls	r0, r0, #2
 8005d78:	3002      	adds	r0, #2
 8005d7a:	4440      	add	r0, r8
 8005d7c:	3204      	adds	r2, #4
 8005d7e:	f00e fbf8 	bl	8014572 <memset>
		snippets[index-1].state = false;
 8005d82:	465b      	mov	r3, fp
 8005d84:	4652      	mov	r2, sl
 8005d86:	741a      	strb	r2, [r3, #16]
		free(snippets[index-1].cmd);
 8005d88:	68d8      	ldr	r0, [r3, #12]
 8005d8a:	f00e f9bd 	bl	8014108 <free>
		snippets[index-1].cmd = NULL;
 8005d8e:	465c      	mov	r4, fp
 8005d90:	4653      	mov	r3, sl
 8005d92:	60e3      	str	r3, [r4, #12]
		for(uint8_t s=index ; s<numOfRecordedSnippets ; s++) {
 8005d94:	4b19      	ldr	r3, [pc, #100]	; (8005dfc <delSnipCommand+0xf4>)
 8005d96:	781e      	ldrb	r6, [r3, #0]
 8005d98:	42b5      	cmp	r5, r6
 8005d9a:	d21c      	bcs.n	8005dd6 <delSnipCommand+0xce>
 8005d9c:	20ff      	movs	r0, #255	; 0xff
 8005d9e:	464b      	mov	r3, r9
 8005da0:	4018      	ands	r0, r3
 8005da2:	0084      	lsls	r4, r0, #2
 8005da4:	1824      	adds	r4, r4, r0
 8005da6:	00a4      	lsls	r4, r4, #2
 8005da8:	4b16      	ldr	r3, [pc, #88]	; (8005e04 <delSnipCommand+0xfc>)
 8005daa:	18e4      	adds	r4, r4, r3
 8005dac:	e004      	b.n	8005db8 <delSnipCommand+0xb0>
 8005dae:	3501      	adds	r5, #1
 8005db0:	b2ed      	uxtb	r5, r5
 8005db2:	3414      	adds	r4, #20
 8005db4:	42b5      	cmp	r5, r6
 8005db6:	d00e      	beq.n	8005dd6 <delSnipCommand+0xce>
			if (snippets[s].cond.conditionType) {
 8005db8:	7823      	ldrb	r3, [r4, #0]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0f7      	beq.n	8005dae <delSnipCommand+0xa6>
				memcpy( &snippets[s-1], &snippets[s], sizeof(snippet_t) );
 8005dbe:	2214      	movs	r2, #20
 8005dc0:	0021      	movs	r1, r4
 8005dc2:	0020      	movs	r0, r4
 8005dc4:	3814      	subs	r0, #20
 8005dc6:	f00e fbcb 	bl	8014560 <memcpy>
				memset( &snippets[s], 0, sizeof(snippet_t) );
 8005dca:	2214      	movs	r2, #20
 8005dcc:	2100      	movs	r1, #0
 8005dce:	0020      	movs	r0, r4
 8005dd0:	f00e fbcf 	bl	8014572 <memset>
 8005dd4:	e7eb      	b.n	8005dae <delSnipCommand+0xa6>
		--numOfRecordedSnippets;
 8005dd6:	3e01      	subs	r6, #1
 8005dd8:	4b08      	ldr	r3, [pc, #32]	; (8005dfc <delSnipCommand+0xf4>)
 8005dda:	701e      	strb	r6, [r3, #0]
		SaveToRO();
 8005ddc:	f006 f8e2 	bl	800bfa4 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8005de0:	2236      	movs	r2, #54	; 0x36
 8005de2:	4909      	ldr	r1, [pc, #36]	; (8005e08 <delSnipCommand+0x100>)
 8005de4:	0038      	movs	r0, r7
 8005de6:	f00e fbbb 	bl	8014560 <memcpy>
}
 8005dea:	2000      	movs	r0, #0
 8005dec:	b003      	add	sp, #12
 8005dee:	bcf0      	pop	{r4, r5, r6, r7}
 8005df0:	46bb      	mov	fp, r7
 8005df2:	46b2      	mov	sl, r6
 8005df4:	46a9      	mov	r9, r5
 8005df6:	46a0      	mov	r8, r4
 8005df8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dfa:	46c0      	nop			; (mov r8, r8)
 8005dfc:	20000f57 	.word	0x20000f57
 8005e00:	0801b508 	.word	0x0801b508
 8005e04:	20006700 	.word	0x20006700
 8005e08:	0801b4d0 	.word	0x0801b4d0

08005e0c <pauseSnipCommand>:
{	
 8005e0c:	b510      	push	{r4, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	0004      	movs	r4, r0
 8005e12:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005e14:	2300      	movs	r3, #0
 8005e16:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8005e18:	2c00      	cmp	r4, #0
 8005e1a:	d014      	beq.n	8005e46 <pauseSnipCommand+0x3a>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005e1c:	aa01      	add	r2, sp, #4
 8005e1e:	2101      	movs	r1, #1
 8005e20:	f008 ff94 	bl	800ed4c <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8005e24:	f00e f935 	bl	8014092 <atoi>
 8005e28:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <pauseSnipCommand+0x2a>
 8005e2e:	4a10      	ldr	r2, [pc, #64]	; (8005e70 <pauseSnipCommand+0x64>)
 8005e30:	7812      	ldrb	r2, [r2, #0]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d209      	bcs.n	8005e4a <pauseSnipCommand+0x3e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8005e36:	2223      	movs	r2, #35	; 0x23
 8005e38:	490e      	ldr	r1, [pc, #56]	; (8005e74 <pauseSnipCommand+0x68>)
 8005e3a:	0020      	movs	r0, r4
 8005e3c:	f00e fb90 	bl	8014560 <memcpy>
}
 8005e40:	2000      	movs	r0, #0
 8005e42:	b002      	add	sp, #8
 8005e44:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 8005e46:	b672      	cpsid	i
 8005e48:	e7fe      	b.n	8005e48 <pauseSnipCommand+0x3c>
		snippets[index-1].state = false;
 8005e4a:	23ff      	movs	r3, #255	; 0xff
 8005e4c:	4003      	ands	r3, r0
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	009a      	lsls	r2, r3, #2
 8005e52:	18d3      	adds	r3, r2, r3
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4a08      	ldr	r2, [pc, #32]	; (8005e78 <pauseSnipCommand+0x6c>)
 8005e58:	18d3      	adds	r3, r2, r3
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	741a      	strb	r2, [r3, #16]
		SaveToRO();
 8005e5e:	f006 f8a1 	bl	800bfa4 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8005e62:	2235      	movs	r2, #53	; 0x35
 8005e64:	4905      	ldr	r1, [pc, #20]	; (8005e7c <pauseSnipCommand+0x70>)
 8005e66:	0020      	movs	r0, r4
 8005e68:	f00e fb7a 	bl	8014560 <memcpy>
 8005e6c:	e7e8      	b.n	8005e40 <pauseSnipCommand+0x34>
 8005e6e:	46c0      	nop			; (mov r8, r8)
 8005e70:	20000f57 	.word	0x20000f57
 8005e74:	0801b508 	.word	0x0801b508
 8005e78:	20006700 	.word	0x20006700
 8005e7c:	0801b52c 	.word	0x0801b52c

08005e80 <actSnipCommand>:
{	
 8005e80:	b510      	push	{r4, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	0004      	movs	r4, r0
 8005e86:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8005e8c:	2c00      	cmp	r4, #0
 8005e8e:	d014      	beq.n	8005eba <actSnipCommand+0x3a>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8005e90:	aa01      	add	r2, sp, #4
 8005e92:	2101      	movs	r1, #1
 8005e94:	f008 ff5a 	bl	800ed4c <FreeRTOS_CLIGetParameter>
	uint8_t index = ( uint8_t ) atoi( ( char * ) pcParameterString1 );
 8005e98:	f00e f8fb 	bl	8014092 <atoi>
 8005e9c:	b2c3      	uxtb	r3, r0
	if (!index || index > numOfRecordedSnippets)	result = BOS_ERROR;
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <actSnipCommand+0x2a>
 8005ea2:	4a10      	ldr	r2, [pc, #64]	; (8005ee4 <actSnipCommand+0x64>)
 8005ea4:	7812      	ldrb	r2, [r2, #0]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d209      	bcs.n	8005ebe <actSnipCommand+0x3e>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrong );
 8005eaa:	2223      	movs	r2, #35	; 0x23
 8005eac:	490e      	ldr	r1, [pc, #56]	; (8005ee8 <actSnipCommand+0x68>)
 8005eae:	0020      	movs	r0, r4
 8005eb0:	f00e fb56 	bl	8014560 <memcpy>
}
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	b002      	add	sp, #8
 8005eb8:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 8005eba:	b672      	cpsid	i
 8005ebc:	e7fe      	b.n	8005ebc <actSnipCommand+0x3c>
		snippets[index-1].state = true;
 8005ebe:	23ff      	movs	r3, #255	; 0xff
 8005ec0:	4003      	ands	r3, r0
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	009a      	lsls	r2, r3, #2
 8005ec6:	18d3      	adds	r3, r2, r3
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4a08      	ldr	r2, [pc, #32]	; (8005eec <actSnipCommand+0x6c>)
 8005ecc:	18d3      	adds	r3, r2, r3
 8005ece:	2201      	movs	r2, #1
 8005ed0:	741a      	strb	r2, [r3, #16]
		SaveToRO();
 8005ed2:	f006 f867 	bl	800bfa4 <SaveToRO>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK );
 8005ed6:	2238      	movs	r2, #56	; 0x38
 8005ed8:	4905      	ldr	r1, [pc, #20]	; (8005ef0 <actSnipCommand+0x70>)
 8005eda:	0020      	movs	r0, r4
 8005edc:	f00e fb40 	bl	8014560 <memcpy>
 8005ee0:	e7e8      	b.n	8005eb4 <actSnipCommand+0x34>
 8005ee2:	46c0      	nop			; (mov r8, r8)
 8005ee4:	20000f57 	.word	0x20000f57
 8005ee8:	0801b508 	.word	0x0801b508
 8005eec:	20006700 	.word	0x20006700
 8005ef0:	0801b564 	.word	0x0801b564

08005ef4 <snipCommand>:
{	
 8005ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ef6:	46de      	mov	lr, fp
 8005ef8:	4657      	mov	r7, sl
 8005efa:	464e      	mov	r6, r9
 8005efc:	4645      	mov	r5, r8
 8005efe:	b5e0      	push	{r5, r6, r7, lr}
 8005f00:	b08b      	sub	sp, #44	; 0x2c
 8005f02:	0004      	movs	r4, r0
	char status[2][7] = {"Paused", "Active"};
 8005f04:	aa06      	add	r2, sp, #24
 8005f06:	4b80      	ldr	r3, [pc, #512]	; (8006108 <snipCommand+0x214>)
 8005f08:	cb23      	ldmia	r3!, {r0, r1, r5}
 8005f0a:	c223      	stmia	r2!, {r0, r1, r5}
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	8013      	strh	r3, [r2, #0]
	configASSERT( pcWriteBuffer );
 8005f10:	2c00      	cmp	r4, #0
 8005f12:	d013      	beq.n	8005f3c <snipCommand+0x48>
	writePxMutex(PcPort, (char*) pcMessageSnipWelcome, strlen((char*) pcMessageSnipWelcome), cmd50ms, HAL_MAX_DELAY);
 8005f14:	4b7d      	ldr	r3, [pc, #500]	; (800610c <snipCommand+0x218>)
 8005f16:	7818      	ldrb	r0, [r3, #0]
 8005f18:	2301      	movs	r3, #1
 8005f1a:	425b      	negs	r3, r3
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	3333      	adds	r3, #51	; 0x33
 8005f20:	2237      	movs	r2, #55	; 0x37
 8005f22:	497b      	ldr	r1, [pc, #492]	; (8006110 <snipCommand+0x21c>)
 8005f24:	f008 f8c0 	bl	800e0a8 <writePxMutex>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 8005f28:	4b7a      	ldr	r3, [pc, #488]	; (8006114 <snipCommand+0x220>)
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d100      	bne.n	8005f32 <snipCommand+0x3e>
 8005f30:	e0dd      	b.n	80060ee <snipCommand+0x1fa>
 8005f32:	2700      	movs	r7, #0
		if (snippets[s].cond.conditionType)
 8005f34:	4b78      	ldr	r3, [pc, #480]	; (8006118 <snipCommand+0x224>)
 8005f36:	4698      	mov	r8, r3
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmds, pcWriteBuffer, commands );
 8005f38:	4d78      	ldr	r5, [pc, #480]	; (800611c <snipCommand+0x228>)
 8005f3a:	e0c3      	b.n	80060c4 <snipCommand+0x1d0>
	configASSERT( pcWriteBuffer );
 8005f3c:	b672      	cpsid	i
 8005f3e:	e7fe      	b.n	8005f3e <snipCommand+0x4a>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipStart, count, status[snippets[s].state]);
 8005f40:	4b75      	ldr	r3, [pc, #468]	; (8006118 <snipCommand+0x224>)
 8005f42:	469b      	mov	fp, r3
 8005f44:	00b3      	lsls	r3, r6, #2
 8005f46:	4699      	mov	r9, r3
 8005f48:	199b      	adds	r3, r3, r6
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	445b      	add	r3, fp
 8005f4e:	7c1a      	ldrb	r2, [r3, #16]
 8005f50:	00d3      	lsls	r3, r2, #3
 8005f52:	1a9b      	subs	r3, r3, r2
 8005f54:	aa06      	add	r2, sp, #24
 8005f56:	4694      	mov	ip, r2
 8005f58:	4463      	add	r3, ip
 8005f5a:	003a      	movs	r2, r7
 8005f5c:	4970      	ldr	r1, [pc, #448]	; (8006120 <snipCommand+0x22c>)
 8005f5e:	0020      	movs	r0, r4
 8005f60:	f00e fd30 	bl	80149c4 <sprintf>
		switch (snippets[s].cond.conditionType)
 8005f64:	464b      	mov	r3, r9
 8005f66:	199b      	adds	r3, r3, r6
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	465a      	mov	r2, fp
 8005f6c:	5c9b      	ldrb	r3, [r3, r2]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d11c      	bne.n	8005fac <snipCommand+0xb8>
				switch (snippets[s].cond.buffer1[1])
 8005f72:	00b3      	lsls	r3, r6, #2
 8005f74:	199b      	adds	r3, r3, r6
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	4a67      	ldr	r2, [pc, #412]	; (8006118 <snipCommand+0x224>)
 8005f7a:	18d3      	adds	r3, r2, r3
 8005f7c:	78db      	ldrb	r3, [r3, #3]
 8005f7e:	2b0b      	cmp	r3, #11
 8005f80:	d842      	bhi.n	8006008 <snipCommand+0x114>
 8005f82:	2b08      	cmp	r3, #8
 8005f84:	d861      	bhi.n	800604a <snipCommand+0x156>
 8005f86:	2b05      	cmp	r3, #5
 8005f88:	d051      	beq.n	800602e <snipCommand+0x13a>
 8005f8a:	2b06      	cmp	r3, #6
 8005f8c:	d000      	beq.n	8005f90 <snipCommand+0x9c>
 8005f8e:	e0a5      	b.n	80060dc <snipCommand+0x1e8>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventDblClicked, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cmd);				
 8005f90:	00b3      	lsls	r3, r6, #2
 8005f92:	199e      	adds	r6, r3, r6
 8005f94:	00b6      	lsls	r6, r6, #2
 8005f96:	4b60      	ldr	r3, [pc, #384]	; (8006118 <snipCommand+0x224>)
 8005f98:	199e      	adds	r6, r3, r6
 8005f9a:	78b3      	ldrb	r3, [r6, #2]
 8005f9c:	68f2      	ldr	r2, [r6, #12]
 8005f9e:	9200      	str	r2, [sp, #0]
 8005fa0:	0022      	movs	r2, r4
 8005fa2:	4960      	ldr	r1, [pc, #384]	; (8006124 <snipCommand+0x230>)
 8005fa4:	0020      	movs	r0, r4
 8005fa6:	f00e fd0d 	bl	80149c4 <sprintf>
        		break;
 8005faa:	e097      	b.n	80060dc <snipCommand+0x1e8>
		switch (snippets[s].cond.conditionType)
 8005fac:	2b03      	cmp	r3, #3
 8005fae:	d000      	beq.n	8005fb2 <snipCommand+0xbe>
 8005fb0:	e094      	b.n	80060dc <snipCommand+0x1e8>
				memcpy( (uint8_t *)&flt1, &snippets[s].cond.buffer2, sizeof(float));	// This buffer can be misaligned and cause hardfault on F0
 8005fb2:	00b1      	lsls	r1, r6, #2
 8005fb4:	1989      	adds	r1, r1, r6
 8005fb6:	0089      	lsls	r1, r1, #2
 8005fb8:	3106      	adds	r1, #6
 8005fba:	4b57      	ldr	r3, [pc, #348]	; (8006118 <snipCommand+0x224>)
 8005fbc:	4699      	mov	r9, r3
 8005fbe:	4449      	add	r1, r9
 8005fc0:	2204      	movs	r2, #4
 8005fc2:	a805      	add	r0, sp, #20
 8005fc4:	f00e facc 	bl	8014560 <memcpy>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipModuleParamConst, ( char * ) pcWriteBuffer, modParam[snippets[s].cond.buffer1[1]-1].paramName, mathStr[snippets[s].cond.mathOperator-1], flt1);				      		
 8005fc8:	00b3      	lsls	r3, r6, #2
 8005fca:	199e      	adds	r6, r3, r6
 8005fcc:	00b6      	lsls	r6, r6, #2
 8005fce:	444e      	add	r6, r9
 8005fd0:	78f2      	ldrb	r2, [r6, #3]
 8005fd2:	3a01      	subs	r2, #1
 8005fd4:	0053      	lsls	r3, r2, #1
 8005fd6:	189b      	adds	r3, r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4a53      	ldr	r2, [pc, #332]	; (8006128 <snipCommand+0x234>)
 8005fdc:	18d3      	adds	r3, r2, r3
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	4699      	mov	r9, r3
 8005fe2:	9805      	ldr	r0, [sp, #20]
 8005fe4:	f7fc ff66 	bl	8002eb4 <__aeabi_f2d>
 8005fe8:	9002      	str	r0, [sp, #8]
 8005fea:	9103      	str	r1, [sp, #12]
 8005fec:	7873      	ldrb	r3, [r6, #1]
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	005a      	lsls	r2, r3, #1
 8005ff2:	18d2      	adds	r2, r2, r3
 8005ff4:	4b4d      	ldr	r3, [pc, #308]	; (800612c <snipCommand+0x238>)
 8005ff6:	189b      	adds	r3, r3, r2
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	464b      	mov	r3, r9
 8005ffc:	0022      	movs	r2, r4
 8005ffe:	494c      	ldr	r1, [pc, #304]	; (8006130 <snipCommand+0x23c>)
 8006000:	0020      	movs	r0, r4
 8006002:	f00e fcdf 	bl	80149c4 <sprintf>
				break;
 8006006:	e069      	b.n	80060dc <snipCommand+0x1e8>
 8006008:	3b0c      	subs	r3, #12
 800600a:	2b02      	cmp	r3, #2
 800600c:	d866      	bhi.n	80060dc <snipCommand+0x1e8>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventReleased, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cond.buffer1[2], snippets[s].cmd);				
 800600e:	00b2      	lsls	r2, r6, #2
 8006010:	1996      	adds	r6, r2, r6
 8006012:	00b6      	lsls	r6, r6, #2
 8006014:	4a40      	ldr	r2, [pc, #256]	; (8006118 <snipCommand+0x224>)
 8006016:	1992      	adds	r2, r2, r6
 8006018:	7893      	ldrb	r3, [r2, #2]
 800601a:	68d1      	ldr	r1, [r2, #12]
 800601c:	9101      	str	r1, [sp, #4]
 800601e:	7912      	ldrb	r2, [r2, #4]
 8006020:	9200      	str	r2, [sp, #0]
 8006022:	0022      	movs	r2, r4
 8006024:	4943      	ldr	r1, [pc, #268]	; (8006134 <snipCommand+0x240>)
 8006026:	0020      	movs	r0, r4
 8006028:	f00e fccc 	bl	80149c4 <sprintf>
        		break;						
 800602c:	e056      	b.n	80060dc <snipCommand+0x1e8>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventClicked, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cmd);				
 800602e:	00b3      	lsls	r3, r6, #2
 8006030:	199e      	adds	r6, r3, r6
 8006032:	00b6      	lsls	r6, r6, #2
 8006034:	4b38      	ldr	r3, [pc, #224]	; (8006118 <snipCommand+0x224>)
 8006036:	199e      	adds	r6, r3, r6
 8006038:	78b3      	ldrb	r3, [r6, #2]
 800603a:	68f2      	ldr	r2, [r6, #12]
 800603c:	9200      	str	r2, [sp, #0]
 800603e:	0022      	movs	r2, r4
 8006040:	493d      	ldr	r1, [pc, #244]	; (8006138 <snipCommand+0x244>)
 8006042:	0020      	movs	r0, r4
 8006044:	f00e fcbe 	bl	80149c4 <sprintf>
        		break;
 8006048:	e048      	b.n	80060dc <snipCommand+0x1e8>
						sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipButtonEventPressed, ( char * ) pcWriteBuffer, snippets[s].cond.buffer1[0], snippets[s].cond.buffer1[2], snippets[s].cmd);				
 800604a:	00b2      	lsls	r2, r6, #2
 800604c:	1996      	adds	r6, r2, r6
 800604e:	00b6      	lsls	r6, r6, #2
 8006050:	4a31      	ldr	r2, [pc, #196]	; (8006118 <snipCommand+0x224>)
 8006052:	1992      	adds	r2, r2, r6
 8006054:	7893      	ldrb	r3, [r2, #2]
 8006056:	68d1      	ldr	r1, [r2, #12]
 8006058:	9101      	str	r1, [sp, #4]
 800605a:	7912      	ldrb	r2, [r2, #4]
 800605c:	9200      	str	r2, [sp, #0]
 800605e:	0022      	movs	r2, r4
 8006060:	4936      	ldr	r1, [pc, #216]	; (800613c <snipCommand+0x248>)
 8006062:	0020      	movs	r0, r4
 8006064:	f00e fcae 	bl	80149c4 <sprintf>
        		break;
 8006068:	e038      	b.n	80060dc <snipCommand+0x1e8>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmds, pcWriteBuffer, commands );
 800606a:	002b      	movs	r3, r5
 800606c:	0022      	movs	r2, r4
 800606e:	4934      	ldr	r1, [pc, #208]	; (8006140 <snipCommand+0x24c>)
 8006070:	0020      	movs	r0, r4
 8006072:	f00e fca7 	bl	80149c4 <sprintf>
			memset( &commands, 0x00, strlen((char*) commands) );
 8006076:	0028      	movs	r0, r5
 8006078:	f7fa f84e 	bl	8000118 <strlen>
 800607c:	0002      	movs	r2, r0
 800607e:	2100      	movs	r1, #0
 8006080:	0028      	movs	r0, r5
 8006082:	f00e fa76 	bl	8014572 <memset>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &commands) != false)
 8006086:	4649      	mov	r1, r9
 8006088:	68f0      	ldr	r0, [r6, #12]
 800608a:	f7ff fb39 	bl	8005700 <ParseSnippetCommand>
 800608e:	2800      	cmp	r0, #0
 8006090:	d1eb      	bne.n	800606a <snipCommand+0x176>
		strcat( ( char * ) pcWriteBuffer, ( char * ) pcMessageEnd);
 8006092:	0020      	movs	r0, r4
 8006094:	f7fa f840 	bl	8000118 <strlen>
 8006098:	1820      	adds	r0, r4, r0
 800609a:	220c      	movs	r2, #12
 800609c:	4929      	ldr	r1, [pc, #164]	; (8006144 <snipCommand+0x250>)
 800609e:	f00e fa5f 	bl	8014560 <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 80060a2:	0020      	movs	r0, r4
 80060a4:	f7fa f838 	bl	8000118 <strlen>
 80060a8:	b282      	uxth	r2, r0
 80060aa:	4b18      	ldr	r3, [pc, #96]	; (800610c <snipCommand+0x218>)
 80060ac:	7818      	ldrb	r0, [r3, #0]
 80060ae:	2301      	movs	r3, #1
 80060b0:	425b      	negs	r3, r3
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	3333      	adds	r3, #51	; 0x33
 80060b6:	0021      	movs	r1, r4
 80060b8:	f007 fff6 	bl	800e0a8 <writePxMutex>
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++)
 80060bc:	4b15      	ldr	r3, [pc, #84]	; (8006114 <snipCommand+0x220>)
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	42bb      	cmp	r3, r7
 80060c2:	d914      	bls.n	80060ee <snipCommand+0x1fa>
 80060c4:	003e      	movs	r6, r7
 80060c6:	3701      	adds	r7, #1
 80060c8:	b2ff      	uxtb	r7, r7
		if (snippets[s].cond.conditionType)
 80060ca:	46b2      	mov	sl, r6
 80060cc:	00b3      	lsls	r3, r6, #2
 80060ce:	199b      	adds	r3, r3, r6
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	4642      	mov	r2, r8
 80060d4:	5c9b      	ldrb	r3, [r3, r2]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d000      	beq.n	80060dc <snipCommand+0x1e8>
 80060da:	e731      	b.n	8005f40 <snipCommand+0x4c>
		while (ParseSnippetCommand(snippets[s].cmd, (int8_t *) &commands) != false)
 80060dc:	4b0f      	ldr	r3, [pc, #60]	; (800611c <snipCommand+0x228>)
 80060de:	4699      	mov	r9, r3
 80060e0:	4653      	mov	r3, sl
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4453      	add	r3, sl
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4e0b      	ldr	r6, [pc, #44]	; (8006118 <snipCommand+0x224>)
 80060ea:	18f6      	adds	r6, r6, r3
 80060ec:	e7cb      	b.n	8006086 <snipCommand+0x192>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageSnipAction );
 80060ee:	22a7      	movs	r2, #167	; 0xa7
 80060f0:	4915      	ldr	r1, [pc, #84]	; (8006148 <snipCommand+0x254>)
 80060f2:	0020      	movs	r0, r4
 80060f4:	f00e fa34 	bl	8014560 <memcpy>
}
 80060f8:	2000      	movs	r0, #0
 80060fa:	b00b      	add	sp, #44	; 0x2c
 80060fc:	bcf0      	pop	{r4, r5, r6, r7}
 80060fe:	46bb      	mov	fp, r7
 8006100:	46b2      	mov	sl, r6
 8006102:	46a9      	mov	r9, r5
 8006104:	46a0      	mov	r8, r4
 8006106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006108:	0801a7b8 	.word	0x0801a7b8
 800610c:	20000b67 	.word	0x20000b67
 8006110:	0801b59c 	.word	0x0801b59c
 8006114:	20000f57 	.word	0x20000f57
 8006118:	20006700 	.word	0x20006700
 800611c:	20000f88 	.word	0x20000f88
 8006120:	0801b5d4 	.word	0x0801b5d4
 8006124:	0801b5f4 	.word	0x0801b5f4
 8006128:	200000dc 	.word	0x200000dc
 800612c:	0801cd8c 	.word	0x0801cd8c
 8006130:	0801b640 	.word	0x0801b640
 8006134:	0801b624 	.word	0x0801b624
 8006138:	0801b5e0 	.word	0x0801b5e0
 800613c:	0801b60c 	.word	0x0801b60c
 8006140:	0801b650 	.word	0x0801b650
 8006144:	0801b658 	.word	0x0801b658
 8006148:	0801b664 	.word	0x0801b664

0800614c <idcodeCommand>:
{	
 800614c:	b510      	push	{r4, lr}
 800614e:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8006150:	d00c      	beq.n	800616c <idcodeCommand+0x20>
	dev = HAL_GetDEVID();
 8006152:	f00a fd5b 	bl	8010c0c <HAL_GetDEVID>
	switch (dev)
 8006156:	0403      	lsls	r3, r0, #16
 8006158:	0c1b      	lsrs	r3, r3, #16
 800615a:	4a1c      	ldr	r2, [pc, #112]	; (80061cc <idcodeCommand+0x80>)
 800615c:	4694      	mov	ip, r2
 800615e:	4463      	add	r3, ip
 8006160:	2b08      	cmp	r3, #8
 8006162:	d82c      	bhi.n	80061be <idcodeCommand+0x72>
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	4a1a      	ldr	r2, [pc, #104]	; (80061d0 <idcodeCommand+0x84>)
 8006168:	58d3      	ldr	r3, [r2, r3]
 800616a:	469f      	mov	pc, r3
	configASSERT( pcWriteBuffer );
 800616c:	b672      	cpsid	i
 800616e:	e7fe      	b.n	800616e <idcodeCommand+0x22>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F03x" );
 8006170:	4a18      	ldr	r2, [pc, #96]	; (80061d4 <idcodeCommand+0x88>)
 8006172:	4919      	ldr	r1, [pc, #100]	; (80061d8 <idcodeCommand+0x8c>)
 8006174:	0020      	movs	r0, r4
 8006176:	f00e fc25 	bl	80149c4 <sprintf>
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageREVID, ( char * ) pcWriteBuffer, HAL_GetREVID()>>12 );
 800617a:	f00a fd41 	bl	8010c00 <HAL_GetREVID>
 800617e:	0b03      	lsrs	r3, r0, #12
 8006180:	0022      	movs	r2, r4
 8006182:	4916      	ldr	r1, [pc, #88]	; (80061dc <idcodeCommand+0x90>)
 8006184:	0020      	movs	r0, r4
 8006186:	f00e fc1d 	bl	80149c4 <sprintf>
}
 800618a:	2000      	movs	r0, #0
 800618c:	bd10      	pop	{r4, pc}
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F04x" );
 800618e:	4a14      	ldr	r2, [pc, #80]	; (80061e0 <idcodeCommand+0x94>)
 8006190:	4911      	ldr	r1, [pc, #68]	; (80061d8 <idcodeCommand+0x8c>)
 8006192:	0020      	movs	r0, r4
 8006194:	f00e fc16 	bl	80149c4 <sprintf>
  		break;
 8006198:	e7ef      	b.n	800617a <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F05x" );
 800619a:	4a12      	ldr	r2, [pc, #72]	; (80061e4 <idcodeCommand+0x98>)
 800619c:	490e      	ldr	r1, [pc, #56]	; (80061d8 <idcodeCommand+0x8c>)
 800619e:	0020      	movs	r0, r4
 80061a0:	f00e fc10 	bl	80149c4 <sprintf>
  		break;
 80061a4:	e7e9      	b.n	800617a <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F07x" );
 80061a6:	4a10      	ldr	r2, [pc, #64]	; (80061e8 <idcodeCommand+0x9c>)
 80061a8:	490b      	ldr	r1, [pc, #44]	; (80061d8 <idcodeCommand+0x8c>)
 80061aa:	0020      	movs	r0, r4
 80061ac:	f00e fc0a 	bl	80149c4 <sprintf>
  		break;
 80061b0:	e7e3      	b.n	800617a <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "STM32F09x" );
 80061b2:	4a0e      	ldr	r2, [pc, #56]	; (80061ec <idcodeCommand+0xa0>)
 80061b4:	4908      	ldr	r1, [pc, #32]	; (80061d8 <idcodeCommand+0x8c>)
 80061b6:	0020      	movs	r0, r4
 80061b8:	f00e fc04 	bl	80149c4 <sprintf>
  		break;
 80061bc:	e7dd      	b.n	800617a <idcodeCommand+0x2e>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDEVID, "UNKNOWN" );
 80061be:	4a0c      	ldr	r2, [pc, #48]	; (80061f0 <idcodeCommand+0xa4>)
 80061c0:	4905      	ldr	r1, [pc, #20]	; (80061d8 <idcodeCommand+0x8c>)
 80061c2:	0020      	movs	r0, r4
 80061c4:	f00e fbfe 	bl	80149c4 <sprintf>
  		break;
 80061c8:	e7d7      	b.n	800617a <idcodeCommand+0x2e>
 80061ca:	46c0      	nop			; (mov r8, r8)
 80061cc:	fffffbc0 	.word	0xfffffbc0
 80061d0:	0801b77c 	.word	0x0801b77c
 80061d4:	0801b70c 	.word	0x0801b70c
 80061d8:	0801b718 	.word	0x0801b718
 80061dc:	0801b764 	.word	0x0801b764
 80061e0:	0801b72c 	.word	0x0801b72c
 80061e4:	0801b738 	.word	0x0801b738
 80061e8:	0801b744 	.word	0x0801b744
 80061ec:	0801b750 	.word	0x0801b750
 80061f0:	0801b75c 	.word	0x0801b75c

080061f4 <uuidCommand>:
{
 80061f4:	b570      	push	{r4, r5, r6, lr}
 80061f6:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80061f8:	d023      	beq.n	8006242 <uuidCommand+0x4e>
	sprintf( ( char * ) pcWriteBuffer, "%s", ( char * ) pcMessageUUID );
 80061fa:	220e      	movs	r2, #14
 80061fc:	4912      	ldr	r1, [pc, #72]	; (8006248 <uuidCommand+0x54>)
 80061fe:	f00e f9af 	bl	8014560 <memcpy>
		sprintf( ( char * ) pcWriteBuffer, "%s%08X", ( char * ) pcWriteBuffer, *(uint32_t *) (MCU_F0_UUID_BASE+i*4) );
 8006202:	4b12      	ldr	r3, [pc, #72]	; (800624c <uuidCommand+0x58>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4d12      	ldr	r5, [pc, #72]	; (8006250 <uuidCommand+0x5c>)
 8006208:	0022      	movs	r2, r4
 800620a:	0029      	movs	r1, r5
 800620c:	0020      	movs	r0, r4
 800620e:	f00e fbd9 	bl	80149c4 <sprintf>
 8006212:	4b10      	ldr	r3, [pc, #64]	; (8006254 <uuidCommand+0x60>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	0022      	movs	r2, r4
 8006218:	0029      	movs	r1, r5
 800621a:	0020      	movs	r0, r4
 800621c:	f00e fbd2 	bl	80149c4 <sprintf>
 8006220:	4b0d      	ldr	r3, [pc, #52]	; (8006258 <uuidCommand+0x64>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	0022      	movs	r2, r4
 8006226:	0029      	movs	r1, r5
 8006228:	0020      	movs	r0, r4
 800622a:	f00e fbcb 	bl	80149c4 <sprintf>
	strcat(( char * ) pcWriteBuffer, "\r\n");
 800622e:	0020      	movs	r0, r4
 8006230:	f7f9 ff72 	bl	8000118 <strlen>
 8006234:	1820      	adds	r0, r4, r0
 8006236:	2203      	movs	r2, #3
 8006238:	4908      	ldr	r1, [pc, #32]	; (800625c <uuidCommand+0x68>)
 800623a:	f00e f991 	bl	8014560 <memcpy>
}
 800623e:	2000      	movs	r0, #0
 8006240:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 8006242:	b672      	cpsid	i
 8006244:	e7fe      	b.n	8006244 <uuidCommand+0x50>
 8006246:	46c0      	nop			; (mov r8, r8)
 8006248:	0801b7a0 	.word	0x0801b7a0
 800624c:	1ffff7ac 	.word	0x1ffff7ac
 8006250:	0801b7b0 	.word	0x0801b7b0
 8006254:	1ffff7b0 	.word	0x1ffff7b0
 8006258:	1ffff7b4 	.word	0x1ffff7b4
 800625c:	0801c42c 	.word	0x0801c42c

08006260 <timeCommand>:
{
 8006260:	b510      	push	{r4, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8006266:	d00a      	beq.n	800627e <timeCommand+0x1e>
	GetTimeDate();
 8006268:	f007 fc64 	bl	800db34 <GetTimeDate>
	if (BOS.hourformat == 24)
 800626c:	4b1c      	ldr	r3, [pc, #112]	; (80062e0 <timeCommand+0x80>)
 800626e:	7b5b      	ldrb	r3, [r3, #13]
 8006270:	2b18      	cmp	r3, #24
 8006272:	d006      	beq.n	8006282 <timeCommand+0x22>
	else if (BOS.hourformat == 12)
 8006274:	2b0c      	cmp	r3, #12
 8006276:	d010      	beq.n	800629a <timeCommand+0x3a>
}
 8006278:	2000      	movs	r0, #0
 800627a:	b004      	add	sp, #16
 800627c:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 800627e:	b672      	cpsid	i
 8006280:	e7fe      	b.n	8006280 <timeCommand+0x20>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage24, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec );
 8006282:	4917      	ldr	r1, [pc, #92]	; (80062e0 <timeCommand+0x80>)
 8006284:	7c4b      	ldrb	r3, [r1, #17]
 8006286:	7c8a      	ldrb	r2, [r1, #18]
 8006288:	89c8      	ldrh	r0, [r1, #14]
 800628a:	9001      	str	r0, [sp, #4]
 800628c:	7c09      	ldrb	r1, [r1, #16]
 800628e:	9100      	str	r1, [sp, #0]
 8006290:	4914      	ldr	r1, [pc, #80]	; (80062e4 <timeCommand+0x84>)
 8006292:	0020      	movs	r0, r4
 8006294:	f00e fb96 	bl	80149c4 <sprintf>
 8006298:	e7ee      	b.n	8006278 <timeCommand+0x18>
		if (BOS.time.ampm == RTC_AM)
 800629a:	4b11      	ldr	r3, [pc, #68]	; (80062e0 <timeCommand+0x80>)
 800629c:	7cdb      	ldrb	r3, [r3, #19]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d00f      	beq.n	80062c2 <timeCommand+0x62>
		else if (BOS.time.ampm == RTC_PM)
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d1e8      	bne.n	8006278 <timeCommand+0x18>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage12, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "PM" );
 80062a6:	490e      	ldr	r1, [pc, #56]	; (80062e0 <timeCommand+0x80>)
 80062a8:	7c4b      	ldrb	r3, [r1, #17]
 80062aa:	7c8a      	ldrb	r2, [r1, #18]
 80062ac:	480e      	ldr	r0, [pc, #56]	; (80062e8 <timeCommand+0x88>)
 80062ae:	9002      	str	r0, [sp, #8]
 80062b0:	89c8      	ldrh	r0, [r1, #14]
 80062b2:	9001      	str	r0, [sp, #4]
 80062b4:	7c09      	ldrb	r1, [r1, #16]
 80062b6:	9100      	str	r1, [sp, #0]
 80062b8:	490c      	ldr	r1, [pc, #48]	; (80062ec <timeCommand+0x8c>)
 80062ba:	0020      	movs	r0, r4
 80062bc:	f00e fb82 	bl	80149c4 <sprintf>
 80062c0:	e7da      	b.n	8006278 <timeCommand+0x18>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage12, BOS.time.hours, BOS.time.minutes, BOS.time.seconds, BOS.time.msec, "AM" );
 80062c2:	4907      	ldr	r1, [pc, #28]	; (80062e0 <timeCommand+0x80>)
 80062c4:	7c4b      	ldrb	r3, [r1, #17]
 80062c6:	7c8a      	ldrb	r2, [r1, #18]
 80062c8:	4809      	ldr	r0, [pc, #36]	; (80062f0 <timeCommand+0x90>)
 80062ca:	9002      	str	r0, [sp, #8]
 80062cc:	89c8      	ldrh	r0, [r1, #14]
 80062ce:	9001      	str	r0, [sp, #4]
 80062d0:	7c09      	ldrb	r1, [r1, #16]
 80062d2:	9100      	str	r1, [sp, #0]
 80062d4:	4905      	ldr	r1, [pc, #20]	; (80062ec <timeCommand+0x8c>)
 80062d6:	0020      	movs	r0, r4
 80062d8:	f00e fb74 	bl	80149c4 <sprintf>
 80062dc:	e7cc      	b.n	8006278 <timeCommand+0x18>
 80062de:	46c0      	nop			; (mov r8, r8)
 80062e0:	200066e4 	.word	0x200066e4
 80062e4:	0801b7b8 	.word	0x0801b7b8
 80062e8:	0801b810 	.word	0x0801b810
 80062ec:	0801b7e0 	.word	0x0801b7e0
 80062f0:	0801b80c 	.word	0x0801b80c

080062f4 <dateCommand>:
{
 80062f4:	b510      	push	{r4, lr}
 80062f6:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80062f8:	d00a      	beq.n	8006310 <dateCommand+0x1c>
	GetTimeDate();
 80062fa:	f007 fc1b 	bl	800db34 <GetTimeDate>
	sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageDate, GetDateString() );
 80062fe:	f7fe fbc7 	bl	8004a90 <GetDateString>
 8006302:	0002      	movs	r2, r0
 8006304:	4903      	ldr	r1, [pc, #12]	; (8006314 <dateCommand+0x20>)
 8006306:	0020      	movs	r0, r4
 8006308:	f00e fb5c 	bl	80149c4 <sprintf>
}
 800630c:	2000      	movs	r0, #0
 800630e:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 8006310:	b672      	cpsid	i
 8006312:	e7fe      	b.n	8006312 <dateCommand+0x1e>
 8006314:	0801b814 	.word	0x0801b814

08006318 <getCommand>:
{
 8006318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800631a:	46c6      	mov	lr, r8
 800631c:	b500      	push	{lr}
 800631e:	b082      	sub	sp, #8
 8006320:	0004      	movs	r4, r0
 8006322:	0015      	movs	r5, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0;
 8006324:	2300      	movs	r3, #0
 8006326:	9301      	str	r3, [sp, #4]
 8006328:	9300      	str	r3, [sp, #0]
	configASSERT( pcWriteBuffer );
 800632a:	2800      	cmp	r0, #0
 800632c:	d026      	beq.n	800637c <getCommand+0x64>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800632e:	aa01      	add	r2, sp, #4
 8006330:	2101      	movs	r1, #1
 8006332:	0028      	movs	r0, r5
 8006334:	f008 fd0a 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 8006338:	0006      	movs	r6, r0
 800633a:	4b74      	ldr	r3, [pc, #464]	; (800650c <getCommand+0x1f4>)
 800633c:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "bos.", 4)) 
 800633e:	2204      	movs	r2, #4
 8006340:	4973      	ldr	r1, [pc, #460]	; (8006510 <getCommand+0x1f8>)
 8006342:	f00e fb82 	bl	8014a4a <strncmp>
 8006346:	2800      	cmp	r0, #0
 8006348:	d000      	beq.n	800634c <getCommand+0x34>
 800634a:	e092      	b.n	8006472 <getCommand+0x15a>
		if (!strncmp((const char *)pcParameterString1+4, "response", xParameterStringLength1-4)) 
 800634c:	1d37      	adds	r7, r6, #4
 800634e:	9b01      	ldr	r3, [sp, #4]
 8006350:	1f1d      	subs	r5, r3, #4
 8006352:	002a      	movs	r2, r5
 8006354:	496f      	ldr	r1, [pc, #444]	; (8006514 <getCommand+0x1fc>)
 8006356:	0038      	movs	r0, r7
 8006358:	f00e fb77 	bl	8014a4a <strncmp>
 800635c:	2800      	cmp	r0, #0
 800635e:	d121      	bne.n	80063a4 <getCommand+0x8c>
			if (BOS.response == BOS_RESPONSE_ALL)
 8006360:	4b6d      	ldr	r3, [pc, #436]	; (8006518 <getCommand+0x200>)
 8006362:	799b      	ldrb	r3, [r3, #6]
 8006364:	2b60      	cmp	r3, #96	; 0x60
 8006366:	d00b      	beq.n	8006380 <getCommand+0x68>
			else if (BOS.response == BOS_RESPONSE_MSG)
 8006368:	2b20      	cmp	r3, #32
 800636a:	d00f      	beq.n	800638c <getCommand+0x74>
			else if (BOS.response == BOS_RESPONSE_NONE)
 800636c:	2b00      	cmp	r3, #0
 800636e:	d013      	beq.n	8006398 <getCommand+0x80>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue, pcParameterString1);
 8006370:	0032      	movs	r2, r6
 8006372:	496a      	ldr	r1, [pc, #424]	; (800651c <getCommand+0x204>)
 8006374:	0020      	movs	r0, r4
 8006376:	f00e fb25 	bl	80149c4 <sprintf>
 800637a:	e086      	b.n	800648a <getCommand+0x172>
	configASSERT( pcWriteBuffer );
 800637c:	b672      	cpsid	i
 800637e:	e7fe      	b.n	800637e <getCommand+0x66>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "all");
 8006380:	4a67      	ldr	r2, [pc, #412]	; (8006520 <getCommand+0x208>)
 8006382:	4968      	ldr	r1, [pc, #416]	; (8006524 <getCommand+0x20c>)
 8006384:	0020      	movs	r0, r4
 8006386:	f00e fb1d 	bl	80149c4 <sprintf>
	if (result == BOS_ERR_WrongParam)
 800638a:	e07e      	b.n	800648a <getCommand+0x172>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "msg");
 800638c:	4a66      	ldr	r2, [pc, #408]	; (8006528 <getCommand+0x210>)
 800638e:	4965      	ldr	r1, [pc, #404]	; (8006524 <getCommand+0x20c>)
 8006390:	0020      	movs	r0, r4
 8006392:	f00e fb17 	bl	80149c4 <sprintf>
	if (result == BOS_ERR_WrongParam)
 8006396:	e078      	b.n	800648a <getCommand+0x172>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "none");
 8006398:	4a64      	ldr	r2, [pc, #400]	; (800652c <getCommand+0x214>)
 800639a:	4962      	ldr	r1, [pc, #392]	; (8006524 <getCommand+0x20c>)
 800639c:	0020      	movs	r0, r4
 800639e:	f00e fb11 	bl	80149c4 <sprintf>
	if (result == BOS_ERR_WrongParam)
 80063a2:	e072      	b.n	800648a <getCommand+0x172>
		else if (!strncmp((const char *)pcParameterString1+4, "trace", xParameterStringLength1-4)) 
 80063a4:	002a      	movs	r2, r5
 80063a6:	4962      	ldr	r1, [pc, #392]	; (8006530 <getCommand+0x218>)
 80063a8:	0038      	movs	r0, r7
 80063aa:	f00e fb4e 	bl	8014a4a <strncmp>
 80063ae:	2800      	cmp	r0, #0
 80063b0:	d119      	bne.n	80063e6 <getCommand+0xce>
			if (BOS.trace == TRACE_BOTH)
 80063b2:	4b59      	ldr	r3, [pc, #356]	; (8006518 <getCommand+0x200>)
 80063b4:	79db      	ldrb	r3, [r3, #7]
 80063b6:	2b03      	cmp	r3, #3
 80063b8:	d009      	beq.n	80063ce <getCommand+0xb6>
			else if (BOS.trace == TRACE_MESSAGE)
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d00d      	beq.n	80063da <getCommand+0xc2>
			else if (BOS.trace == TRACE_NONE)
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1d6      	bne.n	8006370 <getCommand+0x58>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "none");
 80063c2:	4a5a      	ldr	r2, [pc, #360]	; (800652c <getCommand+0x214>)
 80063c4:	4957      	ldr	r1, [pc, #348]	; (8006524 <getCommand+0x20c>)
 80063c6:	0020      	movs	r0, r4
 80063c8:	f00e fafc 	bl	80149c4 <sprintf>
	if (result == BOS_ERR_WrongParam)
 80063cc:	e05d      	b.n	800648a <getCommand+0x172>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "all");
 80063ce:	4a54      	ldr	r2, [pc, #336]	; (8006520 <getCommand+0x208>)
 80063d0:	4954      	ldr	r1, [pc, #336]	; (8006524 <getCommand+0x20c>)
 80063d2:	0020      	movs	r0, r4
 80063d4:	f00e faf6 	bl	80149c4 <sprintf>
	if (result == BOS_ERR_WrongParam)
 80063d8:	e057      	b.n	800648a <getCommand+0x172>
				sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, "msg");
 80063da:	4a53      	ldr	r2, [pc, #332]	; (8006528 <getCommand+0x210>)
 80063dc:	4951      	ldr	r1, [pc, #324]	; (8006524 <getCommand+0x20c>)
 80063de:	0020      	movs	r0, r4
 80063e0:	f00e faf0 	bl	80149c4 <sprintf>
	if (result == BOS_ERR_WrongParam)
 80063e4:	e051      	b.n	800648a <getCommand+0x172>
		else if (!strncmp((const char *)pcParameterString1+4, "clibaudrate", xParameterStringLength1-4)) 
 80063e6:	002a      	movs	r2, r5
 80063e8:	4952      	ldr	r1, [pc, #328]	; (8006534 <getCommand+0x21c>)
 80063ea:	0038      	movs	r0, r7
 80063ec:	f00e fb2d 	bl	8014a4a <strncmp>
 80063f0:	2800      	cmp	r0, #0
 80063f2:	d022      	beq.n	800643a <getCommand+0x122>
		else if (!strncmp((const char *)pcParameterString1+4, "debounce", xParameterStringLength1-4)) 
 80063f4:	002a      	movs	r2, r5
 80063f6:	4950      	ldr	r1, [pc, #320]	; (8006538 <getCommand+0x220>)
 80063f8:	0038      	movs	r0, r7
 80063fa:	f00e fb26 	bl	8014a4a <strncmp>
 80063fe:	2800      	cmp	r0, #0
 8006400:	d022      	beq.n	8006448 <getCommand+0x130>
		else if (!strncmp((const char *)pcParameterString1+4, "singleclicktime", xParameterStringLength1-4)) 
 8006402:	002a      	movs	r2, r5
 8006404:	494d      	ldr	r1, [pc, #308]	; (800653c <getCommand+0x224>)
 8006406:	0038      	movs	r0, r7
 8006408:	f00e fb1f 	bl	8014a4a <strncmp>
 800640c:	2800      	cmp	r0, #0
 800640e:	d022      	beq.n	8006456 <getCommand+0x13e>
		else if (!strncmp((const char *)pcParameterString1+4, "mininterclicktime", xParameterStringLength1-4)) 
 8006410:	002a      	movs	r2, r5
 8006412:	494b      	ldr	r1, [pc, #300]	; (8006540 <getCommand+0x228>)
 8006414:	0038      	movs	r0, r7
 8006416:	f00e fb18 	bl	8014a4a <strncmp>
 800641a:	2800      	cmp	r0, #0
 800641c:	d022      	beq.n	8006464 <getCommand+0x14c>
		else if (!strncmp((const char *)pcParameterString1+4, "maxinterclicktime", xParameterStringLength1-4)) 
 800641e:	002a      	movs	r2, r5
 8006420:	4948      	ldr	r1, [pc, #288]	; (8006544 <getCommand+0x22c>)
 8006422:	0038      	movs	r0, r7
 8006424:	f00e fb11 	bl	8014a4a <strncmp>
 8006428:	2800      	cmp	r0, #0
 800642a:	d129      	bne.n	8006480 <getCommand+0x168>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.maxInterClickTime);
 800642c:	4b3a      	ldr	r3, [pc, #232]	; (8006518 <getCommand+0x200>)
 800642e:	795a      	ldrb	r2, [r3, #5]
 8006430:	4945      	ldr	r1, [pc, #276]	; (8006548 <getCommand+0x230>)
 8006432:	0020      	movs	r0, r4
 8006434:	f00e fac6 	bl	80149c4 <sprintf>
	if (result == BOS_ERR_WrongParam)
 8006438:	e027      	b.n	800648a <getCommand+0x172>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.clibaudrate);
 800643a:	4b37      	ldr	r3, [pc, #220]	; (8006518 <getCommand+0x200>)
 800643c:	689a      	ldr	r2, [r3, #8]
 800643e:	4942      	ldr	r1, [pc, #264]	; (8006548 <getCommand+0x230>)
 8006440:	0020      	movs	r0, r4
 8006442:	f00e fabf 	bl	80149c4 <sprintf>
	if (result == BOS_ERR_WrongParam)
 8006446:	e020      	b.n	800648a <getCommand+0x172>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.debounce);
 8006448:	4b33      	ldr	r3, [pc, #204]	; (8006518 <getCommand+0x200>)
 800644a:	881a      	ldrh	r2, [r3, #0]
 800644c:	493e      	ldr	r1, [pc, #248]	; (8006548 <getCommand+0x230>)
 800644e:	0020      	movs	r0, r4
 8006450:	f00e fab8 	bl	80149c4 <sprintf>
	if (result == BOS_ERR_WrongParam)
 8006454:	e019      	b.n	800648a <getCommand+0x172>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.singleClickTime);
 8006456:	4b30      	ldr	r3, [pc, #192]	; (8006518 <getCommand+0x200>)
 8006458:	885a      	ldrh	r2, [r3, #2]
 800645a:	493b      	ldr	r1, [pc, #236]	; (8006548 <getCommand+0x230>)
 800645c:	0020      	movs	r0, r4
 800645e:	f00e fab1 	bl	80149c4 <sprintf>
	if (result == BOS_ERR_WrongParam)
 8006462:	e012      	b.n	800648a <getCommand+0x172>
			sprintf( ( char * ) pcWriteBuffer, "%d\n\r", BOS.buttons.minInterClickTime);
 8006464:	4b2c      	ldr	r3, [pc, #176]	; (8006518 <getCommand+0x200>)
 8006466:	791a      	ldrb	r2, [r3, #4]
 8006468:	4937      	ldr	r1, [pc, #220]	; (8006548 <getCommand+0x230>)
 800646a:	0020      	movs	r0, r4
 800646c:	f00e faaa 	bl	80149c4 <sprintf>
	if (result == BOS_ERR_WrongParam)
 8006470:	e00b      	b.n	800648a <getCommand+0x172>
	else if (!strncmp((const char *)pcParameterString1, "group", 5))
 8006472:	2205      	movs	r2, #5
 8006474:	4935      	ldr	r1, [pc, #212]	; (800654c <getCommand+0x234>)
 8006476:	0030      	movs	r0, r6
 8006478:	f00e fae7 	bl	8014a4a <strncmp>
 800647c:	2800      	cmp	r0, #0
 800647e:	d009      	beq.n	8006494 <getCommand+0x17c>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 8006480:	2213      	movs	r2, #19
 8006482:	4933      	ldr	r1, [pc, #204]	; (8006550 <getCommand+0x238>)
 8006484:	0020      	movs	r0, r4
 8006486:	f00e f86b 	bl	8014560 <memcpy>
}
 800648a:	2000      	movs	r0, #0
 800648c:	b002      	add	sp, #8
 800648e:	bc80      	pop	{r7}
 8006490:	46b8      	mov	r8, r7
 8006492:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006494:	466a      	mov	r2, sp
 8006496:	2102      	movs	r1, #2
 8006498:	0028      	movs	r0, r5
 800649a:	f008 fc57 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 800649e:	0006      	movs	r6, r0
		for(i=0 ; i<MaxNumOfGroups ; i++)
 80064a0:	4f2c      	ldr	r7, [pc, #176]	; (8006554 <getCommand+0x23c>)
 80064a2:	2500      	movs	r5, #0
			if (!strcmp( ( char * ) pcParameterString2, groupAlias[i]))	
 80064a4:	0039      	movs	r1, r7
 80064a6:	0030      	movs	r0, r6
 80064a8:	f7f9 fe2c 	bl	8000104 <strcmp>
 80064ac:	2800      	cmp	r0, #0
 80064ae:	d01c      	beq.n	80064ea <getCommand+0x1d2>
		for(i=0 ; i<MaxNumOfGroups ; i++)
 80064b0:	3501      	adds	r5, #1
 80064b2:	b2ed      	uxtb	r5, r5
 80064b4:	370a      	adds	r7, #10
 80064b6:	2d0a      	cmp	r5, #10
 80064b8:	d1f4      	bne.n	80064a4 <getCommand+0x18c>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageGroupDoesNotExist, ( char * ) pcParameterString2 );
 80064ba:	0032      	movs	r2, r6
 80064bc:	4926      	ldr	r1, [pc, #152]	; (8006558 <getCommand+0x240>)
 80064be:	0020      	movs	r0, r4
 80064c0:	f00e fa80 	bl	80149c4 <sprintf>
			return pdFALSE;
 80064c4:	e7e1      	b.n	800648a <getCommand+0x172>
			for(j=1 ; j<=N ; j++)						// N modules
 80064c6:	3501      	adds	r5, #1
 80064c8:	b2ed      	uxtb	r5, r5
 80064ca:	783b      	ldrb	r3, [r7, #0]
 80064cc:	42ab      	cmp	r3, r5
 80064ce:	d3dc      	bcc.n	800648a <getCommand+0x172>
				if (InGroup(j, i))
 80064d0:	1e6b      	subs	r3, r5, #1
 80064d2:	005b      	lsls	r3, r3, #1
 80064d4:	4642      	mov	r2, r8
 80064d6:	5a9b      	ldrh	r3, [r3, r2]
 80064d8:	421e      	tst	r6, r3
 80064da:	d0f4      	beq.n	80064c6 <getCommand+0x1ae>
					sprintf( ( char * ) pcWriteBuffer, "%s#%d\n\r", ( char * ) pcWriteBuffer, j );
 80064dc:	002b      	movs	r3, r5
 80064de:	0022      	movs	r2, r4
 80064e0:	491e      	ldr	r1, [pc, #120]	; (800655c <getCommand+0x244>)
 80064e2:	0020      	movs	r0, r4
 80064e4:	f00e fa6e 	bl	80149c4 <sprintf>
 80064e8:	e7ed      	b.n	80064c6 <getCommand+0x1ae>
			sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageGroupExists, ( char * ) pcParameterString2 );
 80064ea:	0032      	movs	r2, r6
 80064ec:	491c      	ldr	r1, [pc, #112]	; (8006560 <getCommand+0x248>)
 80064ee:	0020      	movs	r0, r4
 80064f0:	f00e fa68 	bl	80149c4 <sprintf>
			for(j=1 ; j<=N ; j++)						// N modules
 80064f4:	4b1b      	ldr	r3, [pc, #108]	; (8006564 <getCommand+0x24c>)
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d0c6      	beq.n	800648a <getCommand+0x172>
 80064fc:	2601      	movs	r6, #1
 80064fe:	40ae      	lsls	r6, r5
 8006500:	2501      	movs	r5, #1
				if (InGroup(j, i))
 8006502:	4b19      	ldr	r3, [pc, #100]	; (8006568 <getCommand+0x250>)
 8006504:	4698      	mov	r8, r3
			for(j=1 ; j<=N ; j++)						// N modules
 8006506:	4f17      	ldr	r7, [pc, #92]	; (8006564 <getCommand+0x24c>)
 8006508:	e7e2      	b.n	80064d0 <getCommand+0x1b8>
 800650a:	46c0      	nop			; (mov r8, r8)
 800650c:	20000fcc 	.word	0x20000fcc
 8006510:	0801b82c 	.word	0x0801b82c
 8006514:	0801b834 	.word	0x0801b834
 8006518:	200066e4 	.word	0x200066e4
 800651c:	0801b8c8 	.word	0x0801b8c8
 8006520:	0801ab78 	.word	0x0801ab78
 8006524:	0801aa40 	.word	0x0801aa40
 8006528:	0801b840 	.word	0x0801b840
 800652c:	0801b844 	.word	0x0801b844
 8006530:	0801b84c 	.word	0x0801b84c
 8006534:	0801b854 	.word	0x0801b854
 8006538:	0801b860 	.word	0x0801b860
 800653c:	0801b86c 	.word	0x0801b86c
 8006540:	0801b87c 	.word	0x0801b87c
 8006544:	0801b890 	.word	0x0801b890
 8006548:	0801b008 	.word	0x0801b008
 800654c:	0801b8a4 	.word	0x0801b8a4
 8006550:	0801b8b4 	.word	0x0801b8b4
 8006554:	20000cf8 	.word	0x20000cf8
 8006558:	0801b8e8 	.word	0x0801b8e8
 800655c:	0801b8ac 	.word	0x0801b8ac
 8006560:	0801b904 	.word	0x0801b904
 8006564:	2000001c 	.word	0x2000001c
 8006568:	20000d5c 	.word	0x20000d5c

0800656c <defaultCommand>:
{
 800656c:	b570      	push	{r4, r5, r6, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	0004      	movs	r4, r0
 8006572:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0;
 8006574:	2300      	movs	r3, #0
 8006576:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8006578:	2c00      	cmp	r4, #0
 800657a:	d01a      	beq.n	80065b2 <defaultCommand+0x46>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800657c:	aa01      	add	r2, sp, #4
 800657e:	2101      	movs	r1, #1
 8006580:	f008 fbe4 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 8006584:	0005      	movs	r5, r0
	if (!strncmp((const char *)pcParameterString1, "params", xParameterStringLength1)) 
 8006586:	9e01      	ldr	r6, [sp, #4]
 8006588:	0032      	movs	r2, r6
 800658a:	491e      	ldr	r1, [pc, #120]	; (8006604 <defaultCommand+0x98>)
 800658c:	f00e fa5d 	bl	8014a4a <strncmp>
 8006590:	2800      	cmp	r0, #0
 8006592:	d010      	beq.n	80065b6 <defaultCommand+0x4a>
	else if (!strncmp((const char *)pcParameterString1, "array", xParameterStringLength1)) 
 8006594:	0032      	movs	r2, r6
 8006596:	491c      	ldr	r1, [pc, #112]	; (8006608 <defaultCommand+0x9c>)
 8006598:	0028      	movs	r0, r5
 800659a:	f00e fa56 	bl	8014a4a <strncmp>
 800659e:	2800      	cmp	r0, #0
 80065a0:	d01a      	beq.n	80065d8 <defaultCommand+0x6c>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );
 80065a2:	220f      	movs	r2, #15
 80065a4:	4919      	ldr	r1, [pc, #100]	; (800660c <defaultCommand+0xa0>)
 80065a6:	0020      	movs	r0, r4
 80065a8:	f00d ffda 	bl	8014560 <memcpy>
}
 80065ac:	2000      	movs	r0, #0
 80065ae:	b002      	add	sp, #8
 80065b0:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 80065b2:	b672      	cpsid	i
 80065b4:	e7fe      	b.n	80065b4 <defaultCommand+0x48>
		memcpy(&BOS, &BOS_default, sizeof(BOS_default));
 80065b6:	4916      	ldr	r1, [pc, #88]	; (8006610 <defaultCommand+0xa4>)
 80065b8:	4b16      	ldr	r3, [pc, #88]	; (8006614 <defaultCommand+0xa8>)
 80065ba:	000a      	movs	r2, r1
 80065bc:	cb23      	ldmia	r3!, {r0, r1, r5}
 80065be:	c223      	stmia	r2!, {r0, r1, r5}
 80065c0:	cb23      	ldmia	r3!, {r0, r1, r5}
 80065c2:	c223      	stmia	r2!, {r0, r1, r5}
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6013      	str	r3, [r2, #0]
		SaveEEparams();
 80065c8:	f7fd f9e4 	bl	8003994 <SaveEEparams>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOKParams );
 80065cc:	2227      	movs	r2, #39	; 0x27
 80065ce:	4912      	ldr	r1, [pc, #72]	; (8006618 <defaultCommand+0xac>)
 80065d0:	0020      	movs	r0, r4
 80065d2:	f00d ffc5 	bl	8014560 <memcpy>
	if (result == BOS_ERR_WrongValue)
 80065d6:	e7e9      	b.n	80065ac <defaultCommand+0x40>
		SendMessageToModule(BOS_BROADCAST, CODE_DEF_ARRAY, 0);
 80065d8:	2200      	movs	r2, #0
 80065da:	2116      	movs	r1, #22
 80065dc:	20ff      	movs	r0, #255	; 0xff
 80065de:	f002 ffa1 	bl	8009524 <SendMessageToModule>
		indMode = IND_TOPOLOGY; osDelay(100);
 80065e2:	4b0e      	ldr	r3, [pc, #56]	; (800661c <defaultCommand+0xb0>)
 80065e4:	2202      	movs	r2, #2
 80065e6:	701a      	strb	r2, [r3, #0]
 80065e8:	2064      	movs	r0, #100	; 0x64
 80065ea:	f008 fa88 	bl	800eafe <osDelay>
		ClearEEportsDir();
 80065ee:	f7fc ff19 	bl	8003424 <ClearEEportsDir>
		osDelay(100);
 80065f2:	2064      	movs	r0, #100	; 0x64
 80065f4:	f008 fa83 	bl	800eafe <osDelay>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageOKArray );
 80065f8:	2240      	movs	r2, #64	; 0x40
 80065fa:	4909      	ldr	r1, [pc, #36]	; (8006620 <defaultCommand+0xb4>)
 80065fc:	0020      	movs	r0, r4
 80065fe:	f00d ffaf 	bl	8014560 <memcpy>
	if (result == BOS_ERR_WrongValue)
 8006602:	e7d3      	b.n	80065ac <defaultCommand+0x40>
 8006604:	0801b918 	.word	0x0801b918
 8006608:	0801b948 	.word	0x0801b948
 800660c:	0801b950 	.word	0x0801b950
 8006610:	200066e4 	.word	0x200066e4
 8006614:	20000000 	.word	0x20000000
 8006618:	0801b920 	.word	0x0801b920
 800661c:	20000d60 	.word	0x20000d60
 8006620:	0801b960 	.word	0x0801b960

08006624 <setCommand>:
{
 8006624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006626:	46d6      	mov	lr, sl
 8006628:	464f      	mov	r7, r9
 800662a:	4646      	mov	r6, r8
 800662c:	b5c0      	push	{r6, r7, lr}
 800662e:	b08e      	sub	sp, #56	; 0x38
 8006630:	4682      	mov	sl, r0
 8006632:	0014      	movs	r4, r2
 8006634:	2700      	movs	r7, #0
 8006636:	2600      	movs	r6, #0
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0;
 8006638:	970d      	str	r7, [sp, #52]	; 0x34
 800663a:	970c      	str	r7, [sp, #48]	; 0x30
 800663c:	970b      	str	r7, [sp, #44]	; 0x2c
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0;
 800663e:	970a      	str	r7, [sp, #40]	; 0x28
 8006640:	9709      	str	r7, [sp, #36]	; 0x24
	configASSERT( pcWriteBuffer );
 8006642:	2800      	cmp	r0, #0
 8006644:	d023      	beq.n	800668e <setCommand+0x6a>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006646:	aa0d      	add	r2, sp, #52	; 0x34
 8006648:	2101      	movs	r1, #1
 800664a:	0020      	movs	r0, r4
 800664c:	f008 fb7e 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 8006650:	0005      	movs	r5, r0
 8006652:	4bd6      	ldr	r3, [pc, #856]	; (80069ac <setCommand+0x388>)
 8006654:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "bos.", 4)) 
 8006656:	2204      	movs	r2, #4
 8006658:	49d5      	ldr	r1, [pc, #852]	; (80069b0 <setCommand+0x38c>)
 800665a:	f00e f9f6 	bl	8014a4a <strncmp>
 800665e:	2800      	cmp	r0, #0
 8006660:	d017      	beq.n	8006692 <setCommand+0x6e>
	else if (!strncmp((const char *)pcParameterString1, "time", 4))
 8006662:	2204      	movs	r2, #4
 8006664:	49d3      	ldr	r1, [pc, #844]	; (80069b4 <setCommand+0x390>)
 8006666:	0028      	movs	r0, r5
 8006668:	f00e f9ef 	bl	8014a4a <strncmp>
 800666c:	2800      	cmp	r0, #0
 800666e:	d100      	bne.n	8006672 <setCommand+0x4e>
 8006670:	e15b      	b.n	800692a <setCommand+0x306>
	else if (!strncmp((const char *)pcParameterString1, "date", 4))
 8006672:	2204      	movs	r2, #4
 8006674:	49d0      	ldr	r1, [pc, #832]	; (80069b8 <setCommand+0x394>)
 8006676:	0028      	movs	r0, r5
 8006678:	f00e f9e7 	bl	8014a4a <strncmp>
 800667c:	2800      	cmp	r0, #0
 800667e:	d100      	bne.n	8006682 <setCommand+0x5e>
 8006680:	e1f8      	b.n	8006a74 <setCommand+0x450>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongParam );
 8006682:	2213      	movs	r2, #19
 8006684:	49cd      	ldr	r1, [pc, #820]	; (80069bc <setCommand+0x398>)
 8006686:	4650      	mov	r0, sl
 8006688:	f00d ff6a 	bl	8014560 <memcpy>
 800668c:	e33c      	b.n	8006d08 <setCommand+0x6e4>
	configASSERT( pcWriteBuffer );
 800668e:	b672      	cpsid	i
 8006690:	e7fe      	b.n	8006690 <setCommand+0x6c>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006692:	aa0c      	add	r2, sp, #48	; 0x30
 8006694:	2102      	movs	r1, #2
 8006696:	0020      	movs	r0, r4
 8006698:	f008 fb58 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 800669c:	0004      	movs	r4, r0
 800669e:	4bc8      	ldr	r3, [pc, #800]	; (80069c0 <setCommand+0x39c>)
 80066a0:	6018      	str	r0, [r3, #0]
		if (!strncmp((const char *)pcParameterString1+4, "response", xParameterStringLength1-4)) 
 80066a2:	4bc2      	ldr	r3, [pc, #776]	; (80069ac <setCommand+0x388>)
 80066a4:	681d      	ldr	r5, [r3, #0]
 80066a6:	3504      	adds	r5, #4
 80066a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066aa:	1f1e      	subs	r6, r3, #4
 80066ac:	0032      	movs	r2, r6
 80066ae:	49c5      	ldr	r1, [pc, #788]	; (80069c4 <setCommand+0x3a0>)
 80066b0:	0028      	movs	r0, r5
 80066b2:	f00e f9ca 	bl	8014a4a <strncmp>
 80066b6:	2800      	cmp	r0, #0
 80066b8:	d150      	bne.n	800675c <setCommand+0x138>
			if (!strncmp((const char *)pcParameterString2, "all", xParameterStringLength2)) {
 80066ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066bc:	002a      	movs	r2, r5
 80066be:	49c2      	ldr	r1, [pc, #776]	; (80069c8 <setCommand+0x3a4>)
 80066c0:	0020      	movs	r0, r4
 80066c2:	f00e f9c2 	bl	8014a4a <strncmp>
 80066c6:	2800      	cmp	r0, #0
 80066c8:	d01a      	beq.n	8006700 <setCommand+0xdc>
			} else if (!strncmp((const char *)pcParameterString2, "message", xParameterStringLength2)) {
 80066ca:	002a      	movs	r2, r5
 80066cc:	49bf      	ldr	r1, [pc, #764]	; (80069cc <setCommand+0x3a8>)
 80066ce:	0020      	movs	r0, r4
 80066d0:	f00e f9bb 	bl	8014a4a <strncmp>
 80066d4:	2800      	cmp	r0, #0
 80066d6:	d01f      	beq.n	8006718 <setCommand+0xf4>
		  } else if (!strncmp((const char *)pcParameterString2, "cli", xParameterStringLength2)) {
 80066d8:	002a      	movs	r2, r5
 80066da:	49bd      	ldr	r1, [pc, #756]	; (80069d0 <setCommand+0x3ac>)
 80066dc:	0020      	movs	r0, r4
 80066de:	f00e f9b4 	bl	8014a4a <strncmp>
 80066e2:	2800      	cmp	r0, #0
 80066e4:	d024      	beq.n	8006730 <setCommand+0x10c>
		  } else if (!strncmp((const char *)pcParameterString2, "none", xParameterStringLength2)) {
 80066e6:	002a      	movs	r2, r5
 80066e8:	49ba      	ldr	r1, [pc, #744]	; (80069d4 <setCommand+0x3b0>)
 80066ea:	0020      	movs	r0, r4
 80066ec:	f00e f9ad 	bl	8014a4a <strncmp>
 80066f0:	2800      	cmp	r0, #0
 80066f2:	d029      	beq.n	8006748 <setCommand+0x124>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );
 80066f4:	220f      	movs	r2, #15
 80066f6:	49b8      	ldr	r1, [pc, #736]	; (80069d8 <setCommand+0x3b4>)
 80066f8:	4650      	mov	r0, sl
 80066fa:	f00d ff31 	bl	8014560 <memcpy>
 80066fe:	e303      	b.n	8006d08 <setCommand+0x6e4>
				BOS.response = BOS_RESPONSE_ALL;
 8006700:	4bb6      	ldr	r3, [pc, #728]	; (80069dc <setCommand+0x3b8>)
 8006702:	2260      	movs	r2, #96	; 0x60
 8006704:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8006706:	79d9      	ldrb	r1, [r3, #7]
 8006708:	0209      	lsls	r1, r1, #8
 800670a:	2360      	movs	r3, #96	; 0x60
 800670c:	4319      	orrs	r1, r3
 800670e:	308a      	adds	r0, #138	; 0x8a
 8006710:	0040      	lsls	r0, r0, #1
 8006712:	f001 f9db 	bl	8007acc <EE_WriteVariable>
	if (result == BOS_OK) 
 8006716:	e1a1      	b.n	8006a5c <setCommand+0x438>
				BOS.response = BOS_RESPONSE_MSG;
 8006718:	4bb0      	ldr	r3, [pc, #704]	; (80069dc <setCommand+0x3b8>)
 800671a:	2220      	movs	r2, #32
 800671c:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 800671e:	79d9      	ldrb	r1, [r3, #7]
 8006720:	0209      	lsls	r1, r1, #8
 8006722:	2320      	movs	r3, #32
 8006724:	4319      	orrs	r1, r3
 8006726:	308a      	adds	r0, #138	; 0x8a
 8006728:	0040      	lsls	r0, r0, #1
 800672a:	f001 f9cf 	bl	8007acc <EE_WriteVariable>
	if (result == BOS_OK) 
 800672e:	e195      	b.n	8006a5c <setCommand+0x438>
				BOS.response = BOS_RESPONSE_CLI;
 8006730:	4baa      	ldr	r3, [pc, #680]	; (80069dc <setCommand+0x3b8>)
 8006732:	2240      	movs	r2, #64	; 0x40
 8006734:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 8006736:	79d9      	ldrb	r1, [r3, #7]
 8006738:	0209      	lsls	r1, r1, #8
 800673a:	2340      	movs	r3, #64	; 0x40
 800673c:	4319      	orrs	r1, r3
 800673e:	308a      	adds	r0, #138	; 0x8a
 8006740:	0040      	lsls	r0, r0, #1
 8006742:	f001 f9c3 	bl	8007acc <EE_WriteVariable>
	if (result == BOS_OK) 
 8006746:	e189      	b.n	8006a5c <setCommand+0x438>
				BOS.response = BOS_RESPONSE_NONE;
 8006748:	4ba4      	ldr	r3, [pc, #656]	; (80069dc <setCommand+0x3b8>)
 800674a:	2200      	movs	r2, #0
 800674c:	719a      	strb	r2, [r3, #6]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 800674e:	79d9      	ldrb	r1, [r3, #7]
 8006750:	0209      	lsls	r1, r1, #8
 8006752:	308a      	adds	r0, #138	; 0x8a
 8006754:	0040      	lsls	r0, r0, #1
 8006756:	f001 f9b9 	bl	8007acc <EE_WriteVariable>
	if (result == BOS_OK) 
 800675a:	e17f      	b.n	8006a5c <setCommand+0x438>
		else if (!strncmp((const char *)pcParameterString1+4, "trace", xParameterStringLength1-4)) 
 800675c:	0032      	movs	r2, r6
 800675e:	49a0      	ldr	r1, [pc, #640]	; (80069e0 <setCommand+0x3bc>)
 8006760:	0028      	movs	r0, r5
 8006762:	f00e f972 	bl	8014a4a <strncmp>
 8006766:	2800      	cmp	r0, #0
 8006768:	d149      	bne.n	80067fe <setCommand+0x1da>
			if (!strncmp((const char *)pcParameterString2, "all", xParameterStringLength2)) {
 800676a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800676c:	002a      	movs	r2, r5
 800676e:	4996      	ldr	r1, [pc, #600]	; (80069c8 <setCommand+0x3a4>)
 8006770:	0020      	movs	r0, r4
 8006772:	f00e f96a 	bl	8014a4a <strncmp>
 8006776:	2800      	cmp	r0, #0
 8006778:	d01d      	beq.n	80067b6 <setCommand+0x192>
			} else if (!strncmp((const char *)pcParameterString2, "message", xParameterStringLength2)) {
 800677a:	002a      	movs	r2, r5
 800677c:	4993      	ldr	r1, [pc, #588]	; (80069cc <setCommand+0x3a8>)
 800677e:	0020      	movs	r0, r4
 8006780:	f00e f963 	bl	8014a4a <strncmp>
 8006784:	2800      	cmp	r0, #0
 8006786:	d022      	beq.n	80067ce <setCommand+0x1aa>
			} else if (!strncmp((const char *)pcParameterString2, "response", xParameterStringLength2)) {
 8006788:	002a      	movs	r2, r5
 800678a:	498e      	ldr	r1, [pc, #568]	; (80069c4 <setCommand+0x3a0>)
 800678c:	0020      	movs	r0, r4
 800678e:	f00e f95c 	bl	8014a4a <strncmp>
 8006792:	2800      	cmp	r0, #0
 8006794:	d027      	beq.n	80067e6 <setCommand+0x1c2>
		  } else if (!strncmp((const char *)pcParameterString2, "none", xParameterStringLength2)) {
 8006796:	002a      	movs	r2, r5
 8006798:	498e      	ldr	r1, [pc, #568]	; (80069d4 <setCommand+0x3b0>)
 800679a:	0020      	movs	r0, r4
 800679c:	f00e f955 	bl	8014a4a <strncmp>
 80067a0:	2800      	cmp	r0, #0
 80067a2:	d1a7      	bne.n	80066f4 <setCommand+0xd0>
				BOS.trace = TRACE_NONE;
 80067a4:	4b8d      	ldr	r3, [pc, #564]	; (80069dc <setCommand+0x3b8>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 80067aa:	7999      	ldrb	r1, [r3, #6]
 80067ac:	308a      	adds	r0, #138	; 0x8a
 80067ae:	0040      	lsls	r0, r0, #1
 80067b0:	f001 f98c 	bl	8007acc <EE_WriteVariable>
	if (result == BOS_OK) 
 80067b4:	e152      	b.n	8006a5c <setCommand+0x438>
				BOS.trace = TRACE_BOTH;
 80067b6:	4b89      	ldr	r3, [pc, #548]	; (80069dc <setCommand+0x3b8>)
 80067b8:	2203      	movs	r2, #3
 80067ba:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 80067bc:	799b      	ldrb	r3, [r3, #6]
 80067be:	21c0      	movs	r1, #192	; 0xc0
 80067c0:	0089      	lsls	r1, r1, #2
 80067c2:	4319      	orrs	r1, r3
 80067c4:	308a      	adds	r0, #138	; 0x8a
 80067c6:	0040      	lsls	r0, r0, #1
 80067c8:	f001 f980 	bl	8007acc <EE_WriteVariable>
	if (result == BOS_OK) 
 80067cc:	e146      	b.n	8006a5c <setCommand+0x438>
				BOS.trace = TRACE_MESSAGE;
 80067ce:	4b83      	ldr	r3, [pc, #524]	; (80069dc <setCommand+0x3b8>)
 80067d0:	2201      	movs	r2, #1
 80067d2:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 80067d4:	799b      	ldrb	r3, [r3, #6]
 80067d6:	2180      	movs	r1, #128	; 0x80
 80067d8:	0049      	lsls	r1, r1, #1
 80067da:	4319      	orrs	r1, r3
 80067dc:	308a      	adds	r0, #138	; 0x8a
 80067de:	0040      	lsls	r0, r0, #1
 80067e0:	f001 f974 	bl	8007acc <EE_WriteVariable>
	if (result == BOS_OK) 
 80067e4:	e13a      	b.n	8006a5c <setCommand+0x438>
				BOS.trace = TRACE_RESPONSE;
 80067e6:	4b7d      	ldr	r3, [pc, #500]	; (80069dc <setCommand+0x3b8>)
 80067e8:	2202      	movs	r2, #2
 80067ea:	71da      	strb	r2, [r3, #7]
				EE_WriteVariable(_EE_PARAMS_BASE, ((uint16_t)BOS.trace<<8) | (uint16_t)BOS.response);
 80067ec:	799b      	ldrb	r3, [r3, #6]
 80067ee:	2180      	movs	r1, #128	; 0x80
 80067f0:	0089      	lsls	r1, r1, #2
 80067f2:	4319      	orrs	r1, r3
 80067f4:	308a      	adds	r0, #138	; 0x8a
 80067f6:	0040      	lsls	r0, r0, #1
 80067f8:	f001 f968 	bl	8007acc <EE_WriteVariable>
	if (result == BOS_OK) 
 80067fc:	e12e      	b.n	8006a5c <setCommand+0x438>
		else if (!strncmp((const char *)pcParameterString1+4, "clibaudrate", xParameterStringLength1-4)) 
 80067fe:	0032      	movs	r2, r6
 8006800:	4978      	ldr	r1, [pc, #480]	; (80069e4 <setCommand+0x3c0>)
 8006802:	0028      	movs	r0, r5
 8006804:	f00e f921 	bl	8014a4a <strncmp>
 8006808:	2800      	cmp	r0, #0
 800680a:	d02f      	beq.n	800686c <setCommand+0x248>
		else if (!strncmp((const char *)pcParameterString1+4, "debounce", xParameterStringLength1-4)) 
 800680c:	0032      	movs	r2, r6
 800680e:	4976      	ldr	r1, [pc, #472]	; (80069e8 <setCommand+0x3c4>)
 8006810:	0028      	movs	r0, r5
 8006812:	f00e f91a 	bl	8014a4a <strncmp>
 8006816:	2800      	cmp	r0, #0
 8006818:	d058      	beq.n	80068cc <setCommand+0x2a8>
		else if (!strncmp((const char *)pcParameterString1+4, "singleclicktime", xParameterStringLength1-4)) 
 800681a:	0032      	movs	r2, r6
 800681c:	4973      	ldr	r1, [pc, #460]	; (80069ec <setCommand+0x3c8>)
 800681e:	0028      	movs	r0, r5
 8006820:	f00e f913 	bl	8014a4a <strncmp>
 8006824:	2800      	cmp	r0, #0
 8006826:	d05f      	beq.n	80068e8 <setCommand+0x2c4>
		else if (!strncmp((const char *)pcParameterString1+4, "mininterclicktime", xParameterStringLength1-4)) 
 8006828:	0032      	movs	r2, r6
 800682a:	4971      	ldr	r1, [pc, #452]	; (80069f0 <setCommand+0x3cc>)
 800682c:	0028      	movs	r0, r5
 800682e:	f00e f90c 	bl	8014a4a <strncmp>
 8006832:	2800      	cmp	r0, #0
 8006834:	d066      	beq.n	8006904 <setCommand+0x2e0>
		else if (!strncmp((const char *)pcParameterString1+4, "maxinterclicktime", xParameterStringLength1-4)) 
 8006836:	0032      	movs	r2, r6
 8006838:	496e      	ldr	r1, [pc, #440]	; (80069f4 <setCommand+0x3d0>)
 800683a:	0028      	movs	r0, r5
 800683c:	f00e f905 	bl	8014a4a <strncmp>
 8006840:	2800      	cmp	r0, #0
 8006842:	d000      	beq.n	8006846 <setCommand+0x222>
 8006844:	e71d      	b.n	8006682 <setCommand+0x5e>
			temp16 = atoi((const char *)pcParameterString2);
 8006846:	0020      	movs	r0, r4
 8006848:	f00d fc23 	bl	8014092 <atoi>
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 800684c:	1e43      	subs	r3, r0, #1
 800684e:	b29b      	uxth	r3, r3
 8006850:	2bfe      	cmp	r3, #254	; 0xfe
 8006852:	d900      	bls.n	8006856 <setCommand+0x232>
 8006854:	e74e      	b.n	80066f4 <setCommand+0xd0>
				BOS.buttons.maxInterClickTime = temp16;
 8006856:	4b61      	ldr	r3, [pc, #388]	; (80069dc <setCommand+0x3b8>)
 8006858:	7158      	strb	r0, [r3, #5]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800685a:	0200      	lsls	r0, r0, #8
 800685c:	7919      	ldrb	r1, [r3, #4]
 800685e:	4301      	orrs	r1, r0
 8006860:	b289      	uxth	r1, r1
 8006862:	2018      	movs	r0, #24
 8006864:	30ff      	adds	r0, #255	; 0xff
 8006866:	f001 f931 	bl	8007acc <EE_WriteVariable>
	if (result == BOS_OK) 
 800686a:	e0f7      	b.n	8006a5c <setCommand+0x438>
			temp2 = atoi((const char *)pcParameterString2);
 800686c:	0020      	movs	r0, r4
 800686e:	f00d fc10 	bl	8014092 <atoi>
			if (temp2 <= DEF_CLI_BAUDRATE) {
 8006872:	23e1      	movs	r3, #225	; 0xe1
 8006874:	031b      	lsls	r3, r3, #12
 8006876:	4298      	cmp	r0, r3
 8006878:	d900      	bls.n	800687c <setCommand+0x258>
 800687a:	e73b      	b.n	80066f4 <setCommand+0xd0>
				BOS.clibaudrate = temp2;
 800687c:	4c57      	ldr	r4, [pc, #348]	; (80069dc <setCommand+0x3b8>)
 800687e:	60a0      	str	r0, [r4, #8]
				EE_WriteVariable(_EE_CLI_BAUD, (uint16_t)BOS.clibaudrate);
 8006880:	b281      	uxth	r1, r0
 8006882:	208c      	movs	r0, #140	; 0x8c
 8006884:	0040      	lsls	r0, r0, #1
 8006886:	f001 f921 	bl	8007acc <EE_WriteVariable>
				EE_WriteVariable(_EE_CLI_BAUD+1, (uint16_t)(BOS.clibaudrate>>16));
 800688a:	8961      	ldrh	r1, [r4, #10]
 800688c:	201a      	movs	r0, #26
 800688e:	30ff      	adds	r0, #255	; 0xff
 8006890:	f001 f91c 	bl	8007acc <EE_WriteVariable>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 8006894:	4b45      	ldr	r3, [pc, #276]	; (80069ac <setCommand+0x388>)
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	2300      	movs	r3, #0
 800689a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800689c:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, pcParameterString1, pcParameterString2);
 800689e:	4b48      	ldr	r3, [pc, #288]	; (80069c0 <setCommand+0x39c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4955      	ldr	r1, [pc, #340]	; (80069f8 <setCommand+0x3d4>)
 80068a4:	4650      	mov	r0, sl
 80068a6:	f00e f88d 	bl	80149c4 <sprintf>
			strcat(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI1);
 80068aa:	4650      	mov	r0, sl
 80068ac:	f7f9 fc34 	bl	8000118 <strlen>
 80068b0:	4450      	add	r0, sl
 80068b2:	2230      	movs	r2, #48	; 0x30
 80068b4:	4951      	ldr	r1, [pc, #324]	; (80069fc <setCommand+0x3d8>)
 80068b6:	f00d fe53 	bl	8014560 <memcpy>
			strcat(( char * ) pcWriteBuffer, ( char * ) pcMessageCLI2);
 80068ba:	4650      	mov	r0, sl
 80068bc:	f7f9 fc2c 	bl	8000118 <strlen>
 80068c0:	4450      	add	r0, sl
 80068c2:	22a3      	movs	r2, #163	; 0xa3
 80068c4:	494e      	ldr	r1, [pc, #312]	; (8006a00 <setCommand+0x3dc>)
 80068c6:	f00d fe4b 	bl	8014560 <memcpy>
 80068ca:	e21d      	b.n	8006d08 <setCommand+0x6e4>
			temp16 = atoi((const char *)pcParameterString2);
 80068cc:	0020      	movs	r0, r4
 80068ce:	f00d fbe0 	bl	8014092 <atoi>
 80068d2:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 80068d4:	2900      	cmp	r1, #0
 80068d6:	d100      	bne.n	80068da <setCommand+0x2b6>
 80068d8:	e70c      	b.n	80066f4 <setCommand+0xd0>
				BOS.buttons.debounce = temp16;
 80068da:	4b40      	ldr	r3, [pc, #256]	; (80069dc <setCommand+0x3b8>)
 80068dc:	8019      	strh	r1, [r3, #0]
				EE_WriteVariable(_EE_PARAMS_DEBOUNCE, temp16);
 80068de:	2016      	movs	r0, #22
 80068e0:	30ff      	adds	r0, #255	; 0xff
 80068e2:	f001 f8f3 	bl	8007acc <EE_WriteVariable>
	if (result == BOS_OK) 
 80068e6:	e0b9      	b.n	8006a5c <setCommand+0x438>
			temp16 = atoi((const char *)pcParameterString2);
 80068e8:	0020      	movs	r0, r4
 80068ea:	f00d fbd2 	bl	8014092 <atoi>
 80068ee:	b281      	uxth	r1, r0
			if (temp16 >= 1 && temp16 <= USHRT_MAX) {
 80068f0:	2900      	cmp	r1, #0
 80068f2:	d100      	bne.n	80068f6 <setCommand+0x2d2>
 80068f4:	e6fe      	b.n	80066f4 <setCommand+0xd0>
				BOS.buttons.singleClickTime = temp16;
 80068f6:	4b39      	ldr	r3, [pc, #228]	; (80069dc <setCommand+0x3b8>)
 80068f8:	8059      	strh	r1, [r3, #2]
				EE_WriteVariable(_EE_PARAMS_SINGLE_CLICK, temp16);
 80068fa:	208b      	movs	r0, #139	; 0x8b
 80068fc:	0040      	lsls	r0, r0, #1
 80068fe:	f001 f8e5 	bl	8007acc <EE_WriteVariable>
	if (result == BOS_OK) 
 8006902:	e0ab      	b.n	8006a5c <setCommand+0x438>
			temp16 = atoi((const char *)pcParameterString2);
 8006904:	0020      	movs	r0, r4
 8006906:	f00d fbc4 	bl	8014092 <atoi>
			if (temp16 >= 1 && temp16 <= UCHAR_MAX) {
 800690a:	1e43      	subs	r3, r0, #1
 800690c:	b29b      	uxth	r3, r3
 800690e:	2bfe      	cmp	r3, #254	; 0xfe
 8006910:	d900      	bls.n	8006914 <setCommand+0x2f0>
 8006912:	e6ef      	b.n	80066f4 <setCommand+0xd0>
				BOS.buttons.minInterClickTime = temp16;
 8006914:	b2c0      	uxtb	r0, r0
 8006916:	4b31      	ldr	r3, [pc, #196]	; (80069dc <setCommand+0x3b8>)
 8006918:	7118      	strb	r0, [r3, #4]
				EE_WriteVariable(_EE_PARAMS_DBL_CLICK, ((uint16_t)BOS.buttons.maxInterClickTime<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800691a:	7959      	ldrb	r1, [r3, #5]
 800691c:	0209      	lsls	r1, r1, #8
 800691e:	4301      	orrs	r1, r0
 8006920:	2018      	movs	r0, #24
 8006922:	30ff      	adds	r0, #255	; 0xff
 8006924:	f001 f8d2 	bl	8007acc <EE_WriteVariable>
	if (result == BOS_OK) 
 8006928:	e098      	b.n	8006a5c <setCommand+0x438>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 800692a:	aa0c      	add	r2, sp, #48	; 0x30
 800692c:	2102      	movs	r1, #2
 800692e:	0020      	movs	r0, r4
 8006930:	f008 fa0c 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 8006934:	4b22      	ldr	r3, [pc, #136]	; (80069c0 <setCommand+0x39c>)
 8006936:	4698      	mov	r8, r3
 8006938:	6018      	str	r0, [r3, #0]
		pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 800693a:	aa0b      	add	r2, sp, #44	; 0x2c
 800693c:	2103      	movs	r1, #3
 800693e:	0020      	movs	r0, r4
 8006940:	f008 fa04 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 8006944:	4d2f      	ldr	r5, [pc, #188]	; (8006a04 <setCommand+0x3e0>)
 8006946:	6028      	str	r0, [r5, #0]
		pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 8006948:	aa0a      	add	r2, sp, #40	; 0x28
 800694a:	2104      	movs	r1, #4
 800694c:	0020      	movs	r0, r4
 800694e:	f008 f9fd 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 8006952:	4b2d      	ldr	r3, [pc, #180]	; (8006a08 <setCommand+0x3e4>)
 8006954:	4699      	mov	r9, r3
 8006956:	6018      	str	r0, [r3, #0]
		pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8006958:	aa09      	add	r2, sp, #36	; 0x24
 800695a:	2105      	movs	r1, #5
 800695c:	0020      	movs	r0, r4
 800695e:	f008 f9f5 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 8006962:	4f2a      	ldr	r7, [pc, #168]	; (8006a0c <setCommand+0x3e8>)
 8006964:	6038      	str	r0, [r7, #0]
		temp81 = atoi((const char *)pcParameterString2);		// Hours
 8006966:	4643      	mov	r3, r8
 8006968:	6818      	ldr	r0, [r3, #0]
 800696a:	f00d fb92 	bl	8014092 <atoi>
 800696e:	b2c3      	uxtb	r3, r0
 8006970:	4698      	mov	r8, r3
		temp82 = atoi((const char *)pcParameterString3);		// Minutes
 8006972:	6828      	ldr	r0, [r5, #0]
 8006974:	f00d fb8d 	bl	8014092 <atoi>
 8006978:	0005      	movs	r5, r0
		temp83 = atoi((const char *)pcParameterString4);		// Seconds
 800697a:	464b      	mov	r3, r9
 800697c:	6818      	ldr	r0, [r3, #0]
 800697e:	f00d fb88 	bl	8014092 <atoi>
 8006982:	0004      	movs	r4, r0
		if (pcParameterString5 != NULL) {
 8006984:	683f      	ldr	r7, [r7, #0]
 8006986:	2f00      	cmp	r7, #0
 8006988:	d047      	beq.n	8006a1a <setCommand+0x3f6>
			if (!strncmp((const char *)pcParameterString5, "am", 2))
 800698a:	2202      	movs	r2, #2
 800698c:	4920      	ldr	r1, [pc, #128]	; (8006a10 <setCommand+0x3ec>)
 800698e:	0038      	movs	r0, r7
 8006990:	f00e f85b 	bl	8014a4a <strncmp>
 8006994:	2800      	cmp	r0, #0
 8006996:	d03f      	beq.n	8006a18 <setCommand+0x3f4>
			else if (!strncmp((const char *)pcParameterString5, "pm", 2))
 8006998:	2202      	movs	r2, #2
 800699a:	491e      	ldr	r1, [pc, #120]	; (8006a14 <setCommand+0x3f0>)
 800699c:	0038      	movs	r0, r7
 800699e:	f00e f854 	bl	8014a4a <strncmp>
				temp84 = RTC_PM;
 80069a2:	2602      	movs	r6, #2
			else if (!strncmp((const char *)pcParameterString5, "pm", 2))
 80069a4:	2800      	cmp	r0, #0
 80069a6:	d038      	beq.n	8006a1a <setCommand+0x3f6>
				result = BOS_ERR_WrongValue;
 80069a8:	2668      	movs	r6, #104	; 0x68
 80069aa:	e1aa      	b.n	8006d02 <setCommand+0x6de>
 80069ac:	20000fc8 	.word	0x20000fc8
 80069b0:	0801b82c 	.word	0x0801b82c
 80069b4:	0801ba94 	.word	0x0801ba94
 80069b8:	0801baa0 	.word	0x0801baa0
 80069bc:	0801b8b4 	.word	0x0801b8b4
 80069c0:	20000fd4 	.word	0x20000fd4
 80069c4:	0801b834 	.word	0x0801b834
 80069c8:	0801ab78 	.word	0x0801ab78
 80069cc:	0801b9a0 	.word	0x0801b9a0
 80069d0:	0801b9a8 	.word	0x0801b9a8
 80069d4:	0801b844 	.word	0x0801b844
 80069d8:	0801b950 	.word	0x0801b950
 80069dc:	200066e4 	.word	0x200066e4
 80069e0:	0801b84c 	.word	0x0801b84c
 80069e4:	0801b854 	.word	0x0801b854
 80069e8:	0801b860 	.word	0x0801b860
 80069ec:	0801b86c 	.word	0x0801b86c
 80069f0:	0801b87c 	.word	0x0801b87c
 80069f4:	0801b890 	.word	0x0801b890
 80069f8:	0801b9ac 	.word	0x0801b9ac
 80069fc:	0801b9c0 	.word	0x0801b9c0
 8006a00:	0801b9f0 	.word	0x0801b9f0
 8006a04:	20000fdc 	.word	0x20000fdc
 8006a08:	20000fe0 	.word	0x20000fe0
 8006a0c:	20000fe4 	.word	0x20000fe4
 8006a10:	0801d250 	.word	0x0801d250
 8006a14:	0801ba9c 	.word	0x0801ba9c
				temp84 = RTC_AM;
 8006a18:	2601      	movs	r6, #1
			if (temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006a1a:	4643      	mov	r3, r8
 8006a1c:	2b17      	cmp	r3, #23
 8006a1e:	d900      	bls.n	8006a22 <setCommand+0x3fe>
 8006a20:	e668      	b.n	80066f4 <setCommand+0xd0>
		temp82 = atoi((const char *)pcParameterString3);		// Minutes
 8006a22:	b2ed      	uxtb	r5, r5
			if (temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006a24:	2d3b      	cmp	r5, #59	; 0x3b
 8006a26:	d900      	bls.n	8006a2a <setCommand+0x406>
 8006a28:	e664      	b.n	80066f4 <setCommand+0xd0>
		temp83 = atoi((const char *)pcParameterString4);		// Seconds
 8006a2a:	b2e4      	uxtb	r4, r4
			if (temp81 > 23 || temp82 > 59 || temp83 > 59)
 8006a2c:	2c3b      	cmp	r4, #59	; 0x3b
 8006a2e:	d900      	bls.n	8006a32 <setCommand+0x40e>
 8006a30:	e660      	b.n	80066f4 <setCommand+0xd0>
				GetTimeDate();				
 8006a32:	f007 f87f 	bl	800db34 <GetTimeDate>
				result = BOS_CalendarConfig(BOS.date.month, BOS.date.day, BOS.date.year, BOS.date.weekday, temp83, temp82, temp81, temp84, BOS.daylightsaving);
 8006a36:	4fb8      	ldr	r7, [pc, #736]	; (8006d18 <setCommand+0x6f4>)
 8006a38:	7d3b      	ldrb	r3, [r7, #20]
 8006a3a:	8b3a      	ldrh	r2, [r7, #24]
 8006a3c:	7d79      	ldrb	r1, [r7, #21]
 8006a3e:	7db8      	ldrb	r0, [r7, #22]
 8006a40:	7b3f      	ldrb	r7, [r7, #12]
 8006a42:	b27f      	sxtb	r7, r7
 8006a44:	9704      	str	r7, [sp, #16]
 8006a46:	9603      	str	r6, [sp, #12]
 8006a48:	4646      	mov	r6, r8
 8006a4a:	9602      	str	r6, [sp, #8]
 8006a4c:	9501      	str	r5, [sp, #4]
 8006a4e:	9400      	str	r4, [sp, #0]
 8006a50:	f007 f816 	bl	800da80 <BOS_CalendarConfig>
 8006a54:	0006      	movs	r6, r0
	if (result == BOS_OK) 
 8006a56:	2e00      	cmp	r6, #0
 8006a58:	d000      	beq.n	8006a5c <setCommand+0x438>
 8006a5a:	e14f      	b.n	8006cfc <setCommand+0x6d8>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 8006a5c:	4baf      	ldr	r3, [pc, #700]	; (8006d1c <setCommand+0x6f8>)
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	2300      	movs	r3, #0
 8006a62:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006a64:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, pcParameterString1, pcParameterString2);
 8006a66:	4bae      	ldr	r3, [pc, #696]	; (8006d20 <setCommand+0x6fc>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	49ae      	ldr	r1, [pc, #696]	; (8006d24 <setCommand+0x700>)
 8006a6c:	4650      	mov	r0, sl
 8006a6e:	f00d ffa9 	bl	80149c4 <sprintf>
	return pdFALSE;
 8006a72:	e149      	b.n	8006d08 <setCommand+0x6e4>
		pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006a74:	aa0c      	add	r2, sp, #48	; 0x30
 8006a76:	2102      	movs	r1, #2
 8006a78:	0020      	movs	r0, r4
 8006a7a:	f008 f967 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 8006a7e:	4da8      	ldr	r5, [pc, #672]	; (8006d20 <setCommand+0x6fc>)
 8006a80:	6028      	str	r0, [r5, #0]
		pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 8006a82:	aa0b      	add	r2, sp, #44	; 0x2c
 8006a84:	2103      	movs	r1, #3
 8006a86:	0020      	movs	r0, r4
 8006a88:	f008 f960 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 8006a8c:	4ba6      	ldr	r3, [pc, #664]	; (8006d28 <setCommand+0x704>)
 8006a8e:	6018      	str	r0, [r3, #0]
		pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 8006a90:	aa0a      	add	r2, sp, #40	; 0x28
 8006a92:	2104      	movs	r1, #4
 8006a94:	0020      	movs	r0, r4
 8006a96:	f008 f959 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 8006a9a:	4ea4      	ldr	r6, [pc, #656]	; (8006d2c <setCommand+0x708>)
 8006a9c:	6030      	str	r0, [r6, #0]
		pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8006a9e:	aa09      	add	r2, sp, #36	; 0x24
 8006aa0:	2105      	movs	r1, #5
 8006aa2:	0020      	movs	r0, r4
 8006aa4:	f008 f952 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 8006aa8:	4ca1      	ldr	r4, [pc, #644]	; (8006d30 <setCommand+0x70c>)
 8006aaa:	6020      	str	r0, [r4, #0]
		temp83 = atoi((const char *)pcParameterString4);		// day
 8006aac:	6830      	ldr	r0, [r6, #0]
 8006aae:	f00d faf0 	bl	8014092 <atoi>
 8006ab2:	9006      	str	r0, [sp, #24]
		temp16 = atoi((const char *)pcParameterString5);		// year	
 8006ab4:	6820      	ldr	r0, [r4, #0]
 8006ab6:	f00d faec 	bl	8014092 <atoi>
 8006aba:	9007      	str	r0, [sp, #28]
		if (!strncmp((const char *)pcParameterString2, "monday", 6))
 8006abc:	682c      	ldr	r4, [r5, #0]
 8006abe:	2206      	movs	r2, #6
 8006ac0:	499c      	ldr	r1, [pc, #624]	; (8006d34 <setCommand+0x710>)
 8006ac2:	0020      	movs	r0, r4
 8006ac4:	f00d ffc1 	bl	8014a4a <strncmp>
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	d100      	bne.n	8006ace <setCommand+0x4aa>
 8006acc:	e170      	b.n	8006db0 <setCommand+0x78c>
		else if (!strncmp((const char *)pcParameterString2, "tuesday", 7))
 8006ace:	2207      	movs	r2, #7
 8006ad0:	4999      	ldr	r1, [pc, #612]	; (8006d38 <setCommand+0x714>)
 8006ad2:	0020      	movs	r0, r4
 8006ad4:	f00d ffb9 	bl	8014a4a <strncmp>
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	d100      	bne.n	8006ade <setCommand+0x4ba>
 8006adc:	e199      	b.n	8006e12 <setCommand+0x7ee>
		else if (!strncmp((const char *)pcParameterString2, "wednesday", 9))
 8006ade:	2209      	movs	r2, #9
 8006ae0:	4996      	ldr	r1, [pc, #600]	; (8006d3c <setCommand+0x718>)
 8006ae2:	0020      	movs	r0, r4
 8006ae4:	f00d ffb1 	bl	8014a4a <strncmp>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	d100      	bne.n	8006aee <setCommand+0x4ca>
 8006aec:	e193      	b.n	8006e16 <setCommand+0x7f2>
		else if (!strncmp((const char *)pcParameterString2, "thursday", 8))
 8006aee:	2208      	movs	r2, #8
 8006af0:	4993      	ldr	r1, [pc, #588]	; (8006d40 <setCommand+0x71c>)
 8006af2:	0020      	movs	r0, r4
 8006af4:	f00d ffa9 	bl	8014a4a <strncmp>
 8006af8:	2800      	cmp	r0, #0
 8006afa:	d100      	bne.n	8006afe <setCommand+0x4da>
 8006afc:	e18d      	b.n	8006e1a <setCommand+0x7f6>
		else if (!strncmp((const char *)pcParameterString2, "friday", 6))
 8006afe:	2206      	movs	r2, #6
 8006b00:	4990      	ldr	r1, [pc, #576]	; (8006d44 <setCommand+0x720>)
 8006b02:	0020      	movs	r0, r4
 8006b04:	f00d ffa1 	bl	8014a4a <strncmp>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	d100      	bne.n	8006b0e <setCommand+0x4ea>
 8006b0c:	e187      	b.n	8006e1e <setCommand+0x7fa>
		else if (!strncmp((const char *)pcParameterString2, "saturday", 8))
 8006b0e:	2208      	movs	r2, #8
 8006b10:	498d      	ldr	r1, [pc, #564]	; (8006d48 <setCommand+0x724>)
 8006b12:	0020      	movs	r0, r4
 8006b14:	f00d ff99 	bl	8014a4a <strncmp>
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	d100      	bne.n	8006b1e <setCommand+0x4fa>
 8006b1c:	e181      	b.n	8006e22 <setCommand+0x7fe>
		else if (!strncmp((const char *)pcParameterString2, "sunday", 6))
 8006b1e:	2206      	movs	r2, #6
 8006b20:	498a      	ldr	r1, [pc, #552]	; (8006d4c <setCommand+0x728>)
 8006b22:	0020      	movs	r0, r4
 8006b24:	f00d ff91 	bl	8014a4a <strncmp>
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	d100      	bne.n	8006b2e <setCommand+0x50a>
 8006b2c:	e17b      	b.n	8006e26 <setCommand+0x802>
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 8006b2e:	4b7e      	ldr	r3, [pc, #504]	; (8006d28 <setCommand+0x704>)
 8006b30:	681c      	ldr	r4, [r3, #0]
 8006b32:	2207      	movs	r2, #7
 8006b34:	4986      	ldr	r1, [pc, #536]	; (8006d50 <setCommand+0x72c>)
 8006b36:	0020      	movs	r0, r4
 8006b38:	f00d ff87 	bl	8014a4a <strncmp>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	d100      	bne.n	8006b42 <setCommand+0x51e>
 8006b40:	e0ab      	b.n	8006c9a <setCommand+0x676>
			result = BOS_ERR_WrongValue;		
 8006b42:	2668      	movs	r6, #104	; 0x68
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 8006b44:	2202      	movs	r2, #2
 8006b46:	4983      	ldr	r1, [pc, #524]	; (8006d54 <setCommand+0x730>)
 8006b48:	0020      	movs	r0, r4
 8006b4a:	f00d ff7e 	bl	8014a4a <strncmp>
 8006b4e:	2800      	cmp	r0, #0
 8006b50:	d100      	bne.n	8006b54 <setCommand+0x530>
 8006b52:	e0a5      	b.n	8006ca0 <setCommand+0x67c>
		else if (!strncmp((const char *)pcParameterString3, "february", 8) || !strncmp((const char *)pcParameterString3, "2 ", 2))
 8006b54:	2208      	movs	r2, #8
 8006b56:	4980      	ldr	r1, [pc, #512]	; (8006d58 <setCommand+0x734>)
 8006b58:	0020      	movs	r0, r4
 8006b5a:	f00d ff76 	bl	8014a4a <strncmp>
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	d100      	bne.n	8006b64 <setCommand+0x540>
 8006b62:	e0a1      	b.n	8006ca8 <setCommand+0x684>
 8006b64:	2202      	movs	r2, #2
 8006b66:	497d      	ldr	r1, [pc, #500]	; (8006d5c <setCommand+0x738>)
 8006b68:	0020      	movs	r0, r4
 8006b6a:	f00d ff6e 	bl	8014a4a <strncmp>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	d100      	bne.n	8006b74 <setCommand+0x550>
 8006b72:	e09b      	b.n	8006cac <setCommand+0x688>
		else if (!strncmp((const char *)pcParameterString3, "march", 5) || !strncmp((const char *)pcParameterString3, "3 ", 2))
 8006b74:	2205      	movs	r2, #5
 8006b76:	497a      	ldr	r1, [pc, #488]	; (8006d60 <setCommand+0x73c>)
 8006b78:	0020      	movs	r0, r4
 8006b7a:	f00d ff66 	bl	8014a4a <strncmp>
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	d100      	bne.n	8006b84 <setCommand+0x560>
 8006b82:	e095      	b.n	8006cb0 <setCommand+0x68c>
 8006b84:	2202      	movs	r2, #2
 8006b86:	4977      	ldr	r1, [pc, #476]	; (8006d64 <setCommand+0x740>)
 8006b88:	0020      	movs	r0, r4
 8006b8a:	f00d ff5e 	bl	8014a4a <strncmp>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d100      	bne.n	8006b94 <setCommand+0x570>
 8006b92:	e08f      	b.n	8006cb4 <setCommand+0x690>
		else if (!strncmp((const char *)pcParameterString3, "april", 5) || !strncmp((const char *)pcParameterString3, "4 ", 2))
 8006b94:	2205      	movs	r2, #5
 8006b96:	4974      	ldr	r1, [pc, #464]	; (8006d68 <setCommand+0x744>)
 8006b98:	0020      	movs	r0, r4
 8006b9a:	f00d ff56 	bl	8014a4a <strncmp>
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	d100      	bne.n	8006ba4 <setCommand+0x580>
 8006ba2:	e089      	b.n	8006cb8 <setCommand+0x694>
 8006ba4:	2202      	movs	r2, #2
 8006ba6:	4971      	ldr	r1, [pc, #452]	; (8006d6c <setCommand+0x748>)
 8006ba8:	0020      	movs	r0, r4
 8006baa:	f00d ff4e 	bl	8014a4a <strncmp>
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	d100      	bne.n	8006bb4 <setCommand+0x590>
 8006bb2:	e083      	b.n	8006cbc <setCommand+0x698>
		else if (!strncmp((const char *)pcParameterString3, "may", 3) || !strncmp((const char *)pcParameterString3, "5 ", 2))
 8006bb4:	2203      	movs	r2, #3
 8006bb6:	496e      	ldr	r1, [pc, #440]	; (8006d70 <setCommand+0x74c>)
 8006bb8:	0020      	movs	r0, r4
 8006bba:	f00d ff46 	bl	8014a4a <strncmp>
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	d07e      	beq.n	8006cc0 <setCommand+0x69c>
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	496b      	ldr	r1, [pc, #428]	; (8006d74 <setCommand+0x750>)
 8006bc6:	0020      	movs	r0, r4
 8006bc8:	f00d ff3f 	bl	8014a4a <strncmp>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	d079      	beq.n	8006cc4 <setCommand+0x6a0>
		else if (!strncmp((const char *)pcParameterString3, "june", 4) || !strncmp((const char *)pcParameterString3, "6 ", 2))
 8006bd0:	2204      	movs	r2, #4
 8006bd2:	4969      	ldr	r1, [pc, #420]	; (8006d78 <setCommand+0x754>)
 8006bd4:	0020      	movs	r0, r4
 8006bd6:	f00d ff38 	bl	8014a4a <strncmp>
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	d074      	beq.n	8006cc8 <setCommand+0x6a4>
 8006bde:	2202      	movs	r2, #2
 8006be0:	4966      	ldr	r1, [pc, #408]	; (8006d7c <setCommand+0x758>)
 8006be2:	0020      	movs	r0, r4
 8006be4:	f00d ff31 	bl	8014a4a <strncmp>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	d06f      	beq.n	8006ccc <setCommand+0x6a8>
		else if (!strncmp((const char *)pcParameterString3, "july", 4) || !strncmp((const char *)pcParameterString3, "7 ", 2))
 8006bec:	2204      	movs	r2, #4
 8006bee:	4964      	ldr	r1, [pc, #400]	; (8006d80 <setCommand+0x75c>)
 8006bf0:	0020      	movs	r0, r4
 8006bf2:	f00d ff2a 	bl	8014a4a <strncmp>
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	d06a      	beq.n	8006cd0 <setCommand+0x6ac>
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	4961      	ldr	r1, [pc, #388]	; (8006d84 <setCommand+0x760>)
 8006bfe:	0020      	movs	r0, r4
 8006c00:	f00d ff23 	bl	8014a4a <strncmp>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	d065      	beq.n	8006cd4 <setCommand+0x6b0>
		else if (!strncmp((const char *)pcParameterString3, "august", 5) || !strncmp((const char *)pcParameterString3, "8 ", 2))
 8006c08:	2205      	movs	r2, #5
 8006c0a:	495f      	ldr	r1, [pc, #380]	; (8006d88 <setCommand+0x764>)
 8006c0c:	0020      	movs	r0, r4
 8006c0e:	f00d ff1c 	bl	8014a4a <strncmp>
 8006c12:	2800      	cmp	r0, #0
 8006c14:	d060      	beq.n	8006cd8 <setCommand+0x6b4>
 8006c16:	2202      	movs	r2, #2
 8006c18:	495c      	ldr	r1, [pc, #368]	; (8006d8c <setCommand+0x768>)
 8006c1a:	0020      	movs	r0, r4
 8006c1c:	f00d ff15 	bl	8014a4a <strncmp>
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d05b      	beq.n	8006cdc <setCommand+0x6b8>
		else if (!strncmp((const char *)pcParameterString3, "september", 9) || !strncmp((const char *)pcParameterString3, "9 ", 2))
 8006c24:	2209      	movs	r2, #9
 8006c26:	495a      	ldr	r1, [pc, #360]	; (8006d90 <setCommand+0x76c>)
 8006c28:	0020      	movs	r0, r4
 8006c2a:	f00d ff0e 	bl	8014a4a <strncmp>
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	d056      	beq.n	8006ce0 <setCommand+0x6bc>
 8006c32:	2202      	movs	r2, #2
 8006c34:	4957      	ldr	r1, [pc, #348]	; (8006d94 <setCommand+0x770>)
 8006c36:	0020      	movs	r0, r4
 8006c38:	f00d ff07 	bl	8014a4a <strncmp>
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	d051      	beq.n	8006ce4 <setCommand+0x6c0>
		else if (!strncmp((const char *)pcParameterString3, "october", 7) || !strncmp((const char *)pcParameterString3, "10", 2))
 8006c40:	2207      	movs	r2, #7
 8006c42:	4955      	ldr	r1, [pc, #340]	; (8006d98 <setCommand+0x774>)
 8006c44:	0020      	movs	r0, r4
 8006c46:	f00d ff00 	bl	8014a4a <strncmp>
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	d04c      	beq.n	8006ce8 <setCommand+0x6c4>
 8006c4e:	2202      	movs	r2, #2
 8006c50:	4952      	ldr	r1, [pc, #328]	; (8006d9c <setCommand+0x778>)
 8006c52:	0020      	movs	r0, r4
 8006c54:	f00d fef9 	bl	8014a4a <strncmp>
 8006c58:	2800      	cmp	r0, #0
 8006c5a:	d047      	beq.n	8006cec <setCommand+0x6c8>
		else if (!strncmp((const char *)pcParameterString3, "november", 8) || !strncmp((const char *)pcParameterString3, "11", 2))
 8006c5c:	2208      	movs	r2, #8
 8006c5e:	4950      	ldr	r1, [pc, #320]	; (8006da0 <setCommand+0x77c>)
 8006c60:	0020      	movs	r0, r4
 8006c62:	f00d fef2 	bl	8014a4a <strncmp>
 8006c66:	2800      	cmp	r0, #0
 8006c68:	d042      	beq.n	8006cf0 <setCommand+0x6cc>
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	494d      	ldr	r1, [pc, #308]	; (8006da4 <setCommand+0x780>)
 8006c6e:	0020      	movs	r0, r4
 8006c70:	f00d feeb 	bl	8014a4a <strncmp>
 8006c74:	2800      	cmp	r0, #0
 8006c76:	d03d      	beq.n	8006cf4 <setCommand+0x6d0>
		else if (!strncmp((const char *)pcParameterString3, "december", 8) || !strncmp((const char *)pcParameterString3, "12", 2))
 8006c78:	2208      	movs	r2, #8
 8006c7a:	494b      	ldr	r1, [pc, #300]	; (8006da8 <setCommand+0x784>)
 8006c7c:	0020      	movs	r0, r4
 8006c7e:	f00d fee4 	bl	8014a4a <strncmp>
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d038      	beq.n	8006cf8 <setCommand+0x6d4>
 8006c86:	2202      	movs	r2, #2
 8006c88:	4948      	ldr	r1, [pc, #288]	; (8006dac <setCommand+0x788>)
 8006c8a:	0020      	movs	r0, r4
 8006c8c:	f00d fedd 	bl	8014a4a <strncmp>
			temp82 = DECEMBER;
 8006c90:	250c      	movs	r5, #12
		else if (!strncmp((const char *)pcParameterString3, "december", 8) || !strncmp((const char *)pcParameterString3, "12", 2))
 8006c92:	2800      	cmp	r0, #0
 8006c94:	d005      	beq.n	8006ca2 <setCommand+0x67e>
			result = BOS_ERR_WrongValue;	
 8006c96:	2668      	movs	r6, #104	; 0x68
	else if (result == BOS_ERR_WrongParam)
 8006c98:	e033      	b.n	8006d02 <setCommand+0x6de>
			result = BOS_ERR_WrongValue;		
 8006c9a:	2668      	movs	r6, #104	; 0x68
			temp82 = JANUARY;
 8006c9c:	2501      	movs	r5, #1
 8006c9e:	e000      	b.n	8006ca2 <setCommand+0x67e>
 8006ca0:	2501      	movs	r5, #1
		if (result == BOS_OK) 
 8006ca2:	2e00      	cmp	r6, #0
 8006ca4:	d12d      	bne.n	8006d02 <setCommand+0x6de>
 8006ca6:	e090      	b.n	8006dca <setCommand+0x7a6>
			temp82 = FEBRUARY;
 8006ca8:	2502      	movs	r5, #2
 8006caa:	e7fa      	b.n	8006ca2 <setCommand+0x67e>
 8006cac:	2502      	movs	r5, #2
 8006cae:	e7f8      	b.n	8006ca2 <setCommand+0x67e>
			temp82 = MARCH;
 8006cb0:	2503      	movs	r5, #3
 8006cb2:	e7f6      	b.n	8006ca2 <setCommand+0x67e>
 8006cb4:	2503      	movs	r5, #3
 8006cb6:	e7f4      	b.n	8006ca2 <setCommand+0x67e>
			temp82 = APRIL;
 8006cb8:	2504      	movs	r5, #4
 8006cba:	e7f2      	b.n	8006ca2 <setCommand+0x67e>
 8006cbc:	2504      	movs	r5, #4
 8006cbe:	e7f0      	b.n	8006ca2 <setCommand+0x67e>
			temp82 = MAY;
 8006cc0:	2505      	movs	r5, #5
 8006cc2:	e7ee      	b.n	8006ca2 <setCommand+0x67e>
 8006cc4:	2505      	movs	r5, #5
 8006cc6:	e7ec      	b.n	8006ca2 <setCommand+0x67e>
			temp82 = JUNE;
 8006cc8:	2506      	movs	r5, #6
 8006cca:	e7ea      	b.n	8006ca2 <setCommand+0x67e>
 8006ccc:	2506      	movs	r5, #6
 8006cce:	e7e8      	b.n	8006ca2 <setCommand+0x67e>
			temp82 = JULY;
 8006cd0:	2507      	movs	r5, #7
 8006cd2:	e7e6      	b.n	8006ca2 <setCommand+0x67e>
 8006cd4:	2507      	movs	r5, #7
 8006cd6:	e7e4      	b.n	8006ca2 <setCommand+0x67e>
			temp82 = AUGUST;
 8006cd8:	2508      	movs	r5, #8
 8006cda:	e7e2      	b.n	8006ca2 <setCommand+0x67e>
 8006cdc:	2508      	movs	r5, #8
 8006cde:	e7e0      	b.n	8006ca2 <setCommand+0x67e>
			temp82 = SEPTEMBER;
 8006ce0:	2509      	movs	r5, #9
 8006ce2:	e7de      	b.n	8006ca2 <setCommand+0x67e>
 8006ce4:	2509      	movs	r5, #9
 8006ce6:	e7dc      	b.n	8006ca2 <setCommand+0x67e>
			temp82 = OCTOBER;
 8006ce8:	250a      	movs	r5, #10
 8006cea:	e7da      	b.n	8006ca2 <setCommand+0x67e>
 8006cec:	250a      	movs	r5, #10
 8006cee:	e7d8      	b.n	8006ca2 <setCommand+0x67e>
			temp82 = NOVEMBER;
 8006cf0:	250b      	movs	r5, #11
 8006cf2:	e7d6      	b.n	8006ca2 <setCommand+0x67e>
 8006cf4:	250b      	movs	r5, #11
 8006cf6:	e7d4      	b.n	8006ca2 <setCommand+0x67e>
			temp82 = DECEMBER;
 8006cf8:	250c      	movs	r5, #12
 8006cfa:	e7d2      	b.n	8006ca2 <setCommand+0x67e>
	else if (result == BOS_ERR_WrongParam)
 8006cfc:	2e67      	cmp	r6, #103	; 0x67
 8006cfe:	d100      	bne.n	8006d02 <setCommand+0x6de>
 8006d00:	e4bf      	b.n	8006682 <setCommand+0x5e>
	else if (result == BOS_ERR_WrongValue)
 8006d02:	2e68      	cmp	r6, #104	; 0x68
 8006d04:	d100      	bne.n	8006d08 <setCommand+0x6e4>
 8006d06:	e4f5      	b.n	80066f4 <setCommand+0xd0>
}
 8006d08:	2000      	movs	r0, #0
 8006d0a:	b00e      	add	sp, #56	; 0x38
 8006d0c:	bce0      	pop	{r5, r6, r7}
 8006d0e:	46ba      	mov	sl, r7
 8006d10:	46b1      	mov	r9, r6
 8006d12:	46a8      	mov	r8, r5
 8006d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d16:	46c0      	nop			; (mov r8, r8)
 8006d18:	200066e4 	.word	0x200066e4
 8006d1c:	20000fc8 	.word	0x20000fc8
 8006d20:	20000fd4 	.word	0x20000fd4
 8006d24:	0801b9ac 	.word	0x0801b9ac
 8006d28:	20000fdc 	.word	0x20000fdc
 8006d2c:	20000fe0 	.word	0x20000fe0
 8006d30:	20000fe4 	.word	0x20000fe4
 8006d34:	0801baa8 	.word	0x0801baa8
 8006d38:	0801bab0 	.word	0x0801bab0
 8006d3c:	0801bab8 	.word	0x0801bab8
 8006d40:	0801bac4 	.word	0x0801bac4
 8006d44:	0801bad0 	.word	0x0801bad0
 8006d48:	0801bad8 	.word	0x0801bad8
 8006d4c:	0801bae4 	.word	0x0801bae4
 8006d50:	0801baec 	.word	0x0801baec
 8006d54:	0801baf4 	.word	0x0801baf4
 8006d58:	0801baf8 	.word	0x0801baf8
 8006d5c:	0801bb04 	.word	0x0801bb04
 8006d60:	0801bb08 	.word	0x0801bb08
 8006d64:	0801bb10 	.word	0x0801bb10
 8006d68:	0801bb14 	.word	0x0801bb14
 8006d6c:	0801bb1c 	.word	0x0801bb1c
 8006d70:	0801bb20 	.word	0x0801bb20
 8006d74:	0801bb24 	.word	0x0801bb24
 8006d78:	0801bb28 	.word	0x0801bb28
 8006d7c:	0801bb30 	.word	0x0801bb30
 8006d80:	0801bb34 	.word	0x0801bb34
 8006d84:	0801bb3c 	.word	0x0801bb3c
 8006d88:	0801bb40 	.word	0x0801bb40
 8006d8c:	0801bb48 	.word	0x0801bb48
 8006d90:	0801bb4c 	.word	0x0801bb4c
 8006d94:	0801bb58 	.word	0x0801bb58
 8006d98:	0801bb5c 	.word	0x0801bb5c
 8006d9c:	0801bb64 	.word	0x0801bb64
 8006da0:	0801bb68 	.word	0x0801bb68
 8006da4:	0801bb74 	.word	0x0801bb74
 8006da8:	0801bb78 	.word	0x0801bb78
 8006dac:	0801bb84 	.word	0x0801bb84
			temp81 = MONDAY;
 8006db0:	2701      	movs	r7, #1
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 8006db2:	4b1e      	ldr	r3, [pc, #120]	; (8006e2c <setCommand+0x808>)
 8006db4:	681c      	ldr	r4, [r3, #0]
 8006db6:	2207      	movs	r2, #7
 8006db8:	491d      	ldr	r1, [pc, #116]	; (8006e30 <setCommand+0x80c>)
 8006dba:	0020      	movs	r0, r4
 8006dbc:	f00d fe45 	bl	8014a4a <strncmp>
			temp82 = JANUARY;
 8006dc0:	2501      	movs	r5, #1
		if (!strncmp((const char *)pcParameterString3, "january", 7) || !strncmp((const char *)pcParameterString3, "1 ", 2))
 8006dc2:	2600      	movs	r6, #0
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	d000      	beq.n	8006dca <setCommand+0x7a6>
 8006dc8:	e6bc      	b.n	8006b44 <setCommand+0x520>
		temp83 = atoi((const char *)pcParameterString4);		// day
 8006dca:	466b      	mov	r3, sp
 8006dcc:	7e1e      	ldrb	r6, [r3, #24]
			if (temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006dce:	1e73      	subs	r3, r6, #1
 8006dd0:	2b1e      	cmp	r3, #30
 8006dd2:	d900      	bls.n	8006dd6 <setCommand+0x7b2>
 8006dd4:	e48e      	b.n	80066f4 <setCommand+0xd0>
		temp16 = atoi((const char *)pcParameterString5);		// year	
 8006dd6:	466b      	mov	r3, sp
 8006dd8:	8b9c      	ldrh	r4, [r3, #28]
			if (temp83 < 1 || temp83 > 31 || temp16 < 2000 || temp16 > 2100)
 8006dda:	4b16      	ldr	r3, [pc, #88]	; (8006e34 <setCommand+0x810>)
 8006ddc:	18e3      	adds	r3, r4, r3
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	2b64      	cmp	r3, #100	; 0x64
 8006de2:	d900      	bls.n	8006de6 <setCommand+0x7c2>
 8006de4:	e486      	b.n	80066f4 <setCommand+0xd0>
				GetTimeDate();
 8006de6:	f006 fea5 	bl	800db34 <GetTimeDate>
				result = BOS_CalendarConfig(temp82, temp83, temp16, temp81, BOS.time.seconds, BOS.time.minutes, BOS.time.hours, BOS.time.ampm, BOS.daylightsaving);
 8006dea:	4b13      	ldr	r3, [pc, #76]	; (8006e38 <setCommand+0x814>)
 8006dec:	220c      	movs	r2, #12
 8006dee:	569a      	ldrsb	r2, [r3, r2]
 8006df0:	9204      	str	r2, [sp, #16]
 8006df2:	7cda      	ldrb	r2, [r3, #19]
 8006df4:	9203      	str	r2, [sp, #12]
 8006df6:	7c9a      	ldrb	r2, [r3, #18]
 8006df8:	9202      	str	r2, [sp, #8]
 8006dfa:	7c5a      	ldrb	r2, [r3, #17]
 8006dfc:	9201      	str	r2, [sp, #4]
 8006dfe:	7c1b      	ldrb	r3, [r3, #16]
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	003b      	movs	r3, r7
 8006e04:	0022      	movs	r2, r4
 8006e06:	0031      	movs	r1, r6
 8006e08:	0028      	movs	r0, r5
 8006e0a:	f006 fe39 	bl	800da80 <BOS_CalendarConfig>
 8006e0e:	0006      	movs	r6, r0
 8006e10:	e621      	b.n	8006a56 <setCommand+0x432>
			temp81 = TUESDAY;
 8006e12:	2702      	movs	r7, #2
 8006e14:	e7cd      	b.n	8006db2 <setCommand+0x78e>
			temp81 = WEDNESDAY;
 8006e16:	2703      	movs	r7, #3
 8006e18:	e7cb      	b.n	8006db2 <setCommand+0x78e>
			temp81 = THURSDAY;
 8006e1a:	2704      	movs	r7, #4
 8006e1c:	e7c9      	b.n	8006db2 <setCommand+0x78e>
			temp81 = FRIDAY;
 8006e1e:	2705      	movs	r7, #5
 8006e20:	e7c7      	b.n	8006db2 <setCommand+0x78e>
			temp81 = SATURDAY;
 8006e22:	2706      	movs	r7, #6
 8006e24:	e7c5      	b.n	8006db2 <setCommand+0x78e>
			temp81 = SUNDAY;
 8006e26:	2707      	movs	r7, #7
 8006e28:	e7c3      	b.n	8006db2 <setCommand+0x78e>
 8006e2a:	46c0      	nop			; (mov r8, r8)
 8006e2c:	20000fdc 	.word	0x20000fdc
 8006e30:	0801baec 	.word	0x0801baec
 8006e34:	fffff830 	.word	0xfffff830
 8006e38:	200066e4 	.word	0x200066e4

08006e3c <removebuttonCommand>:
{
 8006e3c:	b530      	push	{r4, r5, lr}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	0005      	movs	r5, r0
 8006e42:	0010      	movs	r0, r2
	portBASE_TYPE xParameterStringLength1 = 0; 
 8006e44:	2300      	movs	r3, #0
 8006e46:	9301      	str	r3, [sp, #4]
	configASSERT( pcWriteBuffer );
 8006e48:	2d00      	cmp	r5, #0
 8006e4a:	d010      	beq.n	8006e6e <removebuttonCommand+0x32>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006e4c:	aa01      	add	r2, sp, #4
 8006e4e:	2101      	movs	r1, #1
 8006e50:	f007 ff7c 	bl	800ed4c <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'p') {
 8006e54:	2300      	movs	r3, #0
 8006e56:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port = 0;
 8006e58:	2400      	movs	r4, #0
	if (pcParameterString1[0] == 'p') {
 8006e5a:	2b70      	cmp	r3, #112	; 0x70
 8006e5c:	d009      	beq.n	8006e72 <removebuttonCommand+0x36>
	result = RemovePortButton(port);
 8006e5e:	0020      	movs	r0, r4
 8006e60:	f001 fdce 	bl	8008a00 <RemovePortButton>
	if (result == BOS_OK) 
 8006e64:	2800      	cmp	r0, #0
 8006e66:	d009      	beq.n	8006e7c <removebuttonCommand+0x40>
}
 8006e68:	2000      	movs	r0, #0
 8006e6a:	b003      	add	sp, #12
 8006e6c:	bd30      	pop	{r4, r5, pc}
	configASSERT( pcWriteBuffer );
 8006e6e:	b672      	cpsid	i
 8006e70:	e7fe      	b.n	8006e70 <removebuttonCommand+0x34>
		port = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 8006e72:	3001      	adds	r0, #1
 8006e74:	f00d f913 	bl	801409e <atol>
 8006e78:	b2c4      	uxtb	r4, r0
 8006e7a:	e7f0      	b.n	8006e5e <removebuttonCommand+0x22>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, port, port);
 8006e7c:	0023      	movs	r3, r4
 8006e7e:	0022      	movs	r2, r4
 8006e80:	4902      	ldr	r1, [pc, #8]	; (8006e8c <removebuttonCommand+0x50>)
 8006e82:	0028      	movs	r0, r5
 8006e84:	f00d fd9e 	bl	80149c4 <sprintf>
 8006e88:	e7ee      	b.n	8006e68 <removebuttonCommand+0x2c>
 8006e8a:	46c0      	nop			; (mov r8, r8)
 8006e8c:	0801bb88 	.word	0x0801bb88

08006e90 <addbuttonCommand>:
{
 8006e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e92:	46c6      	mov	lr, r8
 8006e94:	b500      	push	{lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	0006      	movs	r6, r0
 8006e9a:	0017      	movs	r7, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0; 
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	9303      	str	r3, [sp, #12]
 8006ea0:	9302      	str	r3, [sp, #8]
	configASSERT( pcWriteBuffer );
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	d03d      	beq.n	8006f22 <addbuttonCommand+0x92>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006ea6:	aa03      	add	r2, sp, #12
 8006ea8:	2101      	movs	r1, #1
 8006eaa:	0038      	movs	r0, r7
 8006eac:	f007 ff4e 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 8006eb0:	0005      	movs	r5, r0
 8006eb2:	4b25      	ldr	r3, [pc, #148]	; (8006f48 <addbuttonCommand+0xb8>)
 8006eb4:	6018      	str	r0, [r3, #0]
	if (!strncmp((const char *)pcParameterString1, "momentary-no", xParameterStringLength1)) {
 8006eb6:	9b03      	ldr	r3, [sp, #12]
 8006eb8:	4698      	mov	r8, r3
 8006eba:	001a      	movs	r2, r3
 8006ebc:	4923      	ldr	r1, [pc, #140]	; (8006f4c <addbuttonCommand+0xbc>)
 8006ebe:	f00d fdc4 	bl	8014a4a <strncmp>
		type = MOMENTARY_NO;
 8006ec2:	2401      	movs	r4, #1
	if (!strncmp((const char *)pcParameterString1, "momentary-no", xParameterStringLength1)) {
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	d017      	beq.n	8006ef8 <addbuttonCommand+0x68>
	} else if (!strncmp((const char *)pcParameterString1, "momentary-nc", xParameterStringLength1)) {
 8006ec8:	4642      	mov	r2, r8
 8006eca:	4921      	ldr	r1, [pc, #132]	; (8006f50 <addbuttonCommand+0xc0>)
 8006ecc:	0028      	movs	r0, r5
 8006ece:	f00d fdbc 	bl	8014a4a <strncmp>
		type = MOMENTARY_NC;
 8006ed2:	3401      	adds	r4, #1
	} else if (!strncmp((const char *)pcParameterString1, "momentary-nc", xParameterStringLength1)) {
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	d00f      	beq.n	8006ef8 <addbuttonCommand+0x68>
	} else if (!strncmp((const char *)pcParameterString1, "onoff-no", xParameterStringLength1)) {
 8006ed8:	4642      	mov	r2, r8
 8006eda:	491e      	ldr	r1, [pc, #120]	; (8006f54 <addbuttonCommand+0xc4>)
 8006edc:	0028      	movs	r0, r5
 8006ede:	f00d fdb4 	bl	8014a4a <strncmp>
		type = ONOFF_NO;
 8006ee2:	3401      	adds	r4, #1
	} else if (!strncmp((const char *)pcParameterString1, "onoff-no", xParameterStringLength1)) {
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	d007      	beq.n	8006ef8 <addbuttonCommand+0x68>
	} else if (!strncmp((const char *)pcParameterString1, "onoff-nc", xParameterStringLength1)) {
 8006ee8:	4642      	mov	r2, r8
 8006eea:	491b      	ldr	r1, [pc, #108]	; (8006f58 <addbuttonCommand+0xc8>)
 8006eec:	0028      	movs	r0, r5
 8006eee:	f00d fdac 	bl	8014a4a <strncmp>
		type = ONOFF_NC;
 8006ef2:	4244      	negs	r4, r0
 8006ef4:	4144      	adcs	r4, r0
 8006ef6:	00a4      	lsls	r4, r4, #2
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006ef8:	aa02      	add	r2, sp, #8
 8006efa:	2102      	movs	r1, #2
 8006efc:	0038      	movs	r0, r7
 8006efe:	f007 ff25 	bl	800ed4c <FreeRTOS_CLIGetParameter>
	if (pcParameterString2[0] == 'p') {
 8006f02:	2300      	movs	r3, #0
 8006f04:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t port = 0, type = 0;
 8006f06:	2500      	movs	r5, #0
	if (pcParameterString2[0] == 'p') {
 8006f08:	2b70      	cmp	r3, #112	; 0x70
 8006f0a:	d00c      	beq.n	8006f26 <addbuttonCommand+0x96>
	result = AddPortButton(type, port);
 8006f0c:	0029      	movs	r1, r5
 8006f0e:	0020      	movs	r0, r4
 8006f10:	f001 fce4 	bl	80088dc <AddPortButton>
	if (result == BOS_OK) 
 8006f14:	2800      	cmp	r0, #0
 8006f16:	d00b      	beq.n	8006f30 <addbuttonCommand+0xa0>
}
 8006f18:	2000      	movs	r0, #0
 8006f1a:	b004      	add	sp, #16
 8006f1c:	bc80      	pop	{r7}
 8006f1e:	46b8      	mov	r8, r7
 8006f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 8006f22:	b672      	cpsid	i
 8006f24:	e7fe      	b.n	8006f24 <addbuttonCommand+0x94>
		port = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 8006f26:	3001      	adds	r0, #1
 8006f28:	f00d f8b9 	bl	801409e <atol>
 8006f2c:	b2c5      	uxtb	r5, r0
 8006f2e:	e7ed      	b.n	8006f0c <addbuttonCommand+0x7c>
		pcParameterString1[xParameterStringLength1] = 0;		// Get rid of the remaining parameters
 8006f30:	4b05      	ldr	r3, [pc, #20]	; (8006f48 <addbuttonCommand+0xb8>)
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	2300      	movs	r3, #0
 8006f36:	9903      	ldr	r1, [sp, #12]
 8006f38:	5453      	strb	r3, [r2, r1]
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, pcParameterString1, port, port);
 8006f3a:	9500      	str	r5, [sp, #0]
 8006f3c:	002b      	movs	r3, r5
 8006f3e:	4907      	ldr	r1, [pc, #28]	; (8006f5c <addbuttonCommand+0xcc>)
 8006f40:	0030      	movs	r0, r6
 8006f42:	f00d fd3f 	bl	80149c4 <sprintf>
 8006f46:	e7e7      	b.n	8006f18 <addbuttonCommand+0x88>
 8006f48:	20000fc4 	.word	0x20000fc4
 8006f4c:	0801bbb0 	.word	0x0801bbb0
 8006f50:	0801bbc0 	.word	0x0801bbc0
 8006f54:	0801bbd0 	.word	0x0801bbd0
 8006f58:	0801bbdc 	.word	0x0801bbdc
 8006f5c:	0801bbe8 	.word	0x0801bbe8

08006f60 <scastCommand>:
{
 8006f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f62:	46de      	mov	lr, fp
 8006f64:	4657      	mov	r7, sl
 8006f66:	464e      	mov	r6, r9
 8006f68:	4645      	mov	r5, r8
 8006f6a:	b5e0      	push	{r5, r6, r7, lr}
 8006f6c:	b099      	sub	sp, #100	; 0x64
 8006f6e:	0006      	movs	r6, r0
 8006f70:	9007      	str	r0, [sp, #28]
 8006f72:	0014      	movs	r4, r2
	portBASE_TYPE xParameterStringLength1 = 0, xParameterStringLength2 = 0, xParameterStringLength3 = 0; 
 8006f74:	2500      	movs	r5, #0
 8006f76:	9517      	str	r5, [sp, #92]	; 0x5c
 8006f78:	9516      	str	r5, [sp, #88]	; 0x58
 8006f7a:	9515      	str	r5, [sp, #84]	; 0x54
	portBASE_TYPE xParameterStringLength4 = 0, xParameterStringLength5 = 0, xParameterStringLength6 = 0;
 8006f7c:	9514      	str	r5, [sp, #80]	; 0x50
 8006f7e:	9513      	str	r5, [sp, #76]	; 0x4c
 8006f80:	9512      	str	r5, [sp, #72]	; 0x48
	portBASE_TYPE xParameterStringLength7 = 0;
 8006f82:	9511      	str	r5, [sp, #68]	; 0x44
	char par1[MaxLengthOfAlias+1] = {0}, par2[MaxLengthOfAlias+1] = {0}, par3[MaxLengthOfAlias+1] = {0};
 8006f84:	950e      	str	r5, [sp, #56]	; 0x38
 8006f86:	2206      	movs	r2, #6
 8006f88:	2100      	movs	r1, #0
 8006f8a:	a80f      	add	r0, sp, #60	; 0x3c
 8006f8c:	f00d faf1 	bl	8014572 <memset>
 8006f90:	950b      	str	r5, [sp, #44]	; 0x2c
 8006f92:	2206      	movs	r2, #6
 8006f94:	2100      	movs	r1, #0
 8006f96:	a80c      	add	r0, sp, #48	; 0x30
 8006f98:	f00d faeb 	bl	8014572 <memset>
 8006f9c:	9508      	str	r5, [sp, #32]
 8006f9e:	2206      	movs	r2, #6
 8006fa0:	2100      	movs	r1, #0
 8006fa2:	a809      	add	r0, sp, #36	; 0x24
 8006fa4:	f00d fae5 	bl	8014572 <memset>
	configASSERT( pcWriteBuffer );
 8006fa8:	2e00      	cmp	r6, #0
 8006faa:	d100      	bne.n	8006fae <scastCommand+0x4e>
 8006fac:	e07c      	b.n	80070a8 <scastCommand+0x148>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8006fae:	aa17      	add	r2, sp, #92	; 0x5c
 8006fb0:	2101      	movs	r1, #1
 8006fb2:	0020      	movs	r0, r4
 8006fb4:	f007 feca 	bl	800ed4c <FreeRTOS_CLIGetParameter>
	if (pcParameterString1[0] == 'P') {
 8006fb8:	2300      	movs	r3, #0
 8006fba:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 8006fbc:	2700      	movs	r7, #0
	if (pcParameterString1[0] == 'P') {
 8006fbe:	2b50      	cmp	r3, #80	; 0x50
 8006fc0:	d100      	bne.n	8006fc4 <scastCommand+0x64>
 8006fc2:	e073      	b.n	80070ac <scastCommand+0x14c>
	pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8006fc4:	aa16      	add	r2, sp, #88	; 0x58
 8006fc6:	2102      	movs	r1, #2
 8006fc8:	0020      	movs	r0, r4
 8006fca:	f007 febf 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 8006fce:	0001      	movs	r1, r0
	strncpy(par1, ( char * ) pcParameterString2, xParameterStringLength2);
 8006fd0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006fd2:	a80e      	add	r0, sp, #56	; 0x38
 8006fd4:	f00d fd4a 	bl	8014a6c <strncpy>
	srcM = (uint8_t) GetID(par1);
 8006fd8:	a80e      	add	r0, sp, #56	; 0x38
 8006fda:	f7fd fbb9 	bl	8004750 <GetID>
 8006fde:	b2c3      	uxtb	r3, r0
 8006fe0:	469b      	mov	fp, r3
	pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 8006fe2:	aa15      	add	r2, sp, #84	; 0x54
 8006fe4:	2103      	movs	r1, #3
 8006fe6:	0020      	movs	r0, r4
 8006fe8:	f007 feb0 	bl	800ed4c <FreeRTOS_CLIGetParameter>
	if (pcParameterString3[0] == 'p') {
 8006fec:	2300      	movs	r3, #0
 8006fee:	56c3      	ldrsb	r3, [r0, r3]
	uint8_t direction = 0, srcP = 0, dstP = 0, srcM = 0, dstM = 0; uint32_t count = 0, timeout = 0;
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	4690      	mov	r8, r2
	if (pcParameterString3[0] == 'p') {
 8006ff4:	2b70      	cmp	r3, #112	; 0x70
 8006ff6:	d05e      	beq.n	80070b6 <scastCommand+0x156>
	pcParameterString4 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 4, &xParameterStringLength4);
 8006ff8:	aa14      	add	r2, sp, #80	; 0x50
 8006ffa:	2104      	movs	r1, #4
 8006ffc:	0020      	movs	r0, r4
 8006ffe:	f007 fea5 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 8007002:	0001      	movs	r1, r0
	strncpy(par2, ( char * ) pcParameterString4, xParameterStringLength4);
 8007004:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007006:	a80b      	add	r0, sp, #44	; 0x2c
 8007008:	f00d fd30 	bl	8014a6c <strncpy>
	dstM = (uint8_t) GetID(par2);
 800700c:	a80b      	add	r0, sp, #44	; 0x2c
 800700e:	f7fd fb9f 	bl	8004750 <GetID>
 8007012:	b2c3      	uxtb	r3, r0
 8007014:	4699      	mov	r9, r3
	pcParameterString5 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 5, &xParameterStringLength5);
 8007016:	aa13      	add	r2, sp, #76	; 0x4c
 8007018:	2105      	movs	r1, #5
 800701a:	0020      	movs	r0, r4
 800701c:	f007 fe96 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 8007020:	0006      	movs	r6, r0
	if (!strncmp((const char *)pcParameterString5, "forward", xParameterStringLength5))
 8007022:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007024:	469a      	mov	sl, r3
 8007026:	001a      	movs	r2, r3
 8007028:	492d      	ldr	r1, [pc, #180]	; (80070e0 <scastCommand+0x180>)
 800702a:	f00d fd0e 	bl	8014a4a <strncmp>
		direction = FORWARD;
 800702e:	2500      	movs	r5, #0
	if (!strncmp((const char *)pcParameterString5, "forward", xParameterStringLength5))
 8007030:	2800      	cmp	r0, #0
 8007032:	d00f      	beq.n	8007054 <scastCommand+0xf4>
	else if (!strncmp(( const char *)pcParameterString5, "backward", xParameterStringLength5))
 8007034:	4652      	mov	r2, sl
 8007036:	492b      	ldr	r1, [pc, #172]	; (80070e4 <scastCommand+0x184>)
 8007038:	0030      	movs	r0, r6
 800703a:	f00d fd06 	bl	8014a4a <strncmp>
		direction = BACKWARD;
 800703e:	3501      	adds	r5, #1
	else if (!strncmp(( const char *)pcParameterString5, "backward", xParameterStringLength5))
 8007040:	2800      	cmp	r0, #0
 8007042:	d007      	beq.n	8007054 <scastCommand+0xf4>
	else if (!strncmp((const char *)pcParameterString5, "bidirectional", xParameterStringLength5))
 8007044:	4652      	mov	r2, sl
 8007046:	4928      	ldr	r1, [pc, #160]	; (80070e8 <scastCommand+0x188>)
 8007048:	0030      	movs	r0, r6
 800704a:	f00d fcfe 	bl	8014a4a <strncmp>
		direction = BIDIRECTIONAL;
 800704e:	4245      	negs	r5, r0
 8007050:	4145      	adcs	r5, r0
 8007052:	006d      	lsls	r5, r5, #1
	strncpy(par3, ( char * ) pcParameterString5, xParameterStringLength5);
 8007054:	4652      	mov	r2, sl
 8007056:	0031      	movs	r1, r6
 8007058:	a808      	add	r0, sp, #32
 800705a:	f00d fd07 	bl	8014a6c <strncpy>
	pcParameterString6 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 6, &xParameterStringLength6);
 800705e:	aa12      	add	r2, sp, #72	; 0x48
 8007060:	2106      	movs	r1, #6
 8007062:	0020      	movs	r0, r4
 8007064:	f007 fe72 	bl	800ed4c <FreeRTOS_CLIGetParameter>
	count = ( uint32_t ) atol( ( char * ) pcParameterString6 );
 8007068:	f00d f819 	bl	801409e <atol>
 800706c:	0006      	movs	r6, r0
	pcParameterString7 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 7, &xParameterStringLength7);
 800706e:	aa11      	add	r2, sp, #68	; 0x44
 8007070:	2107      	movs	r1, #7
 8007072:	0020      	movs	r0, r4
 8007074:	f007 fe6a 	bl	800ed4c <FreeRTOS_CLIGetParameter>
	timeout = ( uint32_t ) atol( ( char * ) pcParameterString7 );
 8007078:	f00d f811 	bl	801409e <atol>
 800707c:	0004      	movs	r4, r0
	result = StartScastDMAStream(srcP, srcM, dstP, dstM, direction, count, timeout, false);
 800707e:	2300      	movs	r3, #0
 8007080:	9303      	str	r3, [sp, #12]
 8007082:	9002      	str	r0, [sp, #8]
 8007084:	9601      	str	r6, [sp, #4]
 8007086:	9500      	str	r5, [sp, #0]
 8007088:	464b      	mov	r3, r9
 800708a:	4642      	mov	r2, r8
 800708c:	4659      	mov	r1, fp
 800708e:	0038      	movs	r0, r7
 8007090:	f002 fa6e 	bl	8009570 <StartScastDMAStream>
	if (result == BOS_OK) 
 8007094:	2800      	cmp	r0, #0
 8007096:	d014      	beq.n	80070c2 <scastCommand+0x162>
}
 8007098:	2000      	movs	r0, #0
 800709a:	b019      	add	sp, #100	; 0x64
 800709c:	bcf0      	pop	{r4, r5, r6, r7}
 800709e:	46bb      	mov	fp, r7
 80070a0:	46b2      	mov	sl, r6
 80070a2:	46a9      	mov	r9, r5
 80070a4:	46a0      	mov	r8, r4
 80070a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 80070a8:	b672      	cpsid	i
 80070aa:	e7fe      	b.n	80070aa <scastCommand+0x14a>
		srcP = ( uint8_t ) atol( ( char * ) pcParameterString1+1 );
 80070ac:	3001      	adds	r0, #1
 80070ae:	f00c fff6 	bl	801409e <atol>
 80070b2:	b2c7      	uxtb	r7, r0
 80070b4:	e786      	b.n	8006fc4 <scastCommand+0x64>
		dstP = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 80070b6:	3001      	adds	r0, #1
 80070b8:	f00c fff1 	bl	801409e <atol>
 80070bc:	b2c3      	uxtb	r3, r0
 80070be:	4698      	mov	r8, r3
 80070c0:	e79a      	b.n	8006ff8 <scastCommand+0x98>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, par3, srcP, par1, dstP, par2, count, timeout);
 80070c2:	9404      	str	r4, [sp, #16]
 80070c4:	9603      	str	r6, [sp, #12]
 80070c6:	ab0b      	add	r3, sp, #44	; 0x2c
 80070c8:	9302      	str	r3, [sp, #8]
 80070ca:	4643      	mov	r3, r8
 80070cc:	9301      	str	r3, [sp, #4]
 80070ce:	ab0e      	add	r3, sp, #56	; 0x38
 80070d0:	9300      	str	r3, [sp, #0]
 80070d2:	003b      	movs	r3, r7
 80070d4:	aa08      	add	r2, sp, #32
 80070d6:	4905      	ldr	r1, [pc, #20]	; (80070ec <scastCommand+0x18c>)
 80070d8:	9807      	ldr	r0, [sp, #28]
 80070da:	f00d fc73 	bl	80149c4 <sprintf>
 80070de:	e7db      	b.n	8007098 <scastCommand+0x138>
 80070e0:	0801bc1c 	.word	0x0801bc1c
 80070e4:	0801bc24 	.word	0x0801bc24
 80070e8:	0801bc30 	.word	0x0801bc30
 80070ec:	0801bc40 	.word	0x0801bc40

080070f0 <infoCommand>:
{
 80070f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070f2:	b083      	sub	sp, #12
 80070f4:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 80070f6:	d036      	beq.n	8007166 <infoCommand+0x76>
	if (N > 1)
 80070f8:	4b27      	ldr	r3, [pc, #156]	; (8007198 <infoCommand+0xa8>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
	BOS_Status result = BOS_OK; 
 80070fc:	2500      	movs	r5, #0
	if (N > 1)
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d833      	bhi.n	800716a <infoCommand+0x7a>
	sprintf( ( char * ) pcWriteBuffer, "\n\rNumber of modules: %d\n", N);
 8007102:	4b25      	ldr	r3, [pc, #148]	; (8007198 <infoCommand+0xa8>)
 8007104:	781a      	ldrb	r2, [r3, #0]
 8007106:	4925      	ldr	r1, [pc, #148]	; (800719c <infoCommand+0xac>)
 8007108:	0020      	movs	r0, r4
 800710a:	f00d fc5b 	bl	80149c4 <sprintf>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 800710e:	0020      	movs	r0, r4
 8007110:	f7f9 f802 	bl	8000118 <strlen>
 8007114:	b282      	uxth	r2, r0
 8007116:	4e22      	ldr	r6, [pc, #136]	; (80071a0 <infoCommand+0xb0>)
 8007118:	7830      	ldrb	r0, [r6, #0]
 800711a:	2701      	movs	r7, #1
 800711c:	427f      	negs	r7, r7
 800711e:	9700      	str	r7, [sp, #0]
 8007120:	2332      	movs	r3, #50	; 0x32
 8007122:	0021      	movs	r1, r4
 8007124:	f006 ffc0 	bl	800e0a8 <writePxMutex>
	sprintf( ( char * ) pcWriteBuffer, "\n\rArray topology:\n");
 8007128:	2213      	movs	r2, #19
 800712a:	491e      	ldr	r1, [pc, #120]	; (80071a4 <infoCommand+0xb4>)
 800712c:	0020      	movs	r0, r4
 800712e:	f00d fa17 	bl	8014560 <memcpy>
	writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 8007132:	0020      	movs	r0, r4
 8007134:	f7f8 fff0 	bl	8000118 <strlen>
 8007138:	b282      	uxth	r2, r0
 800713a:	7830      	ldrb	r0, [r6, #0]
 800713c:	9700      	str	r7, [sp, #0]
 800713e:	2332      	movs	r3, #50	; 0x32
 8007140:	0021      	movs	r1, r4
 8007142:	f006 ffb1 	bl	800e0a8 <writePxMutex>
	DisplayTopology(PcPort);
 8007146:	7830      	ldrb	r0, [r6, #0]
 8007148:	f7fd f846 	bl	80041d8 <DisplayTopology>
	DisplayPortsDir(PcPort);
 800714c:	7830      	ldrb	r0, [r6, #0]
 800714e:	f7fd f91f 	bl	8004390 <DisplayPortsDir>
	if (result == BOS_ERR_NoResponse) {
 8007152:	2d02      	cmp	r5, #2
 8007154:	d00d      	beq.n	8007172 <infoCommand+0x82>
	sprintf( ( char * ) pcWriteBuffer, " ");
 8007156:	2202      	movs	r2, #2
 8007158:	4913      	ldr	r1, [pc, #76]	; (80071a8 <infoCommand+0xb8>)
 800715a:	0020      	movs	r0, r4
 800715c:	f00d fa00 	bl	8014560 <memcpy>
}
 8007160:	2000      	movs	r0, #0
 8007162:	b003      	add	sp, #12
 8007164:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 8007166:	b672      	cpsid	i
 8007168:	e7fe      	b.n	8007168 <infoCommand+0x78>
		result = ReadPortsDir();
 800716a:	f7fd fc3b 	bl	80049e4 <ReadPortsDir>
 800716e:	0005      	movs	r5, r0
 8007170:	e7c7      	b.n	8007102 <infoCommand+0x12>
		sprintf( ( char * ) pcWriteBuffer, "Could not read ports direction for some modules! Please try again\n\r");
 8007172:	2244      	movs	r2, #68	; 0x44
 8007174:	490d      	ldr	r1, [pc, #52]	; (80071ac <infoCommand+0xbc>)
 8007176:	0020      	movs	r0, r4
 8007178:	f00d f9f2 	bl	8014560 <memcpy>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);		
 800717c:	0020      	movs	r0, r4
 800717e:	f7f8 ffcb 	bl	8000118 <strlen>
 8007182:	b282      	uxth	r2, r0
 8007184:	4b06      	ldr	r3, [pc, #24]	; (80071a0 <infoCommand+0xb0>)
 8007186:	7818      	ldrb	r0, [r3, #0]
 8007188:	003b      	movs	r3, r7
 800718a:	9700      	str	r7, [sp, #0]
 800718c:	3333      	adds	r3, #51	; 0x33
 800718e:	0021      	movs	r1, r4
 8007190:	f006 ff8a 	bl	800e0a8 <writePxMutex>
 8007194:	e7df      	b.n	8007156 <infoCommand+0x66>
 8007196:	46c0      	nop			; (mov r8, r8)
 8007198:	2000001c 	.word	0x2000001c
 800719c:	0801bcc8 	.word	0x0801bcc8
 80071a0:	20000b67 	.word	0x20000b67
 80071a4:	0801bce4 	.word	0x0801bce4
 80071a8:	0801aa60 	.word	0x0801aa60
 80071ac:	0801bcf8 	.word	0x0801bcf8

080071b0 <statusCommand>:
{
 80071b0:	b510      	push	{r4, lr}
	configASSERT( pcWriteBuffer );
 80071b2:	2800      	cmp	r0, #0
 80071b4:	d004      	beq.n	80071c0 <statusCommand+0x10>
	DisplayModuleStatus(0);
 80071b6:	2000      	movs	r0, #0
 80071b8:	f7fd f960 	bl	800447c <DisplayModuleStatus>
}
 80071bc:	2000      	movs	r0, #0
 80071be:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 80071c0:	b672      	cpsid	i
 80071c2:	e7fe      	b.n	80071c2 <statusCommand+0x12>

080071c4 <groupCommand>:
{
 80071c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071c6:	46ce      	mov	lr, r9
 80071c8:	4647      	mov	r7, r8
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b08f      	sub	sp, #60	; 0x3c
 80071ce:	0004      	movs	r4, r0
 80071d0:	0016      	movs	r6, r2
	char module[MaxLengthOfAlias+30] = {0}; int16_t modID = 0, type = 0; char alias[MaxLengthOfAlias+1] = {0};
 80071d2:	2500      	movs	r5, #0
 80071d4:	9504      	str	r5, [sp, #16]
 80071d6:	2223      	movs	r2, #35	; 0x23
 80071d8:	2100      	movs	r1, #0
 80071da:	a805      	add	r0, sp, #20
 80071dc:	f00d f9c9 	bl	8014572 <memset>
 80071e0:	9501      	str	r5, [sp, #4]
 80071e2:	2206      	movs	r2, #6
 80071e4:	2100      	movs	r1, #0
 80071e6:	a802      	add	r0, sp, #8
 80071e8:	f00d f9c3 	bl	8014572 <memset>
	configASSERT( pcWriteBuffer );
 80071ec:	2c00      	cmp	r4, #0
 80071ee:	d02c      	beq.n	800724a <groupCommand+0x86>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 80071f0:	4d56      	ldr	r5, [pc, #344]	; (800734c <groupCommand+0x188>)
 80071f2:	002a      	movs	r2, r5
 80071f4:	2101      	movs	r1, #1
 80071f6:	0030      	movs	r0, r6
 80071f8:	f007 fda8 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 80071fc:	0001      	movs	r1, r0
	strncpy( alias, ( char * ) pcParameterString1, xParameterStringLength1);
 80071fe:	682a      	ldr	r2, [r5, #0]
 8007200:	a801      	add	r0, sp, #4
 8007202:	f00d fc33 	bl	8014a6c <strncpy>
	for(uint8_t i=0 ; i<MaxNumOfGroups ; i++)
 8007206:	4d52      	ldr	r5, [pc, #328]	; (8007350 <groupCommand+0x18c>)
 8007208:	002f      	movs	r7, r5
 800720a:	3764      	adds	r7, #100	; 0x64
		if (!strcmp(alias, groupAlias[i]))	
 800720c:	0029      	movs	r1, r5
 800720e:	a801      	add	r0, sp, #4
 8007210:	f7f8 ff78 	bl	8000104 <strcmp>
 8007214:	2800      	cmp	r0, #0
 8007216:	d01a      	beq.n	800724e <groupCommand+0x8a>
	for(uint8_t i=0 ; i<MaxNumOfGroups ; i++)
 8007218:	350a      	adds	r5, #10
 800721a:	42af      	cmp	r7, r5
 800721c:	d1f6      	bne.n	800720c <groupCommand+0x48>
	type = 1;
 800721e:	2701      	movs	r7, #1
	count = 2;
 8007220:	4b4c      	ldr	r3, [pc, #304]	; (8007354 <groupCommand+0x190>)
 8007222:	2202      	movs	r2, #2
 8007224:	701a      	strb	r2, [r3, #0]
	strcpy( ( char * ) pcWriteBuffer, "Modules [");
 8007226:	3208      	adds	r2, #8
 8007228:	494b      	ldr	r1, [pc, #300]	; (8007358 <groupCommand+0x194>)
 800722a:	0020      	movs	r0, r4
 800722c:	f00d f998 	bl	8014560 <memcpy>
	pcParameterString = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, count, &xParameterStringLength);
 8007230:	4a4a      	ldr	r2, [pc, #296]	; (800735c <groupCommand+0x198>)
 8007232:	2102      	movs	r1, #2
 8007234:	0030      	movs	r0, r6
 8007236:	f007 fd89 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 800723a:	1e01      	subs	r1, r0, #0
 800723c:	4b48      	ldr	r3, [pc, #288]	; (8007360 <groupCommand+0x19c>)
 800723e:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL)
 8007240:	d100      	bne.n	8007244 <groupCommand+0x80>
 8007242:	e072      	b.n	800732a <groupCommand+0x166>
		strncpy(module, ( char * ) pcParameterString, xParameterStringLength); module[xParameterStringLength] = '\0';
 8007244:	4b45      	ldr	r3, [pc, #276]	; (800735c <groupCommand+0x198>)
 8007246:	4698      	mov	r8, r3
 8007248:	e024      	b.n	8007294 <groupCommand+0xd0>
	configASSERT( pcWriteBuffer );
 800724a:	b672      	cpsid	i
 800724c:	e7fe      	b.n	800724c <groupCommand+0x88>
			type = 0; break;
 800724e:	2700      	movs	r7, #0
 8007250:	e7e6      	b.n	8007220 <groupCommand+0x5c>
	else if (count == 2)
 8007252:	4b40      	ldr	r3, [pc, #256]	; (8007354 <groupCommand+0x190>)
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	b25b      	sxtb	r3, r3
 8007258:	2b02      	cmp	r3, #2
 800725a:	d03f      	beq.n	80072dc <groupCommand+0x118>
	} else if (result == BOS_ERR_Keyword)
 800725c:	2806      	cmp	r0, #6
 800725e:	d04d      	beq.n	80072fc <groupCommand+0x138>
	else if (result == BOS_ERR_ExistingAlias)
 8007260:	2807      	cmp	r0, #7
 8007262:	d051      	beq.n	8007308 <groupCommand+0x144>
	else if (result == BOS_ERR_ExistingCmd)
 8007264:	2808      	cmp	r0, #8
 8007266:	d15a      	bne.n	800731e <groupCommand+0x15a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmd, alias);	
 8007268:	aa01      	add	r2, sp, #4
 800726a:	493e      	ldr	r1, [pc, #248]	; (8007364 <groupCommand+0x1a0>)
 800726c:	0020      	movs	r0, r4
 800726e:	f00d fba9 	bl	80149c4 <sprintf>
 8007272:	e054      	b.n	800731e <groupCommand+0x15a>
		strcat( ( char * ) pcWriteBuffer, module);
 8007274:	a904      	add	r1, sp, #16
 8007276:	0020      	movs	r0, r4
 8007278:	f00d fbc4 	bl	8014a04 <strcat>
		pcParameterString = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, ++count, &xParameterStringLength);	
 800727c:	1c69      	adds	r1, r5, #1
 800727e:	b249      	sxtb	r1, r1
 8007280:	4b34      	ldr	r3, [pc, #208]	; (8007354 <groupCommand+0x190>)
 8007282:	7019      	strb	r1, [r3, #0]
 8007284:	4a35      	ldr	r2, [pc, #212]	; (800735c <groupCommand+0x198>)
 8007286:	0030      	movs	r0, r6
 8007288:	f007 fd60 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 800728c:	1e01      	subs	r1, r0, #0
 800728e:	4b34      	ldr	r3, [pc, #208]	; (8007360 <groupCommand+0x19c>)
 8007290:	6018      	str	r0, [r3, #0]
	while (pcParameterString != NULL)
 8007292:	d04a      	beq.n	800732a <groupCommand+0x166>
		strncpy(module, ( char * ) pcParameterString, xParameterStringLength); module[xParameterStringLength] = '\0';
 8007294:	4643      	mov	r3, r8
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4699      	mov	r9, r3
 800729a:	ad04      	add	r5, sp, #16
 800729c:	001a      	movs	r2, r3
 800729e:	0028      	movs	r0, r5
 80072a0:	f00d fbe4 	bl	8014a6c <strncpy>
 80072a4:	2300      	movs	r3, #0
 80072a6:	464a      	mov	r2, r9
 80072a8:	54ab      	strb	r3, [r5, r2]
		modID = GetID(module);
 80072aa:	0028      	movs	r0, r5
 80072ac:	f7fd fa50 	bl	8004750 <GetID>
		if (modID < 0)	break;
 80072b0:	2800      	cmp	r0, #0
 80072b2:	db2f      	blt.n	8007314 <groupCommand+0x150>
		result = AddModuleToGroup(modID, alias);
 80072b4:	b2c0      	uxtb	r0, r0
 80072b6:	a901      	add	r1, sp, #4
 80072b8:	f7fd fb12 	bl	80048e0 <AddModuleToGroup>
		if (result != BOS_OK)	break;
 80072bc:	2800      	cmp	r0, #0
 80072be:	d1c8      	bne.n	8007252 <groupCommand+0x8e>
		if (count > 2)
 80072c0:	4b24      	ldr	r3, [pc, #144]	; (8007354 <groupCommand+0x190>)
 80072c2:	2500      	movs	r5, #0
 80072c4:	575d      	ldrsb	r5, [r3, r5]
 80072c6:	2d02      	cmp	r5, #2
 80072c8:	ddd4      	ble.n	8007274 <groupCommand+0xb0>
			strcat( ( char * ) pcWriteBuffer, ", "); 
 80072ca:	0020      	movs	r0, r4
 80072cc:	f7f8 ff24 	bl	8000118 <strlen>
 80072d0:	1820      	adds	r0, r4, r0
 80072d2:	2203      	movs	r2, #3
 80072d4:	4924      	ldr	r1, [pc, #144]	; (8007368 <groupCommand+0x1a4>)
 80072d6:	f00d f943 	bl	8014560 <memcpy>
 80072da:	e7cb      	b.n	8007274 <groupCommand+0xb0>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageNoModules, alias);
 80072dc:	aa01      	add	r2, sp, #4
 80072de:	4923      	ldr	r1, [pc, #140]	; (800736c <groupCommand+0x1a8>)
 80072e0:	0020      	movs	r0, r4
 80072e2:	f00d fb6f 	bl	80149c4 <sprintf>
 80072e6:	e01a      	b.n	800731e <groupCommand+0x15a>
		sprintf( module, ( char * ) pcMessageOKnew, alias); 
 80072e8:	aa01      	add	r2, sp, #4
 80072ea:	4921      	ldr	r1, [pc, #132]	; (8007370 <groupCommand+0x1ac>)
 80072ec:	a804      	add	r0, sp, #16
 80072ee:	f00d fb69 	bl	80149c4 <sprintf>
		strcat( ( char * ) pcWriteBuffer, module);
 80072f2:	a904      	add	r1, sp, #16
 80072f4:	0020      	movs	r0, r4
 80072f6:	f00d fb85 	bl	8014a04 <strcat>
 80072fa:	e010      	b.n	800731e <groupCommand+0x15a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageKey, alias);
 80072fc:	aa01      	add	r2, sp, #4
 80072fe:	491d      	ldr	r1, [pc, #116]	; (8007374 <groupCommand+0x1b0>)
 8007300:	0020      	movs	r0, r4
 8007302:	f00d fb5f 	bl	80149c4 <sprintf>
 8007306:	e00a      	b.n	800731e <groupCommand+0x15a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageAlias, alias);	
 8007308:	aa01      	add	r2, sp, #4
 800730a:	491b      	ldr	r1, [pc, #108]	; (8007378 <groupCommand+0x1b4>)
 800730c:	0020      	movs	r0, r4
 800730e:	f00d fb59 	bl	80149c4 <sprintf>
 8007312:	e004      	b.n	800731e <groupCommand+0x15a>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongModule, module);
 8007314:	aa04      	add	r2, sp, #16
 8007316:	4919      	ldr	r1, [pc, #100]	; (800737c <groupCommand+0x1b8>)
 8007318:	0020      	movs	r0, r4
 800731a:	f00d fb53 	bl	80149c4 <sprintf>
}
 800731e:	2000      	movs	r0, #0
 8007320:	b00f      	add	sp, #60	; 0x3c
 8007322:	bcc0      	pop	{r6, r7}
 8007324:	46b9      	mov	r9, r7
 8007326:	46b0      	mov	r8, r6
 8007328:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if (count == 2)
 800732a:	4b0a      	ldr	r3, [pc, #40]	; (8007354 <groupCommand+0x190>)
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	b25b      	sxtb	r3, r3
 8007330:	2b02      	cmp	r3, #2
 8007332:	d0d3      	beq.n	80072dc <groupCommand+0x118>
	else if (result == BOS_OK && type) {
 8007334:	2f00      	cmp	r7, #0
 8007336:	d1d7      	bne.n	80072e8 <groupCommand+0x124>
		sprintf( module, ( char * ) pcMessageOKexist, alias);
 8007338:	aa01      	add	r2, sp, #4
 800733a:	4911      	ldr	r1, [pc, #68]	; (8007380 <groupCommand+0x1bc>)
 800733c:	a804      	add	r0, sp, #16
 800733e:	f00d fb41 	bl	80149c4 <sprintf>
		strcat( ( char * ) pcWriteBuffer, module);
 8007342:	a904      	add	r1, sp, #16
 8007344:	0020      	movs	r0, r4
 8007346:	f00d fb5d 	bl	8014a04 <strcat>
 800734a:	e7e8      	b.n	800731e <groupCommand+0x15a>
 800734c:	20000ff4 	.word	0x20000ff4
 8007350:	20000cf8 	.word	0x20000cf8
 8007354:	20000fba 	.word	0x20000fba
 8007358:	0801bd3c 	.word	0x0801bd3c
 800735c:	20000fe8 	.word	0x20000fe8
 8007360:	20000fbc 	.word	0x20000fbc
 8007364:	0801be28 	.word	0x0801be28
 8007368:	0801bd48 	.word	0x0801bd48
 800736c:	0801bd4c 	.word	0x0801bd4c
 8007370:	0801bd78 	.word	0x0801bd78
 8007374:	0801bdb4 	.word	0x0801bdb4
 8007378:	0801bdf4 	.word	0x0801bdf4
 800737c:	0801be68 	.word	0x0801be68
 8007380:	0801bd94 	.word	0x0801bd94

08007384 <nameCommand>:
{
 8007384:	b570      	push	{r4, r5, r6, lr}
 8007386:	0004      	movs	r4, r0
 8007388:	0010      	movs	r0, r2
	configASSERT( pcWriteBuffer );
 800738a:	2c00      	cmp	r4, #0
 800738c:	d01a      	beq.n	80073c4 <nameCommand+0x40>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800738e:	4d1d      	ldr	r5, [pc, #116]	; (8007404 <nameCommand+0x80>)
 8007390:	002a      	movs	r2, r5
 8007392:	2101      	movs	r1, #1
 8007394:	f007 fcda 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 8007398:	0001      	movs	r1, r0
 800739a:	4b1b      	ldr	r3, [pc, #108]	; (8007408 <nameCommand+0x84>)
 800739c:	6018      	str	r0, [r3, #0]
	if (xParameterStringLength1 > MaxLengthOfAlias) {
 800739e:	682b      	ldr	r3, [r5, #0]
 80073a0:	2b09      	cmp	r3, #9
 80073a2:	dd01      	ble.n	80073a8 <nameCommand+0x24>
		pcParameterString1[MaxLengthOfAlias] = '\0';
 80073a4:	2300      	movs	r3, #0
 80073a6:	7243      	strb	r3, [r0, #9]
	result = NameModule(myID, (char*) pcParameterString1);
 80073a8:	4b18      	ldr	r3, [pc, #96]	; (800740c <nameCommand+0x88>)
 80073aa:	7818      	ldrb	r0, [r3, #0]
 80073ac:	f7fd fa34 	bl	8004818 <NameModule>
	if (result == BOS_OK)
 80073b0:	2800      	cmp	r0, #0
 80073b2:	d009      	beq.n	80073c8 <nameCommand+0x44>
	else if (result == BOS_ERR_Keyword)
 80073b4:	2806      	cmp	r0, #6
 80073b6:	d010      	beq.n	80073da <nameCommand+0x56>
	else if (result == BOS_ERR_ExistingAlias)
 80073b8:	2807      	cmp	r0, #7
 80073ba:	d015      	beq.n	80073e8 <nameCommand+0x64>
	else if (result == BOS_ERR_ExistingCmd)
 80073bc:	2808      	cmp	r0, #8
 80073be:	d01a      	beq.n	80073f6 <nameCommand+0x72>
}
 80073c0:	2000      	movs	r0, #0
 80073c2:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 80073c4:	b672      	cpsid	i
 80073c6:	e7fe      	b.n	80073c6 <nameCommand+0x42>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageOK, myID, pcParameterString1);
 80073c8:	4b0f      	ldr	r3, [pc, #60]	; (8007408 <nameCommand+0x84>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a0f      	ldr	r2, [pc, #60]	; (800740c <nameCommand+0x88>)
 80073ce:	7812      	ldrb	r2, [r2, #0]
 80073d0:	490f      	ldr	r1, [pc, #60]	; (8007410 <nameCommand+0x8c>)
 80073d2:	0020      	movs	r0, r4
 80073d4:	f00d faf6 	bl	80149c4 <sprintf>
 80073d8:	e7f2      	b.n	80073c0 <nameCommand+0x3c>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageKey, pcParameterString1);
 80073da:	4b0b      	ldr	r3, [pc, #44]	; (8007408 <nameCommand+0x84>)
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	490d      	ldr	r1, [pc, #52]	; (8007414 <nameCommand+0x90>)
 80073e0:	0020      	movs	r0, r4
 80073e2:	f00d faef 	bl	80149c4 <sprintf>
 80073e6:	e7eb      	b.n	80073c0 <nameCommand+0x3c>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageAlias, pcParameterString1);	
 80073e8:	4b07      	ldr	r3, [pc, #28]	; (8007408 <nameCommand+0x84>)
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	490a      	ldr	r1, [pc, #40]	; (8007418 <nameCommand+0x94>)
 80073ee:	0020      	movs	r0, r4
 80073f0:	f00d fae8 	bl	80149c4 <sprintf>
 80073f4:	e7e4      	b.n	80073c0 <nameCommand+0x3c>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessageCmd, pcParameterString1);	
 80073f6:	4b04      	ldr	r3, [pc, #16]	; (8007408 <nameCommand+0x84>)
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	4908      	ldr	r1, [pc, #32]	; (800741c <nameCommand+0x98>)
 80073fc:	0020      	movs	r0, r4
 80073fe:	f00d fae1 	bl	80149c4 <sprintf>
 8007402:	e7dd      	b.n	80073c0 <nameCommand+0x3c>
 8007404:	20000ff0 	.word	0x20000ff0
 8007408:	20000fc0 	.word	0x20000fc0
 800740c:	20000070 	.word	0x20000070
 8007410:	0801be8c 	.word	0x0801be8c
 8007414:	0801bdb4 	.word	0x0801bdb4
 8007418:	0801bdf4 	.word	0x0801bdf4
 800741c:	0801be28 	.word	0x0801be28

08007420 <bootloaderUpdateCommand>:
{
 8007420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007422:	46c6      	mov	lr, r8
 8007424:	b500      	push	{lr}
 8007426:	b082      	sub	sp, #8
 8007428:	0004      	movs	r4, r0
 800742a:	0017      	movs	r7, r2
 800742c:	2600      	movs	r6, #0
 800742e:	2500      	movs	r5, #0
	configASSERT( pcWriteBuffer );
 8007430:	2800      	cmp	r0, #0
 8007432:	d04f      	beq.n	80074d4 <bootloaderUpdateCommand+0xb4>
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 8007434:	4a4d      	ldr	r2, [pc, #308]	; (800756c <bootloaderUpdateCommand+0x14c>)
 8007436:	2101      	movs	r1, #1
 8007438:	0038      	movs	r0, r7
 800743a:	f007 fc87 	bl	800ed4c <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 == NULL)
 800743e:	2800      	cmp	r0, #0
 8007440:	d04a      	beq.n	80074d8 <bootloaderUpdateCommand+0xb8>
		if (!strncmp((const char *)pcParameterString1, "via", xParameterStringLength1)) 
 8007442:	4b4a      	ldr	r3, [pc, #296]	; (800756c <bootloaderUpdateCommand+0x14c>)
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	494a      	ldr	r1, [pc, #296]	; (8007570 <bootloaderUpdateCommand+0x150>)
 8007448:	f00d faff 	bl	8014a4a <strncmp>
 800744c:	2800      	cmp	r0, #0
 800744e:	d137      	bne.n	80074c0 <bootloaderUpdateCommand+0xa0>
			pcParameterString2 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 2, &xParameterStringLength2);
 8007450:	4a48      	ldr	r2, [pc, #288]	; (8007574 <bootloaderUpdateCommand+0x154>)
 8007452:	2102      	movs	r1, #2
 8007454:	0038      	movs	r0, r7
 8007456:	f007 fc79 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 800745a:	4b47      	ldr	r3, [pc, #284]	; (8007578 <bootloaderUpdateCommand+0x158>)
 800745c:	4698      	mov	r8, r3
 800745e:	6018      	str	r0, [r3, #0]
			pcParameterString3 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 3, &xParameterStringLength3);
 8007460:	4a46      	ldr	r2, [pc, #280]	; (800757c <bootloaderUpdateCommand+0x15c>)
 8007462:	2103      	movs	r1, #3
 8007464:	0038      	movs	r0, r7
 8007466:	f007 fc71 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 800746a:	4b45      	ldr	r3, [pc, #276]	; (8007580 <bootloaderUpdateCommand+0x160>)
 800746c:	6018      	str	r0, [r3, #0]
			if (pcParameterString2[0] == '#') {
 800746e:	4643      	mov	r3, r8
 8007470:	6818      	ldr	r0, [r3, #0]
 8007472:	2300      	movs	r3, #0
 8007474:	56c3      	ldrsb	r3, [r0, r3]
				result = BOS_ERR_WrongValue;				
 8007476:	2768      	movs	r7, #104	; 0x68
			if (pcParameterString2[0] == '#') {
 8007478:	2b23      	cmp	r3, #35	; 0x23
 800747a:	d057      	beq.n	800752c <bootloaderUpdateCommand+0x10c>
			if (pcParameterString3[0] == 'p') {
 800747c:	4b40      	ldr	r3, [pc, #256]	; (8007580 <bootloaderUpdateCommand+0x160>)
 800747e:	6818      	ldr	r0, [r3, #0]
 8007480:	2300      	movs	r3, #0
 8007482:	56c3      	ldrsb	r3, [r0, r3]
 8007484:	2b70      	cmp	r3, #112	; 0x70
 8007486:	d057      	beq.n	8007538 <bootloaderUpdateCommand+0x118>
				result = BOS_ERR_WrongValue;		
 8007488:	2768      	movs	r7, #104	; 0x68
			if (module != myID)
 800748a:	4b3e      	ldr	r3, [pc, #248]	; (8007584 <bootloaderUpdateCommand+0x164>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	42b3      	cmp	r3, r6
 8007490:	d057      	beq.n	8007542 <bootloaderUpdateCommand+0x122>
				BOS.response = BOS_RESPONSE_NONE;							
 8007492:	4b3d      	ldr	r3, [pc, #244]	; (8007588 <bootloaderUpdateCommand+0x168>)
 8007494:	2200      	movs	r2, #0
 8007496:	719a      	strb	r2, [r3, #6]
				messageParams[0] = port; SendMessageToModule(module, CODE_UPDATE_VIA_PORT, 1);
 8007498:	4b3c      	ldr	r3, [pc, #240]	; (800758c <bootloaderUpdateCommand+0x16c>)
 800749a:	701d      	strb	r5, [r3, #0]
 800749c:	3201      	adds	r2, #1
 800749e:	211a      	movs	r1, #26
 80074a0:	0030      	movs	r0, r6
 80074a2:	f002 f83f 	bl	8009524 <SendMessageToModule>
				osDelay(100);			
 80074a6:	2064      	movs	r0, #100	; 0x64
 80074a8:	f007 fb29 	bl	800eafe <osDelay>
				remoteBootloaderUpdate(myID, module, PcPort, port);	
 80074ac:	4b38      	ldr	r3, [pc, #224]	; (8007590 <bootloaderUpdateCommand+0x170>)
 80074ae:	781a      	ldrb	r2, [r3, #0]
 80074b0:	4b34      	ldr	r3, [pc, #208]	; (8007584 <bootloaderUpdateCommand+0x164>)
 80074b2:	7818      	ldrb	r0, [r3, #0]
 80074b4:	002b      	movs	r3, r5
 80074b6:	0031      	movs	r1, r6
 80074b8:	f7fc fe0c 	bl	80040d4 <remoteBootloaderUpdate>
	if (result == BOS_ERR_WrongValue) {
 80074bc:	2f68      	cmp	r7, #104	; 0x68
 80074be:	d104      	bne.n	80074ca <bootloaderUpdateCommand+0xaa>
		strcpy( ( char * ) pcWriteBuffer, ( char * ) pcMessageWrongValue );			
 80074c0:	220f      	movs	r2, #15
 80074c2:	4934      	ldr	r1, [pc, #208]	; (8007594 <bootloaderUpdateCommand+0x174>)
 80074c4:	0020      	movs	r0, r4
 80074c6:	f00d f84b 	bl	8014560 <memcpy>
}
 80074ca:	2000      	movs	r0, #0
 80074cc:	b002      	add	sp, #8
 80074ce:	bc80      	pop	{r7}
 80074d0:	46b8      	mov	r8, r7
 80074d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pcWriteBuffer );
 80074d4:	b672      	cpsid	i
 80074d6:	e7fe      	b.n	80074d6 <bootloaderUpdateCommand+0xb6>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage, myID);
 80074d8:	4b2a      	ldr	r3, [pc, #168]	; (8007584 <bootloaderUpdateCommand+0x164>)
 80074da:	781a      	ldrb	r2, [r3, #0]
 80074dc:	492e      	ldr	r1, [pc, #184]	; (8007598 <bootloaderUpdateCommand+0x178>)
 80074de:	0020      	movs	r0, r4
 80074e0:	f00d fa70 	bl	80149c4 <sprintf>
		strcat( ( char * ) pcWriteBuffer, ( char * ) pcBootloaderUpdateMessage );
 80074e4:	4b2d      	ldr	r3, [pc, #180]	; (800759c <bootloaderUpdateCommand+0x17c>)
 80074e6:	6819      	ldr	r1, [r3, #0]
 80074e8:	0020      	movs	r0, r4
 80074ea:	f00d fa8b 	bl	8014a04 <strcat>
		writePxMutex(PcPort, (char*) pcWriteBuffer, strlen((char*) pcWriteBuffer), cmd50ms, HAL_MAX_DELAY);
 80074ee:	0020      	movs	r0, r4
 80074f0:	f7f8 fe12 	bl	8000118 <strlen>
 80074f4:	b282      	uxth	r2, r0
 80074f6:	4b26      	ldr	r3, [pc, #152]	; (8007590 <bootloaderUpdateCommand+0x170>)
 80074f8:	7818      	ldrb	r0, [r3, #0]
 80074fa:	2301      	movs	r3, #1
 80074fc:	425b      	negs	r3, r3
 80074fe:	9300      	str	r3, [sp, #0]
 8007500:	3333      	adds	r3, #51	; 0x33
 8007502:	0021      	movs	r1, r4
 8007504:	f006 fdd0 	bl	800e0a8 <writePxMutex>
		*((unsigned long *)0x20007FF0) = 0xDEADBEEF;   
 8007508:	4b25      	ldr	r3, [pc, #148]	; (80075a0 <bootloaderUpdateCommand+0x180>)
 800750a:	4a26      	ldr	r2, [pc, #152]	; (80075a4 <bootloaderUpdateCommand+0x184>)
 800750c:	601a      	str	r2, [r3, #0]
		indMode = IND_PING;
 800750e:	4b26      	ldr	r3, [pc, #152]	; (80075a8 <bootloaderUpdateCommand+0x188>)
 8007510:	2201      	movs	r2, #1
 8007512:	701a      	strb	r2, [r3, #0]
		osDelay(10);
 8007514:	200a      	movs	r0, #10
 8007516:	f007 faf2 	bl	800eafe <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	4b23      	ldr	r3, [pc, #140]	; (80075ac <bootloaderUpdateCommand+0x18c>)
 8007520:	4a23      	ldr	r2, [pc, #140]	; (80075b0 <bootloaderUpdateCommand+0x190>)
 8007522:	60da      	str	r2, [r3, #12]
 8007524:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8007528:	46c0      	nop			; (mov r8, r8)
 800752a:	e7fd      	b.n	8007528 <bootloaderUpdateCommand+0x108>
				module = ( uint8_t ) atol( ( char * ) pcParameterString2+1 );
 800752c:	3001      	adds	r0, #1
 800752e:	f00c fdb6 	bl	801409e <atol>
 8007532:	b2c6      	uxtb	r6, r0
	uint8_t module, port; BOS_Status result = BOS_OK;
 8007534:	2700      	movs	r7, #0
 8007536:	e7a1      	b.n	800747c <bootloaderUpdateCommand+0x5c>
				port = ( uint8_t ) atol( ( char * ) pcParameterString3+1 );
 8007538:	3001      	adds	r0, #1
 800753a:	f00c fdb0 	bl	801409e <atol>
 800753e:	b2c5      	uxtb	r5, r0
 8007540:	e7a3      	b.n	800748a <bootloaderUpdateCommand+0x6a>
				SendMessageFromPort(port, 0, 0, CODE_UPDATE, 0);
 8007542:	2300      	movs	r3, #0
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	3319      	adds	r3, #25
 8007548:	2200      	movs	r2, #0
 800754a:	2100      	movs	r1, #0
 800754c:	0028      	movs	r0, r5
 800754e:	f001 fdc1 	bl	80090d4 <SendMessageFromPort>
				osDelay(100);
 8007552:	2064      	movs	r0, #100	; 0x64
 8007554:	f007 fad3 	bl	800eafe <osDelay>
				remoteBootloaderUpdate(myID, myID, PcPort, port);							
 8007558:	4b0a      	ldr	r3, [pc, #40]	; (8007584 <bootloaderUpdateCommand+0x164>)
 800755a:	7818      	ldrb	r0, [r3, #0]
 800755c:	4b0c      	ldr	r3, [pc, #48]	; (8007590 <bootloaderUpdateCommand+0x170>)
 800755e:	781a      	ldrb	r2, [r3, #0]
 8007560:	002b      	movs	r3, r5
 8007562:	0001      	movs	r1, r0
 8007564:	f7fc fdb6 	bl	80040d4 <remoteBootloaderUpdate>
 8007568:	e7a8      	b.n	80074bc <bootloaderUpdateCommand+0x9c>
 800756a:	46c0      	nop			; (mov r8, r8)
 800756c:	20000fec 	.word	0x20000fec
 8007570:	0801bec4 	.word	0x0801bec4
 8007574:	20000ff8 	.word	0x20000ff8
 8007578:	20000fd0 	.word	0x20000fd0
 800757c:	20000ffc 	.word	0x20000ffc
 8007580:	20000fd8 	.word	0x20000fd8
 8007584:	20000070 	.word	0x20000070
 8007588:	200066e4 	.word	0x200066e4
 800758c:	20000da4 	.word	0x20000da4
 8007590:	20000b67 	.word	0x20000b67
 8007594:	0801b950 	.word	0x0801b950
 8007598:	0801bea4 	.word	0x0801bea4
 800759c:	20000094 	.word	0x20000094
 80075a0:	20007ff0 	.word	0x20007ff0
 80075a4:	deadbeef 	.word	0xdeadbeef
 80075a8:	20000d60 	.word	0x20000d60
 80075ac:	e000ed00 	.word	0xe000ed00
 80075b0:	05fa0004 	.word	0x05fa0004

080075b4 <pingCommand>:
{
 80075b4:	b570      	push	{r4, r5, r6, lr}
	configASSERT( pcWriteBuffer );
 80075b6:	2800      	cmp	r0, #0
 80075b8:	d01e      	beq.n	80075f8 <pingCommand+0x44>
	if (!moduleAlias[myID][0])
 80075ba:	4b15      	ldr	r3, [pc, #84]	; (8007610 <pingCommand+0x5c>)
 80075bc:	781a      	ldrb	r2, [r3, #0]
 80075be:	0093      	lsls	r3, r2, #2
 80075c0:	189b      	adds	r3, r3, r2
 80075c2:	005b      	lsls	r3, r3, #1
 80075c4:	4913      	ldr	r1, [pc, #76]	; (8007614 <pingCommand+0x60>)
 80075c6:	5c5b      	ldrb	r3, [r3, r1]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d117      	bne.n	80075fc <pingCommand+0x48>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage1, myID);
 80075cc:	4912      	ldr	r1, [pc, #72]	; (8007618 <pingCommand+0x64>)
 80075ce:	f00d f9f9 	bl	80149c4 <sprintf>
	RTOS_IND_blink(200);	
 80075d2:	2580      	movs	r5, #128	; 0x80
 80075d4:	012d      	lsls	r5, r5, #4
 80075d6:	2490      	movs	r4, #144	; 0x90
 80075d8:	05e4      	lsls	r4, r4, #23
 80075da:	2201      	movs	r2, #1
 80075dc:	0029      	movs	r1, r5
 80075de:	0020      	movs	r0, r4
 80075e0:	f00a fbe2 	bl	8011da8 <HAL_GPIO_WritePin>
 80075e4:	20c8      	movs	r0, #200	; 0xc8
 80075e6:	f007 fa8a 	bl	800eafe <osDelay>
 80075ea:	2200      	movs	r2, #0
 80075ec:	0029      	movs	r1, r5
 80075ee:	0020      	movs	r0, r4
 80075f0:	f00a fbda 	bl	8011da8 <HAL_GPIO_WritePin>
}
 80075f4:	2000      	movs	r0, #0
 80075f6:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pcWriteBuffer );
 80075f8:	b672      	cpsid	i
 80075fa:	e7fe      	b.n	80075fa <pingCommand+0x46>
		sprintf( ( char * ) pcWriteBuffer, ( char * ) pcMessage2, myID, moduleAlias[myID]);
 80075fc:	0093      	lsls	r3, r2, #2
 80075fe:	189b      	adds	r3, r3, r2
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	4904      	ldr	r1, [pc, #16]	; (8007614 <pingCommand+0x60>)
 8007604:	185b      	adds	r3, r3, r1
 8007606:	4905      	ldr	r1, [pc, #20]	; (800761c <pingCommand+0x68>)
 8007608:	f00d f9dc 	bl	80149c4 <sprintf>
 800760c:	e7e1      	b.n	80075d2 <pingCommand+0x1e>
 800760e:	46c0      	nop			; (mov r8, r8)
 8007610:	20000070 	.word	0x20000070
 8007614:	20000dd4 	.word	0x20000dd4
 8007618:	0801bec8 	.word	0x0801bec8
 800761c:	0801bedc 	.word	0x0801bedc

08007620 <prvRunTimeStatsCommand>:
{
 8007620:	b510      	push	{r4, lr}
 8007622:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8007624:	d009      	beq.n	800763a <prvRunTimeStatsCommand+0x1a>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcStatsTableHeader );
 8007626:	2251      	movs	r2, #81	; 0x51
 8007628:	4905      	ldr	r1, [pc, #20]	; (8007640 <prvRunTimeStatsCommand+0x20>)
 800762a:	f00c ff99 	bl	8014560 <memcpy>
	vTaskGetRunTimeStats( ((char*) pcWriteBuffer) + strlen( ( char * ) pcStatsTableHeader ) );
 800762e:	0020      	movs	r0, r4
 8007630:	3050      	adds	r0, #80	; 0x50
 8007632:	f008 fe11 	bl	8010258 <vTaskGetRunTimeStats>
}
 8007636:	2000      	movs	r0, #0
 8007638:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 800763a:	b672      	cpsid	i
 800763c:	e7fe      	b.n	800763c <prvRunTimeStatsCommand+0x1c>
 800763e:	46c0      	nop			; (mov r8, r8)
 8007640:	0801bef8 	.word	0x0801bef8

08007644 <prvTaskStatsCommand>:
{
 8007644:	b510      	push	{r4, lr}
 8007646:	1e04      	subs	r4, r0, #0
	configASSERT( pcWriteBuffer );
 8007648:	d009      	beq.n	800765e <prvTaskStatsCommand+0x1a>
	strcpy( ( char * ) pcWriteBuffer, ( char * ) pcTaskTableHeader );
 800764a:	225b      	movs	r2, #91	; 0x5b
 800764c:	4905      	ldr	r1, [pc, #20]	; (8007664 <prvTaskStatsCommand+0x20>)
 800764e:	f00c ff87 	bl	8014560 <memcpy>
	vTaskList( ((char*) pcWriteBuffer) + strlen( ( char * ) pcTaskTableHeader ) );
 8007652:	0020      	movs	r0, r4
 8007654:	305a      	adds	r0, #90	; 0x5a
 8007656:	f008 fd91 	bl	801017c <vTaskList>
}
 800765a:	2000      	movs	r0, #0
 800765c:	bd10      	pop	{r4, pc}
	configASSERT( pcWriteBuffer );
 800765e:	b672      	cpsid	i
 8007660:	e7fe      	b.n	8007660 <prvTaskStatsCommand+0x1c>
 8007662:	46c0      	nop			; (mov r8, r8)
 8007664:	0801bf4c 	.word	0x0801bf4c

08007668 <resetCommand>:
	configASSERT( pcWriteBuffer );
 8007668:	2800      	cmp	r0, #0
 800766a:	d008      	beq.n	800767e <resetCommand+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	4b04      	ldr	r3, [pc, #16]	; (8007684 <resetCommand+0x1c>)
 8007672:	4a05      	ldr	r2, [pc, #20]	; (8007688 <resetCommand+0x20>)
 8007674:	60da      	str	r2, [r3, #12]
 8007676:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800767a:	46c0      	nop			; (mov r8, r8)
 800767c:	e7fd      	b.n	800767a <resetCommand+0x12>
 800767e:	b672      	cpsid	i
 8007680:	e7fe      	b.n	8007680 <resetCommand+0x18>
 8007682:	46c0      	nop			; (mov r8, r8)
 8007684:	e000ed00 	.word	0xe000ed00
 8007688:	05fa0004 	.word	0x05fa0004

0800768c <RegisterUserCLICommands>:
}
 800768c:	4770      	bx	lr
	...

08007690 <vRegisterCLICommands>:
{
 8007690:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand( &prvTaskStatsCommandDefinition );
 8007692:	482e      	ldr	r0, [pc, #184]	; (800774c <vRegisterCLICommands+0xbc>)
 8007694:	f007 fab0 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &prvRunTimeStatsCommandDefinition );	
 8007698:	482d      	ldr	r0, [pc, #180]	; (8007750 <vRegisterCLICommands+0xc0>)
 800769a:	f007 faad 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pingCommandDefinition );
 800769e:	482d      	ldr	r0, [pc, #180]	; (8007754 <vRegisterCLICommands+0xc4>)
 80076a0:	f007 faaa 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &bootloaderUpdateCommandDefinition );
 80076a4:	482c      	ldr	r0, [pc, #176]	; (8007758 <vRegisterCLICommands+0xc8>)
 80076a6:	f007 faa7 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &resetCommandDefinition );
 80076aa:	482c      	ldr	r0, [pc, #176]	; (800775c <vRegisterCLICommands+0xcc>)
 80076ac:	f007 faa4 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &nameCommandDefinition );
 80076b0:	482b      	ldr	r0, [pc, #172]	; (8007760 <vRegisterCLICommands+0xd0>)
 80076b2:	f007 faa1 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &groupCommandDefinition );
 80076b6:	482b      	ldr	r0, [pc, #172]	; (8007764 <vRegisterCLICommands+0xd4>)
 80076b8:	f007 fa9e 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &statusCommandDefinition );
 80076bc:	482a      	ldr	r0, [pc, #168]	; (8007768 <vRegisterCLICommands+0xd8>)
 80076be:	f007 fa9b 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &infoCommandDefinition );
 80076c2:	482a      	ldr	r0, [pc, #168]	; (800776c <vRegisterCLICommands+0xdc>)
 80076c4:	f007 fa98 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &scastCommandDefinition );
 80076c8:	4829      	ldr	r0, [pc, #164]	; (8007770 <vRegisterCLICommands+0xe0>)
 80076ca:	f007 fa95 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &addbuttonCommandDefinition );
 80076ce:	4829      	ldr	r0, [pc, #164]	; (8007774 <vRegisterCLICommands+0xe4>)
 80076d0:	f007 fa92 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &removebuttonCommandDefinition );
 80076d4:	4828      	ldr	r0, [pc, #160]	; (8007778 <vRegisterCLICommands+0xe8>)
 80076d6:	f007 fa8f 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &setCommandDefinition );
 80076da:	4828      	ldr	r0, [pc, #160]	; (800777c <vRegisterCLICommands+0xec>)
 80076dc:	f007 fa8c 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &getCommandDefinition );
 80076e0:	4827      	ldr	r0, [pc, #156]	; (8007780 <vRegisterCLICommands+0xf0>)
 80076e2:	f007 fa89 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &defaultCommandDefinition );
 80076e6:	4827      	ldr	r0, [pc, #156]	; (8007784 <vRegisterCLICommands+0xf4>)
 80076e8:	f007 fa86 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &timeCommandDefinition );
 80076ec:	4826      	ldr	r0, [pc, #152]	; (8007788 <vRegisterCLICommands+0xf8>)
 80076ee:	f007 fa83 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &dateCommandDefinition );
 80076f2:	4826      	ldr	r0, [pc, #152]	; (800778c <vRegisterCLICommands+0xfc>)
 80076f4:	f007 fa80 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &setBaudrateCommandDefinition);
 80076f8:	4825      	ldr	r0, [pc, #148]	; (8007790 <vRegisterCLICommands+0x100>)
 80076fa:	f007 fa7d 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &uuidCommandDefinition);
 80076fe:	4825      	ldr	r0, [pc, #148]	; (8007794 <vRegisterCLICommands+0x104>)
 8007700:	f007 fa7a 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &idcodeCommandDefinition);
 8007704:	4824      	ldr	r0, [pc, #144]	; (8007798 <vRegisterCLICommands+0x108>)
 8007706:	f007 fa77 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &flashsizeCommandDefinition);
 800770a:	4824      	ldr	r0, [pc, #144]	; (800779c <vRegisterCLICommands+0x10c>)
 800770c:	f007 fa74 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &snipCommandDefinition);
 8007710:	4823      	ldr	r0, [pc, #140]	; (80077a0 <vRegisterCLICommands+0x110>)
 8007712:	f007 fa71 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &actSnipCommandDefinition);
 8007716:	4823      	ldr	r0, [pc, #140]	; (80077a4 <vRegisterCLICommands+0x114>)
 8007718:	f007 fa6e 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &pauseSnipCommandDefinition);
 800771c:	4822      	ldr	r0, [pc, #136]	; (80077a8 <vRegisterCLICommands+0x118>)
 800771e:	f007 fa6b 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &delSnipCommandDefinition);
 8007722:	4822      	ldr	r0, [pc, #136]	; (80077ac <vRegisterCLICommands+0x11c>)
 8007724:	f007 fa68 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &bridgeCommandDefinition);
 8007728:	4821      	ldr	r0, [pc, #132]	; (80077b0 <vRegisterCLICommands+0x120>)
 800772a:	f007 fa65 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &unbridgeCommandDefinition);
 800772e:	4821      	ldr	r0, [pc, #132]	; (80077b4 <vRegisterCLICommands+0x124>)
 8007730:	f007 fa62 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand( &testportCommandDefinition);
 8007734:	4820      	ldr	r0, [pc, #128]	; (80077b8 <vRegisterCLICommands+0x128>)
 8007736:	f007 fa5f 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	numOfBosCommands = 28;			// Add "help" command
 800773a:	4b20      	ldr	r3, [pc, #128]	; (80077bc <vRegisterCLICommands+0x12c>)
 800773c:	221c      	movs	r2, #28
 800773e:	701a      	strb	r2, [r3, #0]
	RegisterModuleCLICommands();
 8007740:	f003 ffe4 	bl	800b70c <RegisterModuleCLICommands>
	RegisterUserCLICommands();
 8007744:	f7ff ffa2 	bl	800768c <RegisterUserCLICommands>
}
 8007748:	bd10      	pop	{r4, pc}
 800774a:	46c0      	nop			; (mov r8, r8)
 800774c:	0801cde0 	.word	0x0801cde0
 8007750:	0801cdd0 	.word	0x0801cdd0
 8007754:	0801cdc0 	.word	0x0801cdc0
 8007758:	0801ccec 	.word	0x0801ccec
 800775c:	0801ce00 	.word	0x0801ce00
 8007760:	0801cda0 	.word	0x0801cda0
 8007764:	0801cd5c 	.word	0x0801cd5c
 8007768:	0801ce50 	.word	0x0801ce50
 800776c:	0801cd7c 	.word	0x0801cd7c
 8007770:	0801ce10 	.word	0x0801ce10
 8007774:	0801ccdc 	.word	0x0801ccdc
 8007778:	0801cdf0 	.word	0x0801cdf0
 800777c:	0801ce30 	.word	0x0801ce30
 8007780:	0801cd4c 	.word	0x0801cd4c
 8007784:	0801cd1c 	.word	0x0801cd1c
 8007788:	0801ce70 	.word	0x0801ce70
 800778c:	0801cd0c 	.word	0x0801cd0c
 8007790:	0801ce20 	.word	0x0801ce20
 8007794:	0801ce90 	.word	0x0801ce90
 8007798:	0801cd6c 	.word	0x0801cd6c
 800779c:	0801cd3c 	.word	0x0801cd3c
 80077a0:	0801ce40 	.word	0x0801ce40
 80077a4:	0801cccc 	.word	0x0801cccc
 80077a8:	0801cdb0 	.word	0x0801cdb0
 80077ac:	0801cd2c 	.word	0x0801cd2c
 80077b0:	0801ccfc 	.word	0x0801ccfc
 80077b4:	0801ce80 	.word	0x0801ce80
 80077b8:	0801ce60 	.word	0x0801ce60
 80077bc:	20006668 	.word	0x20006668

080077c0 <StopMsgDMA>:


/* --- Stop a messaging DMA --- 
*/
void StopMsgDMA(uint8_t port)
{
 80077c0:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &msgRxDMA[port-1];
 80077c2:	1e45      	subs	r5, r0, #1
 80077c4:	00ec      	lsls	r4, r5, #3
 80077c6:	1b60      	subs	r0, r4, r5
 80077c8:	00c0      	lsls	r0, r0, #3
 80077ca:	4e05      	ldr	r6, [pc, #20]	; (80077e0 <StopMsgDMA+0x20>)
 80077cc:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 80077ce:	f009 fc2a 	bl	8011026 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 80077d2:	1b64      	subs	r4, r4, r5
 80077d4:	00e4      	lsls	r4, r4, #3
 80077d6:	59a3      	ldr	r3, [r4, r6]
 80077d8:	2200      	movs	r2, #0
 80077da:	605a      	str	r2, [r3, #4]
}
 80077dc:	bd70      	pop	{r4, r5, r6, pc}
 80077de:	46c0      	nop			; (mov r8, r8)
 80077e0:	200014bc 	.word	0x200014bc

080077e4 <StopStreamDMA>:
/*-----------------------------------------------------------*/

/* --- Stop a streaming DMA --- 
*/
void StopStreamDMA(uint8_t port)
{
 80077e4:	b570      	push	{r4, r5, r6, lr}
	DMA_HandleTypeDef *hDMA;
	
	/* Select DMA struct */
	hDMA = &streamDMA[port-1];
 80077e6:	1e44      	subs	r4, r0, #1
 80077e8:	00e5      	lsls	r5, r4, #3
 80077ea:	1b28      	subs	r0, r5, r4
 80077ec:	00c0      	lsls	r0, r0, #3
 80077ee:	4e07      	ldr	r6, [pc, #28]	; (800780c <StopStreamDMA+0x28>)
 80077f0:	1980      	adds	r0, r0, r6
	
	HAL_DMA_Abort(hDMA);
 80077f2:	f009 fc18 	bl	8011026 <HAL_DMA_Abort>
	hDMA->Instance->CNDTR = 0;
 80077f6:	1b2d      	subs	r5, r5, r4
 80077f8:	00ed      	lsls	r5, r5, #3
 80077fa:	59aa      	ldr	r2, [r5, r6]
 80077fc:	2300      	movs	r3, #0
 80077fe:	6053      	str	r3, [r2, #4]
	dmaStreamCount[port-1] = 0;
 8007800:	00a4      	lsls	r4, r4, #2
 8007802:	4a03      	ldr	r2, [pc, #12]	; (8007810 <StopStreamDMA+0x2c>)
 8007804:	50a3      	str	r3, [r4, r2]
	dmaStreamTotal[port-1] = 0;
 8007806:	4a03      	ldr	r2, [pc, #12]	; (8007814 <StopStreamDMA+0x30>)
 8007808:	50a3      	str	r3, [r4, r2]

}
 800780a:	bd70      	pop	{r4, r5, r6, pc}
 800780c:	200016b4 	.word	0x200016b4
 8007810:	200011c8 	.word	0x200011c8
 8007814:	200011f8 	.word	0x200011f8

08007818 <SwitchMsgDMAToStream>:
/*-----------------------------------------------------------*/

/* Switch messaging DMA channels to streaming 
*/
void SwitchMsgDMAToStream(uint8_t port)
{
 8007818:	b510      	push	{r4, lr}
 800781a:	0004      	movs	r4, r0
	// TODO - Make sure all messages in the RX buffer have been parsed?
	
	// Stop the messaging DMA
	StopMsgDMA(port);
 800781c:	f7ff ffd0 	bl	80077c0 <StopMsgDMA>
	
	// Initialize a streaming DMA using same channel
	DMA_STREAM_CH_Init(&streamDMA[port-1], msgRxDMA[port-1].Instance);
 8007820:	3c01      	subs	r4, #1
 8007822:	00e0      	lsls	r0, r4, #3
 8007824:	1b02      	subs	r2, r0, r4
 8007826:	00d2      	lsls	r2, r2, #3
 8007828:	4903      	ldr	r1, [pc, #12]	; (8007838 <SwitchMsgDMAToStream+0x20>)
 800782a:	5851      	ldr	r1, [r2, r1]
 800782c:	4b03      	ldr	r3, [pc, #12]	; (800783c <SwitchMsgDMAToStream+0x24>)
 800782e:	18d0      	adds	r0, r2, r3
 8007830:	f004 fd56 	bl	800c2e0 <DMA_STREAM_CH_Init>
}
 8007834:	bd10      	pop	{r4, pc}
 8007836:	46c0      	nop			; (mov r8, r8)
 8007838:	200014bc 	.word	0x200014bc
 800783c:	200016b4 	.word	0x200016b4

08007840 <SwitchStreamDMAToMsg>:
/*-----------------------------------------------------------*/

/* Switch streaming DMA channel to messaging 
*/
void SwitchStreamDMAToMsg(uint8_t port)
{
 8007840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007842:	46c6      	mov	lr, r8
 8007844:	b500      	push	{lr}
 8007846:	0007      	movs	r7, r0
	// Stop the streaming DMA
	StopStreamDMA(port);
 8007848:	f7ff ffcc 	bl	80077e4 <StopStreamDMA>
	
	// Initialize a messaging DMA using same channels
	DMA_MSG_RX_CH_Init(&msgRxDMA[port-1], streamDMA[port-1].Instance);	
 800784c:	1e7c      	subs	r4, r7, #1
 800784e:	00e5      	lsls	r5, r4, #3
 8007850:	1b2e      	subs	r6, r5, r4
 8007852:	00f6      	lsls	r6, r6, #3
 8007854:	4b11      	ldr	r3, [pc, #68]	; (800789c <SwitchStreamDMAToMsg+0x5c>)
 8007856:	18f6      	adds	r6, r6, r3
 8007858:	4b11      	ldr	r3, [pc, #68]	; (80078a0 <SwitchStreamDMAToMsg+0x60>)
 800785a:	4698      	mov	r8, r3
 800785c:	1b2b      	subs	r3, r5, r4
 800785e:	00db      	lsls	r3, r3, #3
 8007860:	4642      	mov	r2, r8
 8007862:	5899      	ldr	r1, [r3, r2]
 8007864:	0030      	movs	r0, r6
 8007866:	f004 fcbd 	bl	800c1e4 <DMA_MSG_RX_CH_Init>
	
	// Remove stream DMA and change port status
	portStatus[GetPort(streamDMA[port-1].Parent)] = FREE; 
 800786a:	1b2b      	subs	r3, r5, r4
 800786c:	00db      	lsls	r3, r3, #3
 800786e:	4443      	add	r3, r8
 8007870:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007872:	f003 ff5d 	bl	800b730 <GetPort>
 8007876:	2300      	movs	r3, #0
 8007878:	4a0a      	ldr	r2, [pc, #40]	; (80078a4 <SwitchStreamDMAToMsg+0x64>)
 800787a:	5413      	strb	r3, [r2, r0]
	streamDMA[port-1].Instance = 0;
 800787c:	1b2d      	subs	r5, r5, r4
 800787e:	00ed      	lsls	r5, r5, #3
 8007880:	4642      	mov	r2, r8
 8007882:	50ab      	str	r3, [r5, r2]
	dmaStreamDst[port-1] = 0;
 8007884:	00a4      	lsls	r4, r4, #2
 8007886:	4a08      	ldr	r2, [pc, #32]	; (80078a8 <SwitchStreamDMAToMsg+0x68>)
 8007888:	50a3      	str	r3, [r4, r2]
	
	// Read this port again in messaging mode	
	DMA_MSG_RX_Setup(GetUart(port), &msgRxDMA[port-1]);
 800788a:	0038      	movs	r0, r7
 800788c:	f006 fbea 	bl	800e064 <GetUart>
 8007890:	0031      	movs	r1, r6
 8007892:	f005 f91f 	bl	800cad4 <DMA_MSG_RX_Setup>
		
}
 8007896:	bc80      	pop	{r7}
 8007898:	46b8      	mov	r8, r7
 800789a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800789c:	200014bc 	.word	0x200014bc
 80078a0:	200016b4 	.word	0x200016b4
 80078a4:	20000e5c 	.word	0x20000e5c
 80078a8:	200011e0 	.word	0x200011e0

080078ac <StartDMAstream>:
/*-----------------------------------------------------------*/

/* Setup and start a streaming DMA (port-to-port) 
*/
BOS_Status StartDMAstream(UART_HandleTypeDef* huartSrc, UART_HandleTypeDef* huartDst, uint16_t num)
{	
 80078ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ae:	0005      	movs	r5, r0
 80078b0:	000e      	movs	r6, r1
 80078b2:	0017      	movs	r7, r2
	uint8_t srcPort = GetPort(huartSrc);
 80078b4:	f003 ff3c 	bl	800b730 <GetPort>
 80078b8:	0004      	movs	r4, r0
	
	// 1. Check if single- or multi-cast 
	// 1.a. If single-cast, switch the DMA channel to streaming if it's available 
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80078ba:	4b0d      	ldr	r3, [pc, #52]	; (80078f0 <StartDMAstream+0x44>)
 80078bc:	5c1b      	ldrb	r3, [r3, r0]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d902      	bls.n	80078c8 <StartDMAstream+0x1c>
		SwitchMsgDMAToStream(srcPort);
	}
	// 1.b. If multi-cast, do some stuff - TODO
	else if (portStatus[srcPort] == STREAM)
	{
		return BOS_ERR_PORT_BUSY;		// Multi-casting not implemented right now
 80078c2:	2017      	movs	r0, #23
	if (portStatus[srcPort] == FREE || portStatus[srcPort] == MSG || portStatus[srcPort] == CLI)		// This port is not streaming so it's single-cast
 80078c4:	2b03      	cmp	r3, #3
 80078c6:	d112      	bne.n	80078ee <StartDMAstream+0x42>
		SwitchMsgDMAToStream(srcPort);
 80078c8:	0020      	movs	r0, r4
 80078ca:	f7ff ffa5 	bl	8007818 <SwitchMsgDMAToStream>
	}
	else
		return BOS_ERR_PORT_BUSY;

	// 2. Setup streaming destination
	dmaStreamDst[srcPort-1] = huartDst;
 80078ce:	1e63      	subs	r3, r4, #1
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4a08      	ldr	r2, [pc, #32]	; (80078f4 <StartDMAstream+0x48>)
 80078d4:	509e      	str	r6, [r3, r2]
	
	// 3. Lock the ports 
	portStatus[srcPort] = STREAM;
 80078d6:	4a06      	ldr	r2, [pc, #24]	; (80078f0 <StartDMAstream+0x44>)
 80078d8:	2102      	movs	r1, #2
 80078da:	5511      	strb	r1, [r2, r4]
	
	// 4. Initialize stream counter 
	dmaStreamCount[srcPort-1] = 0;
 80078dc:	4a06      	ldr	r2, [pc, #24]	; (80078f8 <StartDMAstream+0x4c>)
 80078de:	2100      	movs	r1, #0
 80078e0:	5099      	str	r1, [r3, r2]
	
	// 5. Setup and start the DMA stream
	DMA_STREAM_Setup(huartSrc, huartDst, num);	
 80078e2:	003a      	movs	r2, r7
 80078e4:	0031      	movs	r1, r6
 80078e6:	0028      	movs	r0, r5
 80078e8:	f005 f95e 	bl	800cba8 <DMA_STREAM_Setup>
	
	return BOS_OK;
 80078ec:	2000      	movs	r0, #0
}
 80078ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078f0:	20000e5c 	.word	0x20000e5c
 80078f4:	200011e0 	.word	0x200011e0
 80078f8:	200011c8 	.word	0x200011c8

080078fc <DMA_IRQHandler>:
/*-----------------------------------------------------------*/

/* DMA interrupt service routine 
*/
void DMA_IRQHandler(uint8_t port)
{
 80078fc:	b570      	push	{r4, r5, r6, lr}
 80078fe:	0004      	movs	r4, r0
	if (portStatus[port] != STREAM) {
 8007900:	4b12      	ldr	r3, [pc, #72]	; (800794c <DMA_IRQHandler+0x50>)
 8007902:	5c1b      	ldrb	r3, [r3, r0]
 8007904:	2b02      	cmp	r3, #2
 8007906:	d008      	beq.n	800791a <DMA_IRQHandler+0x1e>
		HAL_DMA_IRQHandler(&msgRxDMA[port-1]);
 8007908:	3c01      	subs	r4, #1
 800790a:	00e0      	lsls	r0, r4, #3
 800790c:	1b00      	subs	r0, r0, r4
 800790e:	00c0      	lsls	r0, r0, #3
 8007910:	4c0f      	ldr	r4, [pc, #60]	; (8007950 <DMA_IRQHandler+0x54>)
 8007912:	1900      	adds	r0, r0, r4
 8007914:	f009 fbb0 	bl	8011078 <HAL_DMA_IRQHandler>
			++dmaStreamCount[port-1];
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
			StopStreamDMA(port);
		}
	}
}
 8007918:	bd70      	pop	{r4, r5, r6, pc}
		HAL_DMA_IRQHandler(&streamDMA[port-1]);
 800791a:	1e45      	subs	r5, r0, #1
 800791c:	00e8      	lsls	r0, r5, #3
 800791e:	1b40      	subs	r0, r0, r5
 8007920:	00c0      	lsls	r0, r0, #3
 8007922:	4b0c      	ldr	r3, [pc, #48]	; (8007954 <DMA_IRQHandler+0x58>)
 8007924:	18c0      	adds	r0, r0, r3
 8007926:	f009 fba7 	bl	8011078 <HAL_DMA_IRQHandler>
		if (dmaStreamTotal[port-1])
 800792a:	00aa      	lsls	r2, r5, #2
 800792c:	4b0a      	ldr	r3, [pc, #40]	; (8007958 <DMA_IRQHandler+0x5c>)
 800792e:	58d2      	ldr	r2, [r2, r3]
 8007930:	2a00      	cmp	r2, #0
 8007932:	d006      	beq.n	8007942 <DMA_IRQHandler+0x46>
			++dmaStreamCount[port-1];
 8007934:	4909      	ldr	r1, [pc, #36]	; (800795c <DMA_IRQHandler+0x60>)
 8007936:	00ad      	lsls	r5, r5, #2
 8007938:	586b      	ldr	r3, [r5, r1]
 800793a:	3301      	adds	r3, #1
 800793c:	506b      	str	r3, [r5, r1]
		if (dmaStreamCount[port-1] >= dmaStreamTotal[port-1]) {
 800793e:	429a      	cmp	r2, r3
 8007940:	d8ea      	bhi.n	8007918 <DMA_IRQHandler+0x1c>
			StopStreamDMA(port);
 8007942:	0020      	movs	r0, r4
 8007944:	f7ff ff4e 	bl	80077e4 <StopStreamDMA>
}
 8007948:	e7e6      	b.n	8007918 <DMA_IRQHandler+0x1c>
 800794a:	46c0      	nop			; (mov r8, r8)
 800794c:	20000e5c 	.word	0x20000e5c
 8007950:	200014bc 	.word	0x200014bc
 8007954:	200016b4 	.word	0x200016b4
 8007958:	200011f8 	.word	0x200011f8
 800795c:	200011c8 	.word	0x200011c8

08007960 <ResetUartORE>:
/* Reset UART ORE (overrun) flag in case other modules were already transmitting on startup
*/
void ResetUartORE(void)
{
#ifdef _Usart1
	__HAL_UART_CLEAR_OREFLAG(&huart1);
 8007960:	4b09      	ldr	r3, [pc, #36]	; (8007988 <ResetUartORE+0x28>)
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	2308      	movs	r3, #8
 8007966:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart2
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8007968:	4a08      	ldr	r2, [pc, #32]	; (800798c <ResetUartORE+0x2c>)
 800796a:	6812      	ldr	r2, [r2, #0]
 800796c:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart3
	__HAL_UART_CLEAR_OREFLAG(&huart3);
 800796e:	4a08      	ldr	r2, [pc, #32]	; (8007990 <ResetUartORE+0x30>)
 8007970:	6812      	ldr	r2, [r2, #0]
 8007972:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart4
	__HAL_UART_CLEAR_OREFLAG(&huart4);
 8007974:	4a07      	ldr	r2, [pc, #28]	; (8007994 <ResetUartORE+0x34>)
 8007976:	6812      	ldr	r2, [r2, #0]
 8007978:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart5
	__HAL_UART_CLEAR_OREFLAG(&huart5);
 800797a:	4a07      	ldr	r2, [pc, #28]	; (8007998 <ResetUartORE+0x38>)
 800797c:	6812      	ldr	r2, [r2, #0]
 800797e:	6213      	str	r3, [r2, #32]
#endif
#ifdef _Usart6
	__HAL_UART_CLEAR_OREFLAG(&huart6);
 8007980:	4a06      	ldr	r2, [pc, #24]	; (800799c <ResetUartORE+0x3c>)
 8007982:	6812      	ldr	r2, [r2, #0]
 8007984:	6213      	str	r3, [r2, #32]
#endif
}
 8007986:	4770      	bx	lr
 8007988:	20006880 	.word	0x20006880
 800798c:	200069d0 	.word	0x200069d0
 8007990:	200067a0 	.word	0x200067a0
 8007994:	20006960 	.word	0x20006960
 8007998:	20006810 	.word	0x20006810
 800799c:	200068f0 	.word	0x200068f0

080079a0 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 80079a0:	b570      	push	{r4, r5, r6, lr}
 80079a2:	0006      	movs	r6, r0
 80079a4:	000d      	movs	r5, r1
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint16_t ValidPage = PAGEA;
  uint32_t Address = 0, PageEndAddress = 0;
	
	HAL_FLASH_Unlock();
 80079a6:	f009 ffd7 	bl	8011958 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 80079aa:	4b2a      	ldr	r3, [pc, #168]	; (8007a54 <EE_VerifyPageFullWriteVariable+0xb4>)
 80079ac:	881a      	ldrh	r2, [r3, #0]
 80079ae:	b292      	uxth	r2, r2
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 80079b0:	4b29      	ldr	r3, [pc, #164]	; (8007a58 <EE_VerifyPageFullWriteVariable+0xb8>)
 80079b2:	881b      	ldrh	r3, [r3, #0]
 80079b4:	b29b      	uxth	r3, r3
      if (PageStatusB == VALID_PAGE)
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d104      	bne.n	80079c4 <EE_VerifyPageFullWriteVariable+0x24>
        if (PageStatusA == RECEIVE_DATA)
 80079ba:	4928      	ldr	r1, [pc, #160]	; (8007a5c <EE_VerifyPageFullWriteVariable+0xbc>)
 80079bc:	428a      	cmp	r2, r1
 80079be:	d007      	beq.n	80079d0 <EE_VerifyPageFullWriteVariable+0x30>
          return PAGEB;         /* PageB valid */
 80079c0:	3302      	adds	r3, #2
 80079c2:	e005      	b.n	80079d0 <EE_VerifyPageFullWriteVariable+0x30>
      else if (PageStatusA == VALID_PAGE)
 80079c4:	2a00      	cmp	r2, #0
 80079c6:	d140      	bne.n	8007a4a <EE_VerifyPageFullWriteVariable+0xaa>
        if (PageStatusB == RECEIVE_DATA)
 80079c8:	4924      	ldr	r1, [pc, #144]	; (8007a5c <EE_VerifyPageFullWriteVariable+0xbc>)
 80079ca:	428b      	cmp	r3, r1
 80079cc:	d03f      	beq.n	8007a4e <EE_VerifyPageFullWriteVariable+0xae>
          return PAGEA;         /* PageA valid */
 80079ce:	0013      	movs	r3, r2
  {
    return  NO_VALID_PAGE;
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 80079d0:	4a23      	ldr	r2, [pc, #140]	; (8007a60 <EE_VerifyPageFullWriteVariable+0xc0>)
 80079d2:	189c      	adds	r4, r3, r2
 80079d4:	02e4      	lsls	r4, r4, #11

  /* Get the valid Page end Address - Each page is twice pages size */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 80079d6:	02db      	lsls	r3, r3, #11
 80079d8:	4a22      	ldr	r2, [pc, #136]	; (8007a64 <EE_VerifyPageFullWriteVariable+0xc4>)
 80079da:	4694      	mov	ip, r2
 80079dc:	4463      	add	r3, ip

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 80079de:	6822      	ldr	r2, [r4, #0]
 80079e0:	3201      	adds	r2, #1
 80079e2:	d006      	beq.n	80079f2 <EE_VerifyPageFullWriteVariable+0x52>
      return pFlash.ErrorCode;
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 80079e4:	3404      	adds	r4, #4
  while (Address < PageEndAddress)
 80079e6:	429c      	cmp	r4, r3
 80079e8:	d3f9      	bcc.n	80079de <EE_VerifyPageFullWriteVariable+0x3e>
    }
  }
	
	HAL_FLASH_Lock();
 80079ea:	f009 ffc9 	bl	8011980 <HAL_FLASH_Lock>

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 80079ee:	2080      	movs	r0, #128	; 0x80
}
 80079f0:	bd70      	pop	{r4, r5, r6, pc}
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address, Data);
 80079f2:	002a      	movs	r2, r5
 80079f4:	2300      	movs	r3, #0
 80079f6:	0021      	movs	r1, r4
 80079f8:	2001      	movs	r0, #1
 80079fa:	f009 fff9 	bl	80119f0 <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 80079fe:	481a      	ldr	r0, [pc, #104]	; (8007a68 <EE_VerifyPageFullWriteVariable+0xc8>)
 8007a00:	f009 ffc8 	bl	8011994 <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 8007a04:	2800      	cmp	r0, #0
 8007a06:	d003      	beq.n	8007a10 <EE_VerifyPageFullWriteVariable+0x70>
        return pFlash.ErrorCode;
 8007a08:	4b18      	ldr	r3, [pc, #96]	; (8007a6c <EE_VerifyPageFullWriteVariable+0xcc>)
 8007a0a:	69d8      	ldr	r0, [r3, #28]
 8007a0c:	b280      	uxth	r0, r0
 8007a0e:	e7ef      	b.n	80079f0 <EE_VerifyPageFullWriteVariable+0x50>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007a10:	4a17      	ldr	r2, [pc, #92]	; (8007a70 <EE_VerifyPageFullWriteVariable+0xd0>)
 8007a12:	6913      	ldr	r3, [r2, #16]
 8007a14:	2101      	movs	r1, #1
 8007a16:	438b      	bics	r3, r1
 8007a18:	6113      	str	r3, [r2, #16]
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);
 8007a1a:	1ca1      	adds	r1, r4, #2
 8007a1c:	0032      	movs	r2, r6
 8007a1e:	2300      	movs	r3, #0
 8007a20:	2001      	movs	r0, #1
 8007a22:	f009 ffe5 	bl	80119f0 <HAL_FLASH_Program>
			FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007a26:	4810      	ldr	r0, [pc, #64]	; (8007a68 <EE_VerifyPageFullWriteVariable+0xc8>)
 8007a28:	f009 ffb4 	bl	8011994 <FLASH_WaitForLastOperation>
      if (FlashStatus != HAL_OK)
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	d003      	beq.n	8007a38 <EE_VerifyPageFullWriteVariable+0x98>
        return pFlash.ErrorCode;
 8007a30:	4b0e      	ldr	r3, [pc, #56]	; (8007a6c <EE_VerifyPageFullWriteVariable+0xcc>)
 8007a32:	69d8      	ldr	r0, [r3, #28]
 8007a34:	b280      	uxth	r0, r0
 8007a36:	e7db      	b.n	80079f0 <EE_VerifyPageFullWriteVariable+0x50>
				CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007a38:	4a0d      	ldr	r2, [pc, #52]	; (8007a70 <EE_VerifyPageFullWriteVariable+0xd0>)
 8007a3a:	6913      	ldr	r3, [r2, #16]
 8007a3c:	2101      	movs	r1, #1
 8007a3e:	438b      	bics	r3, r1
 8007a40:	6113      	str	r3, [r2, #16]
      return pFlash.ErrorCode;
 8007a42:	4b0a      	ldr	r3, [pc, #40]	; (8007a6c <EE_VerifyPageFullWriteVariable+0xcc>)
 8007a44:	69d8      	ldr	r0, [r3, #28]
 8007a46:	b280      	uxth	r0, r0
 8007a48:	e7d2      	b.n	80079f0 <EE_VerifyPageFullWriteVariable+0x50>
    return  NO_VALID_PAGE;
 8007a4a:	20ab      	movs	r0, #171	; 0xab
 8007a4c:	e7d0      	b.n	80079f0 <EE_VerifyPageFullWriteVariable+0x50>
          return PAGEB;         /* PageB valid */
 8007a4e:	2302      	movs	r3, #2
 8007a50:	e7be      	b.n	80079d0 <EE_VerifyPageFullWriteVariable+0x30>
 8007a52:	46c0      	nop			; (mov r8, r8)
 8007a54:	0801e000 	.word	0x0801e000
 8007a58:	0801f000 	.word	0x0801f000
 8007a5c:	0000eeee 	.word	0x0000eeee
 8007a60:	0001003c 	.word	0x0001003c
 8007a64:	0801effe 	.word	0x0801effe
 8007a68:	0000c350 	.word	0x0000c350
 8007a6c:	20006b80 	.word	0x20006b80
 8007a70:	40022000 	.word	0x40022000

08007a74 <EE_ReadVariable>:
{
 8007a74:	b510      	push	{r4, lr}
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8007a76:	4b11      	ldr	r3, [pc, #68]	; (8007abc <EE_ReadVariable+0x48>)
 8007a78:	881c      	ldrh	r4, [r3, #0]
 8007a7a:	b2a4      	uxth	r4, r4
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 8007a7c:	4b10      	ldr	r3, [pc, #64]	; (8007ac0 <EE_ReadVariable+0x4c>)
 8007a7e:	881b      	ldrh	r3, [r3, #0]
 8007a80:	b29b      	uxth	r3, r3
      if (PageStatusA == VALID_PAGE)
 8007a82:	2c00      	cmp	r4, #0
 8007a84:	d009      	beq.n	8007a9a <EE_ReadVariable+0x26>
      else if (PageStatusB == VALID_PAGE)
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d006      	beq.n	8007a98 <EE_ReadVariable+0x24>
    return  NO_VALID_PAGE;
 8007a8a:	20ab      	movs	r0, #171	; 0xab
 8007a8c:	e003      	b.n	8007a96 <EE_ReadVariable+0x22>
      *Data = (*(__IO uint16_t*)(Address - 2));
 8007a8e:	3b02      	subs	r3, #2
 8007a90:	881b      	ldrh	r3, [r3, #0]
 8007a92:	800b      	strh	r3, [r1, #0]
      ReadStatus = 0;
 8007a94:	2000      	movs	r0, #0
}
 8007a96:	bd10      	pop	{r4, pc}
        return PAGEB;           /* PageB valid */
 8007a98:	2402      	movs	r4, #2
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((2 + ValidPage) * PAGE_SIZE));
 8007a9a:	02e3      	lsls	r3, r4, #11
 8007a9c:	4a09      	ldr	r2, [pc, #36]	; (8007ac4 <EE_ReadVariable+0x50>)
 8007a9e:	4694      	mov	ip, r2
 8007aa0:	4463      	add	r3, ip
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8007aa2:	02e4      	lsls	r4, r4, #11
  while (Address > (PageStartAddress + 2))
 8007aa4:	4a08      	ldr	r2, [pc, #32]	; (8007ac8 <EE_ReadVariable+0x54>)
 8007aa6:	4694      	mov	ip, r2
 8007aa8:	4464      	add	r4, ip
    AddressValue = (*(__IO uint16_t*)Address);
 8007aaa:	881a      	ldrh	r2, [r3, #0]
 8007aac:	b292      	uxth	r2, r2
    if (AddressValue == VirtAddress)
 8007aae:	4282      	cmp	r2, r0
 8007ab0:	d0ed      	beq.n	8007a8e <EE_ReadVariable+0x1a>
      Address = Address - 4;
 8007ab2:	3b04      	subs	r3, #4
  while (Address > (PageStartAddress + 2))
 8007ab4:	42a3      	cmp	r3, r4
 8007ab6:	d8f8      	bhi.n	8007aaa <EE_ReadVariable+0x36>
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8007ab8:	2001      	movs	r0, #1
 8007aba:	e7ec      	b.n	8007a96 <EE_ReadVariable+0x22>
 8007abc:	0801e000 	.word	0x0801e000
 8007ac0:	0801f000 	.word	0x0801f000
 8007ac4:	0801effe 	.word	0x0801effe
 8007ac8:	0801e002 	.word	0x0801e002

08007acc <EE_WriteVariable>:
{
 8007acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ace:	46de      	mov	lr, fp
 8007ad0:	4657      	mov	r7, sl
 8007ad2:	464e      	mov	r6, r9
 8007ad4:	4645      	mov	r5, r8
 8007ad6:	b5e0      	push	{r5, r6, r7, lr}
 8007ad8:	b083      	sub	sp, #12
 8007ada:	0006      	movs	r6, r0
 8007adc:	000d      	movs	r5, r1
	HAL_FLASH_Unlock();
 8007ade:	f009 ff3b 	bl	8011958 <HAL_FLASH_Unlock>
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8007ae2:	0029      	movs	r1, r5
 8007ae4:	0030      	movs	r0, r6
 8007ae6:	f7ff ff5b 	bl	80079a0 <EE_VerifyPageFullWriteVariable>
 8007aea:	0004      	movs	r4, r0
  if (Status == PAGE_FULL)
 8007aec:	2880      	cmp	r0, #128	; 0x80
 8007aee:	d009      	beq.n	8007b04 <EE_WriteVariable+0x38>
	HAL_FLASH_Lock();
 8007af0:	f009 ff46 	bl	8011980 <HAL_FLASH_Lock>
}
 8007af4:	0020      	movs	r0, r4
 8007af6:	b003      	add	sp, #12
 8007af8:	bcf0      	pop	{r4, r5, r6, r7}
 8007afa:	46bb      	mov	fp, r7
 8007afc:	46b2      	mov	sl, r6
 8007afe:	46a9      	mov	r9, r5
 8007b00:	46a0      	mov	r8, r4
 8007b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef FlashStatus = HAL_OK;
  uint32_t NewPageAddress = 0, OldPageAddress = 0;
  uint16_t ValidPage = PAGEA, VarIdx = 0;
  uint16_t EepromStatus = 0, ReadStatus = 0;
	
	HAL_FLASH_Unlock();
 8007b04:	f009 ff28 	bl	8011958 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8007b08:	4b40      	ldr	r3, [pc, #256]	; (8007c0c <EE_WriteVariable+0x140>)
 8007b0a:	881b      	ldrh	r3, [r3, #0]
 8007b0c:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 8007b0e:	4a40      	ldr	r2, [pc, #256]	; (8007c10 <EE_WriteVariable+0x144>)
 8007b10:	8812      	ldrh	r2, [r2, #0]
 8007b12:	b292      	uxth	r2, r2
      if (PageStatusA == VALID_PAGE)
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d007      	beq.n	8007b28 <EE_WriteVariable+0x5c>
    /* Old page address where variable will be taken from */
    OldPageAddress = PAGEA1_BASE_ADDRESS;
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8007b18:	342b      	adds	r4, #43	; 0x2b
      else if (PageStatusB == VALID_PAGE)
 8007b1a:	2a00      	cmp	r2, #0
 8007b1c:	d1e8      	bne.n	8007af0 <EE_WriteVariable+0x24>
    OldPageAddress = PAGEB1_BASE_ADDRESS;
 8007b1e:	4b3c      	ldr	r3, [pc, #240]	; (8007c10 <EE_WriteVariable+0x144>)
 8007b20:	469b      	mov	fp, r3
    NewPageAddress = PAGEA1_BASE_ADDRESS;
 8007b22:	4b3a      	ldr	r3, [pc, #232]	; (8007c0c <EE_WriteVariable+0x140>)
 8007b24:	469a      	mov	sl, r3
 8007b26:	e003      	b.n	8007b30 <EE_WriteVariable+0x64>
    OldPageAddress = PAGEA1_BASE_ADDRESS;
 8007b28:	4b38      	ldr	r3, [pc, #224]	; (8007c0c <EE_WriteVariable+0x140>)
 8007b2a:	469b      	mov	fp, r3
    NewPageAddress = PAGEB1_BASE_ADDRESS;
 8007b2c:	4b38      	ldr	r3, [pc, #224]	; (8007c10 <EE_WriteVariable+0x144>)
 8007b2e:	469a      	mov	sl, r3
  }

  /* Set the new Page status to RECEIVE_DATA status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);
 8007b30:	4a38      	ldr	r2, [pc, #224]	; (8007c14 <EE_WriteVariable+0x148>)
 8007b32:	2300      	movs	r3, #0
 8007b34:	4651      	mov	r1, sl
 8007b36:	2001      	movs	r0, #1
 8007b38:	f009 ff5a 	bl	80119f0 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007b3c:	4836      	ldr	r0, [pc, #216]	; (8007c18 <EE_WriteVariable+0x14c>)
 8007b3e:	f009 ff29 	bl	8011994 <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8007b42:	2800      	cmp	r0, #0
 8007b44:	d003      	beq.n	8007b4e <EE_WriteVariable+0x82>
  {
    return pFlash.ErrorCode;
 8007b46:	4b35      	ldr	r3, [pc, #212]	; (8007c1c <EE_WriteVariable+0x150>)
 8007b48:	69dc      	ldr	r4, [r3, #28]
 8007b4a:	b2a4      	uxth	r4, r4
 8007b4c:	e7d0      	b.n	8007af0 <EE_WriteVariable+0x24>
  }
	else
	{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007b4e:	4a34      	ldr	r2, [pc, #208]	; (8007c20 <EE_WriteVariable+0x154>)
 8007b50:	6913      	ldr	r3, [r2, #16]
 8007b52:	2101      	movs	r1, #1
 8007b54:	438b      	bics	r3, r1
 8007b56:	6113      	str	r3, [r2, #16]
	}
			
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8007b58:	0029      	movs	r1, r5
 8007b5a:	0030      	movs	r0, r6
 8007b5c:	f7ff ff20 	bl	80079a0 <EE_VerifyPageFullWriteVariable>
 8007b60:	9001      	str	r0, [sp, #4]
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d150      	bne.n	8007c08 <EE_WriteVariable+0x13c>
  {
    return EepromStatus;
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007b66:	2501      	movs	r5, #1
  {
    if (VarIdx != VirtAddress)  /* Check each variable except the one passed as parameter */
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007b68:	4b2e      	ldr	r3, [pc, #184]	; (8007c24 <EE_WriteVariable+0x158>)
 8007b6a:	4698      	mov	r8, r3
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007b6c:	4699      	mov	r9, r3
  for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007b6e:	4f2e      	ldr	r7, [pc, #184]	; (8007c28 <EE_WriteVariable+0x15c>)
 8007b70:	e003      	b.n	8007b7a <EE_WriteVariable+0xae>
 8007b72:	3501      	adds	r5, #1
 8007b74:	b2ad      	uxth	r5, r5
 8007b76:	42bd      	cmp	r5, r7
 8007b78:	d00f      	beq.n	8007b9a <EE_WriteVariable+0xce>
    if (VarIdx != VirtAddress)  /* Check each variable except the one passed as parameter */
 8007b7a:	42ae      	cmp	r6, r5
 8007b7c:	d0f9      	beq.n	8007b72 <EE_WriteVariable+0xa6>
      ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007b7e:	4641      	mov	r1, r8
 8007b80:	0028      	movs	r0, r5
 8007b82:	f7ff ff77 	bl	8007a74 <EE_ReadVariable>
      if (ReadStatus != 0x1)
 8007b86:	2801      	cmp	r0, #1
 8007b88:	d0f3      	beq.n	8007b72 <EE_WriteVariable+0xa6>
        EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007b8a:	464b      	mov	r3, r9
 8007b8c:	8819      	ldrh	r1, [r3, #0]
 8007b8e:	0028      	movs	r0, r5
 8007b90:	f7ff ff06 	bl	80079a0 <EE_VerifyPageFullWriteVariable>
 8007b94:	1e04      	subs	r4, r0, #0
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8007b96:	d0ec      	beq.n	8007b72 <EE_WriteVariable+0xa6>
 8007b98:	e7aa      	b.n	8007af0 <EE_WriteVariable+0x24>
      }
    }
  }

  /* Erase the old Page: Set old Page status to ERASED status */
  FLASH_PageErase(OldPageAddress);
 8007b9a:	4658      	mov	r0, fp
 8007b9c:	f009 ffa0 	bl	8011ae0 <FLASH_PageErase>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007ba0:	481d      	ldr	r0, [pc, #116]	; (8007c18 <EE_WriteVariable+0x14c>)
 8007ba2:	f009 fef7 	bl	8011994 <FLASH_WaitForLastOperation>
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	d003      	beq.n	8007bb2 <EE_WriteVariable+0xe6>
  {
    return pFlash.ErrorCode;
 8007baa:	4b1c      	ldr	r3, [pc, #112]	; (8007c1c <EE_WriteVariable+0x150>)
 8007bac:	69dc      	ldr	r4, [r3, #28]
 8007bae:	b2a4      	uxth	r4, r4
 8007bb0:	e79e      	b.n	8007af0 <EE_WriteVariable+0x24>
  }
	else
	{
		/* Erase the other half of the old Page: Set old Page status to ERASED status */
		FLASH_PageErase(OldPageAddress + PAGE_SIZE);
 8007bb2:	2080      	movs	r0, #128	; 0x80
 8007bb4:	0100      	lsls	r0, r0, #4
 8007bb6:	4458      	add	r0, fp
 8007bb8:	f009 ff92 	bl	8011ae0 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007bbc:	4816      	ldr	r0, [pc, #88]	; (8007c18 <EE_WriteVariable+0x14c>)
 8007bbe:	f009 fee9 	bl	8011994 <FLASH_WaitForLastOperation>
		 if (FlashStatus != HAL_OK)
 8007bc2:	2800      	cmp	r0, #0
 8007bc4:	d003      	beq.n	8007bce <EE_WriteVariable+0x102>
		{
			return pFlash.ErrorCode;
 8007bc6:	4b15      	ldr	r3, [pc, #84]	; (8007c1c <EE_WriteVariable+0x150>)
 8007bc8:	69dc      	ldr	r4, [r3, #28]
 8007bca:	b2a4      	uxth	r4, r4
 8007bcc:	e790      	b.n	8007af0 <EE_WriteVariable+0x24>
		}
		else
		{
			/* Operation is completed, disable the PER Bit */
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007bce:	4a14      	ldr	r2, [pc, #80]	; (8007c20 <EE_WriteVariable+0x154>)
 8007bd0:	6913      	ldr	r3, [r2, #16]
 8007bd2:	2102      	movs	r1, #2
 8007bd4:	438b      	bics	r3, r1
 8007bd6:	6113      	str	r3, [r2, #16]
		}
	}
	
  /* Set new Page status to VALID_PAGE status */
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);
 8007bd8:	2200      	movs	r2, #0
 8007bda:	2300      	movs	r3, #0
 8007bdc:	4651      	mov	r1, sl
 8007bde:	2001      	movs	r0, #1
 8007be0:	f009 ff06 	bl	80119f0 <HAL_FLASH_Program>
	/* Wait for last operation to be completed */
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007be4:	480c      	ldr	r0, [pc, #48]	; (8007c18 <EE_WriteVariable+0x14c>)
 8007be6:	f009 fed5 	bl	8011994 <FLASH_WaitForLastOperation>
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8007bea:	2800      	cmp	r0, #0
 8007bec:	d003      	beq.n	8007bf6 <EE_WriteVariable+0x12a>
  {
    return pFlash.ErrorCode;
 8007bee:	4b0b      	ldr	r3, [pc, #44]	; (8007c1c <EE_WriteVariable+0x150>)
 8007bf0:	69dc      	ldr	r4, [r3, #28]
 8007bf2:	b2a4      	uxth	r4, r4
 8007bf4:	e77c      	b.n	8007af0 <EE_WriteVariable+0x24>
  }
	else
	{
		/* If the program operation is completed, disable the PG Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007bf6:	4a0a      	ldr	r2, [pc, #40]	; (8007c20 <EE_WriteVariable+0x154>)
 8007bf8:	6913      	ldr	r3, [r2, #16]
 8007bfa:	2101      	movs	r1, #1
 8007bfc:	438b      	bics	r3, r1
 8007bfe:	6113      	str	r3, [r2, #16]
	}
			
	HAL_FLASH_Lock();
 8007c00:	f009 febe 	bl	8011980 <HAL_FLASH_Lock>
	
  /* Return last operation flash status */
  return FlashStatus;
 8007c04:	9c01      	ldr	r4, [sp, #4]
 8007c06:	e773      	b.n	8007af0 <EE_WriteVariable+0x24>
    return EepromStatus;
 8007c08:	9c01      	ldr	r4, [sp, #4]
 8007c0a:	e771      	b.n	8007af0 <EE_WriteVariable+0x24>
 8007c0c:	0801e000 	.word	0x0801e000
 8007c10:	0801f000 	.word	0x0801f000
 8007c14:	0000eeee 	.word	0x0000eeee
 8007c18:	0000c350 	.word	0x0000c350
 8007c1c:	20006b80 	.word	0x20006b80
 8007c20:	40022000 	.word	0x40022000
 8007c24:	20001210 	.word	0x20001210
 8007c28:	00000401 	.word	0x00000401

08007c2c <EE_Format>:
{
 8007c2c:	b510      	push	{r4, lr}
	HAL_FLASH_Unlock();
 8007c2e:	f009 fe93 	bl	8011958 <HAL_FLASH_Unlock>
	FLASH_PageErase(PAGEA1_BASE_ADDRESS);	
 8007c32:	4829      	ldr	r0, [pc, #164]	; (8007cd8 <EE_Format+0xac>)
 8007c34:	f009 ff54 	bl	8011ae0 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007c38:	4828      	ldr	r0, [pc, #160]	; (8007cdc <EE_Format+0xb0>)
 8007c3a:	f009 feab 	bl	8011994 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 8007c3e:	2800      	cmp	r0, #0
 8007c40:	d003      	beq.n	8007c4a <EE_Format+0x1e>
		return pFlash.ErrorCode;
 8007c42:	4b27      	ldr	r3, [pc, #156]	; (8007ce0 <EE_Format+0xb4>)
 8007c44:	69d8      	ldr	r0, [r3, #28]
 8007c46:	b280      	uxth	r0, r0
}
 8007c48:	bd10      	pop	{r4, pc}
		FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007c4a:	4826      	ldr	r0, [pc, #152]	; (8007ce4 <EE_Format+0xb8>)
 8007c4c:	f009 ff48 	bl	8011ae0 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007c50:	4822      	ldr	r0, [pc, #136]	; (8007cdc <EE_Format+0xb0>)
 8007c52:	f009 fe9f 	bl	8011994 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 8007c56:	2800      	cmp	r0, #0
 8007c58:	d003      	beq.n	8007c62 <EE_Format+0x36>
			return pFlash.ErrorCode;
 8007c5a:	4b21      	ldr	r3, [pc, #132]	; (8007ce0 <EE_Format+0xb4>)
 8007c5c:	69d8      	ldr	r0, [r3, #28]
 8007c5e:	b280      	uxth	r0, r0
 8007c60:	e7f2      	b.n	8007c48 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007c62:	4a21      	ldr	r2, [pc, #132]	; (8007ce8 <EE_Format+0xbc>)
 8007c64:	6913      	ldr	r3, [r2, #16]
 8007c66:	2102      	movs	r1, #2
 8007c68:	438b      	bics	r3, r1
 8007c6a:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	2300      	movs	r3, #0
 8007c70:	4919      	ldr	r1, [pc, #100]	; (8007cd8 <EE_Format+0xac>)
 8007c72:	2001      	movs	r0, #1
 8007c74:	f009 febc 	bl	80119f0 <HAL_FLASH_Program>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007c78:	4818      	ldr	r0, [pc, #96]	; (8007cdc <EE_Format+0xb0>)
 8007c7a:	f009 fe8b 	bl	8011994 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	d003      	beq.n	8007c8a <EE_Format+0x5e>
		return pFlash.ErrorCode;
 8007c82:	4b17      	ldr	r3, [pc, #92]	; (8007ce0 <EE_Format+0xb4>)
 8007c84:	69d8      	ldr	r0, [r3, #28]
 8007c86:	b280      	uxth	r0, r0
 8007c88:	e7de      	b.n	8007c48 <EE_Format+0x1c>
		CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007c8a:	4a17      	ldr	r2, [pc, #92]	; (8007ce8 <EE_Format+0xbc>)
 8007c8c:	6913      	ldr	r3, [r2, #16]
 8007c8e:	2101      	movs	r1, #1
 8007c90:	438b      	bics	r3, r1
 8007c92:	6113      	str	r3, [r2, #16]
	FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007c94:	4815      	ldr	r0, [pc, #84]	; (8007cec <EE_Format+0xc0>)
 8007c96:	f009 ff23 	bl	8011ae0 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007c9a:	4810      	ldr	r0, [pc, #64]	; (8007cdc <EE_Format+0xb0>)
 8007c9c:	f009 fe7a 	bl	8011994 <FLASH_WaitForLastOperation>
	if (FlashStatus != HAL_OK)
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	d003      	beq.n	8007cac <EE_Format+0x80>
		return pFlash.ErrorCode;
 8007ca4:	4b0e      	ldr	r3, [pc, #56]	; (8007ce0 <EE_Format+0xb4>)
 8007ca6:	69d8      	ldr	r0, [r3, #28]
 8007ca8:	b280      	uxth	r0, r0
 8007caa:	e7cd      	b.n	8007c48 <EE_Format+0x1c>
		FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007cac:	4810      	ldr	r0, [pc, #64]	; (8007cf0 <EE_Format+0xc4>)
 8007cae:	f009 ff17 	bl	8011ae0 <FLASH_PageErase>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007cb2:	480a      	ldr	r0, [pc, #40]	; (8007cdc <EE_Format+0xb0>)
 8007cb4:	f009 fe6e 	bl	8011994 <FLASH_WaitForLastOperation>
		if(FlashStatus != HAL_OK)
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d003      	beq.n	8007cc4 <EE_Format+0x98>
			return pFlash.ErrorCode;
 8007cbc:	4b08      	ldr	r3, [pc, #32]	; (8007ce0 <EE_Format+0xb4>)
 8007cbe:	69d8      	ldr	r0, [r3, #28]
 8007cc0:	b280      	uxth	r0, r0
 8007cc2:	e7c1      	b.n	8007c48 <EE_Format+0x1c>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007cc4:	4a08      	ldr	r2, [pc, #32]	; (8007ce8 <EE_Format+0xbc>)
 8007cc6:	6913      	ldr	r3, [r2, #16]
 8007cc8:	2101      	movs	r1, #1
 8007cca:	438b      	bics	r3, r1
 8007ccc:	6113      	str	r3, [r2, #16]
	HAL_FLASH_Lock();
 8007cce:	f009 fe57 	bl	8011980 <HAL_FLASH_Lock>
  return FlashStatus;
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	e7b8      	b.n	8007c48 <EE_Format+0x1c>
 8007cd6:	46c0      	nop			; (mov r8, r8)
 8007cd8:	0801e000 	.word	0x0801e000
 8007cdc:	0000c350 	.word	0x0000c350
 8007ce0:	20006b80 	.word	0x20006b80
 8007ce4:	0801e800 	.word	0x0801e800
 8007ce8:	40022000 	.word	0x40022000
 8007cec:	0801f000 	.word	0x0801f000
 8007cf0:	0801f800 	.word	0x0801f800

08007cf4 <EE_Init>:
{
 8007cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf6:	46ce      	mov	lr, r9
 8007cf8:	4647      	mov	r7, r8
 8007cfa:	b580      	push	{r7, lr}
	HAL_FLASH_Unlock();
 8007cfc:	f009 fe2c 	bl	8011958 <HAL_FLASH_Unlock>
  PageStatusA = (*(__IO uint16_t*)PAGEA1_BASE_ADDRESS);
 8007d00:	4bbf      	ldr	r3, [pc, #764]	; (8008000 <EE_Init+0x30c>)
 8007d02:	881b      	ldrh	r3, [r3, #0]
 8007d04:	b29b      	uxth	r3, r3
  PageStatusB = (*(__IO uint16_t*)PAGEB1_BASE_ADDRESS);
 8007d06:	4abf      	ldr	r2, [pc, #764]	; (8008004 <EE_Init+0x310>)
 8007d08:	8812      	ldrh	r2, [r2, #0]
 8007d0a:	b292      	uxth	r2, r2
  switch (PageStatusA)
 8007d0c:	49be      	ldr	r1, [pc, #760]	; (8008008 <EE_Init+0x314>)
 8007d0e:	428b      	cmp	r3, r1
 8007d10:	d100      	bne.n	8007d14 <EE_Init+0x20>
 8007d12:	e075      	b.n	8007e00 <EE_Init+0x10c>
 8007d14:	49bd      	ldr	r1, [pc, #756]	; (800800c <EE_Init+0x318>)
 8007d16:	428b      	cmp	r3, r1
 8007d18:	d012      	beq.n	8007d40 <EE_Init+0x4c>
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d100      	bne.n	8007d20 <EE_Init+0x2c>
 8007d1e:	e10b      	b.n	8007f38 <EE_Init+0x244>
      FlashStatus = EE_Format();
 8007d20:	f7ff ff84 	bl	8007c2c <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007d24:	48ba      	ldr	r0, [pc, #744]	; (8008010 <EE_Init+0x31c>)
 8007d26:	f009 fe35 	bl	8011994 <FLASH_WaitForLastOperation>
 8007d2a:	b285      	uxth	r5, r0
				if(FlashStatus != HAL_OK)
 8007d2c:	2d00      	cmp	r5, #0
 8007d2e:	d102      	bne.n	8007d36 <EE_Init+0x42>
	HAL_FLASH_Lock();
 8007d30:	f009 fe26 	bl	8011980 <HAL_FLASH_Lock>
  return HAL_OK;
 8007d34:	2500      	movs	r5, #0
}
 8007d36:	0028      	movs	r0, r5
 8007d38:	bcc0      	pop	{r6, r7}
 8007d3a:	46b9      	mov	r9, r7
 8007d3c:	46b0      	mov	r8, r6
 8007d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (PageStatusB == VALID_PAGE) /* PageA erased, PageB valid */
 8007d40:	2a00      	cmp	r2, #0
 8007d42:	d00d      	beq.n	8007d60 <EE_Init+0x6c>
      else if (PageStatusB == RECEIVE_DATA) /* PageA erased, PageB receive */
 8007d44:	4bb0      	ldr	r3, [pc, #704]	; (8008008 <EE_Init+0x314>)
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d028      	beq.n	8007d9c <EE_Init+0xa8>
        FlashStatus = EE_Format();
 8007d4a:	f7ff ff6f 	bl	8007c2c <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007d4e:	48b0      	ldr	r0, [pc, #704]	; (8008010 <EE_Init+0x31c>)
 8007d50:	f009 fe20 	bl	8011994 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007d54:	2800      	cmp	r0, #0
 8007d56:	d0eb      	beq.n	8007d30 <EE_Init+0x3c>
          return pFlash.ErrorCode;
 8007d58:	4bae      	ldr	r3, [pc, #696]	; (8008014 <EE_Init+0x320>)
 8007d5a:	69dd      	ldr	r5, [r3, #28]
 8007d5c:	b2ad      	uxth	r5, r5
 8007d5e:	e7ea      	b.n	8007d36 <EE_Init+0x42>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);			
 8007d60:	48a7      	ldr	r0, [pc, #668]	; (8008000 <EE_Init+0x30c>)
 8007d62:	f009 febd 	bl	8011ae0 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007d66:	48aa      	ldr	r0, [pc, #680]	; (8008010 <EE_Init+0x31c>)
 8007d68:	f009 fe14 	bl	8011994 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d003      	beq.n	8007d78 <EE_Init+0x84>
          return pFlash.ErrorCode;
 8007d70:	4ba8      	ldr	r3, [pc, #672]	; (8008014 <EE_Init+0x320>)
 8007d72:	69dd      	ldr	r5, [r3, #28]
 8007d74:	b2ad      	uxth	r5, r5
 8007d76:	e7de      	b.n	8007d36 <EE_Init+0x42>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007d78:	48a7      	ldr	r0, [pc, #668]	; (8008018 <EE_Init+0x324>)
 8007d7a:	f009 feb1 	bl	8011ae0 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007d7e:	48a4      	ldr	r0, [pc, #656]	; (8008010 <EE_Init+0x31c>)
 8007d80:	f009 fe08 	bl	8011994 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007d84:	2800      	cmp	r0, #0
 8007d86:	d105      	bne.n	8007d94 <EE_Init+0xa0>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007d88:	4aa4      	ldr	r2, [pc, #656]	; (800801c <EE_Init+0x328>)
 8007d8a:	6913      	ldr	r3, [r2, #16]
 8007d8c:	2102      	movs	r1, #2
 8007d8e:	438b      	bics	r3, r1
 8007d90:	6113      	str	r3, [r2, #16]
 8007d92:	e7cd      	b.n	8007d30 <EE_Init+0x3c>
						return pFlash.ErrorCode;
 8007d94:	4b9f      	ldr	r3, [pc, #636]	; (8008014 <EE_Init+0x320>)
 8007d96:	69dd      	ldr	r5, [r3, #28]
 8007d98:	b2ad      	uxth	r5, r5
 8007d9a:	e7cc      	b.n	8007d36 <EE_Init+0x42>
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 8007d9c:	4898      	ldr	r0, [pc, #608]	; (8008000 <EE_Init+0x30c>)
 8007d9e:	f009 fe9f 	bl	8011ae0 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007da2:	489b      	ldr	r0, [pc, #620]	; (8008010 <EE_Init+0x31c>)
 8007da4:	f009 fdf6 	bl	8011994 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007da8:	2800      	cmp	r0, #0
 8007daa:	d003      	beq.n	8007db4 <EE_Init+0xc0>
          return pFlash.ErrorCode;
 8007dac:	4b99      	ldr	r3, [pc, #612]	; (8008014 <EE_Init+0x320>)
 8007dae:	69dd      	ldr	r5, [r3, #28]
 8007db0:	b2ad      	uxth	r5, r5
 8007db2:	e7c0      	b.n	8007d36 <EE_Init+0x42>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8007db4:	4898      	ldr	r0, [pc, #608]	; (8008018 <EE_Init+0x324>)
 8007db6:	f009 fe93 	bl	8011ae0 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007dba:	4895      	ldr	r0, [pc, #596]	; (8008010 <EE_Init+0x31c>)
 8007dbc:	f009 fdea 	bl	8011994 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	d003      	beq.n	8007dcc <EE_Init+0xd8>
						return pFlash.ErrorCode;
 8007dc4:	4b93      	ldr	r3, [pc, #588]	; (8008014 <EE_Init+0x320>)
 8007dc6:	69dd      	ldr	r5, [r3, #28]
 8007dc8:	b2ad      	uxth	r5, r5
 8007dca:	e7b4      	b.n	8007d36 <EE_Init+0x42>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007dcc:	4a93      	ldr	r2, [pc, #588]	; (800801c <EE_Init+0x328>)
 8007dce:	6913      	ldr	r3, [r2, #16]
 8007dd0:	2102      	movs	r1, #2
 8007dd2:	438b      	bics	r3, r1
 8007dd4:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	2300      	movs	r3, #0
 8007dda:	498a      	ldr	r1, [pc, #552]	; (8008004 <EE_Init+0x310>)
 8007ddc:	2001      	movs	r0, #1
 8007dde:	f009 fe07 	bl	80119f0 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007de2:	488b      	ldr	r0, [pc, #556]	; (8008010 <EE_Init+0x31c>)
 8007de4:	f009 fdd6 	bl	8011994 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007de8:	2800      	cmp	r0, #0
 8007dea:	d105      	bne.n	8007df8 <EE_Init+0x104>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007dec:	4a8b      	ldr	r2, [pc, #556]	; (800801c <EE_Init+0x328>)
 8007dee:	6913      	ldr	r3, [r2, #16]
 8007df0:	2101      	movs	r1, #1
 8007df2:	438b      	bics	r3, r1
 8007df4:	6113      	str	r3, [r2, #16]
 8007df6:	e79b      	b.n	8007d30 <EE_Init+0x3c>
          return pFlash.ErrorCode;
 8007df8:	4b86      	ldr	r3, [pc, #536]	; (8008014 <EE_Init+0x320>)
 8007dfa:	69dd      	ldr	r5, [r3, #28]
 8007dfc:	b2ad      	uxth	r5, r5
 8007dfe:	e79a      	b.n	8007d36 <EE_Init+0x42>
      if (PageStatusB == VALID_PAGE) /* PageA receive, PageB valid */
 8007e00:	2a00      	cmp	r2, #0
 8007e02:	d158      	bne.n	8007eb6 <EE_Init+0x1c2>
 8007e04:	2401      	movs	r4, #1
  int16_t x = -1;
 8007e06:	2601      	movs	r6, #1
 8007e08:	4276      	negs	r6, r6
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 8007e0a:	4f85      	ldr	r7, [pc, #532]	; (8008020 <EE_Init+0x32c>)
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007e0c:	4b85      	ldr	r3, [pc, #532]	; (8008024 <EE_Init+0x330>)
 8007e0e:	4698      	mov	r8, r3
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007e10:	4699      	mov	r9, r3
 8007e12:	e005      	b.n	8007e20 <EE_Init+0x12c>
            x = VarIdx;
 8007e14:	b226      	sxth	r6, r4
 8007e16:	e008      	b.n	8007e2a <EE_Init+0x136>
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007e18:	3401      	adds	r4, #1
 8007e1a:	4b83      	ldr	r3, [pc, #524]	; (8008028 <EE_Init+0x334>)
 8007e1c:	429c      	cmp	r4, r3
 8007e1e:	d018      	beq.n	8007e52 <EE_Init+0x15e>
 8007e20:	b2a5      	uxth	r5, r4
          if (( *(__IO uint16_t*)(PAGEA1_BASE_ADDRESS + 6)) == VarIdx)
 8007e22:	883b      	ldrh	r3, [r7, #0]
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	42ab      	cmp	r3, r5
 8007e28:	d0f4      	beq.n	8007e14 <EE_Init+0x120>
          if (VarIdx != x)
 8007e2a:	42a6      	cmp	r6, r4
 8007e2c:	d0f4      	beq.n	8007e18 <EE_Init+0x124>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007e2e:	4641      	mov	r1, r8
 8007e30:	0028      	movs	r0, r5
 8007e32:	f7ff fe1f 	bl	8007a74 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 8007e36:	2801      	cmp	r0, #1
 8007e38:	d0ee      	beq.n	8007e18 <EE_Init+0x124>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007e3a:	464b      	mov	r3, r9
 8007e3c:	8819      	ldrh	r1, [r3, #0]
 8007e3e:	0028      	movs	r0, r5
 8007e40:	f7ff fdae 	bl	80079a0 <EE_VerifyPageFullWriteVariable>
 8007e44:	0005      	movs	r5, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007e46:	4872      	ldr	r0, [pc, #456]	; (8008010 <EE_Init+0x31c>)
 8007e48:	f009 fda4 	bl	8011994 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	d0e3      	beq.n	8007e18 <EE_Init+0x124>
 8007e50:	e771      	b.n	8007d36 <EE_Init+0x42>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 8007e52:	2200      	movs	r2, #0
 8007e54:	2300      	movs	r3, #0
 8007e56:	496a      	ldr	r1, [pc, #424]	; (8008000 <EE_Init+0x30c>)
 8007e58:	2001      	movs	r0, #1
 8007e5a:	f009 fdc9 	bl	80119f0 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007e5e:	486c      	ldr	r0, [pc, #432]	; (8008010 <EE_Init+0x31c>)
 8007e60:	f009 fd98 	bl	8011994 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007e64:	2800      	cmp	r0, #0
 8007e66:	d003      	beq.n	8007e70 <EE_Init+0x17c>
          return pFlash.ErrorCode;
 8007e68:	4b6a      	ldr	r3, [pc, #424]	; (8008014 <EE_Init+0x320>)
 8007e6a:	69dd      	ldr	r5, [r3, #28]
 8007e6c:	b2ad      	uxth	r5, r5
 8007e6e:	e762      	b.n	8007d36 <EE_Init+0x42>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007e70:	4a6a      	ldr	r2, [pc, #424]	; (800801c <EE_Init+0x328>)
 8007e72:	6913      	ldr	r3, [r2, #16]
 8007e74:	2101      	movs	r1, #1
 8007e76:	438b      	bics	r3, r1
 8007e78:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007e7a:	4862      	ldr	r0, [pc, #392]	; (8008004 <EE_Init+0x310>)
 8007e7c:	f009 fe30 	bl	8011ae0 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007e80:	4863      	ldr	r0, [pc, #396]	; (8008010 <EE_Init+0x31c>)
 8007e82:	f009 fd87 	bl	8011994 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007e86:	2800      	cmp	r0, #0
 8007e88:	d003      	beq.n	8007e92 <EE_Init+0x19e>
          return pFlash.ErrorCode;
 8007e8a:	4b62      	ldr	r3, [pc, #392]	; (8008014 <EE_Init+0x320>)
 8007e8c:	69dd      	ldr	r5, [r3, #28]
 8007e8e:	b2ad      	uxth	r5, r5
 8007e90:	e751      	b.n	8007d36 <EE_Init+0x42>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007e92:	4866      	ldr	r0, [pc, #408]	; (800802c <EE_Init+0x338>)
 8007e94:	f009 fe24 	bl	8011ae0 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007e98:	485d      	ldr	r0, [pc, #372]	; (8008010 <EE_Init+0x31c>)
 8007e9a:	f009 fd7b 	bl	8011994 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	d105      	bne.n	8007eae <EE_Init+0x1ba>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007ea2:	4a5e      	ldr	r2, [pc, #376]	; (800801c <EE_Init+0x328>)
 8007ea4:	6913      	ldr	r3, [r2, #16]
 8007ea6:	2102      	movs	r1, #2
 8007ea8:	438b      	bics	r3, r1
 8007eaa:	6113      	str	r3, [r2, #16]
 8007eac:	e740      	b.n	8007d30 <EE_Init+0x3c>
						return pFlash.ErrorCode;
 8007eae:	4b59      	ldr	r3, [pc, #356]	; (8008014 <EE_Init+0x320>)
 8007eb0:	69dd      	ldr	r5, [r3, #28]
 8007eb2:	b2ad      	uxth	r5, r5
 8007eb4:	e73f      	b.n	8007d36 <EE_Init+0x42>
      else if (PageStatusB == ERASED) /* PageA receive, PageB erased */
 8007eb6:	4b55      	ldr	r3, [pc, #340]	; (800800c <EE_Init+0x318>)
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d00b      	beq.n	8007ed4 <EE_Init+0x1e0>
        FlashStatus = EE_Format();
 8007ebc:	f7ff feb6 	bl	8007c2c <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007ec0:	4853      	ldr	r0, [pc, #332]	; (8008010 <EE_Init+0x31c>)
 8007ec2:	f009 fd67 	bl	8011994 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	d100      	bne.n	8007ecc <EE_Init+0x1d8>
 8007eca:	e731      	b.n	8007d30 <EE_Init+0x3c>
          return pFlash.ErrorCode;
 8007ecc:	4b51      	ldr	r3, [pc, #324]	; (8008014 <EE_Init+0x320>)
 8007ece:	69dd      	ldr	r5, [r3, #28]
 8007ed0:	b2ad      	uxth	r5, r5
 8007ed2:	e730      	b.n	8007d36 <EE_Init+0x42>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007ed4:	484b      	ldr	r0, [pc, #300]	; (8008004 <EE_Init+0x310>)
 8007ed6:	f009 fe03 	bl	8011ae0 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007eda:	484d      	ldr	r0, [pc, #308]	; (8008010 <EE_Init+0x31c>)
 8007edc:	f009 fd5a 	bl	8011994 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	d003      	beq.n	8007eec <EE_Init+0x1f8>
          return pFlash.ErrorCode;
 8007ee4:	4b4b      	ldr	r3, [pc, #300]	; (8008014 <EE_Init+0x320>)
 8007ee6:	69dd      	ldr	r5, [r3, #28]
 8007ee8:	b2ad      	uxth	r5, r5
 8007eea:	e724      	b.n	8007d36 <EE_Init+0x42>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007eec:	484f      	ldr	r0, [pc, #316]	; (800802c <EE_Init+0x338>)
 8007eee:	f009 fdf7 	bl	8011ae0 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007ef2:	4847      	ldr	r0, [pc, #284]	; (8008010 <EE_Init+0x31c>)
 8007ef4:	f009 fd4e 	bl	8011994 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	d003      	beq.n	8007f04 <EE_Init+0x210>
						return pFlash.ErrorCode;
 8007efc:	4b45      	ldr	r3, [pc, #276]	; (8008014 <EE_Init+0x320>)
 8007efe:	69dd      	ldr	r5, [r3, #28]
 8007f00:	b2ad      	uxth	r5, r5
 8007f02:	e718      	b.n	8007d36 <EE_Init+0x42>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007f04:	4a45      	ldr	r2, [pc, #276]	; (800801c <EE_Init+0x328>)
 8007f06:	6913      	ldr	r3, [r2, #16]
 8007f08:	2102      	movs	r1, #2
 8007f0a:	438b      	bics	r3, r1
 8007f0c:	6113      	str	r3, [r2, #16]
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEA1_BASE_ADDRESS, VALID_PAGE);
 8007f0e:	2200      	movs	r2, #0
 8007f10:	2300      	movs	r3, #0
 8007f12:	493b      	ldr	r1, [pc, #236]	; (8008000 <EE_Init+0x30c>)
 8007f14:	2001      	movs	r0, #1
 8007f16:	f009 fd6b 	bl	80119f0 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007f1a:	483d      	ldr	r0, [pc, #244]	; (8008010 <EE_Init+0x31c>)
 8007f1c:	f009 fd3a 	bl	8011994 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007f20:	2800      	cmp	r0, #0
 8007f22:	d105      	bne.n	8007f30 <EE_Init+0x23c>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8007f24:	4a3d      	ldr	r2, [pc, #244]	; (800801c <EE_Init+0x328>)
 8007f26:	6913      	ldr	r3, [r2, #16]
 8007f28:	2101      	movs	r1, #1
 8007f2a:	438b      	bics	r3, r1
 8007f2c:	6113      	str	r3, [r2, #16]
 8007f2e:	e6ff      	b.n	8007d30 <EE_Init+0x3c>
          return pFlash.ErrorCode;
 8007f30:	4b38      	ldr	r3, [pc, #224]	; (8008014 <EE_Init+0x320>)
 8007f32:	69dd      	ldr	r5, [r3, #28]
 8007f34:	b2ad      	uxth	r5, r5
 8007f36:	e6fe      	b.n	8007d36 <EE_Init+0x42>
      if (PageStatusB == VALID_PAGE) /* Invalid state -> format eeprom */
 8007f38:	2a00      	cmp	r2, #0
 8007f3a:	d00a      	beq.n	8007f52 <EE_Init+0x25e>
      else if (PageStatusB == ERASED) /* PageA valid, PageB erased */
 8007f3c:	4b33      	ldr	r3, [pc, #204]	; (800800c <EE_Init+0x318>)
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d011      	beq.n	8007f66 <EE_Init+0x272>
 8007f42:	2401      	movs	r4, #1
  int16_t x = -1;
 8007f44:	2601      	movs	r6, #1
 8007f46:	4276      	negs	r6, r6
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 8007f48:	4f39      	ldr	r7, [pc, #228]	; (8008030 <EE_Init+0x33c>)
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007f4a:	4b36      	ldr	r3, [pc, #216]	; (8008024 <EE_Init+0x330>)
 8007f4c:	4698      	mov	r8, r3
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007f4e:	4699      	mov	r9, r3
 8007f50:	e02d      	b.n	8007fae <EE_Init+0x2ba>
        FlashStatus = EE_Format();
 8007f52:	f7ff fe6b 	bl	8007c2c <EE_Format>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007f56:	482e      	ldr	r0, [pc, #184]	; (8008010 <EE_Init+0x31c>)
 8007f58:	f009 fd1c 	bl	8011994 <FLASH_WaitForLastOperation>
 8007f5c:	b285      	uxth	r5, r0
				if(FlashStatus != HAL_OK)
 8007f5e:	2d00      	cmp	r5, #0
 8007f60:	d100      	bne.n	8007f64 <EE_Init+0x270>
 8007f62:	e6e5      	b.n	8007d30 <EE_Init+0x3c>
 8007f64:	e6e7      	b.n	8007d36 <EE_Init+0x42>
        FLASH_PageErase(PAGEB1_BASE_ADDRESS);
 8007f66:	4827      	ldr	r0, [pc, #156]	; (8008004 <EE_Init+0x310>)
 8007f68:	f009 fdba 	bl	8011ae0 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007f6c:	4828      	ldr	r0, [pc, #160]	; (8008010 <EE_Init+0x31c>)
 8007f6e:	f009 fd11 	bl	8011994 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007f72:	2800      	cmp	r0, #0
 8007f74:	d003      	beq.n	8007f7e <EE_Init+0x28a>
          return pFlash.ErrorCode;
 8007f76:	4b27      	ldr	r3, [pc, #156]	; (8008014 <EE_Init+0x320>)
 8007f78:	69dd      	ldr	r5, [r3, #28]
 8007f7a:	b2ad      	uxth	r5, r5
 8007f7c:	e6db      	b.n	8007d36 <EE_Init+0x42>
					FLASH_PageErase(PAGEB2_BASE_ADDRESS);
 8007f7e:	482b      	ldr	r0, [pc, #172]	; (800802c <EE_Init+0x338>)
 8007f80:	f009 fdae 	bl	8011ae0 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007f84:	4822      	ldr	r0, [pc, #136]	; (8008010 <EE_Init+0x31c>)
 8007f86:	f009 fd05 	bl	8011994 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	d105      	bne.n	8007f9a <EE_Init+0x2a6>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8007f8e:	4a23      	ldr	r2, [pc, #140]	; (800801c <EE_Init+0x328>)
 8007f90:	6913      	ldr	r3, [r2, #16]
 8007f92:	2102      	movs	r1, #2
 8007f94:	438b      	bics	r3, r1
 8007f96:	6113      	str	r3, [r2, #16]
 8007f98:	e6ca      	b.n	8007d30 <EE_Init+0x3c>
						return pFlash.ErrorCode;
 8007f9a:	4b1e      	ldr	r3, [pc, #120]	; (8008014 <EE_Init+0x320>)
 8007f9c:	69dd      	ldr	r5, [r3, #28]
 8007f9e:	b2ad      	uxth	r5, r5
 8007fa0:	e6c9      	b.n	8007d36 <EE_Init+0x42>
            x = VarIdx;
 8007fa2:	b226      	sxth	r6, r4
 8007fa4:	e008      	b.n	8007fb8 <EE_Init+0x2c4>
        for (VarIdx = 1; VarIdx <= NumOfEEPROMvar; VarIdx++)
 8007fa6:	3401      	adds	r4, #1
 8007fa8:	4b1f      	ldr	r3, [pc, #124]	; (8008028 <EE_Init+0x334>)
 8007faa:	429c      	cmp	r4, r3
 8007fac:	d018      	beq.n	8007fe0 <EE_Init+0x2ec>
 8007fae:	b2a5      	uxth	r5, r4
          if ((*(__IO uint16_t*)(PAGEB1_BASE_ADDRESS + 6)) == VarIdx)
 8007fb0:	883b      	ldrh	r3, [r7, #0]
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	42ab      	cmp	r3, r5
 8007fb6:	d0f4      	beq.n	8007fa2 <EE_Init+0x2ae>
          if (VarIdx != x)
 8007fb8:	42a6      	cmp	r6, r4
 8007fba:	d0f4      	beq.n	8007fa6 <EE_Init+0x2b2>
            ReadStatus = EE_ReadVariable(VarIdx, &DataVar);
 8007fbc:	4641      	mov	r1, r8
 8007fbe:	0028      	movs	r0, r5
 8007fc0:	f7ff fd58 	bl	8007a74 <EE_ReadVariable>
            if (ReadStatus != 0x1)
 8007fc4:	2801      	cmp	r0, #1
 8007fc6:	d0ee      	beq.n	8007fa6 <EE_Init+0x2b2>
              EepromStatus = EE_VerifyPageFullWriteVariable(VarIdx, DataVar);
 8007fc8:	464b      	mov	r3, r9
 8007fca:	8819      	ldrh	r1, [r3, #0]
 8007fcc:	0028      	movs	r0, r5
 8007fce:	f7ff fce7 	bl	80079a0 <EE_VerifyPageFullWriteVariable>
 8007fd2:	0005      	movs	r5, r0
							FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007fd4:	480e      	ldr	r0, [pc, #56]	; (8008010 <EE_Init+0x31c>)
 8007fd6:	f009 fcdd 	bl	8011994 <FLASH_WaitForLastOperation>
							if(FlashStatus != HAL_OK)
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	d0e3      	beq.n	8007fa6 <EE_Init+0x2b2>
 8007fde:	e6aa      	b.n	8007d36 <EE_Init+0x42>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, PAGEB1_BASE_ADDRESS, VALID_PAGE);
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	4907      	ldr	r1, [pc, #28]	; (8008004 <EE_Init+0x310>)
 8007fe6:	2001      	movs	r0, #1
 8007fe8:	f009 fd02 	bl	80119f0 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8007fec:	4808      	ldr	r0, [pc, #32]	; (8008010 <EE_Init+0x31c>)
 8007fee:	f009 fcd1 	bl	8011994 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 8007ff2:	2800      	cmp	r0, #0
 8007ff4:	d01e      	beq.n	8008034 <EE_Init+0x340>
          return pFlash.ErrorCode;
 8007ff6:	4b07      	ldr	r3, [pc, #28]	; (8008014 <EE_Init+0x320>)
 8007ff8:	69dd      	ldr	r5, [r3, #28]
 8007ffa:	b2ad      	uxth	r5, r5
 8007ffc:	e69b      	b.n	8007d36 <EE_Init+0x42>
 8007ffe:	46c0      	nop			; (mov r8, r8)
 8008000:	0801e000 	.word	0x0801e000
 8008004:	0801f000 	.word	0x0801f000
 8008008:	0000eeee 	.word	0x0000eeee
 800800c:	0000ffff 	.word	0x0000ffff
 8008010:	0000c350 	.word	0x0000c350
 8008014:	20006b80 	.word	0x20006b80
 8008018:	0801e800 	.word	0x0801e800
 800801c:	40022000 	.word	0x40022000
 8008020:	0801e006 	.word	0x0801e006
 8008024:	20001210 	.word	0x20001210
 8008028:	00000401 	.word	0x00000401
 800802c:	0801f800 	.word	0x0801f800
 8008030:	0801f006 	.word	0x0801f006
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8008034:	4a11      	ldr	r2, [pc, #68]	; (800807c <EE_Init+0x388>)
 8008036:	6913      	ldr	r3, [r2, #16]
 8008038:	2101      	movs	r1, #1
 800803a:	438b      	bics	r3, r1
 800803c:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(PAGEA1_BASE_ADDRESS);
 800803e:	4810      	ldr	r0, [pc, #64]	; (8008080 <EE_Init+0x38c>)
 8008040:	f009 fd4e 	bl	8011ae0 <FLASH_PageErase>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 8008044:	480f      	ldr	r0, [pc, #60]	; (8008084 <EE_Init+0x390>)
 8008046:	f009 fca5 	bl	8011994 <FLASH_WaitForLastOperation>
				if(FlashStatus != HAL_OK)
 800804a:	2800      	cmp	r0, #0
 800804c:	d003      	beq.n	8008056 <EE_Init+0x362>
          return pFlash.ErrorCode;
 800804e:	4b0e      	ldr	r3, [pc, #56]	; (8008088 <EE_Init+0x394>)
 8008050:	69dd      	ldr	r5, [r3, #28]
 8008052:	b2ad      	uxth	r5, r5
 8008054:	e66f      	b.n	8007d36 <EE_Init+0x42>
					FLASH_PageErase(PAGEA2_BASE_ADDRESS);
 8008056:	480d      	ldr	r0, [pc, #52]	; (800808c <EE_Init+0x398>)
 8008058:	f009 fd42 	bl	8011ae0 <FLASH_PageErase>
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800805c:	4809      	ldr	r0, [pc, #36]	; (8008084 <EE_Init+0x390>)
 800805e:	f009 fc99 	bl	8011994 <FLASH_WaitForLastOperation>
					if(FlashStatus != HAL_OK)
 8008062:	2800      	cmp	r0, #0
 8008064:	d105      	bne.n	8008072 <EE_Init+0x37e>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8008066:	4a05      	ldr	r2, [pc, #20]	; (800807c <EE_Init+0x388>)
 8008068:	6913      	ldr	r3, [r2, #16]
 800806a:	2102      	movs	r1, #2
 800806c:	438b      	bics	r3, r1
 800806e:	6113      	str	r3, [r2, #16]
 8008070:	e65e      	b.n	8007d30 <EE_Init+0x3c>
						return pFlash.ErrorCode;
 8008072:	4b05      	ldr	r3, [pc, #20]	; (8008088 <EE_Init+0x394>)
 8008074:	69dd      	ldr	r5, [r3, #28]
 8008076:	b2ad      	uxth	r5, r5
 8008078:	e65d      	b.n	8007d36 <EE_Init+0x42>
 800807a:	46c0      	nop			; (mov r8, r8)
 800807c:	40022000 	.word	0x40022000
 8008080:	0801e000 	.word	0x0801e000
 8008084:	0000c350 	.word	0x0000c350
 8008088:	20006b80 	.word	0x20006b80
 800808c:	0801e800 	.word	0x0801e800

08008090 <StartDefaultTask>:

/*-----------------------------------------------------------*/

/* StartDefaultTask function */
void StartDefaultTask(void * argument)
{
 8008090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008092:	46c6      	mov	lr, r8
 8008094:	b500      	push	{lr}
	
  /* Infinite loop */
  for(;;)
  {
		/* Switch indicator LED according to mode */
		switch (indMode)
 8008096:	4c2a      	ldr	r4, [pc, #168]	; (8008140 <StartDefaultTask+0xb0>)
				indMode = IND_OFF;
				break;
			
			case IND_TOPOLOGY :
				RTOS_IND_blink(100);
				indMode = IND_OFF;
 8008098:	0026      	movs	r6, r4
				break;
			
			case IND_SHORT_BLINK :
				RTOS_IND_blink(30);
				indMode = IND_OFF;
 800809a:	46a0      	mov	r8, r4
 800809c:	e01f      	b.n	80080de <StartDefaultTask+0x4e>
				RTOS_IND_blink(100);
 800809e:	2580      	movs	r5, #128	; 0x80
 80080a0:	012d      	lsls	r5, r5, #4
 80080a2:	2790      	movs	r7, #144	; 0x90
 80080a4:	05ff      	lsls	r7, r7, #23
 80080a6:	2201      	movs	r2, #1
 80080a8:	0029      	movs	r1, r5
 80080aa:	0038      	movs	r0, r7
 80080ac:	f009 fe7c 	bl	8011da8 <HAL_GPIO_WritePin>
 80080b0:	2064      	movs	r0, #100	; 0x64
 80080b2:	f006 fd24 	bl	800eafe <osDelay>
 80080b6:	2200      	movs	r2, #0
 80080b8:	0029      	movs	r1, r5
 80080ba:	0038      	movs	r0, r7
 80080bc:	f009 fe74 	bl	8011da8 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 80080c0:	2300      	movs	r3, #0
 80080c2:	7033      	strb	r3, [r6, #0]
			default:
				break;
		}
		
		/* Read button state */
		CheckAttachedButtons();
 80080c4:	f000 f9f6 	bl	80084b4 <CheckAttachedButtons>
		
		/* Execute activated Command Snippets */
		ExecuteSnippet();
 80080c8:	f7fd fbe8 	bl	800589c <ExecuteSnippet>
		
		/* Reset button state if no delay is needed by this module */
		if(needToDelayButtonStateReset != true)	delayButtonStateReset = false;
 80080cc:	4b1d      	ldr	r3, [pc, #116]	; (8008144 <StartDefaultTask+0xb4>)
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d102      	bne.n	80080da <StartDefaultTask+0x4a>
 80080d4:	4b1c      	ldr	r3, [pc, #112]	; (8008148 <StartDefaultTask+0xb8>)
 80080d6:	2200      	movs	r2, #0
 80080d8:	701a      	strb	r2, [r3, #0]
				
		taskYIELD();
 80080da:	f008 fc09 	bl	80108f0 <vPortYield>
		switch (indMode)
 80080de:	7823      	ldrb	r3, [r4, #0]
 80080e0:	2b02      	cmp	r3, #2
 80080e2:	d0dc      	beq.n	800809e <StartDefaultTask+0xe>
 80080e4:	2b03      	cmp	r3, #3
 80080e6:	d016      	beq.n	8008116 <StartDefaultTask+0x86>
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d1eb      	bne.n	80080c4 <StartDefaultTask+0x34>
				RTOS_IND_blink(200);
 80080ec:	2580      	movs	r5, #128	; 0x80
 80080ee:	012d      	lsls	r5, r5, #4
 80080f0:	2790      	movs	r7, #144	; 0x90
 80080f2:	05ff      	lsls	r7, r7, #23
 80080f4:	2201      	movs	r2, #1
 80080f6:	0029      	movs	r1, r5
 80080f8:	0038      	movs	r0, r7
 80080fa:	f009 fe55 	bl	8011da8 <HAL_GPIO_WritePin>
 80080fe:	20c8      	movs	r0, #200	; 0xc8
 8008100:	f006 fcfd 	bl	800eafe <osDelay>
 8008104:	2200      	movs	r2, #0
 8008106:	0029      	movs	r1, r5
 8008108:	0038      	movs	r0, r7
 800810a:	f009 fe4d 	bl	8011da8 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 800810e:	4b0c      	ldr	r3, [pc, #48]	; (8008140 <StartDefaultTask+0xb0>)
 8008110:	2200      	movs	r2, #0
 8008112:	701a      	strb	r2, [r3, #0]
				break;
 8008114:	e7d6      	b.n	80080c4 <StartDefaultTask+0x34>
				RTOS_IND_blink(30);
 8008116:	2580      	movs	r5, #128	; 0x80
 8008118:	012d      	lsls	r5, r5, #4
 800811a:	2790      	movs	r7, #144	; 0x90
 800811c:	05ff      	lsls	r7, r7, #23
 800811e:	2201      	movs	r2, #1
 8008120:	0029      	movs	r1, r5
 8008122:	0038      	movs	r0, r7
 8008124:	f009 fe40 	bl	8011da8 <HAL_GPIO_WritePin>
 8008128:	201e      	movs	r0, #30
 800812a:	f006 fce8 	bl	800eafe <osDelay>
 800812e:	2200      	movs	r2, #0
 8008130:	0029      	movs	r1, r5
 8008132:	0038      	movs	r0, r7
 8008134:	f009 fe38 	bl	8011da8 <HAL_GPIO_WritePin>
				indMode = IND_OFF;
 8008138:	2300      	movs	r3, #0
 800813a:	4642      	mov	r2, r8
 800813c:	7013      	strb	r3, [r2, #0]
				break;
 800813e:	e7c1      	b.n	80080c4 <StartDefaultTask+0x34>
 8008140:	20000d60 	.word	0x20000d60
 8008144:	20001288 	.word	0x20001288
 8008148:	20001287 	.word	0x20001287

0800814c <MX_FREERTOS_Init>:
{
 800814c:	b570      	push	{r4, r5, r6, lr}
 800814e:	b090      	sub	sp, #64	; 0x40
  xTaskCreate(StartDefaultTask, (const char *) "DefaultTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &defaultTaskHandle);	
 8008150:	25a0      	movs	r5, #160	; 0xa0
 8008152:	006d      	lsls	r5, r5, #1
 8008154:	2400      	movs	r4, #0
 8008156:	9403      	str	r4, [sp, #12]
 8008158:	9402      	str	r4, [sp, #8]
 800815a:	4b5e      	ldr	r3, [pc, #376]	; (80082d4 <MX_FREERTOS_Init+0x188>)
 800815c:	9301      	str	r3, [sp, #4]
 800815e:	2603      	movs	r6, #3
 8008160:	9600      	str	r6, [sp, #0]
 8008162:	2300      	movs	r3, #0
 8008164:	002a      	movs	r2, r5
 8008166:	495c      	ldr	r1, [pc, #368]	; (80082d8 <MX_FREERTOS_Init+0x18c>)
 8008168:	485c      	ldr	r0, [pc, #368]	; (80082dc <MX_FREERTOS_Init+0x190>)
 800816a:	f007 fadd 	bl	800f728 <xTaskGenericCreate>
	xTaskCreate(BackEndTask, (const char *) "BackEndTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &BackEndTaskHandle);
 800816e:	9403      	str	r4, [sp, #12]
 8008170:	9402      	str	r4, [sp, #8]
 8008172:	4b5b      	ldr	r3, [pc, #364]	; (80082e0 <MX_FREERTOS_Init+0x194>)
 8008174:	9301      	str	r3, [sp, #4]
 8008176:	9600      	str	r6, [sp, #0]
 8008178:	2300      	movs	r3, #0
 800817a:	002a      	movs	r2, r5
 800817c:	4959      	ldr	r1, [pc, #356]	; (80082e4 <MX_FREERTOS_Init+0x198>)
 800817e:	485a      	ldr	r0, [pc, #360]	; (80082e8 <MX_FREERTOS_Init+0x19c>)
 8008180:	f007 fad2 	bl	800f728 <xTaskGenericCreate>
	xTaskCreate(UserTask, (const char *) "UserTask", (2*configMINIMAL_STACK_SIZE), NULL, osPriorityNormal-osPriorityIdle, &UserTaskHandle);
 8008184:	9403      	str	r4, [sp, #12]
 8008186:	9402      	str	r4, [sp, #8]
 8008188:	4b58      	ldr	r3, [pc, #352]	; (80082ec <MX_FREERTOS_Init+0x1a0>)
 800818a:	9301      	str	r3, [sp, #4]
 800818c:	9600      	str	r6, [sp, #0]
 800818e:	2300      	movs	r3, #0
 8008190:	002a      	movs	r2, r5
 8008192:	4957      	ldr	r1, [pc, #348]	; (80082f0 <MX_FREERTOS_Init+0x1a4>)
 8008194:	4857      	ldr	r0, [pc, #348]	; (80082f4 <MX_FREERTOS_Init+0x1a8>)
 8008196:	f007 fac7 	bl	800f728 <xTaskGenericCreate>
	vRegisterCLICommands();
 800819a:	f7ff fa79 	bl	8007690 <vRegisterCLICommands>
	xTaskCreate(prvCLITask, "CliTask",	(2*configMINIMAL_STACK_SIZE),	NULL,	osPriorityNormal-osPriorityIdle, &xCommandConsoleTaskHandle);		
 800819e:	9403      	str	r4, [sp, #12]
 80081a0:	9402      	str	r4, [sp, #8]
 80081a2:	4b55      	ldr	r3, [pc, #340]	; (80082f8 <MX_FREERTOS_Init+0x1ac>)
 80081a4:	9301      	str	r3, [sp, #4]
 80081a6:	9600      	str	r6, [sp, #0]
 80081a8:	2300      	movs	r3, #0
 80081aa:	002a      	movs	r2, r5
 80081ac:	4953      	ldr	r1, [pc, #332]	; (80082fc <MX_FREERTOS_Init+0x1b0>)
 80081ae:	4854      	ldr	r0, [pc, #336]	; (8008300 <MX_FREERTOS_Init+0x1b4>)
 80081b0:	f007 faba 	bl	800f728 <xTaskGenericCreate>
  xTaskCreate(PxMessagingTask, (const char *) "P1MsgTask", configMINIMAL_STACK_SIZE, (void *) P1, osPriorityAboveNormal-osPriorityIdle, &P1MsgTaskHandle);
 80081b4:	4d53      	ldr	r5, [pc, #332]	; (8008304 <MX_FREERTOS_Init+0x1b8>)
 80081b6:	9403      	str	r4, [sp, #12]
 80081b8:	9402      	str	r4, [sp, #8]
 80081ba:	4b53      	ldr	r3, [pc, #332]	; (8008308 <MX_FREERTOS_Init+0x1bc>)
 80081bc:	9301      	str	r3, [sp, #4]
 80081be:	3601      	adds	r6, #1
 80081c0:	9600      	str	r6, [sp, #0]
 80081c2:	2301      	movs	r3, #1
 80081c4:	22a0      	movs	r2, #160	; 0xa0
 80081c6:	4951      	ldr	r1, [pc, #324]	; (800830c <MX_FREERTOS_Init+0x1c0>)
 80081c8:	0028      	movs	r0, r5
 80081ca:	f007 faad 	bl	800f728 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P2MsgTask", configMINIMAL_STACK_SIZE, (void *) P2, osPriorityAboveNormal-osPriorityIdle, &P2MsgTaskHandle);
 80081ce:	9403      	str	r4, [sp, #12]
 80081d0:	9402      	str	r4, [sp, #8]
 80081d2:	4b4f      	ldr	r3, [pc, #316]	; (8008310 <MX_FREERTOS_Init+0x1c4>)
 80081d4:	9301      	str	r3, [sp, #4]
 80081d6:	9600      	str	r6, [sp, #0]
 80081d8:	2302      	movs	r3, #2
 80081da:	22a0      	movs	r2, #160	; 0xa0
 80081dc:	494d      	ldr	r1, [pc, #308]	; (8008314 <MX_FREERTOS_Init+0x1c8>)
 80081de:	0028      	movs	r0, r5
 80081e0:	f007 faa2 	bl	800f728 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P3MsgTask", configMINIMAL_STACK_SIZE, (void *) P3, osPriorityAboveNormal-osPriorityIdle, &P3MsgTaskHandle);
 80081e4:	9403      	str	r4, [sp, #12]
 80081e6:	9402      	str	r4, [sp, #8]
 80081e8:	4b4b      	ldr	r3, [pc, #300]	; (8008318 <MX_FREERTOS_Init+0x1cc>)
 80081ea:	9301      	str	r3, [sp, #4]
 80081ec:	9600      	str	r6, [sp, #0]
 80081ee:	2303      	movs	r3, #3
 80081f0:	22a0      	movs	r2, #160	; 0xa0
 80081f2:	494a      	ldr	r1, [pc, #296]	; (800831c <MX_FREERTOS_Init+0x1d0>)
 80081f4:	0028      	movs	r0, r5
 80081f6:	f007 fa97 	bl	800f728 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P4MsgTask", configMINIMAL_STACK_SIZE, (void *) P4, osPriorityAboveNormal-osPriorityIdle, &P4MsgTaskHandle);
 80081fa:	9403      	str	r4, [sp, #12]
 80081fc:	9402      	str	r4, [sp, #8]
 80081fe:	4b48      	ldr	r3, [pc, #288]	; (8008320 <MX_FREERTOS_Init+0x1d4>)
 8008200:	9301      	str	r3, [sp, #4]
 8008202:	9600      	str	r6, [sp, #0]
 8008204:	2304      	movs	r3, #4
 8008206:	22a0      	movs	r2, #160	; 0xa0
 8008208:	4946      	ldr	r1, [pc, #280]	; (8008324 <MX_FREERTOS_Init+0x1d8>)
 800820a:	0028      	movs	r0, r5
 800820c:	f007 fa8c 	bl	800f728 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P5MsgTask", configMINIMAL_STACK_SIZE, (void *) P5, osPriorityAboveNormal-osPriorityIdle, &P5MsgTaskHandle);
 8008210:	9403      	str	r4, [sp, #12]
 8008212:	9402      	str	r4, [sp, #8]
 8008214:	4b44      	ldr	r3, [pc, #272]	; (8008328 <MX_FREERTOS_Init+0x1dc>)
 8008216:	9301      	str	r3, [sp, #4]
 8008218:	9600      	str	r6, [sp, #0]
 800821a:	2305      	movs	r3, #5
 800821c:	22a0      	movs	r2, #160	; 0xa0
 800821e:	4943      	ldr	r1, [pc, #268]	; (800832c <MX_FREERTOS_Init+0x1e0>)
 8008220:	0028      	movs	r0, r5
 8008222:	f007 fa81 	bl	800f728 <xTaskGenericCreate>
	xTaskCreate(PxMessagingTask, (const char *) "P6MsgTask", configMINIMAL_STACK_SIZE, (void *) P6, osPriorityAboveNormal-osPriorityIdle, &P6MsgTaskHandle);
 8008226:	9403      	str	r4, [sp, #12]
 8008228:	9402      	str	r4, [sp, #8]
 800822a:	4b41      	ldr	r3, [pc, #260]	; (8008330 <MX_FREERTOS_Init+0x1e4>)
 800822c:	9301      	str	r3, [sp, #4]
 800822e:	9600      	str	r6, [sp, #0]
 8008230:	2306      	movs	r3, #6
 8008232:	22a0      	movs	r2, #160	; 0xa0
 8008234:	493f      	ldr	r1, [pc, #252]	; (8008334 <MX_FREERTOS_Init+0x1e8>)
 8008236:	0028      	movs	r0, r5
 8008238:	f007 fa76 	bl	800f728 <xTaskGenericCreate>
	osSemaphoreDef(SemaphoreP1); PxRxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP1), 1);
 800823c:	940f      	str	r4, [sp, #60]	; 0x3c
 800823e:	2101      	movs	r1, #1
 8008240:	a80f      	add	r0, sp, #60	; 0x3c
 8008242:	f006 fc64 	bl	800eb0e <osSemaphoreCreate>
 8008246:	4e3c      	ldr	r6, [pc, #240]	; (8008338 <MX_FREERTOS_Init+0x1ec>)
 8008248:	6070      	str	r0, [r6, #4]
	osSemaphoreDef(SemaphoreP2); PxTxSemaphoreHandle[P1] = osSemaphoreCreate(osSemaphore(SemaphoreP2), 1);
 800824a:	940e      	str	r4, [sp, #56]	; 0x38
 800824c:	2101      	movs	r1, #1
 800824e:	a80e      	add	r0, sp, #56	; 0x38
 8008250:	f006 fc5d 	bl	800eb0e <osSemaphoreCreate>
 8008254:	4d39      	ldr	r5, [pc, #228]	; (800833c <MX_FREERTOS_Init+0x1f0>)
 8008256:	6068      	str	r0, [r5, #4]
	osSemaphoreDef(SemaphoreP3); PxRxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP3), 1);
 8008258:	940d      	str	r4, [sp, #52]	; 0x34
 800825a:	2101      	movs	r1, #1
 800825c:	a80d      	add	r0, sp, #52	; 0x34
 800825e:	f006 fc56 	bl	800eb0e <osSemaphoreCreate>
 8008262:	60b0      	str	r0, [r6, #8]
	osSemaphoreDef(SemaphoreP4); PxTxSemaphoreHandle[P2] = osSemaphoreCreate(osSemaphore(SemaphoreP4), 1);
 8008264:	940c      	str	r4, [sp, #48]	; 0x30
 8008266:	2101      	movs	r1, #1
 8008268:	a80c      	add	r0, sp, #48	; 0x30
 800826a:	f006 fc50 	bl	800eb0e <osSemaphoreCreate>
 800826e:	60a8      	str	r0, [r5, #8]
	osSemaphoreDef(SemaphoreP5); PxRxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP5), 1);
 8008270:	940b      	str	r4, [sp, #44]	; 0x2c
 8008272:	2101      	movs	r1, #1
 8008274:	a80b      	add	r0, sp, #44	; 0x2c
 8008276:	f006 fc4a 	bl	800eb0e <osSemaphoreCreate>
 800827a:	60f0      	str	r0, [r6, #12]
	osSemaphoreDef(SemaphoreP6); PxTxSemaphoreHandle[P3] = osSemaphoreCreate(osSemaphore(SemaphoreP6), 1);
 800827c:	940a      	str	r4, [sp, #40]	; 0x28
 800827e:	2101      	movs	r1, #1
 8008280:	a80a      	add	r0, sp, #40	; 0x28
 8008282:	f006 fc44 	bl	800eb0e <osSemaphoreCreate>
 8008286:	60e8      	str	r0, [r5, #12]
	osSemaphoreDef(SemaphoreP7); PxRxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP7), 1);
 8008288:	9409      	str	r4, [sp, #36]	; 0x24
 800828a:	2101      	movs	r1, #1
 800828c:	a809      	add	r0, sp, #36	; 0x24
 800828e:	f006 fc3e 	bl	800eb0e <osSemaphoreCreate>
 8008292:	6130      	str	r0, [r6, #16]
	osSemaphoreDef(SemaphoreP8); PxTxSemaphoreHandle[P4] = osSemaphoreCreate(osSemaphore(SemaphoreP8), 1);
 8008294:	9408      	str	r4, [sp, #32]
 8008296:	2101      	movs	r1, #1
 8008298:	a808      	add	r0, sp, #32
 800829a:	f006 fc38 	bl	800eb0e <osSemaphoreCreate>
 800829e:	6128      	str	r0, [r5, #16]
	osSemaphoreDef(SemaphoreP9); PxRxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP9), 1);
 80082a0:	9407      	str	r4, [sp, #28]
 80082a2:	2101      	movs	r1, #1
 80082a4:	a807      	add	r0, sp, #28
 80082a6:	f006 fc32 	bl	800eb0e <osSemaphoreCreate>
 80082aa:	6170      	str	r0, [r6, #20]
	osSemaphoreDef(SemaphoreP10); PxTxSemaphoreHandle[P5] = osSemaphoreCreate(osSemaphore(SemaphoreP10), 1);
 80082ac:	9406      	str	r4, [sp, #24]
 80082ae:	2101      	movs	r1, #1
 80082b0:	a806      	add	r0, sp, #24
 80082b2:	f006 fc2c 	bl	800eb0e <osSemaphoreCreate>
 80082b6:	6168      	str	r0, [r5, #20]
	osSemaphoreDef(SemaphoreP11); PxRxSemaphoreHandle[P6] = osSemaphoreCreate(osSemaphore(SemaphoreP11), 1);
 80082b8:	9405      	str	r4, [sp, #20]
 80082ba:	2101      	movs	r1, #1
 80082bc:	a805      	add	r0, sp, #20
 80082be:	f006 fc26 	bl	800eb0e <osSemaphoreCreate>
 80082c2:	61b0      	str	r0, [r6, #24]
	osSemaphoreDef(SemaphoreP12); PxTxSemaphoreHandle[P6] = osSemaphoreCreate(osSemaphore(SemaphoreP12), 1);
 80082c4:	9404      	str	r4, [sp, #16]
 80082c6:	2101      	movs	r1, #1
 80082c8:	a804      	add	r0, sp, #16
 80082ca:	f006 fc20 	bl	800eb0e <osSemaphoreCreate>
 80082ce:	61a8      	str	r0, [r5, #24]
}
 80082d0:	b010      	add	sp, #64	; 0x40
 80082d2:	bd70      	pop	{r4, r5, r6, pc}
 80082d4:	20001234 	.word	0x20001234
 80082d8:	0801cea0 	.word	0x0801cea0
 80082dc:	08008091 	.word	0x08008091
 80082e0:	20001214 	.word	0x20001214
 80082e4:	0801ceac 	.word	0x0801ceac
 80082e8:	0800970d 	.word	0x0800970d
 80082ec:	20001230 	.word	0x20001230
 80082f0:	0801ceb8 	.word	0x0801ceb8
 80082f4:	08014087 	.word	0x08014087
 80082f8:	2000123c 	.word	0x2000123c
 80082fc:	0801cec4 	.word	0x0801cec4
 8008300:	0800553d 	.word	0x0800553d
 8008304:	08009add 	.word	0x08009add
 8008308:	20001218 	.word	0x20001218
 800830c:	0801cecc 	.word	0x0801cecc
 8008310:	2000121c 	.word	0x2000121c
 8008314:	0801ced8 	.word	0x0801ced8
 8008318:	20001220 	.word	0x20001220
 800831c:	0801cee4 	.word	0x0801cee4
 8008320:	20001224 	.word	0x20001224
 8008324:	0801cef0 	.word	0x0801cef0
 8008328:	20001228 	.word	0x20001228
 800832c:	0801cefc 	.word	0x0801cefc
 8008330:	2000122c 	.word	0x2000122c
 8008334:	0801cf08 	.word	0x0801cf08
 8008338:	20006780 	.word	0x20006780
 800833c:	20006764 	.word	0x20006764

08008340 <vMainConfigureTimerForRunTimeStats>:
}

/*-----------------------------------------------------------*/

void vMainConfigureTimerForRunTimeStats( void )
{
 8008340:	b510      	push	{r4, lr}
	/* How many clocks are there per tenth of a millisecond? */
	ulClocksPer10thOfAMilliSecond = configCPU_CLOCK_HZ / 10000UL;
 8008342:	4b04      	ldr	r3, [pc, #16]	; (8008354 <vMainConfigureTimerForRunTimeStats+0x14>)
 8008344:	6818      	ldr	r0, [r3, #0]
 8008346:	4904      	ldr	r1, [pc, #16]	; (8008358 <vMainConfigureTimerForRunTimeStats+0x18>)
 8008348:	f7f7 ff02 	bl	8000150 <__udivsi3>
 800834c:	4b03      	ldr	r3, [pc, #12]	; (800835c <vMainConfigureTimerForRunTimeStats+0x1c>)
 800834e:	6018      	str	r0, [r3, #0]
}
 8008350:	bd10      	pop	{r4, pc}
 8008352:	46c0      	nop			; (mov r8, r8)
 8008354:	20000178 	.word	0x20000178
 8008358:	00002710 	.word	0x00002710
 800835c:	20001238 	.word	0x20001238

08008360 <ulMainGetRunTimeCounterValue>:

/*-----------------------------------------------------------*/

uint32_t ulMainGetRunTimeCounterValue( void )
{
 8008360:	b570      	push	{r4, r5, r6, lr}
uint32_t ulSysTickCounts, ulTickCount, ulReturn;
const uint32_t ulSysTickReloadValue = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008362:	4b0f      	ldr	r3, [pc, #60]	; (80083a0 <ulMainGetRunTimeCounterValue+0x40>)
 8008364:	6818      	ldr	r0, [r3, #0]
 8008366:	21fa      	movs	r1, #250	; 0xfa
 8008368:	0089      	lsls	r1, r1, #2
 800836a:	f7f7 fef1 	bl	8000150 <__udivsi3>
 800836e:	1e45      	subs	r5, r0, #1
	timer peripheral. */


	/* The SysTick is a down counter.  How many clocks have passed since it was
	last reloaded? */
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008370:	4b0c      	ldr	r3, [pc, #48]	; (80083a4 <ulMainGetRunTimeCounterValue+0x44>)
 8008372:	681c      	ldr	r4, [r3, #0]

	/* How many times has it overflowed? */
	ulTickCount = xTaskGetTickCountFromISR();
 8008374:	f007 fb78 	bl	800fa68 <xTaskGetTickCountFromISR>
 8008378:	0003      	movs	r3, r0

	/* Is there a SysTick interrupt pending? */
	if( ( *pulInterruptCTRLState & ulSysTickPendingBit ) != 0UL )
 800837a:	4a0b      	ldr	r2, [pc, #44]	; (80083a8 <ulMainGetRunTimeCounterValue+0x48>)
 800837c:	6812      	ldr	r2, [r2, #0]
	ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 800837e:	1b28      	subs	r0, r5, r4
	if( ( *pulInterruptCTRLState & ulSysTickPendingBit ) != 0UL )
 8008380:	0152      	lsls	r2, r2, #5
 8008382:	d503      	bpl.n	800838c <ulMainGetRunTimeCounterValue+0x2c>
	{
		/* There is a SysTick interrupt pending, so the SysTick has overflowed
		but the tick count not yet incremented. */
		ulTickCount++;
 8008384:	3301      	adds	r3, #1

		/* Read the SysTick again, as the overflow might have occurred since
		it was read last. */
		ulSysTickCounts = ulSysTickReloadValue - *pulCurrentSysTickCount;
 8008386:	4a07      	ldr	r2, [pc, #28]	; (80083a4 <ulMainGetRunTimeCounterValue+0x44>)
 8008388:	6810      	ldr	r0, [r2, #0]
 800838a:	1a28      	subs	r0, r5, r0
	}

	/* Convert the tick count into tenths of a millisecond.  THIS ASSUMES
	configTICK_RATE_HZ is 1000! */
	ulReturn = ( ulTickCount * 10UL ) ;
 800838c:	009c      	lsls	r4, r3, #2
 800838e:	18e4      	adds	r4, r4, r3
 8008390:	0064      	lsls	r4, r4, #1

	/* Add on the number of tenths of a millisecond that have passed since the
	tick count last got updated. */
	ulReturn += ( ulSysTickCounts / ulClocksPer10thOfAMilliSecond );
 8008392:	4b06      	ldr	r3, [pc, #24]	; (80083ac <ulMainGetRunTimeCounterValue+0x4c>)
 8008394:	6819      	ldr	r1, [r3, #0]
 8008396:	f7f7 fedb 	bl	8000150 <__udivsi3>
 800839a:	1900      	adds	r0, r0, r4

	return ulReturn;
}
 800839c:	bd70      	pop	{r4, r5, r6, pc}
 800839e:	46c0      	nop			; (mov r8, r8)
 80083a0:	20000178 	.word	0x20000178
 80083a4:	e000e018 	.word	0xe000e018
 80083a8:	e000ed04 	.word	0xe000ed04
 80083ac:	20001238 	.word	0x20001238

080083b0 <buttonPressedCallback>:
/* --- Button press callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonPressedCallback(uint8_t port)
{	
}
 80083b0:	4770      	bx	lr

080083b2 <buttonReleasedCallback>:
/* --- Button release callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonReleasedCallback(uint8_t port)
{	
}
 80083b2:	4770      	bx	lr

080083b4 <buttonClickedCallback>:
/* --- Button single click callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonClickedCallback(uint8_t port)
{	
}
 80083b4:	4770      	bx	lr

080083b6 <buttonDblClickedCallback>:
/* --- Button double click callback. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonDblClickedCallback(uint8_t port)
{	
}
 80083b6:	4770      	bx	lr

080083b8 <buttonPressedForXCallback>:
/* --- Button pressed_for_x callbacks. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonPressedForXCallback(uint8_t port, uint8_t eventType)
{	
}
 80083b8:	4770      	bx	lr

080083ba <buttonReleasedForYCallback>:
/* --- Button released_for_y callbacks. DO NOT MODIFY THIS CALLBACK. 
		This function is declared as __weak to be overwritten by other implementations in user file.
*/
__weak void buttonReleasedForYCallback(uint8_t port, uint8_t eventType)
{	
}
 80083ba:	4770      	bx	lr

080083bc <CheckForTimedButtonPress>:
/*-----------------------------------------------------------*/	

/* --- Check for timed press button events
*/
BOS_Status CheckForTimedButtonPress(uint8_t port)
{
 80083bc:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 80083be:	00c2      	lsls	r2, r0, #3
 80083c0:	1812      	adds	r2, r2, r0
 80083c2:	4b1b      	ldr	r3, [pc, #108]	; (8008430 <CheckForTimedButtonPress+0x74>)
 80083c4:	189b      	adds	r3, r3, r2
 80083c6:	789c      	ldrb	r4, [r3, #2]
	
	/* Convert to ms */
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
	
	if (pressCounter[port] == t1)	
 80083c8:	0082      	lsls	r2, r0, #2
 80083ca:	4b1a      	ldr	r3, [pc, #104]	; (8008434 <CheckForTimedButtonPress+0x78>)
 80083cc:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 80083ce:	0163      	lsls	r3, r4, #5
 80083d0:	1b1b      	subs	r3, r3, r4
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	191b      	adds	r3, r3, r4
 80083d6:	00db      	lsls	r3, r3, #3
	if (pressCounter[port] == t1)	
 80083d8:	4299      	cmp	r1, r3
 80083da:	d01c      	beq.n	8008416 <CheckForTimedButtonPress+0x5a>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 80083dc:	00c2      	lsls	r2, r0, #3
 80083de:	1812      	adds	r2, r2, r0
 80083e0:	4b13      	ldr	r3, [pc, #76]	; (8008430 <CheckForTimedButtonPress+0x74>)
 80083e2:	189b      	adds	r3, r3, r2
 80083e4:	78dc      	ldrb	r4, [r3, #3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 80083e6:	0163      	lsls	r3, r4, #5
 80083e8:	1b1b      	subs	r3, r3, r4
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	191b      	adds	r3, r3, r4
 80083ee:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = PRESSED_FOR_X1_SEC;
	}
	else if (pressCounter[port] == t2)	
 80083f0:	4299      	cmp	r1, r3
 80083f2:	d017      	beq.n	8008424 <CheckForTimedButtonPress+0x68>
	uint32_t t1 = button[port].pressedX1Sec, t2 = button[port].pressedX2Sec, t3 = button[port].pressedX3Sec;
 80083f4:	00c2      	lsls	r2, r0, #3
 80083f6:	1812      	adds	r2, r2, r0
 80083f8:	4b0d      	ldr	r3, [pc, #52]	; (8008430 <CheckForTimedButtonPress+0x74>)
 80083fa:	189b      	adds	r3, r3, r2
 80083fc:	791c      	ldrb	r4, [r3, #4]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 80083fe:	0163      	lsls	r3, r4, #5
 8008400:	1b1b      	subs	r3, r3, r4
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	191b      	adds	r3, r3, r4
 8008406:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = PRESSED_FOR_X2_SEC;
	}		
	else if (pressCounter[port] == t3)	
 8008408:	4299      	cmp	r1, r3
 800840a:	d109      	bne.n	8008420 <CheckForTimedButtonPress+0x64>
	{	
		button[port].state = PRESSED_FOR_X2_SEC;
 800840c:	0010      	movs	r0, r2
 800840e:	4b08      	ldr	r3, [pc, #32]	; (8008430 <CheckForTimedButtonPress+0x74>)
 8008410:	220a      	movs	r2, #10
 8008412:	54c2      	strb	r2, [r0, r3]
 8008414:	e004      	b.n	8008420 <CheckForTimedButtonPress+0x64>
		button[port].state = PRESSED_FOR_X1_SEC;
 8008416:	00c3      	lsls	r3, r0, #3
 8008418:	1818      	adds	r0, r3, r0
 800841a:	4b05      	ldr	r3, [pc, #20]	; (8008430 <CheckForTimedButtonPress+0x74>)
 800841c:	2209      	movs	r2, #9
 800841e:	54c2      	strb	r2, [r0, r3]
	}	

	return result;	
}
 8008420:	2000      	movs	r0, #0
 8008422:	bd10      	pop	{r4, pc}
		button[port].state = PRESSED_FOR_X2_SEC;
 8008424:	0010      	movs	r0, r2
 8008426:	4b02      	ldr	r3, [pc, #8]	; (8008430 <CheckForTimedButtonPress+0x74>)
 8008428:	220a      	movs	r2, #10
 800842a:	54c2      	strb	r2, [r0, r3]
 800842c:	e7f8      	b.n	8008420 <CheckForTimedButtonPress+0x64>
 800842e:	46c0      	nop			; (mov r8, r8)
 8008430:	20001240 	.word	0x20001240
 8008434:	2000128c 	.word	0x2000128c

08008438 <CheckForTimedButtonRelease>:
/*-----------------------------------------------------------*/	

/* --- Check for timed release button events
*/
BOS_Status CheckForTimedButtonRelease(uint8_t port)
{
 8008438:	b510      	push	{r4, lr}
	BOS_Status result = BOS_OK;
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 800843a:	00c2      	lsls	r2, r0, #3
 800843c:	1812      	adds	r2, r2, r0
 800843e:	4b1b      	ldr	r3, [pc, #108]	; (80084ac <CheckForTimedButtonRelease+0x74>)
 8008440:	189b      	adds	r3, r3, r2
 8008442:	795c      	ldrb	r4, [r3, #5]

	/* Convert to ms */
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
	
	if (releaseCounter[port] == t1)	
 8008444:	0082      	lsls	r2, r0, #2
 8008446:	4b1a      	ldr	r3, [pc, #104]	; (80084b0 <CheckForTimedButtonRelease+0x78>)
 8008448:	58d1      	ldr	r1, [r2, r3]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 800844a:	0163      	lsls	r3, r4, #5
 800844c:	1b1b      	subs	r3, r3, r4
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	191b      	adds	r3, r3, r4
 8008452:	00db      	lsls	r3, r3, #3
	if (releaseCounter[port] == t1)	
 8008454:	4299      	cmp	r1, r3
 8008456:	d01c      	beq.n	8008492 <CheckForTimedButtonRelease+0x5a>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 8008458:	00c2      	lsls	r2, r0, #3
 800845a:	1812      	adds	r2, r2, r0
 800845c:	4b13      	ldr	r3, [pc, #76]	; (80084ac <CheckForTimedButtonRelease+0x74>)
 800845e:	189b      	adds	r3, r3, r2
 8008460:	799c      	ldrb	r4, [r3, #6]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 8008462:	0163      	lsls	r3, r4, #5
 8008464:	1b1b      	subs	r3, r3, r4
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	191b      	adds	r3, r3, r4
 800846a:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = RELEASED_FOR_Y1_SEC;
	}
	else if (releaseCounter[port] == t2)	
 800846c:	4299      	cmp	r1, r3
 800846e:	d017      	beq.n	80084a0 <CheckForTimedButtonRelease+0x68>
	uint32_t t1 = button[port].releasedY1Sec, t2 = button[port].releasedY2Sec, t3 = button[port].releasedY3Sec;
 8008470:	00c2      	lsls	r2, r0, #3
 8008472:	1812      	adds	r2, r2, r0
 8008474:	4b0d      	ldr	r3, [pc, #52]	; (80084ac <CheckForTimedButtonRelease+0x74>)
 8008476:	189b      	adds	r3, r3, r2
 8008478:	79dc      	ldrb	r4, [r3, #7]
	t1 *= 1000; t2 *= 1000; t3 *= 1000;
 800847a:	0163      	lsls	r3, r4, #5
 800847c:	1b1b      	subs	r3, r3, r4
 800847e:	009b      	lsls	r3, r3, #2
 8008480:	191b      	adds	r3, r3, r4
 8008482:	00db      	lsls	r3, r3, #3
	{	
		button[port].state = RELEASED_FOR_Y2_SEC;
	}		
	else if (releaseCounter[port] == t3)	
 8008484:	4299      	cmp	r1, r3
 8008486:	d109      	bne.n	800849c <CheckForTimedButtonRelease+0x64>
	{	
		button[port].state = RELEASED_FOR_Y2_SEC;
 8008488:	0010      	movs	r0, r2
 800848a:	4b08      	ldr	r3, [pc, #32]	; (80084ac <CheckForTimedButtonRelease+0x74>)
 800848c:	220d      	movs	r2, #13
 800848e:	54c2      	strb	r2, [r0, r3]
 8008490:	e004      	b.n	800849c <CheckForTimedButtonRelease+0x64>
		button[port].state = RELEASED_FOR_Y1_SEC;
 8008492:	00c3      	lsls	r3, r0, #3
 8008494:	1818      	adds	r0, r3, r0
 8008496:	4b05      	ldr	r3, [pc, #20]	; (80084ac <CheckForTimedButtonRelease+0x74>)
 8008498:	220c      	movs	r2, #12
 800849a:	54c2      	strb	r2, [r0, r3]
	}	

	return result;	
}
 800849c:	2000      	movs	r0, #0
 800849e:	bd10      	pop	{r4, pc}
		button[port].state = RELEASED_FOR_Y2_SEC;
 80084a0:	0010      	movs	r0, r2
 80084a2:	4b02      	ldr	r3, [pc, #8]	; (80084ac <CheckForTimedButtonRelease+0x74>)
 80084a4:	220d      	movs	r2, #13
 80084a6:	54c2      	strb	r2, [r0, r3]
 80084a8:	e7f8      	b.n	800849c <CheckForTimedButtonRelease+0x64>
 80084aa:	46c0      	nop			; (mov r8, r8)
 80084ac:	20001240 	.word	0x20001240
 80084b0:	200012a8 	.word	0x200012a8

080084b4 <CheckAttachedButtons>:
{
 80084b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084b6:	46de      	mov	lr, fp
 80084b8:	4657      	mov	r7, sl
 80084ba:	464e      	mov	r6, r9
 80084bc:	4645      	mov	r5, r8
 80084be:	b5e0      	push	{r5, r6, r7, lr}
 80084c0:	b089      	sub	sp, #36	; 0x24
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 80084c2:	4dbf      	ldr	r5, [pc, #764]	; (80087c0 <CheckAttachedButtons+0x30c>)
 80084c4:	3509      	adds	r5, #9
 80084c6:	4ebf      	ldr	r6, [pc, #764]	; (80087c4 <CheckAttachedButtons+0x310>)
 80084c8:	3604      	adds	r6, #4
 80084ca:	4bbf      	ldr	r3, [pc, #764]	; (80087c8 <CheckAttachedButtons+0x314>)
 80084cc:	3304      	adds	r3, #4
 80084ce:	4698      	mov	r8, r3
 80084d0:	4bbe      	ldr	r3, [pc, #760]	; (80087cc <CheckAttachedButtons+0x318>)
 80084d2:	3301      	adds	r3, #1
 80084d4:	4699      	mov	r9, r3
 80084d6:	2401      	movs	r4, #1
	uint8_t connected = GPIO_PIN_RESET, state = 0;
 80084d8:	2300      	movs	r3, #0
 80084da:	9302      	str	r3, [sp, #8]
 80084dc:	9303      	str	r3, [sp, #12]
 80084de:	e121      	b.n	8008724 <CheckAttachedButtons+0x270>
				HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_SET); Delay_us(10);
 80084e0:	230e      	movs	r3, #14
 80084e2:	aa02      	add	r2, sp, #8
 80084e4:	4694      	mov	ip, r2
 80084e6:	4463      	add	r3, ip
 80084e8:	8819      	ldrh	r1, [r3, #0]
 80084ea:	2201      	movs	r2, #1
 80084ec:	9807      	ldr	r0, [sp, #28]
 80084ee:	f009 fc5b 	bl	8011da8 <HAL_GPIO_WritePin>
 80084f2:	200a      	movs	r0, #10
 80084f4:	f005 fbb4 	bl	800dc60 <StartMicroDelay>
				connected = HAL_GPIO_ReadPin((GPIO_TypeDef *)RX_Port, RX_Pin); 
 80084f8:	ab05      	add	r3, sp, #20
 80084fa:	8819      	ldrh	r1, [r3, #0]
 80084fc:	9806      	ldr	r0, [sp, #24]
 80084fe:	f009 fc4d 	bl	8011d9c <HAL_GPIO_ReadPin>
 8008502:	9003      	str	r0, [sp, #12]
 8008504:	e134      	b.n	8008770 <CheckAttachedButtons+0x2bc>
			switch (button[i].type)
 8008506:	2b04      	cmp	r3, #4
 8008508:	d10e      	bne.n	8008528 <CheckAttachedButtons+0x74>
					if (connected == GPIO_PIN_SET)	
 800850a:	9b03      	ldr	r3, [sp, #12]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d100      	bne.n	8008512 <CheckAttachedButtons+0x5e>
 8008510:	e1d7      	b.n	80088c2 <CheckAttachedButtons+0x40e>
					else if (connected == GPIO_PIN_RESET) 
 8008512:	2b00      	cmp	r3, #0
 8008514:	d108      	bne.n	8008528 <CheckAttachedButtons+0x74>
 8008516:	2302      	movs	r3, #2
 8008518:	9302      	str	r3, [sp, #8]
 800851a:	e031      	b.n	8008580 <CheckAttachedButtons+0xcc>
					if (connected == GPIO_PIN_SET)	
 800851c:	9b03      	ldr	r3, [sp, #12]
 800851e:	2b01      	cmp	r3, #1
 8008520:	d02c      	beq.n	800857c <CheckAttachedButtons+0xc8>
					else if (connected == GPIO_PIN_RESET)
 8008522:	2b00      	cmp	r3, #0
 8008524:	d100      	bne.n	8008528 <CheckAttachedButtons+0x74>
 8008526:	e1c9      	b.n	80088bc <CheckAttachedButtons+0x408>
			if (state == CLOSED || state == ON)												
 8008528:	9b02      	ldr	r3, [sp, #8]
 800852a:	2b04      	cmp	r3, #4
 800852c:	d028      	beq.n	8008580 <CheckAttachedButtons+0xcc>
 800852e:	2b02      	cmp	r3, #2
 8008530:	d026      	beq.n	8008580 <CheckAttachedButtons+0xcc>
			if (state == OPEN || state == OFF)												
 8008532:	23fd      	movs	r3, #253	; 0xfd
 8008534:	9a02      	ldr	r2, [sp, #8]
 8008536:	4013      	ands	r3, r2
 8008538:	2b01      	cmp	r3, #1
 800853a:	d129      	bne.n	8008590 <CheckAttachedButtons+0xdc>
				if (releaseCounter[i] < 0xFFFF)
 800853c:	0031      	movs	r1, r6
 800853e:	6832      	ldr	r2, [r6, #0]
 8008540:	48a3      	ldr	r0, [pc, #652]	; (80087d0 <CheckAttachedButtons+0x31c>)
					releaseCounter[i] = 0;																	// Reset debounce counter		
 8008542:	2300      	movs	r3, #0
				if (releaseCounter[i] < 0xFFFF)
 8008544:	4282      	cmp	r2, r0
 8008546:	d800      	bhi.n	800854a <CheckAttachedButtons+0x96>
					++releaseCounter[i];																		// Advance the debounce counter
 8008548:	1c53      	adds	r3, r2, #1
 800854a:	600b      	str	r3, [r1, #0]
				if (clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)				// Advance the inter-click counter		
 800854c:	4ba1      	ldr	r3, [pc, #644]	; (80087d4 <CheckAttachedButtons+0x320>)
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	2b02      	cmp	r3, #2
 8008552:	d045      	beq.n	80085e0 <CheckAttachedButtons+0x12c>
				else if (dblCounter[i] > BOS.buttons.maxInterClickTime)	{
 8008554:	464b      	mov	r3, r9
 8008556:	781a      	ldrb	r2, [r3, #0]
 8008558:	4b9f      	ldr	r3, [pc, #636]	; (80087d8 <CheckAttachedButtons+0x324>)
 800855a:	795b      	ldrb	r3, [r3, #5]
 800855c:	429a      	cmp	r2, r3
 800855e:	d917      	bls.n	8008590 <CheckAttachedButtons+0xdc>
					clicked = 0;
 8008560:	2300      	movs	r3, #0
 8008562:	4a9c      	ldr	r2, [pc, #624]	; (80087d4 <CheckAttachedButtons+0x320>)
 8008564:	7013      	strb	r3, [r2, #0]
					dblCounter[i] = 0;																			// Reset the inter-click counter
 8008566:	464a      	mov	r2, r9
 8008568:	7013      	strb	r3, [r2, #0]
 800856a:	e011      	b.n	8008590 <CheckAttachedButtons+0xdc>
					if (connected == GPIO_PIN_SET)	
 800856c:	9b03      	ldr	r3, [sp, #12]
 800856e:	2b01      	cmp	r3, #1
 8008570:	d02f      	beq.n	80085d2 <CheckAttachedButtons+0x11e>
					else if (connected == GPIO_PIN_RESET) 
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1d8      	bne.n	8008528 <CheckAttachedButtons+0x74>
						state = OFF;
 8008576:	2301      	movs	r3, #1
 8008578:	9302      	str	r3, [sp, #8]
 800857a:	e7df      	b.n	800853c <CheckAttachedButtons+0x88>
						state = CLOSED;
 800857c:	2304      	movs	r3, #4
 800857e:	9302      	str	r3, [sp, #8]
				if (pressCounter[i] < 0xFFFF)	
 8008580:	4643      	mov	r3, r8
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a92      	ldr	r2, [pc, #584]	; (80087d0 <CheckAttachedButtons+0x31c>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d826      	bhi.n	80085d8 <CheckAttachedButtons+0x124>
					++pressCounter[i];																			// Advance the debounce counter
 800858a:	3301      	adds	r3, #1
 800858c:	4642      	mov	r2, r8
 800858e:	6013      	str	r3, [r2, #0]
			if (pressCounter[i] < BOS.buttons.debounce) 									
 8008590:	4647      	mov	r7, r8
 8008592:	683a      	ldr	r2, [r7, #0]
 8008594:	4b90      	ldr	r3, [pc, #576]	; (80087d8 <CheckAttachedButtons+0x324>)
 8008596:	881b      	ldrh	r3, [r3, #0]
 8008598:	429a      	cmp	r2, r3
 800859a:	d352      	bcc.n	8008642 <CheckAttachedButtons+0x18e>
				if (pressCounter[i] == BOS.buttons.debounce)
 800859c:	d02a      	beq.n	80085f4 <CheckAttachedButtons+0x140>
				if (releaseCounter[i] > BOS.buttons.debounce)							// Reset releaseCounter if needed - to avoid masking pressCounter on NO switches
 800859e:	6832      	ldr	r2, [r6, #0]
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d201      	bcs.n	80085a8 <CheckAttachedButtons+0xf4>
					releaseCounter[i] = 0;					
 80085a4:	2300      	movs	r3, #0
 80085a6:	6033      	str	r3, [r6, #0]
				if (pressCounter[i] > BOS.buttons.singleClickTime && pressCounter[i] < 500)	
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	4a8b      	ldr	r2, [pc, #556]	; (80087d8 <CheckAttachedButtons+0x324>)
 80085ac:	8852      	ldrh	r2, [r2, #2]
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d938      	bls.n	8008624 <CheckAttachedButtons+0x170>
 80085b2:	22fa      	movs	r2, #250	; 0xfa
 80085b4:	0052      	lsls	r2, r2, #1
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d234      	bcs.n	8008624 <CheckAttachedButtons+0x170>
					if (clicked == 0)
 80085ba:	4b86      	ldr	r3, [pc, #536]	; (80087d4 <CheckAttachedButtons+0x320>)
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d11e      	bne.n	8008600 <CheckAttachedButtons+0x14c>
						clicked = 1;																					// Record a possible single click 
 80085c2:	4b84      	ldr	r3, [pc, #528]	; (80087d4 <CheckAttachedButtons+0x320>)
 80085c4:	3af4      	subs	r2, #244	; 0xf4
 80085c6:	3aff      	subs	r2, #255	; 0xff
 80085c8:	701a      	strb	r2, [r3, #0]
 80085ca:	e03a      	b.n	8008642 <CheckAttachedButtons+0x18e>
						state = CLOSED;
 80085cc:	2304      	movs	r3, #4
 80085ce:	9302      	str	r3, [sp, #8]
 80085d0:	e7d6      	b.n	8008580 <CheckAttachedButtons+0xcc>
 80085d2:	2302      	movs	r3, #2
 80085d4:	9302      	str	r3, [sp, #8]
 80085d6:	e7d3      	b.n	8008580 <CheckAttachedButtons+0xcc>
					pressCounter[i] = 0;																		// Reset debounce counter					
 80085d8:	2300      	movs	r3, #0
 80085da:	4642      	mov	r2, r8
 80085dc:	6013      	str	r3, [r2, #0]
 80085de:	e7d7      	b.n	8008590 <CheckAttachedButtons+0xdc>
				if (clicked == 2 && dblCounter[i] <= BOS.buttons.maxInterClickTime)				// Advance the inter-click counter		
 80085e0:	464b      	mov	r3, r9
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	4a7c      	ldr	r2, [pc, #496]	; (80087d8 <CheckAttachedButtons+0x324>)
 80085e6:	7952      	ldrb	r2, [r2, #5]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d3b9      	bcc.n	8008560 <CheckAttachedButtons+0xac>
					++dblCounter[i];			
 80085ec:	3301      	adds	r3, #1
 80085ee:	464a      	mov	r2, r9
 80085f0:	7013      	strb	r3, [r2, #0]
 80085f2:	e7cd      	b.n	8008590 <CheckAttachedButtons+0xdc>
					button[i].state = PRESSED;															// Record a PRESSED event. This event is always reset on next tick.
 80085f4:	2207      	movs	r2, #7
 80085f6:	4651      	mov	r1, sl
 80085f8:	700a      	strb	r2, [r1, #0]
					++pressCounter[i];
 80085fa:	1c5a      	adds	r2, r3, #1
 80085fc:	603a      	str	r2, [r7, #0]
 80085fe:	e7ce      	b.n	800859e <CheckAttachedButtons+0xea>
					else if (clicked == 2) {
 8008600:	2b02      	cmp	r3, #2
 8008602:	d11e      	bne.n	8008642 <CheckAttachedButtons+0x18e>
						if (dblCounter[i] > BOS.buttons.minInterClickTime && dblCounter[i] < BOS.buttons.maxInterClickTime) {
 8008604:	4649      	mov	r1, r9
 8008606:	780b      	ldrb	r3, [r1, #0]
 8008608:	4a73      	ldr	r2, [pc, #460]	; (80087d8 <CheckAttachedButtons+0x324>)
 800860a:	7912      	ldrb	r2, [r2, #4]
 800860c:	429a      	cmp	r2, r3
 800860e:	d218      	bcs.n	8008642 <CheckAttachedButtons+0x18e>
 8008610:	4a71      	ldr	r2, [pc, #452]	; (80087d8 <CheckAttachedButtons+0x324>)
 8008612:	7952      	ldrb	r2, [r2, #5]
 8008614:	429a      	cmp	r2, r3
 8008616:	d914      	bls.n	8008642 <CheckAttachedButtons+0x18e>
							clicked = 3;																				// Record a possible double click 
 8008618:	4b6e      	ldr	r3, [pc, #440]	; (80087d4 <CheckAttachedButtons+0x320>)
 800861a:	2203      	movs	r2, #3
 800861c:	701a      	strb	r2, [r3, #0]
							dblCounter[i] = 0;																	// Reset the inter-click counter
 800861e:	2300      	movs	r3, #0
 8008620:	700b      	strb	r3, [r1, #0]
 8008622:	e00e      	b.n	8008642 <CheckAttachedButtons+0x18e>
				else if (pressCounter[i] >= 500 && pressCounter[i] < 0xFFFF)	
 8008624:	3bf5      	subs	r3, #245	; 0xf5
 8008626:	3bff      	subs	r3, #255	; 0xff
 8008628:	4a6c      	ldr	r2, [pc, #432]	; (80087dc <CheckAttachedButtons+0x328>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d809      	bhi.n	8008642 <CheckAttachedButtons+0x18e>
					if (clicked)	clicked = 0;															// Cannot be a click
 800862e:	4b69      	ldr	r3, [pc, #420]	; (80087d4 <CheckAttachedButtons+0x320>)
 8008630:	781b      	ldrb	r3, [r3, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d002      	beq.n	800863c <CheckAttachedButtons+0x188>
 8008636:	4b67      	ldr	r3, [pc, #412]	; (80087d4 <CheckAttachedButtons+0x320>)
 8008638:	2200      	movs	r2, #0
 800863a:	701a      	strb	r2, [r3, #0]
					CheckForTimedButtonPress(i);
 800863c:	0020      	movs	r0, r4
 800863e:	f7ff febd 	bl	80083bc <CheckForTimedButtonPress>
			if (releaseCounter[i] < BOS.buttons.debounce) 							
 8008642:	0031      	movs	r1, r6
 8008644:	6832      	ldr	r2, [r6, #0]
 8008646:	4b64      	ldr	r3, [pc, #400]	; (80087d8 <CheckAttachedButtons+0x324>)
 8008648:	881b      	ldrh	r3, [r3, #0]
 800864a:	429a      	cmp	r2, r3
 800864c:	d349      	bcc.n	80086e2 <CheckAttachedButtons+0x22e>
				if (releaseCounter[i] == BOS.buttons.debounce)
 800864e:	d028      	beq.n	80086a2 <CheckAttachedButtons+0x1ee>
				if (pressCounter[i] > BOS.buttons.debounce)								// Reset pressCounter if needed - to avoid masking releaseCounter on NC switches
 8008650:	683a      	ldr	r2, [r7, #0]
 8008652:	4293      	cmp	r3, r2
 8008654:	d201      	bcs.n	800865a <CheckAttachedButtons+0x1a6>
					pressCounter[i] = 0;				
 8008656:	2300      	movs	r3, #0
 8008658:	603b      	str	r3, [r7, #0]
				if (releaseCounter[i] > BOS.buttons.singleClickTime && releaseCounter[i] < 500)	
 800865a:	680b      	ldr	r3, [r1, #0]
 800865c:	4a5e      	ldr	r2, [pc, #376]	; (80087d8 <CheckAttachedButtons+0x324>)
 800865e:	8852      	ldrh	r2, [r2, #2]
 8008660:	4293      	cmp	r3, r2
 8008662:	d939      	bls.n	80086d8 <CheckAttachedButtons+0x224>
 8008664:	22fa      	movs	r2, #250	; 0xfa
 8008666:	0052      	lsls	r2, r2, #1
 8008668:	4293      	cmp	r3, r2
 800866a:	d235      	bcs.n	80086d8 <CheckAttachedButtons+0x224>
					if (clicked == 1)
 800866c:	4b59      	ldr	r3, [pc, #356]	; (80087d4 <CheckAttachedButtons+0x320>)
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d01c      	beq.n	80086ae <CheckAttachedButtons+0x1fa>
					else if (clicked == 3)
 8008674:	2b03      	cmp	r3, #3
 8008676:	d134      	bne.n	80086e2 <CheckAttachedButtons+0x22e>
						button[i].state = DBL_CLICKED;												// Record a double button click event
 8008678:	3303      	adds	r3, #3
 800867a:	4652      	mov	r2, sl
 800867c:	7013      	strb	r3, [r2, #0]
						clicked = 0;																					// Prepare for a single click					
 800867e:	4b55      	ldr	r3, [pc, #340]	; (80087d4 <CheckAttachedButtons+0x320>)
 8008680:	2200      	movs	r2, #0
 8008682:	701a      	strb	r2, [r3, #0]
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_DBL_CLICKED)) 
 8008684:	4b56      	ldr	r3, [pc, #344]	; (80087e0 <CheckAttachedButtons+0x32c>)
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d13e      	bne.n	800870a <CheckAttachedButtons+0x256>
 800868c:	4653      	mov	r3, sl
 800868e:	7a1b      	ldrb	r3, [r3, #8]
 8008690:	079b      	lsls	r3, r3, #30
 8008692:	d53a      	bpl.n	800870a <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 8008694:	4b52      	ldr	r3, [pc, #328]	; (80087e0 <CheckAttachedButtons+0x32c>)
 8008696:	2201      	movs	r2, #1
 8008698:	701a      	strb	r2, [r3, #0]
						buttonDblClickedCallback(i);
 800869a:	0020      	movs	r0, r4
 800869c:	f7ff fe8b 	bl	80083b6 <buttonDblClickedCallback>
 80086a0:	e033      	b.n	800870a <CheckAttachedButtons+0x256>
					button[i].state = RELEASED;															// Record a RELEASED event. This event is always reset on next tick.
 80086a2:	2208      	movs	r2, #8
 80086a4:	4650      	mov	r0, sl
 80086a6:	7002      	strb	r2, [r0, #0]
					++releaseCounter[i];
 80086a8:	1c5a      	adds	r2, r3, #1
 80086aa:	6032      	str	r2, [r6, #0]
 80086ac:	e7d0      	b.n	8008650 <CheckAttachedButtons+0x19c>
						button[i].state = CLICKED;														// Record a single button click event
 80086ae:	3304      	adds	r3, #4
 80086b0:	4652      	mov	r2, sl
 80086b2:	7013      	strb	r3, [r2, #0]
						clicked = 2;																					// Prepare for a double click
 80086b4:	4b47      	ldr	r3, [pc, #284]	; (80087d4 <CheckAttachedButtons+0x320>)
 80086b6:	2202      	movs	r2, #2
 80086b8:	701a      	strb	r2, [r3, #0]
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_CLICKED)) 
 80086ba:	4b49      	ldr	r3, [pc, #292]	; (80087e0 <CheckAttachedButtons+0x32c>)
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d123      	bne.n	800870a <CheckAttachedButtons+0x256>
 80086c2:	4653      	mov	r3, sl
 80086c4:	7a1b      	ldrb	r3, [r3, #8]
 80086c6:	07db      	lsls	r3, r3, #31
 80086c8:	d51f      	bpl.n	800870a <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 80086ca:	4b45      	ldr	r3, [pc, #276]	; (80087e0 <CheckAttachedButtons+0x32c>)
 80086cc:	2201      	movs	r2, #1
 80086ce:	701a      	strb	r2, [r3, #0]
						buttonClickedCallback(i);
 80086d0:	0020      	movs	r0, r4
 80086d2:	f7ff fe6f 	bl	80083b4 <buttonClickedCallback>
 80086d6:	e018      	b.n	800870a <CheckAttachedButtons+0x256>
				else if (releaseCounter[i] >= 500 && releaseCounter[i] < 0xFFFF)	
 80086d8:	3bf5      	subs	r3, #245	; 0xf5
 80086da:	3bff      	subs	r3, #255	; 0xff
 80086dc:	4a3f      	ldr	r2, [pc, #252]	; (80087dc <CheckAttachedButtons+0x328>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d909      	bls.n	80086f6 <CheckAttachedButtons+0x242>
			switch (button[i].state)
 80086e2:	4653      	mov	r3, sl
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	3b05      	subs	r3, #5
 80086e8:	b2da      	uxtb	r2, r3
 80086ea:	2a09      	cmp	r2, #9
 80086ec:	d80d      	bhi.n	800870a <CheckAttachedButtons+0x256>
 80086ee:	0093      	lsls	r3, r2, #2
 80086f0:	4a3c      	ldr	r2, [pc, #240]	; (80087e4 <CheckAttachedButtons+0x330>)
 80086f2:	58d3      	ldr	r3, [r2, r3]
 80086f4:	469f      	mov	pc, r3
					CheckForTimedButtonRelease(i);
 80086f6:	0020      	movs	r0, r4
 80086f8:	f7ff fe9e 	bl	8008438 <CheckForTimedButtonRelease>
 80086fc:	e7f1      	b.n	80086e2 <CheckAttachedButtons+0x22e>
					buttonPressedCallback(i);
 80086fe:	0020      	movs	r0, r4
 8008700:	f7ff fe56 	bl	80083b0 <buttonPressedCallback>
					button[i].state = NONE;
 8008704:	2300      	movs	r3, #0
 8008706:	4652      	mov	r2, sl
 8008708:	7013      	strb	r3, [r2, #0]
	for(uint8_t i=1 ; i<=NumOfPorts ; i++)
 800870a:	3401      	adds	r4, #1
 800870c:	b2e4      	uxtb	r4, r4
 800870e:	3509      	adds	r5, #9
 8008710:	3604      	adds	r6, #4
 8008712:	2304      	movs	r3, #4
 8008714:	469c      	mov	ip, r3
 8008716:	44e0      	add	r8, ip
 8008718:	3b03      	subs	r3, #3
 800871a:	469c      	mov	ip, r3
 800871c:	44e1      	add	r9, ip
 800871e:	2c07      	cmp	r4, #7
 8008720:	d100      	bne.n	8008724 <CheckAttachedButtons+0x270>
 8008722:	e0d1      	b.n	80088c8 <CheckAttachedButtons+0x414>
		if (button[i].type)			// Only check defined butons
 8008724:	46aa      	mov	sl, r5
 8008726:	786b      	ldrb	r3, [r5, #1]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d0ee      	beq.n	800870a <CheckAttachedButtons+0x256>
			if (delayButtonStateReset == false)	button[i].state = NONE;		
 800872c:	4b2c      	ldr	r3, [pc, #176]	; (80087e0 <CheckAttachedButtons+0x32c>)
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d100      	bne.n	8008736 <CheckAttachedButtons+0x282>
 8008734:	702b      	strb	r3, [r5, #0]
			GetPortGPIOs(i, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);
 8008736:	230e      	movs	r3, #14
 8008738:	aa02      	add	r2, sp, #8
 800873a:	4694      	mov	ip, r2
 800873c:	4463      	add	r3, ip
 800873e:	469b      	mov	fp, r3
 8008740:	af05      	add	r7, sp, #20
 8008742:	9700      	str	r7, [sp, #0]
 8008744:	ab06      	add	r3, sp, #24
 8008746:	465a      	mov	r2, fp
 8008748:	a907      	add	r1, sp, #28
 800874a:	0020      	movs	r0, r4
 800874c:	f004 fe5c 	bl	800d408 <GetPortGPIOs>
			HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_RESET); Delay_us(10);
 8008750:	465b      	mov	r3, fp
 8008752:	8819      	ldrh	r1, [r3, #0]
 8008754:	2200      	movs	r2, #0
 8008756:	9807      	ldr	r0, [sp, #28]
 8008758:	f009 fb26 	bl	8011da8 <HAL_GPIO_WritePin>
 800875c:	200a      	movs	r0, #10
 800875e:	f005 fa7f 	bl	800dc60 <StartMicroDelay>
			if (HAL_GPIO_ReadPin((GPIO_TypeDef *)RX_Port, RX_Pin) == GPIO_PIN_RESET) 
 8008762:	8839      	ldrh	r1, [r7, #0]
 8008764:	9806      	ldr	r0, [sp, #24]
 8008766:	f009 fb19 	bl	8011d9c <HAL_GPIO_ReadPin>
 800876a:	2800      	cmp	r0, #0
 800876c:	d100      	bne.n	8008770 <CheckAttachedButtons+0x2bc>
 800876e:	e6b7      	b.n	80084e0 <CheckAttachedButtons+0x2c>
			HAL_GPIO_WritePin((GPIO_TypeDef *)TX_Port, TX_Pin, GPIO_PIN_RESET);
 8008770:	230e      	movs	r3, #14
 8008772:	aa02      	add	r2, sp, #8
 8008774:	4694      	mov	ip, r2
 8008776:	4463      	add	r3, ip
 8008778:	8819      	ldrh	r1, [r3, #0]
 800877a:	2200      	movs	r2, #0
 800877c:	9807      	ldr	r0, [sp, #28]
 800877e:	f009 fb13 	bl	8011da8 <HAL_GPIO_WritePin>
			switch (button[i].type)
 8008782:	4653      	mov	r3, sl
 8008784:	785b      	ldrb	r3, [r3, #1]
 8008786:	2b03      	cmp	r3, #3
 8008788:	d100      	bne.n	800878c <CheckAttachedButtons+0x2d8>
 800878a:	e6ef      	b.n	800856c <CheckAttachedButtons+0xb8>
 800878c:	d900      	bls.n	8008790 <CheckAttachedButtons+0x2dc>
 800878e:	e6ba      	b.n	8008506 <CheckAttachedButtons+0x52>
 8008790:	2b01      	cmp	r3, #1
 8008792:	d100      	bne.n	8008796 <CheckAttachedButtons+0x2e2>
 8008794:	e6c2      	b.n	800851c <CheckAttachedButtons+0x68>
 8008796:	2b02      	cmp	r3, #2
 8008798:	d000      	beq.n	800879c <CheckAttachedButtons+0x2e8>
 800879a:	e6c5      	b.n	8008528 <CheckAttachedButtons+0x74>
					if (connected == GPIO_PIN_SET)	
 800879c:	9b03      	ldr	r3, [sp, #12]
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d100      	bne.n	80087a4 <CheckAttachedButtons+0x2f0>
 80087a2:	e713      	b.n	80085cc <CheckAttachedButtons+0x118>
					else if (connected == GPIO_PIN_RESET) 
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d000      	beq.n	80087aa <CheckAttachedButtons+0x2f6>
 80087a8:	e6be      	b.n	8008528 <CheckAttachedButtons+0x74>
						state = OPEN;	
 80087aa:	2303      	movs	r3, #3
 80087ac:	9302      	str	r3, [sp, #8]
 80087ae:	e6c5      	b.n	800853c <CheckAttachedButtons+0x88>
					buttonReleasedCallback(i);
 80087b0:	0020      	movs	r0, r4
 80087b2:	f7ff fdfe 	bl	80083b2 <buttonReleasedCallback>
					button[i].state = NONE;
 80087b6:	2300      	movs	r3, #0
 80087b8:	4652      	mov	r2, sl
 80087ba:	7013      	strb	r3, [r2, #0]
      		break;
 80087bc:	e7a5      	b.n	800870a <CheckAttachedButtons+0x256>
 80087be:	46c0      	nop			; (mov r8, r8)
 80087c0:	20001240 	.word	0x20001240
 80087c4:	200012a8 	.word	0x200012a8
 80087c8:	2000128c 	.word	0x2000128c
 80087cc:	20001280 	.word	0x20001280
 80087d0:	0000fffe 	.word	0x0000fffe
 80087d4:	2000127f 	.word	0x2000127f
 80087d8:	200066e4 	.word	0x200066e4
 80087dc:	0000fe0a 	.word	0x0000fe0a
 80087e0:	20001287 	.word	0x20001287
 80087e4:	0801cf14 	.word	0x0801cf14
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X1_SEC)) 
 80087e8:	4b3b      	ldr	r3, [pc, #236]	; (80088d8 <CheckAttachedButtons+0x424>)
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d18c      	bne.n	800870a <CheckAttachedButtons+0x256>
 80087f0:	4653      	mov	r3, sl
 80087f2:	7a1b      	ldrb	r3, [r3, #8]
 80087f4:	075b      	lsls	r3, r3, #29
 80087f6:	d588      	bpl.n	800870a <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 80087f8:	4b37      	ldr	r3, [pc, #220]	; (80088d8 <CheckAttachedButtons+0x424>)
 80087fa:	2201      	movs	r2, #1
 80087fc:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X1_SEC-8);
 80087fe:	2101      	movs	r1, #1
 8008800:	0020      	movs	r0, r4
 8008802:	f7ff fdd9 	bl	80083b8 <buttonPressedForXCallback>
 8008806:	e780      	b.n	800870a <CheckAttachedButtons+0x256>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X2_SEC)) 
 8008808:	4b33      	ldr	r3, [pc, #204]	; (80088d8 <CheckAttachedButtons+0x424>)
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d000      	beq.n	8008812 <CheckAttachedButtons+0x35e>
 8008810:	e77b      	b.n	800870a <CheckAttachedButtons+0x256>
 8008812:	4653      	mov	r3, sl
 8008814:	7a1b      	ldrb	r3, [r3, #8]
 8008816:	071b      	lsls	r3, r3, #28
 8008818:	d400      	bmi.n	800881c <CheckAttachedButtons+0x368>
 800881a:	e776      	b.n	800870a <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 800881c:	4b2e      	ldr	r3, [pc, #184]	; (80088d8 <CheckAttachedButtons+0x424>)
 800881e:	2201      	movs	r2, #1
 8008820:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X2_SEC-8);
 8008822:	2102      	movs	r1, #2
 8008824:	0020      	movs	r0, r4
 8008826:	f7ff fdc7 	bl	80083b8 <buttonPressedForXCallback>
 800882a:	e76e      	b.n	800870a <CheckAttachedButtons+0x256>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_PRESSED_FOR_X3_SEC)) 
 800882c:	4b2a      	ldr	r3, [pc, #168]	; (80088d8 <CheckAttachedButtons+0x424>)
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d000      	beq.n	8008836 <CheckAttachedButtons+0x382>
 8008834:	e769      	b.n	800870a <CheckAttachedButtons+0x256>
 8008836:	4653      	mov	r3, sl
 8008838:	7a1b      	ldrb	r3, [r3, #8]
 800883a:	06db      	lsls	r3, r3, #27
 800883c:	d400      	bmi.n	8008840 <CheckAttachedButtons+0x38c>
 800883e:	e764      	b.n	800870a <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 8008840:	4b25      	ldr	r3, [pc, #148]	; (80088d8 <CheckAttachedButtons+0x424>)
 8008842:	2201      	movs	r2, #1
 8008844:	701a      	strb	r2, [r3, #0]
						buttonPressedForXCallback(i, PRESSED_FOR_X3_SEC-8);
 8008846:	2103      	movs	r1, #3
 8008848:	0020      	movs	r0, r4
 800884a:	f7ff fdb5 	bl	80083b8 <buttonPressedForXCallback>
 800884e:	e75c      	b.n	800870a <CheckAttachedButtons+0x256>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y1_SEC)) 
 8008850:	4b21      	ldr	r3, [pc, #132]	; (80088d8 <CheckAttachedButtons+0x424>)
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d000      	beq.n	800885a <CheckAttachedButtons+0x3a6>
 8008858:	e757      	b.n	800870a <CheckAttachedButtons+0x256>
 800885a:	4653      	mov	r3, sl
 800885c:	7a1b      	ldrb	r3, [r3, #8]
 800885e:	069b      	lsls	r3, r3, #26
 8008860:	d400      	bmi.n	8008864 <CheckAttachedButtons+0x3b0>
 8008862:	e752      	b.n	800870a <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 8008864:	4b1c      	ldr	r3, [pc, #112]	; (80088d8 <CheckAttachedButtons+0x424>)
 8008866:	2201      	movs	r2, #1
 8008868:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y1_SEC-11);
 800886a:	2101      	movs	r1, #1
 800886c:	0020      	movs	r0, r4
 800886e:	f7ff fda4 	bl	80083ba <buttonReleasedForYCallback>
 8008872:	e74a      	b.n	800870a <CheckAttachedButtons+0x256>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y2_SEC)) 
 8008874:	4b18      	ldr	r3, [pc, #96]	; (80088d8 <CheckAttachedButtons+0x424>)
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d000      	beq.n	800887e <CheckAttachedButtons+0x3ca>
 800887c:	e745      	b.n	800870a <CheckAttachedButtons+0x256>
 800887e:	4653      	mov	r3, sl
 8008880:	7a1b      	ldrb	r3, [r3, #8]
 8008882:	065b      	lsls	r3, r3, #25
 8008884:	d400      	bmi.n	8008888 <CheckAttachedButtons+0x3d4>
 8008886:	e740      	b.n	800870a <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 8008888:	4b13      	ldr	r3, [pc, #76]	; (80088d8 <CheckAttachedButtons+0x424>)
 800888a:	2201      	movs	r2, #1
 800888c:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y2_SEC-11);
 800888e:	2102      	movs	r1, #2
 8008890:	0020      	movs	r0, r4
 8008892:	f7ff fd92 	bl	80083ba <buttonReleasedForYCallback>
 8008896:	e738      	b.n	800870a <CheckAttachedButtons+0x256>
					if (!delayButtonStateReset && (button[i].events & BUTTON_EVENT_RELEASED_FOR_Y3_SEC)) 
 8008898:	4b0f      	ldr	r3, [pc, #60]	; (80088d8 <CheckAttachedButtons+0x424>)
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d000      	beq.n	80088a2 <CheckAttachedButtons+0x3ee>
 80088a0:	e733      	b.n	800870a <CheckAttachedButtons+0x256>
 80088a2:	4653      	mov	r3, sl
 80088a4:	7a1b      	ldrb	r3, [r3, #8]
 80088a6:	2b7f      	cmp	r3, #127	; 0x7f
 80088a8:	d800      	bhi.n	80088ac <CheckAttachedButtons+0x3f8>
 80088aa:	e72e      	b.n	800870a <CheckAttachedButtons+0x256>
						delayButtonStateReset = true;
 80088ac:	4b0a      	ldr	r3, [pc, #40]	; (80088d8 <CheckAttachedButtons+0x424>)
 80088ae:	2201      	movs	r2, #1
 80088b0:	701a      	strb	r2, [r3, #0]
						buttonReleasedForYCallback(i, RELEASED_FOR_Y3_SEC-11);
 80088b2:	2103      	movs	r1, #3
 80088b4:	0020      	movs	r0, r4
 80088b6:	f7ff fd80 	bl	80083ba <buttonReleasedForYCallback>
 80088ba:	e726      	b.n	800870a <CheckAttachedButtons+0x256>
						state = OPEN;			
 80088bc:	2303      	movs	r3, #3
 80088be:	9302      	str	r3, [sp, #8]
 80088c0:	e63c      	b.n	800853c <CheckAttachedButtons+0x88>
						state = OFF;
 80088c2:	9b03      	ldr	r3, [sp, #12]
 80088c4:	9302      	str	r3, [sp, #8]
			if (state == OPEN || state == OFF)												
 80088c6:	e639      	b.n	800853c <CheckAttachedButtons+0x88>
}
 80088c8:	b009      	add	sp, #36	; 0x24
 80088ca:	bcf0      	pop	{r4, r5, r6, r7}
 80088cc:	46bb      	mov	fp, r7
 80088ce:	46b2      	mov	sl, r6
 80088d0:	46a9      	mov	r9, r5
 80088d2:	46a0      	mov	r8, r4
 80088d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088d6:	46c0      	nop			; (mov r8, r8)
 80088d8:	20001287 	.word	0x20001287

080088dc <AddPortButton>:
/* --- Define a new button attached to one of array ports
					buttonType: MOMENTARY_NO, MOMENTARY_NC, ONOFF_NO, ONOFF_NC
					port: array port (P1 - Px)
*/
BOS_Status AddPortButton(uint8_t buttonType, uint8_t port)
{
 80088dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088de:	b08d      	sub	sp, #52	; 0x34
 80088e0:	0006      	movs	r6, r0
 80088e2:	000c      	movs	r4, r1
	uint32_t TX_Port, RX_Port; 
	uint16_t TX_Pin, RX_Pin, temp16, res;
	uint8_t temp8 = 0;
	
	/* 1. Stop communication at this port (only if the scheduler is running) - TODO update*/
	if (BOS_initialized) {
 80088e4:	4b41      	ldr	r3, [pc, #260]	; (80089ec <AddPortButton+0x110>)
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d157      	bne.n	800899c <AddPortButton+0xc0>
		osSemaphoreRelease(PxRxSemaphoreHandle[port]);		/* Give back the semaphore if it was taken */
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
	}
	portStatus[port] = PORTBUTTON;	
 80088ec:	4b40      	ldr	r3, [pc, #256]	; (80089f0 <AddPortButton+0x114>)
 80088ee:	2204      	movs	r2, #4
 80088f0:	551a      	strb	r2, [r3, r4]
	
	/* 2. Deinitialize UART (only if module is initialized) */
	if (BOS_initialized) {
 80088f2:	4b3e      	ldr	r3, [pc, #248]	; (80089ec <AddPortButton+0x110>)
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d15a      	bne.n	80089b0 <AddPortButton+0xd4>
		HAL_UART_DeInit(GetUart(port));
	}
	
	/* 3. Initialize GPIOs */
	GetPortGPIOs(port, &TX_Port, &TX_Pin, &RX_Port, &RX_Pin);		
 80088fa:	2512      	movs	r5, #18
 80088fc:	446d      	add	r5, sp
 80088fe:	af04      	add	r7, sp, #16
 8008900:	9700      	str	r7, [sp, #0]
 8008902:	ab05      	add	r3, sp, #20
 8008904:	002a      	movs	r2, r5
 8008906:	a906      	add	r1, sp, #24
 8008908:	0020      	movs	r0, r4
 800890a:	f004 fd7d 	bl	800d408 <GetPortGPIOs>
	/* Ouput (TXD) */
	GPIO_InitStruct.Pin = TX_Pin;
 800890e:	882b      	ldrh	r3, [r5, #0]
 8008910:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008912:	2301      	movs	r3, #1
 8008914:	9308      	str	r3, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008916:	2500      	movs	r5, #0
 8008918:	9509      	str	r5, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 800891a:	950a      	str	r5, [sp, #40]	; 0x28
	HAL_GPIO_Init((GPIO_TypeDef *)TX_Port, &GPIO_InitStruct);
 800891c:	a907      	add	r1, sp, #28
 800891e:	9806      	ldr	r0, [sp, #24]
 8008920:	f009 f952 	bl	8011bc8 <HAL_GPIO_Init>
	/* Input (RXD) */
	GPIO_InitStruct.Pin = RX_Pin;
 8008924:	883b      	ldrh	r3, [r7, #0]
 8008926:	9307      	str	r3, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008928:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800892a:	2302      	movs	r3, #2
 800892c:	9309      	str	r3, [sp, #36]	; 0x24
	HAL_GPIO_Init((GPIO_TypeDef *)RX_Port, &GPIO_InitStruct);
 800892e:	a907      	add	r1, sp, #28
 8008930:	9805      	ldr	r0, [sp, #20]
 8008932:	f009 f949 	bl	8011bc8 <HAL_GPIO_Init>

	/* 4. Update button struct */
	button[port].type = buttonType;	
 8008936:	00e2      	lsls	r2, r4, #3
 8008938:	1912      	adds	r2, r2, r4
 800893a:	4b2e      	ldr	r3, [pc, #184]	; (80089f4 <AddPortButton+0x118>)
 800893c:	189b      	adds	r3, r3, r2
 800893e:	705e      	strb	r6, [r3, #1]
	
	/* 5. Add to EEPROM if not already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 8008940:	0025      	movs	r5, r4
 8008942:	353a      	adds	r5, #58	; 0x3a
 8008944:	00ad      	lsls	r5, r5, #2
 8008946:	210e      	movs	r1, #14
 8008948:	4469      	add	r1, sp
 800894a:	0028      	movs	r0, r5
 800894c:	f7ff f892 	bl	8007a74 <EE_ReadVariable>
	if(!res)																														// This variable exists
 8008950:	2800      	cmp	r0, #0
 8008952:	d133      	bne.n	80089bc <AddPortButton+0xe0>
	{
		temp8 = (uint8_t)(temp16 >> 8);
 8008954:	230e      	movs	r3, #14
 8008956:	446b      	add	r3, sp
 8008958:	881b      	ldrh	r3, [r3, #0]
 800895a:	0a1a      	lsrs	r2, r3, #8
		if ( ((temp8 >> 4) == port) && ((temp8 & 0x0F) == buttonType) )		// This is same port and same type, do not update
 800895c:	0b1b      	lsrs	r3, r3, #12
 800895e:	42a3      	cmp	r3, r4
 8008960:	d103      	bne.n	800896a <AddPortButton+0x8e>
 8008962:	230f      	movs	r3, #15
 8008964:	4013      	ands	r3, r2
 8008966:	42b3      	cmp	r3, r6
 8008968:	d015      	beq.n	8008996 <AddPortButton+0xba>
			return BOS_OK;
		else 																															// Update the variable
		{																														
			temp16 = ((uint16_t)port << 12) | ((uint16_t)buttonType << 8);
 800896a:	0324      	lsls	r4, r4, #12
 800896c:	0231      	lsls	r1, r6, #8
 800896e:	4321      	orrs	r1, r4
 8008970:	b289      	uxth	r1, r1
 8008972:	230e      	movs	r3, #14
 8008974:	446b      	add	r3, sp
 8008976:	8019      	strh	r1, [r3, #0]
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
 8008978:	0028      	movs	r0, r5
 800897a:	f7ff f8a7 	bl	8007acc <EE_WriteVariable>
			/* Reset times */
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 800897e:	1c68      	adds	r0, r5, #1
 8008980:	2100      	movs	r1, #0
 8008982:	f7ff f8a3 	bl	8007acc <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 8008986:	1ca8      	adds	r0, r5, #2
 8008988:	2100      	movs	r1, #0
 800898a:	f7ff f89f 	bl	8007acc <EE_WriteVariable>
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
 800898e:	1ce8      	adds	r0, r5, #3
 8008990:	2100      	movs	r1, #0
 8008992:	f7ff f89b 	bl	8007acc <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
	}
	
	return result;
}
 8008996:	2000      	movs	r0, #0
 8008998:	b00d      	add	sp, #52	; 0x34
 800899a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osSemaphoreRelease(PxRxSemaphoreHandle[port]);		/* Give back the semaphore if it was taken */
 800899c:	008d      	lsls	r5, r1, #2
 800899e:	4b16      	ldr	r3, [pc, #88]	; (80089f8 <AddPortButton+0x11c>)
 80089a0:	58e8      	ldr	r0, [r5, r3]
 80089a2:	f006 f8f9 	bl	800eb98 <osSemaphoreRelease>
		osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 80089a6:	4b15      	ldr	r3, [pc, #84]	; (80089fc <AddPortButton+0x120>)
 80089a8:	58e8      	ldr	r0, [r5, r3]
 80089aa:	f006 f8f5 	bl	800eb98 <osSemaphoreRelease>
 80089ae:	e79d      	b.n	80088ec <AddPortButton+0x10>
		HAL_UART_DeInit(GetUart(port));
 80089b0:	0020      	movs	r0, r4
 80089b2:	f005 fb57 	bl	800e064 <GetUart>
 80089b6:	f00a fda6 	bl	8013506 <HAL_UART_DeInit>
 80089ba:	e79e      	b.n	80088fa <AddPortButton+0x1e>
	  	temp16 = ((uint16_t)port << 12) | ((uint16_t)buttonType << 8);
 80089bc:	0324      	lsls	r4, r4, #12
 80089be:	0231      	lsls	r1, r6, #8
 80089c0:	4321      	orrs	r1, r4
 80089c2:	b289      	uxth	r1, r1
 80089c4:	230e      	movs	r3, #14
 80089c6:	446b      	add	r3, sp
 80089c8:	8019      	strh	r1, [r3, #0]
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);		
 80089ca:	0028      	movs	r0, r5
 80089cc:	f7ff f87e 	bl	8007acc <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 80089d0:	1c68      	adds	r0, r5, #1
 80089d2:	2100      	movs	r1, #0
 80089d4:	f7ff f87a 	bl	8007acc <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 80089d8:	1ca8      	adds	r0, r5, #2
 80089da:	2100      	movs	r1, #0
 80089dc:	f7ff f876 	bl	8007acc <EE_WriteVariable>
	  	EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);
 80089e0:	1ce8      	adds	r0, r5, #3
 80089e2:	2100      	movs	r1, #0
 80089e4:	f7ff f872 	bl	8007acc <EE_WriteVariable>
 80089e8:	e7d5      	b.n	8008996 <AddPortButton+0xba>
 80089ea:	46c0      	nop			; (mov r8, r8)
 80089ec:	20000b65 	.word	0x20000b65
 80089f0:	20000e5c 	.word	0x20000e5c
 80089f4:	20001240 	.word	0x20001240
 80089f8:	20006780 	.word	0x20006780
 80089fc:	20006764 	.word	0x20006764

08008a00 <RemovePortButton>:

/* --- Undefine a button attached to one of array ports and restore the port to default state
					port: array port (P1 - Px)
*/
BOS_Status RemovePortButton(uint8_t port)
{
 8008a00:	b570      	push	{r4, r5, r6, lr}
 8008a02:	b082      	sub	sp, #8
 8008a04:	0005      	movs	r5, r0
	BOS_Status result = BOS_OK;
	uint16_t res, temp16;
	
	/* 1. Remove from button struct */
	button[port].type = NONE;
 8008a06:	4837      	ldr	r0, [pc, #220]	; (8008ae4 <RemovePortButton+0xe4>)
 8008a08:	00e9      	lsls	r1, r5, #3
 8008a0a:	1949      	adds	r1, r1, r5
 8008a0c:	1842      	adds	r2, r0, r1
 8008a0e:	2300      	movs	r3, #0
 8008a10:	7053      	strb	r3, [r2, #1]
	button[port].state = NONE;
 8008a12:	540b      	strb	r3, [r1, r0]
	button[port].events = 0;
 8008a14:	7213      	strb	r3, [r2, #8]
	button[port].pressedX1Sec = 0; button[port].pressedX2Sec = 0; button[port].pressedX3Sec = 0;
 8008a16:	7093      	strb	r3, [r2, #2]
 8008a18:	70d3      	strb	r3, [r2, #3]
 8008a1a:	7113      	strb	r3, [r2, #4]
	button[port].releasedY1Sec = 0; button[port].releasedY2Sec = 0; button[port].releasedY3Sec = 0;
 8008a1c:	7153      	strb	r3, [r2, #5]
 8008a1e:	7193      	strb	r3, [r2, #6]
 8008a20:	71d3      	strb	r3, [r2, #7]
	
	/* 2. Remove from EEPROM if it's already there */
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 8008a22:	002c      	movs	r4, r5
 8008a24:	343a      	adds	r4, #58	; 0x3a
 8008a26:	00a4      	lsls	r4, r4, #2
 8008a28:	466b      	mov	r3, sp
 8008a2a:	1d99      	adds	r1, r3, #6
 8008a2c:	0020      	movs	r0, r4
 8008a2e:	f7ff f821 	bl	8007a74 <EE_ReadVariable>
	if(!res)																														// This variable exists, reset all to zeros
 8008a32:	2800      	cmp	r0, #0
 8008a34:	d02b      	beq.n	8008a8e <RemovePortButton+0x8e>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);		
	}
	
	/* 3. Initialize UART at this port */
	UART_HandleTypeDef* huart = GetUart(port);
 8008a36:	0028      	movs	r0, r5
 8008a38:	f005 fb14 	bl	800e064 <GetUart>
 8008a3c:	0006      	movs	r6, r0
	
	if (huart->Instance == USART1) 
 8008a3e:	6803      	ldr	r3, [r0, #0]
 8008a40:	4a29      	ldr	r2, [pc, #164]	; (8008ae8 <RemovePortButton+0xe8>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d034      	beq.n	8008ab0 <RemovePortButton+0xb0>
	{	
#ifdef _Usart1		
		MX_USART1_UART_Init();
#endif
	} 
	else if (huart->Instance == USART2) 
 8008a46:	4a29      	ldr	r2, [pc, #164]	; (8008aec <RemovePortButton+0xec>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d035      	beq.n	8008ab8 <RemovePortButton+0xb8>
	{	
#ifdef _Usart2	
		MX_USART2_UART_Init();
#endif
	} 
	else if (huart->Instance == USART3) 
 8008a4c:	4a28      	ldr	r2, [pc, #160]	; (8008af0 <RemovePortButton+0xf0>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d036      	beq.n	8008ac0 <RemovePortButton+0xc0>
	{	
#ifdef _Usart3	
		MX_USART3_UART_Init();
#endif
	} 
	else if (huart->Instance == USART4) 
 8008a52:	4a28      	ldr	r2, [pc, #160]	; (8008af4 <RemovePortButton+0xf4>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d037      	beq.n	8008ac8 <RemovePortButton+0xc8>
	{	
#ifdef _Usart4	
		MX_USART4_UART_Init();
#endif
	} 
	else if (huart->Instance == USART5) 
 8008a58:	4a27      	ldr	r2, [pc, #156]	; (8008af8 <RemovePortButton+0xf8>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d038      	beq.n	8008ad0 <RemovePortButton+0xd0>
	{	
#ifdef _Usart5	
		MX_USART5_UART_Init();
#endif
	} 
	else if (huart->Instance == USART6) 
 8008a5e:	4a27      	ldr	r2, [pc, #156]	; (8008afc <RemovePortButton+0xfc>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d039      	beq.n	8008ad8 <RemovePortButton+0xd8>
	{	
#ifdef _Usart6	
		MX_USART6_UART_Init();
#endif
	} 
	else if (huart->Instance == USART7) 
 8008a64:	4a26      	ldr	r2, [pc, #152]	; (8008b00 <RemovePortButton+0x100>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d03a      	beq.n	8008ae0 <RemovePortButton+0xe0>
	{	
#ifdef _Usart7	
		MX_USART7_UART_Init();
#endif
	} 
	else if (huart->Instance == USART8) 
 8008a6a:	4a26      	ldr	r2, [pc, #152]	; (8008b04 <RemovePortButton+0x104>)
 8008a6c:	4694      	mov	ip, r2
 8008a6e:	4463      	add	r3, ip
 8008a70:	1e5c      	subs	r4, r3, #1
 8008a72:	41a3      	sbcs	r3, r4
 8008a74:	425c      	negs	r4, r3
 8008a76:	b2e4      	uxtb	r4, r4
	} 
	else
		result = BOS_ERROR;			
	
	/* 4. Start scanning this port */
	portStatus[port] = FREE;
 8008a78:	4b23      	ldr	r3, [pc, #140]	; (8008b08 <RemovePortButton+0x108>)
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	555a      	strb	r2, [r3, r5]
	/* Read this port again */
	HAL_UART_Receive_IT(huart, (uint8_t *)&cRxedChar, 1);	
 8008a7e:	3201      	adds	r2, #1
 8008a80:	4922      	ldr	r1, [pc, #136]	; (8008b0c <RemovePortButton+0x10c>)
 8008a82:	0030      	movs	r0, r6
 8008a84:	f00a fd98 	bl	80135b8 <HAL_UART_Receive_IT>
	
	return result;
}
 8008a88:	0020      	movs	r0, r4
 8008a8a:	b002      	add	sp, #8
 8008a8c:	bd70      	pop	{r4, r5, r6, pc}
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), 0);
 8008a8e:	2100      	movs	r1, #0
 8008a90:	0020      	movs	r0, r4
 8008a92:	f7ff f81b 	bl	8007acc <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, 0);
 8008a96:	1c60      	adds	r0, r4, #1
 8008a98:	2100      	movs	r1, #0
 8008a9a:	f7ff f817 	bl	8007acc <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, 0);
 8008a9e:	1ca0      	adds	r0, r4, #2
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	f7ff f813 	bl	8007acc <EE_WriteVariable>
		EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, 0);		
 8008aa6:	1ce0      	adds	r0, r4, #3
 8008aa8:	2100      	movs	r1, #0
 8008aaa:	f7ff f80f 	bl	8007acc <EE_WriteVariable>
 8008aae:	e7c2      	b.n	8008a36 <RemovePortButton+0x36>
		MX_USART1_UART_Init();
 8008ab0:	f005 f8fa 	bl	800dca8 <MX_USART1_UART_Init>
	BOS_Status result = BOS_OK;
 8008ab4:	2400      	movs	r4, #0
 8008ab6:	e7df      	b.n	8008a78 <RemovePortButton+0x78>
		MX_USART2_UART_Init();
 8008ab8:	f005 f90e 	bl	800dcd8 <MX_USART2_UART_Init>
	BOS_Status result = BOS_OK;
 8008abc:	2400      	movs	r4, #0
 8008abe:	e7db      	b.n	8008a78 <RemovePortButton+0x78>
		MX_USART3_UART_Init();
 8008ac0:	f005 f922 	bl	800dd08 <MX_USART3_UART_Init>
	BOS_Status result = BOS_OK;
 8008ac4:	2400      	movs	r4, #0
 8008ac6:	e7d7      	b.n	8008a78 <RemovePortButton+0x78>
		MX_USART4_UART_Init();
 8008ac8:	f005 f936 	bl	800dd38 <MX_USART4_UART_Init>
	BOS_Status result = BOS_OK;
 8008acc:	2400      	movs	r4, #0
 8008ace:	e7d3      	b.n	8008a78 <RemovePortButton+0x78>
		MX_USART5_UART_Init();
 8008ad0:	f005 f94a 	bl	800dd68 <MX_USART5_UART_Init>
	BOS_Status result = BOS_OK;
 8008ad4:	2400      	movs	r4, #0
 8008ad6:	e7cf      	b.n	8008a78 <RemovePortButton+0x78>
		MX_USART6_UART_Init();
 8008ad8:	f005 f968 	bl	800ddac <MX_USART6_UART_Init>
	BOS_Status result = BOS_OK;
 8008adc:	2400      	movs	r4, #0
 8008ade:	e7cb      	b.n	8008a78 <RemovePortButton+0x78>
 8008ae0:	2400      	movs	r4, #0
 8008ae2:	e7c9      	b.n	8008a78 <RemovePortButton+0x78>
 8008ae4:	20001240 	.word	0x20001240
 8008ae8:	40013800 	.word	0x40013800
 8008aec:	40004400 	.word	0x40004400
 8008af0:	40004800 	.word	0x40004800
 8008af4:	40004c00 	.word	0x40004c00
 8008af8:	40005000 	.word	0x40005000
 8008afc:	40011400 	.word	0x40011400
 8008b00:	40011800 	.word	0x40011800
 8008b04:	bffee400 	.word	0xbffee400
 8008b08:	20000e5c 	.word	0x20000e5c
 8008b0c:	20000cf4 	.word	0x20000cf4

08008b10 <SetButtonEvents>:
					released_x1sec, released_x1sec, released_x1sec: Release time for events Y1, Y2 and Y3 in seconds. Use 0 to disable the event. 
					mode: BUTTON_EVENT_MODE_CLEAR to clear events marked with 0, BUTTON_EVENT_MODE_OR to OR events marked with 1 with existing events.
*/
BOS_Status SetButtonEvents(uint8_t port, uint8_t clicked, uint8_t dbl_clicked, uint8_t pressed_x1sec, uint8_t pressed_x2sec, uint8_t pressed_x3sec,\
													uint8_t released_y1sec, uint8_t released_y2sec, uint8_t released_y3sec, uint8_t mode)
{
 8008b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b12:	46de      	mov	lr, fp
 8008b14:	4657      	mov	r7, sl
 8008b16:	464e      	mov	r6, r9
 8008b18:	4645      	mov	r5, r8
 8008b1a:	b5e0      	push	{r5, r6, r7, lr}
 8008b1c:	b085      	sub	sp, #20
 8008b1e:	0005      	movs	r5, r0
 8008b20:	469c      	mov	ip, r3
 8008b22:	9301      	str	r3, [sp, #4]
 8008b24:	ab0e      	add	r3, sp, #56	; 0x38
 8008b26:	781e      	ldrb	r6, [r3, #0]
 8008b28:	ab0f      	add	r3, sp, #60	; 0x3c
 8008b2a:	781f      	ldrb	r7, [r3, #0]
 8008b2c:	ab10      	add	r3, sp, #64	; 0x40
 8008b2e:	7818      	ldrb	r0, [r3, #0]
 8008b30:	4681      	mov	r9, r0
 8008b32:	ab11      	add	r3, sp, #68	; 0x44
 8008b34:	7818      	ldrb	r0, [r3, #0]
 8008b36:	4682      	mov	sl, r0
 8008b38:	ab12      	add	r3, sp, #72	; 0x48
 8008b3a:	7818      	ldrb	r0, [r3, #0]
 8008b3c:	4680      	mov	r8, r0
 8008b3e:	ab13      	add	r3, sp, #76	; 0x4c
 8008b40:	7818      	ldrb	r0, [r3, #0]
	BOS_Status result = BOS_OK;	
	uint16_t res, temp16; uint8_t temp8;
	
	if (button[port].type == NONE)
 8008b42:	00ec      	lsls	r4, r5, #3
 8008b44:	1964      	adds	r4, r4, r5
 8008b46:	4bcd      	ldr	r3, [pc, #820]	; (8008e7c <SetButtonEvents+0x36c>)
 8008b48:	191b      	adds	r3, r3, r4
 8008b4a:	785b      	ldrb	r3, [r3, #1]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d100      	bne.n	8008b52 <SetButtonEvents+0x42>
 8008b50:	e08c      	b.n	8008c6c <SetButtonEvents+0x15c>
		return BOS_ERR_BUTTON_NOT_DEFINED;
	
	button[port].pressedX1Sec = pressed_x1sec; button[port].pressedX2Sec = pressed_x2sec; button[port].pressedX3Sec = pressed_x3sec;
 8008b52:	00ec      	lsls	r4, r5, #3
 8008b54:	1964      	adds	r4, r4, r5
 8008b56:	4bc9      	ldr	r3, [pc, #804]	; (8008e7c <SetButtonEvents+0x36c>)
 8008b58:	191b      	adds	r3, r3, r4
 8008b5a:	4664      	mov	r4, ip
 8008b5c:	709c      	strb	r4, [r3, #2]
 8008b5e:	70de      	strb	r6, [r3, #3]
 8008b60:	711f      	strb	r7, [r3, #4]
	button[port].releasedY1Sec = released_y1sec; button[port].releasedY2Sec = released_y2sec; button[port].releasedY3Sec = released_y3sec;
 8008b62:	464c      	mov	r4, r9
 8008b64:	715c      	strb	r4, [r3, #5]
 8008b66:	4654      	mov	r4, sl
 8008b68:	719c      	strb	r4, [r3, #6]
 8008b6a:	4644      	mov	r4, r8
 8008b6c:	71dc      	strb	r4, [r3, #7]
	
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && clicked)) {				
 8008b6e:	2801      	cmp	r0, #1
 8008b70:	d100      	bne.n	8008b74 <SetButtonEvents+0x64>
 8008b72:	e0ec      	b.n	8008d4e <SetButtonEvents+0x23e>
 8008b74:	2800      	cmp	r0, #0
 8008b76:	d000      	beq.n	8008b7a <SetButtonEvents+0x6a>
 8008b78:	e124      	b.n	8008dc4 <SetButtonEvents+0x2b4>
 8008b7a:	2900      	cmp	r1, #0
 8008b7c:	d000      	beq.n	8008b80 <SetButtonEvents+0x70>
 8008b7e:	e170      	b.n	8008e62 <SetButtonEvents+0x352>
		button[port].events |= BUTTON_EVENT_CLICKED;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !clicked) {
		button[port].events &= ~BUTTON_EVENT_CLICKED;		
 8008b80:	00e9      	lsls	r1, r5, #3
 8008b82:	1949      	adds	r1, r1, r5
 8008b84:	4bbd      	ldr	r3, [pc, #756]	; (8008e7c <SetButtonEvents+0x36c>)
 8008b86:	185b      	adds	r3, r3, r1
 8008b88:	7a19      	ldrb	r1, [r3, #8]
 8008b8a:	2401      	movs	r4, #1
 8008b8c:	43a1      	bics	r1, r4
 8008b8e:	7219      	strb	r1, [r3, #8]
	}
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 8008b90:	2a00      	cmp	r2, #0
 8008b92:	d100      	bne.n	8008b96 <SetButtonEvents+0x86>
 8008b94:	e0c3      	b.n	8008d1e <SetButtonEvents+0x20e>
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 8008b96:	00ea      	lsls	r2, r5, #3
 8008b98:	1952      	adds	r2, r2, r5
 8008b9a:	4bb8      	ldr	r3, [pc, #736]	; (8008e7c <SetButtonEvents+0x36c>)
 8008b9c:	189b      	adds	r3, r3, r2
 8008b9e:	7a1a      	ldrb	r2, [r3, #8]
 8008ba0:	2102      	movs	r1, #2
 8008ba2:	430a      	orrs	r2, r1
 8008ba4:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !dbl_clicked) {
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {			
 8008ba6:	2801      	cmp	r0, #1
 8008ba8:	d100      	bne.n	8008bac <SetButtonEvents+0x9c>
 8008baa:	e0da      	b.n	8008d62 <SetButtonEvents+0x252>
 8008bac:	2800      	cmp	r0, #0
 8008bae:	d100      	bne.n	8008bb2 <SetButtonEvents+0xa2>
 8008bb0:	e0bd      	b.n	8008d2e <SetButtonEvents+0x21e>
 8008bb2:	e107      	b.n	8008dc4 <SetButtonEvents+0x2b4>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x2sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008bb4:	00ea      	lsls	r2, r5, #3
 8008bb6:	1952      	adds	r2, r2, r5
 8008bb8:	4bb0      	ldr	r3, [pc, #704]	; (8008e7c <SetButtonEvents+0x36c>)
 8008bba:	189b      	adds	r3, r3, r2
 8008bbc:	7a1a      	ldrb	r2, [r3, #8]
 8008bbe:	2110      	movs	r1, #16
 8008bc0:	430a      	orrs	r2, r1
 8008bc2:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !pressed_x3sec) {
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8008bc4:	2801      	cmp	r0, #1
 8008bc6:	d100      	bne.n	8008bca <SetButtonEvents+0xba>
 8008bc8:	e0e3      	b.n	8008d92 <SetButtonEvents+0x282>
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	d000      	beq.n	8008bd0 <SetButtonEvents+0xc0>
 8008bce:	e0f9      	b.n	8008dc4 <SetButtonEvents+0x2b4>
 8008bd0:	464b      	mov	r3, r9
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d063      	beq.n	8008c9e <SetButtonEvents+0x18e>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008bd6:	00ea      	lsls	r2, r5, #3
 8008bd8:	1952      	adds	r2, r2, r5
 8008bda:	4ba8      	ldr	r3, [pc, #672]	; (8008e7c <SetButtonEvents+0x36c>)
 8008bdc:	189b      	adds	r3, r3, r2
 8008bde:	7a1a      	ldrb	r2, [r3, #8]
 8008be0:	2120      	movs	r1, #32
 8008be2:	430a      	orrs	r2, r1
 8008be4:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y1sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 8008be6:	e00a      	b.n	8008bfe <SetButtonEvents+0xee>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008be8:	00ea      	lsls	r2, r5, #3
 8008bea:	1952      	adds	r2, r2, r5
 8008bec:	4ba3      	ldr	r3, [pc, #652]	; (8008e7c <SetButtonEvents+0x36c>)
 8008bee:	189b      	adds	r3, r3, r2
 8008bf0:	7a1a      	ldrb	r2, [r3, #8]
 8008bf2:	2120      	movs	r1, #32
 8008bf4:	430a      	orrs	r2, r1
 8008bf6:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 8008bf8:	2801      	cmp	r0, #1
 8008bfa:	d100      	bne.n	8008bfe <SetButtonEvents+0xee>
 8008bfc:	e0d1      	b.n	8008da2 <SetButtonEvents+0x292>
 8008bfe:	2800      	cmp	r0, #0
 8008c00:	d000      	beq.n	8008c04 <SetButtonEvents+0xf4>
 8008c02:	e0df      	b.n	8008dc4 <SetButtonEvents+0x2b4>
 8008c04:	4653      	mov	r3, sl
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d054      	beq.n	8008cb4 <SetButtonEvents+0x1a4>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008c0a:	00ea      	lsls	r2, r5, #3
 8008c0c:	1952      	adds	r2, r2, r5
 8008c0e:	4b9b      	ldr	r3, [pc, #620]	; (8008e7c <SetButtonEvents+0x36c>)
 8008c10:	189b      	adds	r3, r3, r2
 8008c12:	7a1a      	ldrb	r2, [r3, #8]
 8008c14:	2140      	movs	r1, #64	; 0x40
 8008c16:	430a      	orrs	r2, r1
 8008c18:	721a      	strb	r2, [r3, #8]
	} else if (mode == BUTTON_EVENT_MODE_CLEAR && !released_y2sec) {
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;		
	}		
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 8008c1a:	e00a      	b.n	8008c32 <SetButtonEvents+0x122>
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008c1c:	00ea      	lsls	r2, r5, #3
 8008c1e:	1952      	adds	r2, r2, r5
 8008c20:	4b96      	ldr	r3, [pc, #600]	; (8008e7c <SetButtonEvents+0x36c>)
 8008c22:	189b      	adds	r3, r3, r2
 8008c24:	7a1a      	ldrb	r2, [r3, #8]
 8008c26:	2140      	movs	r1, #64	; 0x40
 8008c28:	430a      	orrs	r2, r1
 8008c2a:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 8008c2c:	2801      	cmp	r0, #1
 8008c2e:	d100      	bne.n	8008c32 <SetButtonEvents+0x122>
 8008c30:	e0bf      	b.n	8008db2 <SetButtonEvents+0x2a2>
 8008c32:	2800      	cmp	r0, #0
 8008c34:	d046      	beq.n	8008cc4 <SetButtonEvents+0x1b4>
 8008c36:	e0c5      	b.n	8008dc4 <SetButtonEvents+0x2b4>
	if(!res)																														// This variable exists
	{
		temp8 = (uint8_t)(temp16 >> 8);																		// Keep upper byte
		/* Store event flags */
		if ((uint8_t)(temp16) != button[port].events) {										// Update only if different
			temp16 = ((uint16_t)temp8 << 8) | (uint16_t)button[port].events;
 8008c38:	0a19      	lsrs	r1, r3, #8
 8008c3a:	0209      	lsls	r1, r1, #8
 8008c3c:	4301      	orrs	r1, r0
 8008c3e:	ab02      	add	r3, sp, #8
 8008c40:	80d9      	strh	r1, [r3, #6]
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1), temp16);
 8008c42:	0020      	movs	r0, r4
 8008c44:	f7fe ff42 	bl	8007acc <EE_WriteVariable>
 8008c48:	e0d3      	b.n	8008df2 <SetButtonEvents+0x2e2>
		}
		
		/* Store times - only if different */
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+1, &temp16);
		if ( temp16 != (((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec) )
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+1, ((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec);
 8008c4a:	464b      	mov	r3, r9
 8008c4c:	4319      	orrs	r1, r3
 8008c4e:	4658      	mov	r0, fp
 8008c50:	f7fe ff3c 	bl	8007acc <EE_WriteVariable>
 8008c54:	e0dd      	b.n	8008e12 <SetButtonEvents+0x302>
		
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+2, &temp16);
		if ( temp16 != (((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec) )
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+2, ((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec);
 8008c56:	0019      	movs	r1, r3
 8008c58:	0028      	movs	r0, r5
 8008c5a:	f7fe ff37 	bl	8007acc <EE_WriteVariable>
 8008c5e:	e0ea      	b.n	8008e36 <SetButtonEvents+0x326>
		
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+3, &temp16);
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
			EE_WriteVariable(_EE_BUTTON_BASE+4*(port-1)+3, ((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec);
 8008c60:	0019      	movs	r1, r3
 8008c62:	0020      	movs	r0, r4
 8008c64:	f7fe ff32 	bl	8007acc <EE_WriteVariable>
	}	// TODO - var does not exist after adding button!
	else																																// Variable does not exist. Return error
		return BOS_ERR_BUTTON_NOT_DEFINED;	
		
	
	return result;
 8008c68:	2000      	movs	r0, #0
 8008c6a:	e0f3      	b.n	8008e54 <SetButtonEvents+0x344>
		return BOS_ERR_BUTTON_NOT_DEFINED;
 8008c6c:	200b      	movs	r0, #11
 8008c6e:	e0f1      	b.n	8008e54 <SetButtonEvents+0x344>
		return BOS_ERR_BUTTON_NOT_DEFINED;	
 8008c70:	200b      	movs	r0, #11
 8008c72:	e0ef      	b.n	8008e54 <SetButtonEvents+0x344>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X2_SEC;		
 8008c74:	00ea      	lsls	r2, r5, #3
 8008c76:	1952      	adds	r2, r2, r5
 8008c78:	4b80      	ldr	r3, [pc, #512]	; (8008e7c <SetButtonEvents+0x36c>)
 8008c7a:	189b      	adds	r3, r3, r2
 8008c7c:	7a1a      	ldrb	r2, [r3, #8]
 8008c7e:	2108      	movs	r1, #8
 8008c80:	438a      	bics	r2, r1
 8008c82:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
 8008c84:	2f00      	cmp	r7, #0
 8008c86:	d195      	bne.n	8008bb4 <SetButtonEvents+0xa4>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X3_SEC;		
 8008c88:	00ea      	lsls	r2, r5, #3
 8008c8a:	1952      	adds	r2, r2, r5
 8008c8c:	4b7b      	ldr	r3, [pc, #492]	; (8008e7c <SetButtonEvents+0x36c>)
 8008c8e:	189b      	adds	r3, r3, r2
 8008c90:	7a1a      	ldrb	r2, [r3, #8]
 8008c92:	2110      	movs	r1, #16
 8008c94:	438a      	bics	r2, r1
 8008c96:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8008c98:	464b      	mov	r3, r9
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1a4      	bne.n	8008be8 <SetButtonEvents+0xd8>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y1_SEC;		
 8008c9e:	00ea      	lsls	r2, r5, #3
 8008ca0:	1952      	adds	r2, r2, r5
 8008ca2:	4b76      	ldr	r3, [pc, #472]	; (8008e7c <SetButtonEvents+0x36c>)
 8008ca4:	189b      	adds	r3, r3, r2
 8008ca6:	7a1a      	ldrb	r2, [r3, #8]
 8008ca8:	2120      	movs	r1, #32
 8008caa:	438a      	bics	r2, r1
 8008cac:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y2sec)) {		
 8008cae:	4653      	mov	r3, sl
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1b3      	bne.n	8008c1c <SetButtonEvents+0x10c>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y2_SEC;		
 8008cb4:	00ea      	lsls	r2, r5, #3
 8008cb6:	1952      	adds	r2, r2, r5
 8008cb8:	4b70      	ldr	r3, [pc, #448]	; (8008e7c <SetButtonEvents+0x36c>)
 8008cba:	189b      	adds	r3, r3, r2
 8008cbc:	7a1a      	ldrb	r2, [r3, #8]
 8008cbe:	2140      	movs	r1, #64	; 0x40
 8008cc0:	438a      	bics	r2, r1
 8008cc2:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y3sec)) {		
 8008cc4:	4643      	mov	r3, r8
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d173      	bne.n	8008db2 <SetButtonEvents+0x2a2>
		button[port].events &= ~BUTTON_EVENT_RELEASED_FOR_Y3_SEC;		
 8008cca:	00ea      	lsls	r2, r5, #3
 8008ccc:	1952      	adds	r2, r2, r5
 8008cce:	4b6b      	ldr	r3, [pc, #428]	; (8008e7c <SetButtonEvents+0x36c>)
 8008cd0:	189b      	adds	r3, r3, r2
 8008cd2:	7a19      	ldrb	r1, [r3, #8]
 8008cd4:	227f      	movs	r2, #127	; 0x7f
 8008cd6:	400a      	ands	r2, r1
 8008cd8:	721a      	strb	r2, [r3, #8]
 8008cda:	e073      	b.n	8008dc4 <SetButtonEvents+0x2b4>
		button[port].events &= ~BUTTON_EVENT_PRESSED_FOR_X1_SEC;		
 8008cdc:	00ea      	lsls	r2, r5, #3
 8008cde:	1952      	adds	r2, r2, r5
 8008ce0:	4b66      	ldr	r3, [pc, #408]	; (8008e7c <SetButtonEvents+0x36c>)
 8008ce2:	189b      	adds	r3, r3, r2
 8008ce4:	7a1a      	ldrb	r2, [r3, #8]
 8008ce6:	2104      	movs	r1, #4
 8008ce8:	438a      	bics	r2, r1
 8008cea:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 8008cec:	2e00      	cmp	r6, #0
 8008cee:	d0c1      	beq.n	8008c74 <SetButtonEvents+0x164>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8008cf0:	00ea      	lsls	r2, r5, #3
 8008cf2:	1952      	adds	r2, r2, r5
 8008cf4:	4b61      	ldr	r3, [pc, #388]	; (8008e7c <SetButtonEvents+0x36c>)
 8008cf6:	189b      	adds	r3, r3, r2
 8008cf8:	7a1a      	ldrb	r2, [r3, #8]
 8008cfa:	2108      	movs	r1, #8
 8008cfc:	430a      	orrs	r2, r1
 8008cfe:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x3sec)) {		
 8008d00:	2801      	cmp	r0, #1
 8008d02:	d03e      	beq.n	8008d82 <SetButtonEvents+0x272>
 8008d04:	2800      	cmp	r0, #0
 8008d06:	d15d      	bne.n	8008dc4 <SetButtonEvents+0x2b4>
 8008d08:	2f00      	cmp	r7, #0
 8008d0a:	d0bd      	beq.n	8008c88 <SetButtonEvents+0x178>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008d0c:	00ea      	lsls	r2, r5, #3
 8008d0e:	1952      	adds	r2, r2, r5
 8008d10:	4b5a      	ldr	r3, [pc, #360]	; (8008e7c <SetButtonEvents+0x36c>)
 8008d12:	189b      	adds	r3, r3, r2
 8008d14:	7a1a      	ldrb	r2, [r3, #8]
 8008d16:	2110      	movs	r1, #16
 8008d18:	430a      	orrs	r2, r1
 8008d1a:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && released_y1sec)) {		
 8008d1c:	e755      	b.n	8008bca <SetButtonEvents+0xba>
		button[port].events &= ~BUTTON_EVENT_DBL_CLICKED;		
 8008d1e:	00ea      	lsls	r2, r5, #3
 8008d20:	1952      	adds	r2, r2, r5
 8008d22:	4b56      	ldr	r3, [pc, #344]	; (8008e7c <SetButtonEvents+0x36c>)
 8008d24:	189b      	adds	r3, r3, r2
 8008d26:	7a1a      	ldrb	r2, [r3, #8]
 8008d28:	2102      	movs	r1, #2
 8008d2a:	438a      	bics	r2, r1
 8008d2c:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x1sec)) {			
 8008d2e:	9b01      	ldr	r3, [sp, #4]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d0d3      	beq.n	8008cdc <SetButtonEvents+0x1cc>
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008d34:	00ea      	lsls	r2, r5, #3
 8008d36:	1952      	adds	r2, r2, r5
 8008d38:	4b50      	ldr	r3, [pc, #320]	; (8008e7c <SetButtonEvents+0x36c>)
 8008d3a:	189b      	adds	r3, r3, r2
 8008d3c:	7a1a      	ldrb	r2, [r3, #8]
 8008d3e:	2104      	movs	r1, #4
 8008d40:	430a      	orrs	r2, r1
 8008d42:	721a      	strb	r2, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && pressed_x2sec)) {		
 8008d44:	2801      	cmp	r0, #1
 8008d46:	d014      	beq.n	8008d72 <SetButtonEvents+0x262>
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	d0cf      	beq.n	8008cec <SetButtonEvents+0x1dc>
 8008d4c:	e03a      	b.n	8008dc4 <SetButtonEvents+0x2b4>
		button[port].events |= BUTTON_EVENT_CLICKED;
 8008d4e:	00eb      	lsls	r3, r5, #3
 8008d50:	195b      	adds	r3, r3, r5
 8008d52:	4a4a      	ldr	r2, [pc, #296]	; (8008e7c <SetButtonEvents+0x36c>)
 8008d54:	18d2      	adds	r2, r2, r3
 8008d56:	7a13      	ldrb	r3, [r2, #8]
 8008d58:	2101      	movs	r1, #1
 8008d5a:	430b      	orrs	r3, r1
		button[port].events |= BUTTON_EVENT_DBL_CLICKED;
 8008d5c:	2102      	movs	r1, #2
 8008d5e:	430b      	orrs	r3, r1
 8008d60:	7213      	strb	r3, [r2, #8]
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X1_SEC;
 8008d62:	00ea      	lsls	r2, r5, #3
 8008d64:	1952      	adds	r2, r2, r5
 8008d66:	4b45      	ldr	r3, [pc, #276]	; (8008e7c <SetButtonEvents+0x36c>)
 8008d68:	189b      	adds	r3, r3, r2
 8008d6a:	7a1a      	ldrb	r2, [r3, #8]
 8008d6c:	2104      	movs	r1, #4
 8008d6e:	430a      	orrs	r2, r1
 8008d70:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X2_SEC;
 8008d72:	00ea      	lsls	r2, r5, #3
 8008d74:	1952      	adds	r2, r2, r5
 8008d76:	4b41      	ldr	r3, [pc, #260]	; (8008e7c <SetButtonEvents+0x36c>)
 8008d78:	189b      	adds	r3, r3, r2
 8008d7a:	7a1a      	ldrb	r2, [r3, #8]
 8008d7c:	2108      	movs	r1, #8
 8008d7e:	430a      	orrs	r2, r1
 8008d80:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_PRESSED_FOR_X3_SEC;
 8008d82:	00ea      	lsls	r2, r5, #3
 8008d84:	1952      	adds	r2, r2, r5
 8008d86:	4b3d      	ldr	r3, [pc, #244]	; (8008e7c <SetButtonEvents+0x36c>)
 8008d88:	189b      	adds	r3, r3, r2
 8008d8a:	7a1a      	ldrb	r2, [r3, #8]
 8008d8c:	2110      	movs	r1, #16
 8008d8e:	430a      	orrs	r2, r1
 8008d90:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y1_SEC;
 8008d92:	00ea      	lsls	r2, r5, #3
 8008d94:	1952      	adds	r2, r2, r5
 8008d96:	4b39      	ldr	r3, [pc, #228]	; (8008e7c <SetButtonEvents+0x36c>)
 8008d98:	189b      	adds	r3, r3, r2
 8008d9a:	7a1a      	ldrb	r2, [r3, #8]
 8008d9c:	2120      	movs	r1, #32
 8008d9e:	430a      	orrs	r2, r1
 8008da0:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y2_SEC;
 8008da2:	00ea      	lsls	r2, r5, #3
 8008da4:	1952      	adds	r2, r2, r5
 8008da6:	4b35      	ldr	r3, [pc, #212]	; (8008e7c <SetButtonEvents+0x36c>)
 8008da8:	189b      	adds	r3, r3, r2
 8008daa:	7a1a      	ldrb	r2, [r3, #8]
 8008dac:	2140      	movs	r1, #64	; 0x40
 8008dae:	430a      	orrs	r2, r1
 8008db0:	721a      	strb	r2, [r3, #8]
		button[port].events |= BUTTON_EVENT_RELEASED_FOR_Y3_SEC;	
 8008db2:	00ea      	lsls	r2, r5, #3
 8008db4:	1952      	adds	r2, r2, r5
 8008db6:	4b31      	ldr	r3, [pc, #196]	; (8008e7c <SetButtonEvents+0x36c>)
 8008db8:	189b      	adds	r3, r3, r2
 8008dba:	7a19      	ldrb	r1, [r3, #8]
 8008dbc:	2280      	movs	r2, #128	; 0x80
 8008dbe:	4252      	negs	r2, r2
 8008dc0:	430a      	orrs	r2, r1
 8008dc2:	721a      	strb	r2, [r3, #8]
	res = EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1), &temp16);
 8008dc4:	002c      	movs	r4, r5
 8008dc6:	343a      	adds	r4, #58	; 0x3a
 8008dc8:	00a4      	lsls	r4, r4, #2
 8008dca:	ab02      	add	r3, sp, #8
 8008dcc:	1d99      	adds	r1, r3, #6
 8008dce:	0020      	movs	r0, r4
 8008dd0:	f7fe fe50 	bl	8007a74 <EE_ReadVariable>
	if(!res)																														// This variable exists
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d000      	beq.n	8008dda <SetButtonEvents+0x2ca>
 8008dd8:	e74a      	b.n	8008c70 <SetButtonEvents+0x160>
		temp8 = (uint8_t)(temp16 >> 8);																		// Keep upper byte
 8008dda:	ab02      	add	r3, sp, #8
 8008ddc:	1d9a      	adds	r2, r3, #6
 8008dde:	88db      	ldrh	r3, [r3, #6]
		if ((uint8_t)(temp16) != button[port].events) {										// Update only if different
 8008de0:	00e8      	lsls	r0, r5, #3
 8008de2:	1945      	adds	r5, r0, r5
 8008de4:	4825      	ldr	r0, [pc, #148]	; (8008e7c <SetButtonEvents+0x36c>)
 8008de6:	1940      	adds	r0, r0, r5
 8008de8:	7a00      	ldrb	r0, [r0, #8]
 8008dea:	7812      	ldrb	r2, [r2, #0]
 8008dec:	4282      	cmp	r2, r0
 8008dee:	d000      	beq.n	8008df2 <SetButtonEvents+0x2e2>
 8008df0:	e722      	b.n	8008c38 <SetButtonEvents+0x128>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+1, &temp16);
 8008df2:	1c63      	adds	r3, r4, #1
 8008df4:	469b      	mov	fp, r3
 8008df6:	ab02      	add	r3, sp, #8
 8008df8:	1d9d      	adds	r5, r3, #6
 8008dfa:	0029      	movs	r1, r5
 8008dfc:	4658      	mov	r0, fp
 8008dfe:	f7fe fe39 	bl	8007a74 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x1sec << 8) | (uint16_t) released_y1sec) )
 8008e02:	9b01      	ldr	r3, [sp, #4]
 8008e04:	0219      	lsls	r1, r3, #8
 8008e06:	882a      	ldrh	r2, [r5, #0]
 8008e08:	464b      	mov	r3, r9
 8008e0a:	430b      	orrs	r3, r1
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d000      	beq.n	8008e12 <SetButtonEvents+0x302>
 8008e10:	e71b      	b.n	8008c4a <SetButtonEvents+0x13a>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+2, &temp16);
 8008e12:	1ca5      	adds	r5, r4, #2
 8008e14:	2306      	movs	r3, #6
 8008e16:	aa02      	add	r2, sp, #8
 8008e18:	4694      	mov	ip, r2
 8008e1a:	4463      	add	r3, ip
 8008e1c:	4699      	mov	r9, r3
 8008e1e:	0019      	movs	r1, r3
 8008e20:	0028      	movs	r0, r5
 8008e22:	f7fe fe27 	bl	8007a74 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x2sec << 8) | (uint16_t) released_y2sec) )
 8008e26:	0236      	lsls	r6, r6, #8
 8008e28:	464b      	mov	r3, r9
 8008e2a:	881a      	ldrh	r2, [r3, #0]
 8008e2c:	4653      	mov	r3, sl
 8008e2e:	4333      	orrs	r3, r6
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d000      	beq.n	8008e36 <SetButtonEvents+0x326>
 8008e34:	e70f      	b.n	8008c56 <SetButtonEvents+0x146>
		EE_ReadVariable(_EE_BUTTON_BASE+4*(port-1)+3, &temp16);
 8008e36:	3403      	adds	r4, #3
 8008e38:	ab02      	add	r3, sp, #8
 8008e3a:	1d9d      	adds	r5, r3, #6
 8008e3c:	0029      	movs	r1, r5
 8008e3e:	0020      	movs	r0, r4
 8008e40:	f7fe fe18 	bl	8007a74 <EE_ReadVariable>
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
 8008e44:	023f      	lsls	r7, r7, #8
 8008e46:	882a      	ldrh	r2, [r5, #0]
 8008e48:	4643      	mov	r3, r8
 8008e4a:	433b      	orrs	r3, r7
	return result;
 8008e4c:	2000      	movs	r0, #0
		if ( temp16 != (((uint16_t)pressed_x3sec << 8) | (uint16_t) released_y3sec) )
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d000      	beq.n	8008e54 <SetButtonEvents+0x344>
 8008e52:	e705      	b.n	8008c60 <SetButtonEvents+0x150>
}
 8008e54:	b005      	add	sp, #20
 8008e56:	bcf0      	pop	{r4, r5, r6, r7}
 8008e58:	46bb      	mov	fp, r7
 8008e5a:	46b2      	mov	sl, r6
 8008e5c:	46a9      	mov	r9, r5
 8008e5e:	46a0      	mov	r8, r4
 8008e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
		button[port].events |= BUTTON_EVENT_CLICKED;
 8008e62:	00e9      	lsls	r1, r5, #3
 8008e64:	1949      	adds	r1, r1, r5
 8008e66:	4b05      	ldr	r3, [pc, #20]	; (8008e7c <SetButtonEvents+0x36c>)
 8008e68:	185b      	adds	r3, r3, r1
 8008e6a:	7a19      	ldrb	r1, [r3, #8]
 8008e6c:	2401      	movs	r4, #1
 8008e6e:	4321      	orrs	r1, r4
 8008e70:	7219      	strb	r1, [r3, #8]
	if (mode == BUTTON_EVENT_MODE_OR || (mode == BUTTON_EVENT_MODE_CLEAR && dbl_clicked)) {		
 8008e72:	2800      	cmp	r0, #0
 8008e74:	d100      	bne.n	8008e78 <SetButtonEvents+0x368>
 8008e76:	e68b      	b.n	8008b90 <SetButtonEvents+0x80>
 8008e78:	e7a4      	b.n	8008dc4 <SetButtonEvents+0x2b4>
 8008e7a:	46c0      	nop			; (mov r8, r8)
 8008e7c:	20001240 	.word	0x20001240

08008e80 <StreamTimerCallback>:
/*-----------------------------------------------------------*/

/* --- DMA stream timer callback --- 
*/
void StreamTimerCallback( TimerHandle_t xTimerStream )
{
 8008e80:	b510      	push	{r4, lr}
	uint32_t tid = 0;
	
	tid = ( uint32_t ) pvTimerGetTimerID( xTimerStream );
 8008e82:	f007 fcd3 	bl	801082c <pvTimerGetTimerID>
	
	StopStreamDMA(tid);
 8008e86:	b2c4      	uxtb	r4, r0
 8008e88:	0020      	movs	r0, r4
 8008e8a:	f7fe fcab 	bl	80077e4 <StopStreamDMA>
	
	SwitchStreamDMAToMsg(tid);
 8008e8e:	0020      	movs	r0, r4
 8008e90:	f7fe fcd6 	bl	8007840 <SwitchStreamDMAToMsg>
}
 8008e94:	bd10      	pop	{r4, pc}
	...

08008e98 <SetupDMAStreams>:
{
 8008e98:	b570      	push	{r4, r5, r6, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	0005      	movs	r5, r0
 8008e9e:	000c      	movs	r4, r1
 8008ea0:	0016      	movs	r6, r2
 8008ea2:	220f      	movs	r2, #15
 8008ea4:	446a      	add	r2, sp
 8008ea6:	7013      	strb	r3, [r2, #0]
	if (src == dst) {							// Streaming inside destination module. Lock this port to streaming but no need to setup DMA
 8008ea8:	aa08      	add	r2, sp, #32
 8008eaa:	7810      	ldrb	r0, [r2, #0]
 8008eac:	4283      	cmp	r3, r0
 8008eae:	d057      	beq.n	8008f60 <SetupDMAStreams+0xc8>
	} else if (src == 0 || dst == 0) 			// Streaming outside source module or inside destination module without defining ports. Do not lock the port and do not setup DMA
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d100      	bne.n	8008eb6 <SetupDMAStreams+0x1e>
 8008eb4:	e0ba      	b.n	800902c <SetupDMAStreams+0x194>
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	d100      	bne.n	8008ebc <SetupDMAStreams+0x24>
 8008eba:	e0ba      	b.n	8009032 <SetupDMAStreams+0x19a>
	if (direction == FORWARD) 
 8008ebc:	2d00      	cmp	r5, #0
 8008ebe:	d054      	beq.n	8008f6a <SetupDMAStreams+0xd2>
	else if (direction == BACKWARD) 
 8008ec0:	2d01      	cmp	r5, #1
 8008ec2:	d100      	bne.n	8008ec6 <SetupDMAStreams+0x2e>
 8008ec4:	e089      	b.n	8008fda <SetupDMAStreams+0x142>
		return BOS_ERR_WrongParam;
 8008ec6:	2067      	movs	r0, #103	; 0x67
	else if (direction == BIDIRECTIONAL) 
 8008ec8:	2d02      	cmp	r5, #2
 8008eca:	d000      	beq.n	8008ece <SetupDMAStreams+0x36>
 8008ecc:	e0af      	b.n	800902e <SetupDMAStreams+0x196>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY;
 8008ece:	0018      	movs	r0, r3
 8008ed0:	f005 f8c8 	bl	800e064 <GetUart>
 8008ed4:	0005      	movs	r5, r0
 8008ed6:	ab08      	add	r3, sp, #32
 8008ed8:	7818      	ldrb	r0, [r3, #0]
 8008eda:	f005 f8c3 	bl	800e064 <GetUart>
 8008ede:	0001      	movs	r1, r0
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	0028      	movs	r0, r5
 8008ee4:	f7fe fce2 	bl	80078ac <StartDMAstream>
 8008ee8:	2817      	cmp	r0, #23
 8008eea:	d100      	bne.n	8008eee <SetupDMAStreams+0x56>
 8008eec:	e09f      	b.n	800902e <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 8008eee:	0170      	lsls	r0, r6, #5
 8008ef0:	1b80      	subs	r0, r0, r6
 8008ef2:	0080      	lsls	r0, r0, #2
 8008ef4:	1980      	adds	r0, r0, r6
 8008ef6:	00c0      	lsls	r0, r0, #3
 8008ef8:	21fa      	movs	r1, #250	; 0xfa
 8008efa:	0089      	lsls	r1, r1, #2
 8008efc:	f7f7 f928 	bl	8000150 <__udivsi3>
 8008f00:	0005      	movs	r5, r0
 8008f02:	4b4d      	ldr	r3, [pc, #308]	; (8009038 <SetupDMAStreams+0x1a0>)
 8008f04:	9300      	str	r3, [sp, #0]
 8008f06:	230f      	movs	r3, #15
 8008f08:	446b      	add	r3, sp
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	0001      	movs	r1, r0
 8008f0e:	484b      	ldr	r0, [pc, #300]	; (800903c <SetupDMAStreams+0x1a4>)
 8008f10:	f007 fb30 	bl	8010574 <xTimerCreate>
		dmaStreamTotal[src-1] = count;
 8008f14:	466b      	mov	r3, sp
 8008f16:	7bdb      	ldrb	r3, [r3, #15]
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	009b      	lsls	r3, r3, #2
 8008f1c:	4a48      	ldr	r2, [pc, #288]	; (8009040 <SetupDMAStreams+0x1a8>)
 8008f1e:	509c      	str	r4, [r3, r2]
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8008f20:	ab08      	add	r3, sp, #32
 8008f22:	7818      	ldrb	r0, [r3, #0]
 8008f24:	f005 f89e 	bl	800e064 <GetUart>
 8008f28:	0006      	movs	r6, r0
 8008f2a:	466b      	mov	r3, sp
 8008f2c:	7bd8      	ldrb	r0, [r3, #15]
 8008f2e:	f005 f899 	bl	800e064 <GetUart>
 8008f32:	0001      	movs	r1, r0
 8008f34:	2201      	movs	r2, #1
 8008f36:	0030      	movs	r0, r6
 8008f38:	f7fe fcb8 	bl	80078ac <StartDMAstream>
 8008f3c:	2817      	cmp	r0, #23
 8008f3e:	d076      	beq.n	800902e <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 8008f40:	4b3d      	ldr	r3, [pc, #244]	; (8009038 <SetupDMAStreams+0x1a0>)
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	ab08      	add	r3, sp, #32
 8008f46:	2200      	movs	r2, #0
 8008f48:	0029      	movs	r1, r5
 8008f4a:	483c      	ldr	r0, [pc, #240]	; (800903c <SetupDMAStreams+0x1a4>)
 8008f4c:	f007 fb12 	bl	8010574 <xTimerCreate>
 8008f50:	0006      	movs	r6, r0
		dmaStreamTotal[dst-1] = count;
 8008f52:	ab08      	add	r3, sp, #32
 8008f54:	781b      	ldrb	r3, [r3, #0]
 8008f56:	3b01      	subs	r3, #1
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	4a39      	ldr	r2, [pc, #228]	; (8009040 <SetupDMAStreams+0x1a8>)
 8008f5c:	509c      	str	r4, [r3, r2]
 8008f5e:	e02c      	b.n	8008fba <SetupDMAStreams+0x122>
		portStatus[src] = STREAM;
 8008f60:	4a38      	ldr	r2, [pc, #224]	; (8009044 <SetupDMAStreams+0x1ac>)
 8008f62:	2102      	movs	r1, #2
 8008f64:	54d1      	strb	r1, [r2, r3]
		return BOS_ERR_WrongParam;
 8008f66:	2067      	movs	r0, #103	; 0x67
 8008f68:	e061      	b.n	800902e <SetupDMAStreams+0x196>
		if (StartDMAstream(GetUart(src), GetUart(dst), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8008f6a:	0018      	movs	r0, r3
 8008f6c:	f005 f87a 	bl	800e064 <GetUart>
 8008f70:	0005      	movs	r5, r0
 8008f72:	ab08      	add	r3, sp, #32
 8008f74:	7818      	ldrb	r0, [r3, #0]
 8008f76:	f005 f875 	bl	800e064 <GetUart>
 8008f7a:	0001      	movs	r1, r0
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	0028      	movs	r0, r5
 8008f80:	f7fe fc94 	bl	80078ac <StartDMAstream>
 8008f84:	2817      	cmp	r0, #23
 8008f86:	d052      	beq.n	800902e <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&src, StreamTimerCallback );
 8008f88:	250f      	movs	r5, #15
 8008f8a:	446d      	add	r5, sp
 8008f8c:	0170      	lsls	r0, r6, #5
 8008f8e:	1b80      	subs	r0, r0, r6
 8008f90:	0080      	lsls	r0, r0, #2
 8008f92:	1980      	adds	r0, r0, r6
 8008f94:	00c0      	lsls	r0, r0, #3
 8008f96:	21fa      	movs	r1, #250	; 0xfa
 8008f98:	0089      	lsls	r1, r1, #2
 8008f9a:	f7f7 f8d9 	bl	8000150 <__udivsi3>
 8008f9e:	0001      	movs	r1, r0
 8008fa0:	4b25      	ldr	r3, [pc, #148]	; (8009038 <SetupDMAStreams+0x1a0>)
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	002b      	movs	r3, r5
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	4824      	ldr	r0, [pc, #144]	; (800903c <SetupDMAStreams+0x1a4>)
 8008faa:	f007 fae3 	bl	8010574 <xTimerCreate>
 8008fae:	0006      	movs	r6, r0
		dmaStreamTotal[src-1] = count;
 8008fb0:	782b      	ldrb	r3, [r5, #0]
 8008fb2:	3b01      	subs	r3, #1
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4a22      	ldr	r2, [pc, #136]	; (8009040 <SetupDMAStreams+0x1a8>)
 8008fb8:	509c      	str	r4, [r3, r2]
	return BOS_OK;
 8008fba:	2000      	movs	r0, #0
	if (xTimerStream != NULL)
 8008fbc:	2e00      	cmp	r6, #0
 8008fbe:	d036      	beq.n	800902e <SetupDMAStreams+0x196>
		xTimerStart( xTimerStream, portMAX_DELAY );
 8008fc0:	f006 fd4c 	bl	800fa5c <xTaskGetTickCount>
 8008fc4:	0002      	movs	r2, r0
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	425b      	negs	r3, r3
 8008fca:	9300      	str	r3, [sp, #0]
 8008fcc:	2300      	movs	r3, #0
 8008fce:	2101      	movs	r1, #1
 8008fd0:	0030      	movs	r0, r6
 8008fd2:	f007 faef 	bl	80105b4 <xTimerGenericCommand>
	return BOS_OK;
 8008fd6:	2000      	movs	r0, #0
 8008fd8:	e029      	b.n	800902e <SetupDMAStreams+0x196>
		if (StartDMAstream(GetUart(dst), GetUart(src), 1) == BOS_ERR_PORT_BUSY)	return BOS_ERR_PORT_BUSY; 
 8008fda:	f005 f843 	bl	800e064 <GetUart>
 8008fde:	0005      	movs	r5, r0
 8008fe0:	230f      	movs	r3, #15
 8008fe2:	446b      	add	r3, sp
 8008fe4:	7818      	ldrb	r0, [r3, #0]
 8008fe6:	f005 f83d 	bl	800e064 <GetUart>
 8008fea:	0001      	movs	r1, r0
 8008fec:	2201      	movs	r2, #1
 8008fee:	0028      	movs	r0, r5
 8008ff0:	f7fe fc5c 	bl	80078ac <StartDMAstream>
 8008ff4:	2817      	cmp	r0, #23
 8008ff6:	d01a      	beq.n	800902e <SetupDMAStreams+0x196>
		xTimerStream = xTimerCreate( "StreamTimer", pdMS_TO_TICKS(timeout), pdFALSE, ( void * )&dst, StreamTimerCallback );
 8008ff8:	0170      	lsls	r0, r6, #5
 8008ffa:	1b80      	subs	r0, r0, r6
 8008ffc:	0080      	lsls	r0, r0, #2
 8008ffe:	1980      	adds	r0, r0, r6
 8009000:	00c0      	lsls	r0, r0, #3
 8009002:	21fa      	movs	r1, #250	; 0xfa
 8009004:	0089      	lsls	r1, r1, #2
 8009006:	f7f7 f8a3 	bl	8000150 <__udivsi3>
 800900a:	0001      	movs	r1, r0
 800900c:	4b0a      	ldr	r3, [pc, #40]	; (8009038 <SetupDMAStreams+0x1a0>)
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	ab08      	add	r3, sp, #32
 8009012:	2200      	movs	r2, #0
 8009014:	4809      	ldr	r0, [pc, #36]	; (800903c <SetupDMAStreams+0x1a4>)
 8009016:	f007 faad 	bl	8010574 <xTimerCreate>
 800901a:	0006      	movs	r6, r0
		dmaStreamTotal[src-1] = count;
 800901c:	230f      	movs	r3, #15
 800901e:	446b      	add	r3, sp
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	3b01      	subs	r3, #1
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	4a06      	ldr	r2, [pc, #24]	; (8009040 <SetupDMAStreams+0x1a8>)
 8009028:	509c      	str	r4, [r3, r2]
 800902a:	e7c6      	b.n	8008fba <SetupDMAStreams+0x122>
		return BOS_ERR_WrongParam;
 800902c:	2067      	movs	r0, #103	; 0x67
}
 800902e:	b004      	add	sp, #16
 8009030:	bd70      	pop	{r4, r5, r6, pc}
		return BOS_ERR_WrongParam;
 8009032:	2067      	movs	r0, #103	; 0x67
 8009034:	e7fb      	b.n	800902e <SetupDMAStreams+0x196>
 8009036:	46c0      	nop			; (mov r8, r8)
 8009038:	08008e81 	.word	0x08008e81
 800903c:	0801cf3c 	.word	0x0801cf3c
 8009040:	200011f8 	.word	0x200011f8
 8009044:	20000e5c 	.word	0x20000e5c

08009048 <NotifyMessagingTask>:
/*-----------------------------------------------------------*/

/* --- Activate Messaging Tasks
*/
void NotifyMessagingTask(uint8_t port)
{
 8009048:	b510      	push	{r4, lr}
	switch (port)
 800904a:	2806      	cmp	r0, #6
 800904c:	d80a      	bhi.n	8009064 <NotifyMessagingTask+0x1c>
 800904e:	0080      	lsls	r0, r0, #2
 8009050:	4b19      	ldr	r3, [pc, #100]	; (80090b8 <NotifyMessagingTask+0x70>)
 8009052:	581b      	ldr	r3, [r3, r0]
 8009054:	469f      	mov	pc, r3
	{
	#ifdef _P1
		case P1 : 
			xTaskNotifyGive(P1MsgTaskHandle);	break;
 8009056:	4b19      	ldr	r3, [pc, #100]	; (80090bc <NotifyMessagingTask+0x74>)
 8009058:	6818      	ldr	r0, [r3, #0]
 800905a:	2300      	movs	r3, #0
 800905c:	2202      	movs	r2, #2
 800905e:	2100      	movs	r1, #0
 8009060:	f007 f9b6 	bl	80103d0 <xTaskGenericNotify>
		case P6 :
			xTaskNotifyGive(P6MsgTaskHandle);	break;
	#endif
		default: break;
	}		
}
 8009064:	bd10      	pop	{r4, pc}
			xTaskNotifyGive(P2MsgTaskHandle);	break;
 8009066:	4b16      	ldr	r3, [pc, #88]	; (80090c0 <NotifyMessagingTask+0x78>)
 8009068:	6818      	ldr	r0, [r3, #0]
 800906a:	2300      	movs	r3, #0
 800906c:	2202      	movs	r2, #2
 800906e:	2100      	movs	r1, #0
 8009070:	f007 f9ae 	bl	80103d0 <xTaskGenericNotify>
 8009074:	e7f6      	b.n	8009064 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P3MsgTaskHandle);	break;
 8009076:	4b13      	ldr	r3, [pc, #76]	; (80090c4 <NotifyMessagingTask+0x7c>)
 8009078:	6818      	ldr	r0, [r3, #0]
 800907a:	2300      	movs	r3, #0
 800907c:	2202      	movs	r2, #2
 800907e:	2100      	movs	r1, #0
 8009080:	f007 f9a6 	bl	80103d0 <xTaskGenericNotify>
 8009084:	e7ee      	b.n	8009064 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P4MsgTaskHandle);	break;
 8009086:	4b10      	ldr	r3, [pc, #64]	; (80090c8 <NotifyMessagingTask+0x80>)
 8009088:	6818      	ldr	r0, [r3, #0]
 800908a:	2300      	movs	r3, #0
 800908c:	2202      	movs	r2, #2
 800908e:	2100      	movs	r1, #0
 8009090:	f007 f99e 	bl	80103d0 <xTaskGenericNotify>
 8009094:	e7e6      	b.n	8009064 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P5MsgTaskHandle);	break;
 8009096:	4b0d      	ldr	r3, [pc, #52]	; (80090cc <NotifyMessagingTask+0x84>)
 8009098:	6818      	ldr	r0, [r3, #0]
 800909a:	2300      	movs	r3, #0
 800909c:	2202      	movs	r2, #2
 800909e:	2100      	movs	r1, #0
 80090a0:	f007 f996 	bl	80103d0 <xTaskGenericNotify>
 80090a4:	e7de      	b.n	8009064 <NotifyMessagingTask+0x1c>
			xTaskNotifyGive(P6MsgTaskHandle);	break;
 80090a6:	4b0a      	ldr	r3, [pc, #40]	; (80090d0 <NotifyMessagingTask+0x88>)
 80090a8:	6818      	ldr	r0, [r3, #0]
 80090aa:	2300      	movs	r3, #0
 80090ac:	2202      	movs	r2, #2
 80090ae:	2100      	movs	r1, #0
 80090b0:	f007 f98e 	bl	80103d0 <xTaskGenericNotify>
}
 80090b4:	e7d6      	b.n	8009064 <NotifyMessagingTask+0x1c>
 80090b6:	46c0      	nop			; (mov r8, r8)
 80090b8:	0801cf48 	.word	0x0801cf48
 80090bc:	20001218 	.word	0x20001218
 80090c0:	2000121c 	.word	0x2000121c
 80090c4:	20001220 	.word	0x20001220
 80090c8:	20001224 	.word	0x20001224
 80090cc:	20001228 	.word	0x20001228
 80090d0:	2000122c 	.word	0x2000122c

080090d4 <SendMessageFromPort>:
																								 single-cast message forwarded from another port (which is passed to the API thru numberOfParams).
        7   !0        !0				0								Not allowed.
        8   !0        0					0								Message sent to adjacent neighbor (e.g., if ID is unknown) with myID as source module.
*/
BOS_Status SendMessageFromPort(uint8_t port, uint8_t src, uint8_t dst, uint16_t code, uint16_t numberOfParams)
{
 80090d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090d6:	46de      	mov	lr, fp
 80090d8:	4657      	mov	r7, sl
 80090da:	464e      	mov	r6, r9
 80090dc:	4645      	mov	r5, r8
 80090de:	b5e0      	push	{r5, r6, r7, lr}
 80090e0:	b085      	sub	sp, #20
 80090e2:	0005      	movs	r5, r0
 80090e4:	9102      	str	r1, [sp, #8]
 80090e6:	0014      	movs	r4, r2
 80090e8:	001e      	movs	r6, r3
 80090ea:	ab0e      	add	r3, sp, #56	; 0x38
 80090ec:	881f      	ldrh	r7, [r3, #0]
	uint8_t length = 0, shift = 0; static uint16_t totalNumberOfParams = 0; static uint16_t ptrShift = 0;
	bool extendOptions = false, extendCode = false;
	UBaseType_t TaskPriority;
	
	/* Sanity check broadcast/multi-cast and not allowed cases */
	if ((port == 0 && dst == 0) ||																												// cases 3 & 4
 80090ee:	0003      	movs	r3, r0
 80090f0:	4313      	orrs	r3, r2
 80090f2:	d100      	bne.n	80090f6 <SendMessageFromPort+0x22>
 80090f4:	e173      	b.n	80093de <SendMessageFromPort+0x30a>
 80090f6:	2800      	cmp	r0, #0
 80090f8:	d14c      	bne.n	8009194 <SendMessageFromPort+0xc0>
			(port == 0 && dst != BOS_BROADCAST && dst != BOS_MULTICAST) || 										// cases 1 & 2
 80090fa:	2afd      	cmp	r2, #253	; 0xfd
 80090fc:	d800      	bhi.n	8009100 <SendMessageFromPort+0x2c>
 80090fe:	e170      	b.n	80093e2 <SendMessageFromPort+0x30e>
			(port != 0 && src != 0 && dst == 0)) {																						// case 7
		return BOS_ERR_WrongParam; 
	}
	
	/* Increase the priority of current running task */
	TaskPriority = uxTaskPriorityGet( NULL );
 8009100:	2000      	movs	r0, #0
 8009102:	f006 fc0d 	bl	800f920 <uxTaskPriorityGet>
 8009106:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 8009108:	2105      	movs	r1, #5
 800910a:	2000      	movs	r0, #0
 800910c:	f006 fc18 	bl	800f940 <vTaskPrioritySet>
	
	/* HZ Delimiter */
	message[0] = 'H';						
 8009110:	4bbf      	ldr	r3, [pc, #764]	; (8009410 <SendMessageFromPort+0x33c>)
 8009112:	2248      	movs	r2, #72	; 0x48
 8009114:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 8009116:	3212      	adds	r2, #18
 8009118:	705a      	strb	r2, [r3, #1]

	/* Should I copy message buffer from another port or construct from scratch? */
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 800911a:	9b02      	ldr	r3, [sp, #8]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d000      	beq.n	8009122 <SendMessageFromPort+0x4e>
 8009120:	e172      	b.n	8009408 <SendMessageFromPort+0x334>
	{
		/* Get message length from the incoming port */
		length = messageLength[numberOfParams-1];
 8009122:	1e7b      	subs	r3, r7, #1
 8009124:	4abb      	ldr	r2, [pc, #748]	; (8009414 <SendMessageFromPort+0x340>)
 8009126:	5cd7      	ldrb	r7, [r2, r3]

		/* Copy message buffer from the incoming port as is */
		memcpy(&message[3], &cMessage[numberOfParams-1][0], (size_t) length);
 8009128:	4abb      	ldr	r2, [pc, #748]	; (8009418 <SendMessageFromPort+0x344>)
 800912a:	4690      	mov	r8, r2
 800912c:	00d9      	lsls	r1, r3, #3
 800912e:	1ac9      	subs	r1, r1, r3
 8009130:	00c9      	lsls	r1, r1, #3
 8009132:	4bba      	ldr	r3, [pc, #744]	; (800941c <SendMessageFromPort+0x348>)
 8009134:	18c9      	adds	r1, r1, r3
 8009136:	003a      	movs	r2, r7
 8009138:	4640      	mov	r0, r8
 800913a:	f00b fa11 	bl	8014560 <memcpy>
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
		}
	}
		
	/* Copy message length */
	message[2] = length;
 800913e:	2303      	movs	r3, #3
 8009140:	425b      	negs	r3, r3
 8009142:	469c      	mov	ip, r3
 8009144:	44e0      	add	r8, ip
 8009146:	4643      	mov	r3, r8
 8009148:	709f      	strb	r7, [r3, #2]
	
	/* End of message - Calculate CRC8 */	
	memcpy(crcBuffer, &message[0], length + 3);
 800914a:	1cfb      	adds	r3, r7, #3
 800914c:	469b      	mov	fp, r3
 800914e:	4bb4      	ldr	r3, [pc, #720]	; (8009420 <SendMessageFromPort+0x34c>)
 8009150:	469a      	mov	sl, r3
 8009152:	465a      	mov	r2, fp
 8009154:	4641      	mov	r1, r8
 8009156:	0018      	movs	r0, r3
 8009158:	f00b fa02 	bl	8014560 <memcpy>
	
	/* crc calculation function added for test */
	message[length+3] = CalculateCRC8((uint32_t *)&crcBuffer, (length + 3));
 800915c:	b2bb      	uxth	r3, r7
 800915e:	4699      	mov	r9, r3
 8009160:	4659      	mov	r1, fp
 8009162:	4650      	mov	r0, sl
 8009164:	f004 f8b4 	bl	800d2d0 <CalculateCRC8>
 8009168:	4643      	mov	r3, r8
 800916a:	465a      	mov	r2, fp
 800916c:	5498      	strb	r0, [r3, r2]
	
//	message[length+3] = HAL_CRC_Calculate(&hcrc, (uint32_t *)&crcBuffer, (length + 3)/4);
//	if ((length + 3)%4 != 0) 							// Non-word-aligned packet
//		message[length+3] = HAL_CRC_Accumulate(&hcrc, (uint32_t *)&crcBuffer[((length + 3)/4)*4], 1);

	memset(crcBuffer, 0, sizeof(crcBuffer));
 800916e:	2238      	movs	r2, #56	; 0x38
 8009170:	2100      	movs	r1, #0
 8009172:	4650      	mov	r0, sl
 8009174:	f00b f9fd 	bl	8014572 <memset>
	//if(! message[length+3]){message[length+3]=1;}  /*Making sure CRC Value Is not Zero*/
	
	/* Transmit the message - single-cast */
	if (dst != BOS_BROADCAST && dst != BOS_MULTICAST) 
 8009178:	2cfd      	cmp	r4, #253	; 0xfd
 800917a:	d800      	bhi.n	800917e <SendMessageFromPort+0xaa>
 800917c:	e102      	b.n	8009384 <SendMessageFromPort+0x2b0>
		writePxDMAMutex(port, message, length+4, cmd50ms);
	}
	/* Transmit the message - multi-cast or broadcast */
	else
	{
		if (code == 0 && src == 0) {					// Forwarded broadcast or multicast. Update with original source.
 800917e:	2e00      	cmp	r6, #0
 8009180:	d000      	beq.n	8009184 <SendMessageFromPort+0xb0>
 8009182:	e0f5      	b.n	8009370 <SendMessageFromPort+0x29c>
 8009184:	9b02      	ldr	r3, [sp, #8]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d000      	beq.n	800918c <SendMessageFromPort+0xb8>
 800918a:	e0f1      	b.n	8009370 <SendMessageFromPort+0x29c>
			src = message[4];
 800918c:	4ba0      	ldr	r3, [pc, #640]	; (8009410 <SendMessageFromPort+0x33c>)
 800918e:	791b      	ldrb	r3, [r3, #4]
 8009190:	9302      	str	r3, [sp, #8]
 8009192:	e0ed      	b.n	8009370 <SendMessageFromPort+0x29c>
			(port != 0 && src != 0 && dst == 0)) {																						// case 7
 8009194:	9b02      	ldr	r3, [sp, #8]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d002      	beq.n	80091a0 <SendMessageFromPort+0xcc>
 800919a:	2a00      	cmp	r2, #0
 800919c:	d100      	bne.n	80091a0 <SendMessageFromPort+0xcc>
 800919e:	e122      	b.n	80093e6 <SendMessageFromPort+0x312>
	TaskPriority = uxTaskPriorityGet( NULL );
 80091a0:	2000      	movs	r0, #0
 80091a2:	f006 fbbd 	bl	800f920 <uxTaskPriorityGet>
 80091a6:	9003      	str	r0, [sp, #12]
	vTaskPrioritySet( NULL, osPriorityHigh-osPriorityIdle );
 80091a8:	2105      	movs	r1, #5
 80091aa:	2000      	movs	r0, #0
 80091ac:	f006 fbc8 	bl	800f940 <vTaskPrioritySet>
	message[0] = 'H';						
 80091b0:	4b97      	ldr	r3, [pc, #604]	; (8009410 <SendMessageFromPort+0x33c>)
 80091b2:	2248      	movs	r2, #72	; 0x48
 80091b4:	701a      	strb	r2, [r3, #0]
	message[1] = 'Z';
 80091b6:	3212      	adds	r2, #18
 80091b8:	705a      	strb	r2, [r3, #1]
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 80091ba:	2e00      	cmp	r6, #0
 80091bc:	d0b1      	beq.n	8009122 <SendMessageFromPort+0x4e>
		if (src == 0)		src = myID;
 80091be:	9b02      	ldr	r3, [sp, #8]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d078      	beq.n	80092b6 <SendMessageFromPort+0x1e2>
		message[2] = length;	
 80091c4:	4992      	ldr	r1, [pc, #584]	; (8009410 <SendMessageFromPort+0x33c>)
 80091c6:	2300      	movs	r3, #0
 80091c8:	708b      	strb	r3, [r1, #2]
		message[3] = dst;						
 80091ca:	70cc      	strb	r4, [r1, #3]
		message[4] = src;
 80091cc:	9b02      	ldr	r3, [sp, #8]
 80091ce:	710b      	strb	r3, [r1, #4]
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 80091d0:	4a94      	ldr	r2, [pc, #592]	; (8009424 <SendMessageFromPort+0x350>)
 80091d2:	79d3      	ldrb	r3, [r2, #7]
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	7992      	ldrb	r2, [r2, #6]
 80091d8:	4313      	orrs	r3, r2
		if (code > 0xFF)	extendCode = true;
 80091da:	22ff      	movs	r2, #255	; 0xff
 80091dc:	42b2      	cmp	r2, r6
 80091de:	4192      	sbcs	r2, r2
 80091e0:	4252      	negs	r2, r2
		message[5] = (BOS.response) | (BOS.trace<<2) | (extendCode<<1) | (extendOptions);
 80091e2:	0052      	lsls	r2, r2, #1
 80091e4:	4313      	orrs	r3, r2
 80091e6:	b2db      	uxtb	r3, r3
 80091e8:	714b      	strb	r3, [r1, #5]
		message[6+shift] = (uint8_t) code;
 80091ea:	718e      	strb	r6, [r1, #6]
		if (extendCode == true) {
 80091ec:	2200      	movs	r2, #0
 80091ee:	4693      	mov	fp, r2
 80091f0:	2eff      	cmp	r6, #255	; 0xff
 80091f2:	d903      	bls.n	80091fc <SendMessageFromPort+0x128>
			message[6+shift] = (uint8_t) (code >> 8);		
 80091f4:	0a32      	lsrs	r2, r6, #8
 80091f6:	71ca      	strb	r2, [r1, #7]
			++shift;
 80091f8:	2201      	movs	r2, #1
 80091fa:	4693      	mov	fp, r2
		if (numberOfParams <= MAX_PARAMS_PER_MESSAGE ) {				
 80091fc:	2f2e      	cmp	r7, #46	; 0x2e
 80091fe:	d95e      	bls.n	80092be <SendMessageFromPort+0x1ea>
			message[5] |= 0x80;		
 8009200:	2280      	movs	r2, #128	; 0x80
 8009202:	4252      	negs	r2, r2
 8009204:	4313      	orrs	r3, r2
 8009206:	4a82      	ldr	r2, [pc, #520]	; (8009410 <SendMessageFromPort+0x33c>)
 8009208:	7153      	strb	r3, [r2, #5]
			totalNumberOfParams = numberOfParams;
 800920a:	4b87      	ldr	r3, [pc, #540]	; (8009428 <SendMessageFromPort+0x354>)
 800920c:	801f      	strh	r7, [r3, #0]
					SendMessageFromPort(port, src, dst, code, numberOfParams);
 800920e:	232e      	movs	r3, #46	; 0x2e
 8009210:	469a      	mov	sl, r3
					totalNumberOfParams -= numberOfParams;
 8009212:	4b85      	ldr	r3, [pc, #532]	; (8009428 <SendMessageFromPort+0x354>)
 8009214:	4699      	mov	r9, r3
					ptrShift += numberOfParams;
 8009216:	4b85      	ldr	r3, [pc, #532]	; (800942c <SendMessageFromPort+0x358>)
 8009218:	4698      	mov	r8, r3
					SendMessageFromPort(port, src, dst, code, numberOfParams);
 800921a:	4653      	mov	r3, sl
 800921c:	9300      	str	r3, [sp, #0]
 800921e:	0033      	movs	r3, r6
 8009220:	0022      	movs	r2, r4
 8009222:	9902      	ldr	r1, [sp, #8]
 8009224:	0028      	movs	r0, r5
 8009226:	f7ff ff55 	bl	80090d4 <SendMessageFromPort>
					osDelay(10);
 800922a:	200a      	movs	r0, #10
 800922c:	f005 fc67 	bl	800eafe <osDelay>
					totalNumberOfParams -= numberOfParams;
 8009230:	464b      	mov	r3, r9
 8009232:	881f      	ldrh	r7, [r3, #0]
 8009234:	3f2e      	subs	r7, #46	; 0x2e
 8009236:	b2bf      	uxth	r7, r7
 8009238:	801f      	strh	r7, [r3, #0]
					ptrShift += numberOfParams;
 800923a:	4643      	mov	r3, r8
 800923c:	8819      	ldrh	r1, [r3, #0]
 800923e:	312e      	adds	r1, #46	; 0x2e
 8009240:	b289      	uxth	r1, r1
 8009242:	8019      	strh	r1, [r3, #0]
			while (totalNumberOfParams != 0)
 8009244:	2f00      	cmp	r7, #0
 8009246:	d049      	beq.n	80092dc <SendMessageFromPort+0x208>
				if ( (totalNumberOfParams/numberOfParams) >= 1) 
 8009248:	2f2d      	cmp	r7, #45	; 0x2d
 800924a:	d8e6      	bhi.n	800921a <SendMessageFromPort+0x146>
					message[5] &= 0x7F;		/* Last message. Reset long message flag */
 800924c:	4b70      	ldr	r3, [pc, #448]	; (8009410 <SendMessageFromPort+0x33c>)
 800924e:	7958      	ldrb	r0, [r3, #5]
 8009250:	227f      	movs	r2, #127	; 0x7f
 8009252:	4002      	ands	r2, r0
 8009254:	715a      	strb	r2, [r3, #5]
					memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 8009256:	465a      	mov	r2, fp
 8009258:	1dd0      	adds	r0, r2, #7
 800925a:	18c0      	adds	r0, r0, r3
 800925c:	4b74      	ldr	r3, [pc, #464]	; (8009430 <SendMessageFromPort+0x35c>)
 800925e:	18c9      	adds	r1, r1, r3
 8009260:	003a      	movs	r2, r7
 8009262:	f00b f97d 	bl	8014560 <memcpy>
					ptrShift = 0; totalNumberOfParams = 0;
 8009266:	2300      	movs	r3, #0
 8009268:	4a70      	ldr	r2, [pc, #448]	; (800942c <SendMessageFromPort+0x358>)
 800926a:	8013      	strh	r3, [r2, #0]
 800926c:	4a6e      	ldr	r2, [pc, #440]	; (8009428 <SendMessageFromPort+0x354>)
 800926e:	8013      	strh	r3, [r2, #0]
					length = numberOfParams + shift + 4;
 8009270:	465b      	mov	r3, fp
 8009272:	1d1e      	adds	r6, r3, #4
 8009274:	19f6      	adds	r6, r6, r7
 8009276:	b2f6      	uxtb	r6, r6
		if(AddBcastPayload == true)
 8009278:	4b6e      	ldr	r3, [pc, #440]	; (8009434 <SendMessageFromPort+0x360>)
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d05c      	beq.n	800933a <SendMessageFromPort+0x266>
			if (dstGroupID < BOS_BROADCAST)
 8009280:	4b6d      	ldr	r3, [pc, #436]	; (8009438 <SendMessageFromPort+0x364>)
 8009282:	781b      	ldrb	r3, [r3, #0]
 8009284:	2bff      	cmp	r3, #255	; 0xff
 8009286:	d100      	bne.n	800928a <SendMessageFromPort+0x1b6>
 8009288:	e0af      	b.n	80093ea <SendMessageFromPort+0x316>
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 800928a:	4a6c      	ldr	r2, [pc, #432]	; (800943c <SendMessageFromPort+0x368>)
 800928c:	7812      	ldrb	r2, [r2, #0]
 800928e:	4690      	mov	r8, r2
 8009290:	2a00      	cmp	r2, #0
 8009292:	d075      	beq.n	8009380 <SendMessageFromPort+0x2ac>
 8009294:	2201      	movs	r2, #1
 8009296:	409a      	lsls	r2, r3
 8009298:	4694      	mov	ip, r2
 800929a:	4869      	ldr	r0, [pc, #420]	; (8009440 <SendMessageFromPort+0x36c>)
 800929c:	2301      	movs	r3, #1
			uint8_t groupMembers = 0;
 800929e:	2200      	movs	r2, #0
							message[7+shift+numberOfParams+groupMembers-1] = i;
 80092a0:	495b      	ldr	r1, [pc, #364]	; (8009410 <SendMessageFromPort+0x33c>)
 80092a2:	4689      	mov	r9, r1
 80092a4:	44b9      	add	r9, r7
 80092a6:	0029      	movs	r1, r5
 80092a8:	4645      	mov	r5, r8
 80092aa:	46a2      	mov	sl, r4
 80092ac:	4664      	mov	r4, ip
 80092ae:	46b4      	mov	ip, r6
 80092b0:	465e      	mov	r6, fp
 80092b2:	4688      	mov	r8, r1
 80092b4:	e01e      	b.n	80092f4 <SendMessageFromPort+0x220>
		if (src == 0)		src = myID;
 80092b6:	4b63      	ldr	r3, [pc, #396]	; (8009444 <SendMessageFromPort+0x370>)
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	9302      	str	r3, [sp, #8]
 80092bc:	e782      	b.n	80091c4 <SendMessageFromPort+0xf0>
			memcpy((char*)&message[7+shift], (&messageParams[0]+ptrShift), numberOfParams);
 80092be:	465b      	mov	r3, fp
 80092c0:	3307      	adds	r3, #7
 80092c2:	4853      	ldr	r0, [pc, #332]	; (8009410 <SendMessageFromPort+0x33c>)
 80092c4:	1818      	adds	r0, r3, r0
 80092c6:	4b59      	ldr	r3, [pc, #356]	; (800942c <SendMessageFromPort+0x358>)
 80092c8:	8819      	ldrh	r1, [r3, #0]
 80092ca:	4b59      	ldr	r3, [pc, #356]	; (8009430 <SendMessageFromPort+0x35c>)
 80092cc:	18c9      	adds	r1, r1, r3
 80092ce:	003a      	movs	r2, r7
 80092d0:	f00b f946 	bl	8014560 <memcpy>
			length = numberOfParams + shift + 4;
 80092d4:	1d3e      	adds	r6, r7, #4
 80092d6:	445e      	add	r6, fp
 80092d8:	b2f6      	uxtb	r6, r6
 80092da:	e7cd      	b.n	8009278 <SendMessageFromPort+0x1a4>
 80092dc:	2600      	movs	r6, #0
 80092de:	372e      	adds	r7, #46	; 0x2e
 80092e0:	e7ca      	b.n	8009278 <SendMessageFromPort+0x1a4>
							message[7+shift+numberOfParams+groupMembers-1] = i;
 80092e2:	4649      	mov	r1, r9
 80092e4:	1889      	adds	r1, r1, r2
 80092e6:	1989      	adds	r1, r1, r6
 80092e8:	718b      	strb	r3, [r1, #6]
				for(uint16_t i=1 ; i<=N ; i++)						// N modules
 80092ea:	3301      	adds	r3, #1
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	3002      	adds	r0, #2
 80092f0:	42ab      	cmp	r3, r5
 80092f2:	d809      	bhi.n	8009308 <SendMessageFromPort+0x234>
					if (InGroup(i, dstGroupID))
 80092f4:	8801      	ldrh	r1, [r0, #0]
 80092f6:	420c      	tst	r4, r1
 80092f8:	d0f7      	beq.n	80092ea <SendMessageFromPort+0x216>
						++groupMembers;							// Add this member
 80092fa:	3201      	adds	r2, #1
 80092fc:	b2d2      	uxtb	r2, r2
						if ((numberOfParams+groupMembers+1) < MAX_PARAMS_PER_MESSAGE)
 80092fe:	18b9      	adds	r1, r7, r2
 8009300:	292c      	cmp	r1, #44	; 0x2c
 8009302:	ddee      	ble.n	80092e2 <SendMessageFromPort+0x20e>
							return BOS_ERR_MSG_DOES_NOT_FIT;
 8009304:	2069      	movs	r0, #105	; 0x69
 8009306:	e04d      	b.n	80093a4 <SendMessageFromPort+0x2d0>
 8009308:	46b3      	mov	fp, r6
 800930a:	4666      	mov	r6, ip
 800930c:	4645      	mov	r5, r8
 800930e:	4654      	mov	r4, sl
				message[7+shift+numberOfParams+groupMembers] = groupMembers;
 8009310:	465b      	mov	r3, fp
 8009312:	3307      	adds	r3, #7
 8009314:	19db      	adds	r3, r3, r7
 8009316:	189b      	adds	r3, r3, r2
 8009318:	493d      	ldr	r1, [pc, #244]	; (8009410 <SendMessageFromPort+0x33c>)
 800931a:	54ca      	strb	r2, [r1, r3]
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 800931c:	18bf      	adds	r7, r7, r2
				return BOS_ERR_MSG_DOES_NOT_FIT;
 800931e:	2069      	movs	r0, #105	; 0x69
			else if ( (dstGroupID < BOS_BROADCAST) && ((numberOfParams+groupMembers+2) < MAX_PARAMS_PER_MESSAGE) )		// Multicast
 8009320:	2f2b      	cmp	r7, #43	; 0x2b
 8009322:	dc3f      	bgt.n	80093a4 <SendMessageFromPort+0x2d0>
				message[7+shift+numberOfParams+groupMembers+1] = ++bcastID;
 8009324:	4848      	ldr	r0, [pc, #288]	; (8009448 <SendMessageFromPort+0x374>)
 8009326:	7801      	ldrb	r1, [r0, #0]
 8009328:	3101      	adds	r1, #1
 800932a:	b2c9      	uxtb	r1, r1
 800932c:	7001      	strb	r1, [r0, #0]
 800932e:	4838      	ldr	r0, [pc, #224]	; (8009410 <SendMessageFromPort+0x33c>)
 8009330:	18c3      	adds	r3, r0, r3
 8009332:	7059      	strb	r1, [r3, #1]
				length += groupMembers + 2;		// + bcastID + number of group member + group members IDs 
 8009334:	3602      	adds	r6, #2
 8009336:	18b6      	adds	r6, r6, r2
 8009338:	b2f6      	uxtb	r6, r6
	message[2] = length;
 800933a:	4b35      	ldr	r3, [pc, #212]	; (8009410 <SendMessageFromPort+0x33c>)
 800933c:	4698      	mov	r8, r3
 800933e:	709e      	strb	r6, [r3, #2]
	memcpy(crcBuffer, &message[0], length + 3);
 8009340:	1cf3      	adds	r3, r6, #3
 8009342:	469a      	mov	sl, r3
 8009344:	4f36      	ldr	r7, [pc, #216]	; (8009420 <SendMessageFromPort+0x34c>)
 8009346:	001a      	movs	r2, r3
 8009348:	4641      	mov	r1, r8
 800934a:	0038      	movs	r0, r7
 800934c:	f00b f908 	bl	8014560 <memcpy>
	message[length+3] = CalculateCRC8((uint32_t *)&crcBuffer, (length + 3));
 8009350:	b2b3      	uxth	r3, r6
 8009352:	4699      	mov	r9, r3
 8009354:	4651      	mov	r1, sl
 8009356:	0038      	movs	r0, r7
 8009358:	f003 ffba 	bl	800d2d0 <CalculateCRC8>
 800935c:	4643      	mov	r3, r8
 800935e:	4652      	mov	r2, sl
 8009360:	5498      	strb	r0, [r3, r2]
	memset(crcBuffer, 0, sizeof(crcBuffer));
 8009362:	2238      	movs	r2, #56	; 0x38
 8009364:	2100      	movs	r1, #0
 8009366:	0038      	movs	r0, r7
 8009368:	f00b f903 	bl	8014572 <memset>
	if (dst != BOS_BROADCAST && dst != BOS_MULTICAST) 
 800936c:	2cfd      	cmp	r4, #253	; 0xfd
 800936e:	d909      	bls.n	8009384 <SendMessageFromPort+0x2b0>
		} 
		
		/* Get broadcast routes */
		FindBroadcastRoutes(src);
 8009370:	9802      	ldr	r0, [sp, #8]
 8009372:	f7fa fd45 	bl	8003e00 <FindBroadcastRoutes>
 8009376:	2400      	movs	r4, #0
		
		/* Send to all my broadcast ports */
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
		{
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 8009378:	4e34      	ldr	r6, [pc, #208]	; (800944c <SendMessageFromPort+0x378>)
 800937a:	4d32      	ldr	r5, [pc, #200]	; (8009444 <SendMessageFromPort+0x370>)
			{
				/* Transmit the message from this port */
				writePxDMAMutex(p, message, length+4, cmd50ms);
 800937c:	464f      	mov	r7, r9
 800937e:	e024      	b.n	80093ca <SendMessageFromPort+0x2f6>
			uint8_t groupMembers = 0;
 8009380:	2200      	movs	r2, #0
 8009382:	e7c5      	b.n	8009310 <SendMessageFromPort+0x23c>
		writePxDMAMutex(port, message, length+4, cmd50ms);
 8009384:	464a      	mov	r2, r9
 8009386:	3204      	adds	r2, #4
 8009388:	b292      	uxth	r2, r2
 800938a:	2332      	movs	r3, #50	; 0x32
 800938c:	4920      	ldr	r1, [pc, #128]	; (8009410 <SendMessageFromPort+0x33c>)
 800938e:	0028      	movs	r0, r5
 8009390:	f004 fed6 	bl	800e140 <writePxDMAMutex>
			}	
		}
	}

	/* Put the priority of current running task back to its default state */
	vTaskPrioritySet( NULL, TaskPriority );
 8009394:	9903      	ldr	r1, [sp, #12]
 8009396:	2000      	movs	r0, #0
 8009398:	f006 fad2 	bl	800f940 <vTaskPrioritySet>
	
	/* Reset responseStatus in case response is expected - TODO should be tailored for each port */
	responseStatus = BOS_ERR_NoResponse;
 800939c:	4b2c      	ldr	r3, [pc, #176]	; (8009450 <SendMessageFromPort+0x37c>)
 800939e:	2202      	movs	r2, #2
 80093a0:	701a      	strb	r2, [r3, #0]
	
	return result;
 80093a2:	2000      	movs	r0, #0
}
 80093a4:	b005      	add	sp, #20
 80093a6:	bcf0      	pop	{r4, r5, r6, r7}
 80093a8:	46bb      	mov	fp, r7
 80093aa:	46b2      	mov	sl, r6
 80093ac:	46a9      	mov	r9, r5
 80093ae:	46a0      	mov	r8, r4
 80093b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				writePxDMAMutex(p, message, length+4, cmd50ms);
 80093b2:	1d3a      	adds	r2, r7, #4
 80093b4:	b292      	uxth	r2, r2
 80093b6:	2332      	movs	r3, #50	; 0x32
 80093b8:	4915      	ldr	r1, [pc, #84]	; (8009410 <SendMessageFromPort+0x33c>)
 80093ba:	f004 fec1 	bl	800e140 <writePxDMAMutex>
				Delay_ms(1);
 80093be:	2001      	movs	r0, #1
 80093c0:	f007 fc10 	bl	8010be4 <HAL_Delay>
		for (uint8_t p=1 ; p<=NumOfPorts ; p++) 
 80093c4:	3401      	adds	r4, #1
 80093c6:	2c06      	cmp	r4, #6
 80093c8:	d0e4      	beq.n	8009394 <SendMessageFromPort+0x2c0>
 80093ca:	1c60      	adds	r0, r4, #1
 80093cc:	b2c0      	uxtb	r0, r0
			if ( (bcastRoutes[myID-1] >> (p-1)) & 0x01 ) 		
 80093ce:	782b      	ldrb	r3, [r5, #0]
 80093d0:	3b01      	subs	r3, #1
 80093d2:	005b      	lsls	r3, r3, #1
 80093d4:	5b9b      	ldrh	r3, [r3, r6]
 80093d6:	4123      	asrs	r3, r4
 80093d8:	07db      	lsls	r3, r3, #31
 80093da:	d5f3      	bpl.n	80093c4 <SendMessageFromPort+0x2f0>
 80093dc:	e7e9      	b.n	80093b2 <SendMessageFromPort+0x2de>
		return BOS_ERR_WrongParam; 
 80093de:	2067      	movs	r0, #103	; 0x67
 80093e0:	e7e0      	b.n	80093a4 <SendMessageFromPort+0x2d0>
 80093e2:	2067      	movs	r0, #103	; 0x67
 80093e4:	e7de      	b.n	80093a4 <SendMessageFromPort+0x2d0>
 80093e6:	2067      	movs	r0, #103	; 0x67
 80093e8:	e7dc      	b.n	80093a4 <SendMessageFromPort+0x2d0>
				return BOS_ERR_MSG_DOES_NOT_FIT;
 80093ea:	2069      	movs	r0, #105	; 0x69
			if ( (dstGroupID == BOS_BROADCAST) && ((numberOfParams+1) < MAX_PARAMS_PER_MESSAGE) )
 80093ec:	2f2c      	cmp	r7, #44	; 0x2c
 80093ee:	d8d9      	bhi.n	80093a4 <SendMessageFromPort+0x2d0>
				message[7+shift+numberOfParams] = ++bcastID;
 80093f0:	4a15      	ldr	r2, [pc, #84]	; (8009448 <SendMessageFromPort+0x374>)
 80093f2:	7813      	ldrb	r3, [r2, #0]
 80093f4:	3301      	adds	r3, #1
 80093f6:	b2db      	uxtb	r3, r3
 80093f8:	7013      	strb	r3, [r2, #0]
 80093fa:	4a05      	ldr	r2, [pc, #20]	; (8009410 <SendMessageFromPort+0x33c>)
 80093fc:	445a      	add	r2, fp
 80093fe:	19d7      	adds	r7, r2, r7
 8009400:	71fb      	strb	r3, [r7, #7]
				length += 1;		// + bcastID
 8009402:	3601      	adds	r6, #1
 8009404:	b2f6      	uxtb	r6, r6
 8009406:	e798      	b.n	800933a <SendMessageFromPort+0x266>
	if ((port == 0 && src == 0 && (dst == BOS_BROADCAST || dst == BOS_MULTICAST)) || code == 0)					// case 2 and part of case 6
 8009408:	2e00      	cmp	r6, #0
 800940a:	d100      	bne.n	800940e <SendMessageFromPort+0x33a>
 800940c:	e689      	b.n	8009122 <SendMessageFromPort+0x4e>
 800940e:	e6d9      	b.n	80091c4 <SendMessageFromPort+0xf0>
 8009410:	20000d64 	.word	0x20000d64
 8009414:	20000d9c 	.word	0x20000d9c
 8009418:	20000d67 	.word	0x20000d67
 800941c:	20000ba4 	.word	0x20000ba4
 8009420:	20001190 	.word	0x20001190
 8009424:	200066e4 	.word	0x200066e4
 8009428:	200012c6 	.word	0x200012c6
 800942c:	200012c4 	.word	0x200012c4
 8009430:	20000da4 	.word	0x20000da4
 8009434:	20000b64 	.word	0x20000b64
 8009438:	2000003c 	.word	0x2000003c
 800943c:	2000001c 	.word	0x2000001c
 8009440:	20000d5c 	.word	0x20000d5c
 8009444:	20000070 	.word	0x20000070
 8009448:	20000b68 	.word	0x20000b68
 800944c:	20000b6c 	.word	0x20000b6c
 8009450:	20000e78 	.word	0x20000e78

08009454 <ForwardReceivedMessage>:
{
 8009454:	b530      	push	{r4, r5, lr}
 8009456:	b083      	sub	sp, #12
 8009458:	0004      	movs	r4, r0
	AddBcastPayload = false; 	
 800945a:	4b0b      	ldr	r3, [pc, #44]	; (8009488 <ForwardReceivedMessage+0x34>)
 800945c:	2200      	movs	r2, #0
 800945e:	701a      	strb	r2, [r3, #0]
	dst = cMessage[incomingPort-1][0];
 8009460:	1e42      	subs	r2, r0, #1
 8009462:	00d3      	lsls	r3, r2, #3
 8009464:	1a9b      	subs	r3, r3, r2
 8009466:	00db      	lsls	r3, r3, #3
 8009468:	4a08      	ldr	r2, [pc, #32]	; (800948c <ForwardReceivedMessage+0x38>)
 800946a:	5c9d      	ldrb	r5, [r3, r2]
	port = FindRoute(myID, dst); 
 800946c:	4b08      	ldr	r3, [pc, #32]	; (8009490 <ForwardReceivedMessage+0x3c>)
 800946e:	7818      	ldrb	r0, [r3, #0]
 8009470:	0029      	movs	r1, r5
 8009472:	f7fa fd5d 	bl	8003f30 <FindRoute>
	SendMessageFromPort(port, 0, dst, 0, incomingPort);
 8009476:	9400      	str	r4, [sp, #0]
 8009478:	2300      	movs	r3, #0
 800947a:	002a      	movs	r2, r5
 800947c:	2100      	movs	r1, #0
 800947e:	f7ff fe29 	bl	80090d4 <SendMessageFromPort>
}
 8009482:	2000      	movs	r0, #0
 8009484:	b003      	add	sp, #12
 8009486:	bd30      	pop	{r4, r5, pc}
 8009488:	20000b64 	.word	0x20000b64
 800948c:	20000ba4 	.word	0x20000ba4
 8009490:	20000070 	.word	0x20000070

08009494 <BroadcastReceivedMessage>:
{
 8009494:	b500      	push	{lr}
 8009496:	b083      	sub	sp, #12
	AddBcastPayload = false; dstGroupID = dstGroup;	
 8009498:	4b0c      	ldr	r3, [pc, #48]	; (80094cc <BroadcastReceivedMessage+0x38>)
 800949a:	2200      	movs	r2, #0
 800949c:	701a      	strb	r2, [r3, #0]
 800949e:	4b0c      	ldr	r3, [pc, #48]	; (80094d0 <BroadcastReceivedMessage+0x3c>)
 80094a0:	7018      	strb	r0, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 80094a2:	28ff      	cmp	r0, #255	; 0xff
 80094a4:	d009      	beq.n	80094ba <BroadcastReceivedMessage+0x26>
		SendMessageFromPort(0, 0, BOS_MULTICAST, 0, incomingPort);
 80094a6:	9100      	str	r1, [sp, #0]
 80094a8:	2300      	movs	r3, #0
 80094aa:	22fe      	movs	r2, #254	; 0xfe
 80094ac:	2100      	movs	r1, #0
 80094ae:	2000      	movs	r0, #0
 80094b0:	f7ff fe10 	bl	80090d4 <SendMessageFromPort>
}
 80094b4:	2000      	movs	r0, #0
 80094b6:	b003      	add	sp, #12
 80094b8:	bd00      	pop	{pc}
		SendMessageFromPort(0, 0, BOS_BROADCAST, 0, incomingPort);
 80094ba:	9100      	str	r1, [sp, #0]
 80094bc:	2300      	movs	r3, #0
 80094be:	32ff      	adds	r2, #255	; 0xff
 80094c0:	2100      	movs	r1, #0
 80094c2:	2000      	movs	r0, #0
 80094c4:	f7ff fe06 	bl	80090d4 <SendMessageFromPort>
 80094c8:	e7f4      	b.n	80094b4 <BroadcastReceivedMessage+0x20>
 80094ca:	46c0      	nop			; (mov r8, r8)
 80094cc:	20000b64 	.word	0x20000b64
 80094d0:	2000003c 	.word	0x2000003c

080094d4 <BroadcastMessage>:
{
 80094d4:	b530      	push	{r4, r5, lr}
 80094d6:	b083      	sub	sp, #12
 80094d8:	001c      	movs	r4, r3
	AddBcastPayload = true; dstGroupID = dstGroup;
 80094da:	4b0f      	ldr	r3, [pc, #60]	; (8009518 <BroadcastMessage+0x44>)
 80094dc:	2501      	movs	r5, #1
 80094de:	701d      	strb	r5, [r3, #0]
 80094e0:	4b0e      	ldr	r3, [pc, #56]	; (800951c <BroadcastMessage+0x48>)
 80094e2:	7019      	strb	r1, [r3, #0]
	if (dstGroup == BOS_BROADCAST)
 80094e4:	29ff      	cmp	r1, #255	; 0xff
 80094e6:	d00e      	beq.n	8009506 <BroadcastMessage+0x32>
		SendMessageFromPort(0, src, BOS_MULTICAST, code, numberOfParams);
 80094e8:	9400      	str	r4, [sp, #0]
 80094ea:	0013      	movs	r3, r2
 80094ec:	22fe      	movs	r2, #254	; 0xfe
 80094ee:	0001      	movs	r1, r0
 80094f0:	2000      	movs	r0, #0
 80094f2:	f7ff fdef 	bl	80090d4 <SendMessageFromPort>
	memset( messageParams, 0, numberOfParams );
 80094f6:	0022      	movs	r2, r4
 80094f8:	2100      	movs	r1, #0
 80094fa:	4809      	ldr	r0, [pc, #36]	; (8009520 <BroadcastMessage+0x4c>)
 80094fc:	f00b f839 	bl	8014572 <memset>
}
 8009500:	2000      	movs	r0, #0
 8009502:	b003      	add	sp, #12
 8009504:	bd30      	pop	{r4, r5, pc}
		SendMessageFromPort(0, src, BOS_BROADCAST, code, numberOfParams);
 8009506:	9400      	str	r4, [sp, #0]
 8009508:	0013      	movs	r3, r2
 800950a:	22ff      	movs	r2, #255	; 0xff
 800950c:	0001      	movs	r1, r0
 800950e:	2000      	movs	r0, #0
 8009510:	f7ff fde0 	bl	80090d4 <SendMessageFromPort>
 8009514:	e7ef      	b.n	80094f6 <BroadcastMessage+0x22>
 8009516:	46c0      	nop			; (mov r8, r8)
 8009518:	20000b64 	.word	0x20000b64
 800951c:	2000003c 	.word	0x2000003c
 8009520:	20000da4 	.word	0x20000da4

08009524 <SendMessageToModule>:
{
 8009524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009526:	b083      	sub	sp, #12
 8009528:	0004      	movs	r4, r0
 800952a:	000e      	movs	r6, r1
 800952c:	0015      	movs	r5, r2
	if (dst != BOS_BROADCAST)
 800952e:	28ff      	cmp	r0, #255	; 0xff
 8009530:	d012      	beq.n	8009558 <SendMessageToModule+0x34>
		port = FindRoute(myID, dst); 
 8009532:	4f0d      	ldr	r7, [pc, #52]	; (8009568 <SendMessageToModule+0x44>)
 8009534:	7838      	ldrb	r0, [r7, #0]
 8009536:	0021      	movs	r1, r4
 8009538:	f7fa fcfa 	bl	8003f30 <FindRoute>
		SendMessageFromPort(port, myID, dst, code, numberOfParams);	
 800953c:	7839      	ldrb	r1, [r7, #0]
 800953e:	9500      	str	r5, [sp, #0]
 8009540:	0033      	movs	r3, r6
 8009542:	0022      	movs	r2, r4
 8009544:	f7ff fdc6 	bl	80090d4 <SendMessageFromPort>
		memset( messageParams, 0, numberOfParams );
 8009548:	002a      	movs	r2, r5
 800954a:	2100      	movs	r1, #0
 800954c:	4807      	ldr	r0, [pc, #28]	; (800956c <SendMessageToModule+0x48>)
 800954e:	f00b f810 	bl	8014572 <memset>
}
 8009552:	2000      	movs	r0, #0
 8009554:	b003      	add	sp, #12
 8009556:	bdf0      	pop	{r4, r5, r6, r7, pc}
		BroadcastMessage(myID, BOS_BROADCAST, code, numberOfParams);
 8009558:	4b03      	ldr	r3, [pc, #12]	; (8009568 <SendMessageToModule+0x44>)
 800955a:	7818      	ldrb	r0, [r3, #0]
 800955c:	0013      	movs	r3, r2
 800955e:	000a      	movs	r2, r1
 8009560:	21ff      	movs	r1, #255	; 0xff
 8009562:	f7ff ffb7 	bl	80094d4 <BroadcastMessage>
 8009566:	e7f4      	b.n	8009552 <SendMessageToModule+0x2e>
 8009568:	20000070 	.word	0x20000070
 800956c:	20000da4 	.word	0x20000da4

08009570 <StartScastDMAStream>:

/* --- Start a single-cast DMA stream across the array. Transfer ends after (count) bytes are transferred 
			or timeout (ms), whichever comes first. If stored = true, the stream is stored in emulated eeprom --- 
*/
BOS_Status StartScastDMAStream(uint8_t srcP, uint8_t srcM, uint8_t dstP, uint8_t dstM, uint8_t direction, uint32_t count, uint32_t timeout, bool stored)
{
 8009570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009572:	46de      	mov	lr, fp
 8009574:	4657      	mov	r7, sl
 8009576:	464e      	mov	r6, r9
 8009578:	4645      	mov	r5, r8
 800957a:	b5e0      	push	{r5, r6, r7, lr}
 800957c:	b091      	sub	sp, #68	; 0x44
 800957e:	9007      	str	r0, [sp, #28]
 8009580:	000d      	movs	r5, r1
 8009582:	9206      	str	r2, [sp, #24]
 8009584:	4698      	mov	r8, r3
 8009586:	ab1a      	add	r3, sp, #104	; 0x68
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	469a      	mov	sl, r3
 800958c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800958e:	ab1d      	add	r3, sp, #116	; 0x74
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	469b      	mov	fp, r3
	BOS_Status result = BOS_OK;
	uint8_t port = 0, temp1 = 0, temp2 = 0;
	
	/* Is the source a different module? */
	if (srcM != myID) {
 8009594:	4b5a      	ldr	r3, [pc, #360]	; (8009700 <StartScastDMAStream+0x190>)
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	428b      	cmp	r3, r1
 800959a:	d11c      	bne.n	80095d6 <StartScastDMAStream+0x66>
				temp2 = dstP;
			} else {
				temp2 = FindRoute(route[i], route[i-1]);
			}
			/* Message parameters*/
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 800959c:	0e3b      	lsrs	r3, r7, #24
 800959e:	9308      	str	r3, [sp, #32]
			messageParams[1] = (uint8_t) (count >> 16);
 80095a0:	0c3b      	lsrs	r3, r7, #16
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	9309      	str	r3, [sp, #36]	; 0x24
			messageParams[2] = (uint8_t) (count >> 8);
 80095a6:	0a3b      	lsrs	r3, r7, #8
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	930a      	str	r3, [sp, #40]	; 0x28
			messageParams[3] = (uint8_t) count;
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 80095ac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80095ae:	0e1b      	lsrs	r3, r3, #24
 80095b0:	930b      	str	r3, [sp, #44]	; 0x2c
			messageParams[5] = (uint8_t) (timeout >> 16);
 80095b2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80095b4:	0c1b      	lsrs	r3, r3, #16
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	930c      	str	r3, [sp, #48]	; 0x30
			messageParams[6] = (uint8_t) (timeout >> 8);
 80095ba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80095bc:	0a1b      	lsrs	r3, r3, #8
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	930d      	str	r3, [sp, #52]	; 0x34
 80095c2:	4e50      	ldr	r6, [pc, #320]	; (8009704 <StartScastDMAStream+0x194>)
 80095c4:	1c73      	adds	r3, r6, #1
 80095c6:	4699      	mov	r9, r3
				temp2 = dstP;
 80095c8:	9b06      	ldr	r3, [sp, #24]
 80095ca:	930e      	str	r3, [sp, #56]	; 0x38
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 80095cc:	4c4e      	ldr	r4, [pc, #312]	; (8009708 <StartScastDMAStream+0x198>)
 80095ce:	971b      	str	r7, [sp, #108]	; 0x6c
 80095d0:	4647      	mov	r7, r8
 80095d2:	4688      	mov	r8, r1
 80095d4:	e054      	b.n	8009680 <StartScastDMAStream+0x110>
		messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 80095d6:	4b4c      	ldr	r3, [pc, #304]	; (8009708 <StartScastDMAStream+0x198>)
 80095d8:	0e3a      	lsrs	r2, r7, #24
 80095da:	701a      	strb	r2, [r3, #0]
		messageParams[1] = (uint8_t) (count >> 16);
 80095dc:	0c3a      	lsrs	r2, r7, #16
 80095de:	705a      	strb	r2, [r3, #1]
		messageParams[2] = (uint8_t) (count >> 8);
 80095e0:	0a3a      	lsrs	r2, r7, #8
 80095e2:	709a      	strb	r2, [r3, #2]
		messageParams[3] = (uint8_t) count;
 80095e4:	70df      	strb	r7, [r3, #3]
		messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 80095e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80095e8:	0e12      	lsrs	r2, r2, #24
 80095ea:	711a      	strb	r2, [r3, #4]
		messageParams[5] = (uint8_t) (timeout >> 16);
 80095ec:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80095ee:	0c12      	lsrs	r2, r2, #16
 80095f0:	715a      	strb	r2, [r3, #5]
		messageParams[6] = (uint8_t) (timeout >> 8);
 80095f2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80095f4:	0a12      	lsrs	r2, r2, #8
 80095f6:	719a      	strb	r2, [r3, #6]
		messageParams[7] = (uint8_t) timeout;
 80095f8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80095fa:	71da      	strb	r2, [r3, #7]
		messageParams[8] = direction;										/* Stream direction */
 80095fc:	4652      	mov	r2, sl
 80095fe:	721a      	strb	r2, [r3, #8]
		messageParams[9] = srcP;												/* Source port */
 8009600:	7258      	strb	r0, [r3, #9]
		messageParams[10] = dstM;												/* destination module */
 8009602:	4642      	mov	r2, r8
 8009604:	729a      	strb	r2, [r3, #10]
		messageParams[11] = dstP;												/* destination port */
 8009606:	9a06      	ldr	r2, [sp, #24]
 8009608:	72da      	strb	r2, [r3, #11]
		messageParams[12] = stored;											/* EEPROM storage */
 800960a:	465a      	mov	r2, fp
 800960c:	731a      	strb	r2, [r3, #12]
		SendMessageToModule(srcM, CODE_DMA_SCAST_STREAM, 13);		
 800960e:	220d      	movs	r2, #13
 8009610:	211c      	movs	r1, #28
 8009612:	0028      	movs	r0, r5
 8009614:	f7ff ff86 	bl	8009524 <SendMessageToModule>
		return result;
 8009618:	e056      	b.n	80096c8 <StartScastDMAStream+0x158>
				temp1 = FindRoute(route[i], srcM);
 800961a:	4641      	mov	r1, r8
 800961c:	f7fa fc88 	bl	8003f30 <FindRoute>
 8009620:	900f      	str	r0, [sp, #60]	; 0x3c
			FindRoute(srcM, dstM);
 8009622:	0039      	movs	r1, r7
 8009624:	4640      	mov	r0, r8
 8009626:	f7fa fc83 	bl	8003f30 <FindRoute>
			if (route[i] == dstM) {
 800962a:	7868      	ldrb	r0, [r5, #1]
				temp2 = dstP;
 800962c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			if (route[i] == dstM) {
 800962e:	42b8      	cmp	r0, r7
 8009630:	d135      	bne.n	800969e <StartScastDMAStream+0x12e>
			messageParams[0] = (uint8_t) (count >> 24);			/* Count */
 8009632:	9a08      	ldr	r2, [sp, #32]
 8009634:	7022      	strb	r2, [r4, #0]
			messageParams[1] = (uint8_t) (count >> 16);
 8009636:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009638:	7062      	strb	r2, [r4, #1]
			messageParams[2] = (uint8_t) (count >> 8);
 800963a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800963c:	70a2      	strb	r2, [r4, #2]
			messageParams[3] = (uint8_t) count;
 800963e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009640:	70e2      	strb	r2, [r4, #3]
			messageParams[4] = (uint8_t) (timeout >> 24);		/* Timeout */
 8009642:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009644:	7122      	strb	r2, [r4, #4]
			messageParams[5] = (uint8_t) (timeout >> 16);
 8009646:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009648:	7162      	strb	r2, [r4, #5]
			messageParams[6] = (uint8_t) (timeout >> 8);
 800964a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800964c:	71a2      	strb	r2, [r4, #6]
			messageParams[7] = (uint8_t) timeout;
 800964e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009650:	71e2      	strb	r2, [r4, #7]
			messageParams[8] = direction;										/* Stream direction */
 8009652:	4652      	mov	r2, sl
 8009654:	7222      	strb	r2, [r4, #8]
			messageParams[9] = temp1;												/* Source port */
 8009656:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009658:	7262      	strb	r2, [r4, #9]
			messageParams[10] = temp2;											/* destination port */
 800965a:	72a3      	strb	r3, [r4, #10]
			messageParams[11] = stored;											/* EEPROM storage */
 800965c:	465b      	mov	r3, fp
 800965e:	72e3      	strb	r3, [r4, #11]
			FindRoute(srcM, dstM);
 8009660:	0039      	movs	r1, r7
 8009662:	4640      	mov	r0, r8
 8009664:	f7fa fc64 	bl	8003f30 <FindRoute>
			SendMessageToModule(route[i], CODE_DMA_CHANNEL, 12);
 8009668:	7868      	ldrb	r0, [r5, #1]
 800966a:	220c      	movs	r2, #12
 800966c:	211b      	movs	r1, #27
 800966e:	f7ff ff59 	bl	8009524 <SendMessageToModule>
			osDelay(10);
 8009672:	200a      	movs	r0, #10
 8009674:	f005 fa43 	bl	800eafe <osDelay>
	for(uint8_t i=0 ; i<sizeof(route) ; i++)
 8009678:	1c73      	adds	r3, r6, #1
 800967a:	454e      	cmp	r6, r9
 800967c:	d014      	beq.n	80096a8 <StartScastDMAStream+0x138>
 800967e:	001e      	movs	r6, r3
		FindRoute(srcM, dstM);
 8009680:	0039      	movs	r1, r7
 8009682:	4640      	mov	r0, r8
 8009684:	f7fa fc54 	bl	8003f30 <FindRoute>
		if (route[i]) 
 8009688:	0035      	movs	r5, r6
 800968a:	7870      	ldrb	r0, [r6, #1]
 800968c:	2800      	cmp	r0, #0
 800968e:	d0f3      	beq.n	8009678 <StartScastDMAStream+0x108>
			if (route[i+1]) {
 8009690:	78b1      	ldrb	r1, [r6, #2]
 8009692:	2900      	cmp	r1, #0
 8009694:	d0c1      	beq.n	800961a <StartScastDMAStream+0xaa>
				temp1 = FindRoute(route[i], route[i+1]);
 8009696:	f7fa fc4b 	bl	8003f30 <FindRoute>
 800969a:	900f      	str	r0, [sp, #60]	; 0x3c
 800969c:	e7c1      	b.n	8009622 <StartScastDMAStream+0xb2>
				temp2 = FindRoute(route[i], route[i-1]);
 800969e:	7829      	ldrb	r1, [r5, #0]
 80096a0:	f7fa fc46 	bl	8003f30 <FindRoute>
 80096a4:	0003      	movs	r3, r0
 80096a6:	e7c4      	b.n	8009632 <StartScastDMAStream+0xc2>
 80096a8:	4645      	mov	r5, r8
 80096aa:	46b8      	mov	r8, r7
 80096ac:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
		}
	}
	
	if (srcM == dstM)
 80096ae:	4545      	cmp	r5, r8
 80096b0:	d112      	bne.n	80096d8 <StartScastDMAStream+0x168>
		port = dstP;
	else
		port = FindRoute(srcM, dstM);
	
	/* Setup my own DMA stream */
	SetupDMAStreams(direction, count, timeout, srcP, port);
 80096b2:	9b06      	ldr	r3, [sp, #24]
 80096b4:	9300      	str	r3, [sp, #0]
 80096b6:	9b07      	ldr	r3, [sp, #28]
 80096b8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80096ba:	0039      	movs	r1, r7
 80096bc:	4650      	mov	r0, sl
 80096be:	f7ff fbeb 	bl	8008e98 <SetupDMAStreams>
	
	// Store my own streams to EEPROM
	if (stored) {		
 80096c2:	465b      	mov	r3, fp
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d10d      	bne.n	80096e4 <StartScastDMAStream+0x174>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
	}
	
	
	return result;
}
 80096c8:	2000      	movs	r0, #0
 80096ca:	b011      	add	sp, #68	; 0x44
 80096cc:	bcf0      	pop	{r4, r5, r6, r7}
 80096ce:	46bb      	mov	fp, r7
 80096d0:	46b2      	mov	sl, r6
 80096d2:	46a9      	mov	r9, r5
 80096d4:	46a0      	mov	r8, r4
 80096d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		port = FindRoute(srcM, dstM);
 80096d8:	4641      	mov	r1, r8
 80096da:	0028      	movs	r0, r5
 80096dc:	f7fa fc28 	bl	8003f30 <FindRoute>
 80096e0:	9006      	str	r0, [sp, #24]
 80096e2:	e7e6      	b.n	80096b2 <StartScastDMAStream+0x142>
		SaveEEstreams(direction, count, timeout, srcP, port, 0, 0, 0, 0);
 80096e4:	2300      	movs	r3, #0
 80096e6:	9304      	str	r3, [sp, #16]
 80096e8:	9303      	str	r3, [sp, #12]
 80096ea:	9302      	str	r3, [sp, #8]
 80096ec:	9301      	str	r3, [sp, #4]
 80096ee:	9b06      	ldr	r3, [sp, #24]
 80096f0:	9300      	str	r3, [sp, #0]
 80096f2:	9b07      	ldr	r3, [sp, #28]
 80096f4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80096f6:	0039      	movs	r1, r7
 80096f8:	4650      	mov	r0, sl
 80096fa:	f7fa f861 	bl	80037c0 <SaveEEstreams>
 80096fe:	e7e3      	b.n	80096c8 <StartScastDMAStream+0x158>
 8009700:	20000070 	.word	0x20000070
 8009704:	2000679b 	.word	0x2000679b
 8009708:	20000da4 	.word	0x20000da4

0800970c <BackEndTask>:

/*-----------------------------------------------------------*/

/* BackEndTask function */
void BackEndTask(void * argument)
{
 800970c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800970e:	46de      	mov	lr, fp
 8009710:	4657      	mov	r7, sl
 8009712:	464e      	mov	r6, r9
 8009714:	4645      	mov	r5, r8
 8009716:	b5e0      	push	{r5, r6, r7, lr}
 8009718:	b089      	sub	sp, #36	; 0x24
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 800971a:	2300      	movs	r3, #0
 800971c:	9301      	str	r3, [sp, #4]
				UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
				++rejectedMsg;							
			}	
			
			/* C. If DMA stopped due to communication errors, restart again */
			if (MsgDMAStopped[port-1] == true) {
 800971e:	4bbc      	ldr	r3, [pc, #752]	; (8009a10 <BackEndTask+0x304>)
 8009720:	469b      	mov	fp, r3
 8009722:	e16d      	b.n	8009a00 <BackEndTask+0x2f4>
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 8009724:	9504      	str	r5, [sp, #16]
 8009726:	9603      	str	r6, [sp, #12]
 8009728:	7833      	ldrb	r3, [r6, #0]
 800972a:	2b3f      	cmp	r3, #63	; 0x3f
 800972c:	dd00      	ble.n	8009730 <BackEndTask+0x24>
 800972e:	e192      	b.n	8009a56 <BackEndTask+0x34a>
 8009730:	001a      	movs	r2, r3
					if (i < (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][i] == 'H' && UARTRxBuf[port-1][i+1] == 'Z')	
 8009732:	1c78      	adds	r0, r7, #1
 8009734:	e185      	b.n	8009a42 <BackEndTask+0x336>
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 8009736:	2a3f      	cmp	r2, #63	; 0x3f
 8009738:	d004      	beq.n	8009744 <BackEndTask+0x38>
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 800973a:	3201      	adds	r2, #1
 800973c:	2a40      	cmp	r2, #64	; 0x40
 800973e:	d000      	beq.n	8009742 <BackEndTask+0x36>
 8009740:	e17f      	b.n	8009a42 <BackEndTask+0x336>
 8009742:	e188      	b.n	8009a56 <BackEndTask+0x34a>
 8009744:	0039      	movs	r1, r7
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 8009746:	5cba      	ldrb	r2, [r7, r2]
 8009748:	2a48      	cmp	r2, #72	; 0x48
 800974a:	d026      	beq.n	800979a <BackEndTask+0x8e>
							if (BOS.disableCLI == false)
 800974c:	4ab1      	ldr	r2, [pc, #708]	; (8009a14 <BackEndTask+0x308>)
 800974e:	7ed2      	ldrb	r2, [r2, #27]
 8009750:	2a00      	cmp	r2, #0
 8009752:	d02c      	beq.n	80097ae <BackEndTask+0xa2>
		for (port=1 ; port <= NumOfPorts; port++)
 8009754:	3501      	adds	r5, #1
 8009756:	3401      	adds	r4, #1
 8009758:	3740      	adds	r7, #64	; 0x40
 800975a:	3601      	adds	r6, #1
 800975c:	2d06      	cmp	r5, #6
 800975e:	d100      	bne.n	8009762 <BackEndTask+0x56>
 8009760:	e14c      	b.n	80099fc <BackEndTask+0x2f0>
 8009762:	1c6b      	adds	r3, r5, #1
 8009764:	b2db      	uxtb	r3, r3
 8009766:	469a      	mov	sl, r3
			if (portStatus[port] == MSG || portStatus[port] == FREE) 
 8009768:	9400      	str	r4, [sp, #0]
 800976a:	7823      	ldrb	r3, [r4, #0]
 800976c:	2b01      	cmp	r3, #1
 800976e:	d9d9      	bls.n	8009724 <BackEndTask+0x18>
			if (MsgDMAStopped[port-1] == true) {
 8009770:	465b      	mov	r3, fp
 8009772:	5d5b      	ldrb	r3, [r3, r5]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d0ed      	beq.n	8009754 <BackEndTask+0x48>
				MsgDMAStopped[port-1] = false;
 8009778:	4ba5      	ldr	r3, [pc, #660]	; (8009a10 <BackEndTask+0x304>)
 800977a:	18eb      	adds	r3, r5, r3
 800977c:	2200      	movs	r2, #0
 800977e:	701a      	strb	r2, [r3, #0]
				if (portStatus[port] == OVERRUN)	portStatus[port] = FREE;
 8009780:	9b00      	ldr	r3, [sp, #0]
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	2b05      	cmp	r3, #5
 8009786:	d100      	bne.n	800978a <BackEndTask+0x7e>
 8009788:	e134      	b.n	80099f4 <BackEndTask+0x2e8>
				HAL_UART_Receive_DMA(GetUart(port), (uint8_t *)&UARTRxBuf[port-1], MSG_RX_BUF_SIZE);
 800978a:	4650      	mov	r0, sl
 800978c:	f004 fc6a 	bl	800e064 <GetUart>
 8009790:	2240      	movs	r2, #64	; 0x40
 8009792:	0039      	movs	r1, r7
 8009794:	f009 ffd4 	bl	8013740 <HAL_UART_Receive_DMA>
 8009798:	e7dc      	b.n	8009754 <BackEndTask+0x48>
					else if (i == (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1] == 'H' && UARTRxBuf[port-1][0] == 'Z')	// HZ wrap around
 800979a:	783a      	ldrb	r2, [r7, #0]
 800979c:	2a5a      	cmp	r2, #90	; 0x5a
 800979e:	d1d5      	bne.n	800974c <BackEndTask+0x40>
					packetLength = UARTRxBuf[port-1][1];
 80097a0:	787b      	ldrb	r3, [r7, #1]
 80097a2:	9302      	str	r3, [sp, #8]
					parseStart = 2;
 80097a4:	233f      	movs	r3, #63	; 0x3f
 80097a6:	9301      	str	r3, [sp, #4]
 80097a8:	3b3d      	subs	r3, #61	; 0x3d
 80097aa:	9305      	str	r3, [sp, #20]
 80097ac:	e034      	b.n	8009818 <BackEndTask+0x10c>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 80097ae:	1c7a      	adds	r2, r7, #1
 80097b0:	4694      	mov	ip, r2
 80097b2:	e021      	b.n	80097f8 <BackEndTask+0xec>
 80097b4:	2b3f      	cmp	r3, #63	; 0x3f
 80097b6:	d11c      	bne.n	80097f2 <BackEndTask+0xe6>
 80097b8:	780a      	ldrb	r2, [r1, #0]
 80097ba:	2a00      	cmp	r2, #0
 80097bc:	d1ca      	bne.n	8009754 <BackEndTask+0x48>
										UARTRxBuf[port-1][j] = 0;
 80097be:	9a04      	ldr	r2, [sp, #16]
 80097c0:	0191      	lsls	r1, r2, #6
 80097c2:	4a95      	ldr	r2, [pc, #596]	; (8009a18 <BackEndTask+0x30c>)
 80097c4:	1852      	adds	r2, r2, r1
 80097c6:	2100      	movs	r1, #0
 80097c8:	54d1      	strb	r1, [r2, r3]
										UARTRxBufIndex[port-1] = j+1;		// Advance buffer index
 80097ca:	3301      	adds	r3, #1
 80097cc:	9a03      	ldr	r2, [sp, #12]
 80097ce:	7013      	strb	r3, [r2, #0]
										portStatus[PcPort] = FREE;			// Free the previous CLI port 
 80097d0:	4b92      	ldr	r3, [pc, #584]	; (8009a1c <BackEndTask+0x310>)
 80097d2:	781a      	ldrb	r2, [r3, #0]
 80097d4:	4892      	ldr	r0, [pc, #584]	; (8009a20 <BackEndTask+0x314>)
 80097d6:	5481      	strb	r1, [r0, r2]
										portStatus[port] = CLI;					// Continue the CLI session on this port
 80097d8:	2203      	movs	r2, #3
 80097da:	9900      	ldr	r1, [sp, #0]
 80097dc:	700a      	strb	r2, [r1, #0]
										PcPort = port;
 80097de:	4652      	mov	r2, sl
 80097e0:	701a      	strb	r2, [r3, #0]
										xTaskNotifyGive(xCommandConsoleTaskHandle);		
 80097e2:	4b90      	ldr	r3, [pc, #576]	; (8009a24 <BackEndTask+0x318>)
 80097e4:	6818      	ldr	r0, [r3, #0]
 80097e6:	2300      	movs	r3, #0
 80097e8:	2202      	movs	r2, #2
 80097ea:	2100      	movs	r1, #0
 80097ec:	f006 fdf0 	bl	80103d0 <xTaskGenericNotify>
										break;
 80097f0:	e7b0      	b.n	8009754 <BackEndTask+0x48>
								for (int j=UARTRxBufIndex[port-1] ; j<MSG_RX_BUF_SIZE ; j++)
 80097f2:	3301      	adds	r3, #1
 80097f4:	2b40      	cmp	r3, #64	; 0x40
 80097f6:	d0ad      	beq.n	8009754 <BackEndTask+0x48>
									if (UARTRxBuf[port-1][j] == 0xD && ((j < MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][j+1] == 0) || (j == MSG_RX_BUF_SIZE-1 && UARTRxBuf[port-1][0] == 0) ) ) 
 80097f8:	5cca      	ldrb	r2, [r1, r3]
 80097fa:	2a0d      	cmp	r2, #13
 80097fc:	d1f9      	bne.n	80097f2 <BackEndTask+0xe6>
 80097fe:	2b3e      	cmp	r3, #62	; 0x3e
 8009800:	dcd8      	bgt.n	80097b4 <BackEndTask+0xa8>
 8009802:	4662      	mov	r2, ip
 8009804:	5cd2      	ldrb	r2, [r2, r3]
 8009806:	2a00      	cmp	r2, #0
 8009808:	d0d9      	beq.n	80097be <BackEndTask+0xb2>
								for (int j=UARTRxBufIndex[port-1] ; j<MSG_RX_BUF_SIZE ; j++)
 800980a:	3301      	adds	r3, #1
 800980c:	e7f4      	b.n	80097f8 <BackEndTask+0xec>
					packetLength = UARTRxBuf[port-1][MSG_RX_BUF_SIZE-1];
 800980e:	233f      	movs	r3, #63	; 0x3f
 8009810:	5cfb      	ldrb	r3, [r7, r3]
 8009812:	9302      	str	r3, [sp, #8]
					parseStart = 0;				
 8009814:	2300      	movs	r3, #0
 8009816:	9305      	str	r3, [sp, #20]
						packetEnd = packetStart + (packetLength + 3);			// Packet length is counted from Dst to before CRC
 8009818:	9b02      	ldr	r3, [sp, #8]
 800981a:	3303      	adds	r3, #3
 800981c:	4698      	mov	r8, r3
 800981e:	9b01      	ldr	r3, [sp, #4]
 8009820:	4443      	add	r3, r8
 8009822:	4699      	mov	r9, r3
					packetEnd -= MSG_RX_BUF_SIZE;
 8009824:	2340      	movs	r3, #64	; 0x40
 8009826:	425b      	negs	r3, r3
 8009828:	469c      	mov	ip, r3
 800982a:	44e1      	add	r9, ip
 800982c:	e133      	b.n	8009a96 <BackEndTask+0x38a>
					packetLength = UARTRxBuf[port-1][0];
 800982e:	783b      	ldrb	r3, [r7, #0]
 8009830:	9302      	str	r3, [sp, #8]
					parseStart = 1;
 8009832:	2301      	movs	r3, #1
 8009834:	9305      	str	r3, [sp, #20]
 8009836:	e7ef      	b.n	8009818 <BackEndTask+0x10c>
					Delay_ms(1);
 8009838:	2001      	movs	r0, #1
 800983a:	f007 f9d3 	bl	8010be4 <HAL_Delay>
					if (packetStart < packetEnd) {
 800983e:	9b01      	ldr	r3, [sp, #4]
 8009840:	4599      	cmp	r9, r3
 8009842:	dd50      	ble.n	80098e6 <BackEndTask+0x1da>
						memcpy(crcBuffer, &UARTRxBuf[port-1][packetStart], packetLength + 3);						
 8009844:	01a9      	lsls	r1, r5, #6
 8009846:	469c      	mov	ip, r3
 8009848:	4461      	add	r1, ip
 800984a:	4b73      	ldr	r3, [pc, #460]	; (8009a18 <BackEndTask+0x30c>)
 800984c:	469c      	mov	ip, r3
 800984e:	4461      	add	r1, ip
 8009850:	4642      	mov	r2, r8
 8009852:	4875      	ldr	r0, [pc, #468]	; (8009a28 <BackEndTask+0x31c>)
 8009854:	f00a fe84 	bl	8014560 <memcpy>
					crc8 = CalculateCRC8((uint32_t *)&crcBuffer, (packetLength + 3));						
 8009858:	9b02      	ldr	r3, [sp, #8]
 800985a:	1cd9      	adds	r1, r3, #3
 800985c:	4872      	ldr	r0, [pc, #456]	; (8009a28 <BackEndTask+0x31c>)
 800985e:	f003 fd37 	bl	800d2d0 <CalculateCRC8>
 8009862:	4680      	mov	r8, r0
					memset(crcBuffer, 0, sizeof(crcBuffer));
 8009864:	2238      	movs	r2, #56	; 0x38
 8009866:	2100      	movs	r1, #0
 8009868:	486f      	ldr	r0, [pc, #444]	; (8009a28 <BackEndTask+0x31c>)
 800986a:	f00a fe82 	bl	8014572 <memset>
					if (crc8 == UARTRxBuf[port-1][packetEnd])
 800986e:	9b04      	ldr	r3, [sp, #16]
 8009870:	019b      	lsls	r3, r3, #6
 8009872:	4a69      	ldr	r2, [pc, #420]	; (8009a18 <BackEndTask+0x30c>)
 8009874:	4694      	mov	ip, r2
 8009876:	4463      	add	r3, ip
 8009878:	464a      	mov	r2, r9
 800987a:	5c9b      	ldrb	r3, [r3, r2]
 800987c:	4543      	cmp	r3, r8
 800987e:	d000      	beq.n	8009882 <BackEndTask+0x176>
 8009880:	e111      	b.n	8009aa6 <BackEndTask+0x39a>
						portStatus[port] = MSG;
 8009882:	2301      	movs	r3, #1
 8009884:	9a00      	ldr	r2, [sp, #0]
 8009886:	7013      	strb	r3, [r2, #0]
						messageLength[port-1] = packetLength;	
 8009888:	4b68      	ldr	r3, [pc, #416]	; (8009a2c <BackEndTask+0x320>)
 800988a:	9a02      	ldr	r2, [sp, #8]
 800988c:	555a      	strb	r2, [r3, r5]
						if ((packetLength) <= (MSG_RX_BUF_SIZE-parseStart-1)) {
 800988e:	233f      	movs	r3, #63	; 0x3f
 8009890:	9905      	ldr	r1, [sp, #20]
 8009892:	1a5b      	subs	r3, r3, r1
 8009894:	4293      	cmp	r3, r2
 8009896:	db6b      	blt.n	8009970 <BackEndTask+0x264>
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], packetLength);	
 8009898:	00e8      	lsls	r0, r5, #3
 800989a:	1b40      	subs	r0, r0, r5
 800989c:	00c0      	lsls	r0, r0, #3
 800989e:	4b64      	ldr	r3, [pc, #400]	; (8009a30 <BackEndTask+0x324>)
 80098a0:	18c0      	adds	r0, r0, r3
 80098a2:	01a9      	lsls	r1, r5, #6
 80098a4:	9b05      	ldr	r3, [sp, #20]
 80098a6:	469c      	mov	ip, r3
 80098a8:	4461      	add	r1, ip
 80098aa:	4b5b      	ldr	r3, [pc, #364]	; (8009a18 <BackEndTask+0x30c>)
 80098ac:	18c9      	adds	r1, r1, r3
 80098ae:	f00a fe57 	bl	8014560 <memcpy>
						if (packetStart < packetEnd) {
 80098b2:	9b01      	ldr	r3, [sp, #4]
 80098b4:	4599      	cmp	r9, r3
 80098b6:	dc00      	bgt.n	80098ba <BackEndTask+0x1ae>
 80098b8:	e081      	b.n	80099be <BackEndTask+0x2b2>
								memset(&UARTRxBuf[port-1][packetStart], 0, (packetLength) + 4);                        
 80098ba:	9a02      	ldr	r2, [sp, #8]
 80098bc:	3204      	adds	r2, #4
 80098be:	01a8      	lsls	r0, r5, #6
 80098c0:	469c      	mov	ip, r3
 80098c2:	4460      	add	r0, ip
 80098c4:	4b54      	ldr	r3, [pc, #336]	; (8009a18 <BackEndTask+0x30c>)
 80098c6:	18c0      	adds	r0, r0, r3
 80098c8:	2100      	movs	r1, #0
 80098ca:	f00a fe52 	bl	8014572 <memset>
						UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
 80098ce:	464b      	mov	r3, r9
 80098d0:	3301      	adds	r3, #1
 80098d2:	9a03      	ldr	r2, [sp, #12]
 80098d4:	7013      	strb	r3, [r2, #0]
						++acceptedMsg;
 80098d6:	4a57      	ldr	r2, [pc, #348]	; (8009a34 <BackEndTask+0x328>)
 80098d8:	8813      	ldrh	r3, [r2, #0]
 80098da:	3301      	adds	r3, #1
 80098dc:	8013      	strh	r3, [r2, #0]
						NotifyMessagingTask(port);	
 80098de:	4650      	mov	r0, sl
 80098e0:	f7ff fbb2 	bl	8009048 <NotifyMessagingTask>
						continue;		// Inspect the next port circular buffer
 80098e4:	e736      	b.n	8009754 <BackEndTask+0x48>
						memcpy(crcBuffer, &UARTRxBuf[port-1][packetStart], MSG_RX_BUF_SIZE-packetStart);
 80098e6:	01a9      	lsls	r1, r5, #6
 80098e8:	2240      	movs	r2, #64	; 0x40
 80098ea:	9b01      	ldr	r3, [sp, #4]
 80098ec:	1ad0      	subs	r0, r2, r3
 80098ee:	9107      	str	r1, [sp, #28]
 80098f0:	469c      	mov	ip, r3
 80098f2:	4461      	add	r1, ip
 80098f4:	4b48      	ldr	r3, [pc, #288]	; (8009a18 <BackEndTask+0x30c>)
 80098f6:	469c      	mov	ip, r3
 80098f8:	4461      	add	r1, ip
 80098fa:	9006      	str	r0, [sp, #24]
 80098fc:	0002      	movs	r2, r0
 80098fe:	484a      	ldr	r0, [pc, #296]	; (8009a28 <BackEndTask+0x31c>)
 8009900:	f00a fe2e 	bl	8014560 <memcpy>
						memcpy(&crcBuffer[MSG_RX_BUF_SIZE-packetStart], &UARTRxBuf[port-1][0], (packetLength + 3) - (MSG_RX_BUF_SIZE-packetStart));
 8009904:	4848      	ldr	r0, [pc, #288]	; (8009a28 <BackEndTask+0x31c>)
 8009906:	9906      	ldr	r1, [sp, #24]
 8009908:	468c      	mov	ip, r1
 800990a:	4460      	add	r0, ip
 800990c:	4643      	mov	r3, r8
 800990e:	1a5a      	subs	r2, r3, r1
 8009910:	9b07      	ldr	r3, [sp, #28]
 8009912:	0019      	movs	r1, r3
 8009914:	4b40      	ldr	r3, [pc, #256]	; (8009a18 <BackEndTask+0x30c>)
 8009916:	469c      	mov	ip, r3
 8009918:	4461      	add	r1, ip
 800991a:	f00a fe21 	bl	8014560 <memcpy>
					crc8 = CalculateCRC8((uint32_t *)&crcBuffer, (packetLength + 3));						
 800991e:	9b02      	ldr	r3, [sp, #8]
 8009920:	1cd9      	adds	r1, r3, #3
 8009922:	4841      	ldr	r0, [pc, #260]	; (8009a28 <BackEndTask+0x31c>)
 8009924:	f003 fcd4 	bl	800d2d0 <CalculateCRC8>
 8009928:	4680      	mov	r8, r0
					memset(crcBuffer, 0, sizeof(crcBuffer));
 800992a:	2238      	movs	r2, #56	; 0x38
 800992c:	2100      	movs	r1, #0
 800992e:	483e      	ldr	r0, [pc, #248]	; (8009a28 <BackEndTask+0x31c>)
 8009930:	f00a fe1f 	bl	8014572 <memset>
					if (crc8 == UARTRxBuf[port-1][packetEnd])
 8009934:	9b04      	ldr	r3, [sp, #16]
 8009936:	019b      	lsls	r3, r3, #6
 8009938:	4a37      	ldr	r2, [pc, #220]	; (8009a18 <BackEndTask+0x30c>)
 800993a:	4694      	mov	ip, r2
 800993c:	4463      	add	r3, ip
 800993e:	464a      	mov	r2, r9
 8009940:	5c9b      	ldrb	r3, [r3, r2]
 8009942:	4543      	cmp	r3, r8
 8009944:	d09d      	beq.n	8009882 <BackEndTask+0x176>
						memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
 8009946:	2240      	movs	r2, #64	; 0x40
 8009948:	9b01      	ldr	r3, [sp, #4]
 800994a:	1ad2      	subs	r2, r2, r3
 800994c:	4690      	mov	r8, r2
 800994e:	01a8      	lsls	r0, r5, #6
 8009950:	469c      	mov	ip, r3
 8009952:	4460      	add	r0, ip
 8009954:	4b30      	ldr	r3, [pc, #192]	; (8009a18 <BackEndTask+0x30c>)
 8009956:	18c0      	adds	r0, r0, r3
 8009958:	2100      	movs	r1, #0
 800995a:	f00a fe0a 	bl	8014572 <memset>
						memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
 800995e:	9a02      	ldr	r2, [sp, #8]
 8009960:	3204      	adds	r2, #4
 8009962:	4643      	mov	r3, r8
 8009964:	1ad2      	subs	r2, r2, r3
 8009966:	2100      	movs	r1, #0
 8009968:	0038      	movs	r0, r7
 800996a:	f00a fe02 	bl	8014572 <memset>
 800996e:	e0a5      	b.n	8009abc <BackEndTask+0x3b0>
							memcpy(&cMessage[port-1][0], &UARTRxBuf[port-1][parseStart], MSG_RX_BUF_SIZE-parseStart);
 8009970:	00eb      	lsls	r3, r5, #3
 8009972:	1b5b      	subs	r3, r3, r5
 8009974:	00d9      	lsls	r1, r3, #3
 8009976:	01ab      	lsls	r3, r5, #6
 8009978:	2240      	movs	r2, #64	; 0x40
 800997a:	9805      	ldr	r0, [sp, #20]
 800997c:	1a12      	subs	r2, r2, r0
 800997e:	4690      	mov	r8, r2
 8009980:	4a2b      	ldr	r2, [pc, #172]	; (8009a30 <BackEndTask+0x324>)
 8009982:	0010      	movs	r0, r2
 8009984:	9104      	str	r1, [sp, #16]
 8009986:	468c      	mov	ip, r1
 8009988:	4460      	add	r0, ip
 800998a:	9a05      	ldr	r2, [sp, #20]
 800998c:	9300      	str	r3, [sp, #0]
 800998e:	469c      	mov	ip, r3
 8009990:	4462      	add	r2, ip
 8009992:	4b21      	ldr	r3, [pc, #132]	; (8009a18 <BackEndTask+0x30c>)
 8009994:	18d1      	adds	r1, r2, r3
 8009996:	4642      	mov	r2, r8
 8009998:	f00a fde2 	bl	8014560 <memcpy>
							memcpy(&cMessage[port-1][MSG_RX_BUF_SIZE-parseStart], &UARTRxBuf[port-1][0], (packetLength)-(MSG_RX_BUF_SIZE-parseStart));	// wrap-around
 800999c:	9904      	ldr	r1, [sp, #16]
 800999e:	0008      	movs	r0, r1
 80099a0:	4440      	add	r0, r8
 80099a2:	4a23      	ldr	r2, [pc, #140]	; (8009a30 <BackEndTask+0x324>)
 80099a4:	4694      	mov	ip, r2
 80099a6:	4460      	add	r0, ip
 80099a8:	9a02      	ldr	r2, [sp, #8]
 80099aa:	4641      	mov	r1, r8
 80099ac:	1a52      	subs	r2, r2, r1
 80099ae:	9b00      	ldr	r3, [sp, #0]
 80099b0:	0019      	movs	r1, r3
 80099b2:	4b19      	ldr	r3, [pc, #100]	; (8009a18 <BackEndTask+0x30c>)
 80099b4:	4698      	mov	r8, r3
 80099b6:	4441      	add	r1, r8
 80099b8:	f00a fdd2 	bl	8014560 <memcpy>
 80099bc:	e779      	b.n	80098b2 <BackEndTask+0x1a6>
								memset(&UARTRxBuf[port-1][packetStart], 0, MSG_RX_BUF_SIZE-packetStart);
 80099be:	01ab      	lsls	r3, r5, #6
 80099c0:	2240      	movs	r2, #64	; 0x40
 80099c2:	9901      	ldr	r1, [sp, #4]
 80099c4:	1a52      	subs	r2, r2, r1
 80099c6:	4690      	mov	r8, r2
 80099c8:	9300      	str	r3, [sp, #0]
 80099ca:	0018      	movs	r0, r3
 80099cc:	468c      	mov	ip, r1
 80099ce:	4460      	add	r0, ip
 80099d0:	4b11      	ldr	r3, [pc, #68]	; (8009a18 <BackEndTask+0x30c>)
 80099d2:	18c0      	adds	r0, r0, r3
 80099d4:	2100      	movs	r1, #0
 80099d6:	f00a fdcc 	bl	8014572 <memset>
								memset(&UARTRxBuf[port-1][0], 0, ((packetLength) + 4) - (MSG_RX_BUF_SIZE-packetStart));
 80099da:	9a02      	ldr	r2, [sp, #8]
 80099dc:	3204      	adds	r2, #4
 80099de:	4641      	mov	r1, r8
 80099e0:	1a52      	subs	r2, r2, r1
 80099e2:	9b00      	ldr	r3, [sp, #0]
 80099e4:	490c      	ldr	r1, [pc, #48]	; (8009a18 <BackEndTask+0x30c>)
 80099e6:	468c      	mov	ip, r1
 80099e8:	4463      	add	r3, ip
 80099ea:	0018      	movs	r0, r3
 80099ec:	2100      	movs	r1, #0
 80099ee:	f00a fdc0 	bl	8014572 <memset>
 80099f2:	e76c      	b.n	80098ce <BackEndTask+0x1c2>
				if (portStatus[port] == OVERRUN)	portStatus[port] = FREE;
 80099f4:	2300      	movs	r3, #0
 80099f6:	9a00      	ldr	r2, [sp, #0]
 80099f8:	7013      	strb	r3, [r2, #0]
 80099fa:	e6c6      	b.n	800978a <BackEndTask+0x7e>
			}				
		}
		
		taskYIELD();
 80099fc:	f006 ff78 	bl	80108f0 <vPortYield>
		for (port=1 ; port <= NumOfPorts; port++)
 8009a00:	4b0d      	ldr	r3, [pc, #52]	; (8009a38 <BackEndTask+0x32c>)
 8009a02:	4698      	mov	r8, r3
 8009a04:	4b0d      	ldr	r3, [pc, #52]	; (8009a3c <BackEndTask+0x330>)
	int packetStart = 0, packetEnd = 0, packetLength = 0, parseStart = 0;
 8009a06:	4f04      	ldr	r7, [pc, #16]	; (8009a18 <BackEndTask+0x30c>)
 8009a08:	2500      	movs	r5, #0
 8009a0a:	4644      	mov	r4, r8
 8009a0c:	001e      	movs	r6, r3
 8009a0e:	e6a8      	b.n	8009762 <BackEndTask+0x56>
 8009a10:	20001000 	.word	0x20001000
 8009a14:	200066e4 	.word	0x200066e4
 8009a18:	20001008 	.word	0x20001008
 8009a1c:	20000b67 	.word	0x20000b67
 8009a20:	20000e5c 	.word	0x20000e5c
 8009a24:	2000123c 	.word	0x2000123c
 8009a28:	20001190 	.word	0x20001190
 8009a2c:	20000d9c 	.word	0x20000d9c
 8009a30:	20000ba4 	.word	0x20000ba4
 8009a34:	200012c8 	.word	0x200012c8
 8009a38:	20000e5d 	.word	0x20000e5d
 8009a3c:	20001188 	.word	0x20001188
				for (int i=UARTRxBufIndex[port-1]; i<MSG_RX_BUF_SIZE ; i++)
 8009a40:	3201      	adds	r2, #1
					if (i < (MSG_RX_BUF_SIZE-1) && UARTRxBuf[port-1][i] == 'H' && UARTRxBuf[port-1][i+1] == 'Z')	
 8009a42:	2a3e      	cmp	r2, #62	; 0x3e
 8009a44:	dd00      	ble.n	8009a48 <BackEndTask+0x33c>
 8009a46:	e676      	b.n	8009736 <BackEndTask+0x2a>
 8009a48:	5cb9      	ldrb	r1, [r7, r2]
 8009a4a:	2948      	cmp	r1, #72	; 0x48
 8009a4c:	d1f8      	bne.n	8009a40 <BackEndTask+0x334>
 8009a4e:	5c81      	ldrb	r1, [r0, r2]
 8009a50:	295a      	cmp	r1, #90	; 0x5a
 8009a52:	d1f5      	bne.n	8009a40 <BackEndTask+0x334>
 8009a54:	9201      	str	r2, [sp, #4]
				if (packetStart == MSG_RX_BUF_SIZE-3) {
 8009a56:	9b01      	ldr	r3, [sp, #4]
 8009a58:	2b3d      	cmp	r3, #61	; 0x3d
 8009a5a:	d100      	bne.n	8009a5e <BackEndTask+0x352>
 8009a5c:	e6d7      	b.n	800980e <BackEndTask+0x102>
				} else if (packetStart == MSG_RX_BUF_SIZE-2) {
 8009a5e:	9b01      	ldr	r3, [sp, #4]
 8009a60:	2b3e      	cmp	r3, #62	; 0x3e
 8009a62:	d100      	bne.n	8009a66 <BackEndTask+0x35a>
 8009a64:	e6e3      	b.n	800982e <BackEndTask+0x122>
				} else if (packetStart == MSG_RX_BUF_SIZE-1) {
 8009a66:	9b01      	ldr	r3, [sp, #4]
 8009a68:	2b3f      	cmp	r3, #63	; 0x3f
 8009a6a:	d100      	bne.n	8009a6e <BackEndTask+0x362>
 8009a6c:	e698      	b.n	80097a0 <BackEndTask+0x94>
					packetLength = UARTRxBuf[port-1][packetStart+2];
 8009a6e:	9b04      	ldr	r3, [sp, #16]
 8009a70:	019b      	lsls	r3, r3, #6
 8009a72:	4a17      	ldr	r2, [pc, #92]	; (8009ad0 <BackEndTask+0x3c4>)
 8009a74:	4694      	mov	ip, r2
 8009a76:	4463      	add	r3, ip
 8009a78:	9a01      	ldr	r2, [sp, #4]
 8009a7a:	4694      	mov	ip, r2
 8009a7c:	4463      	add	r3, ip
 8009a7e:	7899      	ldrb	r1, [r3, #2]
 8009a80:	9102      	str	r1, [sp, #8]
					parseStart = packetStart+3;
 8009a82:	0013      	movs	r3, r2
 8009a84:	3203      	adds	r2, #3
 8009a86:	9205      	str	r2, [sp, #20]
						packetEnd = packetStart + (packetLength + 3);			// Packet length is counted from Dst to before CRC
 8009a88:	1cca      	adds	r2, r1, #3
 8009a8a:	4690      	mov	r8, r2
 8009a8c:	4443      	add	r3, r8
 8009a8e:	4699      	mov	r9, r3
				if (packetEnd > MSG_RX_BUF_SIZE-1)												// wrap-around
 8009a90:	2b3f      	cmp	r3, #63	; 0x3f
 8009a92:	dd00      	ble.n	8009a96 <BackEndTask+0x38a>
 8009a94:	e6c6      	b.n	8009824 <BackEndTask+0x118>
				if (packetStart != packetEnd)										// Non-empty packet
 8009a96:	9b01      	ldr	r3, [sp, #4]
 8009a98:	4599      	cmp	r9, r3
 8009a9a:	d000      	beq.n	8009a9e <BackEndTask+0x392>
 8009a9c:	e6cc      	b.n	8009838 <BackEndTask+0x12c>
				if (packetStart < packetEnd) {
 8009a9e:	9b01      	ldr	r3, [sp, #4]
 8009aa0:	4599      	cmp	r9, r3
 8009aa2:	dc00      	bgt.n	8009aa6 <BackEndTask+0x39a>
 8009aa4:	e74f      	b.n	8009946 <BackEndTask+0x23a>
						memset(&UARTRxBuf[port-1][packetStart], 0, (packetLength) + 4);                        
 8009aa6:	9a02      	ldr	r2, [sp, #8]
 8009aa8:	3204      	adds	r2, #4
 8009aaa:	01a8      	lsls	r0, r5, #6
 8009aac:	9b01      	ldr	r3, [sp, #4]
 8009aae:	469c      	mov	ip, r3
 8009ab0:	4460      	add	r0, ip
 8009ab2:	4b07      	ldr	r3, [pc, #28]	; (8009ad0 <BackEndTask+0x3c4>)
 8009ab4:	18c0      	adds	r0, r0, r3
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	f00a fd5b 	bl	8014572 <memset>
				UARTRxBufIndex[port-1] = (packetEnd+1);			// Set buffer pointer after the CRC byte 
 8009abc:	464b      	mov	r3, r9
 8009abe:	3301      	adds	r3, #1
 8009ac0:	9a03      	ldr	r2, [sp, #12]
 8009ac2:	7013      	strb	r3, [r2, #0]
				++rejectedMsg;							
 8009ac4:	4a03      	ldr	r2, [pc, #12]	; (8009ad4 <BackEndTask+0x3c8>)
 8009ac6:	8813      	ldrh	r3, [r2, #0]
 8009ac8:	3301      	adds	r3, #1
 8009aca:	8013      	strh	r3, [r2, #0]
 8009acc:	e650      	b.n	8009770 <BackEndTask+0x64>
 8009ace:	46c0      	nop			; (mov r8, r8)
 8009ad0:	20001008 	.word	0x20001008
 8009ad4:	20001464 	.word	0x20001464

08009ad8 <User_MessagingParser>:

{
	BOS_Status result = BOS_ERR_UnknownMessage;
	
	return result;
}
 8009ad8:	2001      	movs	r0, #1
 8009ada:	4770      	bx	lr

08009adc <PxMessagingTask>:
{
 8009adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ade:	46de      	mov	lr, fp
 8009ae0:	4657      	mov	r7, sl
 8009ae2:	464e      	mov	r6, r9
 8009ae4:	4645      	mov	r5, r8
 8009ae6:	b5e0      	push	{r5, r6, r7, lr}
 8009ae8:	b095      	sub	sp, #84	; 0x54
 8009aea:	2300      	movs	r3, #0
 8009aec:	9306      	str	r3, [sp, #24]
 8009aee:	930a      	str	r3, [sp, #40]	; 0x28
	port = (int8_t)(unsigned) argument;
 8009af0:	b2c3      	uxtb	r3, r0
 8009af2:	9308      	str	r3, [sp, #32]
 8009af4:	27ff      	movs	r7, #255	; 0xff
 8009af6:	4007      	ands	r7, r0
		if (messageLength[port-1])
 8009af8:	1e7c      	subs	r4, r7, #1
 8009afa:	00e3      	lsls	r3, r4, #3
 8009afc:	1b1b      	subs	r3, r3, r4
 8009afe:	00db      	lsls	r3, r3, #3
 8009b00:	9309      	str	r3, [sp, #36]	; 0x24
		memset(cMessage[port-1], 0, (size_t) messageLength[port-1]);
 8009b02:	4ada      	ldr	r2, [pc, #872]	; (8009e6c <PxMessagingTask+0x390>)
 8009b04:	18d3      	adds	r3, r2, r3
 8009b06:	9304      	str	r3, [sp, #16]
	BOS_Status result = BOS_OK; HAL_StatusTypeDef status = HAL_OK;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b0c:	2500      	movs	r5, #0
			if (cMessage[port-1][2]>>7) {
 8009b0e:	00e3      	lsls	r3, r4, #3
 8009b10:	1b1b      	subs	r3, r3, r4
 8009b12:	00db      	lsls	r3, r3, #3
 8009b14:	469a      	mov	sl, r3
 8009b16:	0013      	movs	r3, r2
 8009b18:	4453      	add	r3, sl
 8009b1a:	9307      	str	r3, [sp, #28]
 8009b1c:	3302      	adds	r3, #2
 8009b1e:	469b      	mov	fp, r3
 8009b20:	46a8      	mov	r8, r5
 8009b22:	4656      	mov	r6, sl
 8009b24:	e021      	b.n	8009b6a <PxMessagingTask+0x8e>
				code = cMessage[port-1][3+shift];
 8009b26:	4ad1      	ldr	r2, [pc, #836]	; (8009e6c <PxMessagingTask+0x390>)
 8009b28:	1992      	adds	r2, r2, r6
 8009b2a:	18d3      	adds	r3, r2, r3
 8009b2c:	78db      	ldrb	r3, [r3, #3]
 8009b2e:	4699      	mov	r9, r3
 8009b30:	e046      	b.n	8009bc0 <PxMessagingTask+0xe4>
					if (code == CODE_UPDATE) {		// Remote bootloader update
 8009b32:	464b      	mov	r3, r9
 8009b34:	2b19      	cmp	r3, #25
 8009b36:	d05b      	beq.n	8009bf0 <PxMessagingTask+0x114>
					} else if (code == CODE_UPDATE_VIA_PORT) {		// Remote 'via port' bootloader update
 8009b38:	2b1a      	cmp	r3, #26
 8009b3a:	d063      	beq.n	8009c04 <PxMessagingTask+0x128>
		if (result == BOS_ERR_UnknownMessage) {
 8009b3c:	4643      	mov	r3, r8
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d101      	bne.n	8009b46 <PxMessagingTask+0x6a>
 8009b42:	f001 fa52 	bl	800afea <PxMessagingTask+0x150e>
		memset(cMessage[port-1], 0, (size_t) messageLength[port-1]);
 8009b46:	4dca      	ldr	r5, [pc, #808]	; (8009e70 <PxMessagingTask+0x394>)
 8009b48:	5d2a      	ldrb	r2, [r5, r4]
 8009b4a:	2100      	movs	r1, #0
 8009b4c:	9804      	ldr	r0, [sp, #16]
 8009b4e:	f00a fd10 	bl	8014572 <memset>
		messageLength[port-1] = 0;
 8009b52:	2300      	movs	r3, #0
 8009b54:	552b      	strb	r3, [r5, r4]
		if (portStatus[port] != STREAM && portStatus[port] != CLI && portStatus[port] != PORTBUTTON) {
 8009b56:	4bc7      	ldr	r3, [pc, #796]	; (8009e74 <PxMessagingTask+0x398>)
 8009b58:	5ddb      	ldrb	r3, [r3, r7]
 8009b5a:	3b02      	subs	r3, #2
 8009b5c:	2b02      	cmp	r3, #2
 8009b5e:	d902      	bls.n	8009b66 <PxMessagingTask+0x8a>
			portStatus[port] = FREE;
 8009b60:	4bc4      	ldr	r3, [pc, #784]	; (8009e74 <PxMessagingTask+0x398>)
 8009b62:	2200      	movs	r2, #0
 8009b64:	55da      	strb	r2, [r3, r7]
		taskYIELD();
 8009b66:	f006 fec3 	bl	80108f0 <vPortYield>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8009b6a:	2101      	movs	r1, #1
 8009b6c:	4249      	negs	r1, r1
 8009b6e:	2001      	movs	r0, #1
 8009b70:	f006 fbe2 	bl	8010338 <ulTaskNotifyTake>
		if (messageLength[port-1])
 8009b74:	4bbe      	ldr	r3, [pc, #760]	; (8009e70 <PxMessagingTask+0x394>)
 8009b76:	5d19      	ldrb	r1, [r3, r4]
 8009b78:	2900      	cmp	r1, #0
 8009b7a:	d0df      	beq.n	8009b3c <PxMessagingTask+0x60>
			if (cMessage[port-1][2]>>7) {
 8009b7c:	465b      	mov	r3, fp
 8009b7e:	781a      	ldrb	r2, [r3, #0]
 8009b80:	09d3      	lsrs	r3, r2, #7
 8009b82:	48bd      	ldr	r0, [pc, #756]	; (8009e78 <PxMessagingTask+0x39c>)
 8009b84:	7003      	strb	r3, [r0, #0]
			dst = cMessage[port-1][0]; 
 8009b86:	4bb9      	ldr	r3, [pc, #740]	; (8009e6c <PxMessagingTask+0x390>)
 8009b88:	5cf3      	ldrb	r3, [r6, r3]
 8009b8a:	469a      	mov	sl, r3
			src = cMessage[port-1][1];	
 8009b8c:	9b07      	ldr	r3, [sp, #28]
 8009b8e:	785b      	ldrb	r3, [r3, #1]
 8009b90:	9306      	str	r3, [sp, #24]
			if (cMessage[port-1][2] & 0x01) {						// 1st bit (LSB) Extended options - TODO handle extended options case
 8009b92:	2301      	movs	r3, #1
 8009b94:	4013      	ands	r3, r2
			shift = 0;
 8009b96:	9305      	str	r3, [sp, #20]
			BOS.trace = (traceOptions_t)((cMessage[port-1][2]>>2)&0x03);	// 3rd-4th bits Trace 
 8009b98:	4db8      	ldr	r5, [pc, #736]	; (8009e7c <PxMessagingTask+0x3a0>)
 8009b9a:	0710      	lsls	r0, r2, #28
 8009b9c:	0f80      	lsrs	r0, r0, #30
 8009b9e:	71e8      	strb	r0, [r5, #7]
			BOS.response = (cMessage[port-1][2])&0x60;									// 6th-7th bits Response mode
 8009ba0:	2060      	movs	r0, #96	; 0x60
 8009ba2:	4010      	ands	r0, r2
 8009ba4:	71a8      	strb	r0, [r5, #6]
			if (extendCode == true) {		
 8009ba6:	0792      	lsls	r2, r2, #30
 8009ba8:	d5bd      	bpl.n	8009b26 <PxMessagingTask+0x4a>
				code = ( ( (uint16_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][3+shift] );	
 8009baa:	4ab0      	ldr	r2, [pc, #704]	; (8009e6c <PxMessagingTask+0x390>)
 8009bac:	1992      	adds	r2, r2, r6
 8009bae:	18d2      	adds	r2, r2, r3
 8009bb0:	7910      	ldrb	r0, [r2, #4]
 8009bb2:	0200      	lsls	r0, r0, #8
 8009bb4:	78d2      	ldrb	r2, [r2, #3]
 8009bb6:	1812      	adds	r2, r2, r0
 8009bb8:	b292      	uxth	r2, r2
 8009bba:	4691      	mov	r9, r2
				++shift;
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	9305      	str	r3, [sp, #20]
			if ( ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID != 1) ) || 
 8009bc0:	4653      	mov	r3, sl
 8009bc2:	3b01      	subs	r3, #1
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	2bfc      	cmp	r3, #252	; 0xfc
 8009bc8:	d829      	bhi.n	8009c1e <PxMessagingTask+0x142>
 8009bca:	4bad      	ldr	r3, [pc, #692]	; (8009e80 <PxMessagingTask+0x3a4>)
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	4553      	cmp	r3, sl
 8009bd0:	d070      	beq.n	8009cb4 <PxMessagingTask+0x1d8>
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d101      	bne.n	8009bda <PxMessagingTask+0xfe>
 8009bd6:	f001 fa36 	bl	800b046 <PxMessagingTask+0x156a>
				ForwardReceivedMessage(port);
 8009bda:	9808      	ldr	r0, [sp, #32]
 8009bdc:	f7ff fc3a 	bl	8009454 <ForwardReceivedMessage>
				if (BOS.trace)
 8009be0:	4ba6      	ldr	r3, [pc, #664]	; (8009e7c <PxMessagingTask+0x3a0>)
 8009be2:	79db      	ldrb	r3, [r3, #7]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d0a4      	beq.n	8009b32 <PxMessagingTask+0x56>
					indMode = IND_SHORT_BLINK;
 8009be8:	4ba6      	ldr	r3, [pc, #664]	; (8009e84 <PxMessagingTask+0x3a8>)
 8009bea:	2203      	movs	r2, #3
 8009bec:	701a      	strb	r2, [r3, #0]
 8009bee:	e7a0      	b.n	8009b32 <PxMessagingTask+0x56>
						Delay_ms(100); remoteBootloaderUpdate(src, dst, port, 0);								
 8009bf0:	2064      	movs	r0, #100	; 0x64
 8009bf2:	f006 fff7 	bl	8010be4 <HAL_Delay>
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	9a08      	ldr	r2, [sp, #32]
 8009bfa:	4651      	mov	r1, sl
 8009bfc:	9806      	ldr	r0, [sp, #24]
 8009bfe:	f7fa fa69 	bl	80040d4 <remoteBootloaderUpdate>
 8009c02:	e79b      	b.n	8009b3c <PxMessagingTask+0x60>
						Delay_ms(100); remoteBootloaderUpdate(src, dst, port, cMessage[port-1][shift]);								
 8009c04:	2064      	movs	r0, #100	; 0x64
 8009c06:	f006 ffed 	bl	8010be4 <HAL_Delay>
 8009c0a:	4b98      	ldr	r3, [pc, #608]	; (8009e6c <PxMessagingTask+0x390>)
 8009c0c:	199b      	adds	r3, r3, r6
 8009c0e:	9a05      	ldr	r2, [sp, #20]
 8009c10:	5c9b      	ldrb	r3, [r3, r2]
 8009c12:	9a08      	ldr	r2, [sp, #32]
 8009c14:	4651      	mov	r1, sl
 8009c16:	9806      	ldr	r0, [sp, #24]
 8009c18:	f7fa fa5c 	bl	80040d4 <remoteBootloaderUpdate>
 8009c1c:	e78e      	b.n	8009b3c <PxMessagingTask+0x60>
				if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8009c1e:	4653      	mov	r3, sl
 8009c20:	2bff      	cmp	r3, #255	; 0xff
 8009c22:	d03c      	beq.n	8009c9e <PxMessagingTask+0x1c2>
				if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8009c24:	2bfe      	cmp	r3, #254	; 0xfe
 8009c26:	d145      	bne.n	8009cb4 <PxMessagingTask+0x1d8>
 8009c28:	4b90      	ldr	r3, [pc, #576]	; (8009e6c <PxMessagingTask+0x390>)
 8009c2a:	199b      	adds	r3, r3, r6
 8009c2c:	1859      	adds	r1, r3, r1
 8009c2e:	3901      	subs	r1, #1
 8009c30:	780b      	ldrb	r3, [r1, #0]
 8009c32:	4a95      	ldr	r2, [pc, #596]	; (8009e88 <PxMessagingTask+0x3ac>)
 8009c34:	7812      	ldrb	r2, [r2, #0]
					result = BOS_ERR_MSG_Reflection;
 8009c36:	2103      	movs	r1, #3
 8009c38:	4688      	mov	r8, r1
				if (dst == BOS_MULTICAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8009c3a:	429a      	cmp	r2, r3
 8009c3c:	d083      	beq.n	8009b46 <PxMessagingTask+0x6a>
					bcastID = bcastLastID = cMessage[port-1][messageLength[port-1]-1];			// Store bcastID 		
 8009c3e:	4a92      	ldr	r2, [pc, #584]	; (8009e88 <PxMessagingTask+0x3ac>)
 8009c40:	7013      	strb	r3, [r2, #0]
 8009c42:	4a92      	ldr	r2, [pc, #584]	; (8009e8c <PxMessagingTask+0x3b0>)
 8009c44:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_MULTICAST, port);
 8009c46:	9908      	ldr	r1, [sp, #32]
 8009c48:	20fe      	movs	r0, #254	; 0xfe
 8009c4a:	f7ff fc23 	bl	8009494 <BroadcastReceivedMessage>
					cMessage[port-1][messageLength[port-1]-1] = 0;								// Reset bcastID location 
 8009c4e:	4b88      	ldr	r3, [pc, #544]	; (8009e70 <PxMessagingTask+0x394>)
 8009c50:	5d19      	ldrb	r1, [r3, r4]
 8009c52:	4b86      	ldr	r3, [pc, #536]	; (8009e6c <PxMessagingTask+0x390>)
 8009c54:	199b      	adds	r3, r3, r6
 8009c56:	185b      	adds	r3, r3, r1
 8009c58:	1e5a      	subs	r2, r3, #1
 8009c5a:	2000      	movs	r0, #0
 8009c5c:	7010      	strb	r0, [r2, #0]
					temp = cMessage[port-1][messageLength[port-1]-2];							// Number of members in this multicast group - TODO breaks when message is 14 length and padded
 8009c5e:	3b02      	subs	r3, #2
 8009c60:	781a      	ldrb	r2, [r3, #0]
 8009c62:	920a      	str	r2, [sp, #40]	; 0x28
					for(i=0 ; i<temp ; i++)
 8009c64:	2a00      	cmp	r2, #0
 8009c66:	d101      	bne.n	8009c6c <PxMessagingTask+0x190>
 8009c68:	f001 f9dc 	bl	800b024 <PxMessagingTask+0x1548>
						if (myID == cMessage[port-1][messageLength[port-1]-2-temp+i]) {
 8009c6c:	4b84      	ldr	r3, [pc, #528]	; (8009e80 <PxMessagingTask+0x3a4>)
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	469c      	mov	ip, r3
 8009c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c74:	18c8      	adds	r0, r1, r3
 8009c76:	1a80      	subs	r0, r0, r2
 8009c78:	3802      	subs	r0, #2
 8009c7a:	4b7c      	ldr	r3, [pc, #496]	; (8009e6c <PxMessagingTask+0x390>)
 8009c7c:	18c0      	adds	r0, r0, r3
 8009c7e:	2300      	movs	r3, #0
 8009c80:	4665      	mov	r5, ip
 8009c82:	468c      	mov	ip, r1
 8009c84:	0011      	movs	r1, r2
 8009c86:	5cc2      	ldrb	r2, [r0, r3]
 8009c88:	42aa      	cmp	r2, r5
 8009c8a:	d101      	bne.n	8009c90 <PxMessagingTask+0x1b4>
 8009c8c:	f001 f9c2 	bl	800b014 <PxMessagingTask+0x1538>
					for(i=0 ; i<temp ; i++)
 8009c90:	3301      	adds	r3, #1
 8009c92:	b2da      	uxtb	r2, r3
 8009c94:	428a      	cmp	r2, r1
 8009c96:	d3f6      	bcc.n	8009c86 <PxMessagingTask+0x1aa>
					result = BOS_ERR_WrongID;
 8009c98:	2366      	movs	r3, #102	; 0x66
 8009c9a:	4698      	mov	r8, r3
 8009c9c:	e753      	b.n	8009b46 <PxMessagingTask+0x6a>
				if (dst == BOS_BROADCAST && cMessage[port-1][messageLength[port-1]-1] != bcastLastID) 
 8009c9e:	4b73      	ldr	r3, [pc, #460]	; (8009e6c <PxMessagingTask+0x390>)
 8009ca0:	199b      	adds	r3, r3, r6
 8009ca2:	1859      	adds	r1, r3, r1
 8009ca4:	3901      	subs	r1, #1
 8009ca6:	780b      	ldrb	r3, [r1, #0]
 8009ca8:	4a77      	ldr	r2, [pc, #476]	; (8009e88 <PxMessagingTask+0x3ac>)
 8009caa:	7812      	ldrb	r2, [r2, #0]
 8009cac:	429a      	cmp	r2, r3
 8009cae:	d115      	bne.n	8009cdc <PxMessagingTask+0x200>
					result = BOS_ERR_MSG_Reflection;
 8009cb0:	2303      	movs	r3, #3
 8009cb2:	4698      	mov	r8, r3
				if (result == BOS_OK)
 8009cb4:	4643      	mov	r3, r8
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d000      	beq.n	8009cbc <PxMessagingTask+0x1e0>
 8009cba:	e73f      	b.n	8009b3c <PxMessagingTask+0x60>
				shift += 4;
 8009cbc:	9d05      	ldr	r5, [sp, #20]
 8009cbe:	3504      	adds	r5, #4
				numOfParams = messageLength[port-1] - shift;
 8009cc0:	4b6b      	ldr	r3, [pc, #428]	; (8009e70 <PxMessagingTask+0x394>)
 8009cc2:	5d19      	ldrb	r1, [r3, r4]
 8009cc4:	1b48      	subs	r0, r1, r5
 8009cc6:	b2c3      	uxtb	r3, r0
 8009cc8:	4698      	mov	r8, r3
					switch (code)
 8009cca:	464b      	mov	r3, r9
 8009ccc:	2b23      	cmp	r3, #35	; 0x23
 8009cce:	d901      	bls.n	8009cd4 <PxMessagingTask+0x1f8>
 8009cd0:	f001 f96d 	bl	800afae <PxMessagingTask+0x14d2>
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	4a6e      	ldr	r2, [pc, #440]	; (8009e90 <PxMessagingTask+0x3b4>)
 8009cd8:	58d3      	ldr	r3, [r2, r3]
 8009cda:	469f      	mov	pc, r3
					bcastID = bcastLastID = cMessage[port-1][messageLength[port-1]-1];			// Store bcastID 		
 8009cdc:	4a6a      	ldr	r2, [pc, #424]	; (8009e88 <PxMessagingTask+0x3ac>)
 8009cde:	7013      	strb	r3, [r2, #0]
 8009ce0:	4a6a      	ldr	r2, [pc, #424]	; (8009e8c <PxMessagingTask+0x3b0>)
 8009ce2:	7013      	strb	r3, [r2, #0]
					BroadcastReceivedMessage(BOS_BROADCAST, port);
 8009ce4:	9908      	ldr	r1, [sp, #32]
 8009ce6:	20ff      	movs	r0, #255	; 0xff
 8009ce8:	f7ff fbd4 	bl	8009494 <BroadcastReceivedMessage>
					cMessage[port-1][messageLength[port-1]-1] = 0;								// Reset bcastID location 
 8009cec:	4b60      	ldr	r3, [pc, #384]	; (8009e70 <PxMessagingTask+0x394>)
 8009cee:	5d1a      	ldrb	r2, [r3, r4]
 8009cf0:	4b5e      	ldr	r3, [pc, #376]	; (8009e6c <PxMessagingTask+0x390>)
 8009cf2:	199b      	adds	r3, r3, r6
 8009cf4:	189b      	adds	r3, r3, r2
 8009cf6:	3b01      	subs	r3, #1
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	701a      	strb	r2, [r3, #0]
 8009cfc:	e7da      	b.n	8009cb4 <PxMessagingTask+0x1d8>
							for (p=0 ; p<numOfParams ; p++) 
 8009cfe:	4643      	mov	r3, r8
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d023      	beq.n	8009d4c <PxMessagingTask+0x270>
								arrayPortsDir[src-1] |= (0x8000>>((cMessage[port-1][shift+p])-1));								
 8009d04:	9b06      	ldr	r3, [sp, #24]
 8009d06:	3b01      	subs	r3, #1
 8009d08:	469c      	mov	ip, r3
 8009d0a:	005a      	lsls	r2, r3, #1
 8009d0c:	4b61      	ldr	r3, [pc, #388]	; (8009e94 <PxMessagingTask+0x3b8>)
 8009d0e:	5ad3      	ldrh	r3, [r2, r3]
 8009d10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d12:	4691      	mov	r9, r2
 8009d14:	444d      	add	r5, r9
 8009d16:	4a55      	ldr	r2, [pc, #340]	; (8009e6c <PxMessagingTask+0x390>)
 8009d18:	18ad      	adds	r5, r5, r2
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	2080      	movs	r0, #128	; 0x80
 8009d1e:	0200      	lsls	r0, r0, #8
 8009d20:	4641      	mov	r1, r8
 8009d22:	46a0      	mov	r8, r4
 8009d24:	46b1      	mov	r9, r6
 8009d26:	001e      	movs	r6, r3
 8009d28:	000c      	movs	r4, r1
 8009d2a:	5ca9      	ldrb	r1, [r5, r2]
 8009d2c:	3901      	subs	r1, #1
 8009d2e:	0003      	movs	r3, r0
 8009d30:	410b      	asrs	r3, r1
 8009d32:	431e      	orrs	r6, r3
 8009d34:	b2b6      	uxth	r6, r6
							for (p=0 ; p<numOfParams ; p++) 
 8009d36:	3201      	adds	r2, #1
 8009d38:	b2d3      	uxtb	r3, r2
 8009d3a:	429c      	cmp	r4, r3
 8009d3c:	d8f5      	bhi.n	8009d2a <PxMessagingTask+0x24e>
 8009d3e:	4644      	mov	r4, r8
 8009d40:	0033      	movs	r3, r6
 8009d42:	464e      	mov	r6, r9
 8009d44:	4662      	mov	r2, ip
 8009d46:	0050      	lsls	r0, r2, #1
 8009d48:	4a52      	ldr	r2, [pc, #328]	; (8009e94 <PxMessagingTask+0x3b8>)
 8009d4a:	5283      	strh	r3, [r0, r2]
							responseStatus = BOS_OK;
 8009d4c:	4b52      	ldr	r3, [pc, #328]	; (8009e98 <PxMessagingTask+0x3bc>)
 8009d4e:	2200      	movs	r2, #0
 8009d50:	701a      	strb	r2, [r3, #0]
							break;		
 8009d52:	2300      	movs	r3, #0
 8009d54:	4698      	mov	r8, r3
 8009d56:	e6f6      	b.n	8009b46 <PxMessagingTask+0x6a>
							indMode = IND_PING;	osDelay(10);
 8009d58:	4b4a      	ldr	r3, [pc, #296]	; (8009e84 <PxMessagingTask+0x3a8>)
 8009d5a:	2201      	movs	r2, #1
 8009d5c:	701a      	strb	r2, [r3, #0]
 8009d5e:	200a      	movs	r0, #10
 8009d60:	f004 fecd 	bl	800eafe <osDelay>
							if (BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG)
 8009d64:	4b45      	ldr	r3, [pc, #276]	; (8009e7c <PxMessagingTask+0x3a0>)
 8009d66:	799b      	ldrb	r3, [r3, #6]
 8009d68:	2240      	movs	r2, #64	; 0x40
 8009d6a:	4393      	bics	r3, r2
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	4690      	mov	r8, r2
 8009d70:	2b20      	cmp	r3, #32
 8009d72:	d000      	beq.n	8009d76 <PxMessagingTask+0x29a>
 8009d74:	e6e7      	b.n	8009b46 <PxMessagingTask+0x6a>
								SendMessageToModule(src, CODE_PING_RESPONSE, 0);	
 8009d76:	2102      	movs	r1, #2
 8009d78:	9806      	ldr	r0, [sp, #24]
 8009d7a:	f7ff fbd3 	bl	8009524 <SendMessageToModule>
 8009d7e:	e6e2      	b.n	8009b46 <PxMessagingTask+0x6a>
							if (!moduleAlias[myID][0])
 8009d80:	4b3f      	ldr	r3, [pc, #252]	; (8009e80 <PxMessagingTask+0x3a4>)
 8009d82:	781a      	ldrb	r2, [r3, #0]
 8009d84:	0093      	lsls	r3, r2, #2
 8009d86:	189b      	adds	r3, r3, r2
 8009d88:	005b      	lsls	r3, r3, #1
 8009d8a:	4a44      	ldr	r2, [pc, #272]	; (8009e9c <PxMessagingTask+0x3c0>)
 8009d8c:	5c9b      	ldrb	r3, [r3, r2]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d118      	bne.n	8009dc4 <PxMessagingTask+0x2e8>
								sprintf( ( char * ) pcUserMessage, "Hi from module %d\r\n", src);
 8009d92:	9a06      	ldr	r2, [sp, #24]
 8009d94:	4942      	ldr	r1, [pc, #264]	; (8009ea0 <PxMessagingTask+0x3c4>)
 8009d96:	4843      	ldr	r0, [pc, #268]	; (8009ea4 <PxMessagingTask+0x3c8>)
 8009d98:	f00a fe14 	bl	80149c4 <sprintf>
							writePxMutex(PcPort, pcUserMessage, strlen(pcUserMessage), cmd50ms, HAL_MAX_DELAY);
 8009d9c:	4d41      	ldr	r5, [pc, #260]	; (8009ea4 <PxMessagingTask+0x3c8>)
 8009d9e:	0028      	movs	r0, r5
 8009da0:	f7f6 f9ba 	bl	8000118 <strlen>
 8009da4:	b282      	uxth	r2, r0
 8009da6:	4b40      	ldr	r3, [pc, #256]	; (8009ea8 <PxMessagingTask+0x3cc>)
 8009da8:	7818      	ldrb	r0, [r3, #0]
 8009daa:	2301      	movs	r3, #1
 8009dac:	425b      	negs	r3, r3
 8009dae:	9300      	str	r3, [sp, #0]
 8009db0:	3333      	adds	r3, #51	; 0x33
 8009db2:	0029      	movs	r1, r5
 8009db4:	f004 f978 	bl	800e0a8 <writePxMutex>
							responseStatus = BOS_OK;								
 8009db8:	4b37      	ldr	r3, [pc, #220]	; (8009e98 <PxMessagingTask+0x3bc>)
 8009dba:	2200      	movs	r2, #0
 8009dbc:	701a      	strb	r2, [r3, #0]
							break;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	4698      	mov	r8, r3
 8009dc2:	e6c0      	b.n	8009b46 <PxMessagingTask+0x6a>
								sprintf( ( char * ) pcUserMessage, "Hi from module %d (%s)\r\n", src, moduleAlias[src]);
 8009dc4:	230a      	movs	r3, #10
 8009dc6:	9906      	ldr	r1, [sp, #24]
 8009dc8:	434b      	muls	r3, r1
 8009dca:	4a34      	ldr	r2, [pc, #208]	; (8009e9c <PxMessagingTask+0x3c0>)
 8009dcc:	189b      	adds	r3, r3, r2
 8009dce:	000a      	movs	r2, r1
 8009dd0:	4936      	ldr	r1, [pc, #216]	; (8009eac <PxMessagingTask+0x3d0>)
 8009dd2:	4834      	ldr	r0, [pc, #208]	; (8009ea4 <PxMessagingTask+0x3c8>)
 8009dd4:	f00a fdf6 	bl	80149c4 <sprintf>
 8009dd8:	e7e0      	b.n	8009d9c <PxMessagingTask+0x2c0>
							IND_ON();
 8009dda:	2180      	movs	r1, #128	; 0x80
 8009ddc:	2090      	movs	r0, #144	; 0x90
 8009dde:	2201      	movs	r2, #1
 8009de0:	0109      	lsls	r1, r1, #4
 8009de2:	05c0      	lsls	r0, r0, #23
 8009de4:	f007 ffe0 	bl	8011da8 <HAL_GPIO_WritePin>
							break;
 8009de8:	2300      	movs	r3, #0
 8009dea:	4698      	mov	r8, r3
 8009dec:	e6ab      	b.n	8009b46 <PxMessagingTask+0x6a>
							IND_OFF();
 8009dee:	2180      	movs	r1, #128	; 0x80
 8009df0:	2090      	movs	r0, #144	; 0x90
 8009df2:	2200      	movs	r2, #0
 8009df4:	0109      	lsls	r1, r1, #4
 8009df6:	05c0      	lsls	r0, r0, #23
 8009df8:	f007 ffd6 	bl	8011da8 <HAL_GPIO_WritePin>
							break;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	4698      	mov	r8, r3
 8009e00:	e6a1      	b.n	8009b46 <PxMessagingTask+0x6a>
							IND_toggle();
 8009e02:	2180      	movs	r1, #128	; 0x80
 8009e04:	2090      	movs	r0, #144	; 0x90
 8009e06:	0109      	lsls	r1, r1, #4
 8009e08:	05c0      	lsls	r0, r0, #23
 8009e0a:	f007 ffd3 	bl	8011db4 <HAL_GPIO_TogglePin>
							break;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	4698      	mov	r8, r3
 8009e12:	e698      	b.n	8009b46 <PxMessagingTask+0x6a>
							neighbors[port-1][0] = ( (uint16_t) src << 8 ) + cMessage[port-1][2+shift];			/* Neighbor ID + Neighbor own port */
 8009e14:	4b26      	ldr	r3, [pc, #152]	; (8009eb0 <PxMessagingTask+0x3d4>)
 8009e16:	469c      	mov	ip, r3
 8009e18:	00a3      	lsls	r3, r4, #2
 8009e1a:	4a14      	ldr	r2, [pc, #80]	; (8009e6c <PxMessagingTask+0x390>)
 8009e1c:	4691      	mov	r9, r2
 8009e1e:	44b1      	add	r9, r6
 8009e20:	464a      	mov	r2, r9
 8009e22:	1950      	adds	r0, r2, r5
 8009e24:	7881      	ldrb	r1, [r0, #2]
 8009e26:	4688      	mov	r8, r1
 8009e28:	9906      	ldr	r1, [sp, #24]
 8009e2a:	0209      	lsls	r1, r1, #8
 8009e2c:	4441      	add	r1, r8
 8009e2e:	4662      	mov	r2, ip
 8009e30:	5299      	strh	r1, [r3, r2]
							neighbors[port-1][1] = ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift];		/* Neighbor PN */
 8009e32:	4463      	add	r3, ip
 8009e34:	464a      	mov	r2, r9
 8009e36:	5d51      	ldrb	r1, [r2, r5]
 8009e38:	0209      	lsls	r1, r1, #8
 8009e3a:	7842      	ldrb	r2, [r0, #1]
 8009e3c:	1852      	adds	r2, r2, r1
 8009e3e:	805a      	strh	r2, [r3, #2]
							messageParams[1] = (uint8_t) myPN;
 8009e40:	4b1c      	ldr	r3, [pc, #112]	; (8009eb4 <PxMessagingTask+0x3d8>)
 8009e42:	881b      	ldrh	r3, [r3, #0]
 8009e44:	4a1c      	ldr	r2, [pc, #112]	; (8009eb8 <PxMessagingTask+0x3dc>)
 8009e46:	7053      	strb	r3, [r2, #1]
							messageParams[0] = (uint8_t) (myPN >> 8);	
 8009e48:	0a1b      	lsrs	r3, r3, #8
 8009e4a:	7013      	strb	r3, [r2, #0]
							messageParams[2] = port;
 8009e4c:	9d08      	ldr	r5, [sp, #32]
 8009e4e:	7095      	strb	r5, [r2, #2]
							osDelay(2);
 8009e50:	2002      	movs	r0, #2
 8009e52:	f004 fe54 	bl	800eafe <osDelay>
							SendMessageFromPort(port, 0, 0, CODE_HI_RESPONSE, 3);
 8009e56:	2303      	movs	r3, #3
 8009e58:	9300      	str	r3, [sp, #0]
 8009e5a:	3308      	adds	r3, #8
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	2100      	movs	r1, #0
 8009e60:	0028      	movs	r0, r5
 8009e62:	f7ff f937 	bl	80090d4 <SendMessageFromPort>
							break;
 8009e66:	2300      	movs	r3, #0
 8009e68:	4698      	mov	r8, r3
 8009e6a:	e66c      	b.n	8009b46 <PxMessagingTask+0x6a>
 8009e6c:	20000ba4 	.word	0x20000ba4
 8009e70:	20000d9c 	.word	0x20000d9c
 8009e74:	20000e5c 	.word	0x20000e5c
 8009e78:	20000d61 	.word	0x20000d61
 8009e7c:	200066e4 	.word	0x200066e4
 8009e80:	20000070 	.word	0x20000070
 8009e84:	20000d60 	.word	0x20000d60
 8009e88:	200012ca 	.word	0x200012ca
 8009e8c:	20000b68 	.word	0x20000b68
 8009e90:	0801cf64 	.word	0x0801cf64
 8009e94:	20006b38 	.word	0x20006b38
 8009e98:	20000e78 	.word	0x20000e78
 8009e9c:	20000dd4 	.word	0x20000dd4
 8009ea0:	0801bec8 	.word	0x0801bec8
 8009ea4:	20001414 	.word	0x20001414
 8009ea8:	20000b67 	.word	0x20000b67
 8009eac:	0801bedc 	.word	0x0801bedc
 8009eb0:	20000df4 	.word	0x20000df4
 8009eb4:	20000072 	.word	0x20000072
 8009eb8:	20000da4 	.word	0x20000da4
							neighbors[port-1][0] = ( (uint16_t) src << 8 ) + cMessage[port-1][2+shift];		/* Neighbor ID + Neighbor own port */
 8009ebc:	4bd6      	ldr	r3, [pc, #856]	; (800a218 <PxMessagingTask+0x73c>)
 8009ebe:	469c      	mov	ip, r3
 8009ec0:	00a3      	lsls	r3, r4, #2
 8009ec2:	4ad6      	ldr	r2, [pc, #856]	; (800a21c <PxMessagingTask+0x740>)
 8009ec4:	4691      	mov	r9, r2
 8009ec6:	44b1      	add	r9, r6
 8009ec8:	464a      	mov	r2, r9
 8009eca:	1950      	adds	r0, r2, r5
 8009ecc:	7881      	ldrb	r1, [r0, #2]
 8009ece:	4688      	mov	r8, r1
 8009ed0:	9906      	ldr	r1, [sp, #24]
 8009ed2:	0209      	lsls	r1, r1, #8
 8009ed4:	4441      	add	r1, r8
 8009ed6:	4662      	mov	r2, ip
 8009ed8:	5299      	strh	r1, [r3, r2]
							neighbors[port-1][1] = ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift];		/* Neighbor PN */	
 8009eda:	4463      	add	r3, ip
 8009edc:	464a      	mov	r2, r9
 8009ede:	5d51      	ldrb	r1, [r2, r5]
 8009ee0:	0209      	lsls	r1, r1, #8
 8009ee2:	7842      	ldrb	r2, [r0, #1]
 8009ee4:	1852      	adds	r2, r2, r1
 8009ee6:	805a      	strh	r2, [r3, #2]
							responseStatus = BOS_OK;
 8009ee8:	4bcd      	ldr	r3, [pc, #820]	; (800a220 <PxMessagingTask+0x744>)
 8009eea:	2200      	movs	r2, #0
 8009eec:	701a      	strb	r2, [r3, #0]
							break;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	4698      	mov	r8, r3
 8009ef2:	e628      	b.n	8009b46 <PxMessagingTask+0x6a>
 8009ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ef6:	18eb      	adds	r3, r5, r3
 8009ef8:	3b01      	subs	r3, #1
 8009efa:	4ac8      	ldr	r2, [pc, #800]	; (800a21c <PxMessagingTask+0x740>)
 8009efc:	4699      	mov	r9, r3
 8009efe:	4491      	add	r9, r2
						if (myID == cMessage[port-1][messageLength[port-1]-2-temp+i]) {
 8009f00:	2301      	movs	r3, #1
 8009f02:	46a0      	mov	r8, r4
 8009f04:	46b2      	mov	sl, r6
 8009f06:	464e      	mov	r6, r9
 8009f08:	46a9      	mov	r9, r5
 8009f0a:	9d08      	ldr	r5, [sp, #32]
 8009f0c:	001c      	movs	r4, r3
 8009f0e:	e002      	b.n	8009f16 <PxMessagingTask+0x43a>
							for (uint8_t p=1 ; p<=NumOfPorts ; p++) {
 8009f10:	3401      	adds	r4, #1
 8009f12:	2c07      	cmp	r4, #7
 8009f14:	d008      	beq.n	8009f28 <PxMessagingTask+0x44c>
 8009f16:	b2e0      	uxtb	r0, r4
								if (p != port)	SwapUartPins(GetUart(p), cMessage[port-1][shift+p-1]); 
 8009f18:	42a8      	cmp	r0, r5
 8009f1a:	d0f9      	beq.n	8009f10 <PxMessagingTask+0x434>
 8009f1c:	f004 f8a2 	bl	800e064 <GetUart>
 8009f20:	5d31      	ldrb	r1, [r6, r4]
 8009f22:	f004 f93b 	bl	800e19c <SwapUartPins>
 8009f26:	e7f3      	b.n	8009f10 <PxMessagingTask+0x434>
 8009f28:	4644      	mov	r4, r8
 8009f2a:	464d      	mov	r5, r9
 8009f2c:	4656      	mov	r6, sl
							SwapUartPins(GetUart(port), cMessage[port-1][shift+MaxNumOfPorts]);
 8009f2e:	9808      	ldr	r0, [sp, #32]
 8009f30:	f004 f898 	bl	800e064 <GetUart>
 8009f34:	4bb9      	ldr	r3, [pc, #740]	; (800a21c <PxMessagingTask+0x740>)
 8009f36:	199b      	adds	r3, r3, r6
 8009f38:	195d      	adds	r5, r3, r5
 8009f3a:	7aa9      	ldrb	r1, [r5, #10]
 8009f3c:	f004 f92e 	bl	800e19c <SwapUartPins>
							break;
 8009f40:	2300      	movs	r3, #0
 8009f42:	4698      	mov	r8, r3
 8009f44:	e5ff      	b.n	8009b46 <PxMessagingTask+0x6a>
							if (cMessage[port-1][shift] == 0)						/* Change my own ID */
 8009f46:	002a      	movs	r2, r5
 8009f48:	4bb4      	ldr	r3, [pc, #720]	; (800a21c <PxMessagingTask+0x740>)
 8009f4a:	199b      	adds	r3, r3, r6
 8009f4c:	5d5b      	ldrb	r3, [r3, r5]
 8009f4e:	4698      	mov	r8, r3
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d108      	bne.n	8009f66 <PxMessagingTask+0x48a>
								myID = cMessage[port-1][1+shift];
 8009f54:	2238      	movs	r2, #56	; 0x38
 8009f56:	4362      	muls	r2, r4
 8009f58:	4bb0      	ldr	r3, [pc, #704]	; (800a21c <PxMessagingTask+0x740>)
 8009f5a:	189b      	adds	r3, r3, r2
 8009f5c:	195d      	adds	r5, r3, r5
 8009f5e:	786a      	ldrb	r2, [r5, #1]
 8009f60:	4bb0      	ldr	r3, [pc, #704]	; (800a224 <PxMessagingTask+0x748>)
 8009f62:	701a      	strb	r2, [r3, #0]
 8009f64:	e5ef      	b.n	8009b46 <PxMessagingTask+0x6a>
							else if (cMessage[port-1][shift] == 1) {		/* Change my neighbor's ID */
 8009f66:	2b01      	cmp	r3, #1
 8009f68:	d002      	beq.n	8009f70 <PxMessagingTask+0x494>
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	4698      	mov	r8, r3
 8009f6e:	e5ea      	b.n	8009b46 <PxMessagingTask+0x6a>
								messageParams[0] = 0;											/* change own ID */
 8009f70:	49ad      	ldr	r1, [pc, #692]	; (800a228 <PxMessagingTask+0x74c>)
 8009f72:	2500      	movs	r5, #0
 8009f74:	700d      	strb	r5, [r1, #0]
								messageParams[1] = cMessage[port-1][1+shift];		/* The new ID */
 8009f76:	2038      	movs	r0, #56	; 0x38
 8009f78:	4360      	muls	r0, r4
 8009f7a:	4ba8      	ldr	r3, [pc, #672]	; (800a21c <PxMessagingTask+0x740>)
 8009f7c:	181b      	adds	r3, r3, r0
 8009f7e:	189b      	adds	r3, r3, r2
 8009f80:	785a      	ldrb	r2, [r3, #1]
 8009f82:	704a      	strb	r2, [r1, #1]
								SendMessageFromPort(cMessage[port-1][2+shift], 0, 0, CODE_MODULE_ID, 3);
 8009f84:	7898      	ldrb	r0, [r3, #2]
 8009f86:	2303      	movs	r3, #3
 8009f88:	9300      	str	r3, [sp, #0]
 8009f8a:	330d      	adds	r3, #13
 8009f8c:	002a      	movs	r2, r5
 8009f8e:	0029      	movs	r1, r5
 8009f90:	f7ff f8a0 	bl	80090d4 <SendMessageFromPort>
 8009f94:	46a8      	mov	r8, r5
 8009f96:	e5d6      	b.n	8009b46 <PxMessagingTask+0x6a>
							if (longMessage) {
 8009f98:	4ba4      	ldr	r3, [pc, #656]	; (800a22c <PxMessagingTask+0x750>)
 8009f9a:	781b      	ldrb	r3, [r3, #0]
 8009f9c:	4699      	mov	r9, r3
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d014      	beq.n	8009fcc <PxMessagingTask+0x4f0>
								memcpy(&longMessageScratchpad[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );	
 8009fa2:	4ba3      	ldr	r3, [pc, #652]	; (800a230 <PxMessagingTask+0x754>)
 8009fa4:	469a      	mov	sl, r3
 8009fa6:	881b      	ldrh	r3, [r3, #0]
 8009fa8:	4699      	mov	r9, r3
 8009faa:	48a2      	ldr	r0, [pc, #648]	; (800a234 <PxMessagingTask+0x758>)
 8009fac:	4448      	add	r0, r9
 8009fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fb0:	469c      	mov	ip, r3
 8009fb2:	4465      	add	r5, ip
 8009fb4:	4999      	ldr	r1, [pc, #612]	; (800a21c <PxMessagingTask+0x740>)
 8009fb6:	1869      	adds	r1, r5, r1
 8009fb8:	4642      	mov	r2, r8
 8009fba:	f00a fad1 	bl	8014560 <memcpy>
								longMessageLastPtr += numOfParams;
 8009fbe:	464d      	mov	r5, r9
 8009fc0:	4445      	add	r5, r8
 8009fc2:	4653      	mov	r3, sl
 8009fc4:	801d      	strh	r5, [r3, #0]
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	4698      	mov	r8, r3
 8009fca:	e5bc      	b.n	8009b46 <PxMessagingTask+0x6a>
								memcpy(&longMessageScratchpad[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 8009fcc:	4b98      	ldr	r3, [pc, #608]	; (800a230 <PxMessagingTask+0x754>)
 8009fce:	881b      	ldrh	r3, [r3, #0]
 8009fd0:	4a98      	ldr	r2, [pc, #608]	; (800a234 <PxMessagingTask+0x758>)
 8009fd2:	4692      	mov	sl, r2
 8009fd4:	9305      	str	r3, [sp, #20]
 8009fd6:	0018      	movs	r0, r3
 8009fd8:	4450      	add	r0, sl
 8009fda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fdc:	468c      	mov	ip, r1
 8009fde:	4465      	add	r5, ip
 8009fe0:	498e      	ldr	r1, [pc, #568]	; (800a21c <PxMessagingTask+0x740>)
 8009fe2:	1869      	adds	r1, r5, r1
 8009fe4:	4642      	mov	r2, r8
 8009fe6:	f00a fabb 	bl	8014560 <memcpy>
								longMessageLastPtr += numOfParams;
 8009fea:	9b05      	ldr	r3, [sp, #20]
 8009fec:	4443      	add	r3, r8
 8009fee:	b29d      	uxth	r5, r3
								N = (longMessageLastPtr / (MaxNumOfPorts+1)) / 2;
 8009ff0:	2116      	movs	r1, #22
 8009ff2:	0028      	movs	r0, r5
 8009ff4:	f7f6 f8ac 	bl	8000150 <__udivsi3>
 8009ff8:	4b8f      	ldr	r3, [pc, #572]	; (800a238 <PxMessagingTask+0x75c>)
 8009ffa:	7018      	strb	r0, [r3, #0]
								memcpy(&array, &longMessageScratchpad, longMessageLastPtr);
 8009ffc:	002a      	movs	r2, r5
 8009ffe:	4651      	mov	r1, sl
 800a000:	488e      	ldr	r0, [pc, #568]	; (800a23c <PxMessagingTask+0x760>)
 800a002:	f00a faad 	bl	8014560 <memcpy>
								longMessageLastPtr = 0;
 800a006:	2300      	movs	r3, #0
 800a008:	4a89      	ldr	r2, [pc, #548]	; (800a230 <PxMessagingTask+0x754>)
 800a00a:	8013      	strh	r3, [r2, #0]
 800a00c:	46c8      	mov	r8, r9
 800a00e:	e59a      	b.n	8009b46 <PxMessagingTask+0x6a>
						if (myID == cMessage[port-1][messageLength[port-1]-2-temp+i]) {
 800a010:	2501      	movs	r5, #1
 800a012:	2300      	movs	r3, #0
								if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 800a014:	2280      	movs	r2, #128	; 0x80
 800a016:	0212      	lsls	r2, r2, #8
 800a018:	4690      	mov	r8, r2
									messageParams[temp++] = p;
 800a01a:	46a1      	mov	r9, r4
 800a01c:	001c      	movs	r4, r3
 800a01e:	e003      	b.n	800a028 <PxMessagingTask+0x54c>
								for (p=1 ; p<=NumOfPorts ; p++) {
 800a020:	3501      	adds	r5, #1
 800a022:	b2ed      	uxtb	r5, r5
 800a024:	2d07      	cmp	r5, #7
 800a026:	d00a      	beq.n	800a03e <PxMessagingTask+0x562>
								if (GetUart(p)->AdvancedInit.Swap == UART_ADVFEATURE_SWAP_ENABLE) {
 800a028:	0028      	movs	r0, r5
 800a02a:	f004 f81b 	bl	800e064 <GetUart>
 800a02e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a030:	4543      	cmp	r3, r8
 800a032:	d1f5      	bne.n	800a020 <PxMessagingTask+0x544>
									messageParams[temp++] = p;
 800a034:	1c63      	adds	r3, r4, #1
 800a036:	4a7c      	ldr	r2, [pc, #496]	; (800a228 <PxMessagingTask+0x74c>)
 800a038:	5515      	strb	r5, [r2, r4]
 800a03a:	b2dc      	uxtb	r4, r3
 800a03c:	e7f0      	b.n	800a020 <PxMessagingTask+0x544>
 800a03e:	0023      	movs	r3, r4
 800a040:	940a      	str	r4, [sp, #40]	; 0x28
 800a042:	464c      	mov	r4, r9
							SendMessageToModule(src, CODE_READ_PORT_DIR_RESPONSE, temp);
 800a044:	b29a      	uxth	r2, r3
 800a046:	2114      	movs	r1, #20
 800a048:	9806      	ldr	r0, [sp, #24]
 800a04a:	f7ff fa6b 	bl	8009524 <SendMessageToModule>
							break;
 800a04e:	2300      	movs	r3, #0
 800a050:	4698      	mov	r8, r3
 800a052:	e578      	b.n	8009b46 <PxMessagingTask+0x6a>
								temp32 = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];		
 800a054:	4b71      	ldr	r3, [pc, #452]	; (800a21c <PxMessagingTask+0x740>)
 800a056:	199b      	adds	r3, r3, r6
 800a058:	5d5a      	ldrb	r2, [r3, r5]
 800a05a:	0612      	lsls	r2, r2, #24
 800a05c:	195b      	adds	r3, r3, r5
 800a05e:	78d9      	ldrb	r1, [r3, #3]
 800a060:	1852      	adds	r2, r2, r1
 800a062:	7859      	ldrb	r1, [r3, #1]
 800a064:	0409      	lsls	r1, r1, #16
 800a066:	1852      	adds	r2, r2, r1
 800a068:	7899      	ldrb	r1, [r3, #2]
 800a06a:	0209      	lsls	r1, r1, #8
 800a06c:	4691      	mov	r9, r2
 800a06e:	4489      	add	r9, r1
								if (cMessage[port-1][4+shift] == 0xFF)					// All ports
 800a070:	791b      	ldrb	r3, [r3, #4]
 800a072:	2bff      	cmp	r3, #255	; 0xff
 800a074:	d015      	beq.n	800a0a2 <PxMessagingTask+0x5c6>
									for (p=0 ; p<numOfParams ; p++) 
 800a076:	4643      	mov	r3, r8
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d010      	beq.n	800a09e <PxMessagingTask+0x5c2>
 800a07c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a07e:	469c      	mov	ip, r3
 800a080:	4465      	add	r5, ip
 800a082:	3504      	adds	r5, #4
 800a084:	4b65      	ldr	r3, [pc, #404]	; (800a21c <PxMessagingTask+0x740>)
 800a086:	46aa      	mov	sl, r5
 800a088:	449a      	add	sl, r3
 800a08a:	2500      	movs	r5, #0
 800a08c:	9405      	str	r4, [sp, #20]
 800a08e:	464b      	mov	r3, r9
 800a090:	46b9      	mov	r9, r7
 800a092:	4647      	mov	r7, r8
 800a094:	0032      	movs	r2, r6
 800a096:	4656      	mov	r6, sl
 800a098:	4692      	mov	sl, r2
 800a09a:	4698      	mov	r8, r3
 800a09c:	e015      	b.n	800a0ca <PxMessagingTask+0x5ee>
								temp = temp32 = 0;
 800a09e:	930a      	str	r3, [sp, #40]	; 0x28
 800a0a0:	e551      	b.n	8009b46 <PxMessagingTask+0x6a>
									for (p=1 ; p<=NumOfPorts ; p++) 
 800a0a2:	2501      	movs	r5, #1
 800a0a4:	46a0      	mov	r8, r4
 800a0a6:	464c      	mov	r4, r9
										UpdateBaudrate(p, temp32); 
 800a0a8:	0021      	movs	r1, r4
 800a0aa:	0028      	movs	r0, r5
 800a0ac:	f004 f86c 	bl	800e188 <UpdateBaudrate>
									for (p=1 ; p<=NumOfPorts ; p++) 
 800a0b0:	3501      	adds	r5, #1
 800a0b2:	b2ed      	uxtb	r5, r5
 800a0b4:	2d07      	cmp	r5, #7
 800a0b6:	d1f7      	bne.n	800a0a8 <PxMessagingTask+0x5cc>
 800a0b8:	4644      	mov	r4, r8
								temp = temp32 = 0;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	930a      	str	r3, [sp, #40]	; 0x28
 800a0be:	4698      	mov	r8, r3
 800a0c0:	e541      	b.n	8009b46 <PxMessagingTask+0x6a>
									for (p=0 ; p<numOfParams ; p++) 
 800a0c2:	3501      	adds	r5, #1
 800a0c4:	b2eb      	uxtb	r3, r5
 800a0c6:	429f      	cmp	r7, r3
 800a0c8:	d908      	bls.n	800a0dc <PxMessagingTask+0x600>
										temp = cMessage[port-1][4+shift+p];
 800a0ca:	5d74      	ldrb	r4, [r6, r5]
										if (temp>0 && temp<=NumOfPorts)	{
 800a0cc:	1e63      	subs	r3, r4, #1
 800a0ce:	2b05      	cmp	r3, #5
 800a0d0:	d8f7      	bhi.n	800a0c2 <PxMessagingTask+0x5e6>
											UpdateBaudrate(temp, temp32); 
 800a0d2:	4641      	mov	r1, r8
 800a0d4:	0020      	movs	r0, r4
 800a0d6:	f004 f857 	bl	800e188 <UpdateBaudrate>
 800a0da:	e7f2      	b.n	800a0c2 <PxMessagingTask+0x5e6>
 800a0dc:	940a      	str	r4, [sp, #40]	; 0x28
 800a0de:	9c05      	ldr	r4, [sp, #20]
 800a0e0:	464f      	mov	r7, r9
 800a0e2:	4656      	mov	r6, sl
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	4698      	mov	r8, r3
 800a0e8:	e52d      	b.n	8009b46 <PxMessagingTask+0x6a>
								SaveToRO();
 800a0ea:	f001 ff5b 	bl	800bfa4 <SaveToRO>
							SaveEEportsDir();
 800a0ee:	f7f9 f977 	bl	80033e0 <SaveEEportsDir>
							indMode = IND_PING;
 800a0f2:	4b53      	ldr	r3, [pc, #332]	; (800a240 <PxMessagingTask+0x764>)
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	701a      	strb	r2, [r3, #0]
							break;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	4698      	mov	r8, r3
 800a0fc:	e523      	b.n	8009b46 <PxMessagingTask+0x6a>
							ClearEEportsDir();
 800a0fe:	f7f9 f991 	bl	8003424 <ClearEEportsDir>
							osDelay(100);
 800a102:	2064      	movs	r0, #100	; 0x64
 800a104:	f004 fcfb 	bl	800eafe <osDelay>
							indMode = IND_TOPOLOGY;
 800a108:	4b4d      	ldr	r3, [pc, #308]	; (800a240 <PxMessagingTask+0x764>)
 800a10a:	2202      	movs	r2, #2
 800a10c:	701a      	strb	r2, [r3, #0]
							break;
 800a10e:	2300      	movs	r3, #0
 800a110:	4698      	mov	r8, r3
 800a112:	e518      	b.n	8009b46 <PxMessagingTask+0x6a>
							pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800a114:	f004 fe16 	bl	800ed44 <FreeRTOS_CLIGetOutputBuffer>
 800a118:	4681      	mov	r9, r0
							if (dst == BOS_BROADCAST)
 800a11a:	4653      	mov	r3, sl
 800a11c:	2bff      	cmp	r3, #255	; 0xff
 800a11e:	d012      	beq.n	800a146 <PxMessagingTask+0x66a>
							else if (dst == BOS_MULTICAST)
 800a120:	2bfe      	cmp	r3, #254	; 0xfe
 800a122:	d01a      	beq.n	800a15a <PxMessagingTask+0x67e>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) numOfParams);
 800a124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a126:	469c      	mov	ip, r3
 800a128:	4465      	add	r5, ip
 800a12a:	493c      	ldr	r1, [pc, #240]	; (800a21c <PxMessagingTask+0x740>)
 800a12c:	1869      	adds	r1, r5, r1
 800a12e:	4642      	mov	r2, r8
 800a130:	4844      	ldr	r0, [pc, #272]	; (800a244 <PxMessagingTask+0x768>)
 800a132:	f00a fa15 	bl	8014560 <memcpy>
								temp = PcPort; PcPort = port;
 800a136:	4d44      	ldr	r5, [pc, #272]	; (800a248 <PxMessagingTask+0x76c>)
								if (BOS.response == BOS_RESPONSE_ALL)
 800a138:	4b44      	ldr	r3, [pc, #272]	; (800a24c <PxMessagingTask+0x770>)
 800a13a:	469a      	mov	sl, r3
 800a13c:	9405      	str	r4, [sp, #20]
 800a13e:	46b8      	mov	r8, r7
 800a140:	464f      	mov	r7, r9
 800a142:	46b1      	mov	r9, r6
 800a144:	e017      	b.n	800a176 <PxMessagingTask+0x69a>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) (numOfParams-1));					// remove bcastID
 800a146:	4642      	mov	r2, r8
 800a148:	3a01      	subs	r2, #1
 800a14a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a14c:	18e9      	adds	r1, r5, r3
 800a14e:	4d33      	ldr	r5, [pc, #204]	; (800a21c <PxMessagingTask+0x740>)
 800a150:	1949      	adds	r1, r1, r5
 800a152:	483c      	ldr	r0, [pc, #240]	; (800a244 <PxMessagingTask+0x768>)
 800a154:	f00a fa04 	bl	8014560 <memcpy>
 800a158:	e7ed      	b.n	800a136 <PxMessagingTask+0x65a>
								memcpy(cCLIString, &cMessage[port-1][shift], (size_t) (numOfParams-temp-2));		// remove bcastID + groupm members + group count
 800a15a:	4643      	mov	r3, r8
 800a15c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a15e:	1a9a      	subs	r2, r3, r2
 800a160:	3a02      	subs	r2, #2
 800a162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a164:	18e9      	adds	r1, r5, r3
 800a166:	4d2d      	ldr	r5, [pc, #180]	; (800a21c <PxMessagingTask+0x740>)
 800a168:	1949      	adds	r1, r1, r5
 800a16a:	4836      	ldr	r0, [pc, #216]	; (800a244 <PxMessagingTask+0x768>)
 800a16c:	f00a f9f8 	bl	8014560 <memcpy>
 800a170:	e7e1      	b.n	800a136 <PxMessagingTask+0x65a>
							while( xReturned != pdFALSE );								
 800a172:	2c00      	cmp	r4, #0
 800a174:	d022      	beq.n	800a1bc <PxMessagingTask+0x6e0>
								temp = PcPort; PcPort = port;
 800a176:	782e      	ldrb	r6, [r5, #0]
 800a178:	9b08      	ldr	r3, [sp, #32]
 800a17a:	702b      	strb	r3, [r5, #0]
								xReturned = FreeRTOS_CLIProcessCommand( cCLIString, pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE );	
 800a17c:	2299      	movs	r2, #153	; 0x99
 800a17e:	0092      	lsls	r2, r2, #2
 800a180:	0039      	movs	r1, r7
 800a182:	4830      	ldr	r0, [pc, #192]	; (800a244 <PxMessagingTask+0x768>)
 800a184:	f004 fd54 	bl	800ec30 <FreeRTOS_CLIProcessCommand>
 800a188:	0004      	movs	r4, r0
								PcPort = temp;
 800a18a:	702e      	strb	r6, [r5, #0]
								if (BOS.response == BOS_RESPONSE_ALL)
 800a18c:	4653      	mov	r3, sl
 800a18e:	799b      	ldrb	r3, [r3, #6]
 800a190:	2b60      	cmp	r3, #96	; 0x60
 800a192:	d1ee      	bne.n	800a172 <PxMessagingTask+0x696>
									memcpy(messageParams, pcOutputString, strlen((char*) pcOutputString));
 800a194:	0038      	movs	r0, r7
 800a196:	f7f5 ffbf 	bl	8000118 <strlen>
 800a19a:	0002      	movs	r2, r0
 800a19c:	0039      	movs	r1, r7
 800a19e:	4822      	ldr	r0, [pc, #136]	; (800a228 <PxMessagingTask+0x74c>)
 800a1a0:	f00a f9de 	bl	8014560 <memcpy>
									SendMessageToModule(src, CODE_CLI_RESPONSE, strlen((char*) pcOutputString));
 800a1a4:	0038      	movs	r0, r7
 800a1a6:	f7f5 ffb7 	bl	8000118 <strlen>
 800a1aa:	b282      	uxth	r2, r0
 800a1ac:	2118      	movs	r1, #24
 800a1ae:	9806      	ldr	r0, [sp, #24]
 800a1b0:	f7ff f9b8 	bl	8009524 <SendMessageToModule>
									osDelay(10); 
 800a1b4:	200a      	movs	r0, #10
 800a1b6:	f004 fca2 	bl	800eafe <osDelay>
 800a1ba:	e7da      	b.n	800a172 <PxMessagingTask+0x696>
 800a1bc:	9c05      	ldr	r4, [sp, #20]
 800a1be:	960a      	str	r6, [sp, #40]	; 0x28
 800a1c0:	4647      	mov	r7, r8
 800a1c2:	464e      	mov	r6, r9
							memset( cCLIString, 0x00, cmdMAX_INPUT_SIZE );
 800a1c4:	2232      	movs	r2, #50	; 0x32
 800a1c6:	2100      	movs	r1, #0
 800a1c8:	481e      	ldr	r0, [pc, #120]	; (800a244 <PxMessagingTask+0x768>)
 800a1ca:	f00a f9d2 	bl	8014572 <memset>
							break;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	4698      	mov	r8, r3
 800a1d2:	e4b8      	b.n	8009b46 <PxMessagingTask+0x6a>
							pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800a1d4:	f004 fdb6 	bl	800ed44 <FreeRTOS_CLIGetOutputBuffer>
 800a1d8:	4681      	mov	r9, r0
							memset( pcOutputString, 0x00, strlen((char*)pcOutputString) );
 800a1da:	f7f5 ff9d 	bl	8000118 <strlen>
 800a1de:	0002      	movs	r2, r0
 800a1e0:	2100      	movs	r1, #0
 800a1e2:	4648      	mov	r0, r9
 800a1e4:	f00a f9c5 	bl	8014572 <memset>
							if (longMessage) {
 800a1e8:	4b10      	ldr	r3, [pc, #64]	; (800a22c <PxMessagingTask+0x750>)
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	469a      	mov	sl, r3
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d02e      	beq.n	800a250 <PxMessagingTask+0x774>
								memcpy(&pcOutputString[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 800a1f2:	4b0f      	ldr	r3, [pc, #60]	; (800a230 <PxMessagingTask+0x754>)
 800a1f4:	469a      	mov	sl, r3
 800a1f6:	8818      	ldrh	r0, [r3, #0]
 800a1f8:	4448      	add	r0, r9
 800a1fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1fc:	469c      	mov	ip, r3
 800a1fe:	4465      	add	r5, ip
 800a200:	4906      	ldr	r1, [pc, #24]	; (800a21c <PxMessagingTask+0x740>)
 800a202:	1869      	adds	r1, r5, r1
 800a204:	4642      	mov	r2, r8
 800a206:	f00a f9ab 	bl	8014560 <memcpy>
								longMessageLastPtr += numOfParams;
 800a20a:	4653      	mov	r3, sl
 800a20c:	881d      	ldrh	r5, [r3, #0]
 800a20e:	4445      	add	r5, r8
 800a210:	801d      	strh	r5, [r3, #0]
 800a212:	2300      	movs	r3, #0
 800a214:	4698      	mov	r8, r3
 800a216:	e496      	b.n	8009b46 <PxMessagingTask+0x6a>
 800a218:	20000df4 	.word	0x20000df4
 800a21c:	20000ba4 	.word	0x20000ba4
 800a220:	20000e78 	.word	0x20000e78
 800a224:	20000070 	.word	0x20000070
 800a228:	20000da4 	.word	0x20000da4
 800a22c:	20000d61 	.word	0x20000d61
 800a230:	20000d62 	.word	0x20000d62
 800a234:	20001300 	.word	0x20001300
 800a238:	2000001c 	.word	0x2000001c
 800a23c:	200000a4 	.word	0x200000a4
 800a240:	20000d60 	.word	0x20000d60
 800a244:	200012cc 	.word	0x200012cc
 800a248:	20000b67 	.word	0x20000b67
 800a24c:	200066e4 	.word	0x200066e4
								memcpy(&pcOutputString[0]+longMessageLastPtr, &cMessage[port-1][shift], (size_t) numOfParams );
 800a250:	4be8      	ldr	r3, [pc, #928]	; (800a5f4 <PxMessagingTask+0xb18>)
 800a252:	8818      	ldrh	r0, [r3, #0]
 800a254:	4448      	add	r0, r9
 800a256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a258:	469c      	mov	ip, r3
 800a25a:	4465      	add	r5, ip
 800a25c:	49e6      	ldr	r1, [pc, #920]	; (800a5f8 <PxMessagingTask+0xb1c>)
 800a25e:	1869      	adds	r1, r5, r1
 800a260:	4642      	mov	r2, r8
 800a262:	f00a f97d 	bl	8014560 <memcpy>
								longMessageLastPtr = 0;
 800a266:	2100      	movs	r1, #0
 800a268:	4be2      	ldr	r3, [pc, #904]	; (800a5f4 <PxMessagingTask+0xb18>)
 800a26a:	8019      	strh	r1, [r3, #0]
								responseStatus = BOS_OK;
 800a26c:	4be3      	ldr	r3, [pc, #908]	; (800a5fc <PxMessagingTask+0xb20>)
 800a26e:	7019      	strb	r1, [r3, #0]
								xTaskNotify( ( xCommandConsoleTaskHandle ), 0, eNoAction );			// Notify the task without modifying its notification value
 800a270:	000b      	movs	r3, r1
 800a272:	000a      	movs	r2, r1
 800a274:	48e2      	ldr	r0, [pc, #904]	; (800a600 <PxMessagingTask+0xb24>)
 800a276:	6800      	ldr	r0, [r0, #0]
 800a278:	f006 f8aa 	bl	80103d0 <xTaskGenericNotify>
 800a27c:	46d0      	mov	r8, sl
 800a27e:	e462      	b.n	8009b46 <PxMessagingTask+0x6a>
								*((unsigned long *)0x20007FF0) = 0xDEADBEEF;   
 800a280:	4be0      	ldr	r3, [pc, #896]	; (800a604 <PxMessagingTask+0xb28>)
 800a282:	4ae1      	ldr	r2, [pc, #900]	; (800a608 <PxMessagingTask+0xb2c>)
 800a284:	601a      	str	r2, [r3, #0]
								indMode = IND_PING;
 800a286:	4be1      	ldr	r3, [pc, #900]	; (800a60c <PxMessagingTask+0xb30>)
 800a288:	2201      	movs	r2, #1
 800a28a:	701a      	strb	r2, [r3, #0]
								osDelay(10);
 800a28c:	200a      	movs	r0, #10
 800a28e:	f004 fc36 	bl	800eafe <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 800a292:	f3bf 8f4f 	dsb	sy
 800a296:	4bde      	ldr	r3, [pc, #888]	; (800a610 <PxMessagingTask+0xb34>)
 800a298:	4ade      	ldr	r2, [pc, #888]	; (800a614 <PxMessagingTask+0xb38>)
 800a29a:	60da      	str	r2, [r3, #12]
 800a29c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a2a0:	46c0      	nop			; (mov r8, r8)
 800a2a2:	e7fd      	b.n	800a2a0 <PxMessagingTask+0x7c4>
								SendMessageFromPort(cMessage[port-1][shift], 0, 0, CODE_UPDATE, 0);
 800a2a4:	4bd4      	ldr	r3, [pc, #848]	; (800a5f8 <PxMessagingTask+0xb1c>)
 800a2a6:	4698      	mov	r8, r3
 800a2a8:	44b0      	add	r8, r6
 800a2aa:	4643      	mov	r3, r8
 800a2ac:	5d58      	ldrb	r0, [r3, r5]
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	9300      	str	r3, [sp, #0]
 800a2b2:	3319      	adds	r3, #25
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	2100      	movs	r1, #0
 800a2b8:	f7fe ff0c 	bl	80090d4 <SendMessageFromPort>
								osDelay(100);
 800a2bc:	2064      	movs	r0, #100	; 0x64
 800a2be:	f004 fc1e 	bl	800eafe <osDelay>
								remoteBootloaderUpdate(src, myID, port, cMessage[port-1][shift]);
 800a2c2:	4643      	mov	r3, r8
 800a2c4:	5d5b      	ldrb	r3, [r3, r5]
 800a2c6:	4ad4      	ldr	r2, [pc, #848]	; (800a618 <PxMessagingTask+0xb3c>)
 800a2c8:	7811      	ldrb	r1, [r2, #0]
 800a2ca:	9a08      	ldr	r2, [sp, #32]
 800a2cc:	9806      	ldr	r0, [sp, #24]
 800a2ce:	f7f9 ff01 	bl	80040d4 <remoteBootloaderUpdate>
								break;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	4698      	mov	r8, r3
 800a2d6:	e436      	b.n	8009b46 <PxMessagingTask+0x6a>
							temp = cMessage[port-1][11+shift];
 800a2d8:	46aa      	mov	sl, r5
 800a2da:	230b      	movs	r3, #11
 800a2dc:	4699      	mov	r9, r3
 800a2de:	44a9      	add	r9, r5
							if (numOfParams == 15)	temp = cMessage[port-1][13+shift];							
 800a2e0:	4643      	mov	r3, r8
 800a2e2:	2b0f      	cmp	r3, #15
 800a2e4:	d011      	beq.n	800a30a <PxMessagingTask+0x82e>
							temp = cMessage[port-1][11+shift];
 800a2e6:	2238      	movs	r2, #56	; 0x38
 800a2e8:	4362      	muls	r2, r4
 800a2ea:	4bc3      	ldr	r3, [pc, #780]	; (800a5f8 <PxMessagingTask+0xb1c>)
 800a2ec:	189b      	adds	r3, r3, r2
 800a2ee:	464a      	mov	r2, r9
 800a2f0:	5c9b      	ldrb	r3, [r3, r2]
 800a2f2:	9305      	str	r3, [sp, #20]
							if (numOfParams == 17)	temp = cMessage[port-1][15+shift];
 800a2f4:	4643      	mov	r3, r8
 800a2f6:	2b11      	cmp	r3, #17
 800a2f8:	d10e      	bne.n	800a318 <PxMessagingTask+0x83c>
 800a2fa:	2238      	movs	r2, #56	; 0x38
 800a2fc:	4362      	muls	r2, r4
 800a2fe:	4bbe      	ldr	r3, [pc, #760]	; (800a5f8 <PxMessagingTask+0xb1c>)
 800a300:	189b      	adds	r3, r3, r2
 800a302:	4453      	add	r3, sl
 800a304:	7bdb      	ldrb	r3, [r3, #15]
 800a306:	9305      	str	r3, [sp, #20]
 800a308:	e006      	b.n	800a318 <PxMessagingTask+0x83c>
							if (numOfParams == 15)	temp = cMessage[port-1][13+shift];							
 800a30a:	2238      	movs	r2, #56	; 0x38
 800a30c:	4362      	muls	r2, r4
 800a30e:	4bba      	ldr	r3, [pc, #744]	; (800a5f8 <PxMessagingTask+0xb1c>)
 800a310:	189b      	adds	r3, r3, r2
 800a312:	195d      	adds	r5, r3, r5
 800a314:	7b6b      	ldrb	r3, [r5, #13]
 800a316:	9305      	str	r3, [sp, #20]
								count = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800a318:	4653      	mov	r3, sl
 800a31a:	1c58      	adds	r0, r3, #1
 800a31c:	900a      	str	r0, [sp, #40]	; 0x28
 800a31e:	1c9d      	adds	r5, r3, #2
 800a320:	950d      	str	r5, [sp, #52]	; 0x34
 800a322:	1cd9      	adds	r1, r3, #3
 800a324:	910e      	str	r1, [sp, #56]	; 0x38
 800a326:	4bb4      	ldr	r3, [pc, #720]	; (800a5f8 <PxMessagingTask+0xb1c>)
 800a328:	199b      	adds	r3, r3, r6
 800a32a:	4652      	mov	r2, sl
 800a32c:	5c9a      	ldrb	r2, [r3, r2]
 800a32e:	0612      	lsls	r2, r2, #24
 800a330:	5c59      	ldrb	r1, [r3, r1]
 800a332:	1852      	adds	r2, r2, r1
 800a334:	5c19      	ldrb	r1, [r3, r0]
 800a336:	0409      	lsls	r1, r1, #16
 800a338:	1852      	adds	r2, r2, r1
 800a33a:	5d59      	ldrb	r1, [r3, r5]
 800a33c:	0209      	lsls	r1, r1, #8
 800a33e:	1852      	adds	r2, r2, r1
 800a340:	920c      	str	r2, [sp, #48]	; 0x30
								timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];									
 800a342:	4652      	mov	r2, sl
 800a344:	3204      	adds	r2, #4
 800a346:	920f      	str	r2, [sp, #60]	; 0x3c
 800a348:	2105      	movs	r1, #5
 800a34a:	4451      	add	r1, sl
 800a34c:	468c      	mov	ip, r1
 800a34e:	4651      	mov	r1, sl
 800a350:	3106      	adds	r1, #6
 800a352:	4650      	mov	r0, sl
 800a354:	3007      	adds	r0, #7
 800a356:	5c9d      	ldrb	r5, [r3, r2]
 800a358:	062d      	lsls	r5, r5, #24
 800a35a:	4662      	mov	r2, ip
 800a35c:	5c9a      	ldrb	r2, [r3, r2]
 800a35e:	0412      	lsls	r2, r2, #16
 800a360:	18aa      	adds	r2, r5, r2
 800a362:	5c1d      	ldrb	r5, [r3, r0]
 800a364:	1952      	adds	r2, r2, r5
 800a366:	5c5d      	ldrb	r5, [r3, r1]
 800a368:	022d      	lsls	r5, r5, #8
 800a36a:	1955      	adds	r5, r2, r5
							if (temp == false)
 800a36c:	9b05      	ldr	r3, [sp, #20]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d159      	bne.n	800a426 <PxMessagingTask+0x94a>
								if (cMessage[port-1][9+shift] && cMessage[port-1][10+shift])
 800a372:	4ba1      	ldr	r3, [pc, #644]	; (800a5f8 <PxMessagingTask+0xb1c>)
 800a374:	199b      	adds	r3, r3, r6
 800a376:	4453      	add	r3, sl
 800a378:	7a5b      	ldrb	r3, [r3, #9]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d007      	beq.n	800a38e <PxMessagingTask+0x8b2>
 800a37e:	2138      	movs	r1, #56	; 0x38
 800a380:	4361      	muls	r1, r4
 800a382:	4a9d      	ldr	r2, [pc, #628]	; (800a5f8 <PxMessagingTask+0xb1c>)
 800a384:	1852      	adds	r2, r2, r1
 800a386:	4452      	add	r2, sl
 800a388:	7a92      	ldrb	r2, [r2, #10]
 800a38a:	2a00      	cmp	r2, #0
 800a38c:	d123      	bne.n	800a3d6 <PxMessagingTask+0x8fa>
								if (cMessage[port-1][11+shift] && cMessage[port-1][12+shift])
 800a38e:	4b9a      	ldr	r3, [pc, #616]	; (800a5f8 <PxMessagingTask+0xb1c>)
 800a390:	199b      	adds	r3, r3, r6
 800a392:	464a      	mov	r2, r9
 800a394:	5c9b      	ldrb	r3, [r3, r2]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d007      	beq.n	800a3aa <PxMessagingTask+0x8ce>
 800a39a:	2138      	movs	r1, #56	; 0x38
 800a39c:	4361      	muls	r1, r4
 800a39e:	4a96      	ldr	r2, [pc, #600]	; (800a5f8 <PxMessagingTask+0xb1c>)
 800a3a0:	1852      	adds	r2, r2, r1
 800a3a2:	4452      	add	r2, sl
 800a3a4:	7b12      	ldrb	r2, [r2, #12]
 800a3a6:	2a00      	cmp	r2, #0
 800a3a8:	d120      	bne.n	800a3ec <PxMessagingTask+0x910>
								if (cMessage[port-1][13+shift] && cMessage[port-1][14+shift])
 800a3aa:	4b93      	ldr	r3, [pc, #588]	; (800a5f8 <PxMessagingTask+0xb1c>)
 800a3ac:	199b      	adds	r3, r3, r6
 800a3ae:	4453      	add	r3, sl
 800a3b0:	7b5b      	ldrb	r3, [r3, #13]
 800a3b2:	930a      	str	r3, [sp, #40]	; 0x28
 800a3b4:	4698      	mov	r8, r3
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d101      	bne.n	800a3be <PxMessagingTask+0x8e2>
 800a3ba:	f7ff fbc4 	bl	8009b46 <PxMessagingTask+0x6a>
 800a3be:	2238      	movs	r2, #56	; 0x38
 800a3c0:	4362      	muls	r2, r4
 800a3c2:	4b8d      	ldr	r3, [pc, #564]	; (800a5f8 <PxMessagingTask+0xb1c>)
 800a3c4:	189b      	adds	r3, r3, r2
 800a3c6:	4453      	add	r3, sl
 800a3c8:	7b9b      	ldrb	r3, [r3, #14]
 800a3ca:	4698      	mov	r8, r3
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d118      	bne.n	800a402 <PxMessagingTask+0x926>
 800a3d0:	930a      	str	r3, [sp, #40]	; 0x28
 800a3d2:	f7ff fbb8 	bl	8009b46 <PxMessagingTask+0x6a>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][9+shift], cMessage[port-1][10+shift]);
 800a3d6:	0008      	movs	r0, r1
 800a3d8:	4987      	ldr	r1, [pc, #540]	; (800a5f8 <PxMessagingTask+0xb1c>)
 800a3da:	1809      	adds	r1, r1, r0
 800a3dc:	4451      	add	r1, sl
 800a3de:	7a08      	ldrb	r0, [r1, #8]
 800a3e0:	9200      	str	r2, [sp, #0]
 800a3e2:	002a      	movs	r2, r5
 800a3e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a3e6:	f7fe fd57 	bl	8008e98 <SetupDMAStreams>
 800a3ea:	e7d0      	b.n	800a38e <PxMessagingTask+0x8b2>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][11+shift], cMessage[port-1][12+shift]);
 800a3ec:	0008      	movs	r0, r1
 800a3ee:	4982      	ldr	r1, [pc, #520]	; (800a5f8 <PxMessagingTask+0xb1c>)
 800a3f0:	1809      	adds	r1, r1, r0
 800a3f2:	4451      	add	r1, sl
 800a3f4:	7a08      	ldrb	r0, [r1, #8]
 800a3f6:	9200      	str	r2, [sp, #0]
 800a3f8:	002a      	movs	r2, r5
 800a3fa:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a3fc:	f7fe fd4c 	bl	8008e98 <SetupDMAStreams>
 800a400:	e7d3      	b.n	800a3aa <PxMessagingTask+0x8ce>
									SetupDMAStreams(cMessage[port-1][8+shift], count, timeout, cMessage[port-1][13+shift], cMessage[port-1][14+shift]);
 800a402:	2238      	movs	r2, #56	; 0x38
 800a404:	4362      	muls	r2, r4
 800a406:	4b7c      	ldr	r3, [pc, #496]	; (800a5f8 <PxMessagingTask+0xb1c>)
 800a408:	189b      	adds	r3, r3, r2
 800a40a:	4453      	add	r3, sl
 800a40c:	7a18      	ldrb	r0, [r3, #8]
 800a40e:	4643      	mov	r3, r8
 800a410:	9300      	str	r3, [sp, #0]
 800a412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a414:	002a      	movs	r2, r5
 800a416:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a418:	f7fe fd3e 	bl	8008e98 <SetupDMAStreams>
 800a41c:	9b05      	ldr	r3, [sp, #20]
 800a41e:	930a      	str	r3, [sp, #40]	; 0x28
 800a420:	4698      	mov	r8, r3
 800a422:	f7ff fb90 	bl	8009b46 <PxMessagingTask+0x6a>
 800a426:	4652      	mov	r2, sl
 800a428:	4663      	mov	r3, ip
 800a42a:	9305      	str	r3, [sp, #20]
 800a42c:	468a      	mov	sl, r1
 800a42e:	4645      	mov	r5, r8
 800a430:	46c8      	mov	r8, r9
 800a432:	4681      	mov	r9, r0
								EE_WriteVariable(_EE_DMA_STREAM_BASE, cMessage[port-1][8+shift]);			/* Direction */
 800a434:	2338      	movs	r3, #56	; 0x38
 800a436:	4363      	muls	r3, r4
 800a438:	4e6f      	ldr	r6, [pc, #444]	; (800a5f8 <PxMessagingTask+0xb1c>)
 800a43a:	18f6      	adds	r6, r6, r3
 800a43c:	9204      	str	r2, [sp, #16]
 800a43e:	18b7      	adds	r7, r6, r2
 800a440:	7a39      	ldrb	r1, [r7, #8]
 800a442:	20e4      	movs	r0, #228	; 0xe4
 800a444:	f7fd fb42 	bl	8007acc <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+1, ( (uint16_t) cMessage[port-1][shift] << 8 ) + cMessage[port-1][1+shift]);			/* Count high half-word */
 800a448:	9a04      	ldr	r2, [sp, #16]
 800a44a:	5cb3      	ldrb	r3, [r6, r2]
 800a44c:	021b      	lsls	r3, r3, #8
 800a44e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a450:	5c31      	ldrb	r1, [r6, r0]
 800a452:	18c9      	adds	r1, r1, r3
 800a454:	b289      	uxth	r1, r1
 800a456:	20e5      	movs	r0, #229	; 0xe5
 800a458:	f7fd fb38 	bl	8007acc <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+2, ( (uint16_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift]);			/* Count low half-word */
 800a45c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a45e:	5c33      	ldrb	r3, [r6, r0]
 800a460:	021b      	lsls	r3, r3, #8
 800a462:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a464:	5c31      	ldrb	r1, [r6, r0]
 800a466:	18c9      	adds	r1, r1, r3
 800a468:	b289      	uxth	r1, r1
 800a46a:	20e6      	movs	r0, #230	; 0xe6
 800a46c:	f7fd fb2e 	bl	8007acc <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+3, ( (uint16_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift]);			/* Timeout high half-word */
 800a470:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800a472:	5c33      	ldrb	r3, [r6, r0]
 800a474:	021b      	lsls	r3, r3, #8
 800a476:	9a05      	ldr	r2, [sp, #20]
 800a478:	5cb1      	ldrb	r1, [r6, r2]
 800a47a:	18c9      	adds	r1, r1, r3
 800a47c:	b289      	uxth	r1, r1
 800a47e:	20e7      	movs	r0, #231	; 0xe7
 800a480:	f7fd fb24 	bl	8007acc <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+4, ( (uint16_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift]);			/* Timeout low half-word */
 800a484:	4653      	mov	r3, sl
 800a486:	5cf3      	ldrb	r3, [r6, r3]
 800a488:	021b      	lsls	r3, r3, #8
 800a48a:	464a      	mov	r2, r9
 800a48c:	5cb1      	ldrb	r1, [r6, r2]
 800a48e:	18c9      	adds	r1, r1, r3
 800a490:	b289      	uxth	r1, r1
 800a492:	20e8      	movs	r0, #232	; 0xe8
 800a494:	f7fd fb1a 	bl	8007acc <EE_WriteVariable>
								EE_WriteVariable(_EE_DMA_STREAM_BASE+5, ( (uint16_t) cMessage[port-1][9+shift] << 8 ) + cMessage[port-1][10+shift]);			/* src1 | dst1 */
 800a498:	7a7b      	ldrb	r3, [r7, #9]
 800a49a:	021b      	lsls	r3, r3, #8
 800a49c:	7ab9      	ldrb	r1, [r7, #10]
 800a49e:	18c9      	adds	r1, r1, r3
 800a4a0:	b289      	uxth	r1, r1
 800a4a2:	20e9      	movs	r0, #233	; 0xe9
 800a4a4:	f7fd fb12 	bl	8007acc <EE_WriteVariable>
								if (numOfParams == 19)
 800a4a8:	2d13      	cmp	r5, #19
 800a4aa:	d00a      	beq.n	800a4c2 <PxMessagingTask+0x9e6>
								if (numOfParams == 21)
 800a4ac:	2d15      	cmp	r5, #21
 800a4ae:	d019      	beq.n	800a4e4 <PxMessagingTask+0xa08>
  __ASM volatile ("dsb 0xF":::"memory");
 800a4b0:	f3bf 8f4f 	dsb	sy
 800a4b4:	4b56      	ldr	r3, [pc, #344]	; (800a610 <PxMessagingTask+0xb34>)
 800a4b6:	4a57      	ldr	r2, [pc, #348]	; (800a614 <PxMessagingTask+0xb38>)
 800a4b8:	60da      	str	r2, [r3, #12]
 800a4ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 800a4be:	46c0      	nop			; (mov r8, r8)
 800a4c0:	e7fd      	b.n	800a4be <PxMessagingTask+0x9e2>
									EE_WriteVariable(_EE_DMA_STREAM_BASE+6, ( (uint16_t) cMessage[port-1][11+shift] << 8 ) + cMessage[port-1][12+shift]);			/* src2 | dst2 */
 800a4c2:	2338      	movs	r3, #56	; 0x38
 800a4c4:	4363      	muls	r3, r4
 800a4c6:	4c4c      	ldr	r4, [pc, #304]	; (800a5f8 <PxMessagingTask+0xb1c>)
 800a4c8:	18e4      	adds	r4, r4, r3
 800a4ca:	4643      	mov	r3, r8
 800a4cc:	5ce3      	ldrb	r3, [r4, r3]
 800a4ce:	021b      	lsls	r3, r3, #8
 800a4d0:	9a04      	ldr	r2, [sp, #16]
 800a4d2:	4694      	mov	ip, r2
 800a4d4:	4464      	add	r4, ip
 800a4d6:	7b21      	ldrb	r1, [r4, #12]
 800a4d8:	18c9      	adds	r1, r1, r3
 800a4da:	b289      	uxth	r1, r1
 800a4dc:	20ea      	movs	r0, #234	; 0xea
 800a4de:	f7fd faf5 	bl	8007acc <EE_WriteVariable>
								if (numOfParams == 21)
 800a4e2:	e7e5      	b.n	800a4b0 <PxMessagingTask+0x9d4>
									EE_WriteVariable(_EE_DMA_STREAM_BASE+7, ( (uint16_t) cMessage[port-1][13+shift] << 8 ) + cMessage[port-1][14+shift]);			/* src3 | dst3 */
 800a4e4:	2338      	movs	r3, #56	; 0x38
 800a4e6:	435c      	muls	r4, r3
 800a4e8:	4b43      	ldr	r3, [pc, #268]	; (800a5f8 <PxMessagingTask+0xb1c>)
 800a4ea:	191b      	adds	r3, r3, r4
 800a4ec:	9a04      	ldr	r2, [sp, #16]
 800a4ee:	4694      	mov	ip, r2
 800a4f0:	4463      	add	r3, ip
 800a4f2:	7b5a      	ldrb	r2, [r3, #13]
 800a4f4:	0212      	lsls	r2, r2, #8
 800a4f6:	7b99      	ldrb	r1, [r3, #14]
 800a4f8:	1889      	adds	r1, r1, r2
 800a4fa:	b289      	uxth	r1, r1
 800a4fc:	20eb      	movs	r0, #235	; 0xeb
 800a4fe:	f7fd fae5 	bl	8007acc <EE_WriteVariable>
 800a502:	e7d5      	b.n	800a4b0 <PxMessagingTask+0x9d4>
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 800a504:	493c      	ldr	r1, [pc, #240]	; (800a5f8 <PxMessagingTask+0xb1c>)
 800a506:	1989      	adds	r1, r1, r6
 800a508:	194b      	adds	r3, r1, r5
 800a50a:	7a9a      	ldrb	r2, [r3, #10]
 800a50c:	4691      	mov	r9, r2
 800a50e:	7ada      	ldrb	r2, [r3, #11]
 800a510:	4690      	mov	r8, r2
 800a512:	4a41      	ldr	r2, [pc, #260]	; (800a618 <PxMessagingTask+0xb3c>)
 800a514:	7812      	ldrb	r2, [r2, #0]
 800a516:	4694      	mov	ip, r2
 800a518:	7a5a      	ldrb	r2, [r3, #9]
 800a51a:	9205      	str	r2, [sp, #20]
 800a51c:	7b1a      	ldrb	r2, [r3, #12]
 800a51e:	1e50      	subs	r0, r2, #1
 800a520:	4182      	sbcs	r2, r0
 800a522:	9203      	str	r2, [sp, #12]
							timeout = ( (uint32_t) cMessage[port-1][4+shift] << 24 ) + ( (uint32_t) cMessage[port-1][5+shift] << 16 ) + ( (uint32_t) cMessage[port-1][6+shift] << 8 ) + cMessage[port-1][7+shift];
 800a524:	791a      	ldrb	r2, [r3, #4]
 800a526:	0612      	lsls	r2, r2, #24
 800a528:	4692      	mov	sl, r2
 800a52a:	795a      	ldrb	r2, [r3, #5]
 800a52c:	0412      	lsls	r2, r2, #16
 800a52e:	4452      	add	r2, sl
 800a530:	79d8      	ldrb	r0, [r3, #7]
 800a532:	4682      	mov	sl, r0
 800a534:	4452      	add	r2, sl
 800a536:	7998      	ldrb	r0, [r3, #6]
 800a538:	0200      	lsls	r0, r0, #8
 800a53a:	4682      	mov	sl, r0
 800a53c:	4452      	add	r2, sl
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 800a53e:	9202      	str	r2, [sp, #8]
							count = ( (uint32_t) cMessage[port-1][shift] << 24 ) + ( (uint32_t) cMessage[port-1][1+shift] << 16 ) + ( (uint32_t) cMessage[port-1][2+shift] << 8 ) + cMessage[port-1][3+shift];
 800a540:	5d4a      	ldrb	r2, [r1, r5]
 800a542:	0612      	lsls	r2, r2, #24
 800a544:	78d9      	ldrb	r1, [r3, #3]
 800a546:	1852      	adds	r2, r2, r1
 800a548:	7859      	ldrb	r1, [r3, #1]
 800a54a:	0409      	lsls	r1, r1, #16
 800a54c:	1852      	adds	r2, r2, r1
 800a54e:	7899      	ldrb	r1, [r3, #2]
 800a550:	0209      	lsls	r1, r1, #8
 800a552:	1852      	adds	r2, r2, r1
							StartScastDMAStream(cMessage[port-1][9+shift], myID, cMessage[port-1][11+shift], cMessage[port-1][10+shift], cMessage[port-1][8+shift], count, timeout, cMessage[port-1][12+shift]);
 800a554:	9201      	str	r2, [sp, #4]
 800a556:	7a1b      	ldrb	r3, [r3, #8]
 800a558:	9300      	str	r3, [sp, #0]
 800a55a:	464b      	mov	r3, r9
 800a55c:	4642      	mov	r2, r8
 800a55e:	4661      	mov	r1, ip
 800a560:	9805      	ldr	r0, [sp, #20]
 800a562:	f7ff f805 	bl	8009570 <StartScastDMAStream>
							break;								
 800a566:	2300      	movs	r3, #0
 800a568:	4698      	mov	r8, r3
 800a56a:	f7ff faec 	bl	8009b46 <PxMessagingTask+0x6a>
							 if	(cMessage[port-1][shift]==REMOTE_MEMORY_ADD)											// request for a memory address
 800a56e:	4b22      	ldr	r3, [pc, #136]	; (800a5f8 <PxMessagingTask+0xb1c>)
 800a570:	199b      	adds	r3, r3, r6
 800a572:	5d5b      	ldrb	r3, [r3, r5]
 800a574:	4698      	mov	r8, r3
 800a576:	2b00      	cmp	r3, #0
 800a578:	d000      	beq.n	800a57c <PxMessagingTask+0xaa0>
 800a57a:	e097      	b.n	800a6ac <PxMessagingTask+0xbd0>
									temp32 = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];				
 800a57c:	2238      	movs	r2, #56	; 0x38
 800a57e:	4362      	muls	r2, r4
 800a580:	4b1d      	ldr	r3, [pc, #116]	; (800a5f8 <PxMessagingTask+0xb1c>)
 800a582:	189b      	adds	r3, r3, r2
 800a584:	195d      	adds	r5, r3, r5
 800a586:	78ab      	ldrb	r3, [r5, #2]
 800a588:	061b      	lsls	r3, r3, #24
 800a58a:	78ea      	ldrb	r2, [r5, #3]
 800a58c:	0412      	lsls	r2, r2, #16
 800a58e:	189b      	adds	r3, r3, r2
 800a590:	796a      	ldrb	r2, [r5, #5]
 800a592:	189b      	adds	r3, r3, r2
 800a594:	792a      	ldrb	r2, [r5, #4]
 800a596:	0212      	lsls	r2, r2, #8
 800a598:	189b      	adds	r3, r3, r2
									switch (cMessage[port-1][1+shift])											// requested format
 800a59a:	786a      	ldrb	r2, [r5, #1]
 800a59c:	3a01      	subs	r2, #1
 800a59e:	b2d1      	uxtb	r1, r2
 800a5a0:	2907      	cmp	r1, #7
 800a5a2:	d901      	bls.n	800a5a8 <PxMessagingTask+0xacc>
 800a5a4:	f7ff faca 	bl	8009b3c <PxMessagingTask+0x60>
 800a5a8:	b2d2      	uxtb	r2, r2
 800a5aa:	0092      	lsls	r2, r2, #2
 800a5ac:	491b      	ldr	r1, [pc, #108]	; (800a61c <PxMessagingTask+0xb40>)
 800a5ae:	588a      	ldr	r2, [r1, r2]
 800a5b0:	4697      	mov	pc, r2
											messageParams[0] = *(__IO uint8_t *)temp32; 
 800a5b2:	781a      	ldrb	r2, [r3, #0]
 800a5b4:	4b1a      	ldr	r3, [pc, #104]	; (800a620 <PxMessagingTask+0xb44>)
 800a5b6:	701a      	strb	r2, [r3, #0]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1); break;
 800a5b8:	2201      	movs	r2, #1
 800a5ba:	211f      	movs	r1, #31
 800a5bc:	9806      	ldr	r0, [sp, #24]
 800a5be:	f7fe ffb1 	bl	8009524 <SendMessageToModule>
 800a5c2:	f7ff fac0 	bl	8009b46 <PxMessagingTask+0x6a>
											messageParams[0] = *(__IO int8_t *)temp32; 
 800a5c6:	781a      	ldrb	r2, [r3, #0]
 800a5c8:	4b15      	ldr	r3, [pc, #84]	; (800a620 <PxMessagingTask+0xb44>)
 800a5ca:	701a      	strb	r2, [r3, #0]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1); break;
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	211f      	movs	r1, #31
 800a5d0:	9806      	ldr	r0, [sp, #24]
 800a5d2:	f7fe ffa7 	bl	8009524 <SendMessageToModule>
 800a5d6:	f7ff fab6 	bl	8009b46 <PxMessagingTask+0x6a>
											messageParams[0] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>8);  
 800a5da:	8819      	ldrh	r1, [r3, #0]
 800a5dc:	4a10      	ldr	r2, [pc, #64]	; (800a620 <PxMessagingTask+0xb44>)
 800a5de:	7011      	strb	r1, [r2, #0]
 800a5e0:	881b      	ldrh	r3, [r3, #0]
 800a5e2:	0a1b      	lsrs	r3, r3, #8
 800a5e4:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a5e6:	2202      	movs	r2, #2
 800a5e8:	211f      	movs	r1, #31
 800a5ea:	9806      	ldr	r0, [sp, #24]
 800a5ec:	f7fe ff9a 	bl	8009524 <SendMessageToModule>
 800a5f0:	f7ff faa9 	bl	8009b46 <PxMessagingTask+0x6a>
 800a5f4:	20000d62 	.word	0x20000d62
 800a5f8:	20000ba4 	.word	0x20000ba4
 800a5fc:	20000e78 	.word	0x20000e78
 800a600:	2000123c 	.word	0x2000123c
 800a604:	20007ff0 	.word	0x20007ff0
 800a608:	deadbeef 	.word	0xdeadbeef
 800a60c:	20000d60 	.word	0x20000d60
 800a610:	e000ed00 	.word	0xe000ed00
 800a614:	05fa0004 	.word	0x05fa0004
 800a618:	20000070 	.word	0x20000070
 800a61c:	0801cff4 	.word	0x0801cff4
 800a620:	20000da4 	.word	0x20000da4
											messageParams[0] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 800a624:	8819      	ldrh	r1, [r3, #0]
 800a626:	4aeb      	ldr	r2, [pc, #940]	; (800a9d4 <PxMessagingTask+0xef8>)
 800a628:	7011      	strb	r1, [r2, #0]
 800a62a:	881b      	ldrh	r3, [r3, #0]
 800a62c:	b21b      	sxth	r3, r3
 800a62e:	121b      	asrs	r3, r3, #8
 800a630:	7053      	strb	r3, [r2, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a632:	2202      	movs	r2, #2
 800a634:	211f      	movs	r1, #31
 800a636:	9806      	ldr	r0, [sp, #24]
 800a638:	f7fe ff74 	bl	8009524 <SendMessageToModule>
 800a63c:	f7ff fa83 	bl	8009b46 <PxMessagingTask+0x6a>
											messageParams[0] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 800a640:	6819      	ldr	r1, [r3, #0]
 800a642:	4ae4      	ldr	r2, [pc, #912]	; (800a9d4 <PxMessagingTask+0xef8>)
 800a644:	7011      	strb	r1, [r2, #0]
 800a646:	6819      	ldr	r1, [r3, #0]
 800a648:	0a09      	lsrs	r1, r1, #8
 800a64a:	7051      	strb	r1, [r2, #1]
											messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 800a64c:	6819      	ldr	r1, [r3, #0]
 800a64e:	0c09      	lsrs	r1, r1, #16
 800a650:	7091      	strb	r1, [r2, #2]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	0e1b      	lsrs	r3, r3, #24
 800a656:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 4); break;
 800a658:	2204      	movs	r2, #4
 800a65a:	211f      	movs	r1, #31
 800a65c:	9806      	ldr	r0, [sp, #24]
 800a65e:	f7fe ff61 	bl	8009524 <SendMessageToModule>
 800a662:	f7ff fa70 	bl	8009b46 <PxMessagingTask+0x6a>
											messageParams[0] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 800a666:	6819      	ldr	r1, [r3, #0]
 800a668:	4ada      	ldr	r2, [pc, #872]	; (800a9d4 <PxMessagingTask+0xef8>)
 800a66a:	7011      	strb	r1, [r2, #0]
 800a66c:	6819      	ldr	r1, [r3, #0]
 800a66e:	1209      	asrs	r1, r1, #8
 800a670:	7051      	strb	r1, [r2, #1]
											messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 800a672:	6819      	ldr	r1, [r3, #0]
 800a674:	1409      	asrs	r1, r1, #16
 800a676:	7091      	strb	r1, [r2, #2]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	161b      	asrs	r3, r3, #24
 800a67c:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 4); break;										
 800a67e:	2204      	movs	r2, #4
 800a680:	211f      	movs	r1, #31
 800a682:	9806      	ldr	r0, [sp, #24]
 800a684:	f7fe ff4e 	bl	8009524 <SendMessageToModule>
 800a688:	f7ff fa5d 	bl	8009b46 <PxMessagingTask+0x6a>
											messageParams[0] = *(__IO uint8_t *)(temp32+0); messageParams[1] = *(__IO uint8_t *)(temp32+1); 
 800a68c:	7819      	ldrb	r1, [r3, #0]
 800a68e:	4ad1      	ldr	r2, [pc, #836]	; (800a9d4 <PxMessagingTask+0xef8>)
 800a690:	7011      	strb	r1, [r2, #0]
 800a692:	7859      	ldrb	r1, [r3, #1]
 800a694:	7051      	strb	r1, [r2, #1]
											messageParams[2] = *(__IO uint8_t *)(temp32+2); messageParams[3] = *(__IO uint8_t *)(temp32+3); 
 800a696:	7899      	ldrb	r1, [r3, #2]
 800a698:	7091      	strb	r1, [r2, #2]
 800a69a:	78db      	ldrb	r3, [r3, #3]
 800a69c:	70d3      	strb	r3, [r2, #3]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 8); break;	// You cannot bitwise floats	
 800a69e:	2208      	movs	r2, #8
 800a6a0:	211f      	movs	r1, #31
 800a6a2:	9806      	ldr	r0, [sp, #24]
 800a6a4:	f7fe ff3e 	bl	8009524 <SendMessageToModule>
 800a6a8:	f7ff fa4d 	bl	8009b46 <PxMessagingTask+0x6a>
								else if(cMessage[port-1][shift]==REMOTE_MODULE_PARAM)			// request for a Module param
 800a6ac:	2b02      	cmp	r3, #2
 800a6ae:	d01d      	beq.n	800a6ec <PxMessagingTask+0xc10>
								else if(cMessage[port-1][shift]>=REMOTE_BOS_VAR)			// request for a BOS var
 800a6b0:	d801      	bhi.n	800a6b6 <PxMessagingTask+0xbda>
 800a6b2:	f000 fca7 	bl	800b004 <PxMessagingTask+0x1528>
									messageParams[0] = BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]&0x000F;					// send variable format (lower 4 bits)
 800a6b6:	001d      	movs	r5, r3
 800a6b8:	3d04      	subs	r5, #4
 800a6ba:	00ad      	lsls	r5, r5, #2
 800a6bc:	4bc6      	ldr	r3, [pc, #792]	; (800a9d8 <PxMessagingTask+0xefc>)
 800a6be:	58ea      	ldr	r2, [r5, r3]
 800a6c0:	250f      	movs	r5, #15
 800a6c2:	4015      	ands	r5, r2
 800a6c4:	46a8      	mov	r8, r5
 800a6c6:	4bc3      	ldr	r3, [pc, #780]	; (800a9d4 <PxMessagingTask+0xef8>)
 800a6c8:	701d      	strb	r5, [r3, #0]
									if (messageParams[0] == 0) {																					// Variable does not exist
 800a6ca:	d100      	bne.n	800a6ce <PxMessagingTask+0xbf2>
 800a6cc:	e0af      	b.n	800a82e <PxMessagingTask+0xd52>
										temp32 = (BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]>>16) + SRAM_BASE;
 800a6ce:	0c12      	lsrs	r2, r2, #16
 800a6d0:	2380      	movs	r3, #128	; 0x80
 800a6d2:	059b      	lsls	r3, r3, #22
 800a6d4:	18d3      	adds	r3, r2, r3
										switch (messageParams[0])											// requested format
 800a6d6:	3d01      	subs	r5, #1
 800a6d8:	b2e9      	uxtb	r1, r5
 800a6da:	2907      	cmp	r1, #7
 800a6dc:	d901      	bls.n	800a6e2 <PxMessagingTask+0xc06>
 800a6de:	f000 fc80 	bl	800afe2 <PxMessagingTask+0x1506>
 800a6e2:	b2ed      	uxtb	r5, r5
 800a6e4:	00ad      	lsls	r5, r5, #2
 800a6e6:	49bd      	ldr	r1, [pc, #756]	; (800a9dc <PxMessagingTask+0xf00>)
 800a6e8:	5949      	ldr	r1, [r1, r5]
 800a6ea:	468f      	mov	pc, r1
									cMessage[port-1][messageLength[port-1]-1] = 0;		 // adding string termination
 800a6ec:	4bbc      	ldr	r3, [pc, #752]	; (800a9e0 <PxMessagingTask+0xf04>)
 800a6ee:	2038      	movs	r0, #56	; 0x38
 800a6f0:	4360      	muls	r0, r4
 800a6f2:	1818      	adds	r0, r3, r0
 800a6f4:	1841      	adds	r1, r0, r1
 800a6f6:	3901      	subs	r1, #1
 800a6f8:	2000      	movs	r0, #0
 800a6fa:	7008      	strb	r0, [r1, #0]
									temp=IsModuleParameter((char *)&cMessage[port-1][1+shift]);          // extrating module parameter
 800a6fc:	1c68      	adds	r0, r5, #1
 800a6fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a700:	4694      	mov	ip, r2
 800a702:	4460      	add	r0, ip
 800a704:	18c0      	adds	r0, r0, r3
 800a706:	f7f9 fa7f 	bl	8003c08 <IsModuleParameter>
 800a70a:	1e05      	subs	r5, r0, #0
 800a70c:	900a      	str	r0, [sp, #40]	; 0x28
									if (temp == 0) {																					// Parameter does not exist
 800a70e:	d013      	beq.n	800a738 <PxMessagingTask+0xc5c>
										temp32 = (uint32_t) modParam[temp-1].paramPtr;
 800a710:	3d01      	subs	r5, #1
 800a712:	4ab4      	ldr	r2, [pc, #720]	; (800a9e4 <PxMessagingTask+0xf08>)
 800a714:	230c      	movs	r3, #12
 800a716:	435d      	muls	r5, r3
 800a718:	58ab      	ldr	r3, [r5, r2]
										messageParams[0] = modParam[temp-1].paramFormat;
 800a71a:	1952      	adds	r2, r2, r5
 800a71c:	7912      	ldrb	r2, [r2, #4]
 800a71e:	49ad      	ldr	r1, [pc, #692]	; (800a9d4 <PxMessagingTask+0xef8>)
 800a720:	700a      	strb	r2, [r1, #0]
									switch (messageParams[0])											// requested format
 800a722:	3a01      	subs	r2, #1
 800a724:	b2d1      	uxtb	r1, r2
 800a726:	2907      	cmp	r1, #7
 800a728:	d901      	bls.n	800a72e <PxMessagingTask+0xc52>
 800a72a:	f000 fc56 	bl	800afda <PxMessagingTask+0x14fe>
 800a72e:	b2d2      	uxtb	r2, r2
 800a730:	0092      	lsls	r2, r2, #2
 800a732:	49ad      	ldr	r1, [pc, #692]	; (800a9e8 <PxMessagingTask+0xf0c>)
 800a734:	588a      	ldr	r2, [r1, r2]
 800a736:	4697      	mov	pc, r2
									SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1);							
 800a738:	2201      	movs	r2, #1
 800a73a:	211f      	movs	r1, #31
 800a73c:	9806      	ldr	r0, [sp, #24]
 800a73e:	f7fe fef1 	bl	8009524 <SendMessageToModule>
 800a742:	46a8      	mov	r8, r5
 800a744:	f7ff f9ff 	bl	8009b46 <PxMessagingTask+0x6a>
											messageParams[1] = *(__IO uint8_t *)temp32; 
 800a748:	781a      	ldrb	r2, [r3, #0]
 800a74a:	4ba2      	ldr	r3, [pc, #648]	; (800a9d4 <PxMessagingTask+0xef8>)
 800a74c:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a74e:	2202      	movs	r2, #2
 800a750:	211f      	movs	r1, #31
 800a752:	9806      	ldr	r0, [sp, #24]
 800a754:	f7fe fee6 	bl	8009524 <SendMessageToModule>
 800a758:	2300      	movs	r3, #0
 800a75a:	4698      	mov	r8, r3
 800a75c:	f7ff f9f3 	bl	8009b46 <PxMessagingTask+0x6a>
											messageParams[1] = *(__IO int8_t *)temp32; 
 800a760:	781a      	ldrb	r2, [r3, #0]
 800a762:	4b9c      	ldr	r3, [pc, #624]	; (800a9d4 <PxMessagingTask+0xef8>)
 800a764:	705a      	strb	r2, [r3, #1]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a766:	2202      	movs	r2, #2
 800a768:	211f      	movs	r1, #31
 800a76a:	9806      	ldr	r0, [sp, #24]
 800a76c:	f7fe feda 	bl	8009524 <SendMessageToModule>
 800a770:	2300      	movs	r3, #0
 800a772:	4698      	mov	r8, r3
 800a774:	f7ff f9e7 	bl	8009b46 <PxMessagingTask+0x6a>
											messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint16_t *)temp32)>>8); 
 800a778:	8819      	ldrh	r1, [r3, #0]
 800a77a:	4a96      	ldr	r2, [pc, #600]	; (800a9d4 <PxMessagingTask+0xef8>)
 800a77c:	7051      	strb	r1, [r2, #1]
 800a77e:	881b      	ldrh	r3, [r3, #0]
 800a780:	0a1b      	lsrs	r3, r3, #8
 800a782:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800a784:	2203      	movs	r2, #3
 800a786:	211f      	movs	r1, #31
 800a788:	9806      	ldr	r0, [sp, #24]
 800a78a:	f7fe fecb 	bl	8009524 <SendMessageToModule>
 800a78e:	2300      	movs	r3, #0
 800a790:	4698      	mov	r8, r3
 800a792:	f7ff f9d8 	bl	8009b46 <PxMessagingTask+0x6a>
											messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 800a796:	8819      	ldrh	r1, [r3, #0]
 800a798:	4a8e      	ldr	r2, [pc, #568]	; (800a9d4 <PxMessagingTask+0xef8>)
 800a79a:	7051      	strb	r1, [r2, #1]
 800a79c:	881b      	ldrh	r3, [r3, #0]
 800a79e:	b21b      	sxth	r3, r3
 800a7a0:	121b      	asrs	r3, r3, #8
 800a7a2:	7093      	strb	r3, [r2, #2]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800a7a4:	2203      	movs	r2, #3
 800a7a6:	211f      	movs	r1, #31
 800a7a8:	9806      	ldr	r0, [sp, #24]
 800a7aa:	f7fe febb 	bl	8009524 <SendMessageToModule>
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	4698      	mov	r8, r3
 800a7b2:	f7ff f9c8 	bl	8009b46 <PxMessagingTask+0x6a>
											messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 800a7b6:	6819      	ldr	r1, [r3, #0]
 800a7b8:	4a86      	ldr	r2, [pc, #536]	; (800a9d4 <PxMessagingTask+0xef8>)
 800a7ba:	7051      	strb	r1, [r2, #1]
 800a7bc:	6819      	ldr	r1, [r3, #0]
 800a7be:	0a09      	lsrs	r1, r1, #8
 800a7c0:	7091      	strb	r1, [r2, #2]
											messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 800a7c2:	6819      	ldr	r1, [r3, #0]
 800a7c4:	0c09      	lsrs	r1, r1, #16
 800a7c6:	70d1      	strb	r1, [r2, #3]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	0e1b      	lsrs	r3, r3, #24
 800a7cc:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;
 800a7ce:	2205      	movs	r2, #5
 800a7d0:	211f      	movs	r1, #31
 800a7d2:	9806      	ldr	r0, [sp, #24]
 800a7d4:	f7fe fea6 	bl	8009524 <SendMessageToModule>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	4698      	mov	r8, r3
 800a7dc:	f7ff f9b3 	bl	8009b46 <PxMessagingTask+0x6a>
											messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 800a7e0:	6819      	ldr	r1, [r3, #0]
 800a7e2:	4a7c      	ldr	r2, [pc, #496]	; (800a9d4 <PxMessagingTask+0xef8>)
 800a7e4:	7051      	strb	r1, [r2, #1]
 800a7e6:	6819      	ldr	r1, [r3, #0]
 800a7e8:	1209      	asrs	r1, r1, #8
 800a7ea:	7091      	strb	r1, [r2, #2]
											messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 800a7ec:	6819      	ldr	r1, [r3, #0]
 800a7ee:	1409      	asrs	r1, r1, #16
 800a7f0:	70d1      	strb	r1, [r2, #3]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	161b      	asrs	r3, r3, #24
 800a7f6:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;										
 800a7f8:	2205      	movs	r2, #5
 800a7fa:	211f      	movs	r1, #31
 800a7fc:	9806      	ldr	r0, [sp, #24]
 800a7fe:	f7fe fe91 	bl	8009524 <SendMessageToModule>
 800a802:	2300      	movs	r3, #0
 800a804:	4698      	mov	r8, r3
 800a806:	f7ff f99e 	bl	8009b46 <PxMessagingTask+0x6a>
											messageParams[1] = *(__IO uint8_t *)(temp32+0); messageParams[2] = *(__IO uint8_t *)(temp32+1);  
 800a80a:	7819      	ldrb	r1, [r3, #0]
 800a80c:	4a71      	ldr	r2, [pc, #452]	; (800a9d4 <PxMessagingTask+0xef8>)
 800a80e:	7051      	strb	r1, [r2, #1]
 800a810:	7859      	ldrb	r1, [r3, #1]
 800a812:	7091      	strb	r1, [r2, #2]
											messageParams[3] = *(__IO uint8_t *)(temp32+2); messageParams[4] = *(__IO uint8_t *)(temp32+3);  			// You cannot bitwise floats	
 800a814:	7899      	ldrb	r1, [r3, #2]
 800a816:	70d1      	strb	r1, [r2, #3]
 800a818:	78db      	ldrb	r3, [r3, #3]
 800a81a:	7113      	strb	r3, [r2, #4]
											SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 9); break;			
 800a81c:	2209      	movs	r2, #9
 800a81e:	211f      	movs	r1, #31
 800a820:	9806      	ldr	r0, [sp, #24]
 800a822:	f7fe fe7f 	bl	8009524 <SendMessageToModule>
 800a826:	2300      	movs	r3, #0
 800a828:	4698      	mov	r8, r3
 800a82a:	f7ff f98c 	bl	8009b46 <PxMessagingTask+0x6a>
										SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 1);							
 800a82e:	2201      	movs	r2, #1
 800a830:	211f      	movs	r1, #31
 800a832:	9806      	ldr	r0, [sp, #24]
 800a834:	f7fe fe76 	bl	8009524 <SendMessageToModule>
 800a838:	f7ff f985 	bl	8009b46 <PxMessagingTask+0x6a>
												messageParams[1] = *(__IO uint8_t *)temp32; 
 800a83c:	781a      	ldrb	r2, [r3, #0]
 800a83e:	4b65      	ldr	r3, [pc, #404]	; (800a9d4 <PxMessagingTask+0xef8>)
 800a840:	705a      	strb	r2, [r3, #1]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a842:	2202      	movs	r2, #2
 800a844:	211f      	movs	r1, #31
 800a846:	9806      	ldr	r0, [sp, #24]
 800a848:	f7fe fe6c 	bl	8009524 <SendMessageToModule>
 800a84c:	2300      	movs	r3, #0
 800a84e:	4698      	mov	r8, r3
 800a850:	f7ff f979 	bl	8009b46 <PxMessagingTask+0x6a>
												messageParams[1] = *(__IO int8_t *)temp32; 
 800a854:	781a      	ldrb	r2, [r3, #0]
 800a856:	4b5f      	ldr	r3, [pc, #380]	; (800a9d4 <PxMessagingTask+0xef8>)
 800a858:	705a      	strb	r2, [r3, #1]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 2); break;
 800a85a:	2202      	movs	r2, #2
 800a85c:	211f      	movs	r1, #31
 800a85e:	9806      	ldr	r0, [sp, #24]
 800a860:	f7fe fe60 	bl	8009524 <SendMessageToModule>
 800a864:	2300      	movs	r3, #0
 800a866:	4698      	mov	r8, r3
 800a868:	f7ff f96d 	bl	8009b46 <PxMessagingTask+0x6a>
												messageParams[1] = (uint8_t)((*(__IO uint16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint16_t *)temp32)>>8); 
 800a86c:	8819      	ldrh	r1, [r3, #0]
 800a86e:	4a59      	ldr	r2, [pc, #356]	; (800a9d4 <PxMessagingTask+0xef8>)
 800a870:	7051      	strb	r1, [r2, #1]
 800a872:	881b      	ldrh	r3, [r3, #0]
 800a874:	0a1b      	lsrs	r3, r3, #8
 800a876:	7093      	strb	r3, [r2, #2]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800a878:	2203      	movs	r2, #3
 800a87a:	211f      	movs	r1, #31
 800a87c:	9806      	ldr	r0, [sp, #24]
 800a87e:	f7fe fe51 	bl	8009524 <SendMessageToModule>
 800a882:	2300      	movs	r3, #0
 800a884:	4698      	mov	r8, r3
 800a886:	f7ff f95e 	bl	8009b46 <PxMessagingTask+0x6a>
												messageParams[1] = (uint8_t)((*(__IO int16_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int16_t *)temp32)>>8); 
 800a88a:	8819      	ldrh	r1, [r3, #0]
 800a88c:	4a51      	ldr	r2, [pc, #324]	; (800a9d4 <PxMessagingTask+0xef8>)
 800a88e:	7051      	strb	r1, [r2, #1]
 800a890:	881b      	ldrh	r3, [r3, #0]
 800a892:	b21b      	sxth	r3, r3
 800a894:	121b      	asrs	r3, r3, #8
 800a896:	7093      	strb	r3, [r2, #2]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 3); break;
 800a898:	2203      	movs	r2, #3
 800a89a:	211f      	movs	r1, #31
 800a89c:	9806      	ldr	r0, [sp, #24]
 800a89e:	f7fe fe41 	bl	8009524 <SendMessageToModule>
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	4698      	mov	r8, r3
 800a8a6:	f7ff f94e 	bl	8009b46 <PxMessagingTask+0x6a>
												messageParams[1] = (uint8_t)((*(__IO uint32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO uint32_t *)temp32)>>8); 
 800a8aa:	6819      	ldr	r1, [r3, #0]
 800a8ac:	4a49      	ldr	r2, [pc, #292]	; (800a9d4 <PxMessagingTask+0xef8>)
 800a8ae:	7051      	strb	r1, [r2, #1]
 800a8b0:	6819      	ldr	r1, [r3, #0]
 800a8b2:	0a09      	lsrs	r1, r1, #8
 800a8b4:	7091      	strb	r1, [r2, #2]
												messageParams[3] = (uint8_t)((*(__IO uint32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO uint32_t *)temp32)>>24); 
 800a8b6:	6819      	ldr	r1, [r3, #0]
 800a8b8:	0c09      	lsrs	r1, r1, #16
 800a8ba:	70d1      	strb	r1, [r2, #3]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	0e1b      	lsrs	r3, r3, #24
 800a8c0:	7113      	strb	r3, [r2, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;
 800a8c2:	2205      	movs	r2, #5
 800a8c4:	211f      	movs	r1, #31
 800a8c6:	9806      	ldr	r0, [sp, #24]
 800a8c8:	f7fe fe2c 	bl	8009524 <SendMessageToModule>
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	4698      	mov	r8, r3
 800a8d0:	f7ff f939 	bl	8009b46 <PxMessagingTask+0x6a>
												messageParams[1] = (uint8_t)((*(__IO int32_t *)temp32)>>0); messageParams[2] = (uint8_t)((*(__IO int32_t *)temp32)>>8); 
 800a8d4:	6819      	ldr	r1, [r3, #0]
 800a8d6:	4a3f      	ldr	r2, [pc, #252]	; (800a9d4 <PxMessagingTask+0xef8>)
 800a8d8:	7051      	strb	r1, [r2, #1]
 800a8da:	6819      	ldr	r1, [r3, #0]
 800a8dc:	1209      	asrs	r1, r1, #8
 800a8de:	7091      	strb	r1, [r2, #2]
												messageParams[3] = (uint8_t)((*(__IO int32_t *)temp32)>>16); messageParams[4] = (uint8_t)((*(__IO int32_t *)temp32)>>24);
 800a8e0:	6819      	ldr	r1, [r3, #0]
 800a8e2:	1409      	asrs	r1, r1, #16
 800a8e4:	70d1      	strb	r1, [r2, #3]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	161b      	asrs	r3, r3, #24
 800a8ea:	7113      	strb	r3, [r2, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 5); break;										
 800a8ec:	2205      	movs	r2, #5
 800a8ee:	211f      	movs	r1, #31
 800a8f0:	9806      	ldr	r0, [sp, #24]
 800a8f2:	f7fe fe17 	bl	8009524 <SendMessageToModule>
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	4698      	mov	r8, r3
 800a8fa:	f7ff f924 	bl	8009b46 <PxMessagingTask+0x6a>
												messageParams[1] = *(__IO uint8_t *)(temp32+0); messageParams[2] = *(__IO uint8_t *)(temp32+1); 
 800a8fe:	7819      	ldrb	r1, [r3, #0]
 800a900:	4b34      	ldr	r3, [pc, #208]	; (800a9d4 <PxMessagingTask+0xef8>)
 800a902:	7059      	strb	r1, [r3, #1]
 800a904:	4939      	ldr	r1, [pc, #228]	; (800a9ec <PxMessagingTask+0xf10>)
 800a906:	1851      	adds	r1, r2, r1
 800a908:	7809      	ldrb	r1, [r1, #0]
 800a90a:	7099      	strb	r1, [r3, #2]
												messageParams[3] = *(__IO uint8_t *)(temp32+2); messageParams[4] = *(__IO uint8_t *)(temp32+3);  			// You cannot bitwise floats	
 800a90c:	4938      	ldr	r1, [pc, #224]	; (800a9f0 <PxMessagingTask+0xf14>)
 800a90e:	1851      	adds	r1, r2, r1
 800a910:	7809      	ldrb	r1, [r1, #0]
 800a912:	70d9      	strb	r1, [r3, #3]
 800a914:	4937      	ldr	r1, [pc, #220]	; (800a9f4 <PxMessagingTask+0xf18>)
 800a916:	468c      	mov	ip, r1
 800a918:	4462      	add	r2, ip
 800a91a:	7812      	ldrb	r2, [r2, #0]
 800a91c:	711a      	strb	r2, [r3, #4]
												SendMessageToModule(src, CODE_READ_REMOTE_RESPONSE, 9); break;			
 800a91e:	2209      	movs	r2, #9
 800a920:	211f      	movs	r1, #31
 800a922:	9806      	ldr	r0, [sp, #24]
 800a924:	f7fe fdfe 	bl	8009524 <SendMessageToModule>
 800a928:	2300      	movs	r3, #0
 800a92a:	4698      	mov	r8, r3
 800a92c:	f7ff f90b 	bl	8009b46 <PxMessagingTask+0x6a>
							if (remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM)				// We requested a BOS variable or module param
 800a930:	4b31      	ldr	r3, [pc, #196]	; (800a9f8 <PxMessagingTask+0xf1c>)
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	2002      	movs	r0, #2
 800a938:	4240      	negs	r0, r0
 800a93a:	17c1      	asrs	r1, r0, #31
 800a93c:	1812      	adds	r2, r2, r0
 800a93e:	414b      	adcs	r3, r1
 800a940:	2b00      	cmp	r3, #0
 800a942:	d00a      	beq.n	800a95a <PxMessagingTask+0xe7e>
							if (responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)	responseStatus = BOS_OK;
 800a944:	4b2d      	ldr	r3, [pc, #180]	; (800a9fc <PxMessagingTask+0xf20>)
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	2b10      	cmp	r3, #16
 800a94a:	d100      	bne.n	800a94e <PxMessagingTask+0xe72>
 800a94c:	e35e      	b.n	800b00c <PxMessagingTask+0x1530>
 800a94e:	2500      	movs	r5, #0
 800a950:	4b2a      	ldr	r3, [pc, #168]	; (800a9fc <PxMessagingTask+0xf20>)
 800a952:	701d      	strb	r5, [r3, #0]
 800a954:	46a8      	mov	r8, r5
 800a956:	f7ff f8f6 	bl	8009b46 <PxMessagingTask+0x6a>
							if (remoteBuffer == REMOTE_BOS_VAR || remoteBuffer == REMOTE_MODULE_PARAM)				// We requested a BOS variable or module param
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d101      	bne.n	800a962 <PxMessagingTask+0xe86>
 800a95e:	2a01      	cmp	r2, #1
 800a960:	d8f0      	bhi.n	800a944 <PxMessagingTask+0xe68>
								remoteVarFormat = (varFormat_t) cMessage[port-1][shift];
 800a962:	2138      	movs	r1, #56	; 0x38
 800a964:	4361      	muls	r1, r4
 800a966:	4a1e      	ldr	r2, [pc, #120]	; (800a9e0 <PxMessagingTask+0xf04>)
 800a968:	1852      	adds	r2, r2, r1
 800a96a:	5d52      	ldrb	r2, [r2, r5]
 800a96c:	4690      	mov	r8, r2
 800a96e:	4a24      	ldr	r2, [pc, #144]	; (800aa00 <PxMessagingTask+0xf24>)
 800a970:	4641      	mov	r1, r8
 800a972:	7011      	strb	r1, [r2, #0]
								switch (cMessage[port-1][shift])											// Remote format
 800a974:	2908      	cmp	r1, #8
 800a976:	d8e5      	bhi.n	800a944 <PxMessagingTask+0xe68>
 800a978:	008a      	lsls	r2, r1, #2
 800a97a:	4922      	ldr	r1, [pc, #136]	; (800aa04 <PxMessagingTask+0xf28>)
 800a97c:	588a      	ldr	r2, [r1, r2]
 800a97e:	4697      	mov	pc, r2
										responseStatus = BOS_ERR_REMOTE_READ_NO_VAR; break;
 800a980:	4b1e      	ldr	r3, [pc, #120]	; (800a9fc <PxMessagingTask+0xf20>)
 800a982:	2210      	movs	r2, #16
 800a984:	701a      	strb	r2, [r3, #0]
							if (responseStatus != BOS_ERR_REMOTE_READ_NO_VAR)	responseStatus = BOS_OK;
 800a986:	f7ff f8de 	bl	8009b46 <PxMessagingTask+0x6a>
										remoteBuffer = cMessage[port-1][1+shift]; break;
 800a98a:	4a1b      	ldr	r2, [pc, #108]	; (800a9f8 <PxMessagingTask+0xf1c>)
 800a98c:	2038      	movs	r0, #56	; 0x38
 800a98e:	4360      	muls	r0, r4
 800a990:	4913      	ldr	r1, [pc, #76]	; (800a9e0 <PxMessagingTask+0xf04>)
 800a992:	1809      	adds	r1, r1, r0
 800a994:	1949      	adds	r1, r1, r5
 800a996:	784b      	ldrb	r3, [r1, #1]
 800a998:	6013      	str	r3, [r2, #0]
 800a99a:	2300      	movs	r3, #0
 800a99c:	6053      	str	r3, [r2, #4]
 800a99e:	e7d1      	b.n	800a944 <PxMessagingTask+0xe68>
										remoteBuffer = (int8_t)cMessage[port-1][1+shift]; break;
 800a9a0:	4a15      	ldr	r2, [pc, #84]	; (800a9f8 <PxMessagingTask+0xf1c>)
 800a9a2:	2038      	movs	r0, #56	; 0x38
 800a9a4:	4360      	muls	r0, r4
 800a9a6:	490e      	ldr	r1, [pc, #56]	; (800a9e0 <PxMessagingTask+0xf04>)
 800a9a8:	1809      	adds	r1, r1, r0
 800a9aa:	1949      	adds	r1, r1, r5
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	56cb      	ldrsb	r3, [r1, r3]
 800a9b0:	6013      	str	r3, [r2, #0]
 800a9b2:	17db      	asrs	r3, r3, #31
 800a9b4:	6053      	str	r3, [r2, #4]
 800a9b6:	e7c5      	b.n	800a944 <PxMessagingTask+0xe68>
										remoteBuffer = ((uint16_t)cMessage[port-1][1+shift]<<0) + ((uint16_t)cMessage[port-1][2+shift]<<8); break;
 800a9b8:	4a0f      	ldr	r2, [pc, #60]	; (800a9f8 <PxMessagingTask+0xf1c>)
 800a9ba:	2038      	movs	r0, #56	; 0x38
 800a9bc:	4360      	muls	r0, r4
 800a9be:	4908      	ldr	r1, [pc, #32]	; (800a9e0 <PxMessagingTask+0xf04>)
 800a9c0:	1809      	adds	r1, r1, r0
 800a9c2:	1949      	adds	r1, r1, r5
 800a9c4:	788b      	ldrb	r3, [r1, #2]
 800a9c6:	021b      	lsls	r3, r3, #8
 800a9c8:	7849      	ldrb	r1, [r1, #1]
 800a9ca:	185b      	adds	r3, r3, r1
 800a9cc:	6013      	str	r3, [r2, #0]
 800a9ce:	17db      	asrs	r3, r3, #31
 800a9d0:	6053      	str	r3, [r2, #4]
 800a9d2:	e7b7      	b.n	800a944 <PxMessagingTask+0xe68>
 800a9d4:	20000da4 	.word	0x20000da4
 800a9d8:	2000666c 	.word	0x2000666c
 800a9dc:	0801d014 	.word	0x0801d014
 800a9e0:	20000ba4 	.word	0x20000ba4
 800a9e4:	200000dc 	.word	0x200000dc
 800a9e8:	0801d034 	.word	0x0801d034
 800a9ec:	20000001 	.word	0x20000001
 800a9f0:	20000002 	.word	0x20000002
 800a9f4:	20000003 	.word	0x20000003
 800a9f8:	20000e70 	.word	0x20000e70
 800a9fc:	20000e78 	.word	0x20000e78
 800aa00:	20000090 	.word	0x20000090
 800aa04:	0801d054 	.word	0x0801d054
										remoteBuffer = ((int16_t)cMessage[port-1][1+shift]<<0) + ((int16_t)cMessage[port-1][2+shift]<<8); break;
 800aa08:	4adc      	ldr	r2, [pc, #880]	; (800ad7c <PxMessagingTask+0x12a0>)
 800aa0a:	2038      	movs	r0, #56	; 0x38
 800aa0c:	4360      	muls	r0, r4
 800aa0e:	49dc      	ldr	r1, [pc, #880]	; (800ad80 <PxMessagingTask+0x12a4>)
 800aa10:	1809      	adds	r1, r1, r0
 800aa12:	1949      	adds	r1, r1, r5
 800aa14:	788b      	ldrb	r3, [r1, #2]
 800aa16:	021b      	lsls	r3, r3, #8
 800aa18:	7849      	ldrb	r1, [r1, #1]
 800aa1a:	185b      	adds	r3, r3, r1
 800aa1c:	6013      	str	r3, [r2, #0]
 800aa1e:	17db      	asrs	r3, r3, #31
 800aa20:	6053      	str	r3, [r2, #4]
 800aa22:	e78f      	b.n	800a944 <PxMessagingTask+0xe68>
										remoteBuffer = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24); break;
 800aa24:	4ad5      	ldr	r2, [pc, #852]	; (800ad7c <PxMessagingTask+0x12a0>)
 800aa26:	2038      	movs	r0, #56	; 0x38
 800aa28:	4360      	muls	r0, r4
 800aa2a:	49d5      	ldr	r1, [pc, #852]	; (800ad80 <PxMessagingTask+0x12a4>)
 800aa2c:	1809      	adds	r1, r1, r0
 800aa2e:	1949      	adds	r1, r1, r5
 800aa30:	788b      	ldrb	r3, [r1, #2]
 800aa32:	021b      	lsls	r3, r3, #8
 800aa34:	78c8      	ldrb	r0, [r1, #3]
 800aa36:	0400      	lsls	r0, r0, #16
 800aa38:	181b      	adds	r3, r3, r0
 800aa3a:	7848      	ldrb	r0, [r1, #1]
 800aa3c:	181b      	adds	r3, r3, r0
 800aa3e:	7909      	ldrb	r1, [r1, #4]
 800aa40:	0609      	lsls	r1, r1, #24
 800aa42:	185b      	adds	r3, r3, r1
 800aa44:	6013      	str	r3, [r2, #0]
 800aa46:	2300      	movs	r3, #0
 800aa48:	6053      	str	r3, [r2, #4]
 800aa4a:	e77b      	b.n	800a944 <PxMessagingTask+0xe68>
										remoteBuffer = ((int32_t)cMessage[port-1][1+shift]<<0) + ((int32_t)cMessage[port-1][2+shift]<<8) + ((int32_t)cMessage[port-1][3+shift]<<16) + ((int32_t)cMessage[port-1][4+shift]<<24); break;									
 800aa4c:	4acb      	ldr	r2, [pc, #812]	; (800ad7c <PxMessagingTask+0x12a0>)
 800aa4e:	2038      	movs	r0, #56	; 0x38
 800aa50:	4360      	muls	r0, r4
 800aa52:	49cb      	ldr	r1, [pc, #812]	; (800ad80 <PxMessagingTask+0x12a4>)
 800aa54:	1809      	adds	r1, r1, r0
 800aa56:	1949      	adds	r1, r1, r5
 800aa58:	788b      	ldrb	r3, [r1, #2]
 800aa5a:	021b      	lsls	r3, r3, #8
 800aa5c:	7848      	ldrb	r0, [r1, #1]
 800aa5e:	181b      	adds	r3, r3, r0
 800aa60:	78c8      	ldrb	r0, [r1, #3]
 800aa62:	0400      	lsls	r0, r0, #16
 800aa64:	181b      	adds	r3, r3, r0
 800aa66:	7909      	ldrb	r1, [r1, #4]
 800aa68:	0609      	lsls	r1, r1, #24
 800aa6a:	185b      	adds	r3, r3, r1
 800aa6c:	6013      	str	r3, [r2, #0]
 800aa6e:	17db      	asrs	r3, r3, #31
 800aa70:	6053      	str	r3, [r2, #4]
 800aa72:	e767      	b.n	800a944 <PxMessagingTask+0xe68>
										remoteBuffer = ((uint32_t)cMessage[port-1][1+shift]<<0) + ((uint32_t)cMessage[port-1][2+shift]<<8) + ((uint32_t)cMessage[port-1][3+shift]<<16) + ((uint32_t)cMessage[port-1][4+shift]<<24); break;
 800aa74:	4ac1      	ldr	r2, [pc, #772]	; (800ad7c <PxMessagingTask+0x12a0>)
 800aa76:	2038      	movs	r0, #56	; 0x38
 800aa78:	4360      	muls	r0, r4
 800aa7a:	49c1      	ldr	r1, [pc, #772]	; (800ad80 <PxMessagingTask+0x12a4>)
 800aa7c:	1809      	adds	r1, r1, r0
 800aa7e:	1949      	adds	r1, r1, r5
 800aa80:	788b      	ldrb	r3, [r1, #2]
 800aa82:	021b      	lsls	r3, r3, #8
 800aa84:	78c8      	ldrb	r0, [r1, #3]
 800aa86:	0400      	lsls	r0, r0, #16
 800aa88:	181b      	adds	r3, r3, r0
 800aa8a:	7848      	ldrb	r0, [r1, #1]
 800aa8c:	181b      	adds	r3, r3, r0
 800aa8e:	7909      	ldrb	r1, [r1, #4]
 800aa90:	0609      	lsls	r1, r1, #24
 800aa92:	185b      	adds	r3, r3, r1
 800aa94:	6013      	str	r3, [r2, #0]
 800aa96:	2300      	movs	r3, #0
 800aa98:	6053      	str	r3, [r2, #4]
 800aa9a:	e753      	b.n	800a944 <PxMessagingTask+0xe68>
							responseStatus = BOS_OK;		// Initialize response
 800aa9c:	4bb9      	ldr	r3, [pc, #740]	; (800ad84 <PxMessagingTask+0x12a8>)
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	701a      	strb	r2, [r3, #0]
							if(cMessage[port-1][shift])			// request for a BOS var
 800aaa2:	46a8      	mov	r8, r5
 800aaa4:	4bb6      	ldr	r3, [pc, #728]	; (800ad80 <PxMessagingTask+0x12a4>)
 800aaa6:	199b      	adds	r3, r3, r6
 800aaa8:	5d5b      	ldrb	r3, [r3, r5]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d100      	bne.n	800aab0 <PxMessagingTask+0xfd4>
 800aaae:	e116      	b.n	800acde <PxMessagingTask+0x1202>
								if(cMessage[port-1][shift] <= MAX_BOS_VARS)
 800aab0:	2b1e      	cmp	r3, #30
 800aab2:	d900      	bls.n	800aab6 <PxMessagingTask+0xfda>
 800aab4:	e0fb      	b.n	800acae <PxMessagingTask+0x11d2>
									temp32 = (BOS_var_reg[cMessage[port-1][shift]-1]>>16) + SRAM_BASE;				// Get var memory addres
 800aab6:	1e5d      	subs	r5, r3, #1
 800aab8:	00aa      	lsls	r2, r5, #2
 800aaba:	4bb3      	ldr	r3, [pc, #716]	; (800ad88 <PxMessagingTask+0x12ac>)
 800aabc:	58d2      	ldr	r2, [r2, r3]
 800aabe:	0c13      	lsrs	r3, r2, #16
 800aac0:	2180      	movs	r1, #128	; 0x80
 800aac2:	0589      	lsls	r1, r1, #22
 800aac4:	468c      	mov	ip, r1
 800aac6:	4463      	add	r3, ip
									switch (cMessage[port-1][1+shift])											// requested format
 800aac8:	2101      	movs	r1, #1
 800aaca:	4441      	add	r1, r8
 800aacc:	4689      	mov	r9, r1
 800aace:	2038      	movs	r0, #56	; 0x38
 800aad0:	4360      	muls	r0, r4
 800aad2:	49ab      	ldr	r1, [pc, #684]	; (800ad80 <PxMessagingTask+0x12a4>)
 800aad4:	1809      	adds	r1, r1, r0
 800aad6:	4648      	mov	r0, r9
 800aad8:	5c09      	ldrb	r1, [r1, r0]
 800aada:	468a      	mov	sl, r1
 800aadc:	3901      	subs	r1, #1
 800aade:	b2c8      	uxtb	r0, r1
 800aae0:	2807      	cmp	r0, #7
 800aae2:	d80d      	bhi.n	800ab00 <PxMessagingTask+0x1024>
 800aae4:	b2c9      	uxtb	r1, r1
 800aae6:	0089      	lsls	r1, r1, #2
 800aae8:	48a8      	ldr	r0, [pc, #672]	; (800ad8c <PxMessagingTask+0x12b0>)
 800aaea:	5841      	ldr	r1, [r0, r1]
 800aaec:	468f      	mov	pc, r1
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800aaee:	0712      	lsls	r2, r2, #28
 800aaf0:	d022      	beq.n	800ab38 <PxMessagingTask+0x105c>
												*(__IO uint8_t *)temp32 = cMessage[port-1][2+shift];					
 800aaf2:	2138      	movs	r1, #56	; 0x38
 800aaf4:	4361      	muls	r1, r4
 800aaf6:	4aa2      	ldr	r2, [pc, #648]	; (800ad80 <PxMessagingTask+0x12a4>)
 800aaf8:	1852      	adds	r2, r2, r1
 800aafa:	4442      	add	r2, r8
 800aafc:	7892      	ldrb	r2, [r2, #2]
 800aafe:	701a      	strb	r2, [r3, #0]
									if ( (BOS_var_reg[cMessage[port-1][shift]-1] & 0x000F) != cMessage[port-1][1+shift] ) {		
 800ab00:	2338      	movs	r3, #56	; 0x38
 800ab02:	4363      	muls	r3, r4
 800ab04:	4a9e      	ldr	r2, [pc, #632]	; (800ad80 <PxMessagingTask+0x12a4>)
 800ab06:	18d2      	adds	r2, r2, r3
 800ab08:	4643      	mov	r3, r8
 800ab0a:	5cd3      	ldrb	r3, [r2, r3]
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	0098      	lsls	r0, r3, #2
 800ab10:	499d      	ldr	r1, [pc, #628]	; (800ad88 <PxMessagingTask+0x12ac>)
 800ab12:	5841      	ldr	r1, [r0, r1]
 800ab14:	4648      	mov	r0, r9
 800ab16:	5c12      	ldrb	r2, [r2, r0]
 800ab18:	200f      	movs	r0, #15
 800ab1a:	4008      	ands	r0, r1
 800ab1c:	4290      	cmp	r0, r2
 800ab1e:	d100      	bne.n	800ab22 <PxMessagingTask+0x1046>
 800ab20:	e0c8      	b.n	800acb4 <PxMessagingTask+0x11d8>
										BOS_var_reg[cMessage[port-1][shift]-1] &= (0xFFF0+cMessage[port-1][1+shift]);
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	489a      	ldr	r0, [pc, #616]	; (800ad90 <PxMessagingTask+0x12b4>)
 800ab26:	4684      	mov	ip, r0
 800ab28:	4462      	add	r2, ip
 800ab2a:	400a      	ands	r2, r1
 800ab2c:	4996      	ldr	r1, [pc, #600]	; (800ad88 <PxMessagingTask+0x12ac>)
 800ab2e:	505a      	str	r2, [r3, r1]
										responseStatus = BOS_ERR_LOCAL_FORMAT_UPDATED;
 800ab30:	4b94      	ldr	r3, [pc, #592]	; (800ad84 <PxMessagingTask+0x12a8>)
 800ab32:	2214      	movs	r2, #20
 800ab34:	701a      	strb	r2, [r3, #0]
 800ab36:	e0bd      	b.n	800acb4 <PxMessagingTask+0x11d8>
												temp32 = (uint32_t)malloc(sizeof(uint8_t));							// Create a new one
 800ab38:	2001      	movs	r0, #1
 800ab3a:	f009 fadb 	bl	80140f4 <malloc>
 800ab3e:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800ab40:	d005      	beq.n	800ab4e <PxMessagingTask+0x1072>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800ab42:	00ad      	lsls	r5, r5, #2
 800ab44:	0400      	lsls	r0, r0, #16
 800ab46:	4450      	add	r0, sl
 800ab48:	4a8f      	ldr	r2, [pc, #572]	; (800ad88 <PxMessagingTask+0x12ac>)
 800ab4a:	50a8      	str	r0, [r5, r2]
 800ab4c:	e7d1      	b.n	800aaf2 <PxMessagingTask+0x1016>
													responseStatus = BOS_ERR_REMOTE_WRITE_MEM_FULL;
 800ab4e:	4b8d      	ldr	r3, [pc, #564]	; (800ad84 <PxMessagingTask+0x12a8>)
 800ab50:	2212      	movs	r2, #18
 800ab52:	701a      	strb	r2, [r3, #0]
											if (responseStatus != BOS_ERR_REMOTE_WRITE_MEM_FULL)			// Write remote value
 800ab54:	e7d4      	b.n	800ab00 <PxMessagingTask+0x1024>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800ab56:	0712      	lsls	r2, r2, #28
 800ab58:	d008      	beq.n	800ab6c <PxMessagingTask+0x1090>
												*(__IO int8_t *)temp32 = (int8_t)cMessage[port-1][2+shift];		
 800ab5a:	2138      	movs	r1, #56	; 0x38
 800ab5c:	4361      	muls	r1, r4
 800ab5e:	4a88      	ldr	r2, [pc, #544]	; (800ad80 <PxMessagingTask+0x12a4>)
 800ab60:	1852      	adds	r2, r2, r1
 800ab62:	4442      	add	r2, r8
 800ab64:	7892      	ldrb	r2, [r2, #2]
 800ab66:	b252      	sxtb	r2, r2
 800ab68:	701a      	strb	r2, [r3, #0]
 800ab6a:	e7c9      	b.n	800ab00 <PxMessagingTask+0x1024>
												temp32 = (uint32_t)malloc(sizeof(int8_t));							// Create a new one
 800ab6c:	2001      	movs	r0, #1
 800ab6e:	f009 fac1 	bl	80140f4 <malloc>
 800ab72:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800ab74:	d100      	bne.n	800ab78 <PxMessagingTask+0x109c>
 800ab76:	e259      	b.n	800b02c <PxMessagingTask+0x1550>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800ab78:	00ad      	lsls	r5, r5, #2
 800ab7a:	0400      	lsls	r0, r0, #16
 800ab7c:	3002      	adds	r0, #2
 800ab7e:	4a82      	ldr	r2, [pc, #520]	; (800ad88 <PxMessagingTask+0x12ac>)
 800ab80:	50a8      	str	r0, [r5, r2]
 800ab82:	e7ea      	b.n	800ab5a <PxMessagingTask+0x107e>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800ab84:	0712      	lsls	r2, r2, #28
 800ab86:	d00b      	beq.n	800aba0 <PxMessagingTask+0x10c4>
												*(__IO uint16_t *)temp32 = ((uint16_t)cMessage[port-1][2+shift]<<0) + ((uint16_t)cMessage[port-1][3+shift]<<8);					
 800ab88:	2138      	movs	r1, #56	; 0x38
 800ab8a:	4361      	muls	r1, r4
 800ab8c:	4a7c      	ldr	r2, [pc, #496]	; (800ad80 <PxMessagingTask+0x12a4>)
 800ab8e:	1852      	adds	r2, r2, r1
 800ab90:	4442      	add	r2, r8
 800ab92:	78d1      	ldrb	r1, [r2, #3]
 800ab94:	0209      	lsls	r1, r1, #8
 800ab96:	7892      	ldrb	r2, [r2, #2]
 800ab98:	1852      	adds	r2, r2, r1
 800ab9a:	b292      	uxth	r2, r2
 800ab9c:	801a      	strh	r2, [r3, #0]
 800ab9e:	e7af      	b.n	800ab00 <PxMessagingTask+0x1024>
												temp32 = (uint32_t)malloc(sizeof(uint16_t));						// Create a new one
 800aba0:	2002      	movs	r0, #2
 800aba2:	f009 faa7 	bl	80140f4 <malloc>
 800aba6:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800aba8:	d100      	bne.n	800abac <PxMessagingTask+0x10d0>
 800abaa:	e23f      	b.n	800b02c <PxMessagingTask+0x1550>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800abac:	00ad      	lsls	r5, r5, #2
 800abae:	0400      	lsls	r0, r0, #16
 800abb0:	3003      	adds	r0, #3
 800abb2:	4a75      	ldr	r2, [pc, #468]	; (800ad88 <PxMessagingTask+0x12ac>)
 800abb4:	50a8      	str	r0, [r5, r2]
 800abb6:	e7e7      	b.n	800ab88 <PxMessagingTask+0x10ac>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800abb8:	0712      	lsls	r2, r2, #28
 800abba:	d00b      	beq.n	800abd4 <PxMessagingTask+0x10f8>
												*(__IO int16_t *)temp32 = ((int16_t)cMessage[port-1][2+shift]<<0) + ((int16_t)cMessage[port-1][3+shift]<<8);					
 800abbc:	2138      	movs	r1, #56	; 0x38
 800abbe:	4361      	muls	r1, r4
 800abc0:	4a6f      	ldr	r2, [pc, #444]	; (800ad80 <PxMessagingTask+0x12a4>)
 800abc2:	1852      	adds	r2, r2, r1
 800abc4:	4442      	add	r2, r8
 800abc6:	78d1      	ldrb	r1, [r2, #3]
 800abc8:	0209      	lsls	r1, r1, #8
 800abca:	7892      	ldrb	r2, [r2, #2]
 800abcc:	1852      	adds	r2, r2, r1
 800abce:	b212      	sxth	r2, r2
 800abd0:	801a      	strh	r2, [r3, #0]
 800abd2:	e795      	b.n	800ab00 <PxMessagingTask+0x1024>
												temp32 = (uint32_t)malloc(sizeof(int16_t));							// Create a new one
 800abd4:	2002      	movs	r0, #2
 800abd6:	f009 fa8d 	bl	80140f4 <malloc>
 800abda:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800abdc:	d100      	bne.n	800abe0 <PxMessagingTask+0x1104>
 800abde:	e225      	b.n	800b02c <PxMessagingTask+0x1550>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800abe0:	00ad      	lsls	r5, r5, #2
 800abe2:	0400      	lsls	r0, r0, #16
 800abe4:	3004      	adds	r0, #4
 800abe6:	4a68      	ldr	r2, [pc, #416]	; (800ad88 <PxMessagingTask+0x12ac>)
 800abe8:	50a8      	str	r0, [r5, r2]
 800abea:	e7e7      	b.n	800abbc <PxMessagingTask+0x10e0>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800abec:	0712      	lsls	r2, r2, #28
 800abee:	d010      	beq.n	800ac12 <PxMessagingTask+0x1136>
												*(__IO uint32_t *)temp32 = ((uint32_t)cMessage[port-1][2+shift]<<0) + ((uint32_t)cMessage[port-1][3+shift]<<8) + ((uint32_t)cMessage[port-1][4+shift]<<16) + ((uint32_t)cMessage[port-1][5+shift]<<24);					
 800abf0:	2238      	movs	r2, #56	; 0x38
 800abf2:	4362      	muls	r2, r4
 800abf4:	4962      	ldr	r1, [pc, #392]	; (800ad80 <PxMessagingTask+0x12a4>)
 800abf6:	1889      	adds	r1, r1, r2
 800abf8:	4441      	add	r1, r8
 800abfa:	78ca      	ldrb	r2, [r1, #3]
 800abfc:	0212      	lsls	r2, r2, #8
 800abfe:	7908      	ldrb	r0, [r1, #4]
 800ac00:	0400      	lsls	r0, r0, #16
 800ac02:	1812      	adds	r2, r2, r0
 800ac04:	7888      	ldrb	r0, [r1, #2]
 800ac06:	1812      	adds	r2, r2, r0
 800ac08:	7949      	ldrb	r1, [r1, #5]
 800ac0a:	0609      	lsls	r1, r1, #24
 800ac0c:	1852      	adds	r2, r2, r1
 800ac0e:	601a      	str	r2, [r3, #0]
 800ac10:	e776      	b.n	800ab00 <PxMessagingTask+0x1024>
												temp32 = (uint32_t)malloc(sizeof(uint32_t));						// Create a new one
 800ac12:	2004      	movs	r0, #4
 800ac14:	f009 fa6e 	bl	80140f4 <malloc>
 800ac18:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800ac1a:	d100      	bne.n	800ac1e <PxMessagingTask+0x1142>
 800ac1c:	e206      	b.n	800b02c <PxMessagingTask+0x1550>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800ac1e:	00ad      	lsls	r5, r5, #2
 800ac20:	0400      	lsls	r0, r0, #16
 800ac22:	3005      	adds	r0, #5
 800ac24:	4a58      	ldr	r2, [pc, #352]	; (800ad88 <PxMessagingTask+0x12ac>)
 800ac26:	50a8      	str	r0, [r5, r2]
 800ac28:	e7e2      	b.n	800abf0 <PxMessagingTask+0x1114>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800ac2a:	0712      	lsls	r2, r2, #28
 800ac2c:	d010      	beq.n	800ac50 <PxMessagingTask+0x1174>
												*(__IO int32_t *)temp32 = ((int32_t)cMessage[port-1][2+shift]<<0) + ((int32_t)cMessage[port-1][3+shift]<<8) + ((int32_t)cMessage[port-1][4+shift]<<16) + ((int32_t)cMessage[port-1][5+shift]<<24);					
 800ac2e:	2238      	movs	r2, #56	; 0x38
 800ac30:	4362      	muls	r2, r4
 800ac32:	4953      	ldr	r1, [pc, #332]	; (800ad80 <PxMessagingTask+0x12a4>)
 800ac34:	1889      	adds	r1, r1, r2
 800ac36:	4441      	add	r1, r8
 800ac38:	78ca      	ldrb	r2, [r1, #3]
 800ac3a:	0212      	lsls	r2, r2, #8
 800ac3c:	7888      	ldrb	r0, [r1, #2]
 800ac3e:	1812      	adds	r2, r2, r0
 800ac40:	7908      	ldrb	r0, [r1, #4]
 800ac42:	0400      	lsls	r0, r0, #16
 800ac44:	1812      	adds	r2, r2, r0
 800ac46:	7949      	ldrb	r1, [r1, #5]
 800ac48:	0609      	lsls	r1, r1, #24
 800ac4a:	1852      	adds	r2, r2, r1
 800ac4c:	601a      	str	r2, [r3, #0]
 800ac4e:	e757      	b.n	800ab00 <PxMessagingTask+0x1024>
												temp32 = (uint32_t)malloc(sizeof(int32_t));							// Create a new one
 800ac50:	2004      	movs	r0, #4
 800ac52:	f009 fa4f 	bl	80140f4 <malloc>
 800ac56:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800ac58:	d100      	bne.n	800ac5c <PxMessagingTask+0x1180>
 800ac5a:	e1e7      	b.n	800b02c <PxMessagingTask+0x1550>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800ac5c:	00ad      	lsls	r5, r5, #2
 800ac5e:	0400      	lsls	r0, r0, #16
 800ac60:	3006      	adds	r0, #6
 800ac62:	4a49      	ldr	r2, [pc, #292]	; (800ad88 <PxMessagingTask+0x12ac>)
 800ac64:	50a8      	str	r0, [r5, r2]
 800ac66:	e7e2      	b.n	800ac2e <PxMessagingTask+0x1152>
											if ((BOS_var_reg[cMessage[port-1][shift]-1]&0x000F) == 0) {		// Variable does not exist																															
 800ac68:	0712      	lsls	r2, r2, #28
 800ac6a:	d014      	beq.n	800ac96 <PxMessagingTask+0x11ba>
												remoteBuffer = ((uint32_t)cMessage[port-1][2+shift]<<0) + ((uint32_t)cMessage[port-1][3+shift]<<8) + ((uint32_t)cMessage[port-1][4+shift]<<16) + ((uint32_t)cMessage[port-1][5+shift]<<24);
 800ac6c:	2238      	movs	r2, #56	; 0x38
 800ac6e:	4362      	muls	r2, r4
 800ac70:	4943      	ldr	r1, [pc, #268]	; (800ad80 <PxMessagingTask+0x12a4>)
 800ac72:	1889      	adds	r1, r1, r2
 800ac74:	4441      	add	r1, r8
 800ac76:	78ca      	ldrb	r2, [r1, #3]
 800ac78:	0212      	lsls	r2, r2, #8
 800ac7a:	7908      	ldrb	r0, [r1, #4]
 800ac7c:	0400      	lsls	r0, r0, #16
 800ac7e:	1812      	adds	r2, r2, r0
 800ac80:	7888      	ldrb	r0, [r1, #2]
 800ac82:	1812      	adds	r2, r2, r0
 800ac84:	7949      	ldrb	r1, [r1, #5]
 800ac86:	0609      	lsls	r1, r1, #24
 800ac88:	1852      	adds	r2, r2, r1
 800ac8a:	493c      	ldr	r1, [pc, #240]	; (800ad7c <PxMessagingTask+0x12a0>)
 800ac8c:	600a      	str	r2, [r1, #0]
 800ac8e:	2000      	movs	r0, #0
 800ac90:	6048      	str	r0, [r1, #4]
												*(float *)temp32 = *(float *)&remoteBuffer;																		
 800ac92:	601a      	str	r2, [r3, #0]
 800ac94:	e734      	b.n	800ab00 <PxMessagingTask+0x1024>
												temp32 = (uint32_t)malloc(sizeof(float));								// Create a new one
 800ac96:	2004      	movs	r0, #4
 800ac98:	f009 fa2c 	bl	80140f4 <malloc>
 800ac9c:	1e03      	subs	r3, r0, #0
												if (temp32 != 0) {
 800ac9e:	d100      	bne.n	800aca2 <PxMessagingTask+0x11c6>
 800aca0:	e1c4      	b.n	800b02c <PxMessagingTask+0x1550>
													BOS_var_reg[cMessage[port-1][shift]-1] = ((temp32-SRAM_BASE)<<16) + cMessage[port-1][1+shift];
 800aca2:	00ad      	lsls	r5, r5, #2
 800aca4:	0400      	lsls	r0, r0, #16
 800aca6:	3007      	adds	r0, #7
 800aca8:	4a37      	ldr	r2, [pc, #220]	; (800ad88 <PxMessagingTask+0x12ac>)
 800acaa:	50a8      	str	r0, [r5, r2]
 800acac:	e7de      	b.n	800ac6c <PxMessagingTask+0x1190>
									responseStatus = BOS_ERR_REMOTE_WRITE_INDEX;		// BOS var index out of range
 800acae:	4b35      	ldr	r3, [pc, #212]	; (800ad84 <PxMessagingTask+0x12a8>)
 800acb0:	2213      	movs	r2, #19
 800acb2:	701a      	strb	r2, [r3, #0]
							if (BOS.response == BOS_RESPONSE_ALL || BOS.response == BOS_RESPONSE_MSG) {
 800acb4:	4b37      	ldr	r3, [pc, #220]	; (800ad94 <PxMessagingTask+0x12b8>)
 800acb6:	799b      	ldrb	r3, [r3, #6]
 800acb8:	2240      	movs	r2, #64	; 0x40
 800acba:	4393      	bics	r3, r2
 800acbc:	2200      	movs	r2, #0
 800acbe:	4690      	mov	r8, r2
 800acc0:	2b20      	cmp	r3, #32
 800acc2:	d001      	beq.n	800acc8 <PxMessagingTask+0x11ec>
 800acc4:	f7fe ff3f 	bl	8009b46 <PxMessagingTask+0x6a>
								messageParams[0] = responseStatus;
 800acc8:	4b2e      	ldr	r3, [pc, #184]	; (800ad84 <PxMessagingTask+0x12a8>)
 800acca:	781a      	ldrb	r2, [r3, #0]
 800accc:	4b32      	ldr	r3, [pc, #200]	; (800ad98 <PxMessagingTask+0x12bc>)
 800acce:	701a      	strb	r2, [r3, #0]
								SendMessageToModule(src, CODE_WRITE_REMOTE_RESPONSE, 1);											
 800acd0:	2201      	movs	r2, #1
 800acd2:	2121      	movs	r1, #33	; 0x21
 800acd4:	9806      	ldr	r0, [sp, #24]
 800acd6:	f7fe fc25 	bl	8009524 <SendMessageToModule>
 800acda:	f7fe ff34 	bl	8009b46 <PxMessagingTask+0x6a>
								temp32 = ( (uint32_t) cMessage[port-1][2+shift] << 24 ) + ( (uint32_t) cMessage[port-1][3+shift] << 16 ) + ( (uint32_t) cMessage[port-1][4+shift] << 8 ) + cMessage[port-1][5+shift];				
 800acde:	2238      	movs	r2, #56	; 0x38
 800ace0:	4362      	muls	r2, r4
 800ace2:	4b27      	ldr	r3, [pc, #156]	; (800ad80 <PxMessagingTask+0x12a4>)
 800ace4:	189b      	adds	r3, r3, r2
 800ace6:	195d      	adds	r5, r3, r5
 800ace8:	78ab      	ldrb	r3, [r5, #2]
 800acea:	061b      	lsls	r3, r3, #24
 800acec:	78ea      	ldrb	r2, [r5, #3]
 800acee:	0412      	lsls	r2, r2, #16
 800acf0:	189b      	adds	r3, r3, r2
 800acf2:	796a      	ldrb	r2, [r5, #5]
 800acf4:	189b      	adds	r3, r3, r2
 800acf6:	792d      	ldrb	r5, [r5, #4]
 800acf8:	022d      	lsls	r5, r5, #8
 800acfa:	195d      	adds	r5, r3, r5
								if ( temp32 >= SRAM_BASE && temp32 < (SRAM_BASE+SRAM_SIZE) )			// SRAM
 800acfc:	23e0      	movs	r3, #224	; 0xe0
 800acfe:	061b      	lsls	r3, r3, #24
 800ad00:	18ea      	adds	r2, r5, r3
 800ad02:	2380      	movs	r3, #128	; 0x80
 800ad04:	021b      	lsls	r3, r3, #8
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d300      	bcc.n	800ad0c <PxMessagingTask+0x1230>
 800ad0a:	e080      	b.n	800ae0e <PxMessagingTask+0x1332>
									switch (cMessage[port-1][1+shift])															// Requested format
 800ad0c:	2238      	movs	r2, #56	; 0x38
 800ad0e:	4362      	muls	r2, r4
 800ad10:	4b1b      	ldr	r3, [pc, #108]	; (800ad80 <PxMessagingTask+0x12a4>)
 800ad12:	189b      	adds	r3, r3, r2
 800ad14:	4443      	add	r3, r8
 800ad16:	785b      	ldrb	r3, [r3, #1]
 800ad18:	3b01      	subs	r3, #1
 800ad1a:	b2da      	uxtb	r2, r3
 800ad1c:	2a07      	cmp	r2, #7
 800ad1e:	d8c9      	bhi.n	800acb4 <PxMessagingTask+0x11d8>
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	009b      	lsls	r3, r3, #2
 800ad24:	4a1d      	ldr	r2, [pc, #116]	; (800ad9c <PxMessagingTask+0x12c0>)
 800ad26:	58d3      	ldr	r3, [r2, r3]
 800ad28:	469f      	mov	pc, r3
											*(__IO uint8_t *)temp32 = cMessage[port-1][6+shift]; break;
 800ad2a:	2238      	movs	r2, #56	; 0x38
 800ad2c:	4362      	muls	r2, r4
 800ad2e:	4b14      	ldr	r3, [pc, #80]	; (800ad80 <PxMessagingTask+0x12a4>)
 800ad30:	189b      	adds	r3, r3, r2
 800ad32:	4443      	add	r3, r8
 800ad34:	799b      	ldrb	r3, [r3, #6]
 800ad36:	702b      	strb	r3, [r5, #0]
 800ad38:	e7bc      	b.n	800acb4 <PxMessagingTask+0x11d8>
											*(__IO int8_t *)temp32 = (int8_t)cMessage[port-1][6+shift]; break;
 800ad3a:	2238      	movs	r2, #56	; 0x38
 800ad3c:	4362      	muls	r2, r4
 800ad3e:	4b10      	ldr	r3, [pc, #64]	; (800ad80 <PxMessagingTask+0x12a4>)
 800ad40:	189b      	adds	r3, r3, r2
 800ad42:	4443      	add	r3, r8
 800ad44:	799b      	ldrb	r3, [r3, #6]
 800ad46:	b25b      	sxtb	r3, r3
 800ad48:	702b      	strb	r3, [r5, #0]
 800ad4a:	e7b3      	b.n	800acb4 <PxMessagingTask+0x11d8>
											*(__IO uint16_t *)temp32 = ((uint16_t)cMessage[port-1][6+shift]<<0) + ((uint16_t)cMessage[port-1][7+shift]<<8);	break;
 800ad4c:	2238      	movs	r2, #56	; 0x38
 800ad4e:	4362      	muls	r2, r4
 800ad50:	4b0b      	ldr	r3, [pc, #44]	; (800ad80 <PxMessagingTask+0x12a4>)
 800ad52:	189b      	adds	r3, r3, r2
 800ad54:	4443      	add	r3, r8
 800ad56:	79da      	ldrb	r2, [r3, #7]
 800ad58:	0212      	lsls	r2, r2, #8
 800ad5a:	799b      	ldrb	r3, [r3, #6]
 800ad5c:	189b      	adds	r3, r3, r2
 800ad5e:	b29b      	uxth	r3, r3
 800ad60:	802b      	strh	r3, [r5, #0]
 800ad62:	e7a7      	b.n	800acb4 <PxMessagingTask+0x11d8>
											*(__IO int16_t *)temp32 = ((int16_t)cMessage[port-1][6+shift]<<0) + ((int16_t)cMessage[port-1][7+shift]<<8);	break;
 800ad64:	2238      	movs	r2, #56	; 0x38
 800ad66:	4362      	muls	r2, r4
 800ad68:	4b05      	ldr	r3, [pc, #20]	; (800ad80 <PxMessagingTask+0x12a4>)
 800ad6a:	189b      	adds	r3, r3, r2
 800ad6c:	4443      	add	r3, r8
 800ad6e:	79da      	ldrb	r2, [r3, #7]
 800ad70:	0212      	lsls	r2, r2, #8
 800ad72:	799b      	ldrb	r3, [r3, #6]
 800ad74:	189b      	adds	r3, r3, r2
 800ad76:	b21b      	sxth	r3, r3
 800ad78:	802b      	strh	r3, [r5, #0]
 800ad7a:	e79b      	b.n	800acb4 <PxMessagingTask+0x11d8>
 800ad7c:	20000e70 	.word	0x20000e70
 800ad80:	20000ba4 	.word	0x20000ba4
 800ad84:	20000e78 	.word	0x20000e78
 800ad88:	2000666c 	.word	0x2000666c
 800ad8c:	0801d078 	.word	0x0801d078
 800ad90:	0000fff0 	.word	0x0000fff0
 800ad94:	200066e4 	.word	0x200066e4
 800ad98:	20000da4 	.word	0x20000da4
 800ad9c:	0801d098 	.word	0x0801d098
											*(__IO uint32_t *)temp32 = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24); break;
 800ada0:	2338      	movs	r3, #56	; 0x38
 800ada2:	4363      	muls	r3, r4
 800ada4:	4aad      	ldr	r2, [pc, #692]	; (800b05c <PxMessagingTask+0x1580>)
 800ada6:	18d2      	adds	r2, r2, r3
 800ada8:	4442      	add	r2, r8
 800adaa:	79d3      	ldrb	r3, [r2, #7]
 800adac:	021b      	lsls	r3, r3, #8
 800adae:	7a11      	ldrb	r1, [r2, #8]
 800adb0:	0409      	lsls	r1, r1, #16
 800adb2:	185b      	adds	r3, r3, r1
 800adb4:	7991      	ldrb	r1, [r2, #6]
 800adb6:	185b      	adds	r3, r3, r1
 800adb8:	7a52      	ldrb	r2, [r2, #9]
 800adba:	0612      	lsls	r2, r2, #24
 800adbc:	189b      	adds	r3, r3, r2
 800adbe:	602b      	str	r3, [r5, #0]
 800adc0:	e778      	b.n	800acb4 <PxMessagingTask+0x11d8>
											*(__IO int32_t *)temp32 = ((int32_t)cMessage[port-1][6+shift]<<0) + ((int32_t)cMessage[port-1][7+shift]<<8) + ((int32_t)cMessage[port-1][8+shift]<<16) + ((int32_t)cMessage[port-1][9+shift]<<24); break; 									
 800adc2:	2338      	movs	r3, #56	; 0x38
 800adc4:	4363      	muls	r3, r4
 800adc6:	4aa5      	ldr	r2, [pc, #660]	; (800b05c <PxMessagingTask+0x1580>)
 800adc8:	18d2      	adds	r2, r2, r3
 800adca:	4442      	add	r2, r8
 800adcc:	79d3      	ldrb	r3, [r2, #7]
 800adce:	021b      	lsls	r3, r3, #8
 800add0:	7991      	ldrb	r1, [r2, #6]
 800add2:	185b      	adds	r3, r3, r1
 800add4:	7a11      	ldrb	r1, [r2, #8]
 800add6:	0409      	lsls	r1, r1, #16
 800add8:	185b      	adds	r3, r3, r1
 800adda:	7a52      	ldrb	r2, [r2, #9]
 800addc:	0612      	lsls	r2, r2, #24
 800adde:	189b      	adds	r3, r3, r2
 800ade0:	602b      	str	r3, [r5, #0]
 800ade2:	e767      	b.n	800acb4 <PxMessagingTask+0x11d8>
											remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24);
 800ade4:	2338      	movs	r3, #56	; 0x38
 800ade6:	4363      	muls	r3, r4
 800ade8:	4a9c      	ldr	r2, [pc, #624]	; (800b05c <PxMessagingTask+0x1580>)
 800adea:	18d2      	adds	r2, r2, r3
 800adec:	4442      	add	r2, r8
 800adee:	79d3      	ldrb	r3, [r2, #7]
 800adf0:	021b      	lsls	r3, r3, #8
 800adf2:	7a11      	ldrb	r1, [r2, #8]
 800adf4:	0409      	lsls	r1, r1, #16
 800adf6:	185b      	adds	r3, r3, r1
 800adf8:	7991      	ldrb	r1, [r2, #6]
 800adfa:	185b      	adds	r3, r3, r1
 800adfc:	7a52      	ldrb	r2, [r2, #9]
 800adfe:	0612      	lsls	r2, r2, #24
 800ae00:	189b      	adds	r3, r3, r2
 800ae02:	4a97      	ldr	r2, [pc, #604]	; (800b060 <PxMessagingTask+0x1584>)
 800ae04:	6013      	str	r3, [r2, #0]
 800ae06:	2100      	movs	r1, #0
 800ae08:	6051      	str	r1, [r2, #4]
											*(float *)temp32 = *(float *)&remoteBuffer;	break;
 800ae0a:	602b      	str	r3, [r5, #0]
 800ae0c:	e752      	b.n	800acb4 <PxMessagingTask+0x11d8>
								else if ( temp32 >= FLASH_BASE && temp32 < (FLASH_BASE+FLASH_SIZE) )			// Flash
 800ae0e:	2280      	movs	r2, #128	; 0x80
 800ae10:	0292      	lsls	r2, r2, #10
 800ae12:	23f8      	movs	r3, #248	; 0xf8
 800ae14:	061b      	lsls	r3, r3, #24
 800ae16:	18eb      	adds	r3, r5, r3
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d303      	bcc.n	800ae24 <PxMessagingTask+0x1348>
									responseStatus = BOS_ERR_REMOTE_WRITE_ADDRESS;
 800ae1c:	4b91      	ldr	r3, [pc, #580]	; (800b064 <PxMessagingTask+0x1588>)
 800ae1e:	2215      	movs	r2, #21
 800ae20:	701a      	strb	r2, [r3, #0]
 800ae22:	e747      	b.n	800acb4 <PxMessagingTask+0x11d8>
									HAL_FLASH_Unlock();
 800ae24:	f006 fd98 	bl	8011958 <HAL_FLASH_Unlock>
									if (code == CODE_WRITE_REMOTE_FORCE)
 800ae28:	464b      	mov	r3, r9
 800ae2a:	2b22      	cmp	r3, #34	; 0x22
 800ae2c:	d012      	beq.n	800ae54 <PxMessagingTask+0x1378>
									if (responseStatus == BOS_OK)
 800ae2e:	4b8d      	ldr	r3, [pc, #564]	; (800b064 <PxMessagingTask+0x1588>)
 800ae30:	781b      	ldrb	r3, [r3, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d129      	bne.n	800ae8a <PxMessagingTask+0x13ae>
										switch (cMessage[port-1][1+shift])															// Requested format
 800ae36:	2238      	movs	r2, #56	; 0x38
 800ae38:	4362      	muls	r2, r4
 800ae3a:	4b88      	ldr	r3, [pc, #544]	; (800b05c <PxMessagingTask+0x1580>)
 800ae3c:	189b      	adds	r3, r3, r2
 800ae3e:	4443      	add	r3, r8
 800ae40:	785b      	ldrb	r3, [r3, #1]
 800ae42:	3b01      	subs	r3, #1
 800ae44:	b2da      	uxtb	r2, r3
 800ae46:	2a07      	cmp	r2, #7
 800ae48:	d81f      	bhi.n	800ae8a <PxMessagingTask+0x13ae>
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	009b      	lsls	r3, r3, #2
 800ae4e:	4a86      	ldr	r2, [pc, #536]	; (800b068 <PxMessagingTask+0x158c>)
 800ae50:	58d3      	ldr	r3, [r2, r3]
 800ae52:	469f      	mov	pc, r3
										erase.TypeErase = FLASH_TYPEERASE_PAGES;
 800ae54:	2300      	movs	r3, #0
 800ae56:	9311      	str	r3, [sp, #68]	; 0x44
										erase.PageAddress = temp32;
 800ae58:	9512      	str	r5, [sp, #72]	; 0x48
										erase.NbPages = 1;
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	9313      	str	r3, [sp, #76]	; 0x4c
										status = HAL_FLASHEx_Erase(&erase, &eraseError);
 800ae5e:	a910      	add	r1, sp, #64	; 0x40
 800ae60:	a811      	add	r0, sp, #68	; 0x44
 800ae62:	f006 fe4f 	bl	8011b04 <HAL_FLASHEx_Erase>
 800ae66:	900b      	str	r0, [sp, #44]	; 0x2c
										if (status != HAL_OK || eraseError != 0xFFFFFFFF) responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;							
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	d102      	bne.n	800ae72 <PxMessagingTask+0x1396>
 800ae6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae6e:	3301      	adds	r3, #1
 800ae70:	d0dd      	beq.n	800ae2e <PxMessagingTask+0x1352>
 800ae72:	4b7c      	ldr	r3, [pc, #496]	; (800b064 <PxMessagingTask+0x1588>)
 800ae74:	2216      	movs	r2, #22
 800ae76:	701a      	strb	r2, [r3, #0]
 800ae78:	e7d9      	b.n	800ae2e <PxMessagingTask+0x1352>
												if (*(__IO uint16_t *)temp32 != 0xFFFF) {
 800ae7a:	882b      	ldrh	r3, [r5, #0]
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	4a7b      	ldr	r2, [pc, #492]	; (800b06c <PxMessagingTask+0x1590>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d00c      	beq.n	800ae9e <PxMessagingTask+0x13c2>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800ae84:	4b77      	ldr	r3, [pc, #476]	; (800b064 <PxMessagingTask+0x1588>)
 800ae86:	2216      	movs	r2, #22
 800ae88:	701a      	strb	r2, [r3, #0]
									HAL_FLASH_Lock();
 800ae8a:	f006 fd79 	bl	8011980 <HAL_FLASH_Lock>
									if (status != HAL_OK)	responseStatus = BOS_ERR_REMOTE_WRITE_FLASH;
 800ae8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d100      	bne.n	800ae96 <PxMessagingTask+0x13ba>
 800ae94:	e70e      	b.n	800acb4 <PxMessagingTask+0x11d8>
 800ae96:	4b73      	ldr	r3, [pc, #460]	; (800b064 <PxMessagingTask+0x1588>)
 800ae98:	2216      	movs	r2, #22
 800ae9a:	701a      	strb	r2, [r3, #0]
 800ae9c:	e70a      	b.n	800acb4 <PxMessagingTask+0x11d8>
													remoteBuffer = cMessage[port-1][6+shift]; status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, temp32, remoteBuffer); break;
 800ae9e:	2238      	movs	r2, #56	; 0x38
 800aea0:	4362      	muls	r2, r4
 800aea2:	4b6e      	ldr	r3, [pc, #440]	; (800b05c <PxMessagingTask+0x1580>)
 800aea4:	189b      	adds	r3, r3, r2
 800aea6:	4443      	add	r3, r8
 800aea8:	799a      	ldrb	r2, [r3, #6]
 800aeaa:	2300      	movs	r3, #0
 800aeac:	496c      	ldr	r1, [pc, #432]	; (800b060 <PxMessagingTask+0x1584>)
 800aeae:	600a      	str	r2, [r1, #0]
 800aeb0:	604b      	str	r3, [r1, #4]
 800aeb2:	0029      	movs	r1, r5
 800aeb4:	2001      	movs	r0, #1
 800aeb6:	f006 fd9b 	bl	80119f0 <HAL_FLASH_Program>
 800aeba:	900b      	str	r0, [sp, #44]	; 0x2c
 800aebc:	e7e5      	b.n	800ae8a <PxMessagingTask+0x13ae>
												if (*(__IO uint16_t *)temp32 != 0xFFFF) {
 800aebe:	882b      	ldrh	r3, [r5, #0]
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	4a6a      	ldr	r2, [pc, #424]	; (800b06c <PxMessagingTask+0x1590>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d003      	beq.n	800aed0 <PxMessagingTask+0x13f4>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800aec8:	4b66      	ldr	r3, [pc, #408]	; (800b064 <PxMessagingTask+0x1588>)
 800aeca:	2216      	movs	r2, #22
 800aecc:	701a      	strb	r2, [r3, #0]
 800aece:	e7dc      	b.n	800ae8a <PxMessagingTask+0x13ae>
													remoteBuffer = ((uint16_t)cMessage[port-1][6+shift]<<0) + ((uint16_t)cMessage[port-1][7+shift]<<8);
 800aed0:	2238      	movs	r2, #56	; 0x38
 800aed2:	4362      	muls	r2, r4
 800aed4:	4b61      	ldr	r3, [pc, #388]	; (800b05c <PxMessagingTask+0x1580>)
 800aed6:	189b      	adds	r3, r3, r2
 800aed8:	4443      	add	r3, r8
 800aeda:	79da      	ldrb	r2, [r3, #7]
 800aedc:	0212      	lsls	r2, r2, #8
 800aede:	799b      	ldrb	r3, [r3, #6]
 800aee0:	18d2      	adds	r2, r2, r3
 800aee2:	2300      	movs	r3, #0
 800aee4:	495e      	ldr	r1, [pc, #376]	; (800b060 <PxMessagingTask+0x1584>)
 800aee6:	600a      	str	r2, [r1, #0]
 800aee8:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, temp32, remoteBuffer); break;
 800aeea:	0029      	movs	r1, r5
 800aeec:	2001      	movs	r0, #1
 800aeee:	f006 fd7f 	bl	80119f0 <HAL_FLASH_Program>
 800aef2:	900b      	str	r0, [sp, #44]	; 0x2c
 800aef4:	e7c9      	b.n	800ae8a <PxMessagingTask+0x13ae>
												if (*(__IO uint32_t *)temp32 != 0xFFFFFFFF) {
 800aef6:	682b      	ldr	r3, [r5, #0]
 800aef8:	3301      	adds	r3, #1
 800aefa:	d003      	beq.n	800af04 <PxMessagingTask+0x1428>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800aefc:	4b59      	ldr	r3, [pc, #356]	; (800b064 <PxMessagingTask+0x1588>)
 800aefe:	2216      	movs	r2, #22
 800af00:	701a      	strb	r2, [r3, #0]
 800af02:	e7c2      	b.n	800ae8a <PxMessagingTask+0x13ae>
													remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24); 
 800af04:	2238      	movs	r2, #56	; 0x38
 800af06:	4362      	muls	r2, r4
 800af08:	4b54      	ldr	r3, [pc, #336]	; (800b05c <PxMessagingTask+0x1580>)
 800af0a:	189b      	adds	r3, r3, r2
 800af0c:	4443      	add	r3, r8
 800af0e:	79da      	ldrb	r2, [r3, #7]
 800af10:	0212      	lsls	r2, r2, #8
 800af12:	7a19      	ldrb	r1, [r3, #8]
 800af14:	0409      	lsls	r1, r1, #16
 800af16:	1852      	adds	r2, r2, r1
 800af18:	7999      	ldrb	r1, [r3, #6]
 800af1a:	1852      	adds	r2, r2, r1
 800af1c:	7a5b      	ldrb	r3, [r3, #9]
 800af1e:	061b      	lsls	r3, r3, #24
 800af20:	18d2      	adds	r2, r2, r3
 800af22:	2300      	movs	r3, #0
 800af24:	494e      	ldr	r1, [pc, #312]	; (800b060 <PxMessagingTask+0x1584>)
 800af26:	600a      	str	r2, [r1, #0]
 800af28:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, temp32, remoteBuffer); break;
 800af2a:	0029      	movs	r1, r5
 800af2c:	2002      	movs	r0, #2
 800af2e:	f006 fd5f 	bl	80119f0 <HAL_FLASH_Program>
 800af32:	900b      	str	r0, [sp, #44]	; 0x2c
 800af34:	e7a9      	b.n	800ae8a <PxMessagingTask+0x13ae>
												if (*(__IO uint32_t *)temp32 != 0xFFFFFFFF) {
 800af36:	682b      	ldr	r3, [r5, #0]
 800af38:	3301      	adds	r3, #1
 800af3a:	d003      	beq.n	800af44 <PxMessagingTask+0x1468>
													responseStatus = BOS_ERR_REMOTE_WRITE_FLASH; break;
 800af3c:	4b49      	ldr	r3, [pc, #292]	; (800b064 <PxMessagingTask+0x1588>)
 800af3e:	2216      	movs	r2, #22
 800af40:	701a      	strb	r2, [r3, #0]
 800af42:	e7a2      	b.n	800ae8a <PxMessagingTask+0x13ae>
													remoteBuffer = ((uint32_t)cMessage[port-1][6+shift]<<0) + ((uint32_t)cMessage[port-1][7+shift]<<8) + ((uint32_t)cMessage[port-1][8+shift]<<16) + ((uint32_t)cMessage[port-1][9+shift]<<24);
 800af44:	2238      	movs	r2, #56	; 0x38
 800af46:	4362      	muls	r2, r4
 800af48:	4b44      	ldr	r3, [pc, #272]	; (800b05c <PxMessagingTask+0x1580>)
 800af4a:	189b      	adds	r3, r3, r2
 800af4c:	4443      	add	r3, r8
 800af4e:	79da      	ldrb	r2, [r3, #7]
 800af50:	0212      	lsls	r2, r2, #8
 800af52:	7a19      	ldrb	r1, [r3, #8]
 800af54:	0409      	lsls	r1, r1, #16
 800af56:	1852      	adds	r2, r2, r1
 800af58:	7999      	ldrb	r1, [r3, #6]
 800af5a:	1852      	adds	r2, r2, r1
 800af5c:	7a5b      	ldrb	r3, [r3, #9]
 800af5e:	061b      	lsls	r3, r3, #24
 800af60:	18d2      	adds	r2, r2, r3
 800af62:	2300      	movs	r3, #0
 800af64:	493e      	ldr	r1, [pc, #248]	; (800b060 <PxMessagingTask+0x1584>)
 800af66:	600a      	str	r2, [r1, #0]
 800af68:	604b      	str	r3, [r1, #4]
													status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, temp32, remoteBuffer); break;
 800af6a:	0029      	movs	r1, r5
 800af6c:	2003      	movs	r0, #3
 800af6e:	f006 fd3f 	bl	80119f0 <HAL_FLASH_Program>
 800af72:	900b      	str	r0, [sp, #44]	; 0x2c
 800af74:	e789      	b.n	800ae8a <PxMessagingTask+0x13ae>
							responseStatus = (BOS_Status) cMessage[port-1][shift];
 800af76:	4b39      	ldr	r3, [pc, #228]	; (800b05c <PxMessagingTask+0x1580>)
 800af78:	199b      	adds	r3, r3, r6
 800af7a:	5d5a      	ldrb	r2, [r3, r5]
 800af7c:	4b39      	ldr	r3, [pc, #228]	; (800b064 <PxMessagingTask+0x1588>)
 800af7e:	701a      	strb	r2, [r3, #0]
							break;	
 800af80:	2300      	movs	r3, #0
 800af82:	4698      	mov	r8, r3
 800af84:	f7fe fddf 	bl	8009b46 <PxMessagingTask+0x6a>
							writePxMutex(cMessage[port-1][shift], (char *)&cMessage[port-1][shift+1], numOfParams-1, 10, 10);
 800af88:	4642      	mov	r2, r8
 800af8a:	3a01      	subs	r2, #1
 800af8c:	b292      	uxth	r2, r2
 800af8e:	1c69      	adds	r1, r5, #1
 800af90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af92:	469c      	mov	ip, r3
 800af94:	4461      	add	r1, ip
 800af96:	4b31      	ldr	r3, [pc, #196]	; (800b05c <PxMessagingTask+0x1580>)
 800af98:	18c9      	adds	r1, r1, r3
 800af9a:	199b      	adds	r3, r3, r6
 800af9c:	5d58      	ldrb	r0, [r3, r5]
 800af9e:	230a      	movs	r3, #10
 800afa0:	9300      	str	r3, [sp, #0]
 800afa2:	f003 f881 	bl	800e0a8 <writePxMutex>
							break;
 800afa6:	2300      	movs	r3, #0
 800afa8:	4698      	mov	r8, r3
 800afaa:	f7fe fdcc 	bl	8009b46 <PxMessagingTask+0x6a>
							result = (BOS_Status) User_MessagingParser(code, port, src, dst, shift);			
 800afae:	9500      	str	r5, [sp, #0]
 800afb0:	4653      	mov	r3, sl
 800afb2:	9a06      	ldr	r2, [sp, #24]
 800afb4:	9908      	ldr	r1, [sp, #32]
 800afb6:	4648      	mov	r0, r9
 800afb8:	f7fe fd8e 	bl	8009ad8 <User_MessagingParser>
 800afbc:	4680      	mov	r8, r0
							if (result == BOS_ERR_UnknownMessage) {
 800afbe:	2801      	cmp	r0, #1
 800afc0:	d001      	beq.n	800afc6 <PxMessagingTask+0x14ea>
 800afc2:	f7fe fdc0 	bl	8009b46 <PxMessagingTask+0x6a>
								result = (BOS_Status) Module_MessagingTask(code, port, src, dst, shift);
 800afc6:	9500      	str	r5, [sp, #0]
 800afc8:	4653      	mov	r3, sl
 800afca:	9a06      	ldr	r2, [sp, #24]
 800afcc:	9908      	ldr	r1, [sp, #32]
 800afce:	4648      	mov	r0, r9
 800afd0:	f000 fdfa 	bl	800bbc8 <Module_MessagingTask>
 800afd4:	4680      	mov	r8, r0
 800afd6:	f7fe fdb1 	bl	8009b3c <PxMessagingTask+0x60>
										messageParams[0] = modParam[temp-1].paramFormat;
 800afda:	2300      	movs	r3, #0
 800afdc:	4698      	mov	r8, r3
 800afde:	f7fe fdad 	bl	8009b3c <PxMessagingTask+0x60>
										temp32 = (BOS_var_reg[cMessage[port-1][shift]-REMOTE_BOS_VAR-1]>>16) + SRAM_BASE;
 800afe2:	2300      	movs	r3, #0
 800afe4:	4698      	mov	r8, r3
 800afe6:	f7fe fda9 	bl	8009b3c <PxMessagingTask+0x60>
			SendMessageToModule(src, CODE_UNKNOWN_MESSAGE, 0);
 800afea:	2200      	movs	r2, #0
 800afec:	2100      	movs	r1, #0
 800afee:	9806      	ldr	r0, [sp, #24]
 800aff0:	f7fe fa98 	bl	8009524 <SendMessageToModule>
			result = BOS_OK;			
 800aff4:	2300      	movs	r3, #0
 800aff6:	4698      	mov	r8, r3
 800aff8:	f7fe fda5 	bl	8009b46 <PxMessagingTask+0x6a>
 800affc:	2300      	movs	r3, #0
 800affe:	4698      	mov	r8, r3
 800b000:	f7fe fda1 	bl	8009b46 <PxMessagingTask+0x6a>
									}
 800b004:	2300      	movs	r3, #0
 800b006:	4698      	mov	r8, r3
 800b008:	f7fe fd9d 	bl	8009b46 <PxMessagingTask+0x6a>
 800b00c:	2300      	movs	r3, #0
 800b00e:	4698      	mov	r8, r3
 800b010:	f7fe fd99 	bl	8009b46 <PxMessagingTask+0x6a>
 800b014:	4661      	mov	r1, ip
				shift += 4;
 800b016:	9d05      	ldr	r5, [sp, #20]
 800b018:	3504      	adds	r5, #4
				numOfParams = messageLength[port-1] - shift;
 800b01a:	1b48      	subs	r0, r1, r5
 800b01c:	b2c3      	uxtb	r3, r0
 800b01e:	4698      	mov	r8, r3
				if (result == BOS_OK)
 800b020:	f7fe fe53 	bl	8009cca <PxMessagingTask+0x1ee>
					result = BOS_ERR_WrongID;
 800b024:	2366      	movs	r3, #102	; 0x66
 800b026:	4698      	mov	r8, r3
		if (result == BOS_ERR_UnknownMessage) {
 800b028:	f7fe fd8d 	bl	8009b46 <PxMessagingTask+0x6a>
									if ( (BOS_var_reg[cMessage[port-1][shift]-1] & 0x000F) != cMessage[port-1][1+shift] ) {		
 800b02c:	2338      	movs	r3, #56	; 0x38
 800b02e:	4363      	muls	r3, r4
 800b030:	4a0a      	ldr	r2, [pc, #40]	; (800b05c <PxMessagingTask+0x1580>)
 800b032:	18d2      	adds	r2, r2, r3
 800b034:	4643      	mov	r3, r8
 800b036:	5cd3      	ldrb	r3, [r2, r3]
 800b038:	3b01      	subs	r3, #1
 800b03a:	0098      	lsls	r0, r3, #2
 800b03c:	490c      	ldr	r1, [pc, #48]	; (800b070 <PxMessagingTask+0x1594>)
 800b03e:	5841      	ldr	r1, [r0, r1]
 800b040:	4648      	mov	r0, r9
 800b042:	5c12      	ldrb	r2, [r2, r0]
 800b044:	e56d      	b.n	800ab22 <PxMessagingTask+0x1046>
					 ( dst && (dst < BOS_MULTICAST) && (dst != myID) && (myID == 1) && (code != CODE_MODULE_ID) ) )
 800b046:	4553      	cmp	r3, sl
 800b048:	d101      	bne.n	800b04e <PxMessagingTask+0x1572>
 800b04a:	f7fe fe33 	bl	8009cb4 <PxMessagingTask+0x1d8>
 800b04e:	464b      	mov	r3, r9
 800b050:	2b10      	cmp	r3, #16
 800b052:	d001      	beq.n	800b058 <PxMessagingTask+0x157c>
 800b054:	f7fe fdc1 	bl	8009bda <PxMessagingTask+0xfe>
 800b058:	f7fe fe2c 	bl	8009cb4 <PxMessagingTask+0x1d8>
 800b05c:	20000ba4 	.word	0x20000ba4
 800b060:	20000e70 	.word	0x20000e70
 800b064:	20000e78 	.word	0x20000e78
 800b068:	0801d0b8 	.word	0x0801d0b8
 800b06c:	0000ffff 	.word	0x0000ffff
 800b070:	2000666c 	.word	0x2000666c

0800b074 <LSM303SampleMagRaw>:
//	
//	return LSM303MagDisable();
//}

static Module_Status LSM303SampleMagRaw(int16_t *magX, int16_t *magY, int16_t *magZ)
{
 800b074:	b570      	push	{r4, r5, r6, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	0005      	movs	r5, r0
 800b07a:	000c      	movs	r4, r1
 800b07c:	0016      	movs	r6, r2
	int16_t *pData;
	uint8_t data[6];
	
	memset(data, 0, sizeof(data));
 800b07e:	2206      	movs	r2, #6
 800b080:	2100      	movs	r1, #0
 800b082:	4668      	mov	r0, sp
 800b084:	f009 fa75 	bl	8014572 <memset>
	
	if (LSM303AGR_MAG_Get_Raw_Magnetic(&hi2c2, data) != MEMS_SUCCESS)
 800b088:	4669      	mov	r1, sp
 800b08a:	4809      	ldr	r0, [pc, #36]	; (800b0b0 <LSM303SampleMagRaw+0x3c>)
 800b08c:	f003 f98e 	bl	800e3ac <LSM303AGR_MAG_Get_Raw_Magnetic>
 800b090:	2801      	cmp	r0, #1
 800b092:	d10b      	bne.n	800b0ac <LSM303SampleMagRaw+0x38>
		return H0BR4_ERR_LSM303;
	
	pData = (int16_t *)data;
	*magX = pData[0];
 800b094:	466b      	mov	r3, sp
 800b096:	881b      	ldrh	r3, [r3, #0]
 800b098:	802b      	strh	r3, [r5, #0]
	*magY = pData[1];
 800b09a:	466b      	mov	r3, sp
 800b09c:	885b      	ldrh	r3, [r3, #2]
 800b09e:	8023      	strh	r3, [r4, #0]
	*magZ = pData[2];
 800b0a0:	466b      	mov	r3, sp
 800b0a2:	889b      	ldrh	r3, [r3, #4]
 800b0a4:	8033      	strh	r3, [r6, #0]
	
	return H0BR4_OK;
 800b0a6:	2000      	movs	r0, #0
}
 800b0a8:	b002      	add	sp, #8
 800b0aa:	bd70      	pop	{r4, r5, r6, pc}
		return H0BR4_ERR_LSM303;
 800b0ac:	2006      	movs	r0, #6
 800b0ae:	e7fb      	b.n	800b0a8 <LSM303SampleMagRaw+0x34>
 800b0b0:	20006a64 	.word	0x20006a64

0800b0b4 <LSM303SampleMagMGauss>:

static Module_Status LSM303SampleMagMGauss(int *magX, int *magY, int *magZ)
{
 800b0b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0b6:	b083      	sub	sp, #12
 800b0b8:	0007      	movs	r7, r0
 800b0ba:	000e      	movs	r6, r1
 800b0bc:	0015      	movs	r5, r2
	Module_Status status = H0BR4_OK;
  int16_t rawMagX, rawMagY, rawMagZ;

  /* Read raw data from LSM303AGR output register. */
  if ((status = LSM303SampleMagRaw(&rawMagX, &rawMagY, &rawMagZ)) != H0BR4_OK)
 800b0be:	466b      	mov	r3, sp
 800b0c0:	1c9a      	adds	r2, r3, #2
 800b0c2:	a901      	add	r1, sp, #4
 800b0c4:	1d98      	adds	r0, r3, #6
 800b0c6:	f7ff ffd5 	bl	800b074 <LSM303SampleMagRaw>
 800b0ca:	1e04      	subs	r4, r0, #0
 800b0cc:	d125      	bne.n	800b11a <LSM303SampleMagMGauss+0x66>
    return status;

  /* Set the raw data. */
  *magX = rawMagX * (float)LSM303AGR_MAG_SENSITIVITY_FOR_FS_50G;
 800b0ce:	466b      	mov	r3, sp
 800b0d0:	3306      	adds	r3, #6
 800b0d2:	2000      	movs	r0, #0
 800b0d4:	5e18      	ldrsh	r0, [r3, r0]
 800b0d6:	f7f6 f88f 	bl	80011f8 <__aeabi_i2f>
 800b0da:	21ff      	movs	r1, #255	; 0xff
 800b0dc:	0589      	lsls	r1, r1, #22
 800b0de:	f7f5 ff51 	bl	8000f84 <__aeabi_fmul>
 800b0e2:	f7f6 f869 	bl	80011b8 <__aeabi_f2iz>
 800b0e6:	6038      	str	r0, [r7, #0]
  *magY = rawMagY * (float)LSM303AGR_MAG_SENSITIVITY_FOR_FS_50G;
 800b0e8:	ab01      	add	r3, sp, #4
 800b0ea:	2000      	movs	r0, #0
 800b0ec:	5e18      	ldrsh	r0, [r3, r0]
 800b0ee:	f7f6 f883 	bl	80011f8 <__aeabi_i2f>
 800b0f2:	21ff      	movs	r1, #255	; 0xff
 800b0f4:	0589      	lsls	r1, r1, #22
 800b0f6:	f7f5 ff45 	bl	8000f84 <__aeabi_fmul>
 800b0fa:	f7f6 f85d 	bl	80011b8 <__aeabi_f2iz>
 800b0fe:	6030      	str	r0, [r6, #0]
  *magZ = rawMagZ * (float)LSM303AGR_MAG_SENSITIVITY_FOR_FS_50G;
 800b100:	466b      	mov	r3, sp
 800b102:	3302      	adds	r3, #2
 800b104:	2000      	movs	r0, #0
 800b106:	5e18      	ldrsh	r0, [r3, r0]
 800b108:	f7f6 f876 	bl	80011f8 <__aeabi_i2f>
 800b10c:	21ff      	movs	r1, #255	; 0xff
 800b10e:	0589      	lsls	r1, r1, #22
 800b110:	f7f5 ff38 	bl	8000f84 <__aeabi_fmul>
 800b114:	f7f6 f850 	bl	80011b8 <__aeabi_f2iz>
 800b118:	6028      	str	r0, [r5, #0]
  return status;
}
 800b11a:	0020      	movs	r0, r4
 800b11c:	b003      	add	sp, #12
 800b11e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b120 <SampleMagMGaussToString>:
					}
	return status;
}

Module_Status SampleMagMGaussToString(char *cstring, size_t maxLen)
{
 800b120:	b570      	push	{r4, r5, r6, lr}
 800b122:	b086      	sub	sp, #24
 800b124:	0005      	movs	r5, r0
 800b126:	000e      	movs	r6, r1
	Module_Status status = H0BR4_OK;
	int x = 0, y = 0, z = 0;
 800b128:	2300      	movs	r3, #0
 800b12a:	9305      	str	r3, [sp, #20]
 800b12c:	9304      	str	r3, [sp, #16]
 800b12e:	9303      	str	r3, [sp, #12]
	
	if ((status = LSM303SampleMagMGauss(&x, &y, &z)) != H0BR4_OK)
 800b130:	aa03      	add	r2, sp, #12
 800b132:	a904      	add	r1, sp, #16
 800b134:	a805      	add	r0, sp, #20
 800b136:	f7ff ffbd 	bl	800b0b4 <LSM303SampleMagMGauss>
 800b13a:	1e04      	subs	r4, r0, #0
 800b13c:	d002      	beq.n	800b144 <SampleMagMGaussToString+0x24>
		return status;
	
	snprintf(cstring, maxLen, "Mag(mGauss) | X: %d, Y: %d, Z: %d\r\n", x, y, z);
	return status;
}
 800b13e:	0020      	movs	r0, r4
 800b140:	b006      	add	sp, #24
 800b142:	bd70      	pop	{r4, r5, r6, pc}
	snprintf(cstring, maxLen, "Mag(mGauss) | X: %d, Y: %d, Z: %d\r\n", x, y, z);
 800b144:	9b03      	ldr	r3, [sp, #12]
 800b146:	9301      	str	r3, [sp, #4]
 800b148:	9b04      	ldr	r3, [sp, #16]
 800b14a:	9300      	str	r3, [sp, #0]
 800b14c:	9b05      	ldr	r3, [sp, #20]
 800b14e:	4a03      	ldr	r2, [pc, #12]	; (800b15c <SampleMagMGaussToString+0x3c>)
 800b150:	0031      	movs	r1, r6
 800b152:	0028      	movs	r0, r5
 800b154:	f009 fc02 	bl	801495c <snprintf>
	return status;
 800b158:	e7f1      	b.n	800b13e <SampleMagMGaussToString+0x1e>
 800b15a:	46c0      	nop			; (mov r8, r8)
 800b15c:	0801d0d8 	.word	0x0801d0d8

0800b160 <SampleMagMGaussToBuf>:

Module_Status SampleMagMGaussToBuf(float *buffer)
{
 800b160:	b530      	push	{r4, r5, lr}
 800b162:	b085      	sub	sp, #20
 800b164:	0004      	movs	r4, r0
	int iMagMGauss[3];
	Module_Status status = LSM303SampleMagMGauss(iMagMGauss, iMagMGauss + 1, iMagMGauss + 2);
 800b166:	aa03      	add	r2, sp, #12
 800b168:	a902      	add	r1, sp, #8
 800b16a:	a801      	add	r0, sp, #4
 800b16c:	f7ff ffa2 	bl	800b0b4 <LSM303SampleMagMGauss>
 800b170:	0005      	movs	r5, r0
	
	buffer[0] = iMagMGauss[0];
 800b172:	9801      	ldr	r0, [sp, #4]
 800b174:	f7f6 f840 	bl	80011f8 <__aeabi_i2f>
 800b178:	6020      	str	r0, [r4, #0]
	buffer[1] = iMagMGauss[1];
 800b17a:	9802      	ldr	r0, [sp, #8]
 800b17c:	f7f6 f83c 	bl	80011f8 <__aeabi_i2f>
 800b180:	6060      	str	r0, [r4, #4]
	buffer[2] = iMagMGauss[2];
 800b182:	9803      	ldr	r0, [sp, #12]
 800b184:	f7f6 f838 	bl	80011f8 <__aeabi_i2f>
 800b188:	60a0      	str	r0, [r4, #8]
	
	return status;
}
 800b18a:	0028      	movs	r0, r5
 800b18c:	b005      	add	sp, #20
 800b18e:	bd30      	pop	{r4, r5, pc}

0800b190 <SampleMagMGaussToPort>:
{
 800b190:	b570      	push	{r4, r5, r6, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	0006      	movs	r6, r0
 800b196:	000d      	movs	r5, r1
	if ((status = SampleMagMGaussToBuf(buffer)) != H0BR4_OK)
 800b198:	a801      	add	r0, sp, #4
 800b19a:	f7ff ffe1 	bl	800b160 <SampleMagMGaussToBuf>
 800b19e:	1e04      	subs	r4, r0, #0
 800b1a0:	d123      	bne.n	800b1ea <SampleMagMGaussToPort+0x5a>
	if (module==myID){
 800b1a2:	4b23      	ldr	r3, [pc, #140]	; (800b230 <SampleMagMGaussToPort+0xa0>)
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	42ab      	cmp	r3, r5
 800b1a8:	d022      	beq.n	800b1f0 <SampleMagMGaussToPort+0x60>
						messageParams[0]=port;
 800b1aa:	4b22      	ldr	r3, [pc, #136]	; (800b234 <SampleMagMGaussToPort+0xa4>)
 800b1ac:	701e      	strb	r6, [r3, #0]
					  messageParams[1] = *((__IO uint8_t *)(&buffer[0])+3);  messageParams[2] = *((__IO uint8_t *)(&buffer[0])+2);
 800b1ae:	aa01      	add	r2, sp, #4
 800b1b0:	78d1      	ldrb	r1, [r2, #3]
 800b1b2:	7059      	strb	r1, [r3, #1]
 800b1b4:	7891      	ldrb	r1, [r2, #2]
 800b1b6:	7099      	strb	r1, [r3, #2]
						messageParams[3] = *((__IO uint8_t *)(&buffer[0])+1);  messageParams[4] = *((__IO uint8_t *)(&buffer[0])+0);
 800b1b8:	7851      	ldrb	r1, [r2, #1]
 800b1ba:	70d9      	strb	r1, [r3, #3]
 800b1bc:	7811      	ldrb	r1, [r2, #0]
 800b1be:	7119      	strb	r1, [r3, #4]
					  messageParams[5] = *((__IO uint8_t *)(&buffer[1])+3);  messageParams[6] = *((__IO uint8_t *)(&buffer[1])+2);
 800b1c0:	79d1      	ldrb	r1, [r2, #7]
 800b1c2:	7159      	strb	r1, [r3, #5]
 800b1c4:	7991      	ldrb	r1, [r2, #6]
 800b1c6:	7199      	strb	r1, [r3, #6]
						messageParams[7] = *((__IO uint8_t *)(&buffer[1])+1);  messageParams[8] = *((__IO uint8_t *)(&buffer[1])+0);
 800b1c8:	7951      	ldrb	r1, [r2, #5]
 800b1ca:	71d9      	strb	r1, [r3, #7]
 800b1cc:	7911      	ldrb	r1, [r2, #4]
 800b1ce:	7219      	strb	r1, [r3, #8]
					  messageParams[9] = *((__IO uint8_t *)(&buffer[2])+3);  messageParams[10] = *((__IO uint8_t *)(&buffer[2])+2);
 800b1d0:	7ad1      	ldrb	r1, [r2, #11]
 800b1d2:	7259      	strb	r1, [r3, #9]
 800b1d4:	7a91      	ldrb	r1, [r2, #10]
 800b1d6:	7299      	strb	r1, [r3, #10]
						messageParams[11] = *((__IO uint8_t *)(&buffer[2])+1); messageParams[12] = *((__IO uint8_t *)(&buffer[2])+0);
 800b1d8:	7a51      	ldrb	r1, [r2, #9]
 800b1da:	72d9      	strb	r1, [r3, #11]
 800b1dc:	7a12      	ldrb	r2, [r2, #8]
 800b1de:	731a      	strb	r2, [r3, #12]
						SendMessageToModule(module, CODE_PORT_FORWARD, (sizeof(float)*3)+1);
 800b1e0:	220d      	movs	r2, #13
 800b1e2:	2123      	movs	r1, #35	; 0x23
 800b1e4:	0028      	movs	r0, r5
 800b1e6:	f7fe f99d 	bl	8009524 <SendMessageToModule>
}
 800b1ea:	0020      	movs	r0, r4
 800b1ec:	b004      	add	sp, #16
 800b1ee:	bd70      	pop	{r4, r5, r6, pc}
						temp[0] = *((__IO uint8_t *)(&buffer[0])+3);  temp[1] = *((__IO uint8_t *)(&buffer[0])+2);
 800b1f0:	ab01      	add	r3, sp, #4
 800b1f2:	78da      	ldrb	r2, [r3, #3]
 800b1f4:	4910      	ldr	r1, [pc, #64]	; (800b238 <SampleMagMGaussToPort+0xa8>)
 800b1f6:	700a      	strb	r2, [r1, #0]
 800b1f8:	789a      	ldrb	r2, [r3, #2]
 800b1fa:	704a      	strb	r2, [r1, #1]
						temp[2] = *((__IO uint8_t *)(&buffer[0])+1);  temp[3] = *((__IO uint8_t *)(&buffer[0])+0);
 800b1fc:	785a      	ldrb	r2, [r3, #1]
 800b1fe:	708a      	strb	r2, [r1, #2]
 800b200:	781a      	ldrb	r2, [r3, #0]
 800b202:	70ca      	strb	r2, [r1, #3]
		        temp[4] = *((__IO uint8_t *)(&buffer[1])+3);  temp[5] = *((__IO uint8_t *)(&buffer[1])+2);
 800b204:	79da      	ldrb	r2, [r3, #7]
 800b206:	710a      	strb	r2, [r1, #4]
 800b208:	799a      	ldrb	r2, [r3, #6]
 800b20a:	714a      	strb	r2, [r1, #5]
						temp[6] = *((__IO uint8_t *)(&buffer[1])+1);  temp[7] = *((__IO uint8_t *)(&buffer[1])+0);
 800b20c:	795a      	ldrb	r2, [r3, #5]
 800b20e:	718a      	strb	r2, [r1, #6]
 800b210:	791a      	ldrb	r2, [r3, #4]
 800b212:	71ca      	strb	r2, [r1, #7]
		        temp[8] = *((__IO uint8_t *)(&buffer[2])+3);  temp[9] = *((__IO uint8_t *)(&buffer[2])+2);
 800b214:	7ada      	ldrb	r2, [r3, #11]
 800b216:	720a      	strb	r2, [r1, #8]
 800b218:	7a9a      	ldrb	r2, [r3, #10]
 800b21a:	724a      	strb	r2, [r1, #9]
						temp[10] = *((__IO uint8_t *)(&buffer[2])+1); temp[11] = *((__IO uint8_t *)(&buffer[2])+0);
 800b21c:	7a5a      	ldrb	r2, [r3, #9]
 800b21e:	728a      	strb	r2, [r1, #10]
 800b220:	7a1b      	ldrb	r3, [r3, #8]
 800b222:	72cb      	strb	r3, [r1, #11]
						writePxITMutex(port, (char *)&temp[0], 12*sizeof(uint8_t), 10);
 800b224:	230a      	movs	r3, #10
 800b226:	220c      	movs	r2, #12
 800b228:	0030      	movs	r0, r6
 800b22a:	f002 ff69 	bl	800e100 <writePxITMutex>
 800b22e:	e7dc      	b.n	800b1ea <SampleMagMGaussToPort+0x5a>
 800b230:	20000070 	.word	0x20000070
 800b234:	20000da4 	.word	0x20000da4
 800b238:	200014ac 	.word	0x200014ac

0800b23c <LSM6DS3SampleTempCelsius>:
{
 800b23c:	b510      	push	{r4, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	0004      	movs	r4, r0
	if (LSM6DS3_ACC_GYRO_ReadReg(&hi2c2, LSM6DS3_ACC_GYRO_OUT_TEMP_L, buff, 2) != MEMS_SUCCESS)
 800b242:	2302      	movs	r3, #2
 800b244:	aa01      	add	r2, sp, #4
 800b246:	2120      	movs	r1, #32
 800b248:	480c      	ldr	r0, [pc, #48]	; (800b27c <LSM6DS3SampleTempCelsius+0x40>)
 800b24a:	f003 f900 	bl	800e44e <LSM6DS3_ACC_GYRO_ReadReg>
 800b24e:	2801      	cmp	r0, #1
 800b250:	d112      	bne.n	800b278 <LSM6DS3SampleTempCelsius+0x3c>
	int16_t rawTemp = concatBytes(buff[0], buff[1]);
 800b252:	aa01      	add	r2, sp, #4
 800b254:	7853      	ldrb	r3, [r2, #1]
 800b256:	021b      	lsls	r3, r3, #8
 800b258:	7810      	ldrb	r0, [r2, #0]
 800b25a:	4318      	orrs	r0, r3
	*temp = (((float)rawTemp)/16) + 25;
 800b25c:	b200      	sxth	r0, r0
 800b25e:	f7f5 ffcb 	bl	80011f8 <__aeabi_i2f>
 800b262:	21f6      	movs	r1, #246	; 0xf6
 800b264:	0589      	lsls	r1, r1, #22
 800b266:	f7f5 fe8d 	bl	8000f84 <__aeabi_fmul>
 800b26a:	4905      	ldr	r1, [pc, #20]	; (800b280 <LSM6DS3SampleTempCelsius+0x44>)
 800b26c:	f7f5 fb24 	bl	80008b8 <__aeabi_fadd>
 800b270:	6020      	str	r0, [r4, #0]
	return H0BR4_OK;
 800b272:	2000      	movs	r0, #0
}
 800b274:	b002      	add	sp, #8
 800b276:	bd10      	pop	{r4, pc}
		return H0BR4_ERR_LSM6DS3;
 800b278:	2005      	movs	r0, #5
 800b27a:	e7fb      	b.n	800b274 <LSM6DS3SampleTempCelsius+0x38>
 800b27c:	20006a64 	.word	0x20006a64
 800b280:	41c80000 	.word	0x41c80000

0800b284 <SampleTempCelsius>:

Module_Status SampleTempCelsius(float *temp)
{
 800b284:	b510      	push	{r4, lr}
	return LSM6DS3SampleTempCelsius(temp);
 800b286:	f7ff ffd9 	bl	800b23c <LSM6DS3SampleTempCelsius>
}
 800b28a:	bd10      	pop	{r4, pc}

0800b28c <SampleTempCToString>:
					}
	return status;
}

Module_Status SampleTempCToString(char *cstring, size_t maxLen)
{
 800b28c:	b570      	push	{r4, r5, r6, lr}
 800b28e:	b084      	sub	sp, #16
 800b290:	0005      	movs	r5, r0
 800b292:	000e      	movs	r6, r1
	Module_Status status = H0BR4_OK;
	float temp;
	
	if ((status = LSM6DS3SampleTempCelsius(&temp)) != H0BR4_OK)
 800b294:	a803      	add	r0, sp, #12
 800b296:	f7ff ffd1 	bl	800b23c <LSM6DS3SampleTempCelsius>
 800b29a:	1e04      	subs	r4, r0, #0
 800b29c:	d002      	beq.n	800b2a4 <SampleTempCToString+0x18>
		return status;
	
	snprintf(cstring, maxLen, "Temp(Celsius) | %0.2f\r\n", temp);
	return status;
}
 800b29e:	0020      	movs	r0, r4
 800b2a0:	b004      	add	sp, #16
 800b2a2:	bd70      	pop	{r4, r5, r6, pc}
	snprintf(cstring, maxLen, "Temp(Celsius) | %0.2f\r\n", temp);
 800b2a4:	9803      	ldr	r0, [sp, #12]
 800b2a6:	f7f7 fe05 	bl	8002eb4 <__aeabi_f2d>
 800b2aa:	9000      	str	r0, [sp, #0]
 800b2ac:	9101      	str	r1, [sp, #4]
 800b2ae:	4a03      	ldr	r2, [pc, #12]	; (800b2bc <SampleTempCToString+0x30>)
 800b2b0:	0031      	movs	r1, r6
 800b2b2:	0028      	movs	r0, r5
 800b2b4:	f009 fb52 	bl	801495c <snprintf>
	return status;
 800b2b8:	e7f1      	b.n	800b29e <SampleTempCToString+0x12>
 800b2ba:	46c0      	nop			; (mov r8, r8)
 800b2bc:	0801d0fc 	.word	0x0801d0fc

0800b2c0 <SampleTempCToPort>:
{
 800b2c0:	b570      	push	{r4, r5, r6, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	0006      	movs	r6, r0
 800b2c6:	000d      	movs	r5, r1
	if ((status = LSM6DS3SampleTempCelsius(&temp)) != H0BR4_OK)
 800b2c8:	a803      	add	r0, sp, #12
 800b2ca:	f7ff ffb7 	bl	800b23c <LSM6DS3SampleTempCelsius>
 800b2ce:	1e04      	subs	r4, r0, #0
 800b2d0:	d113      	bne.n	800b2fa <SampleTempCToPort+0x3a>
if (module==myID){
 800b2d2:	4b14      	ldr	r3, [pc, #80]	; (800b324 <SampleTempCToPort+0x64>)
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	42ab      	cmp	r3, r5
 800b2d8:	d012      	beq.n	800b300 <SampleTempCToPort+0x40>
						messageParams[0]=port;
 800b2da:	4b13      	ldr	r3, [pc, #76]	; (800b328 <SampleTempCToPort+0x68>)
 800b2dc:	701e      	strb	r6, [r3, #0]
					  messageParams[1] = *((__IO uint8_t *)(&temp)+3);
 800b2de:	aa03      	add	r2, sp, #12
 800b2e0:	78d1      	ldrb	r1, [r2, #3]
 800b2e2:	7059      	strb	r1, [r3, #1]
						messageParams[2] = *((__IO uint8_t *)(&temp)+2);
 800b2e4:	7891      	ldrb	r1, [r2, #2]
 800b2e6:	7099      	strb	r1, [r3, #2]
						messageParams[3] = *((__IO uint8_t *)(&temp)+1);
 800b2e8:	7851      	ldrb	r1, [r2, #1]
 800b2ea:	70d9      	strb	r1, [r3, #3]
						messageParams[4] = *((__IO uint8_t *)(&temp)+0);
 800b2ec:	7812      	ldrb	r2, [r2, #0]
 800b2ee:	711a      	strb	r2, [r3, #4]
						SendMessageToModule(module, CODE_PORT_FORWARD, sizeof(float)+1);
 800b2f0:	2205      	movs	r2, #5
 800b2f2:	2123      	movs	r1, #35	; 0x23
 800b2f4:	0028      	movs	r0, r5
 800b2f6:	f7fe f915 	bl	8009524 <SendMessageToModule>
}
 800b2fa:	0020      	movs	r0, r4
 800b2fc:	b004      	add	sp, #16
 800b2fe:	bd70      	pop	{r4, r5, r6, pc}
						tempD[0] = *((__IO uint8_t *)(&temp)+3);
 800b300:	ab03      	add	r3, sp, #12
 800b302:	78da      	ldrb	r2, [r3, #3]
 800b304:	4909      	ldr	r1, [pc, #36]	; (800b32c <SampleTempCToPort+0x6c>)
 800b306:	700a      	strb	r2, [r1, #0]
						tempD[1] = *((__IO uint8_t *)(&temp)+2);
 800b308:	789a      	ldrb	r2, [r3, #2]
 800b30a:	704a      	strb	r2, [r1, #1]
						tempD[2] = *((__IO uint8_t *)(&temp)+1);
 800b30c:	785a      	ldrb	r2, [r3, #1]
 800b30e:	708a      	strb	r2, [r1, #2]
						tempD[3] = *((__IO uint8_t *)(&temp)+0);
 800b310:	781b      	ldrb	r3, [r3, #0]
 800b312:	70cb      	strb	r3, [r1, #3]
						writePxMutex(port, (char *)&tempD[0], 4*sizeof(uint8_t), 10, 10);
 800b314:	230a      	movs	r3, #10
 800b316:	9300      	str	r3, [sp, #0]
 800b318:	2204      	movs	r2, #4
 800b31a:	0030      	movs	r0, r6
 800b31c:	f002 fec4 	bl	800e0a8 <writePxMutex>
 800b320:	e7eb      	b.n	800b2fa <SampleTempCToPort+0x3a>
 800b322:	46c0      	nop			; (mov r8, r8)
 800b324:	20000070 	.word	0x20000070
 800b328:	20000da4 	.word	0x20000da4
 800b32c:	200014b8 	.word	0x200014b8

0800b330 <StreamMemsToPort>:
{
 800b330:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b332:	46d6      	mov	lr, sl
 800b334:	464f      	mov	r7, r9
 800b336:	4646      	mov	r6, r8
 800b338:	b5c0      	push	{r6, r7, lr}
 800b33a:	0005      	movs	r5, r0
 800b33c:	000e      	movs	r6, r1
 800b33e:	0017      	movs	r7, r2
 800b340:	9a08      	ldr	r2, [sp, #32]
 800b342:	4690      	mov	r8, r2
	if (period < MIN_MEMS_PERIOD_MS)
 800b344:	2fc7      	cmp	r7, #199	; 0xc7
 800b346:	d932      	bls.n	800b3ae <StreamMemsToPort+0x7e>
	if (port == 0)
 800b348:	2800      	cmp	r0, #0
 800b34a:	d032      	beq.n	800b3b2 <StreamMemsToPort+0x82>
	if (port == PcPort) // Check if CLI is not enabled at that port!
 800b34c:	4a1e      	ldr	r2, [pc, #120]	; (800b3c8 <StreamMemsToPort+0x98>)
 800b34e:	7812      	ldrb	r2, [r2, #0]
 800b350:	4282      	cmp	r2, r0
 800b352:	d030      	beq.n	800b3b6 <StreamMemsToPort+0x86>
	if (period > timeout)
 800b354:	46ba      	mov	sl, r7
 800b356:	429f      	cmp	r7, r3
 800b358:	d200      	bcs.n	800b35c <StreamMemsToPort+0x2c>
 800b35a:	469a      	mov	sl, r3
	long numTimes = timeout / period;
 800b35c:	0039      	movs	r1, r7
 800b35e:	4650      	mov	r0, sl
 800b360:	f7f4 fef6 	bl	8000150 <__udivsi3>
 800b364:	0004      	movs	r4, r0
	stopStream = false;
 800b366:	4b19      	ldr	r3, [pc, #100]	; (800b3cc <StreamMemsToPort+0x9c>)
 800b368:	2200      	movs	r2, #0
 800b36a:	701a      	strb	r2, [r3, #0]
		vTaskDelay(pdMS_TO_TICKS(period));
 800b36c:	0178      	lsls	r0, r7, #5
 800b36e:	1bc0      	subs	r0, r0, r7
 800b370:	0080      	lsls	r0, r0, #2
 800b372:	19c0      	adds	r0, r0, r7
 800b374:	00c0      	lsls	r0, r0, #3
 800b376:	21fa      	movs	r1, #250	; 0xfa
 800b378:	0089      	lsls	r1, r1, #2
 800b37a:	f7f4 fee9 	bl	8000150 <__udivsi3>
 800b37e:	0007      	movs	r7, r0
		if (stopStream) {
 800b380:	4b12      	ldr	r3, [pc, #72]	; (800b3cc <StreamMemsToPort+0x9c>)
 800b382:	4699      	mov	r9, r3
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 800b384:	e00c      	b.n	800b3a0 <StreamMemsToPort+0x70>
		if ((status = function(port, module)) != H0BR4_OK)
 800b386:	0031      	movs	r1, r6
 800b388:	0028      	movs	r0, r5
 800b38a:	47c0      	blx	r8
 800b38c:	2800      	cmp	r0, #0
 800b38e:	d115      	bne.n	800b3bc <StreamMemsToPort+0x8c>
		vTaskDelay(pdMS_TO_TICKS(period));
 800b390:	0038      	movs	r0, r7
 800b392:	f004 fc77 	bl	800fc84 <vTaskDelay>
		if (stopStream) {
 800b396:	3c01      	subs	r4, #1
 800b398:	464b      	mov	r3, r9
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d10c      	bne.n	800b3ba <StreamMemsToPort+0x8a>
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 800b3a0:	2c00      	cmp	r4, #0
 800b3a2:	dcf0      	bgt.n	800b386 <StreamMemsToPort+0x56>
 800b3a4:	4653      	mov	r3, sl
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	d0ed      	beq.n	800b386 <StreamMemsToPort+0x56>
 800b3aa:	2000      	movs	r0, #0
 800b3ac:	e006      	b.n	800b3bc <StreamMemsToPort+0x8c>
		return H0BR4_ERR_WrongParams;
 800b3ae:	200b      	movs	r0, #11
 800b3b0:	e004      	b.n	800b3bc <StreamMemsToPort+0x8c>
		return H0BR4_ERR_WrongParams;
 800b3b2:	200b      	movs	r0, #11
 800b3b4:	e002      	b.n	800b3bc <StreamMemsToPort+0x8c>
		return H0BR4_ERR_BUSY;
 800b3b6:	2007      	movs	r0, #7
 800b3b8:	e000      	b.n	800b3bc <StreamMemsToPort+0x8c>
			status = H0BR4_ERR_TERMINATED;
 800b3ba:	200a      	movs	r0, #10
}
 800b3bc:	bce0      	pop	{r5, r6, r7}
 800b3be:	46ba      	mov	sl, r7
 800b3c0:	46b1      	mov	r9, r6
 800b3c2:	46a8      	mov	r8, r5
 800b3c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b3c6:	46c0      	nop			; (mov r8, r8)
 800b3c8:	20000b67 	.word	0x20000b67
 800b3cc:	20001490 	.word	0x20001490

0800b3d0 <StreamMemsToCLI>:
{
 800b3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3d2:	46de      	mov	lr, fp
 800b3d4:	4657      	mov	r7, sl
 800b3d6:	464e      	mov	r6, r9
 800b3d8:	4645      	mov	r5, r8
 800b3da:	b5e0      	push	{r5, r6, r7, lr}
 800b3dc:	b087      	sub	sp, #28
 800b3de:	0004      	movs	r4, r0
 800b3e0:	4692      	mov	sl, r2
	if (period < MIN_MEMS_PERIOD_MS)
 800b3e2:	28c7      	cmp	r0, #199	; 0xc7
 800b3e4:	d800      	bhi.n	800b3e8 <StreamMemsToCLI+0x18>
 800b3e6:	e07c      	b.n	800b4e2 <StreamMemsToCLI+0x112>
	if (period > timeout)
 800b3e8:	4680      	mov	r8, r0
 800b3ea:	4288      	cmp	r0, r1
 800b3ec:	d200      	bcs.n	800b3f0 <StreamMemsToCLI+0x20>
 800b3ee:	4688      	mov	r8, r1
	long numTimes = timeout / period;
 800b3f0:	0021      	movs	r1, r4
 800b3f2:	4640      	mov	r0, r8
 800b3f4:	f7f4 feac 	bl	8000150 <__udivsi3>
 800b3f8:	4681      	mov	r9, r0
	stopStream = false;
 800b3fa:	4b3b      	ldr	r3, [pc, #236]	; (800b4e8 <StreamMemsToCLI+0x118>)
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	701a      	strb	r2, [r3, #0]
	long numDeltaDelay =  period / DELTA_SLEEP_MS;
 800b400:	2164      	movs	r1, #100	; 0x64
 800b402:	0020      	movs	r0, r4
 800b404:	f7f4 fea4 	bl	8000150 <__udivsi3>
	while (numDeltaDelay-- > 0) {
 800b408:	1e43      	subs	r3, r0, #1
 800b40a:	9304      	str	r3, [sp, #16]
	unsigned lastDelayMS = period % DELTA_SLEEP_MS;
 800b40c:	2164      	movs	r1, #100	; 0x64
 800b40e:	0020      	movs	r0, r4
 800b410:	f7f4 ff24 	bl	800025c <__aeabi_uidivmod>
	vTaskDelay(pdMS_TO_TICKS(lastDelayMS));
 800b414:	0148      	lsls	r0, r1, #5
 800b416:	1a40      	subs	r0, r0, r1
 800b418:	0080      	lsls	r0, r0, #2
 800b41a:	1840      	adds	r0, r0, r1
 800b41c:	00c0      	lsls	r0, r0, #3
 800b41e:	21fa      	movs	r1, #250	; 0xfa
 800b420:	0089      	lsls	r1, r1, #2
 800b422:	f7f4 fe95 	bl	8000150 <__udivsi3>
 800b426:	9005      	str	r0, [sp, #20]
	int8_t *pcOutputString = NULL;
 800b428:	2400      	movs	r4, #0
		writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800b42a:	4b30      	ldr	r3, [pc, #192]	; (800b4ec <StreamMemsToCLI+0x11c>)
 800b42c:	469b      	mov	fp, r3
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 800b42e:	464b      	mov	r3, r9
 800b430:	2b00      	cmp	r3, #0
 800b432:	dd51      	ble.n	800b4d8 <StreamMemsToCLI+0x108>
		pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800b434:	f003 fc86 	bl	800ed44 <FreeRTOS_CLIGetOutputBuffer>
 800b438:	0004      	movs	r4, r0
		if ((status = function((char *)pcOutputString, 100)) != H0BR4_OK)
 800b43a:	2164      	movs	r1, #100	; 0x64
 800b43c:	47d0      	blx	sl
 800b43e:	1e05      	subs	r5, r0, #0
 800b440:	d12f      	bne.n	800b4a2 <StreamMemsToCLI+0xd2>
		writePxMutex(PcPort, (char *)pcOutputString, strlen((char *)pcOutputString), cmd500ms, HAL_MAX_DELAY);
 800b442:	0020      	movs	r0, r4
 800b444:	f7f4 fe68 	bl	8000118 <strlen>
 800b448:	23fa      	movs	r3, #250	; 0xfa
 800b44a:	b282      	uxth	r2, r0
 800b44c:	4659      	mov	r1, fp
 800b44e:	7808      	ldrb	r0, [r1, #0]
 800b450:	2101      	movs	r1, #1
 800b452:	4249      	negs	r1, r1
 800b454:	9100      	str	r1, [sp, #0]
 800b456:	005b      	lsls	r3, r3, #1
 800b458:	0021      	movs	r1, r4
 800b45a:	f002 fe25 	bl	800e0a8 <writePxMutex>
	while (numDeltaDelay-- > 0) {
 800b45e:	9b04      	ldr	r3, [sp, #16]
 800b460:	9303      	str	r3, [sp, #12]
			if (UARTRxBuf[PcPort-1][chr] == '\r') {
 800b462:	4f22      	ldr	r7, [pc, #136]	; (800b4ec <StreamMemsToCLI+0x11c>)
 800b464:	4e22      	ldr	r6, [pc, #136]	; (800b4f0 <StreamMemsToCLI+0x120>)
		vTaskDelay(pdMS_TO_TICKS(DELTA_SLEEP_MS));
 800b466:	2064      	movs	r0, #100	; 0x64
 800b468:	f004 fc0c 	bl	800fc84 <vTaskDelay>
			if (UARTRxBuf[PcPort-1][chr] == '\r') {
 800b46c:	783b      	ldrb	r3, [r7, #0]
 800b46e:	3b01      	subs	r3, #1
 800b470:	0199      	lsls	r1, r3, #6
 800b472:	1989      	adds	r1, r1, r6
 800b474:	2200      	movs	r2, #0
 800b476:	5c88      	ldrb	r0, [r1, r2]
 800b478:	280d      	cmp	r0, #13
 800b47a:	d00c      	beq.n	800b496 <StreamMemsToCLI+0xc6>
		for (uint8_t chr=0 ; chr<MSG_RX_BUF_SIZE ; chr++)
 800b47c:	3201      	adds	r2, #1
 800b47e:	2a40      	cmp	r2, #64	; 0x40
 800b480:	d1f9      	bne.n	800b476 <StreamMemsToCLI+0xa6>
		if (stopStream)
 800b482:	4b19      	ldr	r3, [pc, #100]	; (800b4e8 <StreamMemsToCLI+0x118>)
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d10b      	bne.n	800b4a2 <StreamMemsToCLI+0xd2>
	while (numDeltaDelay-- > 0) {
 800b48a:	9a03      	ldr	r2, [sp, #12]
 800b48c:	1e53      	subs	r3, r2, #1
 800b48e:	2a00      	cmp	r2, #0
 800b490:	dd1a      	ble.n	800b4c8 <StreamMemsToCLI+0xf8>
 800b492:	9303      	str	r3, [sp, #12]
 800b494:	e7e7      	b.n	800b466 <StreamMemsToCLI+0x96>
 800b496:	0010      	movs	r0, r2
				UARTRxBuf[PcPort-1][chr] = 0;
 800b498:	019b      	lsls	r3, r3, #6
 800b49a:	4a15      	ldr	r2, [pc, #84]	; (800b4f0 <StreamMemsToCLI+0x120>)
 800b49c:	18d3      	adds	r3, r2, r3
 800b49e:	2200      	movs	r2, #0
 800b4a0:	541a      	strb	r2, [r3, r0]
	memset((char *) pcOutputString, 0, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 800b4a2:	2299      	movs	r2, #153	; 0x99
 800b4a4:	0092      	lsls	r2, r2, #2
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	0020      	movs	r0, r4
 800b4aa:	f009 f862 	bl	8014572 <memset>
  sprintf((char *)pcOutputString, "\r\n");
 800b4ae:	2203      	movs	r2, #3
 800b4b0:	4910      	ldr	r1, [pc, #64]	; (800b4f4 <StreamMemsToCLI+0x124>)
 800b4b2:	0020      	movs	r0, r4
 800b4b4:	f009 f854 	bl	8014560 <memcpy>
}
 800b4b8:	0028      	movs	r0, r5
 800b4ba:	b007      	add	sp, #28
 800b4bc:	bcf0      	pop	{r4, r5, r6, r7}
 800b4be:	46bb      	mov	fp, r7
 800b4c0:	46b2      	mov	sl, r6
 800b4c2:	46a9      	mov	r9, r5
 800b4c4:	46a0      	mov	r8, r4
 800b4c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	425b      	negs	r3, r3
 800b4cc:	469c      	mov	ip, r3
 800b4ce:	44e1      	add	r9, ip
	vTaskDelay(pdMS_TO_TICKS(lastDelayMS));
 800b4d0:	9805      	ldr	r0, [sp, #20]
 800b4d2:	f004 fbd7 	bl	800fc84 <vTaskDelay>
	return H0BR4_OK;
 800b4d6:	e7aa      	b.n	800b42e <StreamMemsToCLI+0x5e>
	while ((numTimes-- > 0) || (timeout >= MAX_MEMS_TIMEOUT_MS)) {
 800b4d8:	4643      	mov	r3, r8
 800b4da:	3301      	adds	r3, #1
 800b4dc:	d0aa      	beq.n	800b434 <StreamMemsToCLI+0x64>
 800b4de:	2500      	movs	r5, #0
 800b4e0:	e7df      	b.n	800b4a2 <StreamMemsToCLI+0xd2>
		return H0BR4_ERR_WrongParams;
 800b4e2:	250b      	movs	r5, #11
 800b4e4:	e7e8      	b.n	800b4b8 <StreamMemsToCLI+0xe8>
 800b4e6:	46c0      	nop			; (mov r8, r8)
 800b4e8:	20001490 	.word	0x20001490
 800b4ec:	20000b67 	.word	0x20000b67
 800b4f0:	20001008 	.word	0x20001008
 800b4f4:	0801c42c 	.word	0x0801c42c

0800b4f8 <StopStreamCommand>:
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Error reading Sensor\r\n");
	return pdFALSE;
}

static portBASE_TYPE StopStreamCommand(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
 800b4f8:	b510      	push	{r4, lr}
	// Make sure we return something
	pcWriteBuffer[0] = '\0';
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	7003      	strb	r3, [r0, #0]
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Stopping Streaming MEMS...\r\n");
 800b4fe:	4a04      	ldr	r2, [pc, #16]	; (800b510 <StopStreamCommand+0x18>)
 800b500:	f009 fa2c 	bl	801495c <snprintf>
	stopStream = true;
 800b504:	4b03      	ldr	r3, [pc, #12]	; (800b514 <StopStreamCommand+0x1c>)
 800b506:	2201      	movs	r2, #1
 800b508:	701a      	strb	r2, [r3, #0]
	
	stopStreamMems();
	return pdFALSE;
}
 800b50a:	2000      	movs	r0, #0
 800b50c:	bd10      	pop	{r4, pc}
 800b50e:	46c0      	nop			; (mov r8, r8)
 800b510:	0801d114 	.word	0x0801d114
 800b514:	20001490 	.word	0x20001490

0800b518 <SystemClock_Config>:
{
 800b518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b51a:	b09b      	sub	sp, #108	; 0x6c
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800b51c:	2401      	movs	r4, #1
 800b51e:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800b520:	940e      	str	r4, [sp, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b522:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800b524:	2310      	movs	r3, #16
 800b526:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b528:	2702      	movs	r7, #2
 800b52a:	9716      	str	r7, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800b52c:	2680      	movs	r6, #128	; 0x80
 800b52e:	0276      	lsls	r6, r6, #9
 800b530:	9617      	str	r6, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800b532:	2380      	movs	r3, #128	; 0x80
 800b534:	035b      	lsls	r3, r3, #13
 800b536:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800b538:	2500      	movs	r5, #0
 800b53a:	9519      	str	r5, [sp, #100]	; 0x64
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800b53c:	a80d      	add	r0, sp, #52	; 0x34
 800b53e:	f007 f82b 	bl	8012598 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 800b542:	2307      	movs	r3, #7
 800b544:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b546:	970a      	str	r7, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b548:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800b54a:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 800b54c:	2101      	movs	r1, #1
 800b54e:	a809      	add	r0, sp, #36	; 0x24
 800b550:	f007 fae6 	bl	8012b20 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 800b554:	4b1a      	ldr	r3, [pc, #104]	; (800b5c0 <SystemClock_Config+0xa8>)
 800b556:	9302      	str	r3, [sp, #8]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800b558:	9504      	str	r5, [sp, #16]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800b55a:	9505      	str	r5, [sp, #20]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800b55c:	9506      	str	r5, [sp, #24]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b55e:	a802      	add	r0, sp, #8
 800b560:	f007 fc8e 	bl	8012e80 <HAL_RCCEx_PeriphCLKConfig>
	__HAL_RCC_PWR_CLK_ENABLE();
 800b564:	4d17      	ldr	r5, [pc, #92]	; (800b5c4 <SystemClock_Config+0xac>)
 800b566:	69ea      	ldr	r2, [r5, #28]
 800b568:	2180      	movs	r1, #128	; 0x80
 800b56a:	0549      	lsls	r1, r1, #21
 800b56c:	430a      	orrs	r2, r1
 800b56e:	61ea      	str	r2, [r5, #28]
 800b570:	69eb      	ldr	r3, [r5, #28]
 800b572:	400b      	ands	r3, r1
 800b574:	9300      	str	r3, [sp, #0]
 800b576:	9b00      	ldr	r3, [sp, #0]
  HAL_PWR_EnableBkUpAccess();
 800b578:	f007 f804 	bl	8012584 <HAL_PWR_EnableBkUpAccess>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800b57c:	9602      	str	r6, [sp, #8]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 800b57e:	23c0      	movs	r3, #192	; 0xc0
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	9303      	str	r3, [sp, #12]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800b584:	a802      	add	r0, sp, #8
 800b586:	f007 fc7b 	bl	8012e80 <HAL_RCCEx_PeriphCLKConfig>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800b58a:	f007 fc55 	bl	8012e38 <HAL_RCC_GetHCLKFreq>
 800b58e:	21fa      	movs	r1, #250	; 0xfa
 800b590:	0089      	lsls	r1, r1, #2
 800b592:	f7f4 fddd 	bl	8000150 <__udivsi3>
 800b596:	f005 fb87 	bl	8010ca8 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800b59a:	2004      	movs	r0, #4
 800b59c:	f005 fba0 	bl	8010ce0 <HAL_SYSTICK_CLKSourceConfig>
	__SYSCFG_CLK_ENABLE();
 800b5a0:	69ab      	ldr	r3, [r5, #24]
 800b5a2:	4323      	orrs	r3, r4
 800b5a4:	61ab      	str	r3, [r5, #24]
 800b5a6:	69ab      	ldr	r3, [r5, #24]
 800b5a8:	401c      	ands	r4, r3
 800b5aa:	9401      	str	r4, [sp, #4]
 800b5ac:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800b5ae:	2001      	movs	r0, #1
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	4240      	negs	r0, r0
 800b5b6:	f005 fb31 	bl	8010c1c <HAL_NVIC_SetPriority>
}
 800b5ba:	b01b      	add	sp, #108	; 0x6c
 800b5bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5be:	46c0      	nop			; (mov r8, r8)
 800b5c0:	00040003 	.word	0x00040003
 800b5c4:	40021000 	.word	0x40021000

0800b5c8 <Module_Init>:
{
 800b5c8:	b500      	push	{lr}
 800b5ca:	b083      	sub	sp, #12
  MX_USART1_UART_Init();
 800b5cc:	f002 fb6c 	bl	800dca8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800b5d0:	f002 fb82 	bl	800dcd8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800b5d4:	f002 fb98 	bl	800dd08 <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 800b5d8:	f002 fbae 	bl	800dd38 <MX_USART4_UART_Init>
  MX_USART5_UART_Init();
 800b5dc:	f002 fbc4 	bl	800dd68 <MX_USART5_UART_Init>
  MX_USART6_UART_Init();
 800b5e0:	f002 fbe4 	bl	800ddac <MX_USART6_UART_Init>
	MX_I2C_Init();
 800b5e4:	f002 f818 	bl	800d618 <MX_I2C_Init>
	uint8_t who_am_i = 0;
 800b5e8:	466b      	mov	r3, sp
 800b5ea:	1dd9      	adds	r1, r3, #7
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	700b      	strb	r3, [r1, #0]
	if (LSM6DS3_ACC_GYRO_R_WHO_AM_I(&hi2c2, &who_am_i) != MEMS_SUCCESS)
 800b5f0:	4845      	ldr	r0, [pc, #276]	; (800b708 <Module_Init+0x140>)
 800b5f2:	f002 ff33 	bl	800e45c <LSM6DS3_ACC_GYRO_R_WHO_AM_I>
 800b5f6:	2801      	cmp	r0, #1
 800b5f8:	d104      	bne.n	800b604 <Module_Init+0x3c>
	if (who_am_i != LSM6DS3_ACC_GYRO_WHO_AM_I)
 800b5fa:	466b      	mov	r3, sp
 800b5fc:	3307      	adds	r3, #7
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	2b69      	cmp	r3, #105	; 0x69
 800b602:	d00f      	beq.n	800b624 <Module_Init+0x5c>
	uint8_t who_am_i = 0x00;
 800b604:	466b      	mov	r3, sp
 800b606:	1dd9      	adds	r1, r3, #7
 800b608:	2300      	movs	r3, #0
 800b60a:	700b      	strb	r3, [r1, #0]
  if (LSM303AGR_MAG_R_WHO_AM_I(&hi2c2, &who_am_i ) != MEMS_SUCCESS)
 800b60c:	483e      	ldr	r0, [pc, #248]	; (800b708 <Module_Init+0x140>)
 800b60e:	f002 fe83 	bl	800e318 <LSM303AGR_MAG_R_WHO_AM_I>
 800b612:	2801      	cmp	r0, #1
 800b614:	d104      	bne.n	800b620 <Module_Init+0x58>
  if (who_am_i != LSM303AGR_MAG_WHO_AM_I)
 800b616:	466b      	mov	r3, sp
 800b618:	3307      	adds	r3, #7
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	2b40      	cmp	r3, #64	; 0x40
 800b61e:	d054      	beq.n	800b6ca <Module_Init+0x102>
}
 800b620:	b003      	add	sp, #12
 800b622:	bd00      	pop	{pc}
	if (LSM6DS3_ACC_GYRO_W_IF_Addr_Incr(&hi2c2, LSM6DS3_ACC_GYRO_IF_INC_ENABLED) != MEMS_SUCCESS)
 800b624:	2104      	movs	r1, #4
 800b626:	4838      	ldr	r0, [pc, #224]	; (800b708 <Module_Init+0x140>)
 800b628:	f003 f84b 	bl	800e6c2 <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr>
 800b62c:	2801      	cmp	r0, #1
 800b62e:	d1e9      	bne.n	800b604 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_FIFO_MODE(&hi2c2, LSM6DS3_ACC_GYRO_FIFO_MODE_BYPASS) != MEMS_SUCCESS)
 800b630:	2100      	movs	r1, #0
 800b632:	4835      	ldr	r0, [pc, #212]	; (800b708 <Module_Init+0x140>)
 800b634:	f003 f825 	bl	800e682 <LSM6DS3_ACC_GYRO_W_FIFO_MODE>
 800b638:	2801      	cmp	r0, #1
 800b63a:	d1e3      	bne.n	800b604 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_ODR_G(&hi2c2, LSM6DS3_ACC_GYRO_ODR_G_13Hz) != MEMS_SUCCESS)
 800b63c:	2110      	movs	r1, #16
 800b63e:	4832      	ldr	r0, [pc, #200]	; (800b708 <Module_Init+0x140>)
 800b640:	f002 ffb2 	bl	800e5a8 <LSM6DS3_ACC_GYRO_W_ODR_G>
 800b644:	2801      	cmp	r0, #1
 800b646:	d1dd      	bne.n	800b604 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_FS_G(&hi2c2, LSM6DS3_ACC_GYRO_FS_G_2000dps) != MEMS_SUCCESS)
 800b648:	210c      	movs	r1, #12
 800b64a:	482f      	ldr	r0, [pc, #188]	; (800b708 <Module_Init+0x140>)
 800b64c:	f002 ff7d 	bl	800e54a <LSM6DS3_ACC_GYRO_W_FS_G>
 800b650:	2801      	cmp	r0, #1
 800b652:	d1d7      	bne.n	800b604 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_XEN_G(&hi2c2, LSM6DS3_ACC_GYRO_XEN_G_ENABLED) != MEMS_SUCCESS)
 800b654:	2108      	movs	r1, #8
 800b656:	482c      	ldr	r0, [pc, #176]	; (800b708 <Module_Init+0x140>)
 800b658:	f003 f8d3 	bl	800e802 <LSM6DS3_ACC_GYRO_W_XEN_G>
 800b65c:	2801      	cmp	r0, #1
 800b65e:	d1d1      	bne.n	800b604 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_YEN_G(&hi2c2, LSM6DS3_ACC_GYRO_YEN_G_ENABLED) != MEMS_SUCCESS)
 800b660:	2110      	movs	r1, #16
 800b662:	4829      	ldr	r0, [pc, #164]	; (800b708 <Module_Init+0x140>)
 800b664:	f003 f8ed 	bl	800e842 <LSM6DS3_ACC_GYRO_W_YEN_G>
 800b668:	2801      	cmp	r0, #1
 800b66a:	d1cb      	bne.n	800b604 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_ZEN_G(&hi2c2, LSM6DS3_ACC_GYRO_ZEN_G_ENABLED) != MEMS_SUCCESS)
 800b66c:	2120      	movs	r1, #32
 800b66e:	4826      	ldr	r0, [pc, #152]	; (800b708 <Module_Init+0x140>)
 800b670:	f003 f907 	bl	800e882 <LSM6DS3_ACC_GYRO_W_ZEN_G>
 800b674:	2801      	cmp	r0, #1
 800b676:	d1c5      	bne.n	800b604 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_ODR_XL(&hi2c2, LSM6DS3_ACC_GYRO_ODR_XL_104Hz) != MEMS_SUCCESS)
 800b678:	2140      	movs	r1, #64	; 0x40
 800b67a:	4823      	ldr	r0, [pc, #140]	; (800b708 <Module_Init+0x140>)
 800b67c:	f002 ff45 	bl	800e50a <LSM6DS3_ACC_GYRO_W_ODR_XL>
 800b680:	2801      	cmp	r0, #1
 800b682:	d1bf      	bne.n	800b604 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_BW_XL(&hi2c2, LSM6DS3_ACC_GYRO_BW_XL_50Hz) != MEMS_SUCCESS)
 800b684:	2103      	movs	r1, #3
 800b686:	4820      	ldr	r0, [pc, #128]	; (800b708 <Module_Init+0x140>)
 800b688:	f002 ffcc 	bl	800e624 <LSM6DS3_ACC_GYRO_W_BW_XL>
 800b68c:	2801      	cmp	r0, #1
 800b68e:	d1b9      	bne.n	800b604 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_FS_XL(&hi2c2, LSM6DS3_ACC_GYRO_FS_XL_16g) != MEMS_SUCCESS)
 800b690:	2104      	movs	r1, #4
 800b692:	481d      	ldr	r0, [pc, #116]	; (800b708 <Module_Init+0x140>)
 800b694:	f002 feec 	bl	800e470 <LSM6DS3_ACC_GYRO_W_FS_XL>
 800b698:	2801      	cmp	r0, #1
 800b69a:	d1b3      	bne.n	800b604 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_XEN_XL(&hi2c2, LSM6DS3_ACC_GYRO_XEN_XL_ENABLED) != MEMS_SUCCESS)
 800b69c:	2108      	movs	r1, #8
 800b69e:	481a      	ldr	r0, [pc, #104]	; (800b708 <Module_Init+0x140>)
 800b6a0:	f003 f84f 	bl	800e742 <LSM6DS3_ACC_GYRO_W_XEN_XL>
 800b6a4:	2801      	cmp	r0, #1
 800b6a6:	d1ad      	bne.n	800b604 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_YEN_XL(&hi2c2, LSM6DS3_ACC_GYRO_YEN_XL_ENABLED) != MEMS_SUCCESS)
 800b6a8:	2110      	movs	r1, #16
 800b6aa:	4817      	ldr	r0, [pc, #92]	; (800b708 <Module_Init+0x140>)
 800b6ac:	f003 f869 	bl	800e782 <LSM6DS3_ACC_GYRO_W_YEN_XL>
 800b6b0:	2801      	cmp	r0, #1
 800b6b2:	d1a7      	bne.n	800b604 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_ZEN_XL(&hi2c2, LSM6DS3_ACC_GYRO_ZEN_XL_ENABLED) != MEMS_SUCCESS)
 800b6b4:	2120      	movs	r1, #32
 800b6b6:	4814      	ldr	r0, [pc, #80]	; (800b708 <Module_Init+0x140>)
 800b6b8:	f003 f883 	bl	800e7c2 <LSM6DS3_ACC_GYRO_W_ZEN_XL>
 800b6bc:	2801      	cmp	r0, #1
 800b6be:	d1a1      	bne.n	800b604 <Module_Init+0x3c>
	if (LSM6DS3_ACC_GYRO_W_BW_Fixed_By_ODR(&hi2c2, LSM6DS3_ACC_GYRO_BW_SCAL_ODR_ENABLED) != MEMS_ERROR)
 800b6c0:	2180      	movs	r1, #128	; 0x80
 800b6c2:	4811      	ldr	r0, [pc, #68]	; (800b708 <Module_Init+0x140>)
 800b6c4:	f003 f81d 	bl	800e702 <LSM6DS3_ACC_GYRO_W_BW_Fixed_By_ODR>
 800b6c8:	e79c      	b.n	800b604 <Module_Init+0x3c>
	if (LSM303AGR_MAG_W_MD(&hi2c2, LSM303AGR_MAG_MD_IDLE1_MODE) != MEMS_SUCCESS)
 800b6ca:	2102      	movs	r1, #2
 800b6cc:	480e      	ldr	r0, [pc, #56]	; (800b708 <Module_Init+0x140>)
 800b6ce:	f002 fe4d 	bl	800e36c <LSM303AGR_MAG_W_MD>
 800b6d2:	2801      	cmp	r0, #1
 800b6d4:	d1a4      	bne.n	800b620 <Module_Init+0x58>
  if (LSM303AGR_MAG_W_BDU(&hi2c2, LSM303AGR_MAG_BDU_ENABLED ) != MEMS_SUCCESS)
 800b6d6:	2110      	movs	r1, #16
 800b6d8:	480b      	ldr	r0, [pc, #44]	; (800b708 <Module_Init+0x140>)
 800b6da:	f002 fe27 	bl	800e32c <LSM303AGR_MAG_W_BDU>
 800b6de:	2801      	cmp	r0, #1
 800b6e0:	d19e      	bne.n	800b620 <Module_Init+0x58>
	if (LSM303AGR_MAG_W_ODR(&hi2c2, LSM303AGR_MAG_ODR_10Hz) != MEMS_SUCCESS)
 800b6e2:	2100      	movs	r1, #0
 800b6e4:	4808      	ldr	r0, [pc, #32]	; (800b708 <Module_Init+0x140>)
 800b6e6:	f002 fe6b 	bl	800e3c0 <LSM303AGR_MAG_W_ODR>
 800b6ea:	2801      	cmp	r0, #1
 800b6ec:	d198      	bne.n	800b620 <Module_Init+0x58>
	if (LSM303AGR_MAG_W_ST(&hi2c2, LSM303AGR_MAG_ST_DISABLED) != MEMS_SUCCESS)
 800b6ee:	2100      	movs	r1, #0
 800b6f0:	4805      	ldr	r0, [pc, #20]	; (800b708 <Module_Init+0x140>)
 800b6f2:	f002 fe85 	bl	800e400 <LSM303AGR_MAG_W_ST>
 800b6f6:	2801      	cmp	r0, #1
 800b6f8:	d000      	beq.n	800b6fc <Module_Init+0x134>
 800b6fa:	e791      	b.n	800b620 <Module_Init+0x58>
	if (LSM303AGR_MAG_W_MD(&hi2c2, LSM303AGR_MAG_MD_CONTINUOS_MODE) != MEMS_SUCCESS)
 800b6fc:	2100      	movs	r1, #0
 800b6fe:	4802      	ldr	r0, [pc, #8]	; (800b708 <Module_Init+0x140>)
 800b700:	f002 fe34 	bl	800e36c <LSM303AGR_MAG_W_MD>
}
 800b704:	e78c      	b.n	800b620 <Module_Init+0x58>
 800b706:	46c0      	nop			; (mov r8, r8)
 800b708:	20006a64 	.word	0x20006a64

0800b70c <RegisterModuleCLICommands>:
{
 800b70c:	b510      	push	{r4, lr}
	FreeRTOS_CLIRegisterCommand(&SampleCommandDefinition);
 800b70e:	4805      	ldr	r0, [pc, #20]	; (800b724 <RegisterModuleCLICommands+0x18>)
 800b710:	f003 fa72 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&StreamCommandDefinition);
 800b714:	4804      	ldr	r0, [pc, #16]	; (800b728 <RegisterModuleCLICommands+0x1c>)
 800b716:	f003 fa6f 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
	FreeRTOS_CLIRegisterCommand(&StopCommandDefinition);
 800b71a:	4804      	ldr	r0, [pc, #16]	; (800b72c <RegisterModuleCLICommands+0x20>)
 800b71c:	f003 fa6c 	bl	800ebf8 <FreeRTOS_CLIRegisterCommand>
}
 800b720:	bd10      	pop	{r4, pc}
 800b722:	46c0      	nop			; (mov r8, r8)
 800b724:	0801d454 	.word	0x0801d454
 800b728:	0801d474 	.word	0x0801d474
 800b72c:	0801d464 	.word	0x0801d464

0800b730 <GetPort>:
	if (huart->Instance == USART4)
 800b730:	6800      	ldr	r0, [r0, #0]
 800b732:	4b11      	ldr	r3, [pc, #68]	; (800b778 <GetPort+0x48>)
 800b734:	4298      	cmp	r0, r3
 800b736:	d015      	beq.n	800b764 <GetPort+0x34>
	else if (huart->Instance == USART2)
 800b738:	4b10      	ldr	r3, [pc, #64]	; (800b77c <GetPort+0x4c>)
 800b73a:	4298      	cmp	r0, r3
 800b73c:	d014      	beq.n	800b768 <GetPort+0x38>
	else if (huart->Instance == USART6)
 800b73e:	4b10      	ldr	r3, [pc, #64]	; (800b780 <GetPort+0x50>)
 800b740:	4298      	cmp	r0, r3
 800b742:	d013      	beq.n	800b76c <GetPort+0x3c>
	else if (huart->Instance == USART3)
 800b744:	4b0f      	ldr	r3, [pc, #60]	; (800b784 <GetPort+0x54>)
 800b746:	4298      	cmp	r0, r3
 800b748:	d012      	beq.n	800b770 <GetPort+0x40>
	else if (huart->Instance == USART1)
 800b74a:	4b0f      	ldr	r3, [pc, #60]	; (800b788 <GetPort+0x58>)
 800b74c:	4298      	cmp	r0, r3
 800b74e:	d011      	beq.n	800b774 <GetPort+0x44>
		return P6;
 800b750:	4b0e      	ldr	r3, [pc, #56]	; (800b78c <GetPort+0x5c>)
 800b752:	469c      	mov	ip, r3
 800b754:	4460      	add	r0, ip
 800b756:	1e43      	subs	r3, r0, #1
 800b758:	4198      	sbcs	r0, r3
 800b75a:	4240      	negs	r0, r0
 800b75c:	2305      	movs	r3, #5
 800b75e:	4398      	bics	r0, r3
 800b760:	3006      	adds	r0, #6
}
 800b762:	4770      	bx	lr
		return P1;
 800b764:	2001      	movs	r0, #1
 800b766:	e7fc      	b.n	800b762 <GetPort+0x32>
		return P2;
 800b768:	2002      	movs	r0, #2
 800b76a:	e7fa      	b.n	800b762 <GetPort+0x32>
		return P3;
 800b76c:	2003      	movs	r0, #3
 800b76e:	e7f8      	b.n	800b762 <GetPort+0x32>
		return P4;
 800b770:	2004      	movs	r0, #4
 800b772:	e7f6      	b.n	800b762 <GetPort+0x32>
		return P5;
 800b774:	2005      	movs	r0, #5
 800b776:	e7f4      	b.n	800b762 <GetPort+0x32>
 800b778:	40004c00 	.word	0x40004c00
 800b77c:	40004400 	.word	0x40004400
 800b780:	40011400 	.word	0x40011400
 800b784:	40004800 	.word	0x40004800
 800b788:	40013800 	.word	0x40013800
 800b78c:	bfffb000 	.word	0xbfffb000

0800b790 <SampleGyroDPS>:
{
 800b790:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b792:	46c6      	mov	lr, r8
 800b794:	b500      	push	{lr}
 800b796:	b084      	sub	sp, #16
 800b798:	0006      	movs	r6, r0
 800b79a:	000d      	movs	r5, r1
 800b79c:	0014      	movs	r4, r2
	if (LSM6DS3_ACC_Get_AngularRate(&hi2c2, buff, 0) != MEMS_SUCCESS)
 800b79e:	2200      	movs	r2, #0
 800b7a0:	a901      	add	r1, sp, #4
 800b7a2:	4812      	ldr	r0, [pc, #72]	; (800b7ec <SampleGyroDPS+0x5c>)
 800b7a4:	f003 f91a 	bl	800e9dc <LSM6DS3_ACC_Get_AngularRate>
 800b7a8:	2801      	cmp	r0, #1
 800b7aa:	d11c      	bne.n	800b7e6 <SampleGyroDPS+0x56>
	*gyroY = buff[1];
 800b7ac:	9b02      	ldr	r3, [sp, #8]
 800b7ae:	4698      	mov	r8, r3
	*gyroZ = buff[2];
 800b7b0:	9f03      	ldr	r7, [sp, #12]
	*x = ((float)xInMDPS) / 1000;
 800b7b2:	9801      	ldr	r0, [sp, #4]
 800b7b4:	f7f5 fd20 	bl	80011f8 <__aeabi_i2f>
 800b7b8:	490d      	ldr	r1, [pc, #52]	; (800b7f0 <SampleGyroDPS+0x60>)
 800b7ba:	f7f5 fa19 	bl	8000bf0 <__aeabi_fdiv>
 800b7be:	6030      	str	r0, [r6, #0]
	*y = ((float)yInMDPS) / 1000;
 800b7c0:	4640      	mov	r0, r8
 800b7c2:	f7f5 fd19 	bl	80011f8 <__aeabi_i2f>
 800b7c6:	490a      	ldr	r1, [pc, #40]	; (800b7f0 <SampleGyroDPS+0x60>)
 800b7c8:	f7f5 fa12 	bl	8000bf0 <__aeabi_fdiv>
 800b7cc:	6028      	str	r0, [r5, #0]
	*z = ((float)zInMDPS) / 1000;
 800b7ce:	0038      	movs	r0, r7
 800b7d0:	f7f5 fd12 	bl	80011f8 <__aeabi_i2f>
 800b7d4:	4906      	ldr	r1, [pc, #24]	; (800b7f0 <SampleGyroDPS+0x60>)
 800b7d6:	f7f5 fa0b 	bl	8000bf0 <__aeabi_fdiv>
 800b7da:	6020      	str	r0, [r4, #0]
	return H0BR4_OK;
 800b7dc:	2000      	movs	r0, #0
}
 800b7de:	b004      	add	sp, #16
 800b7e0:	bc80      	pop	{r7}
 800b7e2:	46b8      	mov	r8, r7
 800b7e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return H0BR4_ERR_LSM6DS3;
 800b7e6:	2005      	movs	r0, #5
 800b7e8:	e7f9      	b.n	800b7de <SampleGyroDPS+0x4e>
 800b7ea:	46c0      	nop			; (mov r8, r8)
 800b7ec:	20006a64 	.word	0x20006a64
 800b7f0:	447a0000 	.word	0x447a0000

0800b7f4 <SampleGyroDPSToString>:
{
 800b7f4:	b570      	push	{r4, r5, r6, lr}
 800b7f6:	b08a      	sub	sp, #40	; 0x28
 800b7f8:	0005      	movs	r5, r0
 800b7fa:	000e      	movs	r6, r1
	float x = 0, y = 0, z = 0;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	9309      	str	r3, [sp, #36]	; 0x24
 800b800:	9308      	str	r3, [sp, #32]
 800b802:	9307      	str	r3, [sp, #28]
	if ((status = SampleGyroDPS(&x, &y, &z)) != H0BR4_OK)
 800b804:	aa07      	add	r2, sp, #28
 800b806:	a908      	add	r1, sp, #32
 800b808:	a809      	add	r0, sp, #36	; 0x24
 800b80a:	f7ff ffc1 	bl	800b790 <SampleGyroDPS>
 800b80e:	1e04      	subs	r4, r0, #0
 800b810:	d002      	beq.n	800b818 <SampleGyroDPSToString+0x24>
}
 800b812:	0020      	movs	r0, r4
 800b814:	b00a      	add	sp, #40	; 0x28
 800b816:	bd70      	pop	{r4, r5, r6, pc}
	snprintf(cstring, maxLen, "Gyro(DPS) | X: %.2f, Y: %.2f, Z: %.2f\r\n", x, y, z);
 800b818:	9807      	ldr	r0, [sp, #28]
 800b81a:	f7f7 fb4b 	bl	8002eb4 <__aeabi_f2d>
 800b81e:	9004      	str	r0, [sp, #16]
 800b820:	9105      	str	r1, [sp, #20]
 800b822:	9808      	ldr	r0, [sp, #32]
 800b824:	f7f7 fb46 	bl	8002eb4 <__aeabi_f2d>
 800b828:	9002      	str	r0, [sp, #8]
 800b82a:	9103      	str	r1, [sp, #12]
 800b82c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b82e:	f7f7 fb41 	bl	8002eb4 <__aeabi_f2d>
 800b832:	9000      	str	r0, [sp, #0]
 800b834:	9101      	str	r1, [sp, #4]
 800b836:	4a03      	ldr	r2, [pc, #12]	; (800b844 <SampleGyroDPSToString+0x50>)
 800b838:	0031      	movs	r1, r6
 800b83a:	0028      	movs	r0, r5
 800b83c:	f009 f88e 	bl	801495c <snprintf>
	return status;
 800b840:	e7e7      	b.n	800b812 <SampleGyroDPSToString+0x1e>
 800b842:	46c0      	nop			; (mov r8, r8)
 800b844:	0801d134 	.word	0x0801d134

0800b848 <SampleGyroDPSToBuf>:
{
 800b848:	b510      	push	{r4, lr}
	return SampleGyroDPS(buffer, buffer + 1, buffer + 2);
 800b84a:	0002      	movs	r2, r0
 800b84c:	3208      	adds	r2, #8
 800b84e:	1d01      	adds	r1, r0, #4
 800b850:	f7ff ff9e 	bl	800b790 <SampleGyroDPS>
}
 800b854:	bd10      	pop	{r4, pc}
	...

0800b858 <SampleGyroDPSToPort>:
{
 800b858:	b570      	push	{r4, r5, r6, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	0006      	movs	r6, r0
 800b85e:	000d      	movs	r5, r1
	if ((status = SampleGyroDPSToBuf(buffer)) != H0BR4_OK)
 800b860:	a801      	add	r0, sp, #4
 800b862:	f7ff fff1 	bl	800b848 <SampleGyroDPSToBuf>
 800b866:	1e04      	subs	r4, r0, #0
 800b868:	d123      	bne.n	800b8b2 <SampleGyroDPSToPort+0x5a>
	if (module==myID){
 800b86a:	4b23      	ldr	r3, [pc, #140]	; (800b8f8 <SampleGyroDPSToPort+0xa0>)
 800b86c:	781b      	ldrb	r3, [r3, #0]
 800b86e:	42ab      	cmp	r3, r5
 800b870:	d022      	beq.n	800b8b8 <SampleGyroDPSToPort+0x60>
						messageParams[0]=port;
 800b872:	4b22      	ldr	r3, [pc, #136]	; (800b8fc <SampleGyroDPSToPort+0xa4>)
 800b874:	701e      	strb	r6, [r3, #0]
					  messageParams[1] = *((__IO uint8_t *)(&buffer[0])+3);  messageParams[2] = *((__IO uint8_t *)(&buffer[0])+2);
 800b876:	aa01      	add	r2, sp, #4
 800b878:	78d1      	ldrb	r1, [r2, #3]
 800b87a:	7059      	strb	r1, [r3, #1]
 800b87c:	7891      	ldrb	r1, [r2, #2]
 800b87e:	7099      	strb	r1, [r3, #2]
						messageParams[3] = *((__IO uint8_t *)(&buffer[0])+1);  messageParams[4] = *((__IO uint8_t *)(&buffer[0])+0);
 800b880:	7851      	ldrb	r1, [r2, #1]
 800b882:	70d9      	strb	r1, [r3, #3]
 800b884:	7811      	ldrb	r1, [r2, #0]
 800b886:	7119      	strb	r1, [r3, #4]
					  messageParams[5] = *((__IO uint8_t *)(&buffer[1])+3);  messageParams[6] = *((__IO uint8_t *)(&buffer[1])+2);
 800b888:	79d1      	ldrb	r1, [r2, #7]
 800b88a:	7159      	strb	r1, [r3, #5]
 800b88c:	7991      	ldrb	r1, [r2, #6]
 800b88e:	7199      	strb	r1, [r3, #6]
						messageParams[7] = *((__IO uint8_t *)(&buffer[1])+1);  messageParams[8] = *((__IO uint8_t *)(&buffer[1])+0);
 800b890:	7951      	ldrb	r1, [r2, #5]
 800b892:	71d9      	strb	r1, [r3, #7]
 800b894:	7911      	ldrb	r1, [r2, #4]
 800b896:	7219      	strb	r1, [r3, #8]
					  messageParams[9] = *((__IO uint8_t *)(&buffer[2])+3);  messageParams[10] = *((__IO uint8_t *)(&buffer[2])+2);
 800b898:	7ad1      	ldrb	r1, [r2, #11]
 800b89a:	7259      	strb	r1, [r3, #9]
 800b89c:	7a91      	ldrb	r1, [r2, #10]
 800b89e:	7299      	strb	r1, [r3, #10]
						messageParams[11] = *((__IO uint8_t *)(&buffer[2])+1); messageParams[12] = *((__IO uint8_t *)(&buffer[2])+0);
 800b8a0:	7a51      	ldrb	r1, [r2, #9]
 800b8a2:	72d9      	strb	r1, [r3, #11]
 800b8a4:	7a12      	ldrb	r2, [r2, #8]
 800b8a6:	731a      	strb	r2, [r3, #12]
						SendMessageToModule(module, CODE_PORT_FORWARD, (sizeof(float)*3)+1);
 800b8a8:	220d      	movs	r2, #13
 800b8aa:	2123      	movs	r1, #35	; 0x23
 800b8ac:	0028      	movs	r0, r5
 800b8ae:	f7fd fe39 	bl	8009524 <SendMessageToModule>
}
 800b8b2:	0020      	movs	r0, r4
 800b8b4:	b004      	add	sp, #16
 800b8b6:	bd70      	pop	{r4, r5, r6, pc}
						temp[0] = *((__IO uint8_t *)(&buffer[0])+3);  temp[1] = *((__IO uint8_t *)(&buffer[0])+2);
 800b8b8:	ab01      	add	r3, sp, #4
 800b8ba:	78da      	ldrb	r2, [r3, #3]
 800b8bc:	4910      	ldr	r1, [pc, #64]	; (800b900 <SampleGyroDPSToPort+0xa8>)
 800b8be:	700a      	strb	r2, [r1, #0]
 800b8c0:	789a      	ldrb	r2, [r3, #2]
 800b8c2:	704a      	strb	r2, [r1, #1]
						temp[2] = *((__IO uint8_t *)(&buffer[0])+1);  temp[3] = *((__IO uint8_t *)(&buffer[0])+0);
 800b8c4:	785a      	ldrb	r2, [r3, #1]
 800b8c6:	708a      	strb	r2, [r1, #2]
 800b8c8:	781a      	ldrb	r2, [r3, #0]
 800b8ca:	70ca      	strb	r2, [r1, #3]
		        temp[4] = *((__IO uint8_t *)(&buffer[1])+3);  temp[5] = *((__IO uint8_t *)(&buffer[1])+2);
 800b8cc:	79da      	ldrb	r2, [r3, #7]
 800b8ce:	710a      	strb	r2, [r1, #4]
 800b8d0:	799a      	ldrb	r2, [r3, #6]
 800b8d2:	714a      	strb	r2, [r1, #5]
						temp[6] = *((__IO uint8_t *)(&buffer[1])+1);  temp[7] = *((__IO uint8_t *)(&buffer[1])+0);
 800b8d4:	795a      	ldrb	r2, [r3, #5]
 800b8d6:	718a      	strb	r2, [r1, #6]
 800b8d8:	791a      	ldrb	r2, [r3, #4]
 800b8da:	71ca      	strb	r2, [r1, #7]
		        temp[8] = *((__IO uint8_t *)(&buffer[2])+3);  temp[9] = *((__IO uint8_t *)(&buffer[2])+2);
 800b8dc:	7ada      	ldrb	r2, [r3, #11]
 800b8de:	720a      	strb	r2, [r1, #8]
 800b8e0:	7a9a      	ldrb	r2, [r3, #10]
 800b8e2:	724a      	strb	r2, [r1, #9]
						temp[10] = *((__IO uint8_t *)(&buffer[2])+1); temp[11] = *((__IO uint8_t *)(&buffer[2])+0);
 800b8e4:	7a5a      	ldrb	r2, [r3, #9]
 800b8e6:	728a      	strb	r2, [r1, #10]
 800b8e8:	7a1b      	ldrb	r3, [r3, #8]
 800b8ea:	72cb      	strb	r3, [r1, #11]
						writePxITMutex(port, (char *)&temp[0],12*sizeof(uint8_t), 10);
 800b8ec:	230a      	movs	r3, #10
 800b8ee:	220c      	movs	r2, #12
 800b8f0:	0030      	movs	r0, r6
 800b8f2:	f002 fc05 	bl	800e100 <writePxITMutex>
 800b8f6:	e7dc      	b.n	800b8b2 <SampleGyroDPSToPort+0x5a>
 800b8f8:	20000070 	.word	0x20000070
 800b8fc:	20000da4 	.word	0x20000da4
 800b900:	20001494 	.word	0x20001494

0800b904 <SampleAccG>:
{
 800b904:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b906:	46c6      	mov	lr, r8
 800b908:	b500      	push	{lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	0006      	movs	r6, r0
 800b90e:	000d      	movs	r5, r1
 800b910:	0014      	movs	r4, r2
	if (LSM6DS3_ACC_Get_Acceleration(&hi2c2, buff, 0) != MEMS_SUCCESS)
 800b912:	2200      	movs	r2, #0
 800b914:	a901      	add	r1, sp, #4
 800b916:	4812      	ldr	r0, [pc, #72]	; (800b960 <SampleAccG+0x5c>)
 800b918:	f002 ffea 	bl	800e8f0 <LSM6DS3_ACC_Get_Acceleration>
 800b91c:	2801      	cmp	r0, #1
 800b91e:	d11c      	bne.n	800b95a <SampleAccG+0x56>
	*accY = buff[1];
 800b920:	9b02      	ldr	r3, [sp, #8]
 800b922:	4698      	mov	r8, r3
	*accZ = buff[2];
 800b924:	9f03      	ldr	r7, [sp, #12]
	*x = ((float)xInMG) / 1000;
 800b926:	9801      	ldr	r0, [sp, #4]
 800b928:	f7f5 fc66 	bl	80011f8 <__aeabi_i2f>
 800b92c:	490d      	ldr	r1, [pc, #52]	; (800b964 <SampleAccG+0x60>)
 800b92e:	f7f5 f95f 	bl	8000bf0 <__aeabi_fdiv>
 800b932:	6030      	str	r0, [r6, #0]
	*y = ((float)yInMG) / 1000;
 800b934:	4640      	mov	r0, r8
 800b936:	f7f5 fc5f 	bl	80011f8 <__aeabi_i2f>
 800b93a:	490a      	ldr	r1, [pc, #40]	; (800b964 <SampleAccG+0x60>)
 800b93c:	f7f5 f958 	bl	8000bf0 <__aeabi_fdiv>
 800b940:	6028      	str	r0, [r5, #0]
	*z = ((float)zInMG) / 1000;
 800b942:	0038      	movs	r0, r7
 800b944:	f7f5 fc58 	bl	80011f8 <__aeabi_i2f>
 800b948:	4906      	ldr	r1, [pc, #24]	; (800b964 <SampleAccG+0x60>)
 800b94a:	f7f5 f951 	bl	8000bf0 <__aeabi_fdiv>
 800b94e:	6020      	str	r0, [r4, #0]
	return H0BR4_OK;
 800b950:	2000      	movs	r0, #0
}
 800b952:	b004      	add	sp, #16
 800b954:	bc80      	pop	{r7}
 800b956:	46b8      	mov	r8, r7
 800b958:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return H0BR4_ERR_LSM6DS3;
 800b95a:	2005      	movs	r0, #5
 800b95c:	e7f9      	b.n	800b952 <SampleAccG+0x4e>
 800b95e:	46c0      	nop			; (mov r8, r8)
 800b960:	20006a64 	.word	0x20006a64
 800b964:	447a0000 	.word	0x447a0000

0800b968 <SampleAccGToString>:
{
 800b968:	b570      	push	{r4, r5, r6, lr}
 800b96a:	b08a      	sub	sp, #40	; 0x28
 800b96c:	0005      	movs	r5, r0
 800b96e:	000e      	movs	r6, r1
	float x = 0, y = 0, z = 0;
 800b970:	2300      	movs	r3, #0
 800b972:	9309      	str	r3, [sp, #36]	; 0x24
 800b974:	9308      	str	r3, [sp, #32]
 800b976:	9307      	str	r3, [sp, #28]
	if ((status = SampleAccG(&x, &y, &z)) != H0BR4_OK)
 800b978:	aa07      	add	r2, sp, #28
 800b97a:	a908      	add	r1, sp, #32
 800b97c:	a809      	add	r0, sp, #36	; 0x24
 800b97e:	f7ff ffc1 	bl	800b904 <SampleAccG>
 800b982:	1e04      	subs	r4, r0, #0
 800b984:	d002      	beq.n	800b98c <SampleAccGToString+0x24>
}
 800b986:	0020      	movs	r0, r4
 800b988:	b00a      	add	sp, #40	; 0x28
 800b98a:	bd70      	pop	{r4, r5, r6, pc}
	snprintf(cstring, maxLen, "Acc(G) | X: %.2f, Y: %.2f, Z: %.2f\r\n", x, y, z);
 800b98c:	9807      	ldr	r0, [sp, #28]
 800b98e:	f7f7 fa91 	bl	8002eb4 <__aeabi_f2d>
 800b992:	9004      	str	r0, [sp, #16]
 800b994:	9105      	str	r1, [sp, #20]
 800b996:	9808      	ldr	r0, [sp, #32]
 800b998:	f7f7 fa8c 	bl	8002eb4 <__aeabi_f2d>
 800b99c:	9002      	str	r0, [sp, #8]
 800b99e:	9103      	str	r1, [sp, #12]
 800b9a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9a2:	f7f7 fa87 	bl	8002eb4 <__aeabi_f2d>
 800b9a6:	9000      	str	r0, [sp, #0]
 800b9a8:	9101      	str	r1, [sp, #4]
 800b9aa:	4a03      	ldr	r2, [pc, #12]	; (800b9b8 <SampleAccGToString+0x50>)
 800b9ac:	0031      	movs	r1, r6
 800b9ae:	0028      	movs	r0, r5
 800b9b0:	f008 ffd4 	bl	801495c <snprintf>
	return status;
 800b9b4:	e7e7      	b.n	800b986 <SampleAccGToString+0x1e>
 800b9b6:	46c0      	nop			; (mov r8, r8)
 800b9b8:	0801d15c 	.word	0x0801d15c

0800b9bc <SampleSensorCommand>:
{
 800b9bc:	b570      	push	{r4, r5, r6, lr}
 800b9be:	b082      	sub	sp, #8
 800b9c0:	0005      	movs	r5, r0
 800b9c2:	000e      	movs	r6, r1
 800b9c4:	0010      	movs	r0, r2
	portBASE_TYPE sensNameLen = 0;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	9301      	str	r3, [sp, #4]
	*pcWriteBuffer = '\0';
 800b9ca:	702b      	strb	r3, [r5, #0]
	pSensName = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 1, &sensNameLen);
 800b9cc:	aa01      	add	r2, sp, #4
 800b9ce:	2101      	movs	r1, #1
 800b9d0:	f003 f9bc 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 800b9d4:	1e04      	subs	r4, r0, #0
	if (pSensName == NULL) {
 800b9d6:	d021      	beq.n	800ba1c <SampleSensorCommand+0x60>
		if (!strncmp(pSensName, gyroCmdName, strlen(gyroCmdName))) {
 800b9d8:	2204      	movs	r2, #4
 800b9da:	4924      	ldr	r1, [pc, #144]	; (800ba6c <SampleSensorCommand+0xb0>)
 800b9dc:	f009 f835 	bl	8014a4a <strncmp>
 800b9e0:	2800      	cmp	r0, #0
 800b9e2:	d021      	beq.n	800ba28 <SampleSensorCommand+0x6c>
		} else if (!strncmp(pSensName, accCmdName, strlen(accCmdName))) {
 800b9e4:	2203      	movs	r2, #3
 800b9e6:	4922      	ldr	r1, [pc, #136]	; (800ba70 <SampleSensorCommand+0xb4>)
 800b9e8:	0020      	movs	r0, r4
 800b9ea:	f009 f82e 	bl	8014a4a <strncmp>
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	d028      	beq.n	800ba44 <SampleSensorCommand+0x88>
		} else if (!strncmp(pSensName, magCmdName, strlen(magCmdName))) {
 800b9f2:	2203      	movs	r2, #3
 800b9f4:	491f      	ldr	r1, [pc, #124]	; (800ba74 <SampleSensorCommand+0xb8>)
 800b9f6:	0020      	movs	r0, r4
 800b9f8:	f009 f827 	bl	8014a4a <strncmp>
 800b9fc:	2800      	cmp	r0, #0
 800b9fe:	d028      	beq.n	800ba52 <SampleSensorCommand+0x96>
		} else if (!strncmp(pSensName, tempCmdName, strlen(tempCmdName))) {
 800ba00:	2204      	movs	r2, #4
 800ba02:	491d      	ldr	r1, [pc, #116]	; (800ba78 <SampleSensorCommand+0xbc>)
 800ba04:	0020      	movs	r0, r4
 800ba06:	f009 f820 	bl	8014a4a <strncmp>
 800ba0a:	2800      	cmp	r0, #0
 800ba0c:	d128      	bne.n	800ba60 <SampleSensorCommand+0xa4>
			if (SampleTempCToString((char *)pcWriteBuffer, xWriteBufferLen) != H0BR4_OK)
 800ba0e:	0031      	movs	r1, r6
 800ba10:	0028      	movs	r0, r5
 800ba12:	f7ff fc3b 	bl	800b28c <SampleTempCToString>
 800ba16:	2800      	cmp	r0, #0
 800ba18:	d10c      	bne.n	800ba34 <SampleSensorCommand+0x78>
 800ba1a:	e010      	b.n	800ba3e <SampleSensorCommand+0x82>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800ba1c:	4a17      	ldr	r2, [pc, #92]	; (800ba7c <SampleSensorCommand+0xc0>)
 800ba1e:	0031      	movs	r1, r6
 800ba20:	0028      	movs	r0, r5
 800ba22:	f008 ff9b 	bl	801495c <snprintf>
		return pdFALSE;
 800ba26:	e00a      	b.n	800ba3e <SampleSensorCommand+0x82>
			if (SampleGyroDPSToString((char *)pcWriteBuffer, xWriteBufferLen) != H0BR4_OK)
 800ba28:	0031      	movs	r1, r6
 800ba2a:	0028      	movs	r0, r5
 800ba2c:	f7ff fee2 	bl	800b7f4 <SampleGyroDPSToString>
 800ba30:	2800      	cmp	r0, #0
 800ba32:	d004      	beq.n	800ba3e <SampleSensorCommand+0x82>
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Error reading Sensor\r\n");
 800ba34:	4a12      	ldr	r2, [pc, #72]	; (800ba80 <SampleSensorCommand+0xc4>)
 800ba36:	0031      	movs	r1, r6
 800ba38:	0028      	movs	r0, r5
 800ba3a:	f008 ff8f 	bl	801495c <snprintf>
}
 800ba3e:	2000      	movs	r0, #0
 800ba40:	b002      	add	sp, #8
 800ba42:	bd70      	pop	{r4, r5, r6, pc}
			if (SampleAccGToString((char *)pcWriteBuffer, xWriteBufferLen) != H0BR4_OK)
 800ba44:	0031      	movs	r1, r6
 800ba46:	0028      	movs	r0, r5
 800ba48:	f7ff ff8e 	bl	800b968 <SampleAccGToString>
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	d1f1      	bne.n	800ba34 <SampleSensorCommand+0x78>
 800ba50:	e7f5      	b.n	800ba3e <SampleSensorCommand+0x82>
			if (SampleMagMGaussToString((char *)pcWriteBuffer, xWriteBufferLen) != H0BR4_OK)
 800ba52:	0031      	movs	r1, r6
 800ba54:	0028      	movs	r0, r5
 800ba56:	f7ff fb63 	bl	800b120 <SampleMagMGaussToString>
 800ba5a:	2800      	cmp	r0, #0
 800ba5c:	d1ea      	bne.n	800ba34 <SampleSensorCommand+0x78>
 800ba5e:	e7ee      	b.n	800ba3e <SampleSensorCommand+0x82>
			snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800ba60:	4a06      	ldr	r2, [pc, #24]	; (800ba7c <SampleSensorCommand+0xc0>)
 800ba62:	0031      	movs	r1, r6
 800ba64:	0028      	movs	r0, r5
 800ba66:	f008 ff79 	bl	801495c <snprintf>
 800ba6a:	e7e8      	b.n	800ba3e <SampleSensorCommand+0x82>
 800ba6c:	0801d198 	.word	0x0801d198
 800ba70:	0801d1a0 	.word	0x0801d1a0
 800ba74:	0801d1a4 	.word	0x0801d1a4
 800ba78:	0801d1a8 	.word	0x0801d1a8
 800ba7c:	0801d184 	.word	0x0801d184
 800ba80:	0801d1b0 	.word	0x0801d1b0

0800ba84 <SampleAccGToBuf>:
{
 800ba84:	b510      	push	{r4, lr}
	return SampleAccG(buffer, buffer + 1, buffer + 2);
 800ba86:	0002      	movs	r2, r0
 800ba88:	3208      	adds	r2, #8
 800ba8a:	1d01      	adds	r1, r0, #4
 800ba8c:	f7ff ff3a 	bl	800b904 <SampleAccG>
}
 800ba90:	bd10      	pop	{r4, pc}
	...

0800ba94 <SampleAccGToPort>:
{
 800ba94:	b570      	push	{r4, r5, r6, lr}
 800ba96:	b084      	sub	sp, #16
 800ba98:	0006      	movs	r6, r0
 800ba9a:	000d      	movs	r5, r1
	if ((status = SampleAccGToBuf(buffer)) != H0BR4_OK)
 800ba9c:	a801      	add	r0, sp, #4
 800ba9e:	f7ff fff1 	bl	800ba84 <SampleAccGToBuf>
 800baa2:	1e04      	subs	r4, r0, #0
 800baa4:	d123      	bne.n	800baee <SampleAccGToPort+0x5a>
	if (module==myID){
 800baa6:	4b23      	ldr	r3, [pc, #140]	; (800bb34 <SampleAccGToPort+0xa0>)
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	42ab      	cmp	r3, r5
 800baac:	d022      	beq.n	800baf4 <SampleAccGToPort+0x60>
						messageParams[0]=port;
 800baae:	4b22      	ldr	r3, [pc, #136]	; (800bb38 <SampleAccGToPort+0xa4>)
 800bab0:	701e      	strb	r6, [r3, #0]
					  messageParams[1] = *((__IO uint8_t *)(&buffer[0])+3);  messageParams[2] = *((__IO uint8_t *)(&buffer[0])+2);
 800bab2:	aa01      	add	r2, sp, #4
 800bab4:	78d1      	ldrb	r1, [r2, #3]
 800bab6:	7059      	strb	r1, [r3, #1]
 800bab8:	7891      	ldrb	r1, [r2, #2]
 800baba:	7099      	strb	r1, [r3, #2]
						messageParams[3] = *((__IO uint8_t *)(&buffer[0])+1);  messageParams[4] = *((__IO uint8_t *)(&buffer[0])+0);
 800babc:	7851      	ldrb	r1, [r2, #1]
 800babe:	70d9      	strb	r1, [r3, #3]
 800bac0:	7811      	ldrb	r1, [r2, #0]
 800bac2:	7119      	strb	r1, [r3, #4]
					  messageParams[5] = *((__IO uint8_t *)(&buffer[1])+3);  messageParams[6] = *((__IO uint8_t *)(&buffer[1])+2);
 800bac4:	79d1      	ldrb	r1, [r2, #7]
 800bac6:	7159      	strb	r1, [r3, #5]
 800bac8:	7991      	ldrb	r1, [r2, #6]
 800baca:	7199      	strb	r1, [r3, #6]
						messageParams[7] = *((__IO uint8_t *)(&buffer[1])+1);  messageParams[8] = *((__IO uint8_t *)(&buffer[1])+0);
 800bacc:	7951      	ldrb	r1, [r2, #5]
 800bace:	71d9      	strb	r1, [r3, #7]
 800bad0:	7911      	ldrb	r1, [r2, #4]
 800bad2:	7219      	strb	r1, [r3, #8]
					  messageParams[9] = *((__IO uint8_t *)(&buffer[2])+3);  messageParams[10] = *((__IO uint8_t *)(&buffer[2])+2);
 800bad4:	7ad1      	ldrb	r1, [r2, #11]
 800bad6:	7259      	strb	r1, [r3, #9]
 800bad8:	7a91      	ldrb	r1, [r2, #10]
 800bada:	7299      	strb	r1, [r3, #10]
						messageParams[11] = *((__IO uint8_t *)(&buffer[2])+1); messageParams[12] = *((__IO uint8_t *)(&buffer[2])+0);
 800badc:	7a51      	ldrb	r1, [r2, #9]
 800bade:	72d9      	strb	r1, [r3, #11]
 800bae0:	7a12      	ldrb	r2, [r2, #8]
 800bae2:	731a      	strb	r2, [r3, #12]
						SendMessageToModule(module, CODE_PORT_FORWARD, (sizeof(float)*3)+1);
 800bae4:	220d      	movs	r2, #13
 800bae6:	2123      	movs	r1, #35	; 0x23
 800bae8:	0028      	movs	r0, r5
 800baea:	f7fd fd1b 	bl	8009524 <SendMessageToModule>
}
 800baee:	0020      	movs	r0, r4
 800baf0:	b004      	add	sp, #16
 800baf2:	bd70      	pop	{r4, r5, r6, pc}
						temp[0] = *((__IO uint8_t *)(&buffer[0])+3);  temp[1] = *((__IO uint8_t *)(&buffer[0])+2);
 800baf4:	ab01      	add	r3, sp, #4
 800baf6:	78da      	ldrb	r2, [r3, #3]
 800baf8:	4910      	ldr	r1, [pc, #64]	; (800bb3c <SampleAccGToPort+0xa8>)
 800bafa:	700a      	strb	r2, [r1, #0]
 800bafc:	789a      	ldrb	r2, [r3, #2]
 800bafe:	704a      	strb	r2, [r1, #1]
						temp[2] = *((__IO uint8_t *)(&buffer[0])+1);  temp[3] = *((__IO uint8_t *)(&buffer[0])+0);
 800bb00:	785a      	ldrb	r2, [r3, #1]
 800bb02:	708a      	strb	r2, [r1, #2]
 800bb04:	781a      	ldrb	r2, [r3, #0]
 800bb06:	70ca      	strb	r2, [r1, #3]
		        temp[4] = *((__IO uint8_t *)(&buffer[1])+3);  temp[5] = *((__IO uint8_t *)(&buffer[1])+2);
 800bb08:	79da      	ldrb	r2, [r3, #7]
 800bb0a:	710a      	strb	r2, [r1, #4]
 800bb0c:	799a      	ldrb	r2, [r3, #6]
 800bb0e:	714a      	strb	r2, [r1, #5]
						temp[6] = *((__IO uint8_t *)(&buffer[1])+1);  temp[7] = *((__IO uint8_t *)(&buffer[1])+0);
 800bb10:	795a      	ldrb	r2, [r3, #5]
 800bb12:	718a      	strb	r2, [r1, #6]
 800bb14:	791a      	ldrb	r2, [r3, #4]
 800bb16:	71ca      	strb	r2, [r1, #7]
		        temp[8] = *((__IO uint8_t *)(&buffer[2])+3);  temp[9] = *((__IO uint8_t *)(&buffer[2])+2);
 800bb18:	7ada      	ldrb	r2, [r3, #11]
 800bb1a:	720a      	strb	r2, [r1, #8]
 800bb1c:	7a9a      	ldrb	r2, [r3, #10]
 800bb1e:	724a      	strb	r2, [r1, #9]
						temp[10] = *((__IO uint8_t *)(&buffer[2])+1); temp[11] = *((__IO uint8_t *)(&buffer[2])+0);
 800bb20:	7a5a      	ldrb	r2, [r3, #9]
 800bb22:	728a      	strb	r2, [r1, #10]
 800bb24:	7a1b      	ldrb	r3, [r3, #8]
 800bb26:	72cb      	strb	r3, [r1, #11]
						writePxITMutex(port, (char *)&temp[0], 12*sizeof(uint8_t), 10);
 800bb28:	230a      	movs	r3, #10
 800bb2a:	220c      	movs	r2, #12
 800bb2c:	0030      	movs	r0, r6
 800bb2e:	f002 fae7 	bl	800e100 <writePxITMutex>
 800bb32:	e7dc      	b.n	800baee <SampleAccGToPort+0x5a>
 800bb34:	20000070 	.word	0x20000070
 800bb38:	20000da4 	.word	0x20000da4
 800bb3c:	200014a0 	.word	0x200014a0

0800bb40 <SampleMagMGauss>:
{
 800bb40:	b510      	push	{r4, lr}
	return LSM303SampleMagMGauss(magX, magY, magZ);
 800bb42:	f7ff fab7 	bl	800b0b4 <LSM303SampleMagMGauss>
}
 800bb46:	bd10      	pop	{r4, pc}

0800bb48 <StreamGyroDPSToPort>:
{
 800bb48:	b510      	push	{r4, lr}
 800bb4a:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SampleGyroDPSToPort);
 800bb4c:	4c02      	ldr	r4, [pc, #8]	; (800bb58 <StreamGyroDPSToPort+0x10>)
 800bb4e:	9400      	str	r4, [sp, #0]
 800bb50:	f7ff fbee 	bl	800b330 <StreamMemsToPort>
}
 800bb54:	b002      	add	sp, #8
 800bb56:	bd10      	pop	{r4, pc}
 800bb58:	0800b859 	.word	0x0800b859

0800bb5c <StreamGyroDPSToCLI>:
{
 800bb5c:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SampleGyroDPSToString);
 800bb5e:	4a02      	ldr	r2, [pc, #8]	; (800bb68 <StreamGyroDPSToCLI+0xc>)
 800bb60:	f7ff fc36 	bl	800b3d0 <StreamMemsToCLI>
}
 800bb64:	bd10      	pop	{r4, pc}
 800bb66:	46c0      	nop			; (mov r8, r8)
 800bb68:	0800b7f5 	.word	0x0800b7f5

0800bb6c <StreamAccGToPort>:
{
 800bb6c:	b510      	push	{r4, lr}
 800bb6e:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SampleAccGToPort);
 800bb70:	4c02      	ldr	r4, [pc, #8]	; (800bb7c <StreamAccGToPort+0x10>)
 800bb72:	9400      	str	r4, [sp, #0]
 800bb74:	f7ff fbdc 	bl	800b330 <StreamMemsToPort>
}
 800bb78:	b002      	add	sp, #8
 800bb7a:	bd10      	pop	{r4, pc}
 800bb7c:	0800ba95 	.word	0x0800ba95

0800bb80 <StreamAccGToCLI>:
{
 800bb80:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SampleAccGToString);
 800bb82:	4a02      	ldr	r2, [pc, #8]	; (800bb8c <StreamAccGToCLI+0xc>)
 800bb84:	f7ff fc24 	bl	800b3d0 <StreamMemsToCLI>
}
 800bb88:	bd10      	pop	{r4, pc}
 800bb8a:	46c0      	nop			; (mov r8, r8)
 800bb8c:	0800b969 	.word	0x0800b969

0800bb90 <StreamMagMGaussToPort>:
{
 800bb90:	b510      	push	{r4, lr}
 800bb92:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SampleMagMGaussToPort);
 800bb94:	4c02      	ldr	r4, [pc, #8]	; (800bba0 <StreamMagMGaussToPort+0x10>)
 800bb96:	9400      	str	r4, [sp, #0]
 800bb98:	f7ff fbca 	bl	800b330 <StreamMemsToPort>
}
 800bb9c:	b002      	add	sp, #8
 800bb9e:	bd10      	pop	{r4, pc}
 800bba0:	0800b191 	.word	0x0800b191

0800bba4 <StreamMagMGaussToCLI>:
{
 800bba4:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SampleMagMGaussToString);
 800bba6:	4a02      	ldr	r2, [pc, #8]	; (800bbb0 <StreamMagMGaussToCLI+0xc>)
 800bba8:	f7ff fc12 	bl	800b3d0 <StreamMemsToCLI>
}
 800bbac:	bd10      	pop	{r4, pc}
 800bbae:	46c0      	nop			; (mov r8, r8)
 800bbb0:	0800b121 	.word	0x0800b121

0800bbb4 <StreamTempCToPort>:
{
 800bbb4:	b510      	push	{r4, lr}
 800bbb6:	b082      	sub	sp, #8
	return StreamMemsToPort(port, module, period, timeout, SampleTempCToPort);
 800bbb8:	4c02      	ldr	r4, [pc, #8]	; (800bbc4 <StreamTempCToPort+0x10>)
 800bbba:	9400      	str	r4, [sp, #0]
 800bbbc:	f7ff fbb8 	bl	800b330 <StreamMemsToPort>
}
 800bbc0:	b002      	add	sp, #8
 800bbc2:	bd10      	pop	{r4, pc}
 800bbc4:	0800b2c1 	.word	0x0800b2c1

0800bbc8 <Module_MessagingTask>:
{
 800bbc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbca:	46c6      	mov	lr, r8
 800bbcc:	b500      	push	{lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	000d      	movs	r5, r1
 800bbd2:	9301      	str	r3, [sp, #4]
 800bbd4:	ab08      	add	r3, sp, #32
 800bbd6:	781c      	ldrb	r4, [r3, #0]
	switch (code)
 800bbd8:	4b6a      	ldr	r3, [pc, #424]	; (800bd84 <Module_MessagingTask+0x1bc>)
 800bbda:	18c2      	adds	r2, r0, r3
 800bbdc:	b293      	uxth	r3, r2
 800bbde:	2b0c      	cmp	r3, #12
 800bbe0:	d900      	bls.n	800bbe4 <Module_MessagingTask+0x1c>
 800bbe2:	e0ca      	b.n	800bd7a <Module_MessagingTask+0x1b2>
 800bbe4:	009a      	lsls	r2, r3, #2
 800bbe6:	4b68      	ldr	r3, [pc, #416]	; (800bd88 <Module_MessagingTask+0x1c0>)
 800bbe8:	589b      	ldr	r3, [r3, r2]
 800bbea:	469f      	mov	pc, r3
			SampleGyroDPS(&H0BR4_gyroX, &H0BR4_gyroY, &H0BR4_gyroZ);
 800bbec:	4a67      	ldr	r2, [pc, #412]	; (800bd8c <Module_MessagingTask+0x1c4>)
 800bbee:	4968      	ldr	r1, [pc, #416]	; (800bd90 <Module_MessagingTask+0x1c8>)
 800bbf0:	4868      	ldr	r0, [pc, #416]	; (800bd94 <Module_MessagingTask+0x1cc>)
 800bbf2:	f7ff fdcd 	bl	800b790 <SampleGyroDPS>
	Module_Status result = H0BR4_OK;
 800bbf6:	2000      	movs	r0, #0
			break;
 800bbf8:	e0c0      	b.n	800bd7c <Module_MessagingTask+0x1b4>
			SampleAccG(&H0BR4_accX, &H0BR4_accY, &H0BR4_accZ);
 800bbfa:	4a67      	ldr	r2, [pc, #412]	; (800bd98 <Module_MessagingTask+0x1d0>)
 800bbfc:	4967      	ldr	r1, [pc, #412]	; (800bd9c <Module_MessagingTask+0x1d4>)
 800bbfe:	4868      	ldr	r0, [pc, #416]	; (800bda0 <Module_MessagingTask+0x1d8>)
 800bc00:	f7ff fe80 	bl	800b904 <SampleAccG>
	Module_Status result = H0BR4_OK;
 800bc04:	2000      	movs	r0, #0
			break;
 800bc06:	e0b9      	b.n	800bd7c <Module_MessagingTask+0x1b4>
			SampleMagMGauss(&H0BR4_magX, &H0BR4_magY, &H0BR4_magZ);
 800bc08:	4a66      	ldr	r2, [pc, #408]	; (800bda4 <Module_MessagingTask+0x1dc>)
 800bc0a:	4967      	ldr	r1, [pc, #412]	; (800bda8 <Module_MessagingTask+0x1e0>)
 800bc0c:	4867      	ldr	r0, [pc, #412]	; (800bdac <Module_MessagingTask+0x1e4>)
 800bc0e:	f7ff ff97 	bl	800bb40 <SampleMagMGauss>
	Module_Status result = H0BR4_OK;
 800bc12:	2000      	movs	r0, #0
			break;
 800bc14:	e0b2      	b.n	800bd7c <Module_MessagingTask+0x1b4>
			SampleTempCelsius(&H0BR4_temp);
 800bc16:	4866      	ldr	r0, [pc, #408]	; (800bdb0 <Module_MessagingTask+0x1e8>)
 800bc18:	f7ff fb34 	bl	800b284 <SampleTempCelsius>
	Module_Status result = H0BR4_OK;
 800bc1c:	2000      	movs	r0, #0
			break;
 800bc1e:	e0ad      	b.n	800bd7c <Module_MessagingTask+0x1b4>
			period = ( (uint32_t) cMessage[port-1][3+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][1+shift] << 8 ) + cMessage[port-1][shift];
 800bc20:	1e4b      	subs	r3, r1, #1
 800bc22:	469c      	mov	ip, r3
			timeout = ( (uint32_t) cMessage[port-1][7+shift] << 24 ) + ( (uint32_t) cMessage[port-1][6+shift] << 16 ) + ( (uint32_t) cMessage[port-1][5+shift] << 8 ) + cMessage[port-1][4+shift];
 800bc24:	4e63      	ldr	r6, [pc, #396]	; (800bdb4 <Module_MessagingTask+0x1ec>)
 800bc26:	00d8      	lsls	r0, r3, #3
 800bc28:	1ac7      	subs	r7, r0, r3
 800bc2a:	00ff      	lsls	r7, r7, #3
 800bc2c:	19f7      	adds	r7, r6, r7
 800bc2e:	193a      	adds	r2, r7, r4
 800bc30:	79d3      	ldrb	r3, [r2, #7]
 800bc32:	061b      	lsls	r3, r3, #24
 800bc34:	7991      	ldrb	r1, [r2, #6]
 800bc36:	0409      	lsls	r1, r1, #16
 800bc38:	4688      	mov	r8, r1
 800bc3a:	4443      	add	r3, r8
 800bc3c:	7911      	ldrb	r1, [r2, #4]
 800bc3e:	4688      	mov	r8, r1
 800bc40:	4443      	add	r3, r8
 800bc42:	7951      	ldrb	r1, [r2, #5]
 800bc44:	0209      	lsls	r1, r1, #8
 800bc46:	4688      	mov	r8, r1
 800bc48:	4443      	add	r3, r8
			period = ( (uint32_t) cMessage[port-1][3+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][1+shift] << 8 ) + cMessage[port-1][shift];
 800bc4a:	78d1      	ldrb	r1, [r2, #3]
 800bc4c:	0609      	lsls	r1, r1, #24
 800bc4e:	4688      	mov	r8, r1
 800bc50:	7892      	ldrb	r2, [r2, #2]
 800bc52:	0412      	lsls	r2, r2, #16
 800bc54:	4442      	add	r2, r8
 800bc56:	5d3f      	ldrb	r7, [r7, r4]
 800bc58:	19d2      	adds	r2, r2, r7
 800bc5a:	4661      	mov	r1, ip
 800bc5c:	1a40      	subs	r0, r0, r1
 800bc5e:	00c0      	lsls	r0, r0, #3
 800bc60:	1830      	adds	r0, r6, r0
 800bc62:	1904      	adds	r4, r0, r4
 800bc64:	7860      	ldrb	r0, [r4, #1]
 800bc66:	0200      	lsls	r0, r0, #8
 800bc68:	1812      	adds	r2, r2, r0
			if ((result = StreamGyroDPSToPort(port, dst, period, timeout)) != H0BR4_OK)
 800bc6a:	9901      	ldr	r1, [sp, #4]
 800bc6c:	0028      	movs	r0, r5
 800bc6e:	f7ff ff6b 	bl	800bb48 <StreamGyroDPSToPort>
	return result;	
 800bc72:	e083      	b.n	800bd7c <Module_MessagingTask+0x1b4>
			period = ( (uint32_t) cMessage[port-1][3+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][1+shift] << 8 ) + cMessage[port-1][shift];
 800bc74:	1e4b      	subs	r3, r1, #1
 800bc76:	469c      	mov	ip, r3
			timeout = ( (uint32_t) cMessage[port-1][7+shift] << 24 ) + ( (uint32_t) cMessage[port-1][6+shift] << 16 ) + ( (uint32_t) cMessage[port-1][5+shift] << 8 ) + cMessage[port-1][4+shift];
 800bc78:	4e4e      	ldr	r6, [pc, #312]	; (800bdb4 <Module_MessagingTask+0x1ec>)
 800bc7a:	00d8      	lsls	r0, r3, #3
 800bc7c:	1ac7      	subs	r7, r0, r3
 800bc7e:	00ff      	lsls	r7, r7, #3
 800bc80:	19f7      	adds	r7, r6, r7
 800bc82:	193a      	adds	r2, r7, r4
 800bc84:	79d3      	ldrb	r3, [r2, #7]
 800bc86:	061b      	lsls	r3, r3, #24
 800bc88:	7991      	ldrb	r1, [r2, #6]
 800bc8a:	0409      	lsls	r1, r1, #16
 800bc8c:	4688      	mov	r8, r1
 800bc8e:	4443      	add	r3, r8
 800bc90:	7911      	ldrb	r1, [r2, #4]
 800bc92:	4688      	mov	r8, r1
 800bc94:	4443      	add	r3, r8
 800bc96:	7951      	ldrb	r1, [r2, #5]
 800bc98:	0209      	lsls	r1, r1, #8
 800bc9a:	4688      	mov	r8, r1
 800bc9c:	4443      	add	r3, r8
			period = ( (uint32_t) cMessage[port-1][3+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][1+shift] << 8 ) + cMessage[port-1][shift];
 800bc9e:	78d1      	ldrb	r1, [r2, #3]
 800bca0:	0609      	lsls	r1, r1, #24
 800bca2:	4688      	mov	r8, r1
 800bca4:	7892      	ldrb	r2, [r2, #2]
 800bca6:	0412      	lsls	r2, r2, #16
 800bca8:	4442      	add	r2, r8
 800bcaa:	5d3f      	ldrb	r7, [r7, r4]
 800bcac:	19d2      	adds	r2, r2, r7
 800bcae:	4661      	mov	r1, ip
 800bcb0:	1a40      	subs	r0, r0, r1
 800bcb2:	00c0      	lsls	r0, r0, #3
 800bcb4:	1830      	adds	r0, r6, r0
 800bcb6:	1904      	adds	r4, r0, r4
 800bcb8:	7860      	ldrb	r0, [r4, #1]
 800bcba:	0200      	lsls	r0, r0, #8
 800bcbc:	1812      	adds	r2, r2, r0
			if ((result = StreamAccGToPort(port, dst, period, timeout)) != H0BR4_OK)
 800bcbe:	9901      	ldr	r1, [sp, #4]
 800bcc0:	0028      	movs	r0, r5
 800bcc2:	f7ff ff53 	bl	800bb6c <StreamAccGToPort>
	return result;	
 800bcc6:	e059      	b.n	800bd7c <Module_MessagingTask+0x1b4>
			period = ( (uint32_t) cMessage[port-1][3+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][1+shift] << 8 ) + cMessage[port-1][shift];
 800bcc8:	1e4b      	subs	r3, r1, #1
 800bcca:	469c      	mov	ip, r3
			timeout = ( (uint32_t) cMessage[port-1][7+shift] << 24 ) + ( (uint32_t) cMessage[port-1][6+shift] << 16 ) + ( (uint32_t) cMessage[port-1][5+shift] << 8 ) + cMessage[port-1][4+shift];
 800bccc:	4e39      	ldr	r6, [pc, #228]	; (800bdb4 <Module_MessagingTask+0x1ec>)
 800bcce:	00d8      	lsls	r0, r3, #3
 800bcd0:	1ac7      	subs	r7, r0, r3
 800bcd2:	00ff      	lsls	r7, r7, #3
 800bcd4:	19f7      	adds	r7, r6, r7
 800bcd6:	193a      	adds	r2, r7, r4
 800bcd8:	79d3      	ldrb	r3, [r2, #7]
 800bcda:	061b      	lsls	r3, r3, #24
 800bcdc:	7991      	ldrb	r1, [r2, #6]
 800bcde:	0409      	lsls	r1, r1, #16
 800bce0:	4688      	mov	r8, r1
 800bce2:	4443      	add	r3, r8
 800bce4:	7911      	ldrb	r1, [r2, #4]
 800bce6:	4688      	mov	r8, r1
 800bce8:	4443      	add	r3, r8
 800bcea:	7951      	ldrb	r1, [r2, #5]
 800bcec:	0209      	lsls	r1, r1, #8
 800bcee:	4688      	mov	r8, r1
 800bcf0:	4443      	add	r3, r8
			period = ( (uint32_t) cMessage[port-1][3+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][1+shift] << 8 ) + cMessage[port-1][shift];
 800bcf2:	78d1      	ldrb	r1, [r2, #3]
 800bcf4:	0609      	lsls	r1, r1, #24
 800bcf6:	4688      	mov	r8, r1
 800bcf8:	7892      	ldrb	r2, [r2, #2]
 800bcfa:	0412      	lsls	r2, r2, #16
 800bcfc:	4442      	add	r2, r8
 800bcfe:	5d3f      	ldrb	r7, [r7, r4]
 800bd00:	19d2      	adds	r2, r2, r7
 800bd02:	4661      	mov	r1, ip
 800bd04:	1a40      	subs	r0, r0, r1
 800bd06:	00c0      	lsls	r0, r0, #3
 800bd08:	1830      	adds	r0, r6, r0
 800bd0a:	1904      	adds	r4, r0, r4
 800bd0c:	7860      	ldrb	r0, [r4, #1]
 800bd0e:	0200      	lsls	r0, r0, #8
 800bd10:	1812      	adds	r2, r2, r0
			if ((result = StreamMagMGaussToPort(port, dst, period, timeout)) != H0BR4_OK)
 800bd12:	9901      	ldr	r1, [sp, #4]
 800bd14:	0028      	movs	r0, r5
 800bd16:	f7ff ff3b 	bl	800bb90 <StreamMagMGaussToPort>
	return result;	
 800bd1a:	e02f      	b.n	800bd7c <Module_MessagingTask+0x1b4>
			period = ( (uint32_t) cMessage[port-1][3+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][1+shift] << 8 ) + cMessage[port-1][shift];
 800bd1c:	1e4b      	subs	r3, r1, #1
 800bd1e:	469c      	mov	ip, r3
			timeout = ( (uint32_t) cMessage[port-1][7+shift] << 24 ) + ( (uint32_t) cMessage[port-1][6+shift] << 16 ) + ( (uint32_t) cMessage[port-1][5+shift] << 8 ) + cMessage[port-1][4+shift];
 800bd20:	4e24      	ldr	r6, [pc, #144]	; (800bdb4 <Module_MessagingTask+0x1ec>)
 800bd22:	00d8      	lsls	r0, r3, #3
 800bd24:	1ac7      	subs	r7, r0, r3
 800bd26:	00ff      	lsls	r7, r7, #3
 800bd28:	19f7      	adds	r7, r6, r7
 800bd2a:	193a      	adds	r2, r7, r4
 800bd2c:	79d3      	ldrb	r3, [r2, #7]
 800bd2e:	061b      	lsls	r3, r3, #24
 800bd30:	7991      	ldrb	r1, [r2, #6]
 800bd32:	0409      	lsls	r1, r1, #16
 800bd34:	4688      	mov	r8, r1
 800bd36:	4443      	add	r3, r8
 800bd38:	7911      	ldrb	r1, [r2, #4]
 800bd3a:	4688      	mov	r8, r1
 800bd3c:	4443      	add	r3, r8
 800bd3e:	7951      	ldrb	r1, [r2, #5]
 800bd40:	0209      	lsls	r1, r1, #8
 800bd42:	4688      	mov	r8, r1
 800bd44:	4443      	add	r3, r8
			period = ( (uint32_t) cMessage[port-1][3+shift] << 24 ) + ( (uint32_t) cMessage[port-1][2+shift] << 16 ) + ( (uint32_t) cMessage[port-1][1+shift] << 8 ) + cMessage[port-1][shift];
 800bd46:	78d1      	ldrb	r1, [r2, #3]
 800bd48:	0609      	lsls	r1, r1, #24
 800bd4a:	4688      	mov	r8, r1
 800bd4c:	7892      	ldrb	r2, [r2, #2]
 800bd4e:	0412      	lsls	r2, r2, #16
 800bd50:	4442      	add	r2, r8
 800bd52:	5d3f      	ldrb	r7, [r7, r4]
 800bd54:	19d2      	adds	r2, r2, r7
 800bd56:	4661      	mov	r1, ip
 800bd58:	1a40      	subs	r0, r0, r1
 800bd5a:	00c0      	lsls	r0, r0, #3
 800bd5c:	1830      	adds	r0, r6, r0
 800bd5e:	1904      	adds	r4, r0, r4
 800bd60:	7860      	ldrb	r0, [r4, #1]
 800bd62:	0200      	lsls	r0, r0, #8
 800bd64:	1812      	adds	r2, r2, r0
			if ((result = StreamTempCToPort(port, dst, period, timeout)) != H0BR4_OK)
 800bd66:	9901      	ldr	r1, [sp, #4]
 800bd68:	0028      	movs	r0, r5
 800bd6a:	f7ff ff23 	bl	800bbb4 <StreamTempCToPort>
	return result;	
 800bd6e:	e005      	b.n	800bd7c <Module_MessagingTask+0x1b4>
	stopStream = true;
 800bd70:	4b11      	ldr	r3, [pc, #68]	; (800bdb8 <Module_MessagingTask+0x1f0>)
 800bd72:	2201      	movs	r2, #1
 800bd74:	701a      	strb	r2, [r3, #0]
			result = H0BR4_OK;
 800bd76:	2000      	movs	r0, #0
}
 800bd78:	e000      	b.n	800bd7c <Module_MessagingTask+0x1b4>
			result = H0BR4_OK;
 800bd7a:	2001      	movs	r0, #1
}
 800bd7c:	b002      	add	sp, #8
 800bd7e:	bc80      	pop	{r7}
 800bd80:	46b8      	mov	r8, r7
 800bd82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd84:	fffffdda 	.word	0xfffffdda
 800bd88:	0801d1c8 	.word	0x0801d1c8
 800bd8c:	2000147c 	.word	0x2000147c
 800bd90:	20001478 	.word	0x20001478
 800bd94:	20001474 	.word	0x20001474
 800bd98:	20001470 	.word	0x20001470
 800bd9c:	2000146c 	.word	0x2000146c
 800bda0:	20001468 	.word	0x20001468
 800bda4:	20001488 	.word	0x20001488
 800bda8:	20001484 	.word	0x20001484
 800bdac:	20001480 	.word	0x20001480
 800bdb0:	2000148c 	.word	0x2000148c
 800bdb4:	20000ba4 	.word	0x20000ba4
 800bdb8:	20001490 	.word	0x20001490

0800bdbc <StreamTempCToCLI>:
{
 800bdbc:	b510      	push	{r4, lr}
	return StreamMemsToCLI(period, timeout, SampleTempCToString);
 800bdbe:	4a02      	ldr	r2, [pc, #8]	; (800bdc8 <StreamTempCToCLI+0xc>)
 800bdc0:	f7ff fb06 	bl	800b3d0 <StreamMemsToCLI>
}
 800bdc4:	bd10      	pop	{r4, pc}
 800bdc6:	46c0      	nop			; (mov r8, r8)
 800bdc8:	0800b28d 	.word	0x0800b28d

0800bdcc <StreamSensorCommand>:
{
 800bdcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdce:	46de      	mov	lr, fp
 800bdd0:	4657      	mov	r7, sl
 800bdd2:	464e      	mov	r6, r9
 800bdd4:	4645      	mov	r5, r8
 800bdd6:	b5e0      	push	{r5, r6, r7, lr}
 800bdd8:	b087      	sub	sp, #28
 800bdda:	0005      	movs	r5, r0
 800bddc:	4689      	mov	r9, r1
 800bdde:	0014      	movs	r4, r2
	portBASE_TYPE sensNameLen = 0;
 800bde0:	2300      	movs	r3, #0
 800bde2:	9305      	str	r3, [sp, #20]
	*pcWriteBuffer = '\0';
 800bde4:	7003      	strb	r3, [r0, #0]
	portBASE_TYPE periodStrLen = 0;
 800bde6:	9301      	str	r3, [sp, #4]
	portBASE_TYPE timeoutStrLen = 0;
 800bde8:	9302      	str	r3, [sp, #8]
	portBASE_TYPE portStrLen = 0;
 800bdea:	9303      	str	r3, [sp, #12]
	portBASE_TYPE modStrLen = 0;
 800bdec:	9304      	str	r3, [sp, #16]
	*ppSensName = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 1, pSensNameLen);
 800bdee:	aa05      	add	r2, sp, #20
 800bdf0:	2101      	movs	r1, #1
 800bdf2:	0020      	movs	r0, r4
 800bdf4:	f002 ffaa 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 800bdf8:	0006      	movs	r6, r0
	pPeriodMSStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 2, &periodStrLen);
 800bdfa:	aa01      	add	r2, sp, #4
 800bdfc:	2102      	movs	r1, #2
 800bdfe:	0020      	movs	r0, r4
 800be00:	f002 ffa4 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 800be04:	0007      	movs	r7, r0
	pTimeoutMSStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 3, &timeoutStrLen);
 800be06:	aa02      	add	r2, sp, #8
 800be08:	2103      	movs	r1, #3
 800be0a:	0020      	movs	r0, r4
 800be0c:	f002 ff9e 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 800be10:	4680      	mov	r8, r0
	if ((*ppSensName == NULL) || (pPeriodMSStr == NULL) || (pTimeoutMSStr == NULL))
 800be12:	2e00      	cmp	r6, #0
 800be14:	d03c      	beq.n	800be90 <StreamSensorCommand+0xc4>
 800be16:	2f00      	cmp	r7, #0
 800be18:	d03a      	beq.n	800be90 <StreamSensorCommand+0xc4>
 800be1a:	2800      	cmp	r0, #0
 800be1c:	d038      	beq.n	800be90 <StreamSensorCommand+0xc4>
	*pPeriod = atoi(pPeriodMSStr);
 800be1e:	0038      	movs	r0, r7
 800be20:	f008 f937 	bl	8014092 <atoi>
 800be24:	0007      	movs	r7, r0
	*pTimeout = atoi(pTimeoutMSStr);
 800be26:	4640      	mov	r0, r8
 800be28:	f008 f933 	bl	8014092 <atoi>
 800be2c:	4680      	mov	r8, r0
	pPortStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 4, &portStrLen);
 800be2e:	aa03      	add	r2, sp, #12
 800be30:	2104      	movs	r1, #4
 800be32:	0020      	movs	r0, r4
 800be34:	f002 ff8a 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 800be38:	4682      	mov	sl, r0
	pModStr = (const char *)FreeRTOS_CLIGetParameter(pcCommandString, 5, &modStrLen);
 800be3a:	aa04      	add	r2, sp, #16
 800be3c:	2105      	movs	r1, #5
 800be3e:	0020      	movs	r0, r4
 800be40:	f002 ff84 	bl	800ed4c <FreeRTOS_CLIGetParameter>
 800be44:	1e04      	subs	r4, r0, #0
	if ((pModStr == NULL) && (pPortStr == NULL))
 800be46:	d020      	beq.n	800be8a <StreamSensorCommand+0xbe>
	if ((pModStr == NULL) || (pPortStr == NULL))	// If user has provided 4 Arguments.
 800be48:	4653      	mov	r3, sl
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d020      	beq.n	800be90 <StreamSensorCommand+0xc4>
	*pPort = atoi(pPortStr);
 800be4e:	4650      	mov	r0, sl
 800be50:	f008 f91f 	bl	8014092 <atoi>
 800be54:	b2c3      	uxtb	r3, r0
 800be56:	469a      	mov	sl, r3
	*pModule = atoi(pModStr);
 800be58:	0020      	movs	r0, r4
 800be5a:	f008 f91a 	bl	8014092 <atoi>
 800be5e:	b2c4      	uxtb	r4, r0
		if (!strncmp(pSensName, gyroCmdName, strlen(gyroCmdName))) {
 800be60:	2204      	movs	r2, #4
 800be62:	4949      	ldr	r1, [pc, #292]	; (800bf88 <StreamSensorCommand+0x1bc>)
 800be64:	0030      	movs	r0, r6
 800be66:	f008 fdf0 	bl	8014a4a <strncmp>
 800be6a:	2800      	cmp	r0, #0
 800be6c:	d116      	bne.n	800be9c <StreamSensorCommand+0xd0>
				if (StreamGyroDPSToPort(port, module, period, timeout) != H0BR4_OK)
 800be6e:	4643      	mov	r3, r8
 800be70:	003a      	movs	r2, r7
 800be72:	0021      	movs	r1, r4
 800be74:	4650      	mov	r0, sl
 800be76:	f7ff fe67 	bl	800bb48 <StreamGyroDPSToPort>
 800be7a:	2800      	cmp	r0, #0
 800be7c:	d071      	beq.n	800bf62 <StreamSensorCommand+0x196>
	snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Error reading Sensor\r\n");
 800be7e:	4a43      	ldr	r2, [pc, #268]	; (800bf8c <StreamSensorCommand+0x1c0>)
 800be80:	4649      	mov	r1, r9
 800be82:	0028      	movs	r0, r5
 800be84:	f008 fd6a 	bl	801495c <snprintf>
	return pdFALSE;
 800be88:	e070      	b.n	800bf6c <StreamSensorCommand+0x1a0>
	if ((pModStr == NULL) && (pPortStr == NULL))
 800be8a:	4653      	mov	r3, sl
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d05b      	beq.n	800bf48 <StreamSensorCommand+0x17c>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800be90:	4a3f      	ldr	r2, [pc, #252]	; (800bf90 <StreamSensorCommand+0x1c4>)
 800be92:	4649      	mov	r1, r9
 800be94:	0028      	movs	r0, r5
 800be96:	f008 fd61 	bl	801495c <snprintf>
		return pdFALSE;
 800be9a:	e067      	b.n	800bf6c <StreamSensorCommand+0x1a0>
	*pPortOrCLI = false;
 800be9c:	2300      	movs	r3, #0
 800be9e:	469b      	mov	fp, r3
		} else if (!strncmp(pSensName, accCmdName, strlen(accCmdName))) {
 800bea0:	2203      	movs	r2, #3
 800bea2:	493c      	ldr	r1, [pc, #240]	; (800bf94 <StreamSensorCommand+0x1c8>)
 800bea4:	0030      	movs	r0, r6
 800bea6:	f008 fdd0 	bl	8014a4a <strncmp>
 800beaa:	2800      	cmp	r0, #0
 800beac:	d112      	bne.n	800bed4 <StreamSensorCommand+0x108>
			if (portOrCLI) {
 800beae:	465b      	mov	r3, fp
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d006      	beq.n	800bec2 <StreamSensorCommand+0xf6>
				if (StreamAccGToCLI(period, timeout) != H0BR4_OK)
 800beb4:	4641      	mov	r1, r8
 800beb6:	0038      	movs	r0, r7
 800beb8:	f7ff fe62 	bl	800bb80 <StreamAccGToCLI>
 800bebc:	2800      	cmp	r0, #0
 800bebe:	d1de      	bne.n	800be7e <StreamSensorCommand+0xb2>
 800bec0:	e04f      	b.n	800bf62 <StreamSensorCommand+0x196>
				if (StreamAccGToPort(port, module, period, timeout) != H0BR4_OK)
 800bec2:	4643      	mov	r3, r8
 800bec4:	003a      	movs	r2, r7
 800bec6:	0021      	movs	r1, r4
 800bec8:	4650      	mov	r0, sl
 800beca:	f7ff fe4f 	bl	800bb6c <StreamAccGToPort>
 800bece:	2800      	cmp	r0, #0
 800bed0:	d1d5      	bne.n	800be7e <StreamSensorCommand+0xb2>
 800bed2:	e046      	b.n	800bf62 <StreamSensorCommand+0x196>
		} else if (!strncmp(pSensName, magCmdName, strlen(magCmdName))) {
 800bed4:	2203      	movs	r2, #3
 800bed6:	4930      	ldr	r1, [pc, #192]	; (800bf98 <StreamSensorCommand+0x1cc>)
 800bed8:	0030      	movs	r0, r6
 800beda:	f008 fdb6 	bl	8014a4a <strncmp>
 800bede:	2800      	cmp	r0, #0
 800bee0:	d112      	bne.n	800bf08 <StreamSensorCommand+0x13c>
			if (portOrCLI) {
 800bee2:	465b      	mov	r3, fp
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d006      	beq.n	800bef6 <StreamSensorCommand+0x12a>
				if (StreamMagMGaussToCLI(period, timeout) != H0BR4_OK)
 800bee8:	4641      	mov	r1, r8
 800beea:	0038      	movs	r0, r7
 800beec:	f7ff fe5a 	bl	800bba4 <StreamMagMGaussToCLI>
 800bef0:	2800      	cmp	r0, #0
 800bef2:	d1c4      	bne.n	800be7e <StreamSensorCommand+0xb2>
 800bef4:	e035      	b.n	800bf62 <StreamSensorCommand+0x196>
				if (StreamMagMGaussToPort(port, module, period, timeout) != H0BR4_OK)
 800bef6:	4643      	mov	r3, r8
 800bef8:	003a      	movs	r2, r7
 800befa:	0021      	movs	r1, r4
 800befc:	4650      	mov	r0, sl
 800befe:	f7ff fe47 	bl	800bb90 <StreamMagMGaussToPort>
 800bf02:	2800      	cmp	r0, #0
 800bf04:	d1bb      	bne.n	800be7e <StreamSensorCommand+0xb2>
 800bf06:	e02c      	b.n	800bf62 <StreamSensorCommand+0x196>
		} else if (!strncmp(pSensName, tempCmdName, strlen(tempCmdName))) {
 800bf08:	2204      	movs	r2, #4
 800bf0a:	4924      	ldr	r1, [pc, #144]	; (800bf9c <StreamSensorCommand+0x1d0>)
 800bf0c:	0030      	movs	r0, r6
 800bf0e:	f008 fd9c 	bl	8014a4a <strncmp>
 800bf12:	2800      	cmp	r0, #0
 800bf14:	d112      	bne.n	800bf3c <StreamSensorCommand+0x170>
			if (portOrCLI) {
 800bf16:	465b      	mov	r3, fp
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d006      	beq.n	800bf2a <StreamSensorCommand+0x15e>
				if (StreamTempCToCLI(period, timeout) != H0BR4_OK)
 800bf1c:	4641      	mov	r1, r8
 800bf1e:	0038      	movs	r0, r7
 800bf20:	f7ff ff4c 	bl	800bdbc <StreamTempCToCLI>
 800bf24:	2800      	cmp	r0, #0
 800bf26:	d1aa      	bne.n	800be7e <StreamSensorCommand+0xb2>
 800bf28:	e01b      	b.n	800bf62 <StreamSensorCommand+0x196>
				if (StreamTempCToPort(port, module, period, timeout) != H0BR4_OK)
 800bf2a:	4643      	mov	r3, r8
 800bf2c:	003a      	movs	r2, r7
 800bf2e:	0021      	movs	r1, r4
 800bf30:	4650      	mov	r0, sl
 800bf32:	f7ff fe3f 	bl	800bbb4 <StreamTempCToPort>
 800bf36:	2800      	cmp	r0, #0
 800bf38:	d1a1      	bne.n	800be7e <StreamSensorCommand+0xb2>
 800bf3a:	e012      	b.n	800bf62 <StreamSensorCommand+0x196>
			snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Invalid Arguments\r\n");
 800bf3c:	4a14      	ldr	r2, [pc, #80]	; (800bf90 <StreamSensorCommand+0x1c4>)
 800bf3e:	4649      	mov	r1, r9
 800bf40:	0028      	movs	r0, r5
 800bf42:	f008 fd0b 	bl	801495c <snprintf>
 800bf46:	e00c      	b.n	800bf62 <StreamSensorCommand+0x196>
		if (!strncmp(pSensName, gyroCmdName, strlen(gyroCmdName))) {
 800bf48:	2204      	movs	r2, #4
 800bf4a:	490f      	ldr	r1, [pc, #60]	; (800bf88 <StreamSensorCommand+0x1bc>)
 800bf4c:	0030      	movs	r0, r6
 800bf4e:	f008 fd7c 	bl	8014a4a <strncmp>
 800bf52:	2800      	cmp	r0, #0
 800bf54:	d112      	bne.n	800bf7c <StreamSensorCommand+0x1b0>
				if (StreamGyroDPSToCLI(period, timeout) != H0BR4_OK)
 800bf56:	4641      	mov	r1, r8
 800bf58:	0038      	movs	r0, r7
 800bf5a:	f7ff fdff 	bl	800bb5c <StreamGyroDPSToCLI>
 800bf5e:	2800      	cmp	r0, #0
 800bf60:	d18d      	bne.n	800be7e <StreamSensorCommand+0xb2>
		snprintf((char *)pcWriteBuffer, xWriteBufferLen, "\r\n");
 800bf62:	4a0f      	ldr	r2, [pc, #60]	; (800bfa0 <StreamSensorCommand+0x1d4>)
 800bf64:	4649      	mov	r1, r9
 800bf66:	0028      	movs	r0, r5
 800bf68:	f008 fcf8 	bl	801495c <snprintf>
}
 800bf6c:	2000      	movs	r0, #0
 800bf6e:	b007      	add	sp, #28
 800bf70:	bcf0      	pop	{r4, r5, r6, r7}
 800bf72:	46bb      	mov	fp, r7
 800bf74:	46b2      	mov	sl, r6
 800bf76:	46a9      	mov	r9, r5
 800bf78:	46a0      	mov	r8, r4
 800bf7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*pPortOrCLI = true;
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	469b      	mov	fp, r3
	uint8_t module = 0;
 800bf80:	2400      	movs	r4, #0
	uint8_t port = 0;
 800bf82:	46a2      	mov	sl, r4
 800bf84:	e78c      	b.n	800bea0 <StreamSensorCommand+0xd4>
 800bf86:	46c0      	nop			; (mov r8, r8)
 800bf88:	0801d198 	.word	0x0801d198
 800bf8c:	0801d1b0 	.word	0x0801d1b0
 800bf90:	0801d184 	.word	0x0801d184
 800bf94:	0801d1a0 	.word	0x0801d1a0
 800bf98:	0801d1a4 	.word	0x0801d1a4
 800bf9c:	0801d1a8 	.word	0x0801d1a8
 800bfa0:	0801c42c 	.word	0x0801c42c

0800bfa4 <SaveToRO>:

/* --- Save array topology and Command Snippets in Flash RO --- 
*/
uint8_t SaveToRO(void)
{
 800bfa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfa6:	46de      	mov	lr, fp
 800bfa8:	4657      	mov	r7, sl
 800bfaa:	464e      	mov	r6, r9
 800bfac:	4645      	mov	r5, r8
 800bfae:	b5e0      	push	{r5, r6, r7, lr}
 800bfb0:	b089      	sub	sp, #36	; 0x24
	BOS_Status result = BOS_OK; 
	HAL_StatusTypeDef FlashStatus = HAL_OK;
	uint16_t add = 2, temp = 0;
	uint8_t snipBuffer[sizeof(snippet_t)+1] = {0};
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	9302      	str	r3, [sp, #8]
 800bfb6:	2211      	movs	r2, #17
 800bfb8:	2100      	movs	r1, #0
 800bfba:	a803      	add	r0, sp, #12
 800bfbc:	f008 fad9 	bl	8014572 <memset>
	
	HAL_FLASH_Unlock();
 800bfc0:	f005 fcca 	bl	8011958 <HAL_FLASH_Unlock>
	
	/* Erase RO area */
	FLASH_PageErase(RO_START_ADDRESS);
 800bfc4:	487d      	ldr	r0, [pc, #500]	; (800c1bc <SaveToRO+0x218>)
 800bfc6:	f005 fd8b 	bl	8011ae0 <FLASH_PageErase>
	FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800bfca:	487d      	ldr	r0, [pc, #500]	; (800c1c0 <SaveToRO+0x21c>)
 800bfcc:	f005 fce2 	bl	8011994 <FLASH_WaitForLastOperation>
 800bfd0:	9000      	str	r0, [sp, #0]
 800bfd2:	9001      	str	r0, [sp, #4]
	if(FlashStatus != HAL_OK) {
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	d112      	bne.n	800bffe <SaveToRO+0x5a>
		return pFlash.ErrorCode;
	} else {			
		/* Operation is completed, disable the PER Bit */
		CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800bfd8:	4a7a      	ldr	r2, [pc, #488]	; (800c1c4 <SaveToRO+0x220>)
 800bfda:	6913      	ldr	r3, [r2, #16]
 800bfdc:	2102      	movs	r1, #2
 800bfde:	438b      	bics	r3, r1
 800bfe0:	6113      	str	r3, [r2, #16]
	}	
	
	/* Save number of modules and myID */
	if (myID)
 800bfe2:	4b79      	ldr	r3, [pc, #484]	; (800c1c8 <SaveToRO+0x224>)
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d115      	bne.n	800c016 <SaveToRO+0x72>
		}
	}
	
	// Save Command Snippets
	int currentAdd = RO_MID_ADDRESS;
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800bfea:	4b78      	ldr	r3, [pc, #480]	; (800c1cc <SaveToRO+0x228>)
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d100      	bne.n	800bff4 <SaveToRO+0x50>
 800bff2:	e0e0      	b.n	800c1b6 <SaveToRO+0x212>
 800bff4:	9d00      	ldr	r5, [sp, #0]
 800bff6:	4e76      	ldr	r6, [pc, #472]	; (800c1d0 <SaveToRO+0x22c>)
	{
		if (snippets[s].cond.conditionType) 
 800bff8:	4b76      	ldr	r3, [pc, #472]	; (800c1d4 <SaveToRO+0x230>)
 800bffa:	469a      	mov	sl, r3
 800bffc:	e095      	b.n	800c12a <SaveToRO+0x186>
		return pFlash.ErrorCode;
 800bffe:	4b76      	ldr	r3, [pc, #472]	; (800c1d8 <SaveToRO+0x234>)
 800c000:	69db      	ldr	r3, [r3, #28]
 800c002:	b2db      	uxtb	r3, r3
 800c004:	9301      	str	r3, [sp, #4]
	}
	
	HAL_FLASH_Lock();
	
	return result;
}
 800c006:	9801      	ldr	r0, [sp, #4]
 800c008:	b009      	add	sp, #36	; 0x24
 800c00a:	bcf0      	pop	{r4, r5, r6, r7}
 800c00c:	46bb      	mov	fp, r7
 800c00e:	46b2      	mov	sl, r6
 800c010:	46a9      	mov	r9, r5
 800c012:	46a0      	mov	r8, r4
 800c014:	bdf0      	pop	{r4, r5, r6, r7, pc}
		temp = (uint16_t) (N<<8) + myID;
 800c016:	4a71      	ldr	r2, [pc, #452]	; (800c1dc <SaveToRO+0x238>)
 800c018:	7812      	ldrb	r2, [r2, #0]
 800c01a:	0212      	lsls	r2, r2, #8
 800c01c:	18d2      	adds	r2, r2, r3
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS, temp);
 800c01e:	b292      	uxth	r2, r2
 800c020:	2300      	movs	r3, #0
 800c022:	4966      	ldr	r1, [pc, #408]	; (800c1bc <SaveToRO+0x218>)
 800c024:	2001      	movs	r0, #1
 800c026:	f005 fce3 	bl	80119f0 <HAL_FLASH_Program>
		FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800c02a:	4865      	ldr	r0, [pc, #404]	; (800c1c0 <SaveToRO+0x21c>)
 800c02c:	f005 fcb2 	bl	8011994 <FLASH_WaitForLastOperation>
		if (FlashStatus != HAL_OK) {
 800c030:	2800      	cmp	r0, #0
 800c032:	d112      	bne.n	800c05a <SaveToRO+0xb6>
			CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800c034:	4a63      	ldr	r2, [pc, #396]	; (800c1c4 <SaveToRO+0x220>)
 800c036:	6913      	ldr	r3, [r2, #16]
 800c038:	2101      	movs	r1, #1
 800c03a:	438b      	bics	r3, r1
 800c03c:	6113      	str	r3, [r2, #16]
		for(uint8_t i=1 ; i<=N ; i++)
 800c03e:	4b67      	ldr	r3, [pc, #412]	; (800c1dc <SaveToRO+0x238>)
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	2201      	movs	r2, #1
 800c044:	4691      	mov	r9, r2
	uint16_t add = 2, temp = 0;
 800c046:	2602      	movs	r6, #2
		for(uint8_t i=1 ; i<=N ; i++)
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d0ce      	beq.n	800bfea <SaveToRO+0x46>
 800c04c:	4b64      	ldr	r3, [pc, #400]	; (800c1e0 <SaveToRO+0x23c>)
 800c04e:	469a      	mov	sl, r3
 800c050:	2308      	movs	r3, #8
 800c052:	4453      	add	r3, sl
 800c054:	469b      	mov	fp, r3
				if (array[i-1][0]) {
 800c056:	46d0      	mov	r8, sl
 800c058:	e02c      	b.n	800c0b4 <SaveToRO+0x110>
			return pFlash.ErrorCode;
 800c05a:	4b5f      	ldr	r3, [pc, #380]	; (800c1d8 <SaveToRO+0x234>)
 800c05c:	69db      	ldr	r3, [r3, #28]
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	9301      	str	r3, [sp, #4]
 800c062:	e7d0      	b.n	800c006 <SaveToRO+0x62>
						return pFlash.ErrorCode;
 800c064:	4b5c      	ldr	r3, [pc, #368]	; (800c1d8 <SaveToRO+0x234>)
 800c066:	69db      	ldr	r3, [r3, #28]
 800c068:	b2db      	uxtb	r3, r3
 800c06a:	9301      	str	r3, [sp, #4]
 800c06c:	e7cb      	b.n	800c006 <SaveToRO+0x62>
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800c06e:	3402      	adds	r4, #2
 800c070:	42ac      	cmp	r4, r5
 800c072:	d017      	beq.n	800c0a4 <SaveToRO+0x100>
				if (array[i-1][0]) {
 800c074:	4643      	mov	r3, r8
 800c076:	5afb      	ldrh	r3, [r7, r3]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d0f8      	beq.n	800c06e <SaveToRO+0xca>
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, RO_START_ADDRESS+add, array[i-1][j]);
 800c07c:	8822      	ldrh	r2, [r4, #0]
 800c07e:	4b4f      	ldr	r3, [pc, #316]	; (800c1bc <SaveToRO+0x218>)
 800c080:	18f1      	adds	r1, r6, r3
 800c082:	2300      	movs	r3, #0
 800c084:	2001      	movs	r0, #1
 800c086:	f005 fcb3 	bl	80119f0 <HAL_FLASH_Program>
					add += 2;
 800c08a:	3602      	adds	r6, #2
 800c08c:	b2b6      	uxth	r6, r6
					FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800c08e:	484c      	ldr	r0, [pc, #304]	; (800c1c0 <SaveToRO+0x21c>)
 800c090:	f005 fc80 	bl	8011994 <FLASH_WaitForLastOperation>
					if (FlashStatus != HAL_OK) {
 800c094:	2800      	cmp	r0, #0
 800c096:	d1e5      	bne.n	800c064 <SaveToRO+0xc0>
						CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800c098:	4a4a      	ldr	r2, [pc, #296]	; (800c1c4 <SaveToRO+0x220>)
 800c09a:	6913      	ldr	r3, [r2, #16]
 800c09c:	2101      	movs	r1, #1
 800c09e:	438b      	bics	r3, r1
 800c0a0:	6113      	str	r3, [r2, #16]
 800c0a2:	e7e4      	b.n	800c06e <SaveToRO+0xca>
		for(uint8_t i=1 ; i<=N ; i++)
 800c0a4:	464b      	mov	r3, r9
 800c0a6:	3301      	adds	r3, #1
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	4699      	mov	r9, r3
 800c0ac:	4b4b      	ldr	r3, [pc, #300]	; (800c1dc <SaveToRO+0x238>)
 800c0ae:	781b      	ldrb	r3, [r3, #0]
 800c0b0:	454b      	cmp	r3, r9
 800c0b2:	d39a      	bcc.n	800bfea <SaveToRO+0x46>
			for(uint8_t j=0 ; j<=MaxNumOfPorts ; j++)
 800c0b4:	464b      	mov	r3, r9
 800c0b6:	00dd      	lsls	r5, r3, #3
 800c0b8:	1aed      	subs	r5, r5, r3
 800c0ba:	006d      	lsls	r5, r5, #1
 800c0bc:	002c      	movs	r4, r5
 800c0be:	3c0e      	subs	r4, #14
 800c0c0:	4454      	add	r4, sl
 800c0c2:	445d      	add	r5, fp
				if (array[i-1][0]) {
 800c0c4:	3b01      	subs	r3, #1
 800c0c6:	00df      	lsls	r7, r3, #3
 800c0c8:	1aff      	subs	r7, r7, r3
 800c0ca:	007f      	lsls	r7, r7, #1
 800c0cc:	e7d2      	b.n	800c074 <SaveToRO+0xd0>
					return pFlash.ErrorCode;
 800c0ce:	4b42      	ldr	r3, [pc, #264]	; (800c1d8 <SaveToRO+0x234>)
 800c0d0:	69db      	ldr	r3, [r3, #28]
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	9301      	str	r3, [sp, #4]
 800c0d6:	e796      	b.n	800c006 <SaveToRO+0x62>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800c0d8:	4643      	mov	r3, r8
 800c0da:	691b      	ldr	r3, [r3, #16]
 800c0dc:	2201      	movs	r2, #1
 800c0de:	4393      	bics	r3, r2
 800c0e0:	4642      	mov	r2, r8
 800c0e2:	6113      	str	r3, [r2, #16]
					currentAdd += 2;
 800c0e4:	3602      	adds	r6, #2
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800c0e6:	3401      	adds	r4, #1
 800c0e8:	b2e4      	uxtb	r4, r4
 800c0ea:	68ef      	ldr	r7, [r5, #12]
 800c0ec:	0038      	movs	r0, r7
 800c0ee:	f7f4 f813 	bl	8000118 <strlen>
 800c0f2:	3001      	adds	r0, #1
 800c0f4:	0840      	lsrs	r0, r0, #1
 800c0f6:	4284      	cmp	r4, r0
 800c0f8:	d210      	bcs.n	800c11c <SaveToRO+0x178>
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)(snippets[s].cmd+j*2));
 800c0fa:	0063      	lsls	r3, r4, #1
 800c0fc:	5afa      	ldrh	r2, [r7, r3]
 800c0fe:	2300      	movs	r3, #0
 800c100:	0031      	movs	r1, r6
 800c102:	2001      	movs	r0, #1
 800c104:	f005 fc74 	bl	80119f0 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800c108:	4658      	mov	r0, fp
 800c10a:	f005 fc43 	bl	8011994 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800c10e:	2800      	cmp	r0, #0
 800c110:	d0e2      	beq.n	800c0d8 <SaveToRO+0x134>
					return pFlash.ErrorCode;
 800c112:	4b31      	ldr	r3, [pc, #196]	; (800c1d8 <SaveToRO+0x234>)
 800c114:	69db      	ldr	r3, [r3, #28]
 800c116:	b2db      	uxtb	r3, r3
 800c118:	9301      	str	r3, [sp, #4]
 800c11a:	e774      	b.n	800c006 <SaveToRO+0x62>
 800c11c:	464d      	mov	r5, r9
	for(uint8_t s=0 ; s<numOfRecordedSnippets ; s++) 
 800c11e:	3501      	adds	r5, #1
 800c120:	b2ed      	uxtb	r5, r5
 800c122:	4b2a      	ldr	r3, [pc, #168]	; (800c1cc <SaveToRO+0x228>)
 800c124:	781b      	ldrb	r3, [r3, #0]
 800c126:	42ab      	cmp	r3, r5
 800c128:	d945      	bls.n	800c1b6 <SaveToRO+0x212>
		if (snippets[s].cond.conditionType) 
 800c12a:	9500      	str	r5, [sp, #0]
 800c12c:	00ab      	lsls	r3, r5, #2
 800c12e:	195b      	adds	r3, r3, r5
 800c130:	009b      	lsls	r3, r3, #2
 800c132:	4652      	mov	r2, sl
 800c134:	5c9b      	ldrb	r3, [r3, r2]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d0f1      	beq.n	800c11e <SaveToRO+0x17a>
			snipBuffer[0] = 0xFE;		// A marker to separate Snippets
 800c13a:	23fe      	movs	r3, #254	; 0xfe
 800c13c:	aa02      	add	r2, sp, #8
 800c13e:	7013      	strb	r3, [r2, #0]
			memcpy( (uint8_t *)&snipBuffer[1], (uint8_t *)&snippets[s], sizeof(snippet_t));
 800c140:	00a9      	lsls	r1, r5, #2
 800c142:	1949      	adds	r1, r1, r5
 800c144:	0089      	lsls	r1, r1, #2
 800c146:	4b23      	ldr	r3, [pc, #140]	; (800c1d4 <SaveToRO+0x230>)
 800c148:	469c      	mov	ip, r3
 800c14a:	4461      	add	r1, ip
 800c14c:	2214      	movs	r2, #20
 800c14e:	ab02      	add	r3, sp, #8
 800c150:	1c58      	adds	r0, r3, #1
 800c152:	f008 fa05 	bl	8014560 <memcpy>
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800c156:	2314      	movs	r3, #20
 800c158:	469b      	mov	fp, r3
 800c15a:	44b3      	add	fp, r6
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800c15c:	ab02      	add	r3, sp, #8
 800c15e:	1b9b      	subs	r3, r3, r6
 800c160:	4698      	mov	r8, r3
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800c162:	4b17      	ldr	r3, [pc, #92]	; (800c1c0 <SaveToRO+0x21c>)
 800c164:	4699      	mov	r9, r3
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800c166:	4f17      	ldr	r7, [pc, #92]	; (800c1c4 <SaveToRO+0x220>)
 800c168:	4644      	mov	r4, r8
 800c16a:	46a8      	mov	r8, r5
 800c16c:	465d      	mov	r5, fp
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, currentAdd, *(uint16_t *)&snipBuffer[j*2]);
 800c16e:	5ba2      	ldrh	r2, [r4, r6]
 800c170:	2300      	movs	r3, #0
 800c172:	0031      	movs	r1, r6
 800c174:	2001      	movs	r0, #1
 800c176:	f005 fc3b 	bl	80119f0 <HAL_FLASH_Program>
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800c17a:	4648      	mov	r0, r9
 800c17c:	f005 fc0a 	bl	8011994 <FLASH_WaitForLastOperation>
				if (FlashStatus != HAL_OK) {
 800c180:	2800      	cmp	r0, #0
 800c182:	d1a4      	bne.n	800c0ce <SaveToRO+0x12a>
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	2201      	movs	r2, #1
 800c188:	4393      	bics	r3, r2
 800c18a:	613b      	str	r3, [r7, #16]
					currentAdd += 2;
 800c18c:	3602      	adds	r6, #2
			for(uint8_t j=0 ; j<(sizeof(snippet_t)/2) ; j++)
 800c18e:	42b5      	cmp	r5, r6
 800c190:	d1ed      	bne.n	800c16e <SaveToRO+0x1ca>
 800c192:	0004      	movs	r4, r0
 800c194:	4645      	mov	r5, r8
			for(uint8_t j=0 ; j<((strlen(snippets[s].cmd)+1)/2) ; j++)
 800c196:	9a00      	ldr	r2, [sp, #0]
 800c198:	0093      	lsls	r3, r2, #2
 800c19a:	4694      	mov	ip, r2
 800c19c:	4463      	add	r3, ip
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	4a0c      	ldr	r2, [pc, #48]	; (800c1d4 <SaveToRO+0x230>)
 800c1a2:	4691      	mov	r9, r2
 800c1a4:	4499      	add	r9, r3
				FlashStatus = FLASH_WaitForLastOperation((uint32_t)HAL_FLASH_TIMEOUT_VALUE); 
 800c1a6:	4b06      	ldr	r3, [pc, #24]	; (800c1c0 <SaveToRO+0x21c>)
 800c1a8:	469b      	mov	fp, r3
					CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800c1aa:	4b06      	ldr	r3, [pc, #24]	; (800c1c4 <SaveToRO+0x220>)
 800c1ac:	4698      	mov	r8, r3
 800c1ae:	464b      	mov	r3, r9
 800c1b0:	46a9      	mov	r9, r5
 800c1b2:	001d      	movs	r5, r3
 800c1b4:	e799      	b.n	800c0ea <SaveToRO+0x146>
	HAL_FLASH_Lock();
 800c1b6:	f005 fbe3 	bl	8011980 <HAL_FLASH_Lock>
	return result;
 800c1ba:	e724      	b.n	800c006 <SaveToRO+0x62>
 800c1bc:	0801d800 	.word	0x0801d800
 800c1c0:	0000c350 	.word	0x0000c350
 800c1c4:	40022000 	.word	0x40022000
 800c1c8:	20000070 	.word	0x20000070
 800c1cc:	20000f57 	.word	0x20000f57
 800c1d0:	0801dc00 	.word	0x0801dc00
 800c1d4:	20006700 	.word	0x20006700
 800c1d8:	20006b80 	.word	0x20006b80
 800c1dc:	2000001c 	.word	0x2000001c
 800c1e0:	200000c0 	.word	0x200000c0

0800c1e4 <DMA_MSG_RX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging RX DMA channel 
*/
void DMA_MSG_RX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800c1e4:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800c1e6:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c1ec:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c1ee:	2280      	movs	r2, #128	; 0x80
 800c1f0:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c1f2:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c1f4:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c1f6:	3320      	adds	r3, #32
 800c1f8:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c1fa:	2380      	movs	r3, #128	; 0x80
 800c1fc:	019b      	lsls	r3, r3, #6
 800c1fe:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800c200:	f004 feb2 	bl	8010f68 <HAL_DMA_Init>
}
 800c204:	bd10      	pop	{r4, pc}

0800c206 <DMA_MSG_TX_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a messaging TX DMA channel 
*/
void DMA_MSG_TX_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800c206:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800c208:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c20a:	2310      	movs	r3, #16
 800c20c:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c20e:	2300      	movs	r3, #0
 800c210:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_ENABLE;
 800c212:	2280      	movs	r2, #128	; 0x80
 800c214:	60c2      	str	r2, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c216:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c218:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_NORMAL; 
 800c21a:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = MSG_DMA_PRIORITY;
 800c21c:	2380      	movs	r3, #128	; 0x80
 800c21e:	019b      	lsls	r3, r3, #6
 800c220:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800c222:	f004 fea1 	bl	8010f68 <HAL_DMA_Init>
}
 800c226:	bd10      	pop	{r4, pc}

0800c228 <DMA_Init>:
{
 800c228:	b510      	push	{r4, lr}
 800c22a:	b082      	sub	sp, #8
	__DMA1_CLK_ENABLE();
 800c22c:	4b20      	ldr	r3, [pc, #128]	; (800c2b0 <DMA_Init+0x88>)
 800c22e:	6959      	ldr	r1, [r3, #20]
 800c230:	2201      	movs	r2, #1
 800c232:	4311      	orrs	r1, r2
 800c234:	6159      	str	r1, [r3, #20]
 800c236:	6959      	ldr	r1, [r3, #20]
 800c238:	400a      	ands	r2, r1
 800c23a:	9200      	str	r2, [sp, #0]
 800c23c:	9a00      	ldr	r2, [sp, #0]
	__DMA2_CLK_ENABLE();
 800c23e:	6959      	ldr	r1, [r3, #20]
 800c240:	2202      	movs	r2, #2
 800c242:	4311      	orrs	r1, r2
 800c244:	6159      	str	r1, [r3, #20]
 800c246:	695b      	ldr	r3, [r3, #20]
 800c248:	401a      	ands	r2, r3
 800c24a:	9201      	str	r2, [sp, #4]
 800c24c:	9b01      	ldr	r3, [sp, #4]
	DMA_MSG_RX_CH_Init(&msgRxDMA[0], DMA1_Channel1);
 800c24e:	4c19      	ldr	r4, [pc, #100]	; (800c2b4 <DMA_Init+0x8c>)
 800c250:	4919      	ldr	r1, [pc, #100]	; (800c2b8 <DMA_Init+0x90>)
 800c252:	0020      	movs	r0, r4
 800c254:	f7ff ffc6 	bl	800c1e4 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[1], DMA1_Channel3);
 800c258:	0020      	movs	r0, r4
 800c25a:	3038      	adds	r0, #56	; 0x38
 800c25c:	4917      	ldr	r1, [pc, #92]	; (800c2bc <DMA_Init+0x94>)
 800c25e:	f7ff ffc1 	bl	800c1e4 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[2], DMA1_Channel5);
 800c262:	0020      	movs	r0, r4
 800c264:	3070      	adds	r0, #112	; 0x70
 800c266:	4916      	ldr	r1, [pc, #88]	; (800c2c0 <DMA_Init+0x98>)
 800c268:	f7ff ffbc 	bl	800c1e4 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[3], DMA1_Channel6);
 800c26c:	0020      	movs	r0, r4
 800c26e:	30a8      	adds	r0, #168	; 0xa8
 800c270:	4914      	ldr	r1, [pc, #80]	; (800c2c4 <DMA_Init+0x9c>)
 800c272:	f7ff ffb7 	bl	800c1e4 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[4], DMA2_Channel2);
 800c276:	0020      	movs	r0, r4
 800c278:	30e0      	adds	r0, #224	; 0xe0
 800c27a:	4913      	ldr	r1, [pc, #76]	; (800c2c8 <DMA_Init+0xa0>)
 800c27c:	f7ff ffb2 	bl	800c1e4 <DMA_MSG_RX_CH_Init>
	DMA_MSG_RX_CH_Init(&msgRxDMA[5], DMA2_Channel3);
 800c280:	0020      	movs	r0, r4
 800c282:	3019      	adds	r0, #25
 800c284:	30ff      	adds	r0, #255	; 0xff
 800c286:	4911      	ldr	r1, [pc, #68]	; (800c2cc <DMA_Init+0xa4>)
 800c288:	f7ff ffac 	bl	800c1e4 <DMA_MSG_RX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[0], DMA1_Channel2);
 800c28c:	4c10      	ldr	r4, [pc, #64]	; (800c2d0 <DMA_Init+0xa8>)
 800c28e:	4911      	ldr	r1, [pc, #68]	; (800c2d4 <DMA_Init+0xac>)
 800c290:	0020      	movs	r0, r4
 800c292:	f7ff ffb8 	bl	800c206 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[1], DMA1_Channel4);
 800c296:	0020      	movs	r0, r4
 800c298:	3038      	adds	r0, #56	; 0x38
 800c29a:	490f      	ldr	r1, [pc, #60]	; (800c2d8 <DMA_Init+0xb0>)
 800c29c:	f7ff ffb3 	bl	800c206 <DMA_MSG_TX_CH_Init>
	DMA_MSG_TX_CH_Init(&msgTxDMA[2], DMA1_Channel7);	
 800c2a0:	0020      	movs	r0, r4
 800c2a2:	3070      	adds	r0, #112	; 0x70
 800c2a4:	490d      	ldr	r1, [pc, #52]	; (800c2dc <DMA_Init+0xb4>)
 800c2a6:	f7ff ffae 	bl	800c206 <DMA_MSG_TX_CH_Init>
}
 800c2aa:	b002      	add	sp, #8
 800c2ac:	bd10      	pop	{r4, pc}
 800c2ae:	46c0      	nop			; (mov r8, r8)
 800c2b0:	40021000 	.word	0x40021000
 800c2b4:	200014bc 	.word	0x200014bc
 800c2b8:	40020008 	.word	0x40020008
 800c2bc:	40020030 	.word	0x40020030
 800c2c0:	40020058 	.word	0x40020058
 800c2c4:	4002006c 	.word	0x4002006c
 800c2c8:	4002041c 	.word	0x4002041c
 800c2cc:	40020430 	.word	0x40020430
 800c2d0:	2000160c 	.word	0x2000160c
 800c2d4:	4002001c 	.word	0x4002001c
 800c2d8:	40020044 	.word	0x40020044
 800c2dc:	40020080 	.word	0x40020080

0800c2e0 <DMA_STREAM_CH_Init>:
/*-----------------------------------------------------------*/

/* Initialize a streaming DMA channel (RX only) 
*/
void DMA_STREAM_CH_Init(DMA_HandleTypeDef *hDMA, DMA_Channel_TypeDef *ch)
{
 800c2e0:	b510      	push	{r4, lr}
	hDMA->Instance = ch;
 800c2e2:	6001      	str	r1, [r0, #0]
	hDMA->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	6043      	str	r3, [r0, #4]
	hDMA->Init.PeriphInc = DMA_PINC_DISABLE;
 800c2e8:	6083      	str	r3, [r0, #8]
	hDMA->Init.MemInc = DMA_MINC_DISABLE;
 800c2ea:	60c3      	str	r3, [r0, #12]
	hDMA->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800c2ec:	6103      	str	r3, [r0, #16]
	hDMA->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800c2ee:	6143      	str	r3, [r0, #20]
	hDMA->Init.Mode = DMA_CIRCULAR; 
 800c2f0:	3320      	adds	r3, #32
 800c2f2:	6183      	str	r3, [r0, #24]
	hDMA->Init.Priority = STREAM_DMA_PRIORITY;
 800c2f4:	2380      	movs	r3, #128	; 0x80
 800c2f6:	015b      	lsls	r3, r3, #5
 800c2f8:	61c3      	str	r3, [r0, #28]
	
	HAL_DMA_Init(hDMA);		
 800c2fa:	f004 fe35 	bl	8010f68 <HAL_DMA_Init>
}
 800c2fe:	bd10      	pop	{r4, pc}

0800c300 <SetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* Setup DMA interrupts  
*/
void SetupDMAInterrupts(DMA_HandleTypeDef *hDMA, uint8_t priority)
{
 800c300:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800c302:	6803      	ldr	r3, [r0, #0]
 800c304:	4821      	ldr	r0, [pc, #132]	; (800c38c <SetupDMAInterrupts+0x8c>)
 800c306:	4283      	cmp	r3, r0
 800c308:	d037      	beq.n	800c37a <SetupDMAInterrupts+0x7a>
 800c30a:	d90e      	bls.n	800c32a <SetupDMAInterrupts+0x2a>
 800c30c:	4820      	ldr	r0, [pc, #128]	; (800c390 <SetupDMAInterrupts+0x90>)
 800c30e:	4283      	cmp	r3, r0
 800c310:	d033      	beq.n	800c37a <SetupDMAInterrupts+0x7a>
 800c312:	d919      	bls.n	800c348 <SetupDMAInterrupts+0x48>
 800c314:	481f      	ldr	r0, [pc, #124]	; (800c394 <SetupDMAInterrupts+0x94>)
 800c316:	4283      	cmp	r3, r0
 800c318:	d024      	beq.n	800c364 <SetupDMAInterrupts+0x64>
 800c31a:	d92b      	bls.n	800c374 <SetupDMAInterrupts+0x74>
 800c31c:	4a1e      	ldr	r2, [pc, #120]	; (800c398 <SetupDMAInterrupts+0x98>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d020      	beq.n	800c364 <SetupDMAInterrupts+0x64>
 800c322:	4a1e      	ldr	r2, [pc, #120]	; (800c39c <SetupDMAInterrupts+0x9c>)
 800c324:	4293      	cmp	r3, r2
 800c326:	d01d      	beq.n	800c364 <SetupDMAInterrupts+0x64>
 800c328:	e00d      	b.n	800c346 <SetupDMAInterrupts+0x46>
 800c32a:	4a1d      	ldr	r2, [pc, #116]	; (800c3a0 <SetupDMAInterrupts+0xa0>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d107      	bne.n	800c340 <SetupDMAInterrupts+0x40>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, priority, 0);
 800c330:	2200      	movs	r2, #0
 800c332:	2009      	movs	r0, #9
 800c334:	f004 fc72 	bl	8010c1c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);	
 800c338:	2009      	movs	r0, #9
 800c33a:	f004 fca1 	bl	8010c80 <HAL_NVIC_EnableIRQ>
			break;
 800c33e:	e002      	b.n	800c346 <SetupDMAInterrupts+0x46>
	switch ((uint32_t)hDMA->Instance)
 800c340:	4a18      	ldr	r2, [pc, #96]	; (800c3a4 <SetupDMAInterrupts+0xa4>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d019      	beq.n	800c37a <SetupDMAInterrupts+0x7a>
			break;
		
		default:
			break;
	}			
}
 800c346:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800c348:	4817      	ldr	r0, [pc, #92]	; (800c3a8 <SetupDMAInterrupts+0xa8>)
 800c34a:	4283      	cmp	r3, r0
 800c34c:	d00a      	beq.n	800c364 <SetupDMAInterrupts+0x64>
 800c34e:	d903      	bls.n	800c358 <SetupDMAInterrupts+0x58>
 800c350:	4a16      	ldr	r2, [pc, #88]	; (800c3ac <SetupDMAInterrupts+0xac>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d006      	beq.n	800c364 <SetupDMAInterrupts+0x64>
 800c356:	e7f6      	b.n	800c346 <SetupDMAInterrupts+0x46>
 800c358:	4a15      	ldr	r2, [pc, #84]	; (800c3b0 <SetupDMAInterrupts+0xb0>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d002      	beq.n	800c364 <SetupDMAInterrupts+0x64>
 800c35e:	4a15      	ldr	r2, [pc, #84]	; (800c3b4 <SetupDMAInterrupts+0xb4>)
 800c360:	4293      	cmp	r3, r2
 800c362:	d1f0      	bne.n	800c346 <SetupDMAInterrupts+0x46>
			HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, priority, 0);
 800c364:	2200      	movs	r2, #0
 800c366:	200b      	movs	r0, #11
 800c368:	f004 fc58 	bl	8010c1c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800c36c:	200b      	movs	r0, #11
 800c36e:	f004 fc87 	bl	8010c80 <HAL_NVIC_EnableIRQ>
}
 800c372:	e7e8      	b.n	800c346 <SetupDMAInterrupts+0x46>
	switch ((uint32_t)hDMA->Instance)
 800c374:	4a10      	ldr	r2, [pc, #64]	; (800c3b8 <SetupDMAInterrupts+0xb8>)
 800c376:	4293      	cmp	r3, r2
 800c378:	d1e5      	bne.n	800c346 <SetupDMAInterrupts+0x46>
			HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, priority, 0);
 800c37a:	2200      	movs	r2, #0
 800c37c:	200a      	movs	r0, #10
 800c37e:	f004 fc4d 	bl	8010c1c <HAL_NVIC_SetPriority>
			HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800c382:	200a      	movs	r0, #10
 800c384:	f004 fc7c 	bl	8010c80 <HAL_NVIC_EnableIRQ>
			break;
 800c388:	e7dd      	b.n	800c346 <SetupDMAInterrupts+0x46>
 800c38a:	46c0      	nop			; (mov r8, r8)
 800c38c:	40020030 	.word	0x40020030
 800c390:	40020408 	.word	0x40020408
 800c394:	40020430 	.word	0x40020430
 800c398:	40020444 	.word	0x40020444
 800c39c:	40020458 	.word	0x40020458
 800c3a0:	40020008 	.word	0x40020008
 800c3a4:	4002001c 	.word	0x4002001c
 800c3a8:	4002006c 	.word	0x4002006c
 800c3ac:	40020080 	.word	0x40020080
 800c3b0:	40020044 	.word	0x40020044
 800c3b4:	40020058 	.word	0x40020058
 800c3b8:	4002041c 	.word	0x4002041c

0800c3bc <UnSetupDMAInterrupts>:
/*-----------------------------------------------------------*/

/* UnSetup DMA interrupts  
*/
void UnSetupDMAInterrupts(DMA_HandleTypeDef *hDMA)
{
 800c3bc:	b510      	push	{r4, lr}
	switch ((uint32_t)hDMA->Instance)
 800c3be:	6803      	ldr	r3, [r0, #0]
 800c3c0:	491b      	ldr	r1, [pc, #108]	; (800c430 <UnSetupDMAInterrupts+0x74>)
 800c3c2:	428b      	cmp	r3, r1
 800c3c4:	d02f      	beq.n	800c426 <UnSetupDMAInterrupts+0x6a>
 800c3c6:	d90e      	bls.n	800c3e6 <UnSetupDMAInterrupts+0x2a>
 800c3c8:	491a      	ldr	r1, [pc, #104]	; (800c434 <UnSetupDMAInterrupts+0x78>)
 800c3ca:	428b      	cmp	r3, r1
 800c3cc:	d02b      	beq.n	800c426 <UnSetupDMAInterrupts+0x6a>
 800c3ce:	d915      	bls.n	800c3fc <UnSetupDMAInterrupts+0x40>
 800c3d0:	4919      	ldr	r1, [pc, #100]	; (800c438 <UnSetupDMAInterrupts+0x7c>)
 800c3d2:	428b      	cmp	r3, r1
 800c3d4:	d020      	beq.n	800c418 <UnSetupDMAInterrupts+0x5c>
 800c3d6:	d923      	bls.n	800c420 <UnSetupDMAInterrupts+0x64>
 800c3d8:	4a18      	ldr	r2, [pc, #96]	; (800c43c <UnSetupDMAInterrupts+0x80>)
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d01c      	beq.n	800c418 <UnSetupDMAInterrupts+0x5c>
 800c3de:	4a18      	ldr	r2, [pc, #96]	; (800c440 <UnSetupDMAInterrupts+0x84>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d019      	beq.n	800c418 <UnSetupDMAInterrupts+0x5c>
 800c3e4:	e009      	b.n	800c3fa <UnSetupDMAInterrupts+0x3e>
 800c3e6:	4a17      	ldr	r2, [pc, #92]	; (800c444 <UnSetupDMAInterrupts+0x88>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d103      	bne.n	800c3f4 <UnSetupDMAInterrupts+0x38>
	{
		case (uint32_t)DMA1_Channel1:
			HAL_NVIC_DisableIRQ(DMA1_Ch1_IRQn);	
 800c3ec:	2009      	movs	r0, #9
 800c3ee:	f004 fc51 	bl	8010c94 <HAL_NVIC_DisableIRQ>
			break;
 800c3f2:	e002      	b.n	800c3fa <UnSetupDMAInterrupts+0x3e>
	switch ((uint32_t)hDMA->Instance)
 800c3f4:	4a14      	ldr	r2, [pc, #80]	; (800c448 <UnSetupDMAInterrupts+0x8c>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	d015      	beq.n	800c426 <UnSetupDMAInterrupts+0x6a>
			break;
		
		default:
			break;
	}			
}
 800c3fa:	bd10      	pop	{r4, pc}
	switch ((uint32_t)hDMA->Instance)
 800c3fc:	4913      	ldr	r1, [pc, #76]	; (800c44c <UnSetupDMAInterrupts+0x90>)
 800c3fe:	428b      	cmp	r3, r1
 800c400:	d00a      	beq.n	800c418 <UnSetupDMAInterrupts+0x5c>
 800c402:	d903      	bls.n	800c40c <UnSetupDMAInterrupts+0x50>
 800c404:	4a12      	ldr	r2, [pc, #72]	; (800c450 <UnSetupDMAInterrupts+0x94>)
 800c406:	4293      	cmp	r3, r2
 800c408:	d006      	beq.n	800c418 <UnSetupDMAInterrupts+0x5c>
 800c40a:	e7f6      	b.n	800c3fa <UnSetupDMAInterrupts+0x3e>
 800c40c:	4a11      	ldr	r2, [pc, #68]	; (800c454 <UnSetupDMAInterrupts+0x98>)
 800c40e:	4293      	cmp	r3, r2
 800c410:	d002      	beq.n	800c418 <UnSetupDMAInterrupts+0x5c>
 800c412:	4a11      	ldr	r2, [pc, #68]	; (800c458 <UnSetupDMAInterrupts+0x9c>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d1f0      	bne.n	800c3fa <UnSetupDMAInterrupts+0x3e>
			HAL_NVIC_DisableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);			
 800c418:	200b      	movs	r0, #11
 800c41a:	f004 fc3b 	bl	8010c94 <HAL_NVIC_DisableIRQ>
}
 800c41e:	e7ec      	b.n	800c3fa <UnSetupDMAInterrupts+0x3e>
	switch ((uint32_t)hDMA->Instance)
 800c420:	4a0e      	ldr	r2, [pc, #56]	; (800c45c <UnSetupDMAInterrupts+0xa0>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d1e9      	bne.n	800c3fa <UnSetupDMAInterrupts+0x3e>
			HAL_NVIC_DisableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);				
 800c426:	200a      	movs	r0, #10
 800c428:	f004 fc34 	bl	8010c94 <HAL_NVIC_DisableIRQ>
			break;
 800c42c:	e7e5      	b.n	800c3fa <UnSetupDMAInterrupts+0x3e>
 800c42e:	46c0      	nop			; (mov r8, r8)
 800c430:	40020030 	.word	0x40020030
 800c434:	40020408 	.word	0x40020408
 800c438:	40020430 	.word	0x40020430
 800c43c:	40020444 	.word	0x40020444
 800c440:	40020458 	.word	0x40020458
 800c444:	40020008 	.word	0x40020008
 800c448:	4002001c 	.word	0x4002001c
 800c44c:	4002006c 	.word	0x4002006c
 800c450:	40020080 	.word	0x40020080
 800c454:	40020044 	.word	0x40020044
 800c458:	40020058 	.word	0x40020058
 800c45c:	4002041c 	.word	0x4002041c

0800c460 <DMA_MSG_TX_UnSetup>:
{	
 800c460:	b510      	push	{r4, lr}
 800c462:	0004      	movs	r4, r0
	UnSetupDMAInterrupts(huart->hdmatx);
 800c464:	6e00      	ldr	r0, [r0, #96]	; 0x60
 800c466:	f7ff ffa9 	bl	800c3bc <UnSetupDMAInterrupts>
	huart->hdmatx->Parent = NULL;
 800c46a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800c46c:	2300      	movs	r3, #0
 800c46e:	6253      	str	r3, [r2, #36]	; 0x24
	huart->hdmatx = NULL;
 800c470:	6623      	str	r3, [r4, #96]	; 0x60
}
 800c472:	bd10      	pop	{r4, pc}

0800c474 <RemapAndLinkDMAtoUARTRx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART RX and DMA structs 
*/
void RemapAndLinkDMAtoUARTRx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800c474:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800c476:	6803      	ldr	r3, [r0, #0]
 800c478:	4ac3      	ldr	r2, [pc, #780]	; (800c788 <RemapAndLinkDMAtoUARTRx+0x314>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d03e      	beq.n	800c4fc <RemapAndLinkDMAtoUARTRx+0x88>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800c47e:	4ac3      	ldr	r2, [pc, #780]	; (800c78c <RemapAndLinkDMAtoUARTRx+0x318>)
 800c480:	4293      	cmp	r3, r2
 800c482:	d100      	bne.n	800c486 <RemapAndLinkDMAtoUARTRx+0x12>
 800c484:	e096      	b.n	800c5b4 <RemapAndLinkDMAtoUARTRx+0x140>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800c486:	4ac2      	ldr	r2, [pc, #776]	; (800c790 <RemapAndLinkDMAtoUARTRx+0x31c>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d100      	bne.n	800c48e <RemapAndLinkDMAtoUARTRx+0x1a>
 800c48c:	e0eb      	b.n	800c666 <RemapAndLinkDMAtoUARTRx+0x1f2>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800c48e:	4ac1      	ldr	r2, [pc, #772]	; (800c794 <RemapAndLinkDMAtoUARTRx+0x320>)
 800c490:	4293      	cmp	r3, r2
 800c492:	d100      	bne.n	800c496 <RemapAndLinkDMAtoUARTRx+0x22>
 800c494:	e141      	b.n	800c71a <RemapAndLinkDMAtoUARTRx+0x2a6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800c496:	4ac0      	ldr	r2, [pc, #768]	; (800c798 <RemapAndLinkDMAtoUARTRx+0x324>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d100      	bne.n	800c49e <RemapAndLinkDMAtoUARTRx+0x2a>
 800c49c:	e1bd      	b.n	800c81a <RemapAndLinkDMAtoUARTRx+0x3a6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800c49e:	4abf      	ldr	r2, [pc, #764]	; (800c79c <RemapAndLinkDMAtoUARTRx+0x328>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d100      	bne.n	800c4a6 <RemapAndLinkDMAtoUARTRx+0x32>
 800c4a4:	e213      	b.n	800c8ce <RemapAndLinkDMAtoUARTRx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800c4a6:	4abe      	ldr	r2, [pc, #760]	; (800c7a0 <RemapAndLinkDMAtoUARTRx+0x32c>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d100      	bne.n	800c4ae <RemapAndLinkDMAtoUARTRx+0x3a>
 800c4ac:	e269      	b.n	800c982 <RemapAndLinkDMAtoUARTRx+0x50e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel1) {
 800c4ae:	4abd      	ldr	r2, [pc, #756]	; (800c7a4 <RemapAndLinkDMAtoUARTRx+0x330>)
 800c4b0:	4293      	cmp	r3, r2
 800c4b2:	d136      	bne.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
 800c4b4:	680b      	ldr	r3, [r1, #0]
 800c4b6:	4abc      	ldr	r2, [pc, #752]	; (800c7a8 <RemapAndLinkDMAtoUARTRx+0x334>)
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	d100      	bne.n	800c4be <RemapAndLinkDMAtoUARTRx+0x4a>
 800c4bc:	e2bb      	b.n	800ca36 <RemapAndLinkDMAtoUARTRx+0x5c2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel3) {
 800c4be:	4abb      	ldr	r2, [pc, #748]	; (800c7ac <RemapAndLinkDMAtoUARTRx+0x338>)
 800c4c0:	4293      	cmp	r3, r2
 800c4c2:	d100      	bne.n	800c4c6 <RemapAndLinkDMAtoUARTRx+0x52>
 800c4c4:	e2c1      	b.n	800ca4a <RemapAndLinkDMAtoUARTRx+0x5d6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel5) {
 800c4c6:	4aba      	ldr	r2, [pc, #744]	; (800c7b0 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d100      	bne.n	800c4ce <RemapAndLinkDMAtoUARTRx+0x5a>
 800c4cc:	e2c9      	b.n	800ca62 <RemapAndLinkDMAtoUARTRx+0x5ee>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel6) {
 800c4ce:	4ab9      	ldr	r2, [pc, #740]	; (800c7b4 <RemapAndLinkDMAtoUARTRx+0x340>)
 800c4d0:	4293      	cmp	r3, r2
 800c4d2:	d100      	bne.n	800c4d6 <RemapAndLinkDMAtoUARTRx+0x62>
 800c4d4:	e2d1      	b.n	800ca7a <RemapAndLinkDMAtoUARTRx+0x606>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel2) {
 800c4d6:	4ab8      	ldr	r2, [pc, #736]	; (800c7b8 <RemapAndLinkDMAtoUARTRx+0x344>)
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d100      	bne.n	800c4de <RemapAndLinkDMAtoUARTRx+0x6a>
 800c4dc:	e2d9      	b.n	800ca92 <RemapAndLinkDMAtoUARTRx+0x61e>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel3) {
 800c4de:	4ab7      	ldr	r2, [pc, #732]	; (800c7bc <RemapAndLinkDMAtoUARTRx+0x348>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d11e      	bne.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART8_RX);					
 800c4e4:	4ab6      	ldr	r2, [pc, #728]	; (800c7c0 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c4e6:	23a8      	movs	r3, #168	; 0xa8
 800c4e8:	58d4      	ldr	r4, [r2, r3]
 800c4ea:	4db6      	ldr	r5, [pc, #728]	; (800c7c4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c4ec:	402c      	ands	r4, r5
 800c4ee:	50d4      	str	r4, [r2, r3]
 800c4f0:	58d5      	ldr	r5, [r2, r3]
 800c4f2:	24f0      	movs	r4, #240	; 0xf0
 800c4f4:	0124      	lsls	r4, r4, #4
 800c4f6:	432c      	orrs	r4, r5
 800c4f8:	50d4      	str	r4, [r2, r3]
 800c4fa:	e012      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel1) {
 800c4fc:	680b      	ldr	r3, [r1, #0]
 800c4fe:	4aaa      	ldr	r2, [pc, #680]	; (800c7a8 <RemapAndLinkDMAtoUARTRx+0x334>)
 800c500:	4293      	cmp	r3, r2
 800c502:	d011      	beq.n	800c528 <RemapAndLinkDMAtoUARTRx+0xb4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel3) {
 800c504:	4aa9      	ldr	r2, [pc, #676]	; (800c7ac <RemapAndLinkDMAtoUARTRx+0x338>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d019      	beq.n	800c53e <RemapAndLinkDMAtoUARTRx+0xca>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel5) {
 800c50a:	4aa9      	ldr	r2, [pc, #676]	; (800c7b0 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d022      	beq.n	800c556 <RemapAndLinkDMAtoUARTRx+0xe2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel6) {
 800c510:	4aa8      	ldr	r2, [pc, #672]	; (800c7b4 <RemapAndLinkDMAtoUARTRx+0x340>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d02b      	beq.n	800c56e <RemapAndLinkDMAtoUARTRx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel2) {
 800c516:	4aa8      	ldr	r2, [pc, #672]	; (800c7b8 <RemapAndLinkDMAtoUARTRx+0x344>)
 800c518:	4293      	cmp	r3, r2
 800c51a:	d034      	beq.n	800c586 <RemapAndLinkDMAtoUARTRx+0x112>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel3) {
 800c51c:	4aa7      	ldr	r2, [pc, #668]	; (800c7bc <RemapAndLinkDMAtoUARTRx+0x348>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d03c      	beq.n	800c59c <RemapAndLinkDMAtoUARTRx+0x128>
	}		
	
	__HAL_LINKDMA(huart,hdmarx,*hDMA);	
 800c522:	6641      	str	r1, [r0, #100]	; 0x64
 800c524:	6248      	str	r0, [r1, #36]	; 0x24
}
 800c526:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART1_RX);
 800c528:	4aa7      	ldr	r2, [pc, #668]	; (800c7c8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c52a:	23a8      	movs	r3, #168	; 0xa8
 800c52c:	58d4      	ldr	r4, [r2, r3]
 800c52e:	250f      	movs	r5, #15
 800c530:	43ac      	bics	r4, r5
 800c532:	50d4      	str	r4, [r2, r3]
 800c534:	58d4      	ldr	r4, [r2, r3]
 800c536:	3d07      	subs	r5, #7
 800c538:	432c      	orrs	r4, r5
 800c53a:	50d4      	str	r4, [r2, r3]
 800c53c:	e7f1      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART1_RX);
 800c53e:	4aa2      	ldr	r2, [pc, #648]	; (800c7c8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c540:	23a8      	movs	r3, #168	; 0xa8
 800c542:	58d4      	ldr	r4, [r2, r3]
 800c544:	4d9f      	ldr	r5, [pc, #636]	; (800c7c4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c546:	402c      	ands	r4, r5
 800c548:	50d4      	str	r4, [r2, r3]
 800c54a:	58d5      	ldr	r5, [r2, r3]
 800c54c:	2480      	movs	r4, #128	; 0x80
 800c54e:	0124      	lsls	r4, r4, #4
 800c550:	432c      	orrs	r4, r5
 800c552:	50d4      	str	r4, [r2, r3]
 800c554:	e7e5      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART1_RX);		
 800c556:	4a9c      	ldr	r2, [pc, #624]	; (800c7c8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c558:	23a8      	movs	r3, #168	; 0xa8
 800c55a:	58d4      	ldr	r4, [r2, r3]
 800c55c:	4d9b      	ldr	r5, [pc, #620]	; (800c7cc <RemapAndLinkDMAtoUARTRx+0x358>)
 800c55e:	402c      	ands	r4, r5
 800c560:	50d4      	str	r4, [r2, r3]
 800c562:	58d5      	ldr	r5, [r2, r3]
 800c564:	2480      	movs	r4, #128	; 0x80
 800c566:	0324      	lsls	r4, r4, #12
 800c568:	432c      	orrs	r4, r5
 800c56a:	50d4      	str	r4, [r2, r3]
 800c56c:	e7d9      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART1_RX);	
 800c56e:	4a96      	ldr	r2, [pc, #600]	; (800c7c8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c570:	23a8      	movs	r3, #168	; 0xa8
 800c572:	58d4      	ldr	r4, [r2, r3]
 800c574:	4d96      	ldr	r5, [pc, #600]	; (800c7d0 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800c576:	402c      	ands	r4, r5
 800c578:	50d4      	str	r4, [r2, r3]
 800c57a:	58d5      	ldr	r5, [r2, r3]
 800c57c:	2480      	movs	r4, #128	; 0x80
 800c57e:	0424      	lsls	r4, r4, #16
 800c580:	432c      	orrs	r4, r5
 800c582:	50d4      	str	r4, [r2, r3]
 800c584:	e7cd      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART1_RX);	
 800c586:	4a8e      	ldr	r2, [pc, #568]	; (800c7c0 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c588:	23a8      	movs	r3, #168	; 0xa8
 800c58a:	58d4      	ldr	r4, [r2, r3]
 800c58c:	25f0      	movs	r5, #240	; 0xf0
 800c58e:	43ac      	bics	r4, r5
 800c590:	50d4      	str	r4, [r2, r3]
 800c592:	58d4      	ldr	r4, [r2, r3]
 800c594:	3d70      	subs	r5, #112	; 0x70
 800c596:	432c      	orrs	r4, r5
 800c598:	50d4      	str	r4, [r2, r3]
 800c59a:	e7c2      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART1_RX);	
 800c59c:	4a88      	ldr	r2, [pc, #544]	; (800c7c0 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c59e:	23a8      	movs	r3, #168	; 0xa8
 800c5a0:	58d4      	ldr	r4, [r2, r3]
 800c5a2:	4d88      	ldr	r5, [pc, #544]	; (800c7c4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c5a4:	402c      	ands	r4, r5
 800c5a6:	50d4      	str	r4, [r2, r3]
 800c5a8:	58d5      	ldr	r5, [r2, r3]
 800c5aa:	2480      	movs	r4, #128	; 0x80
 800c5ac:	0124      	lsls	r4, r4, #4
 800c5ae:	432c      	orrs	r4, r5
 800c5b0:	50d4      	str	r4, [r2, r3]
 800c5b2:	e7b6      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel1) {
 800c5b4:	680b      	ldr	r3, [r1, #0]
 800c5b6:	4a7c      	ldr	r2, [pc, #496]	; (800c7a8 <RemapAndLinkDMAtoUARTRx+0x334>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d01a      	beq.n	800c5f2 <RemapAndLinkDMAtoUARTRx+0x17e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel3) {
 800c5bc:	4a7b      	ldr	r2, [pc, #492]	; (800c7ac <RemapAndLinkDMAtoUARTRx+0x338>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d022      	beq.n	800c608 <RemapAndLinkDMAtoUARTRx+0x194>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel5) {
 800c5c2:	4a7b      	ldr	r2, [pc, #492]	; (800c7b0 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c5c4:	4293      	cmp	r3, r2
 800c5c6:	d02b      	beq.n	800c620 <RemapAndLinkDMAtoUARTRx+0x1ac>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel6) {
 800c5c8:	4a7a      	ldr	r2, [pc, #488]	; (800c7b4 <RemapAndLinkDMAtoUARTRx+0x340>)
 800c5ca:	4293      	cmp	r3, r2
 800c5cc:	d034      	beq.n	800c638 <RemapAndLinkDMAtoUARTRx+0x1c4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel2) {
 800c5ce:	4a7a      	ldr	r2, [pc, #488]	; (800c7b8 <RemapAndLinkDMAtoUARTRx+0x344>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d03d      	beq.n	800c650 <RemapAndLinkDMAtoUARTRx+0x1dc>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel3) {
 800c5d4:	4a79      	ldr	r2, [pc, #484]	; (800c7bc <RemapAndLinkDMAtoUARTRx+0x348>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d1a3      	bne.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART2_RX);	
 800c5da:	4a79      	ldr	r2, [pc, #484]	; (800c7c0 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c5dc:	23a8      	movs	r3, #168	; 0xa8
 800c5de:	58d4      	ldr	r4, [r2, r3]
 800c5e0:	4d78      	ldr	r5, [pc, #480]	; (800c7c4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c5e2:	402c      	ands	r4, r5
 800c5e4:	50d4      	str	r4, [r2, r3]
 800c5e6:	58d5      	ldr	r5, [r2, r3]
 800c5e8:	2490      	movs	r4, #144	; 0x90
 800c5ea:	0124      	lsls	r4, r4, #4
 800c5ec:	432c      	orrs	r4, r5
 800c5ee:	50d4      	str	r4, [r2, r3]
 800c5f0:	e797      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800c5f2:	4a75      	ldr	r2, [pc, #468]	; (800c7c8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c5f4:	23a8      	movs	r3, #168	; 0xa8
 800c5f6:	58d4      	ldr	r4, [r2, r3]
 800c5f8:	250f      	movs	r5, #15
 800c5fa:	43ac      	bics	r4, r5
 800c5fc:	50d4      	str	r4, [r2, r3]
 800c5fe:	58d4      	ldr	r4, [r2, r3]
 800c600:	3d06      	subs	r5, #6
 800c602:	432c      	orrs	r4, r5
 800c604:	50d4      	str	r4, [r2, r3]
 800c606:	e78c      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART2_RX);
 800c608:	4a6f      	ldr	r2, [pc, #444]	; (800c7c8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c60a:	23a8      	movs	r3, #168	; 0xa8
 800c60c:	58d4      	ldr	r4, [r2, r3]
 800c60e:	4d6d      	ldr	r5, [pc, #436]	; (800c7c4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c610:	402c      	ands	r4, r5
 800c612:	50d4      	str	r4, [r2, r3]
 800c614:	58d5      	ldr	r5, [r2, r3]
 800c616:	2490      	movs	r4, #144	; 0x90
 800c618:	0124      	lsls	r4, r4, #4
 800c61a:	432c      	orrs	r4, r5
 800c61c:	50d4      	str	r4, [r2, r3]
 800c61e:	e780      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART2_RX);		
 800c620:	4a69      	ldr	r2, [pc, #420]	; (800c7c8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c622:	23a8      	movs	r3, #168	; 0xa8
 800c624:	58d4      	ldr	r4, [r2, r3]
 800c626:	4d69      	ldr	r5, [pc, #420]	; (800c7cc <RemapAndLinkDMAtoUARTRx+0x358>)
 800c628:	402c      	ands	r4, r5
 800c62a:	50d4      	str	r4, [r2, r3]
 800c62c:	58d5      	ldr	r5, [r2, r3]
 800c62e:	2490      	movs	r4, #144	; 0x90
 800c630:	0324      	lsls	r4, r4, #12
 800c632:	432c      	orrs	r4, r5
 800c634:	50d4      	str	r4, [r2, r3]
 800c636:	e774      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART2_RX);	
 800c638:	4a63      	ldr	r2, [pc, #396]	; (800c7c8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c63a:	23a8      	movs	r3, #168	; 0xa8
 800c63c:	58d4      	ldr	r4, [r2, r3]
 800c63e:	4d64      	ldr	r5, [pc, #400]	; (800c7d0 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800c640:	402c      	ands	r4, r5
 800c642:	50d4      	str	r4, [r2, r3]
 800c644:	58d5      	ldr	r5, [r2, r3]
 800c646:	2490      	movs	r4, #144	; 0x90
 800c648:	0424      	lsls	r4, r4, #16
 800c64a:	432c      	orrs	r4, r5
 800c64c:	50d4      	str	r4, [r2, r3]
 800c64e:	e768      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART2_RX);	
 800c650:	4a5b      	ldr	r2, [pc, #364]	; (800c7c0 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c652:	23a8      	movs	r3, #168	; 0xa8
 800c654:	58d4      	ldr	r4, [r2, r3]
 800c656:	25f0      	movs	r5, #240	; 0xf0
 800c658:	43ac      	bics	r4, r5
 800c65a:	50d4      	str	r4, [r2, r3]
 800c65c:	58d4      	ldr	r4, [r2, r3]
 800c65e:	3d60      	subs	r5, #96	; 0x60
 800c660:	432c      	orrs	r4, r5
 800c662:	50d4      	str	r4, [r2, r3]
 800c664:	e75d      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel1) {
 800c666:	680b      	ldr	r3, [r1, #0]
 800c668:	4a4f      	ldr	r2, [pc, #316]	; (800c7a8 <RemapAndLinkDMAtoUARTRx+0x334>)
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d01b      	beq.n	800c6a6 <RemapAndLinkDMAtoUARTRx+0x232>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel3) {
 800c66e:	4a4f      	ldr	r2, [pc, #316]	; (800c7ac <RemapAndLinkDMAtoUARTRx+0x338>)
 800c670:	4293      	cmp	r3, r2
 800c672:	d023      	beq.n	800c6bc <RemapAndLinkDMAtoUARTRx+0x248>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel5) {
 800c674:	4a4e      	ldr	r2, [pc, #312]	; (800c7b0 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d02c      	beq.n	800c6d4 <RemapAndLinkDMAtoUARTRx+0x260>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel6) {
 800c67a:	4a4e      	ldr	r2, [pc, #312]	; (800c7b4 <RemapAndLinkDMAtoUARTRx+0x340>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d035      	beq.n	800c6ec <RemapAndLinkDMAtoUARTRx+0x278>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel2) {
 800c680:	4a4d      	ldr	r2, [pc, #308]	; (800c7b8 <RemapAndLinkDMAtoUARTRx+0x344>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d03e      	beq.n	800c704 <RemapAndLinkDMAtoUARTRx+0x290>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel3) {
 800c686:	4a4d      	ldr	r2, [pc, #308]	; (800c7bc <RemapAndLinkDMAtoUARTRx+0x348>)
 800c688:	4293      	cmp	r3, r2
 800c68a:	d000      	beq.n	800c68e <RemapAndLinkDMAtoUARTRx+0x21a>
 800c68c:	e749      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART3_RX);			
 800c68e:	4a4c      	ldr	r2, [pc, #304]	; (800c7c0 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c690:	23a8      	movs	r3, #168	; 0xa8
 800c692:	58d4      	ldr	r4, [r2, r3]
 800c694:	4d4b      	ldr	r5, [pc, #300]	; (800c7c4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c696:	402c      	ands	r4, r5
 800c698:	50d4      	str	r4, [r2, r3]
 800c69a:	58d5      	ldr	r5, [r2, r3]
 800c69c:	24a0      	movs	r4, #160	; 0xa0
 800c69e:	0124      	lsls	r4, r4, #4
 800c6a0:	432c      	orrs	r4, r5
 800c6a2:	50d4      	str	r4, [r2, r3]
 800c6a4:	e73d      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART3_RX);
 800c6a6:	4a48      	ldr	r2, [pc, #288]	; (800c7c8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c6a8:	23a8      	movs	r3, #168	; 0xa8
 800c6aa:	58d4      	ldr	r4, [r2, r3]
 800c6ac:	250f      	movs	r5, #15
 800c6ae:	43ac      	bics	r4, r5
 800c6b0:	50d4      	str	r4, [r2, r3]
 800c6b2:	58d4      	ldr	r4, [r2, r3]
 800c6b4:	3d05      	subs	r5, #5
 800c6b6:	432c      	orrs	r4, r5
 800c6b8:	50d4      	str	r4, [r2, r3]
 800c6ba:	e732      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART3_RX);
 800c6bc:	4a42      	ldr	r2, [pc, #264]	; (800c7c8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c6be:	23a8      	movs	r3, #168	; 0xa8
 800c6c0:	58d4      	ldr	r4, [r2, r3]
 800c6c2:	4d40      	ldr	r5, [pc, #256]	; (800c7c4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c6c4:	402c      	ands	r4, r5
 800c6c6:	50d4      	str	r4, [r2, r3]
 800c6c8:	58d5      	ldr	r5, [r2, r3]
 800c6ca:	24a0      	movs	r4, #160	; 0xa0
 800c6cc:	0124      	lsls	r4, r4, #4
 800c6ce:	432c      	orrs	r4, r5
 800c6d0:	50d4      	str	r4, [r2, r3]
 800c6d2:	e726      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART3_RX);		
 800c6d4:	4a3c      	ldr	r2, [pc, #240]	; (800c7c8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c6d6:	23a8      	movs	r3, #168	; 0xa8
 800c6d8:	58d4      	ldr	r4, [r2, r3]
 800c6da:	4d3c      	ldr	r5, [pc, #240]	; (800c7cc <RemapAndLinkDMAtoUARTRx+0x358>)
 800c6dc:	402c      	ands	r4, r5
 800c6de:	50d4      	str	r4, [r2, r3]
 800c6e0:	58d5      	ldr	r5, [r2, r3]
 800c6e2:	24a0      	movs	r4, #160	; 0xa0
 800c6e4:	0324      	lsls	r4, r4, #12
 800c6e6:	432c      	orrs	r4, r5
 800c6e8:	50d4      	str	r4, [r2, r3]
 800c6ea:	e71a      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART3_RX);	
 800c6ec:	4a36      	ldr	r2, [pc, #216]	; (800c7c8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c6ee:	23a8      	movs	r3, #168	; 0xa8
 800c6f0:	58d4      	ldr	r4, [r2, r3]
 800c6f2:	4d37      	ldr	r5, [pc, #220]	; (800c7d0 <RemapAndLinkDMAtoUARTRx+0x35c>)
 800c6f4:	402c      	ands	r4, r5
 800c6f6:	50d4      	str	r4, [r2, r3]
 800c6f8:	58d5      	ldr	r5, [r2, r3]
 800c6fa:	24a0      	movs	r4, #160	; 0xa0
 800c6fc:	0424      	lsls	r4, r4, #16
 800c6fe:	432c      	orrs	r4, r5
 800c700:	50d4      	str	r4, [r2, r3]
 800c702:	e70e      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART3_RX);	
 800c704:	4a2e      	ldr	r2, [pc, #184]	; (800c7c0 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c706:	23a8      	movs	r3, #168	; 0xa8
 800c708:	58d4      	ldr	r4, [r2, r3]
 800c70a:	25f0      	movs	r5, #240	; 0xf0
 800c70c:	43ac      	bics	r4, r5
 800c70e:	50d4      	str	r4, [r2, r3]
 800c710:	58d4      	ldr	r4, [r2, r3]
 800c712:	3d50      	subs	r5, #80	; 0x50
 800c714:	432c      	orrs	r4, r5
 800c716:	50d4      	str	r4, [r2, r3]
 800c718:	e703      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel1) {
 800c71a:	680b      	ldr	r3, [r1, #0]
 800c71c:	4a22      	ldr	r2, [pc, #136]	; (800c7a8 <RemapAndLinkDMAtoUARTRx+0x334>)
 800c71e:	4293      	cmp	r3, r2
 800c720:	d01b      	beq.n	800c75a <RemapAndLinkDMAtoUARTRx+0x2e6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel3) {
 800c722:	4a22      	ldr	r2, [pc, #136]	; (800c7ac <RemapAndLinkDMAtoUARTRx+0x338>)
 800c724:	4293      	cmp	r3, r2
 800c726:	d023      	beq.n	800c770 <RemapAndLinkDMAtoUARTRx+0x2fc>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel5) {
 800c728:	4a21      	ldr	r2, [pc, #132]	; (800c7b0 <RemapAndLinkDMAtoUARTRx+0x33c>)
 800c72a:	4293      	cmp	r3, r2
 800c72c:	d052      	beq.n	800c7d4 <RemapAndLinkDMAtoUARTRx+0x360>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel6) {
 800c72e:	4a21      	ldr	r2, [pc, #132]	; (800c7b4 <RemapAndLinkDMAtoUARTRx+0x340>)
 800c730:	4293      	cmp	r3, r2
 800c732:	d05b      	beq.n	800c7ec <RemapAndLinkDMAtoUARTRx+0x378>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel2) {
 800c734:	4a20      	ldr	r2, [pc, #128]	; (800c7b8 <RemapAndLinkDMAtoUARTRx+0x344>)
 800c736:	4293      	cmp	r3, r2
 800c738:	d064      	beq.n	800c804 <RemapAndLinkDMAtoUARTRx+0x390>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel3) {
 800c73a:	4a20      	ldr	r2, [pc, #128]	; (800c7bc <RemapAndLinkDMAtoUARTRx+0x348>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d000      	beq.n	800c742 <RemapAndLinkDMAtoUARTRx+0x2ce>
 800c740:	e6ef      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART4_RX);				
 800c742:	4a1f      	ldr	r2, [pc, #124]	; (800c7c0 <RemapAndLinkDMAtoUARTRx+0x34c>)
 800c744:	23a8      	movs	r3, #168	; 0xa8
 800c746:	58d4      	ldr	r4, [r2, r3]
 800c748:	4d1e      	ldr	r5, [pc, #120]	; (800c7c4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c74a:	402c      	ands	r4, r5
 800c74c:	50d4      	str	r4, [r2, r3]
 800c74e:	58d5      	ldr	r5, [r2, r3]
 800c750:	24b0      	movs	r4, #176	; 0xb0
 800c752:	0124      	lsls	r4, r4, #4
 800c754:	432c      	orrs	r4, r5
 800c756:	50d4      	str	r4, [r2, r3]
 800c758:	e6e3      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART4_RX);
 800c75a:	4a1b      	ldr	r2, [pc, #108]	; (800c7c8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c75c:	23a8      	movs	r3, #168	; 0xa8
 800c75e:	58d4      	ldr	r4, [r2, r3]
 800c760:	250f      	movs	r5, #15
 800c762:	43ac      	bics	r4, r5
 800c764:	50d4      	str	r4, [r2, r3]
 800c766:	58d4      	ldr	r4, [r2, r3]
 800c768:	3d04      	subs	r5, #4
 800c76a:	432c      	orrs	r4, r5
 800c76c:	50d4      	str	r4, [r2, r3]
 800c76e:	e6d8      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART4_RX);
 800c770:	4a15      	ldr	r2, [pc, #84]	; (800c7c8 <RemapAndLinkDMAtoUARTRx+0x354>)
 800c772:	23a8      	movs	r3, #168	; 0xa8
 800c774:	58d4      	ldr	r4, [r2, r3]
 800c776:	4d13      	ldr	r5, [pc, #76]	; (800c7c4 <RemapAndLinkDMAtoUARTRx+0x350>)
 800c778:	402c      	ands	r4, r5
 800c77a:	50d4      	str	r4, [r2, r3]
 800c77c:	58d5      	ldr	r5, [r2, r3]
 800c77e:	24b0      	movs	r4, #176	; 0xb0
 800c780:	0124      	lsls	r4, r4, #4
 800c782:	432c      	orrs	r4, r5
 800c784:	50d4      	str	r4, [r2, r3]
 800c786:	e6cc      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
 800c788:	40013800 	.word	0x40013800
 800c78c:	40004400 	.word	0x40004400
 800c790:	40004800 	.word	0x40004800
 800c794:	40004c00 	.word	0x40004c00
 800c798:	40005000 	.word	0x40005000
 800c79c:	40011400 	.word	0x40011400
 800c7a0:	40011800 	.word	0x40011800
 800c7a4:	40011c00 	.word	0x40011c00
 800c7a8:	40020008 	.word	0x40020008
 800c7ac:	40020030 	.word	0x40020030
 800c7b0:	40020058 	.word	0x40020058
 800c7b4:	4002006c 	.word	0x4002006c
 800c7b8:	4002041c 	.word	0x4002041c
 800c7bc:	40020430 	.word	0x40020430
 800c7c0:	40020400 	.word	0x40020400
 800c7c4:	fffff0ff 	.word	0xfffff0ff
 800c7c8:	40020000 	.word	0x40020000
 800c7cc:	fff0ffff 	.word	0xfff0ffff
 800c7d0:	ff0fffff 	.word	0xff0fffff
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART4_RX);		
 800c7d4:	4ab4      	ldr	r2, [pc, #720]	; (800caa8 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c7d6:	23a8      	movs	r3, #168	; 0xa8
 800c7d8:	58d4      	ldr	r4, [r2, r3]
 800c7da:	4db4      	ldr	r5, [pc, #720]	; (800caac <RemapAndLinkDMAtoUARTRx+0x638>)
 800c7dc:	402c      	ands	r4, r5
 800c7de:	50d4      	str	r4, [r2, r3]
 800c7e0:	58d5      	ldr	r5, [r2, r3]
 800c7e2:	24b0      	movs	r4, #176	; 0xb0
 800c7e4:	0324      	lsls	r4, r4, #12
 800c7e6:	432c      	orrs	r4, r5
 800c7e8:	50d4      	str	r4, [r2, r3]
 800c7ea:	e69a      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART4_RX);	
 800c7ec:	4aae      	ldr	r2, [pc, #696]	; (800caa8 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c7ee:	23a8      	movs	r3, #168	; 0xa8
 800c7f0:	58d4      	ldr	r4, [r2, r3]
 800c7f2:	4daf      	ldr	r5, [pc, #700]	; (800cab0 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c7f4:	402c      	ands	r4, r5
 800c7f6:	50d4      	str	r4, [r2, r3]
 800c7f8:	58d5      	ldr	r5, [r2, r3]
 800c7fa:	24b0      	movs	r4, #176	; 0xb0
 800c7fc:	0424      	lsls	r4, r4, #16
 800c7fe:	432c      	orrs	r4, r5
 800c800:	50d4      	str	r4, [r2, r3]
 800c802:	e68e      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART4_RX);	
 800c804:	4aab      	ldr	r2, [pc, #684]	; (800cab4 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c806:	23a8      	movs	r3, #168	; 0xa8
 800c808:	58d4      	ldr	r4, [r2, r3]
 800c80a:	25f0      	movs	r5, #240	; 0xf0
 800c80c:	43ac      	bics	r4, r5
 800c80e:	50d4      	str	r4, [r2, r3]
 800c810:	58d4      	ldr	r4, [r2, r3]
 800c812:	3d40      	subs	r5, #64	; 0x40
 800c814:	432c      	orrs	r4, r5
 800c816:	50d4      	str	r4, [r2, r3]
 800c818:	e683      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel1) {
 800c81a:	680b      	ldr	r3, [r1, #0]
 800c81c:	4aa6      	ldr	r2, [pc, #664]	; (800cab8 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c81e:	4293      	cmp	r3, r2
 800c820:	d01b      	beq.n	800c85a <RemapAndLinkDMAtoUARTRx+0x3e6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel3) {
 800c822:	4aa6      	ldr	r2, [pc, #664]	; (800cabc <RemapAndLinkDMAtoUARTRx+0x648>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d023      	beq.n	800c870 <RemapAndLinkDMAtoUARTRx+0x3fc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel5) {
 800c828:	4aa5      	ldr	r2, [pc, #660]	; (800cac0 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d02c      	beq.n	800c888 <RemapAndLinkDMAtoUARTRx+0x414>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel6) {
 800c82e:	4aa5      	ldr	r2, [pc, #660]	; (800cac4 <RemapAndLinkDMAtoUARTRx+0x650>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d035      	beq.n	800c8a0 <RemapAndLinkDMAtoUARTRx+0x42c>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel2) {
 800c834:	4aa4      	ldr	r2, [pc, #656]	; (800cac8 <RemapAndLinkDMAtoUARTRx+0x654>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d03e      	beq.n	800c8b8 <RemapAndLinkDMAtoUARTRx+0x444>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel3) {
 800c83a:	4aa4      	ldr	r2, [pc, #656]	; (800cacc <RemapAndLinkDMAtoUARTRx+0x658>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d000      	beq.n	800c842 <RemapAndLinkDMAtoUARTRx+0x3ce>
 800c840:	e66f      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART5_RX);					
 800c842:	4a9c      	ldr	r2, [pc, #624]	; (800cab4 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c844:	23a8      	movs	r3, #168	; 0xa8
 800c846:	58d4      	ldr	r4, [r2, r3]
 800c848:	4da1      	ldr	r5, [pc, #644]	; (800cad0 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800c84a:	402c      	ands	r4, r5
 800c84c:	50d4      	str	r4, [r2, r3]
 800c84e:	58d5      	ldr	r5, [r2, r3]
 800c850:	24c0      	movs	r4, #192	; 0xc0
 800c852:	0124      	lsls	r4, r4, #4
 800c854:	432c      	orrs	r4, r5
 800c856:	50d4      	str	r4, [r2, r3]
 800c858:	e663      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART5_RX);
 800c85a:	4a93      	ldr	r2, [pc, #588]	; (800caa8 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c85c:	23a8      	movs	r3, #168	; 0xa8
 800c85e:	58d4      	ldr	r4, [r2, r3]
 800c860:	250f      	movs	r5, #15
 800c862:	43ac      	bics	r4, r5
 800c864:	50d4      	str	r4, [r2, r3]
 800c866:	58d4      	ldr	r4, [r2, r3]
 800c868:	3d03      	subs	r5, #3
 800c86a:	432c      	orrs	r4, r5
 800c86c:	50d4      	str	r4, [r2, r3]
 800c86e:	e658      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART5_RX);
 800c870:	4a8d      	ldr	r2, [pc, #564]	; (800caa8 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c872:	23a8      	movs	r3, #168	; 0xa8
 800c874:	58d4      	ldr	r4, [r2, r3]
 800c876:	4d96      	ldr	r5, [pc, #600]	; (800cad0 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800c878:	402c      	ands	r4, r5
 800c87a:	50d4      	str	r4, [r2, r3]
 800c87c:	58d5      	ldr	r5, [r2, r3]
 800c87e:	24c0      	movs	r4, #192	; 0xc0
 800c880:	0124      	lsls	r4, r4, #4
 800c882:	432c      	orrs	r4, r5
 800c884:	50d4      	str	r4, [r2, r3]
 800c886:	e64c      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART5_RX);		
 800c888:	4a87      	ldr	r2, [pc, #540]	; (800caa8 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c88a:	23a8      	movs	r3, #168	; 0xa8
 800c88c:	58d4      	ldr	r4, [r2, r3]
 800c88e:	4d87      	ldr	r5, [pc, #540]	; (800caac <RemapAndLinkDMAtoUARTRx+0x638>)
 800c890:	402c      	ands	r4, r5
 800c892:	50d4      	str	r4, [r2, r3]
 800c894:	58d5      	ldr	r5, [r2, r3]
 800c896:	24c0      	movs	r4, #192	; 0xc0
 800c898:	0324      	lsls	r4, r4, #12
 800c89a:	432c      	orrs	r4, r5
 800c89c:	50d4      	str	r4, [r2, r3]
 800c89e:	e640      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART5_RX);	
 800c8a0:	4a81      	ldr	r2, [pc, #516]	; (800caa8 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c8a2:	23a8      	movs	r3, #168	; 0xa8
 800c8a4:	58d4      	ldr	r4, [r2, r3]
 800c8a6:	4d82      	ldr	r5, [pc, #520]	; (800cab0 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c8a8:	402c      	ands	r4, r5
 800c8aa:	50d4      	str	r4, [r2, r3]
 800c8ac:	58d5      	ldr	r5, [r2, r3]
 800c8ae:	24c0      	movs	r4, #192	; 0xc0
 800c8b0:	0424      	lsls	r4, r4, #16
 800c8b2:	432c      	orrs	r4, r5
 800c8b4:	50d4      	str	r4, [r2, r3]
 800c8b6:	e634      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART5_RX);	
 800c8b8:	4a7e      	ldr	r2, [pc, #504]	; (800cab4 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c8ba:	23a8      	movs	r3, #168	; 0xa8
 800c8bc:	58d4      	ldr	r4, [r2, r3]
 800c8be:	25f0      	movs	r5, #240	; 0xf0
 800c8c0:	43ac      	bics	r4, r5
 800c8c2:	50d4      	str	r4, [r2, r3]
 800c8c4:	58d4      	ldr	r4, [r2, r3]
 800c8c6:	3d30      	subs	r5, #48	; 0x30
 800c8c8:	432c      	orrs	r4, r5
 800c8ca:	50d4      	str	r4, [r2, r3]
 800c8cc:	e629      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel1) {
 800c8ce:	680b      	ldr	r3, [r1, #0]
 800c8d0:	4a79      	ldr	r2, [pc, #484]	; (800cab8 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d01b      	beq.n	800c90e <RemapAndLinkDMAtoUARTRx+0x49a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel3) {
 800c8d6:	4a79      	ldr	r2, [pc, #484]	; (800cabc <RemapAndLinkDMAtoUARTRx+0x648>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d023      	beq.n	800c924 <RemapAndLinkDMAtoUARTRx+0x4b0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel5) {
 800c8dc:	4a78      	ldr	r2, [pc, #480]	; (800cac0 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d02c      	beq.n	800c93c <RemapAndLinkDMAtoUARTRx+0x4c8>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel6) {
 800c8e2:	4a78      	ldr	r2, [pc, #480]	; (800cac4 <RemapAndLinkDMAtoUARTRx+0x650>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d035      	beq.n	800c954 <RemapAndLinkDMAtoUARTRx+0x4e0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel2) {
 800c8e8:	4a77      	ldr	r2, [pc, #476]	; (800cac8 <RemapAndLinkDMAtoUARTRx+0x654>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d03e      	beq.n	800c96c <RemapAndLinkDMAtoUARTRx+0x4f8>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel3) {
 800c8ee:	4a77      	ldr	r2, [pc, #476]	; (800cacc <RemapAndLinkDMAtoUARTRx+0x658>)
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d000      	beq.n	800c8f6 <RemapAndLinkDMAtoUARTRx+0x482>
 800c8f4:	e615      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART6_RX);					
 800c8f6:	4a6f      	ldr	r2, [pc, #444]	; (800cab4 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c8f8:	23a8      	movs	r3, #168	; 0xa8
 800c8fa:	58d4      	ldr	r4, [r2, r3]
 800c8fc:	4d74      	ldr	r5, [pc, #464]	; (800cad0 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800c8fe:	402c      	ands	r4, r5
 800c900:	50d4      	str	r4, [r2, r3]
 800c902:	58d5      	ldr	r5, [r2, r3]
 800c904:	24d0      	movs	r4, #208	; 0xd0
 800c906:	0124      	lsls	r4, r4, #4
 800c908:	432c      	orrs	r4, r5
 800c90a:	50d4      	str	r4, [r2, r3]
 800c90c:	e609      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART6_RX);
 800c90e:	4a66      	ldr	r2, [pc, #408]	; (800caa8 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c910:	23a8      	movs	r3, #168	; 0xa8
 800c912:	58d4      	ldr	r4, [r2, r3]
 800c914:	250f      	movs	r5, #15
 800c916:	43ac      	bics	r4, r5
 800c918:	50d4      	str	r4, [r2, r3]
 800c91a:	58d4      	ldr	r4, [r2, r3]
 800c91c:	3d02      	subs	r5, #2
 800c91e:	432c      	orrs	r4, r5
 800c920:	50d4      	str	r4, [r2, r3]
 800c922:	e5fe      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART6_RX);
 800c924:	4a60      	ldr	r2, [pc, #384]	; (800caa8 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c926:	23a8      	movs	r3, #168	; 0xa8
 800c928:	58d4      	ldr	r4, [r2, r3]
 800c92a:	4d69      	ldr	r5, [pc, #420]	; (800cad0 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800c92c:	402c      	ands	r4, r5
 800c92e:	50d4      	str	r4, [r2, r3]
 800c930:	58d5      	ldr	r5, [r2, r3]
 800c932:	24d0      	movs	r4, #208	; 0xd0
 800c934:	0124      	lsls	r4, r4, #4
 800c936:	432c      	orrs	r4, r5
 800c938:	50d4      	str	r4, [r2, r3]
 800c93a:	e5f2      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART6_RX);		
 800c93c:	4a5a      	ldr	r2, [pc, #360]	; (800caa8 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c93e:	23a8      	movs	r3, #168	; 0xa8
 800c940:	58d4      	ldr	r4, [r2, r3]
 800c942:	4d5a      	ldr	r5, [pc, #360]	; (800caac <RemapAndLinkDMAtoUARTRx+0x638>)
 800c944:	402c      	ands	r4, r5
 800c946:	50d4      	str	r4, [r2, r3]
 800c948:	58d5      	ldr	r5, [r2, r3]
 800c94a:	24d0      	movs	r4, #208	; 0xd0
 800c94c:	0324      	lsls	r4, r4, #12
 800c94e:	432c      	orrs	r4, r5
 800c950:	50d4      	str	r4, [r2, r3]
 800c952:	e5e6      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART6_RX);	
 800c954:	4a54      	ldr	r2, [pc, #336]	; (800caa8 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c956:	23a8      	movs	r3, #168	; 0xa8
 800c958:	58d4      	ldr	r4, [r2, r3]
 800c95a:	4d55      	ldr	r5, [pc, #340]	; (800cab0 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800c95c:	402c      	ands	r4, r5
 800c95e:	50d4      	str	r4, [r2, r3]
 800c960:	58d5      	ldr	r5, [r2, r3]
 800c962:	24d0      	movs	r4, #208	; 0xd0
 800c964:	0424      	lsls	r4, r4, #16
 800c966:	432c      	orrs	r4, r5
 800c968:	50d4      	str	r4, [r2, r3]
 800c96a:	e5da      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART6_RX);	
 800c96c:	4a51      	ldr	r2, [pc, #324]	; (800cab4 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c96e:	23a8      	movs	r3, #168	; 0xa8
 800c970:	58d4      	ldr	r4, [r2, r3]
 800c972:	25f0      	movs	r5, #240	; 0xf0
 800c974:	43ac      	bics	r4, r5
 800c976:	50d4      	str	r4, [r2, r3]
 800c978:	58d4      	ldr	r4, [r2, r3]
 800c97a:	3d20      	subs	r5, #32
 800c97c:	432c      	orrs	r4, r5
 800c97e:	50d4      	str	r4, [r2, r3]
 800c980:	e5cf      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel1) {
 800c982:	680b      	ldr	r3, [r1, #0]
 800c984:	4a4c      	ldr	r2, [pc, #304]	; (800cab8 <RemapAndLinkDMAtoUARTRx+0x644>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d01b      	beq.n	800c9c2 <RemapAndLinkDMAtoUARTRx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel3) {
 800c98a:	4a4c      	ldr	r2, [pc, #304]	; (800cabc <RemapAndLinkDMAtoUARTRx+0x648>)
 800c98c:	4293      	cmp	r3, r2
 800c98e:	d023      	beq.n	800c9d8 <RemapAndLinkDMAtoUARTRx+0x564>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel5) {
 800c990:	4a4b      	ldr	r2, [pc, #300]	; (800cac0 <RemapAndLinkDMAtoUARTRx+0x64c>)
 800c992:	4293      	cmp	r3, r2
 800c994:	d02c      	beq.n	800c9f0 <RemapAndLinkDMAtoUARTRx+0x57c>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel6) {
 800c996:	4a4b      	ldr	r2, [pc, #300]	; (800cac4 <RemapAndLinkDMAtoUARTRx+0x650>)
 800c998:	4293      	cmp	r3, r2
 800c99a:	d035      	beq.n	800ca08 <RemapAndLinkDMAtoUARTRx+0x594>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel2) {
 800c99c:	4a4a      	ldr	r2, [pc, #296]	; (800cac8 <RemapAndLinkDMAtoUARTRx+0x654>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d03e      	beq.n	800ca20 <RemapAndLinkDMAtoUARTRx+0x5ac>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel3) {
 800c9a2:	4a4a      	ldr	r2, [pc, #296]	; (800cacc <RemapAndLinkDMAtoUARTRx+0x658>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d000      	beq.n	800c9aa <RemapAndLinkDMAtoUARTRx+0x536>
 800c9a8:	e5bb      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH3_USART7_RX);				
 800c9aa:	4a42      	ldr	r2, [pc, #264]	; (800cab4 <RemapAndLinkDMAtoUARTRx+0x640>)
 800c9ac:	23a8      	movs	r3, #168	; 0xa8
 800c9ae:	58d4      	ldr	r4, [r2, r3]
 800c9b0:	4d47      	ldr	r5, [pc, #284]	; (800cad0 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800c9b2:	402c      	ands	r4, r5
 800c9b4:	50d4      	str	r4, [r2, r3]
 800c9b6:	58d5      	ldr	r5, [r2, r3]
 800c9b8:	24e0      	movs	r4, #224	; 0xe0
 800c9ba:	0124      	lsls	r4, r4, #4
 800c9bc:	432c      	orrs	r4, r5
 800c9be:	50d4      	str	r4, [r2, r3]
 800c9c0:	e5af      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART7_RX);
 800c9c2:	4a39      	ldr	r2, [pc, #228]	; (800caa8 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c9c4:	23a8      	movs	r3, #168	; 0xa8
 800c9c6:	58d4      	ldr	r4, [r2, r3]
 800c9c8:	250f      	movs	r5, #15
 800c9ca:	43ac      	bics	r4, r5
 800c9cc:	50d4      	str	r4, [r2, r3]
 800c9ce:	58d4      	ldr	r4, [r2, r3]
 800c9d0:	3d01      	subs	r5, #1
 800c9d2:	432c      	orrs	r4, r5
 800c9d4:	50d4      	str	r4, [r2, r3]
 800c9d6:	e5a4      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART7_RX);
 800c9d8:	4a33      	ldr	r2, [pc, #204]	; (800caa8 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c9da:	23a8      	movs	r3, #168	; 0xa8
 800c9dc:	58d4      	ldr	r4, [r2, r3]
 800c9de:	4d3c      	ldr	r5, [pc, #240]	; (800cad0 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800c9e0:	402c      	ands	r4, r5
 800c9e2:	50d4      	str	r4, [r2, r3]
 800c9e4:	58d5      	ldr	r5, [r2, r3]
 800c9e6:	24e0      	movs	r4, #224	; 0xe0
 800c9e8:	0124      	lsls	r4, r4, #4
 800c9ea:	432c      	orrs	r4, r5
 800c9ec:	50d4      	str	r4, [r2, r3]
 800c9ee:	e598      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART7_RX);		
 800c9f0:	4a2d      	ldr	r2, [pc, #180]	; (800caa8 <RemapAndLinkDMAtoUARTRx+0x634>)
 800c9f2:	23a8      	movs	r3, #168	; 0xa8
 800c9f4:	58d4      	ldr	r4, [r2, r3]
 800c9f6:	4d2d      	ldr	r5, [pc, #180]	; (800caac <RemapAndLinkDMAtoUARTRx+0x638>)
 800c9f8:	402c      	ands	r4, r5
 800c9fa:	50d4      	str	r4, [r2, r3]
 800c9fc:	58d5      	ldr	r5, [r2, r3]
 800c9fe:	24e0      	movs	r4, #224	; 0xe0
 800ca00:	0324      	lsls	r4, r4, #12
 800ca02:	432c      	orrs	r4, r5
 800ca04:	50d4      	str	r4, [r2, r3]
 800ca06:	e58c      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART7_RX);	
 800ca08:	4a27      	ldr	r2, [pc, #156]	; (800caa8 <RemapAndLinkDMAtoUARTRx+0x634>)
 800ca0a:	23a8      	movs	r3, #168	; 0xa8
 800ca0c:	58d4      	ldr	r4, [r2, r3]
 800ca0e:	4d28      	ldr	r5, [pc, #160]	; (800cab0 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800ca10:	402c      	ands	r4, r5
 800ca12:	50d4      	str	r4, [r2, r3]
 800ca14:	58d5      	ldr	r5, [r2, r3]
 800ca16:	24e0      	movs	r4, #224	; 0xe0
 800ca18:	0424      	lsls	r4, r4, #16
 800ca1a:	432c      	orrs	r4, r5
 800ca1c:	50d4      	str	r4, [r2, r3]
 800ca1e:	e580      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART7_RX);	
 800ca20:	4a24      	ldr	r2, [pc, #144]	; (800cab4 <RemapAndLinkDMAtoUARTRx+0x640>)
 800ca22:	23a8      	movs	r3, #168	; 0xa8
 800ca24:	58d4      	ldr	r4, [r2, r3]
 800ca26:	25f0      	movs	r5, #240	; 0xf0
 800ca28:	43ac      	bics	r4, r5
 800ca2a:	50d4      	str	r4, [r2, r3]
 800ca2c:	58d4      	ldr	r4, [r2, r3]
 800ca2e:	3d10      	subs	r5, #16
 800ca30:	432c      	orrs	r4, r5
 800ca32:	50d4      	str	r4, [r2, r3]
 800ca34:	e575      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH1_USART8_RX);
 800ca36:	4a1c      	ldr	r2, [pc, #112]	; (800caa8 <RemapAndLinkDMAtoUARTRx+0x634>)
 800ca38:	23a8      	movs	r3, #168	; 0xa8
 800ca3a:	58d5      	ldr	r5, [r2, r3]
 800ca3c:	260f      	movs	r6, #15
 800ca3e:	43b5      	bics	r5, r6
 800ca40:	50d5      	str	r5, [r2, r3]
 800ca42:	58d4      	ldr	r4, [r2, r3]
 800ca44:	4334      	orrs	r4, r6
 800ca46:	50d4      	str	r4, [r2, r3]
 800ca48:	e56b      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH3_USART8_RX);
 800ca4a:	4a17      	ldr	r2, [pc, #92]	; (800caa8 <RemapAndLinkDMAtoUARTRx+0x634>)
 800ca4c:	23a8      	movs	r3, #168	; 0xa8
 800ca4e:	58d4      	ldr	r4, [r2, r3]
 800ca50:	4d1f      	ldr	r5, [pc, #124]	; (800cad0 <RemapAndLinkDMAtoUARTRx+0x65c>)
 800ca52:	402c      	ands	r4, r5
 800ca54:	50d4      	str	r4, [r2, r3]
 800ca56:	58d5      	ldr	r5, [r2, r3]
 800ca58:	24f0      	movs	r4, #240	; 0xf0
 800ca5a:	0124      	lsls	r4, r4, #4
 800ca5c:	432c      	orrs	r4, r5
 800ca5e:	50d4      	str	r4, [r2, r3]
 800ca60:	e55f      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH5_USART8_RX);		
 800ca62:	4a11      	ldr	r2, [pc, #68]	; (800caa8 <RemapAndLinkDMAtoUARTRx+0x634>)
 800ca64:	23a8      	movs	r3, #168	; 0xa8
 800ca66:	58d4      	ldr	r4, [r2, r3]
 800ca68:	4d10      	ldr	r5, [pc, #64]	; (800caac <RemapAndLinkDMAtoUARTRx+0x638>)
 800ca6a:	402c      	ands	r4, r5
 800ca6c:	50d4      	str	r4, [r2, r3]
 800ca6e:	58d5      	ldr	r5, [r2, r3]
 800ca70:	24f0      	movs	r4, #240	; 0xf0
 800ca72:	0324      	lsls	r4, r4, #12
 800ca74:	432c      	orrs	r4, r5
 800ca76:	50d4      	str	r4, [r2, r3]
 800ca78:	e553      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH6_USART8_RX);	
 800ca7a:	4a0b      	ldr	r2, [pc, #44]	; (800caa8 <RemapAndLinkDMAtoUARTRx+0x634>)
 800ca7c:	23a8      	movs	r3, #168	; 0xa8
 800ca7e:	58d4      	ldr	r4, [r2, r3]
 800ca80:	4d0b      	ldr	r5, [pc, #44]	; (800cab0 <RemapAndLinkDMAtoUARTRx+0x63c>)
 800ca82:	402c      	ands	r4, r5
 800ca84:	50d4      	str	r4, [r2, r3]
 800ca86:	58d5      	ldr	r5, [r2, r3]
 800ca88:	24f0      	movs	r4, #240	; 0xf0
 800ca8a:	0424      	lsls	r4, r4, #16
 800ca8c:	432c      	orrs	r4, r5
 800ca8e:	50d4      	str	r4, [r2, r3]
 800ca90:	e547      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH2_USART8_RX);	
 800ca92:	4a08      	ldr	r2, [pc, #32]	; (800cab4 <RemapAndLinkDMAtoUARTRx+0x640>)
 800ca94:	23a8      	movs	r3, #168	; 0xa8
 800ca96:	58d5      	ldr	r5, [r2, r3]
 800ca98:	26f0      	movs	r6, #240	; 0xf0
 800ca9a:	43b5      	bics	r5, r6
 800ca9c:	50d5      	str	r5, [r2, r3]
 800ca9e:	58d4      	ldr	r4, [r2, r3]
 800caa0:	4334      	orrs	r4, r6
 800caa2:	50d4      	str	r4, [r2, r3]
 800caa4:	e53d      	b.n	800c522 <RemapAndLinkDMAtoUARTRx+0xae>
 800caa6:	46c0      	nop			; (mov r8, r8)
 800caa8:	40020000 	.word	0x40020000
 800caac:	fff0ffff 	.word	0xfff0ffff
 800cab0:	ff0fffff 	.word	0xff0fffff
 800cab4:	40020400 	.word	0x40020400
 800cab8:	40020008 	.word	0x40020008
 800cabc:	40020030 	.word	0x40020030
 800cac0:	40020058 	.word	0x40020058
 800cac4:	4002006c 	.word	0x4002006c
 800cac8:	4002041c 	.word	0x4002041c
 800cacc:	40020430 	.word	0x40020430
 800cad0:	fffff0ff 	.word	0xfffff0ff

0800cad4 <DMA_MSG_RX_Setup>:
{	
 800cad4:	b570      	push	{r4, r5, r6, lr}
 800cad6:	0004      	movs	r4, r0
 800cad8:	000d      	movs	r5, r1
	RemapAndLinkDMAtoUARTRx(huart, hDMA);
 800cada:	f7ff fccb 	bl	800c474 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800cade:	2100      	movs	r1, #0
 800cae0:	0028      	movs	r0, r5
 800cae2:	f7ff fc0d 	bl	800c300 <SetupDMAInterrupts>
	HAL_UART_Receive_DMA(huart, (uint8_t *)&UARTRxBuf[GetPort(huart)-1], MSG_RX_BUF_SIZE);			
 800cae6:	0020      	movs	r0, r4
 800cae8:	f7fe fe22 	bl	800b730 <GetPort>
 800caec:	1e41      	subs	r1, r0, #1
 800caee:	0189      	lsls	r1, r1, #6
 800caf0:	4803      	ldr	r0, [pc, #12]	; (800cb00 <DMA_MSG_RX_Setup+0x2c>)
 800caf2:	1809      	adds	r1, r1, r0
 800caf4:	2240      	movs	r2, #64	; 0x40
 800caf6:	0020      	movs	r0, r4
 800caf8:	f006 fe22 	bl	8013740 <HAL_UART_Receive_DMA>
}
 800cafc:	bd70      	pop	{r4, r5, r6, pc}
 800cafe:	46c0      	nop			; (mov r8, r8)
 800cb00:	20001008 	.word	0x20001008

0800cb04 <SetupMessagingRxDMAs>:
{	
 800cb04:	b510      	push	{r4, lr}
	if (portStatus[P1] == FREE)
 800cb06:	4b1b      	ldr	r3, [pc, #108]	; (800cb74 <SetupMessagingRxDMAs+0x70>)
 800cb08:	785b      	ldrb	r3, [r3, #1]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d014      	beq.n	800cb38 <SetupMessagingRxDMAs+0x34>
	if (portStatus[P2] == FREE)	
 800cb0e:	4b19      	ldr	r3, [pc, #100]	; (800cb74 <SetupMessagingRxDMAs+0x70>)
 800cb10:	789b      	ldrb	r3, [r3, #2]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d015      	beq.n	800cb42 <SetupMessagingRxDMAs+0x3e>
	if (portStatus[P3] == FREE)
 800cb16:	4b17      	ldr	r3, [pc, #92]	; (800cb74 <SetupMessagingRxDMAs+0x70>)
 800cb18:	78db      	ldrb	r3, [r3, #3]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d016      	beq.n	800cb4c <SetupMessagingRxDMAs+0x48>
	if (portStatus[P4] == FREE)
 800cb1e:	4b15      	ldr	r3, [pc, #84]	; (800cb74 <SetupMessagingRxDMAs+0x70>)
 800cb20:	791b      	ldrb	r3, [r3, #4]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d017      	beq.n	800cb56 <SetupMessagingRxDMAs+0x52>
	if (portStatus[P5] == FREE)
 800cb26:	4b13      	ldr	r3, [pc, #76]	; (800cb74 <SetupMessagingRxDMAs+0x70>)
 800cb28:	795b      	ldrb	r3, [r3, #5]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d018      	beq.n	800cb60 <SetupMessagingRxDMAs+0x5c>
	if (portStatus[P6] == FREE)
 800cb2e:	4b11      	ldr	r3, [pc, #68]	; (800cb74 <SetupMessagingRxDMAs+0x70>)
 800cb30:	799b      	ldrb	r3, [r3, #6]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d019      	beq.n	800cb6a <SetupMessagingRxDMAs+0x66>
}
 800cb36:	bd10      	pop	{r4, pc}
		DMA_MSG_RX_Setup(P1uart, &msgRxDMA[0]);
 800cb38:	490f      	ldr	r1, [pc, #60]	; (800cb78 <SetupMessagingRxDMAs+0x74>)
 800cb3a:	4810      	ldr	r0, [pc, #64]	; (800cb7c <SetupMessagingRxDMAs+0x78>)
 800cb3c:	f7ff ffca 	bl	800cad4 <DMA_MSG_RX_Setup>
 800cb40:	e7e5      	b.n	800cb0e <SetupMessagingRxDMAs+0xa>
		DMA_MSG_RX_Setup(P2uart, &msgRxDMA[1]);
 800cb42:	490f      	ldr	r1, [pc, #60]	; (800cb80 <SetupMessagingRxDMAs+0x7c>)
 800cb44:	480f      	ldr	r0, [pc, #60]	; (800cb84 <SetupMessagingRxDMAs+0x80>)
 800cb46:	f7ff ffc5 	bl	800cad4 <DMA_MSG_RX_Setup>
 800cb4a:	e7e4      	b.n	800cb16 <SetupMessagingRxDMAs+0x12>
		DMA_MSG_RX_Setup(P3uart, &msgRxDMA[2]);
 800cb4c:	490e      	ldr	r1, [pc, #56]	; (800cb88 <SetupMessagingRxDMAs+0x84>)
 800cb4e:	480f      	ldr	r0, [pc, #60]	; (800cb8c <SetupMessagingRxDMAs+0x88>)
 800cb50:	f7ff ffc0 	bl	800cad4 <DMA_MSG_RX_Setup>
 800cb54:	e7e3      	b.n	800cb1e <SetupMessagingRxDMAs+0x1a>
		DMA_MSG_RX_Setup(P4uart, &msgRxDMA[3]);
 800cb56:	490e      	ldr	r1, [pc, #56]	; (800cb90 <SetupMessagingRxDMAs+0x8c>)
 800cb58:	480e      	ldr	r0, [pc, #56]	; (800cb94 <SetupMessagingRxDMAs+0x90>)
 800cb5a:	f7ff ffbb 	bl	800cad4 <DMA_MSG_RX_Setup>
 800cb5e:	e7e2      	b.n	800cb26 <SetupMessagingRxDMAs+0x22>
		DMA_MSG_RX_Setup(P5uart, &msgRxDMA[4]);
 800cb60:	490d      	ldr	r1, [pc, #52]	; (800cb98 <SetupMessagingRxDMAs+0x94>)
 800cb62:	480e      	ldr	r0, [pc, #56]	; (800cb9c <SetupMessagingRxDMAs+0x98>)
 800cb64:	f7ff ffb6 	bl	800cad4 <DMA_MSG_RX_Setup>
 800cb68:	e7e1      	b.n	800cb2e <SetupMessagingRxDMAs+0x2a>
		DMA_MSG_RX_Setup(P6uart, &msgRxDMA[5]);
 800cb6a:	490d      	ldr	r1, [pc, #52]	; (800cba0 <SetupMessagingRxDMAs+0x9c>)
 800cb6c:	480d      	ldr	r0, [pc, #52]	; (800cba4 <SetupMessagingRxDMAs+0xa0>)
 800cb6e:	f7ff ffb1 	bl	800cad4 <DMA_MSG_RX_Setup>
}
 800cb72:	e7e0      	b.n	800cb36 <SetupMessagingRxDMAs+0x32>
 800cb74:	20000e5c 	.word	0x20000e5c
 800cb78:	200014bc 	.word	0x200014bc
 800cb7c:	20006960 	.word	0x20006960
 800cb80:	200014f4 	.word	0x200014f4
 800cb84:	200069d0 	.word	0x200069d0
 800cb88:	2000152c 	.word	0x2000152c
 800cb8c:	200068f0 	.word	0x200068f0
 800cb90:	20001564 	.word	0x20001564
 800cb94:	200067a0 	.word	0x200067a0
 800cb98:	2000159c 	.word	0x2000159c
 800cb9c:	20006880 	.word	0x20006880
 800cba0:	200015d4 	.word	0x200015d4
 800cba4:	20006810 	.word	0x20006810

0800cba8 <DMA_STREAM_Setup>:
{	
 800cba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbaa:	0005      	movs	r5, r0
 800cbac:	000f      	movs	r7, r1
 800cbae:	0016      	movs	r6, r2
	uint8_t port = GetPort(huartSrc);
 800cbb0:	f7fe fdbe 	bl	800b730 <GetPort>
	hDMA = &streamDMA[port-1];
 800cbb4:	3801      	subs	r0, #1
 800cbb6:	00c4      	lsls	r4, r0, #3
 800cbb8:	1a24      	subs	r4, r4, r0
 800cbba:	00e4      	lsls	r4, r4, #3
 800cbbc:	4809      	ldr	r0, [pc, #36]	; (800cbe4 <DMA_STREAM_Setup+0x3c>)
 800cbbe:	1824      	adds	r4, r4, r0
	RemapAndLinkDMAtoUARTRx(huartSrc, hDMA);
 800cbc0:	0021      	movs	r1, r4
 800cbc2:	0028      	movs	r0, r5
 800cbc4:	f7ff fc56 	bl	800c474 <RemapAndLinkDMAtoUARTRx>
	SetupDMAInterrupts(hDMA, STREAM_DMA_INT_PRIORITY);
 800cbc8:	2101      	movs	r1, #1
 800cbca:	0020      	movs	r0, r4
 800cbcc:	f7ff fb98 	bl	800c300 <SetupDMAInterrupts>
	huartSrc->State = HAL_UART_STATE_READY;
 800cbd0:	2369      	movs	r3, #105	; 0x69
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	54ea      	strb	r2, [r5, r3]
	HAL_UART_Receive_DMA(huartSrc, (uint8_t *)(&(huartDst->Instance->TDR)), num);
 800cbd6:	6839      	ldr	r1, [r7, #0]
 800cbd8:	3128      	adds	r1, #40	; 0x28
 800cbda:	0032      	movs	r2, r6
 800cbdc:	0028      	movs	r0, r5
 800cbde:	f006 fdaf 	bl	8013740 <HAL_UART_Receive_DMA>
}
 800cbe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbe4:	200016b4 	.word	0x200016b4

0800cbe8 <RemapAndLinkDMAtoUARTTx>:
/*-----------------------------------------------------------*/

/* Remap and link the UART TX and DMA structs 
*/
void RemapAndLinkDMAtoUARTTx(UART_HandleTypeDef *huart, DMA_HandleTypeDef *hDMA)
{
 800cbe8:	b570      	push	{r4, r5, r6, lr}
	// USART 1
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800cbea:	6803      	ldr	r3, [r0, #0]
 800cbec:	4ac3      	ldr	r2, [pc, #780]	; (800cefc <RemapAndLinkDMAtoUARTTx+0x314>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d03e      	beq.n	800cc70 <RemapAndLinkDMAtoUARTTx+0x88>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
	// USART 2	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800cbf2:	4ac3      	ldr	r2, [pc, #780]	; (800cf00 <RemapAndLinkDMAtoUARTTx+0x318>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d100      	bne.n	800cbfa <RemapAndLinkDMAtoUARTTx+0x12>
 800cbf8:	e096      	b.n	800cd28 <RemapAndLinkDMAtoUARTTx+0x140>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
	// USART 3	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800cbfa:	4ac2      	ldr	r2, [pc, #776]	; (800cf04 <RemapAndLinkDMAtoUARTTx+0x31c>)
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	d100      	bne.n	800cc02 <RemapAndLinkDMAtoUARTTx+0x1a>
 800cc00:	e0eb      	b.n	800cdda <RemapAndLinkDMAtoUARTTx+0x1f2>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
	// USART 4	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800cc02:	4ac1      	ldr	r2, [pc, #772]	; (800cf08 <RemapAndLinkDMAtoUARTTx+0x320>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d100      	bne.n	800cc0a <RemapAndLinkDMAtoUARTTx+0x22>
 800cc08:	e141      	b.n	800ce8e <RemapAndLinkDMAtoUARTTx+0x2a6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
	// USART 5	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800cc0a:	4ac0      	ldr	r2, [pc, #768]	; (800cf0c <RemapAndLinkDMAtoUARTTx+0x324>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d100      	bne.n	800cc12 <RemapAndLinkDMAtoUARTTx+0x2a>
 800cc10:	e1bd      	b.n	800cf8e <RemapAndLinkDMAtoUARTTx+0x3a6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
	// USART 6	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800cc12:	4abf      	ldr	r2, [pc, #764]	; (800cf10 <RemapAndLinkDMAtoUARTTx+0x328>)
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d100      	bne.n	800cc1a <RemapAndLinkDMAtoUARTTx+0x32>
 800cc18:	e213      	b.n	800d042 <RemapAndLinkDMAtoUARTTx+0x45a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
	// USART 7	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800cc1a:	4abe      	ldr	r2, [pc, #760]	; (800cf14 <RemapAndLinkDMAtoUARTTx+0x32c>)
 800cc1c:	4293      	cmp	r3, r2
 800cc1e:	d100      	bne.n	800cc22 <RemapAndLinkDMAtoUARTTx+0x3a>
 800cc20:	e269      	b.n	800d0f6 <RemapAndLinkDMAtoUARTTx+0x50e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
	// USART 8	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel2) {
 800cc22:	4abd      	ldr	r2, [pc, #756]	; (800cf18 <RemapAndLinkDMAtoUARTTx+0x330>)
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d136      	bne.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
 800cc28:	680b      	ldr	r3, [r1, #0]
 800cc2a:	4abc      	ldr	r2, [pc, #752]	; (800cf1c <RemapAndLinkDMAtoUARTTx+0x334>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d100      	bne.n	800cc32 <RemapAndLinkDMAtoUARTTx+0x4a>
 800cc30:	e2bb      	b.n	800d1aa <RemapAndLinkDMAtoUARTTx+0x5c2>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel4) {
 800cc32:	4abb      	ldr	r2, [pc, #748]	; (800cf20 <RemapAndLinkDMAtoUARTTx+0x338>)
 800cc34:	4293      	cmp	r3, r2
 800cc36:	d100      	bne.n	800cc3a <RemapAndLinkDMAtoUARTTx+0x52>
 800cc38:	e2c1      	b.n	800d1be <RemapAndLinkDMAtoUARTTx+0x5d6>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA1_Channel7) {
 800cc3a:	4aba      	ldr	r2, [pc, #744]	; (800cf24 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d100      	bne.n	800cc42 <RemapAndLinkDMAtoUARTTx+0x5a>
 800cc40:	e2c9      	b.n	800d1d6 <RemapAndLinkDMAtoUARTTx+0x5ee>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel1) {
 800cc42:	4ab9      	ldr	r2, [pc, #740]	; (800cf28 <RemapAndLinkDMAtoUARTTx+0x340>)
 800cc44:	4293      	cmp	r3, r2
 800cc46:	d100      	bne.n	800cc4a <RemapAndLinkDMAtoUARTTx+0x62>
 800cc48:	e2d1      	b.n	800d1ee <RemapAndLinkDMAtoUARTTx+0x606>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel4) {
 800cc4a:	4ab8      	ldr	r2, [pc, #736]	; (800cf2c <RemapAndLinkDMAtoUARTTx+0x344>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d100      	bne.n	800cc52 <RemapAndLinkDMAtoUARTTx+0x6a>
 800cc50:	e2d7      	b.n	800d202 <RemapAndLinkDMAtoUARTTx+0x61a>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
	} else if (huart->Instance == USART8 && hDMA->Instance == DMA2_Channel5) {
 800cc52:	4ab7      	ldr	r2, [pc, #732]	; (800cf30 <RemapAndLinkDMAtoUARTTx+0x348>)
 800cc54:	4293      	cmp	r3, r2
 800cc56:	d11e      	bne.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART8_TX);					
 800cc58:	4ab6      	ldr	r2, [pc, #728]	; (800cf34 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800cc5a:	23a8      	movs	r3, #168	; 0xa8
 800cc5c:	58d4      	ldr	r4, [r2, r3]
 800cc5e:	4db6      	ldr	r5, [pc, #728]	; (800cf38 <RemapAndLinkDMAtoUARTTx+0x350>)
 800cc60:	402c      	ands	r4, r5
 800cc62:	50d4      	str	r4, [r2, r3]
 800cc64:	58d5      	ldr	r5, [r2, r3]
 800cc66:	24f0      	movs	r4, #240	; 0xf0
 800cc68:	0324      	lsls	r4, r4, #12
 800cc6a:	432c      	orrs	r4, r5
 800cc6c:	50d4      	str	r4, [r2, r3]
 800cc6e:	e012      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
	if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel2) {
 800cc70:	680b      	ldr	r3, [r1, #0]
 800cc72:	4aaa      	ldr	r2, [pc, #680]	; (800cf1c <RemapAndLinkDMAtoUARTTx+0x334>)
 800cc74:	4293      	cmp	r3, r2
 800cc76:	d011      	beq.n	800cc9c <RemapAndLinkDMAtoUARTTx+0xb4>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel4) {
 800cc78:	4aa9      	ldr	r2, [pc, #676]	; (800cf20 <RemapAndLinkDMAtoUARTTx+0x338>)
 800cc7a:	4293      	cmp	r3, r2
 800cc7c:	d019      	beq.n	800ccb2 <RemapAndLinkDMAtoUARTTx+0xca>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA1_Channel7) {
 800cc7e:	4aa9      	ldr	r2, [pc, #676]	; (800cf24 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d022      	beq.n	800ccca <RemapAndLinkDMAtoUARTTx+0xe2>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel1) {
 800cc84:	4aa8      	ldr	r2, [pc, #672]	; (800cf28 <RemapAndLinkDMAtoUARTTx+0x340>)
 800cc86:	4293      	cmp	r3, r2
 800cc88:	d02b      	beq.n	800cce2 <RemapAndLinkDMAtoUARTTx+0xfa>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel4) {
 800cc8a:	4aa8      	ldr	r2, [pc, #672]	; (800cf2c <RemapAndLinkDMAtoUARTTx+0x344>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d033      	beq.n	800ccf8 <RemapAndLinkDMAtoUARTTx+0x110>
	} else if (huart->Instance == USART1 && hDMA->Instance == DMA2_Channel5) {
 800cc90:	4aa7      	ldr	r2, [pc, #668]	; (800cf30 <RemapAndLinkDMAtoUARTTx+0x348>)
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d03c      	beq.n	800cd10 <RemapAndLinkDMAtoUARTTx+0x128>
	}		
	
	__HAL_LINKDMA(huart,hdmatx,*hDMA);	
 800cc96:	6601      	str	r1, [r0, #96]	; 0x60
 800cc98:	6248      	str	r0, [r1, #36]	; 0x24
}
 800cc9a:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART1_TX);
 800cc9c:	4aa7      	ldr	r2, [pc, #668]	; (800cf3c <RemapAndLinkDMAtoUARTTx+0x354>)
 800cc9e:	23a8      	movs	r3, #168	; 0xa8
 800cca0:	58d4      	ldr	r4, [r2, r3]
 800cca2:	25f0      	movs	r5, #240	; 0xf0
 800cca4:	43ac      	bics	r4, r5
 800cca6:	50d4      	str	r4, [r2, r3]
 800cca8:	58d4      	ldr	r4, [r2, r3]
 800ccaa:	3d70      	subs	r5, #112	; 0x70
 800ccac:	432c      	orrs	r4, r5
 800ccae:	50d4      	str	r4, [r2, r3]
 800ccb0:	e7f1      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART1_TX);
 800ccb2:	4aa2      	ldr	r2, [pc, #648]	; (800cf3c <RemapAndLinkDMAtoUARTTx+0x354>)
 800ccb4:	23a8      	movs	r3, #168	; 0xa8
 800ccb6:	58d4      	ldr	r4, [r2, r3]
 800ccb8:	4da1      	ldr	r5, [pc, #644]	; (800cf40 <RemapAndLinkDMAtoUARTTx+0x358>)
 800ccba:	402c      	ands	r4, r5
 800ccbc:	50d4      	str	r4, [r2, r3]
 800ccbe:	58d5      	ldr	r5, [r2, r3]
 800ccc0:	2480      	movs	r4, #128	; 0x80
 800ccc2:	0224      	lsls	r4, r4, #8
 800ccc4:	432c      	orrs	r4, r5
 800ccc6:	50d4      	str	r4, [r2, r3]
 800ccc8:	e7e5      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART1_TX);		
 800ccca:	4a9c      	ldr	r2, [pc, #624]	; (800cf3c <RemapAndLinkDMAtoUARTTx+0x354>)
 800cccc:	23a8      	movs	r3, #168	; 0xa8
 800ccce:	58d4      	ldr	r4, [r2, r3]
 800ccd0:	4d9c      	ldr	r5, [pc, #624]	; (800cf44 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800ccd2:	402c      	ands	r4, r5
 800ccd4:	50d4      	str	r4, [r2, r3]
 800ccd6:	58d5      	ldr	r5, [r2, r3]
 800ccd8:	2480      	movs	r4, #128	; 0x80
 800ccda:	0524      	lsls	r4, r4, #20
 800ccdc:	432c      	orrs	r4, r5
 800ccde:	50d4      	str	r4, [r2, r3]
 800cce0:	e7d9      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART1_TX);	
 800cce2:	4a94      	ldr	r2, [pc, #592]	; (800cf34 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800cce4:	23a8      	movs	r3, #168	; 0xa8
 800cce6:	58d4      	ldr	r4, [r2, r3]
 800cce8:	250f      	movs	r5, #15
 800ccea:	43ac      	bics	r4, r5
 800ccec:	50d4      	str	r4, [r2, r3]
 800ccee:	58d4      	ldr	r4, [r2, r3]
 800ccf0:	3d07      	subs	r5, #7
 800ccf2:	432c      	orrs	r4, r5
 800ccf4:	50d4      	str	r4, [r2, r3]
 800ccf6:	e7ce      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART1_TX);	
 800ccf8:	4a8e      	ldr	r2, [pc, #568]	; (800cf34 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800ccfa:	23a8      	movs	r3, #168	; 0xa8
 800ccfc:	58d4      	ldr	r4, [r2, r3]
 800ccfe:	4d90      	ldr	r5, [pc, #576]	; (800cf40 <RemapAndLinkDMAtoUARTTx+0x358>)
 800cd00:	402c      	ands	r4, r5
 800cd02:	50d4      	str	r4, [r2, r3]
 800cd04:	58d5      	ldr	r5, [r2, r3]
 800cd06:	2480      	movs	r4, #128	; 0x80
 800cd08:	0224      	lsls	r4, r4, #8
 800cd0a:	432c      	orrs	r4, r5
 800cd0c:	50d4      	str	r4, [r2, r3]
 800cd0e:	e7c2      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART1_TX);	
 800cd10:	4a88      	ldr	r2, [pc, #544]	; (800cf34 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800cd12:	23a8      	movs	r3, #168	; 0xa8
 800cd14:	58d4      	ldr	r4, [r2, r3]
 800cd16:	4d88      	ldr	r5, [pc, #544]	; (800cf38 <RemapAndLinkDMAtoUARTTx+0x350>)
 800cd18:	402c      	ands	r4, r5
 800cd1a:	50d4      	str	r4, [r2, r3]
 800cd1c:	58d5      	ldr	r5, [r2, r3]
 800cd1e:	2480      	movs	r4, #128	; 0x80
 800cd20:	0324      	lsls	r4, r4, #12
 800cd22:	432c      	orrs	r4, r5
 800cd24:	50d4      	str	r4, [r2, r3]
 800cd26:	e7b6      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel2) {
 800cd28:	680b      	ldr	r3, [r1, #0]
 800cd2a:	4a7c      	ldr	r2, [pc, #496]	; (800cf1c <RemapAndLinkDMAtoUARTTx+0x334>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d01a      	beq.n	800cd66 <RemapAndLinkDMAtoUARTTx+0x17e>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel4) {
 800cd30:	4a7b      	ldr	r2, [pc, #492]	; (800cf20 <RemapAndLinkDMAtoUARTTx+0x338>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d022      	beq.n	800cd7c <RemapAndLinkDMAtoUARTTx+0x194>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA1_Channel7) {
 800cd36:	4a7b      	ldr	r2, [pc, #492]	; (800cf24 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d02b      	beq.n	800cd94 <RemapAndLinkDMAtoUARTTx+0x1ac>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel1) {
 800cd3c:	4a7a      	ldr	r2, [pc, #488]	; (800cf28 <RemapAndLinkDMAtoUARTTx+0x340>)
 800cd3e:	4293      	cmp	r3, r2
 800cd40:	d034      	beq.n	800cdac <RemapAndLinkDMAtoUARTTx+0x1c4>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel4) {
 800cd42:	4a7a      	ldr	r2, [pc, #488]	; (800cf2c <RemapAndLinkDMAtoUARTTx+0x344>)
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d03c      	beq.n	800cdc2 <RemapAndLinkDMAtoUARTTx+0x1da>
	} else if (huart->Instance == USART2 && hDMA->Instance == DMA2_Channel5) {
 800cd48:	4a79      	ldr	r2, [pc, #484]	; (800cf30 <RemapAndLinkDMAtoUARTTx+0x348>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d1a3      	bne.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART2_TX);	
 800cd4e:	4a79      	ldr	r2, [pc, #484]	; (800cf34 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800cd50:	23a8      	movs	r3, #168	; 0xa8
 800cd52:	58d4      	ldr	r4, [r2, r3]
 800cd54:	4d78      	ldr	r5, [pc, #480]	; (800cf38 <RemapAndLinkDMAtoUARTTx+0x350>)
 800cd56:	402c      	ands	r4, r5
 800cd58:	50d4      	str	r4, [r2, r3]
 800cd5a:	58d5      	ldr	r5, [r2, r3]
 800cd5c:	2490      	movs	r4, #144	; 0x90
 800cd5e:	0324      	lsls	r4, r4, #12
 800cd60:	432c      	orrs	r4, r5
 800cd62:	50d4      	str	r4, [r2, r3]
 800cd64:	e797      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART2_TX);
 800cd66:	4a75      	ldr	r2, [pc, #468]	; (800cf3c <RemapAndLinkDMAtoUARTTx+0x354>)
 800cd68:	23a8      	movs	r3, #168	; 0xa8
 800cd6a:	58d4      	ldr	r4, [r2, r3]
 800cd6c:	25f0      	movs	r5, #240	; 0xf0
 800cd6e:	43ac      	bics	r4, r5
 800cd70:	50d4      	str	r4, [r2, r3]
 800cd72:	58d4      	ldr	r4, [r2, r3]
 800cd74:	3d60      	subs	r5, #96	; 0x60
 800cd76:	432c      	orrs	r4, r5
 800cd78:	50d4      	str	r4, [r2, r3]
 800cd7a:	e78c      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 800cd7c:	4a6f      	ldr	r2, [pc, #444]	; (800cf3c <RemapAndLinkDMAtoUARTTx+0x354>)
 800cd7e:	23a8      	movs	r3, #168	; 0xa8
 800cd80:	58d4      	ldr	r4, [r2, r3]
 800cd82:	4d6f      	ldr	r5, [pc, #444]	; (800cf40 <RemapAndLinkDMAtoUARTTx+0x358>)
 800cd84:	402c      	ands	r4, r5
 800cd86:	50d4      	str	r4, [r2, r3]
 800cd88:	58d5      	ldr	r5, [r2, r3]
 800cd8a:	2490      	movs	r4, #144	; 0x90
 800cd8c:	0224      	lsls	r4, r4, #8
 800cd8e:	432c      	orrs	r4, r5
 800cd90:	50d4      	str	r4, [r2, r3]
 800cd92:	e780      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART2_TX);		
 800cd94:	4a69      	ldr	r2, [pc, #420]	; (800cf3c <RemapAndLinkDMAtoUARTTx+0x354>)
 800cd96:	23a8      	movs	r3, #168	; 0xa8
 800cd98:	58d4      	ldr	r4, [r2, r3]
 800cd9a:	4d6a      	ldr	r5, [pc, #424]	; (800cf44 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800cd9c:	402c      	ands	r4, r5
 800cd9e:	50d4      	str	r4, [r2, r3]
 800cda0:	58d5      	ldr	r5, [r2, r3]
 800cda2:	2490      	movs	r4, #144	; 0x90
 800cda4:	0524      	lsls	r4, r4, #20
 800cda6:	432c      	orrs	r4, r5
 800cda8:	50d4      	str	r4, [r2, r3]
 800cdaa:	e774      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART2_TX);	
 800cdac:	4a61      	ldr	r2, [pc, #388]	; (800cf34 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800cdae:	23a8      	movs	r3, #168	; 0xa8
 800cdb0:	58d4      	ldr	r4, [r2, r3]
 800cdb2:	250f      	movs	r5, #15
 800cdb4:	43ac      	bics	r4, r5
 800cdb6:	50d4      	str	r4, [r2, r3]
 800cdb8:	58d4      	ldr	r4, [r2, r3]
 800cdba:	3d06      	subs	r5, #6
 800cdbc:	432c      	orrs	r4, r5
 800cdbe:	50d4      	str	r4, [r2, r3]
 800cdc0:	e769      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART2_TX);	
 800cdc2:	4a5c      	ldr	r2, [pc, #368]	; (800cf34 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800cdc4:	23a8      	movs	r3, #168	; 0xa8
 800cdc6:	58d4      	ldr	r4, [r2, r3]
 800cdc8:	4d5d      	ldr	r5, [pc, #372]	; (800cf40 <RemapAndLinkDMAtoUARTTx+0x358>)
 800cdca:	402c      	ands	r4, r5
 800cdcc:	50d4      	str	r4, [r2, r3]
 800cdce:	58d5      	ldr	r5, [r2, r3]
 800cdd0:	2490      	movs	r4, #144	; 0x90
 800cdd2:	0224      	lsls	r4, r4, #8
 800cdd4:	432c      	orrs	r4, r5
 800cdd6:	50d4      	str	r4, [r2, r3]
 800cdd8:	e75d      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel2) {
 800cdda:	680b      	ldr	r3, [r1, #0]
 800cddc:	4a4f      	ldr	r2, [pc, #316]	; (800cf1c <RemapAndLinkDMAtoUARTTx+0x334>)
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d01b      	beq.n	800ce1a <RemapAndLinkDMAtoUARTTx+0x232>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel4) {
 800cde2:	4a4f      	ldr	r2, [pc, #316]	; (800cf20 <RemapAndLinkDMAtoUARTTx+0x338>)
 800cde4:	4293      	cmp	r3, r2
 800cde6:	d023      	beq.n	800ce30 <RemapAndLinkDMAtoUARTTx+0x248>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA1_Channel7) {
 800cde8:	4a4e      	ldr	r2, [pc, #312]	; (800cf24 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800cdea:	4293      	cmp	r3, r2
 800cdec:	d02c      	beq.n	800ce48 <RemapAndLinkDMAtoUARTTx+0x260>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel1) {
 800cdee:	4a4e      	ldr	r2, [pc, #312]	; (800cf28 <RemapAndLinkDMAtoUARTTx+0x340>)
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	d035      	beq.n	800ce60 <RemapAndLinkDMAtoUARTTx+0x278>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel4) {
 800cdf4:	4a4d      	ldr	r2, [pc, #308]	; (800cf2c <RemapAndLinkDMAtoUARTTx+0x344>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d03d      	beq.n	800ce76 <RemapAndLinkDMAtoUARTTx+0x28e>
	} else if (huart->Instance == USART3 && hDMA->Instance == DMA2_Channel5) {
 800cdfa:	4a4d      	ldr	r2, [pc, #308]	; (800cf30 <RemapAndLinkDMAtoUARTTx+0x348>)
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d000      	beq.n	800ce02 <RemapAndLinkDMAtoUARTTx+0x21a>
 800ce00:	e749      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART3_TX);			
 800ce02:	4a4c      	ldr	r2, [pc, #304]	; (800cf34 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800ce04:	23a8      	movs	r3, #168	; 0xa8
 800ce06:	58d4      	ldr	r4, [r2, r3]
 800ce08:	4d4b      	ldr	r5, [pc, #300]	; (800cf38 <RemapAndLinkDMAtoUARTTx+0x350>)
 800ce0a:	402c      	ands	r4, r5
 800ce0c:	50d4      	str	r4, [r2, r3]
 800ce0e:	58d5      	ldr	r5, [r2, r3]
 800ce10:	24a0      	movs	r4, #160	; 0xa0
 800ce12:	0324      	lsls	r4, r4, #12
 800ce14:	432c      	orrs	r4, r5
 800ce16:	50d4      	str	r4, [r2, r3]
 800ce18:	e73d      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART3_TX);
 800ce1a:	4a48      	ldr	r2, [pc, #288]	; (800cf3c <RemapAndLinkDMAtoUARTTx+0x354>)
 800ce1c:	23a8      	movs	r3, #168	; 0xa8
 800ce1e:	58d4      	ldr	r4, [r2, r3]
 800ce20:	25f0      	movs	r5, #240	; 0xf0
 800ce22:	43ac      	bics	r4, r5
 800ce24:	50d4      	str	r4, [r2, r3]
 800ce26:	58d4      	ldr	r4, [r2, r3]
 800ce28:	3d50      	subs	r5, #80	; 0x50
 800ce2a:	432c      	orrs	r4, r5
 800ce2c:	50d4      	str	r4, [r2, r3]
 800ce2e:	e732      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART3_TX);
 800ce30:	4a42      	ldr	r2, [pc, #264]	; (800cf3c <RemapAndLinkDMAtoUARTTx+0x354>)
 800ce32:	23a8      	movs	r3, #168	; 0xa8
 800ce34:	58d4      	ldr	r4, [r2, r3]
 800ce36:	4d42      	ldr	r5, [pc, #264]	; (800cf40 <RemapAndLinkDMAtoUARTTx+0x358>)
 800ce38:	402c      	ands	r4, r5
 800ce3a:	50d4      	str	r4, [r2, r3]
 800ce3c:	58d5      	ldr	r5, [r2, r3]
 800ce3e:	24a0      	movs	r4, #160	; 0xa0
 800ce40:	0224      	lsls	r4, r4, #8
 800ce42:	432c      	orrs	r4, r5
 800ce44:	50d4      	str	r4, [r2, r3]
 800ce46:	e726      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART3_TX);		
 800ce48:	4a3c      	ldr	r2, [pc, #240]	; (800cf3c <RemapAndLinkDMAtoUARTTx+0x354>)
 800ce4a:	23a8      	movs	r3, #168	; 0xa8
 800ce4c:	58d4      	ldr	r4, [r2, r3]
 800ce4e:	4d3d      	ldr	r5, [pc, #244]	; (800cf44 <RemapAndLinkDMAtoUARTTx+0x35c>)
 800ce50:	402c      	ands	r4, r5
 800ce52:	50d4      	str	r4, [r2, r3]
 800ce54:	58d5      	ldr	r5, [r2, r3]
 800ce56:	24a0      	movs	r4, #160	; 0xa0
 800ce58:	0524      	lsls	r4, r4, #20
 800ce5a:	432c      	orrs	r4, r5
 800ce5c:	50d4      	str	r4, [r2, r3]
 800ce5e:	e71a      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART3_TX);	
 800ce60:	4a34      	ldr	r2, [pc, #208]	; (800cf34 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800ce62:	23a8      	movs	r3, #168	; 0xa8
 800ce64:	58d4      	ldr	r4, [r2, r3]
 800ce66:	250f      	movs	r5, #15
 800ce68:	43ac      	bics	r4, r5
 800ce6a:	50d4      	str	r4, [r2, r3]
 800ce6c:	58d4      	ldr	r4, [r2, r3]
 800ce6e:	3d05      	subs	r5, #5
 800ce70:	432c      	orrs	r4, r5
 800ce72:	50d4      	str	r4, [r2, r3]
 800ce74:	e70f      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART3_TX);	
 800ce76:	4a2f      	ldr	r2, [pc, #188]	; (800cf34 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800ce78:	23a8      	movs	r3, #168	; 0xa8
 800ce7a:	58d4      	ldr	r4, [r2, r3]
 800ce7c:	4d30      	ldr	r5, [pc, #192]	; (800cf40 <RemapAndLinkDMAtoUARTTx+0x358>)
 800ce7e:	402c      	ands	r4, r5
 800ce80:	50d4      	str	r4, [r2, r3]
 800ce82:	58d5      	ldr	r5, [r2, r3]
 800ce84:	24a0      	movs	r4, #160	; 0xa0
 800ce86:	0224      	lsls	r4, r4, #8
 800ce88:	432c      	orrs	r4, r5
 800ce8a:	50d4      	str	r4, [r2, r3]
 800ce8c:	e703      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel2) {
 800ce8e:	680b      	ldr	r3, [r1, #0]
 800ce90:	4a22      	ldr	r2, [pc, #136]	; (800cf1c <RemapAndLinkDMAtoUARTTx+0x334>)
 800ce92:	4293      	cmp	r3, r2
 800ce94:	d01b      	beq.n	800cece <RemapAndLinkDMAtoUARTTx+0x2e6>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel4) {
 800ce96:	4a22      	ldr	r2, [pc, #136]	; (800cf20 <RemapAndLinkDMAtoUARTTx+0x338>)
 800ce98:	4293      	cmp	r3, r2
 800ce9a:	d023      	beq.n	800cee4 <RemapAndLinkDMAtoUARTTx+0x2fc>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA1_Channel7) {
 800ce9c:	4a21      	ldr	r2, [pc, #132]	; (800cf24 <RemapAndLinkDMAtoUARTTx+0x33c>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d052      	beq.n	800cf48 <RemapAndLinkDMAtoUARTTx+0x360>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel1) {
 800cea2:	4a21      	ldr	r2, [pc, #132]	; (800cf28 <RemapAndLinkDMAtoUARTTx+0x340>)
 800cea4:	4293      	cmp	r3, r2
 800cea6:	d05b      	beq.n	800cf60 <RemapAndLinkDMAtoUARTTx+0x378>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel4) {
 800cea8:	4a20      	ldr	r2, [pc, #128]	; (800cf2c <RemapAndLinkDMAtoUARTTx+0x344>)
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d063      	beq.n	800cf76 <RemapAndLinkDMAtoUARTTx+0x38e>
	} else if (huart->Instance == USART4 && hDMA->Instance == DMA2_Channel5) {
 800ceae:	4a20      	ldr	r2, [pc, #128]	; (800cf30 <RemapAndLinkDMAtoUARTTx+0x348>)
 800ceb0:	4293      	cmp	r3, r2
 800ceb2:	d000      	beq.n	800ceb6 <RemapAndLinkDMAtoUARTTx+0x2ce>
 800ceb4:	e6ef      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART4_TX);				
 800ceb6:	4a1f      	ldr	r2, [pc, #124]	; (800cf34 <RemapAndLinkDMAtoUARTTx+0x34c>)
 800ceb8:	23a8      	movs	r3, #168	; 0xa8
 800ceba:	58d4      	ldr	r4, [r2, r3]
 800cebc:	4d1e      	ldr	r5, [pc, #120]	; (800cf38 <RemapAndLinkDMAtoUARTTx+0x350>)
 800cebe:	402c      	ands	r4, r5
 800cec0:	50d4      	str	r4, [r2, r3]
 800cec2:	58d5      	ldr	r5, [r2, r3]
 800cec4:	24b0      	movs	r4, #176	; 0xb0
 800cec6:	0324      	lsls	r4, r4, #12
 800cec8:	432c      	orrs	r4, r5
 800ceca:	50d4      	str	r4, [r2, r3]
 800cecc:	e6e3      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART4_TX);
 800cece:	4a1b      	ldr	r2, [pc, #108]	; (800cf3c <RemapAndLinkDMAtoUARTTx+0x354>)
 800ced0:	23a8      	movs	r3, #168	; 0xa8
 800ced2:	58d4      	ldr	r4, [r2, r3]
 800ced4:	25f0      	movs	r5, #240	; 0xf0
 800ced6:	43ac      	bics	r4, r5
 800ced8:	50d4      	str	r4, [r2, r3]
 800ceda:	58d4      	ldr	r4, [r2, r3]
 800cedc:	3d40      	subs	r5, #64	; 0x40
 800cede:	432c      	orrs	r4, r5
 800cee0:	50d4      	str	r4, [r2, r3]
 800cee2:	e6d8      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART4_TX);
 800cee4:	4a15      	ldr	r2, [pc, #84]	; (800cf3c <RemapAndLinkDMAtoUARTTx+0x354>)
 800cee6:	23a8      	movs	r3, #168	; 0xa8
 800cee8:	58d4      	ldr	r4, [r2, r3]
 800ceea:	4d15      	ldr	r5, [pc, #84]	; (800cf40 <RemapAndLinkDMAtoUARTTx+0x358>)
 800ceec:	402c      	ands	r4, r5
 800ceee:	50d4      	str	r4, [r2, r3]
 800cef0:	58d5      	ldr	r5, [r2, r3]
 800cef2:	24b0      	movs	r4, #176	; 0xb0
 800cef4:	0224      	lsls	r4, r4, #8
 800cef6:	432c      	orrs	r4, r5
 800cef8:	50d4      	str	r4, [r2, r3]
 800cefa:	e6cc      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
 800cefc:	40013800 	.word	0x40013800
 800cf00:	40004400 	.word	0x40004400
 800cf04:	40004800 	.word	0x40004800
 800cf08:	40004c00 	.word	0x40004c00
 800cf0c:	40005000 	.word	0x40005000
 800cf10:	40011400 	.word	0x40011400
 800cf14:	40011800 	.word	0x40011800
 800cf18:	40011c00 	.word	0x40011c00
 800cf1c:	4002001c 	.word	0x4002001c
 800cf20:	40020044 	.word	0x40020044
 800cf24:	40020080 	.word	0x40020080
 800cf28:	40020408 	.word	0x40020408
 800cf2c:	40020444 	.word	0x40020444
 800cf30:	40020458 	.word	0x40020458
 800cf34:	40020400 	.word	0x40020400
 800cf38:	fff0ffff 	.word	0xfff0ffff
 800cf3c:	40020000 	.word	0x40020000
 800cf40:	ffff0fff 	.word	0xffff0fff
 800cf44:	f0ffffff 	.word	0xf0ffffff
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART4_TX);		
 800cf48:	4ab4      	ldr	r2, [pc, #720]	; (800d21c <RemapAndLinkDMAtoUARTTx+0x634>)
 800cf4a:	23a8      	movs	r3, #168	; 0xa8
 800cf4c:	58d4      	ldr	r4, [r2, r3]
 800cf4e:	4db4      	ldr	r5, [pc, #720]	; (800d220 <RemapAndLinkDMAtoUARTTx+0x638>)
 800cf50:	402c      	ands	r4, r5
 800cf52:	50d4      	str	r4, [r2, r3]
 800cf54:	58d5      	ldr	r5, [r2, r3]
 800cf56:	24b0      	movs	r4, #176	; 0xb0
 800cf58:	0524      	lsls	r4, r4, #20
 800cf5a:	432c      	orrs	r4, r5
 800cf5c:	50d4      	str	r4, [r2, r3]
 800cf5e:	e69a      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART4_TX);	
 800cf60:	4ab0      	ldr	r2, [pc, #704]	; (800d224 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cf62:	23a8      	movs	r3, #168	; 0xa8
 800cf64:	58d4      	ldr	r4, [r2, r3]
 800cf66:	250f      	movs	r5, #15
 800cf68:	43ac      	bics	r4, r5
 800cf6a:	50d4      	str	r4, [r2, r3]
 800cf6c:	58d4      	ldr	r4, [r2, r3]
 800cf6e:	3d04      	subs	r5, #4
 800cf70:	432c      	orrs	r4, r5
 800cf72:	50d4      	str	r4, [r2, r3]
 800cf74:	e68f      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART4_TX);	
 800cf76:	4aab      	ldr	r2, [pc, #684]	; (800d224 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cf78:	23a8      	movs	r3, #168	; 0xa8
 800cf7a:	58d4      	ldr	r4, [r2, r3]
 800cf7c:	4daa      	ldr	r5, [pc, #680]	; (800d228 <RemapAndLinkDMAtoUARTTx+0x640>)
 800cf7e:	402c      	ands	r4, r5
 800cf80:	50d4      	str	r4, [r2, r3]
 800cf82:	58d5      	ldr	r5, [r2, r3]
 800cf84:	24b0      	movs	r4, #176	; 0xb0
 800cf86:	0224      	lsls	r4, r4, #8
 800cf88:	432c      	orrs	r4, r5
 800cf8a:	50d4      	str	r4, [r2, r3]
 800cf8c:	e683      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel2) {
 800cf8e:	680b      	ldr	r3, [r1, #0]
 800cf90:	4aa6      	ldr	r2, [pc, #664]	; (800d22c <RemapAndLinkDMAtoUARTTx+0x644>)
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d01b      	beq.n	800cfce <RemapAndLinkDMAtoUARTTx+0x3e6>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel4) {
 800cf96:	4aa6      	ldr	r2, [pc, #664]	; (800d230 <RemapAndLinkDMAtoUARTTx+0x648>)
 800cf98:	4293      	cmp	r3, r2
 800cf9a:	d023      	beq.n	800cfe4 <RemapAndLinkDMAtoUARTTx+0x3fc>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA1_Channel7) {
 800cf9c:	4aa5      	ldr	r2, [pc, #660]	; (800d234 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d02c      	beq.n	800cffc <RemapAndLinkDMAtoUARTTx+0x414>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel1) {
 800cfa2:	4aa5      	ldr	r2, [pc, #660]	; (800d238 <RemapAndLinkDMAtoUARTTx+0x650>)
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d035      	beq.n	800d014 <RemapAndLinkDMAtoUARTTx+0x42c>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel4) {
 800cfa8:	4aa4      	ldr	r2, [pc, #656]	; (800d23c <RemapAndLinkDMAtoUARTTx+0x654>)
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d03d      	beq.n	800d02a <RemapAndLinkDMAtoUARTTx+0x442>
	} else if (huart->Instance == USART5 && hDMA->Instance == DMA2_Channel5) {
 800cfae:	4aa4      	ldr	r2, [pc, #656]	; (800d240 <RemapAndLinkDMAtoUARTTx+0x658>)
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	d000      	beq.n	800cfb6 <RemapAndLinkDMAtoUARTTx+0x3ce>
 800cfb4:	e66f      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART5_TX);					
 800cfb6:	4a9b      	ldr	r2, [pc, #620]	; (800d224 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800cfb8:	23a8      	movs	r3, #168	; 0xa8
 800cfba:	58d4      	ldr	r4, [r2, r3]
 800cfbc:	4da1      	ldr	r5, [pc, #644]	; (800d244 <RemapAndLinkDMAtoUARTTx+0x65c>)
 800cfbe:	402c      	ands	r4, r5
 800cfc0:	50d4      	str	r4, [r2, r3]
 800cfc2:	58d5      	ldr	r5, [r2, r3]
 800cfc4:	24c0      	movs	r4, #192	; 0xc0
 800cfc6:	0324      	lsls	r4, r4, #12
 800cfc8:	432c      	orrs	r4, r5
 800cfca:	50d4      	str	r4, [r2, r3]
 800cfcc:	e663      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART5_TX);
 800cfce:	4a93      	ldr	r2, [pc, #588]	; (800d21c <RemapAndLinkDMAtoUARTTx+0x634>)
 800cfd0:	23a8      	movs	r3, #168	; 0xa8
 800cfd2:	58d4      	ldr	r4, [r2, r3]
 800cfd4:	25f0      	movs	r5, #240	; 0xf0
 800cfd6:	43ac      	bics	r4, r5
 800cfd8:	50d4      	str	r4, [r2, r3]
 800cfda:	58d4      	ldr	r4, [r2, r3]
 800cfdc:	3d30      	subs	r5, #48	; 0x30
 800cfde:	432c      	orrs	r4, r5
 800cfe0:	50d4      	str	r4, [r2, r3]
 800cfe2:	e658      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART5_TX);
 800cfe4:	4a8d      	ldr	r2, [pc, #564]	; (800d21c <RemapAndLinkDMAtoUARTTx+0x634>)
 800cfe6:	23a8      	movs	r3, #168	; 0xa8
 800cfe8:	58d4      	ldr	r4, [r2, r3]
 800cfea:	4d8f      	ldr	r5, [pc, #572]	; (800d228 <RemapAndLinkDMAtoUARTTx+0x640>)
 800cfec:	402c      	ands	r4, r5
 800cfee:	50d4      	str	r4, [r2, r3]
 800cff0:	58d5      	ldr	r5, [r2, r3]
 800cff2:	24c0      	movs	r4, #192	; 0xc0
 800cff4:	0224      	lsls	r4, r4, #8
 800cff6:	432c      	orrs	r4, r5
 800cff8:	50d4      	str	r4, [r2, r3]
 800cffa:	e64c      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART5_TX);		
 800cffc:	4a87      	ldr	r2, [pc, #540]	; (800d21c <RemapAndLinkDMAtoUARTTx+0x634>)
 800cffe:	23a8      	movs	r3, #168	; 0xa8
 800d000:	58d4      	ldr	r4, [r2, r3]
 800d002:	4d87      	ldr	r5, [pc, #540]	; (800d220 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d004:	402c      	ands	r4, r5
 800d006:	50d4      	str	r4, [r2, r3]
 800d008:	58d5      	ldr	r5, [r2, r3]
 800d00a:	24c0      	movs	r4, #192	; 0xc0
 800d00c:	0524      	lsls	r4, r4, #20
 800d00e:	432c      	orrs	r4, r5
 800d010:	50d4      	str	r4, [r2, r3]
 800d012:	e640      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART5_TX);	
 800d014:	4a83      	ldr	r2, [pc, #524]	; (800d224 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d016:	23a8      	movs	r3, #168	; 0xa8
 800d018:	58d4      	ldr	r4, [r2, r3]
 800d01a:	250f      	movs	r5, #15
 800d01c:	43ac      	bics	r4, r5
 800d01e:	50d4      	str	r4, [r2, r3]
 800d020:	58d4      	ldr	r4, [r2, r3]
 800d022:	3d03      	subs	r5, #3
 800d024:	432c      	orrs	r4, r5
 800d026:	50d4      	str	r4, [r2, r3]
 800d028:	e635      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART5_TX);	
 800d02a:	4a7e      	ldr	r2, [pc, #504]	; (800d224 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d02c:	23a8      	movs	r3, #168	; 0xa8
 800d02e:	58d4      	ldr	r4, [r2, r3]
 800d030:	4d7d      	ldr	r5, [pc, #500]	; (800d228 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d032:	402c      	ands	r4, r5
 800d034:	50d4      	str	r4, [r2, r3]
 800d036:	58d5      	ldr	r5, [r2, r3]
 800d038:	24c0      	movs	r4, #192	; 0xc0
 800d03a:	0224      	lsls	r4, r4, #8
 800d03c:	432c      	orrs	r4, r5
 800d03e:	50d4      	str	r4, [r2, r3]
 800d040:	e629      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel2) {
 800d042:	680b      	ldr	r3, [r1, #0]
 800d044:	4a79      	ldr	r2, [pc, #484]	; (800d22c <RemapAndLinkDMAtoUARTTx+0x644>)
 800d046:	4293      	cmp	r3, r2
 800d048:	d01b      	beq.n	800d082 <RemapAndLinkDMAtoUARTTx+0x49a>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel4) {
 800d04a:	4a79      	ldr	r2, [pc, #484]	; (800d230 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d04c:	4293      	cmp	r3, r2
 800d04e:	d023      	beq.n	800d098 <RemapAndLinkDMAtoUARTTx+0x4b0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA1_Channel7) {
 800d050:	4a78      	ldr	r2, [pc, #480]	; (800d234 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d052:	4293      	cmp	r3, r2
 800d054:	d02c      	beq.n	800d0b0 <RemapAndLinkDMAtoUARTTx+0x4c8>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel1) {
 800d056:	4a78      	ldr	r2, [pc, #480]	; (800d238 <RemapAndLinkDMAtoUARTTx+0x650>)
 800d058:	4293      	cmp	r3, r2
 800d05a:	d035      	beq.n	800d0c8 <RemapAndLinkDMAtoUARTTx+0x4e0>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel4) {
 800d05c:	4a77      	ldr	r2, [pc, #476]	; (800d23c <RemapAndLinkDMAtoUARTTx+0x654>)
 800d05e:	4293      	cmp	r3, r2
 800d060:	d03d      	beq.n	800d0de <RemapAndLinkDMAtoUARTTx+0x4f6>
	} else if (huart->Instance == USART6 && hDMA->Instance == DMA2_Channel5) {
 800d062:	4a77      	ldr	r2, [pc, #476]	; (800d240 <RemapAndLinkDMAtoUARTTx+0x658>)
 800d064:	4293      	cmp	r3, r2
 800d066:	d000      	beq.n	800d06a <RemapAndLinkDMAtoUARTTx+0x482>
 800d068:	e615      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART6_TX);					
 800d06a:	4a6e      	ldr	r2, [pc, #440]	; (800d224 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d06c:	23a8      	movs	r3, #168	; 0xa8
 800d06e:	58d4      	ldr	r4, [r2, r3]
 800d070:	4d74      	ldr	r5, [pc, #464]	; (800d244 <RemapAndLinkDMAtoUARTTx+0x65c>)
 800d072:	402c      	ands	r4, r5
 800d074:	50d4      	str	r4, [r2, r3]
 800d076:	58d5      	ldr	r5, [r2, r3]
 800d078:	24d0      	movs	r4, #208	; 0xd0
 800d07a:	0324      	lsls	r4, r4, #12
 800d07c:	432c      	orrs	r4, r5
 800d07e:	50d4      	str	r4, [r2, r3]
 800d080:	e609      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART6_TX);
 800d082:	4a66      	ldr	r2, [pc, #408]	; (800d21c <RemapAndLinkDMAtoUARTTx+0x634>)
 800d084:	23a8      	movs	r3, #168	; 0xa8
 800d086:	58d4      	ldr	r4, [r2, r3]
 800d088:	25f0      	movs	r5, #240	; 0xf0
 800d08a:	43ac      	bics	r4, r5
 800d08c:	50d4      	str	r4, [r2, r3]
 800d08e:	58d4      	ldr	r4, [r2, r3]
 800d090:	3d20      	subs	r5, #32
 800d092:	432c      	orrs	r4, r5
 800d094:	50d4      	str	r4, [r2, r3]
 800d096:	e5fe      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART6_TX);
 800d098:	4a60      	ldr	r2, [pc, #384]	; (800d21c <RemapAndLinkDMAtoUARTTx+0x634>)
 800d09a:	23a8      	movs	r3, #168	; 0xa8
 800d09c:	58d4      	ldr	r4, [r2, r3]
 800d09e:	4d62      	ldr	r5, [pc, #392]	; (800d228 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d0a0:	402c      	ands	r4, r5
 800d0a2:	50d4      	str	r4, [r2, r3]
 800d0a4:	58d5      	ldr	r5, [r2, r3]
 800d0a6:	24d0      	movs	r4, #208	; 0xd0
 800d0a8:	0224      	lsls	r4, r4, #8
 800d0aa:	432c      	orrs	r4, r5
 800d0ac:	50d4      	str	r4, [r2, r3]
 800d0ae:	e5f2      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART6_TX);		
 800d0b0:	4a5a      	ldr	r2, [pc, #360]	; (800d21c <RemapAndLinkDMAtoUARTTx+0x634>)
 800d0b2:	23a8      	movs	r3, #168	; 0xa8
 800d0b4:	58d4      	ldr	r4, [r2, r3]
 800d0b6:	4d5a      	ldr	r5, [pc, #360]	; (800d220 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d0b8:	402c      	ands	r4, r5
 800d0ba:	50d4      	str	r4, [r2, r3]
 800d0bc:	58d5      	ldr	r5, [r2, r3]
 800d0be:	24d0      	movs	r4, #208	; 0xd0
 800d0c0:	0524      	lsls	r4, r4, #20
 800d0c2:	432c      	orrs	r4, r5
 800d0c4:	50d4      	str	r4, [r2, r3]
 800d0c6:	e5e6      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART6_TX);	
 800d0c8:	4a56      	ldr	r2, [pc, #344]	; (800d224 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d0ca:	23a8      	movs	r3, #168	; 0xa8
 800d0cc:	58d4      	ldr	r4, [r2, r3]
 800d0ce:	250f      	movs	r5, #15
 800d0d0:	43ac      	bics	r4, r5
 800d0d2:	50d4      	str	r4, [r2, r3]
 800d0d4:	58d4      	ldr	r4, [r2, r3]
 800d0d6:	3d02      	subs	r5, #2
 800d0d8:	432c      	orrs	r4, r5
 800d0da:	50d4      	str	r4, [r2, r3]
 800d0dc:	e5db      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART6_TX);	
 800d0de:	4a51      	ldr	r2, [pc, #324]	; (800d224 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d0e0:	23a8      	movs	r3, #168	; 0xa8
 800d0e2:	58d4      	ldr	r4, [r2, r3]
 800d0e4:	4d50      	ldr	r5, [pc, #320]	; (800d228 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d0e6:	402c      	ands	r4, r5
 800d0e8:	50d4      	str	r4, [r2, r3]
 800d0ea:	58d5      	ldr	r5, [r2, r3]
 800d0ec:	24d0      	movs	r4, #208	; 0xd0
 800d0ee:	0224      	lsls	r4, r4, #8
 800d0f0:	432c      	orrs	r4, r5
 800d0f2:	50d4      	str	r4, [r2, r3]
 800d0f4:	e5cf      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel2) {
 800d0f6:	680b      	ldr	r3, [r1, #0]
 800d0f8:	4a4c      	ldr	r2, [pc, #304]	; (800d22c <RemapAndLinkDMAtoUARTTx+0x644>)
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d01b      	beq.n	800d136 <RemapAndLinkDMAtoUARTTx+0x54e>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel4) {
 800d0fe:	4a4c      	ldr	r2, [pc, #304]	; (800d230 <RemapAndLinkDMAtoUARTTx+0x648>)
 800d100:	4293      	cmp	r3, r2
 800d102:	d023      	beq.n	800d14c <RemapAndLinkDMAtoUARTTx+0x564>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA1_Channel7) {
 800d104:	4a4b      	ldr	r2, [pc, #300]	; (800d234 <RemapAndLinkDMAtoUARTTx+0x64c>)
 800d106:	4293      	cmp	r3, r2
 800d108:	d02c      	beq.n	800d164 <RemapAndLinkDMAtoUARTTx+0x57c>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel1) {
 800d10a:	4a4b      	ldr	r2, [pc, #300]	; (800d238 <RemapAndLinkDMAtoUARTTx+0x650>)
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d035      	beq.n	800d17c <RemapAndLinkDMAtoUARTTx+0x594>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel4) {
 800d110:	4a4a      	ldr	r2, [pc, #296]	; (800d23c <RemapAndLinkDMAtoUARTTx+0x654>)
 800d112:	4293      	cmp	r3, r2
 800d114:	d03d      	beq.n	800d192 <RemapAndLinkDMAtoUARTTx+0x5aa>
	} else if (huart->Instance == USART7 && hDMA->Instance == DMA2_Channel5) {
 800d116:	4a4a      	ldr	r2, [pc, #296]	; (800d240 <RemapAndLinkDMAtoUARTTx+0x658>)
 800d118:	4293      	cmp	r3, r2
 800d11a:	d000      	beq.n	800d11e <RemapAndLinkDMAtoUARTTx+0x536>
 800d11c:	e5bb      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH5_USART7_TX);				
 800d11e:	4a41      	ldr	r2, [pc, #260]	; (800d224 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d120:	23a8      	movs	r3, #168	; 0xa8
 800d122:	58d4      	ldr	r4, [r2, r3]
 800d124:	4d47      	ldr	r5, [pc, #284]	; (800d244 <RemapAndLinkDMAtoUARTTx+0x65c>)
 800d126:	402c      	ands	r4, r5
 800d128:	50d4      	str	r4, [r2, r3]
 800d12a:	58d5      	ldr	r5, [r2, r3]
 800d12c:	24e0      	movs	r4, #224	; 0xe0
 800d12e:	0324      	lsls	r4, r4, #12
 800d130:	432c      	orrs	r4, r5
 800d132:	50d4      	str	r4, [r2, r3]
 800d134:	e5af      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART7_TX);
 800d136:	4a39      	ldr	r2, [pc, #228]	; (800d21c <RemapAndLinkDMAtoUARTTx+0x634>)
 800d138:	23a8      	movs	r3, #168	; 0xa8
 800d13a:	58d4      	ldr	r4, [r2, r3]
 800d13c:	25f0      	movs	r5, #240	; 0xf0
 800d13e:	43ac      	bics	r4, r5
 800d140:	50d4      	str	r4, [r2, r3]
 800d142:	58d4      	ldr	r4, [r2, r3]
 800d144:	3d10      	subs	r5, #16
 800d146:	432c      	orrs	r4, r5
 800d148:	50d4      	str	r4, [r2, r3]
 800d14a:	e5a4      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART7_TX);
 800d14c:	4a33      	ldr	r2, [pc, #204]	; (800d21c <RemapAndLinkDMAtoUARTTx+0x634>)
 800d14e:	23a8      	movs	r3, #168	; 0xa8
 800d150:	58d4      	ldr	r4, [r2, r3]
 800d152:	4d35      	ldr	r5, [pc, #212]	; (800d228 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d154:	402c      	ands	r4, r5
 800d156:	50d4      	str	r4, [r2, r3]
 800d158:	58d5      	ldr	r5, [r2, r3]
 800d15a:	24e0      	movs	r4, #224	; 0xe0
 800d15c:	0224      	lsls	r4, r4, #8
 800d15e:	432c      	orrs	r4, r5
 800d160:	50d4      	str	r4, [r2, r3]
 800d162:	e598      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART7_TX);		
 800d164:	4a2d      	ldr	r2, [pc, #180]	; (800d21c <RemapAndLinkDMAtoUARTTx+0x634>)
 800d166:	23a8      	movs	r3, #168	; 0xa8
 800d168:	58d4      	ldr	r4, [r2, r3]
 800d16a:	4d2d      	ldr	r5, [pc, #180]	; (800d220 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d16c:	402c      	ands	r4, r5
 800d16e:	50d4      	str	r4, [r2, r3]
 800d170:	58d5      	ldr	r5, [r2, r3]
 800d172:	24e0      	movs	r4, #224	; 0xe0
 800d174:	0524      	lsls	r4, r4, #20
 800d176:	432c      	orrs	r4, r5
 800d178:	50d4      	str	r4, [r2, r3]
 800d17a:	e58c      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART7_TX);	
 800d17c:	4a29      	ldr	r2, [pc, #164]	; (800d224 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d17e:	23a8      	movs	r3, #168	; 0xa8
 800d180:	58d4      	ldr	r4, [r2, r3]
 800d182:	250f      	movs	r5, #15
 800d184:	43ac      	bics	r4, r5
 800d186:	50d4      	str	r4, [r2, r3]
 800d188:	58d4      	ldr	r4, [r2, r3]
 800d18a:	3d01      	subs	r5, #1
 800d18c:	432c      	orrs	r4, r5
 800d18e:	50d4      	str	r4, [r2, r3]
 800d190:	e581      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART7_TX);	
 800d192:	4a24      	ldr	r2, [pc, #144]	; (800d224 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d194:	23a8      	movs	r3, #168	; 0xa8
 800d196:	58d4      	ldr	r4, [r2, r3]
 800d198:	4d23      	ldr	r5, [pc, #140]	; (800d228 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d19a:	402c      	ands	r4, r5
 800d19c:	50d4      	str	r4, [r2, r3]
 800d19e:	58d5      	ldr	r5, [r2, r3]
 800d1a0:	24e0      	movs	r4, #224	; 0xe0
 800d1a2:	0224      	lsls	r4, r4, #8
 800d1a4:	432c      	orrs	r4, r5
 800d1a6:	50d4      	str	r4, [r2, r3]
 800d1a8:	e575      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH2_USART8_TX);
 800d1aa:	4a1c      	ldr	r2, [pc, #112]	; (800d21c <RemapAndLinkDMAtoUARTTx+0x634>)
 800d1ac:	23a8      	movs	r3, #168	; 0xa8
 800d1ae:	58d5      	ldr	r5, [r2, r3]
 800d1b0:	26f0      	movs	r6, #240	; 0xf0
 800d1b2:	43b5      	bics	r5, r6
 800d1b4:	50d5      	str	r5, [r2, r3]
 800d1b6:	58d4      	ldr	r4, [r2, r3]
 800d1b8:	4334      	orrs	r4, r6
 800d1ba:	50d4      	str	r4, [r2, r3]
 800d1bc:	e56b      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH4_USART8_TX);
 800d1be:	4a17      	ldr	r2, [pc, #92]	; (800d21c <RemapAndLinkDMAtoUARTTx+0x634>)
 800d1c0:	23a8      	movs	r3, #168	; 0xa8
 800d1c2:	58d4      	ldr	r4, [r2, r3]
 800d1c4:	4d18      	ldr	r5, [pc, #96]	; (800d228 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d1c6:	402c      	ands	r4, r5
 800d1c8:	50d4      	str	r4, [r2, r3]
 800d1ca:	58d5      	ldr	r5, [r2, r3]
 800d1cc:	24f0      	movs	r4, #240	; 0xf0
 800d1ce:	0224      	lsls	r4, r4, #8
 800d1d0:	432c      	orrs	r4, r5
 800d1d2:	50d4      	str	r4, [r2, r3]
 800d1d4:	e55f      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA1_REMAP(HAL_DMA1_CH7_USART8_TX);		
 800d1d6:	4a11      	ldr	r2, [pc, #68]	; (800d21c <RemapAndLinkDMAtoUARTTx+0x634>)
 800d1d8:	23a8      	movs	r3, #168	; 0xa8
 800d1da:	58d4      	ldr	r4, [r2, r3]
 800d1dc:	4d10      	ldr	r5, [pc, #64]	; (800d220 <RemapAndLinkDMAtoUARTTx+0x638>)
 800d1de:	402c      	ands	r4, r5
 800d1e0:	50d4      	str	r4, [r2, r3]
 800d1e2:	58d5      	ldr	r5, [r2, r3]
 800d1e4:	24f0      	movs	r4, #240	; 0xf0
 800d1e6:	0524      	lsls	r4, r4, #20
 800d1e8:	432c      	orrs	r4, r5
 800d1ea:	50d4      	str	r4, [r2, r3]
 800d1ec:	e553      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH1_USART8_TX);	
 800d1ee:	4a0d      	ldr	r2, [pc, #52]	; (800d224 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d1f0:	23a8      	movs	r3, #168	; 0xa8
 800d1f2:	58d5      	ldr	r5, [r2, r3]
 800d1f4:	260f      	movs	r6, #15
 800d1f6:	43b5      	bics	r5, r6
 800d1f8:	50d5      	str	r5, [r2, r3]
 800d1fa:	58d4      	ldr	r4, [r2, r3]
 800d1fc:	4334      	orrs	r4, r6
 800d1fe:	50d4      	str	r4, [r2, r3]
 800d200:	e549      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
		__HAL_DMA2_REMAP(HAL_DMA2_CH4_USART8_TX);	
 800d202:	4a08      	ldr	r2, [pc, #32]	; (800d224 <RemapAndLinkDMAtoUARTTx+0x63c>)
 800d204:	23a8      	movs	r3, #168	; 0xa8
 800d206:	58d4      	ldr	r4, [r2, r3]
 800d208:	4d07      	ldr	r5, [pc, #28]	; (800d228 <RemapAndLinkDMAtoUARTTx+0x640>)
 800d20a:	402c      	ands	r4, r5
 800d20c:	50d4      	str	r4, [r2, r3]
 800d20e:	58d5      	ldr	r5, [r2, r3]
 800d210:	24f0      	movs	r4, #240	; 0xf0
 800d212:	0224      	lsls	r4, r4, #8
 800d214:	432c      	orrs	r4, r5
 800d216:	50d4      	str	r4, [r2, r3]
 800d218:	e53d      	b.n	800cc96 <RemapAndLinkDMAtoUARTTx+0xae>
 800d21a:	46c0      	nop			; (mov r8, r8)
 800d21c:	40020000 	.word	0x40020000
 800d220:	f0ffffff 	.word	0xf0ffffff
 800d224:	40020400 	.word	0x40020400
 800d228:	ffff0fff 	.word	0xffff0fff
 800d22c:	4002001c 	.word	0x4002001c
 800d230:	40020044 	.word	0x40020044
 800d234:	40020080 	.word	0x40020080
 800d238:	40020408 	.word	0x40020408
 800d23c:	40020444 	.word	0x40020444
 800d240:	40020458 	.word	0x40020458
 800d244:	fff0ffff 	.word	0xfff0ffff

0800d248 <DMA_MSG_TX_Setup>:
{	
 800d248:	b510      	push	{r4, lr}
	if (msgTxDMA[0].Parent == NULL)
 800d24a:	4b0d      	ldr	r3, [pc, #52]	; (800d280 <DMA_MSG_TX_Setup+0x38>)
 800d24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d012      	beq.n	800d278 <DMA_MSG_TX_Setup+0x30>
	else if (msgTxDMA[1].Parent == NULL)
 800d252:	4b0b      	ldr	r3, [pc, #44]	; (800d280 <DMA_MSG_TX_Setup+0x38>)
 800d254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d256:	2b00      	cmp	r3, #0
 800d258:	d010      	beq.n	800d27c <DMA_MSG_TX_Setup+0x34>
	else if (msgTxDMA[2].Parent == NULL)
 800d25a:	4a09      	ldr	r2, [pc, #36]	; (800d280 <DMA_MSG_TX_Setup+0x38>)
 800d25c:	2394      	movs	r3, #148	; 0x94
 800d25e:	58d3      	ldr	r3, [r2, r3]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d007      	beq.n	800d274 <DMA_MSG_TX_Setup+0x2c>
	RemapAndLinkDMAtoUARTTx(huart, hDMA);
 800d264:	0021      	movs	r1, r4
 800d266:	f7ff fcbf 	bl	800cbe8 <RemapAndLinkDMAtoUARTTx>
	SetupDMAInterrupts(hDMA, MSG_DMA_INT_PRIORITY);
 800d26a:	2100      	movs	r1, #0
 800d26c:	0020      	movs	r0, r4
 800d26e:	f7ff f847 	bl	800c300 <SetupDMAInterrupts>
}
 800d272:	bd10      	pop	{r4, pc}
		hDMA = &msgTxDMA[2];  
 800d274:	4c03      	ldr	r4, [pc, #12]	; (800d284 <DMA_MSG_TX_Setup+0x3c>)
 800d276:	e7f5      	b.n	800d264 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[0];
 800d278:	4c01      	ldr	r4, [pc, #4]	; (800d280 <DMA_MSG_TX_Setup+0x38>)
 800d27a:	e7f3      	b.n	800d264 <DMA_MSG_TX_Setup+0x1c>
		hDMA = &msgTxDMA[1];
 800d27c:	4c02      	ldr	r4, [pc, #8]	; (800d288 <DMA_MSG_TX_Setup+0x40>)
 800d27e:	e7f1      	b.n	800d264 <DMA_MSG_TX_Setup+0x1c>
 800d280:	2000160c 	.word	0x2000160c
 800d284:	2000167c 	.word	0x2000167c
 800d288:	20001644 	.word	0x20001644

0800d28c <CRC_Init>:
/*-----------------------------------------------------------*/
/* Hardware CRC ---------------------------------------------*/
/*-----------------------------------------------------------*/

void CRC_Init(void)
{
 800d28c:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 800d28e:	4807      	ldr	r0, [pc, #28]	; (800d2ac <CRC_Init+0x20>)
 800d290:	4b07      	ldr	r3, [pc, #28]	; (800d2b0 <CRC_Init+0x24>)
 800d292:	6003      	str	r3, [r0, #0]
	hcrc.Init.CRCLength = CRC_POLYLENGTH_8B;		// Do not change this since it is used for message CRC8
 800d294:	2310      	movs	r3, #16
 800d296:	60c3      	str	r3, [r0, #12]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;    
 800d298:	2300      	movs	r3, #0
 800d29a:	7143      	strb	r3, [r0, #5]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800d29c:	7103      	strb	r3, [r0, #4]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;    
 800d29e:	6143      	str	r3, [r0, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;    
 800d2a0:	6183      	str	r3, [r0, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_WORDS;
 800d2a2:	3303      	adds	r3, #3
 800d2a4:	6203      	str	r3, [r0, #32]
	HAL_CRC_Init(&hcrc);
 800d2a6:	f003 fd8f 	bl	8010dc8 <HAL_CRC_Init>
}
 800d2aa:	bd10      	pop	{r4, pc}
 800d2ac:	20006a40 	.word	0x20006a40
 800d2b0:	40023000 	.word	0x40023000

0800d2b4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800d2b4:	b082      	sub	sp, #8
	/* Enable peripheral clock */
	__HAL_RCC_CRC_CLK_ENABLE();
 800d2b6:	4a05      	ldr	r2, [pc, #20]	; (800d2cc <HAL_CRC_MspInit+0x18>)
 800d2b8:	6951      	ldr	r1, [r2, #20]
 800d2ba:	2340      	movs	r3, #64	; 0x40
 800d2bc:	4319      	orrs	r1, r3
 800d2be:	6151      	str	r1, [r2, #20]
 800d2c0:	6952      	ldr	r2, [r2, #20]
 800d2c2:	4013      	ands	r3, r2
 800d2c4:	9301      	str	r3, [sp, #4]
 800d2c6:	9b01      	ldr	r3, [sp, #4]
}
 800d2c8:	b002      	add	sp, #8
 800d2ca:	4770      	bx	lr
 800d2cc:	40021000 	.word	0x40021000

0800d2d0 <CalculateCRC8>:
/*-----------------------------------------------------------*/
/*
 * calculate CRC8 byte for a data buffer
 */
uint8_t  CalculateCRC8(uint32_t pBuffer[], uint16_t size)
{
 800d2d0:	b570      	push	{r4, r5, r6, lr}
 800d2d2:	0004      	movs	r4, r0
 800d2d4:	000d      	movs	r5, r1
	uint8_t pTemp;
	//uint32_t crcBuffer[size]=*pData;
	/* check if the passed variables are null */
	if (NULL!=pBuffer && 0!=size)
 800d2d6:	2800      	cmp	r0, #0
 800d2d8:	d015      	beq.n	800d306 <CalculateCRC8+0x36>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
		}
		return pTemp;
	}
	else
	return 0;
 800d2da:	2000      	movs	r0, #0
	if (NULL!=pBuffer && 0!=size)
 800d2dc:	2900      	cmp	r1, #0
 800d2de:	d100      	bne.n	800d2e2 <CalculateCRC8+0x12>
}
 800d2e0:	bd70      	pop	{r4, r5, r6, pc}
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800d2e2:	088e      	lsrs	r6, r1, #2
 800d2e4:	0032      	movs	r2, r6
 800d2e6:	0021      	movs	r1, r4
 800d2e8:	4808      	ldr	r0, [pc, #32]	; (800d30c <CalculateCRC8+0x3c>)
 800d2ea:	f003 fdc9 	bl	8010e80 <HAL_CRC_Calculate>
		if ((size%4)!=0)
 800d2ee:	07ab      	lsls	r3, r5, #30
 800d2f0:	d101      	bne.n	800d2f6 <CalculateCRC8+0x26>
		pTemp=HAL_CRC_Calculate(&hcrc, pBuffer, size/4);
 800d2f2:	b2c0      	uxtb	r0, r0
 800d2f4:	e7f4      	b.n	800d2e0 <CalculateCRC8+0x10>
			pTemp=HAL_CRC_Accumulate(&hcrc, &pBuffer[(size/4)*4], 1);
 800d2f6:	0131      	lsls	r1, r6, #4
 800d2f8:	1861      	adds	r1, r4, r1
 800d2fa:	2201      	movs	r2, #1
 800d2fc:	4803      	ldr	r0, [pc, #12]	; (800d30c <CalculateCRC8+0x3c>)
 800d2fe:	f003 fd94 	bl	8010e2a <HAL_CRC_Accumulate>
 800d302:	b2c0      	uxtb	r0, r0
 800d304:	e7ec      	b.n	800d2e0 <CalculateCRC8+0x10>
	return 0;
 800d306:	2000      	movs	r0, #0
 800d308:	e7ea      	b.n	800d2e0 <CalculateCRC8+0x10>
 800d30a:	46c0      	nop			; (mov r8, r8)
 800d30c:	20006a40 	.word	0x20006a40

0800d310 <IND_LED_Init>:
	MEMS_GPIO_Init();
}

//-- Configure indicator LED
void IND_LED_Init(void)
{
 800d310:	b500      	push	{lr}
 800d312:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct;
	
	GPIO_InitStruct.Pin = _IND_LED_PIN;
 800d314:	2380      	movs	r3, #128	; 0x80
 800d316:	011b      	lsls	r3, r3, #4
 800d318:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d31a:	2301      	movs	r3, #1
 800d31c:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d31e:	2300      	movs	r3, #0
 800d320:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d322:	3303      	adds	r3, #3
 800d324:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(_IND_LED_PORT, &GPIO_InitStruct);
 800d326:	2090      	movs	r0, #144	; 0x90
 800d328:	a901      	add	r1, sp, #4
 800d32a:	05c0      	lsls	r0, r0, #23
 800d32c:	f004 fc4c 	bl	8011bc8 <HAL_GPIO_Init>
}
 800d330:	b007      	add	sp, #28
 800d332:	bd00      	pop	{pc}

0800d334 <MEMS_GPIO_Init>:

void MEMS_GPIO_Init(void)
{
 800d334:	b510      	push	{r4, lr}
 800d336:	b086      	sub	sp, #24
  /**I2C2 GPIO Configuration
  PB13     ------> I2C2_SCL
  PB14     ------> I2C2_SDA
  */
	
  GPIO_InitStruct.Pin = _MEMS_I2C2_SCL_PIN;
 800d338:	2380      	movs	r3, #128	; 0x80
 800d33a:	019b      	lsls	r3, r3, #6
 800d33c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d33e:	2312      	movs	r3, #18
 800d340:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d342:	3b11      	subs	r3, #17
 800d344:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800d346:	3302      	adds	r3, #2
 800d348:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 800d34a:	3302      	adds	r3, #2
 800d34c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(_MEMS_I2C2_SCL_PORT, &GPIO_InitStruct);
 800d34e:	4c10      	ldr	r4, [pc, #64]	; (800d390 <MEMS_GPIO_Init+0x5c>)
 800d350:	a901      	add	r1, sp, #4
 800d352:	0020      	movs	r0, r4
 800d354:	f004 fc38 	bl	8011bc8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = _MEMS_I2C2_SDA_PIN;
 800d358:	2380      	movs	r3, #128	; 0x80
 800d35a:	01db      	lsls	r3, r3, #7
 800d35c:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(_MEMS_I2C2_SDA_PORT, &GPIO_InitStruct);
 800d35e:	a901      	add	r1, sp, #4
 800d360:	0020      	movs	r0, r4
 800d362:	f004 fc31 	bl	8011bc8 <HAL_GPIO_Init>

  /* Peripheral clock enable */
  __HAL_RCC_I2C2_CLK_ENABLE();
 800d366:	4a0b      	ldr	r2, [pc, #44]	; (800d394 <MEMS_GPIO_Init+0x60>)
 800d368:	69d1      	ldr	r1, [r2, #28]
 800d36a:	2080      	movs	r0, #128	; 0x80
 800d36c:	03c0      	lsls	r0, r0, #15
 800d36e:	4301      	orrs	r1, r0
 800d370:	61d1      	str	r1, [r2, #28]
 800d372:	69d3      	ldr	r3, [r2, #28]
 800d374:	4003      	ands	r3, r0
 800d376:	9300      	str	r3, [sp, #0]
 800d378:	9b00      	ldr	r3, [sp, #0]
	
  /* I2C2 interrupt Init */
  HAL_NVIC_SetPriority(I2C2_IRQn, 1, 0);
 800d37a:	2200      	movs	r2, #0
 800d37c:	2101      	movs	r1, #1
 800d37e:	2018      	movs	r0, #24
 800d380:	f003 fc4c 	bl	8010c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C2_IRQn);
 800d384:	2018      	movs	r0, #24
 800d386:	f003 fc7b 	bl	8010c80 <HAL_NVIC_EnableIRQ>
}
 800d38a:	b006      	add	sp, #24
 800d38c:	bd10      	pop	{r4, pc}
 800d38e:	46c0      	nop			; (mov r8, r8)
 800d390:	48000400 	.word	0x48000400
 800d394:	40021000 	.word	0x40021000

0800d398 <GPIO_Init>:
{
 800d398:	b500      	push	{lr}
 800d39a:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800d39c:	4b19      	ldr	r3, [pc, #100]	; (800d404 <GPIO_Init+0x6c>)
 800d39e:	6959      	ldr	r1, [r3, #20]
 800d3a0:	2080      	movs	r0, #128	; 0x80
 800d3a2:	0300      	lsls	r0, r0, #12
 800d3a4:	4301      	orrs	r1, r0
 800d3a6:	6159      	str	r1, [r3, #20]
 800d3a8:	695a      	ldr	r2, [r3, #20]
 800d3aa:	4002      	ands	r2, r0
 800d3ac:	9201      	str	r2, [sp, #4]
 800d3ae:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800d3b0:	6959      	ldr	r1, [r3, #20]
 800d3b2:	2080      	movs	r0, #128	; 0x80
 800d3b4:	0280      	lsls	r0, r0, #10
 800d3b6:	4301      	orrs	r1, r0
 800d3b8:	6159      	str	r1, [r3, #20]
 800d3ba:	695a      	ldr	r2, [r3, #20]
 800d3bc:	4002      	ands	r2, r0
 800d3be:	9202      	str	r2, [sp, #8]
 800d3c0:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800d3c2:	6959      	ldr	r1, [r3, #20]
 800d3c4:	2080      	movs	r0, #128	; 0x80
 800d3c6:	0340      	lsls	r0, r0, #13
 800d3c8:	4301      	orrs	r1, r0
 800d3ca:	6159      	str	r1, [r3, #20]
 800d3cc:	695a      	ldr	r2, [r3, #20]
 800d3ce:	4002      	ands	r2, r0
 800d3d0:	9203      	str	r2, [sp, #12]
 800d3d2:	9a03      	ldr	r2, [sp, #12]
	__GPIOB_CLK_ENABLE();
 800d3d4:	6959      	ldr	r1, [r3, #20]
 800d3d6:	2080      	movs	r0, #128	; 0x80
 800d3d8:	02c0      	lsls	r0, r0, #11
 800d3da:	4301      	orrs	r1, r0
 800d3dc:	6159      	str	r1, [r3, #20]
 800d3de:	695a      	ldr	r2, [r3, #20]
 800d3e0:	4002      	ands	r2, r0
 800d3e2:	9204      	str	r2, [sp, #16]
 800d3e4:	9a04      	ldr	r2, [sp, #16]
	__GPIOF_CLK_ENABLE();		// for HSE and Boot0
 800d3e6:	695a      	ldr	r2, [r3, #20]
 800d3e8:	2180      	movs	r1, #128	; 0x80
 800d3ea:	03c9      	lsls	r1, r1, #15
 800d3ec:	430a      	orrs	r2, r1
 800d3ee:	615a      	str	r2, [r3, #20]
 800d3f0:	695b      	ldr	r3, [r3, #20]
 800d3f2:	400b      	ands	r3, r1
 800d3f4:	9305      	str	r3, [sp, #20]
 800d3f6:	9b05      	ldr	r3, [sp, #20]
	IND_LED_Init();
 800d3f8:	f7ff ff8a 	bl	800d310 <IND_LED_Init>
	MEMS_GPIO_Init();
 800d3fc:	f7ff ff9a 	bl	800d334 <MEMS_GPIO_Init>
}
 800d400:	b007      	add	sp, #28
 800d402:	bd00      	pop	{pc}
 800d404:	40021000 	.word	0x40021000

0800d408 <GetPortGPIOs>:
/* --- Get GPIO pins and ports of this array port
*/
BOS_Status GetPortGPIOs(uint8_t port, uint32_t *TX_Port, uint16_t *TX_Pin, uint32_t *RX_Port, uint16_t *RX_Pin)
{
 800d408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d40a:	000e      	movs	r6, r1
 800d40c:	0015      	movs	r5, r2
 800d40e:	001f      	movs	r7, r3
	BOS_Status result = BOS_OK;
	
	/* Get port UART */
	UART_HandleTypeDef* huart = GetUart(port);
 800d410:	f000 fe28 	bl	800e064 <GetUart>
 800d414:	0004      	movs	r4, r0
	
	if (huart == &huart1) 
 800d416:	482b      	ldr	r0, [pc, #172]	; (800d4c4 <GetPortGPIOs+0xbc>)
 800d418:	4284      	cmp	r4, r0
 800d41a:	d01a      	beq.n	800d452 <GetPortGPIOs+0x4a>
		*RX_Port = (uint32_t)USART1_RX_PORT;
		*RX_Pin = USART1_RX_PIN;
#endif
	} 
#ifdef _Usart2	
	else if (huart == &huart2) 
 800d41c:	4b2a      	ldr	r3, [pc, #168]	; (800d4c8 <GetPortGPIOs+0xc0>)
 800d41e:	429c      	cmp	r4, r3
 800d420:	d024      	beq.n	800d46c <GetPortGPIOs+0x64>
		*RX_Port = (uint32_t)USART2_RX_PORT;
		*RX_Pin = USART2_RX_PIN;
	} 
#endif
#ifdef _Usart3	
	else if (huart == &huart3) 
 800d422:	4b2a      	ldr	r3, [pc, #168]	; (800d4cc <GetPortGPIOs+0xc4>)
 800d424:	429c      	cmp	r4, r3
 800d426:	d02c      	beq.n	800d482 <GetPortGPIOs+0x7a>
		*RX_Port = (uint32_t)USART3_RX_PORT;
		*RX_Pin = USART3_RX_PIN;
	} 
#endif
#ifdef _Usart4	
	else if (huart == &huart4) 
 800d428:	4b29      	ldr	r3, [pc, #164]	; (800d4d0 <GetPortGPIOs+0xc8>)
 800d42a:	429c      	cmp	r4, r3
 800d42c:	d035      	beq.n	800d49a <GetPortGPIOs+0x92>
		*RX_Port = (uint32_t)USART4_RX_PORT;
		*RX_Pin = USART4_RX_PIN;
	} 
#endif
#ifdef _Usart5	
	else if (huart == &huart5) 
 800d42e:	4b29      	ldr	r3, [pc, #164]	; (800d4d4 <GetPortGPIOs+0xcc>)
 800d430:	429c      	cmp	r4, r3
 800d432:	d03d      	beq.n	800d4b0 <GetPortGPIOs+0xa8>
		*RX_Port = (uint32_t)USART5_RX_PORT;
		*RX_Pin = USART5_RX_PIN;
	} 
#endif
#ifdef _Usart6	
	else if (huart == &huart6) 
 800d434:	4b28      	ldr	r3, [pc, #160]	; (800d4d8 <GetPortGPIOs+0xd0>)
		*RX_Port = (uint32_t)USART8_RX_PORT;
		*RX_Pin = USART8_RX_PIN;
	} 
#endif
	else
		result = BOS_ERROR;	
 800d436:	20ff      	movs	r0, #255	; 0xff
	else if (huart == &huart6) 
 800d438:	429c      	cmp	r4, r3
 800d43a:	d116      	bne.n	800d46a <GetPortGPIOs+0x62>
		*TX_Port = (uint32_t)USART6_TX_PORT;
 800d43c:	2390      	movs	r3, #144	; 0x90
 800d43e:	05db      	lsls	r3, r3, #23
 800d440:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART6_TX_PIN;
 800d442:	2210      	movs	r2, #16
 800d444:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART6_RX_PORT;
 800d446:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART6_RX_PIN;
 800d448:	2320      	movs	r3, #32
 800d44a:	9a06      	ldr	r2, [sp, #24]
 800d44c:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d44e:	2000      	movs	r0, #0
 800d450:	e00b      	b.n	800d46a <GetPortGPIOs+0x62>
		*TX_Port = (uint32_t)USART1_TX_PORT;
 800d452:	2390      	movs	r3, #144	; 0x90
 800d454:	05db      	lsls	r3, r3, #23
 800d456:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART1_TX_PIN;
 800d458:	2280      	movs	r2, #128	; 0x80
 800d45a:	0092      	lsls	r2, r2, #2
 800d45c:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART1_RX_PORT;
 800d45e:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART1_RX_PIN;
 800d460:	2380      	movs	r3, #128	; 0x80
 800d462:	00db      	lsls	r3, r3, #3
 800d464:	9a06      	ldr	r2, [sp, #24]
 800d466:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d468:	2000      	movs	r0, #0
	
	return result;	
}
 800d46a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*TX_Port = (uint32_t)USART2_TX_PORT;
 800d46c:	2390      	movs	r3, #144	; 0x90
 800d46e:	05db      	lsls	r3, r3, #23
 800d470:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART2_TX_PIN;
 800d472:	2204      	movs	r2, #4
 800d474:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART2_RX_PORT;
 800d476:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART2_RX_PIN;
 800d478:	2308      	movs	r3, #8
 800d47a:	9a06      	ldr	r2, [sp, #24]
 800d47c:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d47e:	2000      	movs	r0, #0
 800d480:	e7f3      	b.n	800d46a <GetPortGPIOs+0x62>
		*TX_Port = (uint32_t)USART3_TX_PORT;
 800d482:	4b16      	ldr	r3, [pc, #88]	; (800d4dc <GetPortGPIOs+0xd4>)
 800d484:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART3_TX_PIN;
 800d486:	2280      	movs	r2, #128	; 0x80
 800d488:	00d2      	lsls	r2, r2, #3
 800d48a:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART3_RX_PORT;
 800d48c:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART3_RX_PIN;
 800d48e:	2380      	movs	r3, #128	; 0x80
 800d490:	011b      	lsls	r3, r3, #4
 800d492:	9a06      	ldr	r2, [sp, #24]
 800d494:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d496:	2000      	movs	r0, #0
 800d498:	e7e7      	b.n	800d46a <GetPortGPIOs+0x62>
		*TX_Port = (uint32_t)USART4_TX_PORT;
 800d49a:	2390      	movs	r3, #144	; 0x90
 800d49c:	05db      	lsls	r3, r3, #23
 800d49e:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART4_TX_PIN;
 800d4a0:	2201      	movs	r2, #1
 800d4a2:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART4_RX_PORT;
 800d4a4:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART4_RX_PIN;
 800d4a6:	2302      	movs	r3, #2
 800d4a8:	9a06      	ldr	r2, [sp, #24]
 800d4aa:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d4ac:	2000      	movs	r0, #0
 800d4ae:	e7dc      	b.n	800d46a <GetPortGPIOs+0x62>
		*TX_Port = (uint32_t)USART5_TX_PORT;
 800d4b0:	4b0a      	ldr	r3, [pc, #40]	; (800d4dc <GetPortGPIOs+0xd4>)
 800d4b2:	6033      	str	r3, [r6, #0]
		*TX_Pin = USART5_TX_PIN;
 800d4b4:	2208      	movs	r2, #8
 800d4b6:	802a      	strh	r2, [r5, #0]
		*RX_Port = (uint32_t)USART5_RX_PORT;
 800d4b8:	603b      	str	r3, [r7, #0]
		*RX_Pin = USART5_RX_PIN;
 800d4ba:	2310      	movs	r3, #16
 800d4bc:	9a06      	ldr	r2, [sp, #24]
 800d4be:	8013      	strh	r3, [r2, #0]
	BOS_Status result = BOS_OK;
 800d4c0:	2000      	movs	r0, #0
 800d4c2:	e7d2      	b.n	800d46a <GetPortGPIOs+0x62>
 800d4c4:	20006880 	.word	0x20006880
 800d4c8:	200069d0 	.word	0x200069d0
 800d4cc:	200067a0 	.word	0x200067a0
 800d4d0:	20006960 	.word	0x20006960
 800d4d4:	20006810 	.word	0x20006810
 800d4d8:	200068f0 	.word	0x200068f0
 800d4dc:	48000400 	.word	0x48000400

0800d4e0 <IsFactoryReset>:
/* --- Check for factory reset condition: 
				- P1 TXD is connected to last port RXD    
*/
uint8_t IsFactoryReset(void)
{
 800d4e0:	b530      	push	{r4, r5, lr}
 800d4e2:	b093      	sub	sp, #76	; 0x4c
	uint16_t P1_TX_Pin, P1_RX_Pin, P_last_TX_Pin, P_last_RX_Pin;
	
	/* -- Setup GPIOs -- */
	
  /* Enable all GPIO Ports Clocks */
  __GPIOA_CLK_ENABLE();
 800d4e4:	4b39      	ldr	r3, [pc, #228]	; (800d5cc <IsFactoryReset+0xec>)
 800d4e6:	6959      	ldr	r1, [r3, #20]
 800d4e8:	2080      	movs	r0, #128	; 0x80
 800d4ea:	0280      	lsls	r0, r0, #10
 800d4ec:	4301      	orrs	r1, r0
 800d4ee:	6159      	str	r1, [r3, #20]
 800d4f0:	695a      	ldr	r2, [r3, #20]
 800d4f2:	4002      	ands	r2, r0
 800d4f4:	9203      	str	r2, [sp, #12]
 800d4f6:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800d4f8:	6959      	ldr	r1, [r3, #20]
 800d4fa:	2080      	movs	r0, #128	; 0x80
 800d4fc:	02c0      	lsls	r0, r0, #11
 800d4fe:	4301      	orrs	r1, r0
 800d500:	6159      	str	r1, [r3, #20]
 800d502:	695a      	ldr	r2, [r3, #20]
 800d504:	4002      	ands	r2, r0
 800d506:	9204      	str	r2, [sp, #16]
 800d508:	9a04      	ldr	r2, [sp, #16]
  __GPIOC_CLK_ENABLE();
 800d50a:	6959      	ldr	r1, [r3, #20]
 800d50c:	2080      	movs	r0, #128	; 0x80
 800d50e:	0300      	lsls	r0, r0, #12
 800d510:	4301      	orrs	r1, r0
 800d512:	6159      	str	r1, [r3, #20]
 800d514:	695a      	ldr	r2, [r3, #20]
 800d516:	4002      	ands	r2, r0
 800d518:	9205      	str	r2, [sp, #20]
 800d51a:	9a05      	ldr	r2, [sp, #20]
	__GPIOD_CLK_ENABLE();
 800d51c:	695a      	ldr	r2, [r3, #20]
 800d51e:	2180      	movs	r1, #128	; 0x80
 800d520:	0349      	lsls	r1, r1, #13
 800d522:	430a      	orrs	r2, r1
 800d524:	615a      	str	r2, [r3, #20]
 800d526:	695b      	ldr	r3, [r3, #20]
 800d528:	400b      	ands	r3, r1
 800d52a:	9306      	str	r3, [sp, #24]
 800d52c:	9b06      	ldr	r3, [sp, #24]
	
	/* Get GPIOs */
	GetPortGPIOs(P1, &P1_TX_Port, &P1_TX_Pin, &P1_RX_Port, &P1_RX_Pin);
 800d52e:	ab08      	add	r3, sp, #32
 800d530:	9300      	str	r3, [sp, #0]
 800d532:	ab0b      	add	r3, sp, #44	; 0x2c
 800d534:	2222      	movs	r2, #34	; 0x22
 800d536:	446a      	add	r2, sp
 800d538:	a90c      	add	r1, sp, #48	; 0x30
 800d53a:	2001      	movs	r0, #1
 800d53c:	f7ff ff64 	bl	800d408 <GetPortGPIOs>
	GetPortGPIOs(P_LAST, &P_last_TX_Port, &P_last_TX_Pin, &P_last_RX_Port, &P_last_RX_Pin);
 800d540:	ac07      	add	r4, sp, #28
 800d542:	9400      	str	r4, [sp, #0]
 800d544:	ab09      	add	r3, sp, #36	; 0x24
 800d546:	221e      	movs	r2, #30
 800d548:	446a      	add	r2, sp
 800d54a:	a90a      	add	r1, sp, #40	; 0x28
 800d54c:	2006      	movs	r0, #6
 800d54e:	f7ff ff5b 	bl	800d408 <GetPortGPIOs>
	
	/* TXD of first port */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d552:	2301      	movs	r3, #1
 800d554:	930e      	str	r3, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d556:	2500      	movs	r5, #0
 800d558:	950f      	str	r5, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P1_TX_Pin;
 800d55a:	466b      	mov	r3, sp
 800d55c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800d55e:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P1_TX_Port, &GPIO_InitStruct);
 800d560:	a90d      	add	r1, sp, #52	; 0x34
 800d562:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d564:	f004 fb30 	bl	8011bc8 <HAL_GPIO_Init>
	
	/* RXD of last port */
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d568:	950e      	str	r5, [sp, #56]	; 0x38
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;	
 800d56a:	2302      	movs	r3, #2
 800d56c:	930f      	str	r3, [sp, #60]	; 0x3c
	GPIO_InitStruct.Pin = P_last_RX_Pin;
 800d56e:	8823      	ldrh	r3, [r4, #0]
 800d570:	930d      	str	r3, [sp, #52]	; 0x34
	HAL_GPIO_Init((GPIO_TypeDef *)P_last_RX_Port, &GPIO_InitStruct);	
 800d572:	a90d      	add	r1, sp, #52	; 0x34
 800d574:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d576:	f004 fb27 	bl	8011bc8 <HAL_GPIO_Init>

	
	/* Check for factory reset conditions */
	HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_RESET);
 800d57a:	466b      	mov	r3, sp
 800d57c:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 800d57e:	2200      	movs	r2, #0
 800d580:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d582:	f004 fc11 	bl	8011da8 <HAL_GPIO_WritePin>
	Delay_ms_no_rtos(5);
 800d586:	2005      	movs	r0, #5
 800d588:	f000 fb7c 	bl	800dc84 <StartMilliDelay>
	if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == RESET)
 800d58c:	8821      	ldrh	r1, [r4, #0]
 800d58e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d590:	f004 fc04 	bl	8011d9c <HAL_GPIO_ReadPin>
 800d594:	2800      	cmp	r0, #0
 800d596:	d006      	beq.n	800d5a6 <IsFactoryReset+0xc6>
		}
	}

	/* Clear flag for formated EEPROM if it was already set */
	/* Flag address (STM32F09x) - Last 4 words of SRAM */
	*((unsigned long *)0x20007FF0) = 0xFFFFFFFF; 
 800d598:	4b0d      	ldr	r3, [pc, #52]	; (800d5d0 <IsFactoryReset+0xf0>)
 800d59a:	2201      	movs	r2, #1
 800d59c:	4252      	negs	r2, r2
 800d59e:	601a      	str	r2, [r3, #0]
	
	return 0;
 800d5a0:	2000      	movs	r0, #0
}
 800d5a2:	b013      	add	sp, #76	; 0x4c
 800d5a4:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_WritePin((GPIO_TypeDef *)P1_TX_Port,P1_TX_Pin,GPIO_PIN_SET);
 800d5a6:	2322      	movs	r3, #34	; 0x22
 800d5a8:	446b      	add	r3, sp
 800d5aa:	8819      	ldrh	r1, [r3, #0]
 800d5ac:	2201      	movs	r2, #1
 800d5ae:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d5b0:	f004 fbfa 	bl	8011da8 <HAL_GPIO_WritePin>
		Delay_ms_no_rtos(5);
 800d5b4:	2005      	movs	r0, #5
 800d5b6:	f000 fb65 	bl	800dc84 <StartMilliDelay>
		if (HAL_GPIO_ReadPin((GPIO_TypeDef *)P_last_RX_Port,P_last_RX_Pin) == SET) {
 800d5ba:	ab07      	add	r3, sp, #28
 800d5bc:	8819      	ldrh	r1, [r3, #0]
 800d5be:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5c0:	f004 fbec 	bl	8011d9c <HAL_GPIO_ReadPin>
 800d5c4:	2801      	cmp	r0, #1
 800d5c6:	d1e7      	bne.n	800d598 <IsFactoryReset+0xb8>
 800d5c8:	e7eb      	b.n	800d5a2 <IsFactoryReset+0xc2>
 800d5ca:	46c0      	nop			; (mov r8, r8)
 800d5cc:	40021000 	.word	0x40021000
 800d5d0:	20007ff0 	.word	0x20007ff0

0800d5d4 <MX_I2C2_Init>:
  MX_I2C2_Init();
}

//-- Configure indicator LED
 void MX_I2C2_Init(void)
{
 800d5d4:	b510      	push	{r4, lr}

  hi2c2.Instance = I2C2;
 800d5d6:	4c0d      	ldr	r4, [pc, #52]	; (800d60c <MX_I2C2_Init+0x38>)
 800d5d8:	4b0d      	ldr	r3, [pc, #52]	; (800d610 <MX_I2C2_Init+0x3c>)
 800d5da:	6023      	str	r3, [r4, #0]
  /* hi2c2.Init.Timing = 0x2010091A; */ /* fast mode: 400 KHz */
  hi2c2.Init.Timing = 0x20303E5D; /* Standard mode: 100 KHz */
 800d5dc:	4b0d      	ldr	r3, [pc, #52]	; (800d614 <MX_I2C2_Init+0x40>)
 800d5de:	6063      	str	r3, [r4, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	60a3      	str	r3, [r4, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d5e4:	2201      	movs	r2, #1
 800d5e6:	60e2      	str	r2, [r4, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d5e8:	6123      	str	r3, [r4, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800d5ea:	6163      	str	r3, [r4, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800d5ec:	61a3      	str	r3, [r4, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d5ee:	61e3      	str	r3, [r4, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d5f0:	6223      	str	r3, [r4, #32]
  HAL_I2C_Init(&hi2c2);
 800d5f2:	0020      	movs	r0, r4
 800d5f4:	f004 fd5c 	bl	80120b0 <HAL_I2C_Init>

  /** Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE);
 800d5f8:	2100      	movs	r1, #0
 800d5fa:	0020      	movs	r0, r4
 800d5fc:	f004 ff3a 	bl	8012474 <HAL_I2CEx_ConfigAnalogFilter>

  /** Configure Digital filter */
  HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0);
 800d600:	2100      	movs	r1, #0
 800d602:	0020      	movs	r0, r4
 800d604:	f004 ff7a 	bl	80124fc <HAL_I2CEx_ConfigDigitalFilter>
}
 800d608:	bd10      	pop	{r4, pc}
 800d60a:	46c0      	nop			; (mov r8, r8)
 800d60c:	20006a64 	.word	0x20006a64
 800d610:	40005800 	.word	0x40005800
 800d614:	20303e5d 	.word	0x20303e5d

0800d618 <MX_I2C_Init>:
{
 800d618:	b500      	push	{lr}
 800d61a:	b087      	sub	sp, #28
  __GPIOC_CLK_ENABLE();
 800d61c:	4b18      	ldr	r3, [pc, #96]	; (800d680 <MX_I2C_Init+0x68>)
 800d61e:	6959      	ldr	r1, [r3, #20]
 800d620:	2080      	movs	r0, #128	; 0x80
 800d622:	0300      	lsls	r0, r0, #12
 800d624:	4301      	orrs	r1, r0
 800d626:	6159      	str	r1, [r3, #20]
 800d628:	695a      	ldr	r2, [r3, #20]
 800d62a:	4002      	ands	r2, r0
 800d62c:	9201      	str	r2, [sp, #4]
 800d62e:	9a01      	ldr	r2, [sp, #4]
  __GPIOA_CLK_ENABLE();
 800d630:	6959      	ldr	r1, [r3, #20]
 800d632:	2080      	movs	r0, #128	; 0x80
 800d634:	0280      	lsls	r0, r0, #10
 800d636:	4301      	orrs	r1, r0
 800d638:	6159      	str	r1, [r3, #20]
 800d63a:	695a      	ldr	r2, [r3, #20]
 800d63c:	4002      	ands	r2, r0
 800d63e:	9202      	str	r2, [sp, #8]
 800d640:	9a02      	ldr	r2, [sp, #8]
  __GPIOD_CLK_ENABLE();
 800d642:	6959      	ldr	r1, [r3, #20]
 800d644:	2080      	movs	r0, #128	; 0x80
 800d646:	0340      	lsls	r0, r0, #13
 800d648:	4301      	orrs	r1, r0
 800d64a:	6159      	str	r1, [r3, #20]
 800d64c:	695a      	ldr	r2, [r3, #20]
 800d64e:	4002      	ands	r2, r0
 800d650:	9203      	str	r2, [sp, #12]
 800d652:	9a03      	ldr	r2, [sp, #12]
  __GPIOB_CLK_ENABLE();
 800d654:	6959      	ldr	r1, [r3, #20]
 800d656:	2080      	movs	r0, #128	; 0x80
 800d658:	02c0      	lsls	r0, r0, #11
 800d65a:	4301      	orrs	r1, r0
 800d65c:	6159      	str	r1, [r3, #20]
 800d65e:	695a      	ldr	r2, [r3, #20]
 800d660:	4002      	ands	r2, r0
 800d662:	9204      	str	r2, [sp, #16]
 800d664:	9a04      	ldr	r2, [sp, #16]
  __GPIOF_CLK_ENABLE();   // for HSE and Boot0
 800d666:	695a      	ldr	r2, [r3, #20]
 800d668:	2180      	movs	r1, #128	; 0x80
 800d66a:	03c9      	lsls	r1, r1, #15
 800d66c:	430a      	orrs	r2, r1
 800d66e:	615a      	str	r2, [r3, #20]
 800d670:	695b      	ldr	r3, [r3, #20]
 800d672:	400b      	ands	r3, r1
 800d674:	9305      	str	r3, [sp, #20]
 800d676:	9b05      	ldr	r3, [sp, #20]
  MX_I2C2_Init();
 800d678:	f7ff ffac 	bl	800d5d4 <MX_I2C2_Init>
}
 800d67c:	b007      	add	sp, #28
 800d67e:	bd00      	pop	{pc}
 800d680:	40021000 	.word	0x40021000

0800d684 <LSM6DS3_I2C_Write>:

uint8_t LSM6DS3_I2C_Write(void *handle, uint8_t WriteAddr, uint8_t *pBuffer, uint16_t nBytesToWrite)
{
 800d684:	b510      	push	{r4, lr}
 800d686:	b084      	sub	sp, #16
	if (HAL_I2C_Mem_Write(handle, LSM6DS3_ACC_GYRO_I2C_ADDRESS_HIGH, WriteAddr, sizeof(WriteAddr), 
 800d688:	2464      	movs	r4, #100	; 0x64
 800d68a:	9402      	str	r4, [sp, #8]
 800d68c:	9301      	str	r3, [sp, #4]
 800d68e:	9200      	str	r2, [sp, #0]
 800d690:	2301      	movs	r3, #1
 800d692:	000a      	movs	r2, r1
 800d694:	21d6      	movs	r1, #214	; 0xd6
 800d696:	f004 fd69 	bl	801216c <HAL_I2C_Mem_Write>
 800d69a:	1e43      	subs	r3, r0, #1
 800d69c:	4198      	sbcs	r0, r3
 800d69e:	b2c0      	uxtb	r0, r0
																							pBuffer, nBytesToWrite, 100) != HAL_OK) {
		return 1;
	}
	return 0;
}
 800d6a0:	b004      	add	sp, #16
 800d6a2:	bd10      	pop	{r4, pc}

0800d6a4 <LSM6DS3_I2C_Read>:

uint8_t LSM6DS3_I2C_Read(void *handle, uint8_t ReadAddr, uint8_t *pBuffer, uint16_t nBytesToRead)
{
 800d6a4:	b510      	push	{r4, lr}
 800d6a6:	b084      	sub	sp, #16
	if (HAL_I2C_Mem_Read(handle, LSM6DS3_ACC_GYRO_I2C_ADDRESS_HIGH, ReadAddr, sizeof(ReadAddr), 
 800d6a8:	2464      	movs	r4, #100	; 0x64
 800d6aa:	9402      	str	r4, [sp, #8]
 800d6ac:	9301      	str	r3, [sp, #4]
 800d6ae:	9200      	str	r2, [sp, #0]
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	000a      	movs	r2, r1
 800d6b4:	21d6      	movs	r1, #214	; 0xd6
 800d6b6:	f004 fe1b 	bl	80122f0 <HAL_I2C_Mem_Read>
 800d6ba:	1e43      	subs	r3, r0, #1
 800d6bc:	4198      	sbcs	r0, r3
 800d6be:	b2c0      	uxtb	r0, r0
		pBuffer, nBytesToRead, 100) != HAL_OK) {
			return 1;
	}
	return 0;
}
 800d6c0:	b004      	add	sp, #16
 800d6c2:	bd10      	pop	{r4, pc}

0800d6c4 <LSM303AGR_MAG_I2C_Write>:
	}
	return 0;
}

uint8_t LSM303AGR_MAG_I2C_Write(void *handle, uint8_t WriteAddr, uint8_t *pBuffer, uint16_t nBytesToWrite)
{
 800d6c4:	b510      	push	{r4, lr}
 800d6c6:	b084      	sub	sp, #16
	if (HAL_I2C_Mem_Write(handle, LSM303AGR_MAG_I2C_ADDRESS, WriteAddr, sizeof(WriteAddr), 
 800d6c8:	2464      	movs	r4, #100	; 0x64
 800d6ca:	9402      	str	r4, [sp, #8]
 800d6cc:	9301      	str	r3, [sp, #4]
 800d6ce:	9200      	str	r2, [sp, #0]
 800d6d0:	2301      	movs	r3, #1
 800d6d2:	000a      	movs	r2, r1
 800d6d4:	213c      	movs	r1, #60	; 0x3c
 800d6d6:	f004 fd49 	bl	801216c <HAL_I2C_Mem_Write>
 800d6da:	1e43      	subs	r3, r0, #1
 800d6dc:	4198      	sbcs	r0, r3
 800d6de:	b2c0      	uxtb	r0, r0
																							pBuffer, nBytesToWrite, 100) != HAL_OK) {
		return 1;
	}
	return 0;
}
 800d6e0:	b004      	add	sp, #16
 800d6e2:	bd10      	pop	{r4, pc}

0800d6e4 <LSM303AGR_MAG_I2C_Read>:

uint8_t LSM303AGR_MAG_I2C_Read(void *handle, uint8_t ReadAddr, uint8_t *pBuffer, uint16_t nBytesToRead)
{
 800d6e4:	b510      	push	{r4, lr}
 800d6e6:	b084      	sub	sp, #16
	if (HAL_I2C_Mem_Read(handle, LSM303AGR_MAG_I2C_ADDRESS, ReadAddr, sizeof(ReadAddr), 
 800d6e8:	2464      	movs	r4, #100	; 0x64
 800d6ea:	9402      	str	r4, [sp, #8]
 800d6ec:	9301      	str	r3, [sp, #4]
 800d6ee:	9200      	str	r2, [sp, #0]
 800d6f0:	2301      	movs	r3, #1
 800d6f2:	000a      	movs	r2, r1
 800d6f4:	213c      	movs	r1, #60	; 0x3c
 800d6f6:	f004 fdfb 	bl	80122f0 <HAL_I2C_Mem_Read>
 800d6fa:	1e43      	subs	r3, r0, #1
 800d6fc:	4198      	sbcs	r0, r3
 800d6fe:	b2c0      	uxtb	r0, r0
		pBuffer, nBytesToRead, 100) != HAL_OK) {
			return 1;
	}
	return 0;
}
 800d700:	b004      	add	sp, #16
 800d702:	bd10      	pop	{r4, pc}

0800d704 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800d704:	b510      	push	{r4, lr}
	
	HAL_IncTick();
 800d706:	f003 fa5f 	bl	8010bc8 <HAL_IncTick>
  osSystickHandler();  
 800d70a:	f001 fa6b 	bl	800ebe4 <osSystickHandler>

}
 800d70e:	bd10      	pop	{r4, pc}

0800d710 <HardFault_Handler>:
* @brief This function handles Hard Fault error callback.
*/
void HardFault_Handler(void)
{
	/* Loop here */
	for(;;) {};  
 800d710:	e7fe      	b.n	800d710 <HardFault_Handler>
	...

0800d714 <USART1_IRQHandler>:

/**
* @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
*/
void USART1_IRQHandler(void)
{
 800d714:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart1)		
  HAL_UART_IRQHandler(&huart1);
 800d716:	4802      	ldr	r0, [pc, #8]	; (800d720 <USART1_IRQHandler+0xc>)
 800d718:	f006 fc2b 	bl	8013f72 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d71c:	bd10      	pop	{r4, pc}
 800d71e:	46c0      	nop			; (mov r8, r8)
 800d720:	20006880 	.word	0x20006880

0800d724 <USART2_IRQHandler>:

/**
* @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
*/
void USART2_IRQHandler(void)
{
 800d724:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart2)	
  HAL_UART_IRQHandler(&huart2);
 800d726:	4802      	ldr	r0, [pc, #8]	; (800d730 <USART2_IRQHandler+0xc>)
 800d728:	f006 fc23 	bl	8013f72 <HAL_UART_IRQHandler>
	
	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d72c:	bd10      	pop	{r4, pc}
 800d72e:	46c0      	nop			; (mov r8, r8)
 800d730:	200069d0 	.word	0x200069d0

0800d734 <USART3_8_IRQHandler>:

/**
* @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
*/
void USART3_8_IRQHandler(void)
{
 800d734:	b510      	push	{r4, lr}
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
	
#if defined (_Usart3)
	HAL_UART_IRQHandler(&huart3);
 800d736:	4806      	ldr	r0, [pc, #24]	; (800d750 <USART3_8_IRQHandler+0x1c>)
 800d738:	f006 fc1b 	bl	8013f72 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart4)
	HAL_UART_IRQHandler(&huart4);
 800d73c:	4805      	ldr	r0, [pc, #20]	; (800d754 <USART3_8_IRQHandler+0x20>)
 800d73e:	f006 fc18 	bl	8013f72 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart5)
	HAL_UART_IRQHandler(&huart5);
 800d742:	4805      	ldr	r0, [pc, #20]	; (800d758 <USART3_8_IRQHandler+0x24>)
 800d744:	f006 fc15 	bl	8013f72 <HAL_UART_IRQHandler>
#endif
#if defined (_Usart6)
	HAL_UART_IRQHandler(&huart6);
 800d748:	4804      	ldr	r0, [pc, #16]	; (800d75c <USART3_8_IRQHandler+0x28>)
 800d74a:	f006 fc12 	bl	8013f72 <HAL_UART_IRQHandler>

	/* If lHigherPriorityTaskWoken is now equal to pdTRUE, then a context
	switch should be performed before the interrupt exists.  That ensures the
	unblocked (higher priority) task is returned to immediately. */
	portEND_SWITCHING_ISR( xHigherPriorityTaskWoken );
}
 800d74e:	bd10      	pop	{r4, pc}
 800d750:	200067a0 	.word	0x200067a0
 800d754:	20006960 	.word	0x20006960
 800d758:	20006810 	.word	0x20006810
 800d75c:	200068f0 	.word	0x200068f0

0800d760 <DMA1_Ch1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt (Uplink DMA 1).
*/
void DMA1_Ch1_IRQHandler(void)
{
 800d760:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P1 */
	DMA_IRQHandler(P1);
 800d762:	2001      	movs	r0, #1
 800d764:	f7fa f8ca 	bl	80078fc <DMA_IRQHandler>
	
}
 800d768:	bd10      	pop	{r4, pc}
	...

0800d76c <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
* @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
*/
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 800d76c:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P5 */
	if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF2) == SET) {
 800d76e:	4b0c      	ldr	r3, [pc, #48]	; (800d7a0 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x34>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	06db      	lsls	r3, r3, #27
 800d774:	d40b      	bmi.n	800d78e <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x22>
		DMA_IRQHandler(P5);
	/* Streaming or messaging DMA on P2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF3) == SET) {
 800d776:	4b0b      	ldr	r3, [pc, #44]	; (800d7a4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	05db      	lsls	r3, r3, #23
 800d77c:	d40b      	bmi.n	800d796 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x2a>
		DMA_IRQHandler(P2);
	/* TX messaging DMA 0 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF2) == SET) {
 800d77e:	4b09      	ldr	r3, [pc, #36]	; (800d7a4 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x38>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	06db      	lsls	r3, r3, #27
 800d784:	d506      	bpl.n	800d794 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
		HAL_DMA_IRQHandler(&msgTxDMA[0]);
 800d786:	4808      	ldr	r0, [pc, #32]	; (800d7a8 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x3c>)
 800d788:	f003 fc76 	bl	8011078 <HAL_DMA_IRQHandler>
	}
}
 800d78c:	e002      	b.n	800d794 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
		DMA_IRQHandler(P5);
 800d78e:	2005      	movs	r0, #5
 800d790:	f7fa f8b4 	bl	80078fc <DMA_IRQHandler>
}
 800d794:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P2);
 800d796:	2002      	movs	r0, #2
 800d798:	f7fa f8b0 	bl	80078fc <DMA_IRQHandler>
 800d79c:	e7fa      	b.n	800d794 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x28>
 800d79e:	46c0      	nop			; (mov r8, r8)
 800d7a0:	40020400 	.word	0x40020400
 800d7a4:	40020000 	.word	0x40020000
 800d7a8:	2000160c 	.word	0x2000160c

0800d7ac <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
*/
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 800d7ac:	b510      	push	{r4, lr}
	/* Streaming or messaging DMA on P3 */
	if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF5) == SET) {
 800d7ae:	4b14      	ldr	r3, [pc, #80]	; (800d800 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	03db      	lsls	r3, r3, #15
 800d7b4:	d413      	bmi.n	800d7de <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x32>
		DMA_IRQHandler(P3);
	/* Streaming or messaging DMA on P4 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF6) == SET) {
 800d7b6:	4b12      	ldr	r3, [pc, #72]	; (800d800 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	02db      	lsls	r3, r3, #11
 800d7bc:	d413      	bmi.n	800d7e6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x3a>
		DMA_IRQHandler(P4);
	/* Streaming or messaging DMA on P6 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA2,DMA_ISR_GIF3) == SET) {
 800d7be:	4b11      	ldr	r3, [pc, #68]	; (800d804 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x58>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	05db      	lsls	r3, r3, #23
 800d7c4:	d413      	bmi.n	800d7ee <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x42>
		DMA_IRQHandler(P6);
	/* TX messaging DMA 1 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF4) == SET) {
 800d7c6:	4b0e      	ldr	r3, [pc, #56]	; (800d800 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	04db      	lsls	r3, r3, #19
 800d7cc:	d413      	bmi.n	800d7f6 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x4a>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
	/* TX messaging DMA 2 */
	} else if (HAL_DMA_GET_IT_SOURCE(DMA1,DMA_ISR_GIF7) == SET) {
 800d7ce:	4b0c      	ldr	r3, [pc, #48]	; (800d800 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x54>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	01db      	lsls	r3, r3, #7
 800d7d4:	d506      	bpl.n	800d7e4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[2]);
 800d7d6:	480c      	ldr	r0, [pc, #48]	; (800d808 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x5c>)
 800d7d8:	f003 fc4e 	bl	8011078 <HAL_DMA_IRQHandler>
	}
}
 800d7dc:	e002      	b.n	800d7e4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P3);
 800d7de:	2003      	movs	r0, #3
 800d7e0:	f7fa f88c 	bl	80078fc <DMA_IRQHandler>
}
 800d7e4:	bd10      	pop	{r4, pc}
		DMA_IRQHandler(P4);
 800d7e6:	2004      	movs	r0, #4
 800d7e8:	f7fa f888 	bl	80078fc <DMA_IRQHandler>
 800d7ec:	e7fa      	b.n	800d7e4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		DMA_IRQHandler(P6);
 800d7ee:	2006      	movs	r0, #6
 800d7f0:	f7fa f884 	bl	80078fc <DMA_IRQHandler>
 800d7f4:	e7f6      	b.n	800d7e4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
		HAL_DMA_IRQHandler(&msgTxDMA[1]);
 800d7f6:	4805      	ldr	r0, [pc, #20]	; (800d80c <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x60>)
 800d7f8:	f003 fc3e 	bl	8011078 <HAL_DMA_IRQHandler>
 800d7fc:	e7f2      	b.n	800d7e4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x38>
 800d7fe:	46c0      	nop			; (mov r8, r8)
 800d800:	40020000 	.word	0x40020000
 800d804:	40020400 	.word	0x40020400
 800d808:	2000167c 	.word	0x2000167c
 800d80c:	20001644 	.word	0x20001644

0800d810 <HAL_UART_TxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d810:	b510      	push	{r4, lr}
 800d812:	b082      	sub	sp, #8
 800d814:	0004      	movs	r4, r0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 800d816:	2300      	movs	r3, #0
 800d818:	9301      	str	r3, [sp, #4]
	
	/* TX DMAs are shared so unsetup them here to be reused */
	if(huart->hdmatx != NULL)
 800d81a:	6e03      	ldr	r3, [r0, #96]	; 0x60
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d001      	beq.n	800d824 <HAL_UART_TxCpltCallback+0x14>
		DMA_MSG_TX_UnSetup(huart);
 800d820:	f7fe fe1e 	bl	800c460 <DMA_MSG_TX_UnSetup>

	/* Give back the mutex. */
	xSemaphoreGiveFromISR( PxTxSemaphoreHandle[GetPort(huart)], &( xHigherPriorityTaskWoken ) );
 800d824:	0020      	movs	r0, r4
 800d826:	f7fd ff83 	bl	800b730 <GetPort>
 800d82a:	0080      	lsls	r0, r0, #2
 800d82c:	4b03      	ldr	r3, [pc, #12]	; (800d83c <HAL_UART_TxCpltCallback+0x2c>)
 800d82e:	58c0      	ldr	r0, [r0, r3]
 800d830:	a901      	add	r1, sp, #4
 800d832:	f001 fd71 	bl	800f318 <xQueueGiveFromISR>
}
 800d836:	b002      	add	sp, #8
 800d838:	bd10      	pop	{r4, pc}
 800d83a:	46c0      	nop			; (mov r8, r8)
 800d83c:	20006764 	.word	0x20006764

0800d840 <HAL_UART_ErrorCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d840:	b510      	push	{r4, lr}
 800d842:	0004      	movs	r4, r0
	/* Loop here */
	//for(;;) {};

  /* Set the UART state ready to be able to start the process again */
  huart->State = HAL_UART_STATE_READY;
 800d844:	2369      	movs	r3, #105	; 0x69
 800d846:	2201      	movs	r2, #1
 800d848:	54c2      	strb	r2, [r0, r3]
	
	/* Resume streaming DMA for this UART port */
	uint8_t port = GetPort(huart);
 800d84a:	f7fd ff71 	bl	800b730 <GetPort>
	if (portStatus[port] == STREAM) {
 800d84e:	4b0c      	ldr	r3, [pc, #48]	; (800d880 <HAL_UART_ErrorCallback+0x40>)
 800d850:	5c1b      	ldrb	r3, [r3, r0]
 800d852:	2b02      	cmp	r3, #2
 800d854:	d005      	beq.n	800d862 <HAL_UART_ErrorCallback+0x22>
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
	/* Or parse the circular buffer and restart messaging DMA for this port */
	} else {
		MsgDMAStopped[port-1] = true;		// Set a flag here and let the backend task restart DMA after parsing the buffer	
 800d856:	4b0b      	ldr	r3, [pc, #44]	; (800d884 <HAL_UART_ErrorCallback+0x44>)
 800d858:	1818      	adds	r0, r3, r0
 800d85a:	3801      	subs	r0, #1
 800d85c:	2301      	movs	r3, #1
 800d85e:	7003      	strb	r3, [r0, #0]
	}	
}
 800d860:	bd10      	pop	{r4, pc}
		HAL_UART_Receive_DMA(huart, (uint8_t *)(&(dmaStreamDst[port-1]->Instance->TDR)), huart->hdmarx->Instance->CNDTR);	
 800d862:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	685a      	ldr	r2, [r3, #4]
 800d868:	b292      	uxth	r2, r2
 800d86a:	1e43      	subs	r3, r0, #1
 800d86c:	009b      	lsls	r3, r3, #2
 800d86e:	4906      	ldr	r1, [pc, #24]	; (800d888 <HAL_UART_ErrorCallback+0x48>)
 800d870:	585b      	ldr	r3, [r3, r1]
 800d872:	6819      	ldr	r1, [r3, #0]
 800d874:	3128      	adds	r1, #40	; 0x28
 800d876:	0020      	movs	r0, r4
 800d878:	f005 ff62 	bl	8013740 <HAL_UART_Receive_DMA>
 800d87c:	e7f0      	b.n	800d860 <HAL_UART_ErrorCallback+0x20>
 800d87e:	46c0      	nop			; (mov r8, r8)
 800d880:	20000e5c 	.word	0x20000e5c
 800d884:	20001000 	.word	0x20001000
 800d888:	200011e0 	.word	0x200011e0

0800d88c <HAL_UART_RxCpltCallback>:

/*-----------------------------------------------------------*/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d88c:	b510      	push	{r4, lr}
 800d88e:	0004      	movs	r4, r0
	// Check only ports in messaging mode
	if (portStatus[GetPort(huart)] == FREE || portStatus[GetPort(huart)] == MSG)
 800d890:	f7fd ff4e 	bl	800b730 <GetPort>
 800d894:	4b13      	ldr	r3, [pc, #76]	; (800d8e4 <HAL_UART_RxCpltCallback+0x58>)
 800d896:	5c1b      	ldrb	r3, [r3, r0]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d006      	beq.n	800d8aa <HAL_UART_RxCpltCallback+0x1e>
 800d89c:	0020      	movs	r0, r4
 800d89e:	f7fd ff47 	bl	800b730 <GetPort>
 800d8a2:	4b10      	ldr	r3, [pc, #64]	; (800d8e4 <HAL_UART_RxCpltCallback+0x58>)
 800d8a4:	5c1b      	ldrb	r3, [r3, r0]
 800d8a6:	2b01      	cmp	r3, #1
 800d8a8:	d11a      	bne.n	800d8e0 <HAL_UART_RxCpltCallback+0x54>
	{
		// Circular buffer is full. Set a global persistant flag via BOS events and a temporary flag via portStatus.
		BOS.overrun = GetPort(huart);
 800d8aa:	0020      	movs	r0, r4
 800d8ac:	f7fd ff40 	bl	800b730 <GetPort>
 800d8b0:	4b0d      	ldr	r3, [pc, #52]	; (800d8e8 <HAL_UART_RxCpltCallback+0x5c>)
 800d8b2:	7698      	strb	r0, [r3, #26]
		portStatus[GetPort(huart)] = OVERRUN;
 800d8b4:	0020      	movs	r0, r4
 800d8b6:	f7fd ff3b 	bl	800b730 <GetPort>
 800d8ba:	4b0a      	ldr	r3, [pc, #40]	; (800d8e4 <HAL_UART_RxCpltCallback+0x58>)
 800d8bc:	2205      	movs	r2, #5
 800d8be:	541a      	strb	r2, [r3, r0]
		// Reset the circular RX buffer index
		UARTRxBufIndex[GetPort(huart)-1] = 0;
 800d8c0:	0020      	movs	r0, r4
 800d8c2:	f7fd ff35 	bl	800b730 <GetPort>
 800d8c6:	4b09      	ldr	r3, [pc, #36]	; (800d8ec <HAL_UART_RxCpltCallback+0x60>)
 800d8c8:	181b      	adds	r3, r3, r0
 800d8ca:	3b01      	subs	r3, #1
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	701a      	strb	r2, [r3, #0]
		// Set a port-specific flag here and let the backend task restart DMA
		MsgDMAStopped[GetPort(huart)-1] = true;	
 800d8d0:	0020      	movs	r0, r4
 800d8d2:	f7fd ff2d 	bl	800b730 <GetPort>
 800d8d6:	4b06      	ldr	r3, [pc, #24]	; (800d8f0 <HAL_UART_RxCpltCallback+0x64>)
 800d8d8:	181b      	adds	r3, r3, r0
 800d8da:	3b01      	subs	r3, #1
 800d8dc:	2201      	movs	r2, #1
 800d8de:	701a      	strb	r2, [r3, #0]
	}
}
 800d8e0:	bd10      	pop	{r4, pc}
 800d8e2:	46c0      	nop			; (mov r8, r8)
 800d8e4:	20000e5c 	.word	0x20000e5c
 800d8e8:	200066e4 	.word	0x200066e4
 800d8ec:	20001188 	.word	0x20001188
 800d8f0:	20001000 	.word	0x20001000

0800d8f4 <vApplicationStackOverflowHook>:
	( void ) pxTask;

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
 800d8f4:	b672      	cpsid	i
	for( ;; );
 800d8f6:	e7fe      	b.n	800d8f6 <vApplicationStackOverflowHook+0x2>

0800d8f8 <vApplicationMallocFailedHook>:
	demo application.  If heap_1.c or heap_2.c are used, then the size of the
	heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
	FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
	to query the size of free heap space that remains (although it does not
	provide information on how the remaining heap might be fragmented). */
	taskDISABLE_INTERRUPTS();
 800d8f8:	b672      	cpsid	i
	for( ;; );
 800d8fa:	e7fe      	b.n	800d8fa <vApplicationMallocFailedHook+0x2>

0800d8fc <RTC_CalendarConfig>:
/*-----------------------------------------------------------*/

/* --- First time-configuration of the internal real-time clock.
*/
BOS_Status RTC_CalendarConfig(void)
{
 800d8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8fe:	46ce      	mov	lr, r9
 800d900:	4647      	mov	r7, r8
 800d902:	b580      	push	{r7, lr}
 800d904:	b08f      	sub	sp, #60	; 0x3c
 800d906:	2500      	movs	r5, #0
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	uint8_t month, day, year, seconds, minutes, hours; 
	char comDate[] = __DATE__, comTime[] = __TIME__;
 800d908:	ac05      	add	r4, sp, #20
 800d90a:	4b34      	ldr	r3, [pc, #208]	; (800d9dc <RTC_CalendarConfig+0xe0>)
 800d90c:	0022      	movs	r2, r4
 800d90e:	cb43      	ldmia	r3!, {r0, r1, r6}
 800d910:	c243      	stmia	r2!, {r0, r1, r6}
 800d912:	aa02      	add	r2, sp, #8
 800d914:	4b32      	ldr	r3, [pc, #200]	; (800d9e0 <RTC_CalendarConfig+0xe4>)
 800d916:	cb03      	ldmia	r3!, {r0, r1}
 800d918:	c203      	stmia	r2!, {r0, r1}
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	7013      	strb	r3, [r2, #0]
	
	/* Get compile date */
  year = atoi(comDate + 9);		// only last 2 digits
 800d91e:	2015      	movs	r0, #21
 800d920:	ab02      	add	r3, sp, #8
 800d922:	469c      	mov	ip, r3
 800d924:	4460      	add	r0, ip
 800d926:	f006 fbb4 	bl	8014092 <atoi>
 800d92a:	b2c3      	uxtb	r3, r0
 800d92c:	4699      	mov	r9, r3
  *(comDate + 6) = 0;
 800d92e:	71a5      	strb	r5, [r4, #6]
  day = atoi(comDate + 4);
 800d930:	a806      	add	r0, sp, #24
 800d932:	f006 fbae 	bl	8014092 <atoi>
 800d936:	b2c3      	uxtb	r3, r0
 800d938:	4698      	mov	r8, r3
  *(comDate + 3) = 0;
 800d93a:	70e5      	strb	r5, [r4, #3]
  for (uint8_t i = 0; i < 12; i++)
 800d93c:	4e29      	ldr	r6, [pc, #164]	; (800d9e4 <RTC_CalendarConfig+0xe8>)
  *(comDate + 3) = 0;
 800d93e:	2401      	movs	r4, #1
 800d940:	e003      	b.n	800d94a <RTC_CalendarConfig+0x4e>
  for (uint8_t i = 0; i < 12; i++)
 800d942:	3401      	adds	r4, #1
 800d944:	3604      	adds	r6, #4
 800d946:	2c0d      	cmp	r4, #13
 800d948:	d007      	beq.n	800d95a <RTC_CalendarConfig+0x5e>
  {
    if (!strcmp(comDate, monthStringAbreviated[i]))	
 800d94a:	6831      	ldr	r1, [r6, #0]
 800d94c:	a805      	add	r0, sp, #20
 800d94e:	f7f2 fbd9 	bl	8000104 <strcmp>
 800d952:	2800      	cmp	r0, #0
 800d954:	d1f5      	bne.n	800d942 <RTC_CalendarConfig+0x46>
			month = i + 1;
 800d956:	b2e5      	uxtb	r5, r4
 800d958:	e7f3      	b.n	800d942 <RTC_CalendarConfig+0x46>
  }

	/* Get compile time */
	seconds = atoi(comTime + 6);
 800d95a:	ab02      	add	r3, sp, #8
 800d95c:	1d98      	adds	r0, r3, #6
 800d95e:	f006 fb98 	bl	8014092 <atoi>
 800d962:	9001      	str	r0, [sp, #4]
	*(comDate + 5) = 0;
 800d964:	af05      	add	r7, sp, #20
 800d966:	2400      	movs	r4, #0
 800d968:	717c      	strb	r4, [r7, #5]
	minutes = atoi(comTime + 3);
 800d96a:	ab02      	add	r3, sp, #8
 800d96c:	1cd8      	adds	r0, r3, #3
 800d96e:	f006 fb90 	bl	8014092 <atoi>
 800d972:	0006      	movs	r6, r0
	*(comDate + 2) = 0;
 800d974:	70bc      	strb	r4, [r7, #2]
	hours = atoi(comTime);
 800d976:	a802      	add	r0, sp, #8
 800d978:	f006 fb8b 	bl	8014092 <atoi>
 800d97c:	0007      	movs	r7, r0
	
  /* Set Date */
  sdatestructure.Year = year;
 800d97e:	a90d      	add	r1, sp, #52	; 0x34
 800d980:	464b      	mov	r3, r9
 800d982:	70cb      	strb	r3, [r1, #3]
  sdatestructure.Month = month;
 800d984:	704d      	strb	r5, [r1, #1]
  sdatestructure.Date = day;
 800d986:	4643      	mov	r3, r8
 800d988:	708b      	strb	r3, [r1, #2]
  sdatestructure.WeekDay = RTC_WEEKDAY_MONDAY;		// Todo - Calculate weekday later
 800d98a:	2301      	movs	r3, #1
 800d98c:	700b      	strb	r3, [r1, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800d98e:	2200      	movs	r2, #0
 800d990:	4815      	ldr	r0, [pc, #84]	; (800d9e8 <RTC_CalendarConfig+0xec>)
 800d992:	f005 fc2b 	bl	80131ec <HAL_RTC_SetDate>
 800d996:	2800      	cmp	r0, #0
 800d998:	d11c      	bne.n	800d9d4 <RTC_CalendarConfig+0xd8>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800d99a:	a908      	add	r1, sp, #32
 800d99c:	700f      	strb	r7, [r1, #0]
  stimestructure.Minutes = minutes;
 800d99e:	704e      	strb	r6, [r1, #1]
  stimestructure.Seconds = seconds;
 800d9a0:	9b01      	ldr	r3, [sp, #4]
 800d9a2:	708b      	strb	r3, [r1, #2]
  stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;	BOS.hourformat = 24;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	720b      	strb	r3, [r1, #8]
 800d9a8:	4a10      	ldr	r2, [pc, #64]	; (800d9ec <RTC_CalendarConfig+0xf0>)
 800d9aa:	3018      	adds	r0, #24
 800d9ac:	7350      	strb	r0, [r2, #13]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800d9ae:	60cb      	str	r3, [r1, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800d9b0:	610b      	str	r3, [r1, #16]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	480c      	ldr	r0, [pc, #48]	; (800d9e8 <RTC_CalendarConfig+0xec>)
 800d9b6:	f005 fb99 	bl	80130ec <HAL_RTC_SetTime>
 800d9ba:	1e04      	subs	r4, r0, #0
 800d9bc:	d10c      	bne.n	800d9d8 <RTC_CalendarConfig+0xdc>
		return BOS_ERROR;

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800d9be:	4a0c      	ldr	r2, [pc, #48]	; (800d9f0 <RTC_CalendarConfig+0xf4>)
 800d9c0:	2101      	movs	r1, #1
 800d9c2:	4809      	ldr	r0, [pc, #36]	; (800d9e8 <RTC_CalendarConfig+0xec>)
 800d9c4:	f005 fcd6 	bl	8013374 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
}
 800d9c8:	0020      	movs	r0, r4
 800d9ca:	b00f      	add	sp, #60	; 0x3c
 800d9cc:	bcc0      	pop	{r6, r7}
 800d9ce:	46b9      	mov	r9, r7
 800d9d0:	46b0      	mov	r8, r6
 800d9d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BOS_ERROR;
 800d9d4:	24ff      	movs	r4, #255	; 0xff
 800d9d6:	e7f7      	b.n	800d9c8 <RTC_CalendarConfig+0xcc>
		return BOS_ERROR;
 800d9d8:	24ff      	movs	r4, #255	; 0xff
 800d9da:	e7f5      	b.n	800d9c8 <RTC_CalendarConfig+0xcc>
 800d9dc:	0801a9fc 	.word	0x0801a9fc
 800d9e0:	0801aa20 	.word	0x0801aa20
 800d9e4:	20000040 	.word	0x20000040
 800d9e8:	20006aa0 	.word	0x20006aa0
 800d9ec:	200066e4 	.word	0x200066e4
 800d9f0:	000032f2 	.word	0x000032f2

0800d9f4 <RTC_Init>:
{
 800d9f4:	b510      	push	{r4, lr}
  __HAL_RCC_RTC_ENABLE();
 800d9f6:	4a1c      	ldr	r2, [pc, #112]	; (800da68 <RTC_Init+0x74>)
 800d9f8:	6a11      	ldr	r1, [r2, #32]
 800d9fa:	2380      	movs	r3, #128	; 0x80
 800d9fc:	021b      	lsls	r3, r3, #8
 800d9fe:	430b      	orrs	r3, r1
 800da00:	6213      	str	r3, [r2, #32]
	RtcHandle.Instance = RTC; 
 800da02:	481a      	ldr	r0, [pc, #104]	; (800da6c <RTC_Init+0x78>)
 800da04:	4b1a      	ldr	r3, [pc, #104]	; (800da70 <RTC_Init+0x7c>)
 800da06:	6003      	str	r3, [r0, #0]
  RtcHandle.Init.HourFormat = RTC_HOURFORMAT_24;
 800da08:	2300      	movs	r3, #0
 800da0a:	6043      	str	r3, [r0, #4]
  RtcHandle.Init.AsynchPrediv = 124;
 800da0c:	227c      	movs	r2, #124	; 0x7c
 800da0e:	6082      	str	r2, [r0, #8]
  RtcHandle.Init.SynchPrediv = 1999;
 800da10:	4a18      	ldr	r2, [pc, #96]	; (800da74 <RTC_Init+0x80>)
 800da12:	60c2      	str	r2, [r0, #12]
  RtcHandle.Init.OutPut = RTC_OUTPUT_DISABLE;
 800da14:	6103      	str	r3, [r0, #16]
  RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800da16:	6143      	str	r3, [r0, #20]
  RtcHandle.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800da18:	6183      	str	r3, [r0, #24]
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800da1a:	f005 fb09 	bl	8013030 <HAL_RTC_Init>
 800da1e:	1e04      	subs	r4, r0, #0
 800da20:	d11f      	bne.n	800da62 <RTC_Init+0x6e>
  if (HAL_RTCEx_BKUPRead(&RtcHandle, RTC_BKP_DR1) != 0x32F2)
 800da22:	2101      	movs	r1, #1
 800da24:	4811      	ldr	r0, [pc, #68]	; (800da6c <RTC_Init+0x78>)
 800da26:	f005 fcab 	bl	8013380 <HAL_RTCEx_BKUPRead>
 800da2a:	4b13      	ldr	r3, [pc, #76]	; (800da78 <RTC_Init+0x84>)
 800da2c:	4298      	cmp	r0, r3
 800da2e:	d10e      	bne.n	800da4e <RTC_Init+0x5a>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST) != RESET)
 800da30:	4b0d      	ldr	r3, [pc, #52]	; (800da68 <RTC_Init+0x74>)
 800da32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da34:	011b      	lsls	r3, r3, #4
 800da36:	d502      	bpl.n	800da3e <RTC_Init+0x4a>
			bootStatus = POWER_ON_BOOT;
 800da38:	4b10      	ldr	r3, [pc, #64]	; (800da7c <RTC_Init+0x88>)
 800da3a:	2200      	movs	r2, #0
 800da3c:	701a      	strb	r2, [r3, #0]
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST) != RESET)
 800da3e:	4b0a      	ldr	r3, [pc, #40]	; (800da68 <RTC_Init+0x74>)
 800da40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da42:	015b      	lsls	r3, r3, #5
 800da44:	d505      	bpl.n	800da52 <RTC_Init+0x5e>
			bootStatus = RESET_BOOT;
 800da46:	4b0d      	ldr	r3, [pc, #52]	; (800da7c <RTC_Init+0x88>)
 800da48:	2201      	movs	r2, #1
 800da4a:	701a      	strb	r2, [r3, #0]
 800da4c:	e001      	b.n	800da52 <RTC_Init+0x5e>
    RTC_CalendarConfig();
 800da4e:	f7ff ff55 	bl	800d8fc <RTC_CalendarConfig>
  __HAL_RCC_CLEAR_RESET_FLAGS();	
 800da52:	4a05      	ldr	r2, [pc, #20]	; (800da68 <RTC_Init+0x74>)
 800da54:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800da56:	2380      	movs	r3, #128	; 0x80
 800da58:	045b      	lsls	r3, r3, #17
 800da5a:	430b      	orrs	r3, r1
 800da5c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800da5e:	0020      	movs	r0, r4
 800da60:	bd10      	pop	{r4, pc}
	if (HAL_RTC_Init(&RtcHandle) != HAL_OK)	return BOS_ERROR;
 800da62:	24ff      	movs	r4, #255	; 0xff
 800da64:	e7fb      	b.n	800da5e <RTC_Init+0x6a>
 800da66:	46c0      	nop			; (mov r8, r8)
 800da68:	40021000 	.word	0x40021000
 800da6c:	20006aa0 	.word	0x20006aa0
 800da70:	40002800 	.word	0x40002800
 800da74:	000007cf 	.word	0x000007cf
 800da78:	000032f2 	.word	0x000032f2
 800da7c:	20001804 	.word	0x20001804

0800da80 <BOS_CalendarConfig>:

/* --- BOS internal real-time clock and calendar configuration.
*/
BOS_Status BOS_CalendarConfig(uint8_t month, uint8_t day, uint16_t year, uint8_t weekday, uint8_t seconds, \
															uint8_t minutes, uint8_t hours, uint8_t AMPM, int8_t daylightsaving)
{
 800da80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da82:	46c6      	mov	lr, r8
 800da84:	b500      	push	{lr}
 800da86:	b086      	sub	sp, #24
 800da88:	ac0c      	add	r4, sp, #48	; 0x30
 800da8a:	7827      	ldrb	r7, [r4, #0]
 800da8c:	ac0d      	add	r4, sp, #52	; 0x34
 800da8e:	7824      	ldrb	r4, [r4, #0]
 800da90:	46a0      	mov	r8, r4
 800da92:	ac0e      	add	r4, sp, #56	; 0x38
 800da94:	7825      	ldrb	r5, [r4, #0]
 800da96:	ac0f      	add	r4, sp, #60	; 0x3c
 800da98:	7826      	ldrb	r6, [r4, #0]
  RTC_DateTypeDef sdatestructure;
  RTC_TimeTypeDef stimestructure;	
	
  /* Set Date */
  sdatestructure.Year = year-2000;
 800da9a:	ac05      	add	r4, sp, #20
 800da9c:	3230      	adds	r2, #48	; 0x30
 800da9e:	70e2      	strb	r2, [r4, #3]
  sdatestructure.Month = month;
 800daa0:	7060      	strb	r0, [r4, #1]
  sdatestructure.Date = day;
 800daa2:	70a1      	strb	r1, [r4, #2]
  sdatestructure.WeekDay = weekday;		// Todo - Calculate weekday later
 800daa4:	7023      	strb	r3, [r4, #0]
  
  if(HAL_RTC_SetDate(&RtcHandle,&sdatestructure,RTC_FORMAT_BIN) != HAL_OK)
 800daa6:	2200      	movs	r2, #0
 800daa8:	0021      	movs	r1, r4
 800daaa:	481f      	ldr	r0, [pc, #124]	; (800db28 <BOS_CalendarConfig+0xa8>)
 800daac:	f005 fb9e 	bl	80131ec <HAL_RTC_SetDate>
 800dab0:	2800      	cmp	r0, #0
 800dab2:	d134      	bne.n	800db1e <BOS_CalendarConfig+0x9e>
		return BOS_ERROR;

  /* Set Time */
  stimestructure.Hours = hours;
 800dab4:	466b      	mov	r3, sp
 800dab6:	701d      	strb	r5, [r3, #0]
  stimestructure.Minutes = minutes;
 800dab8:	4642      	mov	r2, r8
 800daba:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds = seconds; 
 800dabc:	709f      	strb	r7, [r3, #2]
	stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;		// Todo - Use this to make sure user does not change daylight settings again
 800dabe:	2300      	movs	r3, #0
 800dac0:	9304      	str	r3, [sp, #16]
//	else if (daylightsaving == DAYLIGHT_SUB1H)
//		stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_SUB1H;
	
	if (hours > 12)	BOS.hourformat = 24;
	
	if (AMPM == RTC_AM) {
 800dac2:	2e01      	cmp	r6, #1
 800dac4:	d01e      	beq.n	800db04 <BOS_CalendarConfig+0x84>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
		BOS.hourformat = 12;
	} else if (AMPM == RTC_PM) {
 800dac6:	2e02      	cmp	r6, #2
 800dac8:	d022      	beq.n	800db10 <BOS_CalendarConfig+0x90>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
		BOS.hourformat = 12;
	} else
		BOS.hourformat = 24;
 800daca:	4b18      	ldr	r3, [pc, #96]	; (800db2c <BOS_CalendarConfig+0xac>)
 800dacc:	2218      	movs	r2, #24
 800dace:	735a      	strb	r2, [r3, #13]
	
  if (HAL_RTC_SetTime(&RtcHandle, &stimestructure, RTC_FORMAT_BIN) != HAL_OK)
 800dad0:	2200      	movs	r2, #0
 800dad2:	4669      	mov	r1, sp
 800dad4:	4814      	ldr	r0, [pc, #80]	; (800db28 <BOS_CalendarConfig+0xa8>)
 800dad6:	f005 fb09 	bl	80130ec <HAL_RTC_SetTime>
 800dada:	1e04      	subs	r4, r0, #0
 800dadc:	d121      	bne.n	800db22 <BOS_CalendarConfig+0xa2>
		return BOS_ERROR;
	
	/* Save RTC hourformat and daylightsaving to EEPROM */
	EE_WriteVariable(_EE_PARAMS_RTC, ((uint16_t)BOS.hourformat<<8) | (uint16_t)BOS.buttons.minInterClickTime);
 800dade:	4a13      	ldr	r2, [pc, #76]	; (800db2c <BOS_CalendarConfig+0xac>)
 800dae0:	7b53      	ldrb	r3, [r2, #13]
 800dae2:	021b      	lsls	r3, r3, #8
 800dae4:	7911      	ldrb	r1, [r2, #4]
 800dae6:	4319      	orrs	r1, r3
 800dae8:	208d      	movs	r0, #141	; 0x8d
 800daea:	0040      	lsls	r0, r0, #1
 800daec:	f7f9 ffee 	bl	8007acc <EE_WriteVariable>

  /* Writes a data in a RTC Backup data Register1 */
  HAL_RTCEx_BKUPWrite(&RtcHandle, RTC_BKP_DR1, 0x32F2);
 800daf0:	4a0f      	ldr	r2, [pc, #60]	; (800db30 <BOS_CalendarConfig+0xb0>)
 800daf2:	2101      	movs	r1, #1
 800daf4:	480c      	ldr	r0, [pc, #48]	; (800db28 <BOS_CalendarConfig+0xa8>)
 800daf6:	f005 fc3d 	bl	8013374 <HAL_RTCEx_BKUPWrite>
	
	return BOS_OK;
}
 800dafa:	0020      	movs	r0, r4
 800dafc:	b006      	add	sp, #24
 800dafe:	bc80      	pop	{r7}
 800db00:	46b8      	mov	r8, r7
 800db02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		stimestructure.TimeFormat = RTC_HOURFORMAT12_AM;
 800db04:	466a      	mov	r2, sp
 800db06:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800db08:	4b08      	ldr	r3, [pc, #32]	; (800db2c <BOS_CalendarConfig+0xac>)
 800db0a:	220c      	movs	r2, #12
 800db0c:	735a      	strb	r2, [r3, #13]
 800db0e:	e7df      	b.n	800dad0 <BOS_CalendarConfig+0x50>
		stimestructure.TimeFormat = RTC_HOURFORMAT12_PM;
 800db10:	2340      	movs	r3, #64	; 0x40
 800db12:	466a      	mov	r2, sp
 800db14:	7213      	strb	r3, [r2, #8]
		BOS.hourformat = 12;
 800db16:	4b05      	ldr	r3, [pc, #20]	; (800db2c <BOS_CalendarConfig+0xac>)
 800db18:	220c      	movs	r2, #12
 800db1a:	735a      	strb	r2, [r3, #13]
 800db1c:	e7d8      	b.n	800dad0 <BOS_CalendarConfig+0x50>
		return BOS_ERROR;
 800db1e:	24ff      	movs	r4, #255	; 0xff
 800db20:	e7eb      	b.n	800dafa <BOS_CalendarConfig+0x7a>
		return BOS_ERROR;
 800db22:	24ff      	movs	r4, #255	; 0xff
 800db24:	e7e9      	b.n	800dafa <BOS_CalendarConfig+0x7a>
 800db26:	46c0      	nop			; (mov r8, r8)
 800db28:	20006aa0 	.word	0x20006aa0
 800db2c:	200066e4 	.word	0x200066e4
 800db30:	000032f2 	.word	0x000032f2

0800db34 <GetTimeDate>:
/*-----------------------------------------------------------*/

/* --- Get current RTC time and date.
*/
void GetTimeDate(void)
{
 800db34:	b530      	push	{r4, r5, lr}
 800db36:	b089      	sub	sp, #36	; 0x24
	RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructureget;
	
  HAL_RTC_GetTime(&RtcHandle, &stimestructureget, RTC_FORMAT_BIN);
 800db38:	4d16      	ldr	r5, [pc, #88]	; (800db94 <GetTimeDate+0x60>)
 800db3a:	2200      	movs	r2, #0
 800db3c:	a902      	add	r1, sp, #8
 800db3e:	0028      	movs	r0, r5
 800db40:	f005 fbd0 	bl	80132e4 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&RtcHandle, &sdatestructureget, RTC_FORMAT_BIN);
 800db44:	ac07      	add	r4, sp, #28
 800db46:	2200      	movs	r2, #0
 800db48:	0021      	movs	r1, r4
 800db4a:	0028      	movs	r0, r5
 800db4c:	f005 fbf0 	bl	8013330 <HAL_RTC_GetDate>
	
	BOS.time.ampm = (stimestructureget.TimeFormat >> 7) + 1;
 800db50:	4b11      	ldr	r3, [pc, #68]	; (800db98 <GetTimeDate+0x64>)
 800db52:	aa02      	add	r2, sp, #8
 800db54:	7a12      	ldrb	r2, [r2, #8]
 800db56:	09d2      	lsrs	r2, r2, #7
 800db58:	3201      	adds	r2, #1
 800db5a:	74da      	strb	r2, [r3, #19]
	BOS.time.msec = stimestructureget.SubSeconds / 2;
 800db5c:	9a03      	ldr	r2, [sp, #12]
 800db5e:	9201      	str	r2, [sp, #4]
 800db60:	0852      	lsrs	r2, r2, #1
 800db62:	81da      	strh	r2, [r3, #14]
	BOS.time.seconds = stimestructureget.Seconds;
 800db64:	aa02      	add	r2, sp, #8
 800db66:	7892      	ldrb	r2, [r2, #2]
 800db68:	741a      	strb	r2, [r3, #16]
	BOS.time.minutes = stimestructureget.Minutes;
 800db6a:	aa02      	add	r2, sp, #8
 800db6c:	7852      	ldrb	r2, [r2, #1]
 800db6e:	745a      	strb	r2, [r3, #17]
	BOS.time.hours = stimestructureget.Hours;
 800db70:	aa02      	add	r2, sp, #8
 800db72:	7812      	ldrb	r2, [r2, #0]
 800db74:	749a      	strb	r2, [r3, #18]
	BOS.date.day = sdatestructureget.Date;
 800db76:	78a2      	ldrb	r2, [r4, #2]
 800db78:	755a      	strb	r2, [r3, #21]
	BOS.date.month = sdatestructureget.Month;
 800db7a:	7862      	ldrb	r2, [r4, #1]
 800db7c:	759a      	strb	r2, [r3, #22]
	BOS.date.weekday = sdatestructureget.WeekDay;
 800db7e:	7822      	ldrb	r2, [r4, #0]
 800db80:	751a      	strb	r2, [r3, #20]
	BOS.date.year = sdatestructureget.Year + 2000;
 800db82:	78e2      	ldrb	r2, [r4, #3]
 800db84:	21fa      	movs	r1, #250	; 0xfa
 800db86:	00c9      	lsls	r1, r1, #3
 800db88:	468c      	mov	ip, r1
 800db8a:	4462      	add	r2, ip
 800db8c:	831a      	strh	r2, [r3, #24]
}
 800db8e:	b009      	add	sp, #36	; 0x24
 800db90:	bd30      	pop	{r4, r5, pc}
 800db92:	46c0      	nop			; (mov r8, r8)
 800db94:	20006aa0 	.word	0x20006aa0
 800db98:	200066e4 	.word	0x200066e4

0800db9c <TIM_USEC_Init>:


/*  Micro-seconds timebase init function - TIM14 (16-bit)
*/
void TIM_USEC_Init(void)
{
 800db9c:	b530      	push	{r4, r5, lr}
 800db9e:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM14_CLK_ENABLE();
 800dba0:	4a12      	ldr	r2, [pc, #72]	; (800dbec <TIM_USEC_Init+0x50>)
 800dba2:	69d1      	ldr	r1, [r2, #28]
 800dba4:	2080      	movs	r0, #128	; 0x80
 800dba6:	0040      	lsls	r0, r0, #1
 800dba8:	4301      	orrs	r1, r0
 800dbaa:	61d1      	str	r1, [r2, #28]
 800dbac:	69d3      	ldr	r3, [r2, #28]
 800dbae:	4003      	ands	r3, r0
 800dbb0:	9301      	str	r3, [sp, #4]
 800dbb2:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim14.Instance = TIM14;
 800dbb4:	4c0e      	ldr	r4, [pc, #56]	; (800dbf0 <TIM_USEC_Init+0x54>)
 800dbb6:	4b0f      	ldr	r3, [pc, #60]	; (800dbf4 <TIM_USEC_Init+0x58>)
 800dbb8:	6023      	str	r3, [r4, #0]
  htim14.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000000;
 800dbba:	f005 f951 	bl	8012e60 <HAL_RCC_GetPCLK1Freq>
 800dbbe:	490e      	ldr	r1, [pc, #56]	; (800dbf8 <TIM_USEC_Init+0x5c>)
 800dbc0:	f7f2 fac6 	bl	8000150 <__udivsi3>
 800dbc4:	6060      	str	r0, [r4, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dbc6:	2500      	movs	r5, #0
 800dbc8:	60a5      	str	r5, [r4, #8]
  htim14.Init.Period = 0xFFFF;
 800dbca:	4b0c      	ldr	r3, [pc, #48]	; (800dbfc <TIM_USEC_Init+0x60>)
 800dbcc:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim14);
 800dbce:	0020      	movs	r0, r4
 800dbd0:	f005 fc58 	bl	8013484 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dbd4:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dbd6:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim14, &sMasterConfig);
 800dbd8:	a902      	add	r1, sp, #8
 800dbda:	0020      	movs	r0, r4
 800dbdc:	f005 fc6c 	bl	80134b8 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim14);
 800dbe0:	0020      	movs	r0, r4
 800dbe2:	f005 fbd4 	bl	801338e <HAL_TIM_Base_Start>
}
 800dbe6:	b005      	add	sp, #20
 800dbe8:	bd30      	pop	{r4, r5, pc}
 800dbea:	46c0      	nop			; (mov r8, r8)
 800dbec:	40021000 	.word	0x40021000
 800dbf0:	20006afc 	.word	0x20006afc
 800dbf4:	40002000 	.word	0x40002000
 800dbf8:	000f4240 	.word	0x000f4240
 800dbfc:	0000ffff 	.word	0x0000ffff

0800dc00 <TIM_MSEC_Init>:
/*-----------------------------------------------------------*/

/*  Milli-seconds timebase init function - TIM15 (16-bit)
*/
void TIM_MSEC_Init(void)
{
 800dc00:	b530      	push	{r4, r5, lr}
 800dc02:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig;
	
	/* Peripheral clock enable */
	__TIM15_CLK_ENABLE();
 800dc04:	4a12      	ldr	r2, [pc, #72]	; (800dc50 <TIM_MSEC_Init+0x50>)
 800dc06:	6991      	ldr	r1, [r2, #24]
 800dc08:	2080      	movs	r0, #128	; 0x80
 800dc0a:	0240      	lsls	r0, r0, #9
 800dc0c:	4301      	orrs	r1, r0
 800dc0e:	6191      	str	r1, [r2, #24]
 800dc10:	6993      	ldr	r3, [r2, #24]
 800dc12:	4003      	ands	r3, r0
 800dc14:	9301      	str	r3, [sp, #4]
 800dc16:	9b01      	ldr	r3, [sp, #4]

	/* Peripheral configuration */
  htim15.Instance = TIM15;
 800dc18:	4c0e      	ldr	r4, [pc, #56]	; (800dc54 <TIM_MSEC_Init+0x54>)
 800dc1a:	4b0f      	ldr	r3, [pc, #60]	; (800dc58 <TIM_MSEC_Init+0x58>)
 800dc1c:	6023      	str	r3, [r4, #0]
  htim15.Init.Prescaler = HAL_RCC_GetPCLK1Freq()/1000;
 800dc1e:	f005 f91f 	bl	8012e60 <HAL_RCC_GetPCLK1Freq>
 800dc22:	21fa      	movs	r1, #250	; 0xfa
 800dc24:	0089      	lsls	r1, r1, #2
 800dc26:	f7f2 fa93 	bl	8000150 <__udivsi3>
 800dc2a:	6060      	str	r0, [r4, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc2c:	2500      	movs	r5, #0
 800dc2e:	60a5      	str	r5, [r4, #8]
  htim15.Init.Period = 0xFFFF;
 800dc30:	4b0a      	ldr	r3, [pc, #40]	; (800dc5c <TIM_MSEC_Init+0x5c>)
 800dc32:	60e3      	str	r3, [r4, #12]
  HAL_TIM_Base_Init(&htim15);
 800dc34:	0020      	movs	r0, r4
 800dc36:	f005 fc25 	bl	8013484 <HAL_TIM_Base_Init>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dc3a:	9502      	str	r5, [sp, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dc3c:	9503      	str	r5, [sp, #12]
  HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig);
 800dc3e:	a902      	add	r1, sp, #8
 800dc40:	0020      	movs	r0, r4
 800dc42:	f005 fc39 	bl	80134b8 <HAL_TIMEx_MasterConfigSynchronization>
	
	HAL_TIM_Base_Start(&htim15);
 800dc46:	0020      	movs	r0, r4
 800dc48:	f005 fba1 	bl	801338e <HAL_TIM_Base_Start>
}
 800dc4c:	b005      	add	sp, #20
 800dc4e:	bd30      	pop	{r4, r5, pc}
 800dc50:	40021000 	.word	0x40021000
 800dc54:	20006ac0 	.word	0x20006ac0
 800dc58:	40014000 	.word	0x40014000
 800dc5c:	0000ffff 	.word	0x0000ffff

0800dc60 <StartMicroDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start micro-second delay counter --- 
*/
void StartMicroDelay(uint16_t Delay)
{
 800dc60:	b510      	push	{r4, lr}
 800dc62:	0004      	movs	r4, r0
	uint32_t t0=0;

	portENTER_CRITICAL();
 800dc64:	f002 fe50 	bl	8010908 <vPortEnterCritical>
	
	if (Delay)
 800dc68:	2c00      	cmp	r4, #0
 800dc6a:	d006      	beq.n	800dc7a <StartMicroDelay+0x1a>
	{
		t0 = htim14.Instance->CNT;
 800dc6c:	4b04      	ldr	r3, [pc, #16]	; (800dc80 <StartMicroDelay+0x20>)
 800dc6e:	681a      	ldr	r2, [r3, #0]
 800dc70:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim14.Instance->CNT - t0 <= Delay) {};
 800dc72:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800dc74:	1a5b      	subs	r3, r3, r1
 800dc76:	42a3      	cmp	r3, r4
 800dc78:	d9fb      	bls.n	800dc72 <StartMicroDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800dc7a:	f002 fe51 	bl	8010920 <vPortExitCritical>
}
 800dc7e:	bd10      	pop	{r4, pc}
 800dc80:	20006afc 	.word	0x20006afc

0800dc84 <StartMilliDelay>:
/*-----------------------------------------------------------*/

/* --- Load and start milli-second delay counter --- 
*/
void StartMilliDelay(uint16_t Delay)
{
 800dc84:	b510      	push	{r4, lr}
 800dc86:	0004      	movs	r4, r0
	uint32_t t0=0;
	
	portENTER_CRITICAL();
 800dc88:	f002 fe3e 	bl	8010908 <vPortEnterCritical>
	
	if (Delay)
 800dc8c:	2c00      	cmp	r4, #0
 800dc8e:	d006      	beq.n	800dc9e <StartMilliDelay+0x1a>
	{
		t0 = htim15.Instance->CNT;
 800dc90:	4b04      	ldr	r3, [pc, #16]	; (800dca4 <StartMilliDelay+0x20>)
 800dc92:	681a      	ldr	r2, [r3, #0]
 800dc94:	6a51      	ldr	r1, [r2, #36]	; 0x24

		while(htim15.Instance->CNT - t0 <= Delay) {};
 800dc96:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800dc98:	1a5b      	subs	r3, r3, r1
 800dc9a:	42a3      	cmp	r3, r4
 800dc9c:	d9fb      	bls.n	800dc96 <StartMilliDelay+0x12>
	}
	
	portEXIT_CRITICAL();
 800dc9e:	f002 fe3f 	bl	8010920 <vPortExitCritical>
}
 800dca2:	bd10      	pop	{r4, pc}
 800dca4:	20006ac0 	.word	0x20006ac0

0800dca8 <MX_USART1_UART_Init>:
FlagStatus UartTxReady = RESET;

/* USART1 init function */
#ifdef _Usart1
void MX_USART1_UART_Init(void)
{
 800dca8:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800dcaa:	4809      	ldr	r0, [pc, #36]	; (800dcd0 <MX_USART1_UART_Init+0x28>)
 800dcac:	4b09      	ldr	r3, [pc, #36]	; (800dcd4 <MX_USART1_UART_Init+0x2c>)
 800dcae:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dcb0:	23e1      	movs	r3, #225	; 0xe1
 800dcb2:	031b      	lsls	r3, r3, #12
 800dcb4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800dcba:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800dcbc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800dcbe:	220c      	movs	r2, #12
 800dcc0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dcc2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800dcc4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dcc6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dcc8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart1);
 800dcca:	f006 f879 	bl	8013dc0 <HAL_UART_Init>
	#if _P5pol_reversed
		huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart1);
	#endif	
}
 800dcce:	bd10      	pop	{r4, pc}
 800dcd0:	20006880 	.word	0x20006880
 800dcd4:	40013800 	.word	0x40013800

0800dcd8 <MX_USART2_UART_Init>:

/*-----------------------------------------------------------*/	
/* USART2 init function */
#ifdef _Usart2
void MX_USART2_UART_Init(void)
{
 800dcd8:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800dcda:	4809      	ldr	r0, [pc, #36]	; (800dd00 <MX_USART2_UART_Init+0x28>)
 800dcdc:	4b09      	ldr	r3, [pc, #36]	; (800dd04 <MX_USART2_UART_Init+0x2c>)
 800dcde:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dce0:	23e1      	movs	r3, #225	; 0xe1
 800dce2:	031b      	lsls	r3, r3, #12
 800dce4:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800dce6:	2300      	movs	r3, #0
 800dce8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800dcea:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800dcec:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800dcee:	220c      	movs	r2, #12
 800dcf0:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dcf2:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800dcf4:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dcf6:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dcf8:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart2);
 800dcfa:	f006 f861 	bl	8013dc0 <HAL_UART_Init>
	#if _P2pol_reversed
		huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart2.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
		HAL_UART_Init(&huart2);
	#endif	
}
 800dcfe:	bd10      	pop	{r4, pc}
 800dd00:	200069d0 	.word	0x200069d0
 800dd04:	40004400 	.word	0x40004400

0800dd08 <MX_USART3_UART_Init>:
#endif

/* USART3 init function */
#ifdef _Usart3
void MX_USART3_UART_Init(void)
{
 800dd08:	b510      	push	{r4, lr}
  huart3.Instance = USART3;
 800dd0a:	4809      	ldr	r0, [pc, #36]	; (800dd30 <MX_USART3_UART_Init+0x28>)
 800dd0c:	4b09      	ldr	r3, [pc, #36]	; (800dd34 <MX_USART3_UART_Init+0x2c>)
 800dd0e:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dd10:	23e1      	movs	r3, #225	; 0xe1
 800dd12:	031b      	lsls	r3, r3, #12
 800dd14:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800dd16:	2300      	movs	r3, #0
 800dd18:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800dd1a:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800dd1c:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800dd1e:	220c      	movs	r2, #12
 800dd20:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dd22:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800dd24:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dd26:	6203      	str	r3, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dd28:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart3);
 800dd2a:	f006 f849 	bl	8013dc0 <HAL_UART_Init>
	#if _P4pol_reversed
		huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart3);
	#endif	
}
 800dd2e:	bd10      	pop	{r4, pc}
 800dd30:	200067a0 	.word	0x200067a0
 800dd34:	40004800 	.word	0x40004800

0800dd38 <MX_USART4_UART_Init>:
#endif

/* USART4 init function */
#ifdef _Usart4
void MX_USART4_UART_Init(void)
{
 800dd38:	b510      	push	{r4, lr}
  huart4.Instance = USART4;
 800dd3a:	4809      	ldr	r0, [pc, #36]	; (800dd60 <MX_USART4_UART_Init+0x28>)
 800dd3c:	4b09      	ldr	r3, [pc, #36]	; (800dd64 <MX_USART4_UART_Init+0x2c>)
 800dd3e:	6003      	str	r3, [r0, #0]
  huart4.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dd40:	23e1      	movs	r3, #225	; 0xe1
 800dd42:	031b      	lsls	r3, r3, #12
 800dd44:	6043      	str	r3, [r0, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800dd46:	2300      	movs	r3, #0
 800dd48:	6083      	str	r3, [r0, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800dd4a:	60c3      	str	r3, [r0, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800dd4c:	6103      	str	r3, [r0, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800dd4e:	220c      	movs	r2, #12
 800dd50:	6142      	str	r2, [r0, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dd52:	6183      	str	r3, [r0, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800dd54:	61c3      	str	r3, [r0, #28]
  huart4.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dd56:	6203      	str	r3, [r0, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dd58:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart4);
 800dd5a:	f006 f831 	bl	8013dc0 <HAL_UART_Init>
	#if _P1pol_reversed
		huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart4);
	#endif	
}
 800dd5e:	bd10      	pop	{r4, pc}
 800dd60:	20006960 	.word	0x20006960
 800dd64:	40004c00 	.word	0x40004c00

0800dd68 <MX_USART5_UART_Init>:
#endif

/* USART5 init function */
#ifdef _Usart5
void MX_USART5_UART_Init(void)
{
 800dd68:	b510      	push	{r4, lr}
  huart5.Instance = USART5;
 800dd6a:	4c0e      	ldr	r4, [pc, #56]	; (800dda4 <MX_USART5_UART_Init+0x3c>)
 800dd6c:	4b0e      	ldr	r3, [pc, #56]	; (800dda8 <MX_USART5_UART_Init+0x40>)
 800dd6e:	6023      	str	r3, [r4, #0]
  huart5.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800dd70:	23e1      	movs	r3, #225	; 0xe1
 800dd72:	031b      	lsls	r3, r3, #12
 800dd74:	6063      	str	r3, [r4, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800dd76:	2300      	movs	r3, #0
 800dd78:	60a3      	str	r3, [r4, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800dd7a:	60e3      	str	r3, [r4, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800dd7c:	6123      	str	r3, [r4, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800dd7e:	220c      	movs	r2, #12
 800dd80:	6162      	str	r2, [r4, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800dd82:	61a3      	str	r3, [r4, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800dd84:	61e3      	str	r3, [r4, #28]
  huart5.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800dd86:	6223      	str	r3, [r4, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800dd88:	6263      	str	r3, [r4, #36]	; 0x24
	HAL_UART_Init(&huart5);
 800dd8a:	0020      	movs	r0, r4
 800dd8c:	f006 f818 	bl	8013dc0 <HAL_UART_Init>
	#if _P6pol_reversed	
		huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800dd90:	2308      	movs	r3, #8
 800dd92:	6263      	str	r3, [r4, #36]	; 0x24
		huart5.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800dd94:	2380      	movs	r3, #128	; 0x80
 800dd96:	021b      	lsls	r3, r3, #8
 800dd98:	6363      	str	r3, [r4, #52]	; 0x34
	  HAL_UART_Init(&huart5);
 800dd9a:	0020      	movs	r0, r4
 800dd9c:	f006 f810 	bl	8013dc0 <HAL_UART_Init>
	#endif	
}
 800dda0:	bd10      	pop	{r4, pc}
 800dda2:	46c0      	nop			; (mov r8, r8)
 800dda4:	20006810 	.word	0x20006810
 800dda8:	40005000 	.word	0x40005000

0800ddac <MX_USART6_UART_Init>:
#endif

/* USART6 init function */
#ifdef _Usart6
void MX_USART6_UART_Init(void)
{
 800ddac:	b510      	push	{r4, lr}
  huart6.Instance = USART6;
 800ddae:	4809      	ldr	r0, [pc, #36]	; (800ddd4 <MX_USART6_UART_Init+0x28>)
 800ddb0:	4b09      	ldr	r3, [pc, #36]	; (800ddd8 <MX_USART6_UART_Init+0x2c>)
 800ddb2:	6003      	str	r3, [r0, #0]
  huart6.Init.BaudRate = DEF_ARRAY_BAUDRATE;
 800ddb4:	23e1      	movs	r3, #225	; 0xe1
 800ddb6:	031b      	lsls	r3, r3, #12
 800ddb8:	6043      	str	r3, [r0, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	6083      	str	r3, [r0, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800ddbe:	60c3      	str	r3, [r0, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800ddc0:	6103      	str	r3, [r0, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800ddc2:	220c      	movs	r2, #12
 800ddc4:	6142      	str	r2, [r0, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ddc6:	6183      	str	r3, [r0, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800ddc8:	61c3      	str	r3, [r0, #28]
  huart6.Init.OneBitSampling = UART_ONEBIT_SAMPLING_DISABLED;
 800ddca:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ddcc:	6243      	str	r3, [r0, #36]	; 0x24
	HAL_UART_Init(&huart6);
 800ddce:	f005 fff7 	bl	8013dc0 <HAL_UART_Init>
	#if _P3pol_reversed	
		huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
		huart6.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
	  HAL_UART_Init(&huart6);
	#endif	
}
 800ddd2:	bd10      	pop	{r4, pc}
 800ddd4:	200068f0 	.word	0x200068f0
 800ddd8:	40011400 	.word	0x40011400

0800dddc <HAL_UART_MspInit>:
#endif

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800dddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ddde:	46ce      	mov	lr, r9
 800dde0:	4647      	mov	r7, r8
 800dde2:	b580      	push	{r7, lr}
 800dde4:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 800dde6:	6803      	ldr	r3, [r0, #0]
 800dde8:	4a96      	ldr	r2, [pc, #600]	; (800e044 <HAL_UART_MspInit+0x268>)
 800ddea:	4293      	cmp	r3, r2
 800ddec:	d016      	beq.n	800de1c <HAL_UART_MspInit+0x40>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
	#endif
  }
  else if(huart->Instance==USART2)
 800ddee:	4a96      	ldr	r2, [pc, #600]	; (800e048 <HAL_UART_MspInit+0x26c>)
 800ddf0:	4293      	cmp	r3, r2
 800ddf2:	d041      	beq.n	800de78 <HAL_UART_MspInit+0x9c>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
	#endif
  }
  else if(huart->Instance==USART3)
 800ddf4:	4a95      	ldr	r2, [pc, #596]	; (800e04c <HAL_UART_MspInit+0x270>)
 800ddf6:	4293      	cmp	r3, r2
 800ddf8:	d06a      	beq.n	800ded0 <HAL_UART_MspInit+0xf4>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART4)
 800ddfa:	4a95      	ldr	r2, [pc, #596]	; (800e050 <HAL_UART_MspInit+0x274>)
 800ddfc:	4293      	cmp	r3, r2
 800ddfe:	d100      	bne.n	800de02 <HAL_UART_MspInit+0x26>
 800de00:	e096      	b.n	800df30 <HAL_UART_MspInit+0x154>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART5)
 800de02:	4a94      	ldr	r2, [pc, #592]	; (800e054 <HAL_UART_MspInit+0x278>)
 800de04:	4293      	cmp	r3, r2
 800de06:	d100      	bne.n	800de0a <HAL_UART_MspInit+0x2e>
 800de08:	e0bf      	b.n	800df8a <HAL_UART_MspInit+0x1ae>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
  else if(huart->Instance==USART6)
 800de0a:	4a93      	ldr	r2, [pc, #588]	; (800e058 <HAL_UART_MspInit+0x27c>)
 800de0c:	4293      	cmp	r3, r2
 800de0e:	d100      	bne.n	800de12 <HAL_UART_MspInit+0x36>
 800de10:	e0e9      	b.n	800dfe6 <HAL_UART_MspInit+0x20a>
    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
	#endif
  }
}
 800de12:	b00d      	add	sp, #52	; 0x34
 800de14:	bcc0      	pop	{r6, r7}
 800de16:	46b9      	mov	r9, r7
 800de18:	46b0      	mov	r8, r6
 800de1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __USART1_CLK_ENABLE();
 800de1c:	4a8f      	ldr	r2, [pc, #572]	; (800e05c <HAL_UART_MspInit+0x280>)
 800de1e:	6991      	ldr	r1, [r2, #24]
 800de20:	2080      	movs	r0, #128	; 0x80
 800de22:	01c0      	lsls	r0, r0, #7
 800de24:	4301      	orrs	r1, r0
 800de26:	6191      	str	r1, [r2, #24]
 800de28:	6993      	ldr	r3, [r2, #24]
 800de2a:	4003      	ands	r3, r0
 800de2c:	9301      	str	r3, [sp, #4]
 800de2e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USART1_TX_PIN; 
 800de30:	2380      	movs	r3, #128	; 0x80
 800de32:	009b      	lsls	r3, r3, #2
 800de34:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de36:	2702      	movs	r7, #2
 800de38:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de3a:	2401      	movs	r4, #1
 800de3c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800de3e:	2603      	movs	r6, #3
 800de40:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;	
 800de42:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_TX_PORT, &GPIO_InitStruct);
 800de44:	2590      	movs	r5, #144	; 0x90
 800de46:	05ed      	lsls	r5, r5, #23
 800de48:	a907      	add	r1, sp, #28
 800de4a:	0028      	movs	r0, r5
 800de4c:	f003 febc 	bl	8011bc8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART1_RX_PIN;  
 800de50:	2380      	movs	r3, #128	; 0x80
 800de52:	00db      	lsls	r3, r3, #3
 800de54:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de56:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de58:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800de5a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART1_AF;
 800de5c:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART1_RX_PORT, &GPIO_InitStruct);
 800de5e:	a907      	add	r1, sp, #28
 800de60:	0028      	movs	r0, r5
 800de62:	f003 feb1 	bl	8011bc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800de66:	2200      	movs	r2, #0
 800de68:	2101      	movs	r1, #1
 800de6a:	201b      	movs	r0, #27
 800de6c:	f002 fed6 	bl	8010c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800de70:	201b      	movs	r0, #27
 800de72:	f002 ff05 	bl	8010c80 <HAL_NVIC_EnableIRQ>
 800de76:	e7cc      	b.n	800de12 <HAL_UART_MspInit+0x36>
    __USART2_CLK_ENABLE();
 800de78:	4a78      	ldr	r2, [pc, #480]	; (800e05c <HAL_UART_MspInit+0x280>)
 800de7a:	69d1      	ldr	r1, [r2, #28]
 800de7c:	2080      	movs	r0, #128	; 0x80
 800de7e:	0280      	lsls	r0, r0, #10
 800de80:	4301      	orrs	r1, r0
 800de82:	61d1      	str	r1, [r2, #28]
 800de84:	69d3      	ldr	r3, [r2, #28]
 800de86:	4003      	ands	r3, r0
 800de88:	9302      	str	r3, [sp, #8]
 800de8a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART2_TX_PIN; 
 800de8c:	2304      	movs	r3, #4
 800de8e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de90:	2702      	movs	r7, #2
 800de92:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800de94:	2401      	movs	r4, #1
 800de96:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800de98:	2603      	movs	r6, #3
 800de9a:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;	
 800de9c:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_TX_PORT, &GPIO_InitStruct);
 800de9e:	2590      	movs	r5, #144	; 0x90
 800dea0:	05ed      	lsls	r5, r5, #23
 800dea2:	a907      	add	r1, sp, #28
 800dea4:	0028      	movs	r0, r5
 800dea6:	f003 fe8f 	bl	8011bc8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART2_RX_PIN;  
 800deaa:	2308      	movs	r3, #8
 800deac:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800deae:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800deb0:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800deb2:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART2_AF;
 800deb4:	940b      	str	r4, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART2_RX_PORT, &GPIO_InitStruct);
 800deb6:	a907      	add	r1, sp, #28
 800deb8:	0028      	movs	r0, r5
 800deba:	f003 fe85 	bl	8011bc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800debe:	2200      	movs	r2, #0
 800dec0:	2101      	movs	r1, #1
 800dec2:	201c      	movs	r0, #28
 800dec4:	f002 feaa 	bl	8010c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800dec8:	201c      	movs	r0, #28
 800deca:	f002 fed9 	bl	8010c80 <HAL_NVIC_EnableIRQ>
 800dece:	e7a0      	b.n	800de12 <HAL_UART_MspInit+0x36>
    __USART3_CLK_ENABLE();
 800ded0:	4a62      	ldr	r2, [pc, #392]	; (800e05c <HAL_UART_MspInit+0x280>)
 800ded2:	69d1      	ldr	r1, [r2, #28]
 800ded4:	2080      	movs	r0, #128	; 0x80
 800ded6:	02c0      	lsls	r0, r0, #11
 800ded8:	4301      	orrs	r1, r0
 800deda:	61d1      	str	r1, [r2, #28]
 800dedc:	69d3      	ldr	r3, [r2, #28]
 800dede:	4003      	ands	r3, r0
 800dee0:	9303      	str	r3, [sp, #12]
 800dee2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USART3_TX_PIN; 
 800dee4:	2380      	movs	r3, #128	; 0x80
 800dee6:	00db      	lsls	r3, r3, #3
 800dee8:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800deea:	2302      	movs	r3, #2
 800deec:	4698      	mov	r8, r3
 800deee:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800def0:	2701      	movs	r7, #1
 800def2:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800def4:	2603      	movs	r6, #3
 800def6:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;	
 800def8:	2504      	movs	r5, #4
 800defa:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_TX_PORT, &GPIO_InitStruct);
 800defc:	4c58      	ldr	r4, [pc, #352]	; (800e060 <HAL_UART_MspInit+0x284>)
 800defe:	a907      	add	r1, sp, #28
 800df00:	0020      	movs	r0, r4
 800df02:	f003 fe61 	bl	8011bc8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART3_RX_PIN;  
 800df06:	2380      	movs	r3, #128	; 0x80
 800df08:	011b      	lsls	r3, r3, #4
 800df0a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df0c:	4643      	mov	r3, r8
 800df0e:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800df10:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800df12:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART3_AF;
 800df14:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART3_RX_PORT, &GPIO_InitStruct);
 800df16:	a907      	add	r1, sp, #28
 800df18:	0020      	movs	r0, r4
 800df1a:	f003 fe55 	bl	8011bc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800df1e:	2200      	movs	r2, #0
 800df20:	2101      	movs	r1, #1
 800df22:	201d      	movs	r0, #29
 800df24:	f002 fe7a 	bl	8010c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800df28:	201d      	movs	r0, #29
 800df2a:	f002 fea9 	bl	8010c80 <HAL_NVIC_EnableIRQ>
 800df2e:	e770      	b.n	800de12 <HAL_UART_MspInit+0x36>
    __USART4_CLK_ENABLE();
 800df30:	4a4a      	ldr	r2, [pc, #296]	; (800e05c <HAL_UART_MspInit+0x280>)
 800df32:	69d1      	ldr	r1, [r2, #28]
 800df34:	2080      	movs	r0, #128	; 0x80
 800df36:	0300      	lsls	r0, r0, #12
 800df38:	4301      	orrs	r1, r0
 800df3a:	61d1      	str	r1, [r2, #28]
 800df3c:	69d3      	ldr	r3, [r2, #28]
 800df3e:	4003      	ands	r3, r0
 800df40:	9304      	str	r3, [sp, #16]
 800df42:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = USART4_TX_PIN; 
 800df44:	2401      	movs	r4, #1
 800df46:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df48:	2502      	movs	r5, #2
 800df4a:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800df4c:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800df4e:	2303      	movs	r3, #3
 800df50:	4698      	mov	r8, r3
 800df52:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;	
 800df54:	2704      	movs	r7, #4
 800df56:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_TX_PORT, &GPIO_InitStruct);
 800df58:	2690      	movs	r6, #144	; 0x90
 800df5a:	05f6      	lsls	r6, r6, #23
 800df5c:	a907      	add	r1, sp, #28
 800df5e:	0030      	movs	r0, r6
 800df60:	f003 fe32 	bl	8011bc8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART4_RX_PIN;  
 800df64:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df66:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800df68:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800df6a:	4643      	mov	r3, r8
 800df6c:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART4_AF;
 800df6e:	970b      	str	r7, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART4_RX_PORT, &GPIO_InitStruct);
 800df70:	a907      	add	r1, sp, #28
 800df72:	0030      	movs	r0, r6
 800df74:	f003 fe28 	bl	8011bc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800df78:	2200      	movs	r2, #0
 800df7a:	2101      	movs	r1, #1
 800df7c:	201d      	movs	r0, #29
 800df7e:	f002 fe4d 	bl	8010c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800df82:	201d      	movs	r0, #29
 800df84:	f002 fe7c 	bl	8010c80 <HAL_NVIC_EnableIRQ>
 800df88:	e743      	b.n	800de12 <HAL_UART_MspInit+0x36>
    __USART5_CLK_ENABLE();
 800df8a:	4a34      	ldr	r2, [pc, #208]	; (800e05c <HAL_UART_MspInit+0x280>)
 800df8c:	69d1      	ldr	r1, [r2, #28]
 800df8e:	2080      	movs	r0, #128	; 0x80
 800df90:	0340      	lsls	r0, r0, #13
 800df92:	4301      	orrs	r1, r0
 800df94:	61d1      	str	r1, [r2, #28]
 800df96:	69d3      	ldr	r3, [r2, #28]
 800df98:	4003      	ands	r3, r0
 800df9a:	9305      	str	r3, [sp, #20]
 800df9c:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = USART5_TX_PIN; 
 800df9e:	2308      	movs	r3, #8
 800dfa0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfa2:	3b06      	subs	r3, #6
 800dfa4:	4698      	mov	r8, r3
 800dfa6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dfa8:	2701      	movs	r7, #1
 800dfaa:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dfac:	2603      	movs	r6, #3
 800dfae:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;	
 800dfb0:	2504      	movs	r5, #4
 800dfb2:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_TX_PORT, &GPIO_InitStruct);
 800dfb4:	4c2a      	ldr	r4, [pc, #168]	; (800e060 <HAL_UART_MspInit+0x284>)
 800dfb6:	a907      	add	r1, sp, #28
 800dfb8:	0020      	movs	r0, r4
 800dfba:	f003 fe05 	bl	8011bc8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART5_RX_PIN;  
 800dfbe:	2310      	movs	r3, #16
 800dfc0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfc2:	4643      	mov	r3, r8
 800dfc4:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800dfc6:	9709      	str	r7, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800dfc8:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART5_AF;
 800dfca:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART5_RX_PORT, &GPIO_InitStruct);
 800dfcc:	a907      	add	r1, sp, #28
 800dfce:	0020      	movs	r0, r4
 800dfd0:	f003 fdfa 	bl	8011bc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	2101      	movs	r1, #1
 800dfd8:	201d      	movs	r0, #29
 800dfda:	f002 fe1f 	bl	8010c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800dfde:	201d      	movs	r0, #29
 800dfe0:	f002 fe4e 	bl	8010c80 <HAL_NVIC_EnableIRQ>
 800dfe4:	e715      	b.n	800de12 <HAL_UART_MspInit+0x36>
    __USART6_CLK_ENABLE();
 800dfe6:	4b1d      	ldr	r3, [pc, #116]	; (800e05c <HAL_UART_MspInit+0x280>)
 800dfe8:	699a      	ldr	r2, [r3, #24]
 800dfea:	2420      	movs	r4, #32
 800dfec:	4322      	orrs	r2, r4
 800dfee:	619a      	str	r2, [r3, #24]
 800dff0:	699b      	ldr	r3, [r3, #24]
 800dff2:	4023      	ands	r3, r4
 800dff4:	9306      	str	r3, [sp, #24]
 800dff6:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = USART6_TX_PIN; 
 800dff8:	2310      	movs	r3, #16
 800dffa:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dffc:	3b0e      	subs	r3, #14
 800dffe:	4699      	mov	r9, r3
 800e000:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e002:	3b01      	subs	r3, #1
 800e004:	4698      	mov	r8, r3
 800e006:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e008:	2703      	movs	r7, #3
 800e00a:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;	
 800e00c:	2605      	movs	r6, #5
 800e00e:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_TX_PORT, &GPIO_InitStruct);
 800e010:	2590      	movs	r5, #144	; 0x90
 800e012:	05ed      	lsls	r5, r5, #23
 800e014:	a907      	add	r1, sp, #28
 800e016:	0028      	movs	r0, r5
 800e018:	f003 fdd6 	bl	8011bc8 <HAL_GPIO_Init>
		GPIO_InitStruct.Pin = USART6_RX_PIN;  
 800e01c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e01e:	464b      	mov	r3, r9
 800e020:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800e022:	4643      	mov	r3, r8
 800e024:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800e026:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = USART6_AF;
 800e028:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(USART6_RX_PORT, &GPIO_InitStruct);
 800e02a:	a907      	add	r1, sp, #28
 800e02c:	0028      	movs	r0, r5
 800e02e:	f003 fdcb 	bl	8011bc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 1, 0);
 800e032:	2200      	movs	r2, #0
 800e034:	2101      	movs	r1, #1
 800e036:	201d      	movs	r0, #29
 800e038:	f002 fdf0 	bl	8010c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 800e03c:	201d      	movs	r0, #29
 800e03e:	f002 fe1f 	bl	8010c80 <HAL_NVIC_EnableIRQ>
}
 800e042:	e6e6      	b.n	800de12 <HAL_UART_MspInit+0x36>
 800e044:	40013800 	.word	0x40013800
 800e048:	40004400 	.word	0x40004400
 800e04c:	40004800 	.word	0x40004800
 800e050:	40004c00 	.word	0x40004c00
 800e054:	40005000 	.word	0x40005000
 800e058:	40011400 	.word	0x40011400
 800e05c:	40021000 	.word	0x40021000
 800e060:	48000400 	.word	0x48000400

0800e064 <GetUart>:

/* --- Get the UART for a given port. 
*/
UART_HandleTypeDef* GetUart(uint8_t port)
{
	switch (port)
 800e064:	2806      	cmp	r0, #6
 800e066:	d80d      	bhi.n	800e084 <GetUart+0x20>
 800e068:	0080      	lsls	r0, r0, #2
 800e06a:	4b08      	ldr	r3, [pc, #32]	; (800e08c <GetUart+0x28>)
 800e06c:	581b      	ldr	r3, [r3, r0]
 800e06e:	469f      	mov	pc, r3
		case P5 :
			return P5uart;
	#endif
	#ifdef _P6
		case P6 :
			return P6uart;
 800e070:	4807      	ldr	r0, [pc, #28]	; (800e090 <GetUart+0x2c>)
			return P10uart;
	#endif
		default:
			return 0;
	}		
}
 800e072:	4770      	bx	lr
			return P3uart;
 800e074:	4807      	ldr	r0, [pc, #28]	; (800e094 <GetUart+0x30>)
 800e076:	e7fc      	b.n	800e072 <GetUart+0xe>
			return P4uart;
 800e078:	4807      	ldr	r0, [pc, #28]	; (800e098 <GetUart+0x34>)
 800e07a:	e7fa      	b.n	800e072 <GetUart+0xe>
			return P5uart;
 800e07c:	4807      	ldr	r0, [pc, #28]	; (800e09c <GetUart+0x38>)
 800e07e:	e7f8      	b.n	800e072 <GetUart+0xe>
			return P6uart;
 800e080:	4807      	ldr	r0, [pc, #28]	; (800e0a0 <GetUart+0x3c>)
 800e082:	e7f6      	b.n	800e072 <GetUart+0xe>
			return 0;
 800e084:	2000      	movs	r0, #0
 800e086:	e7f4      	b.n	800e072 <GetUart+0xe>
			return P1uart;	
 800e088:	4806      	ldr	r0, [pc, #24]	; (800e0a4 <GetUart+0x40>)
 800e08a:	e7f2      	b.n	800e072 <GetUart+0xe>
 800e08c:	0801d484 	.word	0x0801d484
 800e090:	200069d0 	.word	0x200069d0
 800e094:	200068f0 	.word	0x200068f0
 800e098:	200067a0 	.word	0x200067a0
 800e09c:	20006880 	.word	0x20006880
 800e0a0:	20006810 	.word	0x20006810
 800e0a4:	20006960 	.word	0x20006960

0800e0a8 <writePxMutex>:
{
 800e0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0aa:	46ce      	mov	lr, r9
 800e0ac:	b500      	push	{lr}
 800e0ae:	b082      	sub	sp, #8
 800e0b0:	0006      	movs	r6, r0
 800e0b2:	000f      	movs	r7, r1
 800e0b4:	4691      	mov	r9, r2
 800e0b6:	9301      	str	r3, [sp, #4]
	if (GetUart(port) != NULL) {
 800e0b8:	f7ff ffd4 	bl	800e064 <GetUart>
 800e0bc:	0005      	movs	r5, r0
	HAL_StatusTypeDef result = HAL_ERROR;
 800e0be:	2401      	movs	r4, #1
	if (GetUart(port) != NULL) {
 800e0c0:	2800      	cmp	r0, #0
 800e0c2:	d016      	beq.n	800e0f2 <writePxMutex+0x4a>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e0c4:	00b3      	lsls	r3, r6, #2
 800e0c6:	4a0d      	ldr	r2, [pc, #52]	; (800e0fc <writePxMutex+0x54>)
 800e0c8:	5898      	ldr	r0, [r3, r2]
 800e0ca:	9901      	ldr	r1, [sp, #4]
 800e0cc:	f000 fd36 	bl	800eb3c <osSemaphoreWait>
 800e0d0:	2800      	cmp	r0, #0
 800e0d2:	d10e      	bne.n	800e0f2 <writePxMutex+0x4a>
				result = HAL_UART_Transmit(GetUart(port), (uint8_t *)buffer, n, portTimeout);
 800e0d4:	9b08      	ldr	r3, [sp, #32]
 800e0d6:	464a      	mov	r2, r9
 800e0d8:	0039      	movs	r1, r7
 800e0da:	0028      	movs	r0, r5
 800e0dc:	f005 fdc4 	bl	8013c68 <HAL_UART_Transmit>
 800e0e0:	1e04      	subs	r4, r0, #0
			while( result != HAL_OK && result !=  HAL_TIMEOUT ) {
 800e0e2:	d001      	beq.n	800e0e8 <writePxMutex+0x40>
 800e0e4:	2803      	cmp	r0, #3
 800e0e6:	d1f5      	bne.n	800e0d4 <writePxMutex+0x2c>
			osSemaphoreRelease(PxTxSemaphoreHandle[port]);
 800e0e8:	00b6      	lsls	r6, r6, #2
 800e0ea:	4b04      	ldr	r3, [pc, #16]	; (800e0fc <writePxMutex+0x54>)
 800e0ec:	58f0      	ldr	r0, [r6, r3]
 800e0ee:	f000 fd53 	bl	800eb98 <osSemaphoreRelease>
}
 800e0f2:	0020      	movs	r0, r4
 800e0f4:	b002      	add	sp, #8
 800e0f6:	bc80      	pop	{r7}
 800e0f8:	46b9      	mov	r9, r7
 800e0fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e0fc:	20006764 	.word	0x20006764

0800e100 <writePxITMutex>:
{
 800e100:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e102:	b083      	sub	sp, #12
 800e104:	0004      	movs	r4, r0
 800e106:	9101      	str	r1, [sp, #4]
 800e108:	0017      	movs	r7, r2
 800e10a:	001d      	movs	r5, r3
	if (GetUart(port) != NULL) {	
 800e10c:	f7ff ffaa 	bl	800e064 <GetUart>
 800e110:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e112:	2001      	movs	r0, #1
	if (GetUart(port) != NULL) {	
 800e114:	2e00      	cmp	r6, #0
 800e116:	d009      	beq.n	800e12c <writePxITMutex+0x2c>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e118:	00a4      	lsls	r4, r4, #2
 800e11a:	4b08      	ldr	r3, [pc, #32]	; (800e13c <writePxITMutex+0x3c>)
 800e11c:	58e0      	ldr	r0, [r4, r3]
 800e11e:	0029      	movs	r1, r5
 800e120:	f000 fd0c 	bl	800eb3c <osSemaphoreWait>
 800e124:	0003      	movs	r3, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e126:	2001      	movs	r0, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d001      	beq.n	800e130 <writePxITMutex+0x30>
}
 800e12c:	b003      	add	sp, #12
 800e12e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			result = HAL_UART_Transmit_IT(GetUart(port), (uint8_t *)buffer, n);
 800e130:	003a      	movs	r2, r7
 800e132:	9901      	ldr	r1, [sp, #4]
 800e134:	0030      	movs	r0, r6
 800e136:	f005 fa02 	bl	801353e <HAL_UART_Transmit_IT>
 800e13a:	e7f7      	b.n	800e12c <writePxITMutex+0x2c>
 800e13c:	20006764 	.word	0x20006764

0800e140 <writePxDMAMutex>:
{
 800e140:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e142:	b083      	sub	sp, #12
 800e144:	0004      	movs	r4, r0
 800e146:	9101      	str	r1, [sp, #4]
 800e148:	0017      	movs	r7, r2
 800e14a:	001d      	movs	r5, r3
	UART_HandleTypeDef* hUart = GetUart(port);
 800e14c:	f7ff ff8a 	bl	800e064 <GetUart>
 800e150:	0006      	movs	r6, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e152:	2001      	movs	r0, #1
	if (hUart != NULL) {	
 800e154:	2e00      	cmp	r6, #0
 800e156:	d009      	beq.n	800e16c <writePxDMAMutex+0x2c>
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e158:	00a4      	lsls	r4, r4, #2
 800e15a:	4b0a      	ldr	r3, [pc, #40]	; (800e184 <writePxDMAMutex+0x44>)
 800e15c:	58e0      	ldr	r0, [r4, r3]
 800e15e:	0029      	movs	r1, r5
 800e160:	f000 fcec 	bl	800eb3c <osSemaphoreWait>
 800e164:	0003      	movs	r3, r0
	HAL_StatusTypeDef result = HAL_ERROR; 
 800e166:	2001      	movs	r0, #1
		if (osSemaphoreWait(PxTxSemaphoreHandle[port], mutexTimeout) == osOK) {
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d001      	beq.n	800e170 <writePxDMAMutex+0x30>
}
 800e16c:	b003      	add	sp, #12
 800e16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			DMA_MSG_TX_Setup(hUart);
 800e170:	0030      	movs	r0, r6
 800e172:	f7ff f869 	bl	800d248 <DMA_MSG_TX_Setup>
			result = HAL_UART_Transmit_DMA(hUart, (uint8_t *)buffer, n);
 800e176:	003a      	movs	r2, r7
 800e178:	9901      	ldr	r1, [sp, #4]
 800e17a:	0030      	movs	r0, r6
 800e17c:	f005 fa8e 	bl	801369c <HAL_UART_Transmit_DMA>
 800e180:	e7f4      	b.n	800e16c <writePxDMAMutex+0x2c>
 800e182:	46c0      	nop			; (mov r8, r8)
 800e184:	20006764 	.word	0x20006764

0800e188 <UpdateBaudrate>:
{
 800e188:	b510      	push	{r4, lr}
 800e18a:	000c      	movs	r4, r1
	UART_HandleTypeDef *huart = GetUart(port);
 800e18c:	f7ff ff6a 	bl	800e064 <GetUart>
	huart->Init.BaudRate = baudrate;
 800e190:	6044      	str	r4, [r0, #4]
	HAL_UART_Init(huart);
 800e192:	f005 fe15 	bl	8013dc0 <HAL_UART_Init>
}
 800e196:	2000      	movs	r0, #0
 800e198:	bd10      	pop	{r4, pc}
	...

0800e19c <SwapUartPins>:
/*-----------------------------------------------------------*/

/* --- Swap UART pins ( NORMAL | REVERSED )--- 
*/
void SwapUartPins(UART_HandleTypeDef *huart, uint8_t direction)
{
 800e19c:	b570      	push	{r4, r5, r6, lr}
 800e19e:	1e04      	subs	r4, r0, #0
	if (huart != NULL) {
 800e1a0:	d003      	beq.n	800e1aa <SwapUartPins+0xe>
		if (direction == REVERSED) {
 800e1a2:	2901      	cmp	r1, #1
 800e1a4:	d002      	beq.n	800e1ac <SwapUartPins+0x10>
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
			HAL_UART_Init(huart);
		} else if (direction == NORMAL) {
 800e1a6:	2900      	cmp	r1, #0
 800e1a8:	d016      	beq.n	800e1d8 <SwapUartPins+0x3c>
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
			HAL_UART_Init(huart);		
		}
	}
}
 800e1aa:	bd70      	pop	{r4, r5, r6, pc}
			arrayPortsDir[myID-1] |= (0x8000>>(GetPort(huart)-1));		/* Set bit to one */
 800e1ac:	f7fd fac0 	bl	800b730 <GetPort>
 800e1b0:	4b14      	ldr	r3, [pc, #80]	; (800e204 <SwapUartPins+0x68>)
 800e1b2:	781b      	ldrb	r3, [r3, #0]
 800e1b4:	3b01      	subs	r3, #1
 800e1b6:	4d14      	ldr	r5, [pc, #80]	; (800e208 <SwapUartPins+0x6c>)
 800e1b8:	005b      	lsls	r3, r3, #1
 800e1ba:	3801      	subs	r0, #1
 800e1bc:	2180      	movs	r1, #128	; 0x80
 800e1be:	0209      	lsls	r1, r1, #8
 800e1c0:	000a      	movs	r2, r1
 800e1c2:	4102      	asrs	r2, r0
 800e1c4:	5b58      	ldrh	r0, [r3, r5]
 800e1c6:	4302      	orrs	r2, r0
 800e1c8:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e1ca:	2308      	movs	r3, #8
 800e1cc:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800e1ce:	6361      	str	r1, [r4, #52]	; 0x34
			HAL_UART_Init(huart);
 800e1d0:	0020      	movs	r0, r4
 800e1d2:	f005 fdf5 	bl	8013dc0 <HAL_UART_Init>
 800e1d6:	e7e8      	b.n	800e1aa <SwapUartPins+0xe>
			arrayPortsDir[myID-1] &= (~(0x8000>>(GetPort(huart)-1)));		/* Set bit to zero */
 800e1d8:	f7fd faaa 	bl	800b730 <GetPort>
 800e1dc:	4b09      	ldr	r3, [pc, #36]	; (800e204 <SwapUartPins+0x68>)
 800e1de:	781b      	ldrb	r3, [r3, #0]
 800e1e0:	3b01      	subs	r3, #1
 800e1e2:	4d09      	ldr	r5, [pc, #36]	; (800e208 <SwapUartPins+0x6c>)
 800e1e4:	005b      	lsls	r3, r3, #1
 800e1e6:	3801      	subs	r0, #1
 800e1e8:	2180      	movs	r1, #128	; 0x80
 800e1ea:	0209      	lsls	r1, r1, #8
 800e1ec:	4101      	asrs	r1, r0
 800e1ee:	5b5a      	ldrh	r2, [r3, r5]
 800e1f0:	438a      	bics	r2, r1
 800e1f2:	535a      	strh	r2, [r3, r5]
			huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800e1f4:	2308      	movs	r3, #8
 800e1f6:	6263      	str	r3, [r4, #36]	; 0x24
			huart->AdvancedInit.Swap = UART_ADVFEATURE_SWAP_DISABLE;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	6363      	str	r3, [r4, #52]	; 0x34
			HAL_UART_Init(huart);		
 800e1fc:	0020      	movs	r0, r4
 800e1fe:	f005 fddf 	bl	8013dc0 <HAL_UART_Init>
}
 800e202:	e7d2      	b.n	800e1aa <SwapUartPins+0xe>
 800e204:	20000070 	.word	0x20000070
 800e208:	20006b38 	.word	0x20006b38

0800e20c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800e20c:	4816      	ldr	r0, [pc, #88]	; (800e268 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800e20e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800e210:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800e212:	e003      	b.n	800e21c <LoopCopyDataInit>

0800e214 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800e214:	4b15      	ldr	r3, [pc, #84]	; (800e26c <LoopForever+0x8>)
  ldr r3, [r3, r1]
 800e216:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800e218:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800e21a:	3104      	adds	r1, #4

0800e21c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800e21c:	4814      	ldr	r0, [pc, #80]	; (800e270 <LoopForever+0xc>)
  ldr r3, =_edata
 800e21e:	4b15      	ldr	r3, [pc, #84]	; (800e274 <LoopForever+0x10>)
  adds r2, r0, r1
 800e220:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800e222:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800e224:	d3f6      	bcc.n	800e214 <CopyDataInit>
  ldr r2, =_sbss
 800e226:	4a14      	ldr	r2, [pc, #80]	; (800e278 <LoopForever+0x14>)
  b LoopFillZerobss
 800e228:	e002      	b.n	800e230 <LoopFillZerobss>

0800e22a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800e22a:	2300      	movs	r3, #0
  str  r3, [r2]
 800e22c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e22e:	3204      	adds	r2, #4

0800e230 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800e230:	4b12      	ldr	r3, [pc, #72]	; (800e27c <LoopForever+0x18>)
  cmp r2, r3
 800e232:	429a      	cmp	r2, r3
  bcc FillZerobss
 800e234:	d3f9      	bcc.n	800e22a <FillZerobss>

//------------------------------------------------------------------------------
// Modified Reset Handler for bootloader reboot (sourcer32@gmail.com)
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e236:	4812      	ldr	r0, [pc, #72]	; (800e280 <LoopForever+0x1c>)
	LDR        R1, =0xDEADBEEF
 800e238:	4912      	ldr	r1, [pc, #72]	; (800e284 <LoopForever+0x20>)
	LDR        R2, [R0, #0] 		// Read current
 800e23a:	6802      	ldr	r2, [r0, #0]
	STR        R0, [R0, #0] 		// Invalidate
 800e23c:	6000      	str	r0, [r0, #0]
	CMP        R2, R1
 800e23e:	428a      	cmp	r2, r1
	BEQ        Reboot_Loader
 800e240:	d005      	beq.n	800e24e <Reboot_Loader>

// Normal startup path

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800e242:	f000 f82b 	bl	800e29c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800e246:	f005 ff31 	bl	80140ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e24a:	f005 ff10 	bl	801406e <main>

0800e24e <Reboot_Loader>:

// Vector into System Loader
Reboot_Loader:
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e24e:	480e      	ldr	r0, [pc, #56]	; (800e288 <LoopForever+0x24>)
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e250:	490e      	ldr	r1, [pc, #56]	; (800e28c <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e252:	6001      	str	r1, [r0, #0]
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e254:	480e      	ldr	r0, [pc, #56]	; (800e290 <LoopForever+0x2c>)
	LDR     R1, =0x00000001 	// MAP ROM AT ZERO
 800e256:	490d      	ldr	r1, [pc, #52]	; (800e28c <LoopForever+0x28>)
	STR     R1, [R0, #0]
 800e258:	6001      	str	r1, [r0, #0]
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F03x)
	//                LDR     R0, =0x1FFFC400 ; ROM BASE (STM32F04x)
	//                LDR     R0, =0x1FFFEC00 ; ROM BASE (STM32F05x)
	//                LDR     R0, =0x1FFFC800 ; ROM BASE (STM32F07x)
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e25a:	480e      	ldr	r0, [pc, #56]	; (800e294 <LoopForever+0x30>)
	LDR     R1, [R0, #0]    	// SP @ +0
 800e25c:	6801      	ldr	r1, [r0, #0]
	MOV     SP, R1
 800e25e:	468d      	mov	sp, r1
	LDR     R0, [R0, #4]    	// PC @ +4
 800e260:	6840      	ldr	r0, [r0, #4]
	BX      R0
 800e262:	4700      	bx	r0

0800e264 <LoopForever>:


LoopForever:
    b LoopForever
 800e264:	e7fe      	b.n	800e264 <LoopForever>
 800e266:	0000      	.short	0x0000
  ldr   r0, =_estack
 800e268:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 800e26c:	0801db04 	.word	0x0801db04
  ldr r0, =_sdata
 800e270:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800e274:	20000b44 	.word	0x20000b44
  ldr r2, =_sbss
 800e278:	20000b48 	.word	0x20000b48
  ldr r3, = _ebss
 800e27c:	20006bb0 	.word	0x20006bb0
	LDR        R0, =0x20007FF0  	// Address for RAM signature (STM32F09x)
 800e280:	20007ff0 	.word	0x20007ff0
	LDR        R1, =0xDEADBEEF
 800e284:	deadbeef 	.word	0xdeadbeef
	LDR     R0, =0x40021018 	// RCC_APB2ENR (+0x18)
 800e288:	40021018 	.word	0x40021018
	LDR     R1, =0x00000001 	// ENABLE SYSCFG CLOCK
 800e28c:	00000001 	.word	0x00000001
	LDR     R0, =0x40010000 	// SYSCFG_CFGR1 (+0x00)
 800e290:	40010000 	.word	0x40010000
	LDR     R0, =0x1FFFD800 	// ROM BASE (STM32F09x)
 800e294:	1fffd800 	.word	0x1fffd800

0800e298 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e298:	e7fe      	b.n	800e298 <ADC1_COMP_IRQHandler>
	...

0800e29c <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800e29c:	4b11      	ldr	r3, [pc, #68]	; (800e2e4 <SystemInit+0x48>)
 800e29e:	681a      	ldr	r2, [r3, #0]
 800e2a0:	2101      	movs	r1, #1
 800e2a2:	430a      	orrs	r2, r1
 800e2a4:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80C;
 800e2a6:	685a      	ldr	r2, [r3, #4]
 800e2a8:	480f      	ldr	r0, [pc, #60]	; (800e2e8 <SystemInit+0x4c>)
 800e2aa:	4002      	ands	r2, r0
 800e2ac:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800e2ae:	681a      	ldr	r2, [r3, #0]
 800e2b0:	480e      	ldr	r0, [pc, #56]	; (800e2ec <SystemInit+0x50>)
 800e2b2:	4002      	ands	r2, r0
 800e2b4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800e2b6:	681a      	ldr	r2, [r3, #0]
 800e2b8:	480d      	ldr	r0, [pc, #52]	; (800e2f0 <SystemInit+0x54>)
 800e2ba:	4002      	ands	r2, r0
 800e2bc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800e2be:	685a      	ldr	r2, [r3, #4]
 800e2c0:	480c      	ldr	r0, [pc, #48]	; (800e2f4 <SystemInit+0x58>)
 800e2c2:	4002      	ands	r2, r0
 800e2c4:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800e2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2c8:	200f      	movs	r0, #15
 800e2ca:	4382      	bics	r2, r0
 800e2cc:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEAC;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEAC;
 800e2ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e2d0:	4809      	ldr	r0, [pc, #36]	; (800e2f8 <SystemInit+0x5c>)
 800e2d2:	4002      	ands	r2, r0
 800e2d4:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800e2d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2d8:	438a      	bics	r2, r1
 800e2da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800e2dc:	2200      	movs	r2, #0
 800e2de:	609a      	str	r2, [r3, #8]

}
 800e2e0:	4770      	bx	lr
 800e2e2:	46c0      	nop			; (mov r8, r8)
 800e2e4:	40021000 	.word	0x40021000
 800e2e8:	08ffb80c 	.word	0x08ffb80c
 800e2ec:	fef6ffff 	.word	0xfef6ffff
 800e2f0:	fffbffff 	.word	0xfffbffff
 800e2f4:	ffc0ffff 	.word	0xffc0ffff
 800e2f8:	fff0feac 	.word	0xfff0feac

0800e2fc <LSM303AGR_MAG_WriteReg>:
*                                 length of buffer
* Output      : None
* Return      : None
*******************************************************************************/
status_t LSM303AGR_MAG_WriteReg(void *handle, u8_t Reg, u8_t *Bufp, u16_t len)
{
 800e2fc:	b510      	push	{r4, lr}

  if (LSM303AGR_MAG_I2C_Write(handle, Reg, Bufp, len))
 800e2fe:	f7ff f9e1 	bl	800d6c4 <LSM303AGR_MAG_I2C_Write>
 800e302:	4243      	negs	r3, r0
 800e304:	4158      	adcs	r0, r3
 800e306:	b2c0      	uxtb	r0, r0
  }
  else
  {
    return MEMS_SUCCESS;
  }
}
 800e308:	bd10      	pop	{r4, pc}

0800e30a <LSM303AGR_MAG_ReadReg>:
*                                 length of buffer
* Output      : None
* Return      : None
*******************************************************************************/
status_t LSM303AGR_MAG_ReadReg(void *handle, u8_t Reg, u8_t *Bufp, u16_t len)
{
 800e30a:	b510      	push	{r4, lr}

  if (LSM303AGR_MAG_I2C_Read(handle, Reg, Bufp, len))
 800e30c:	f7ff f9ea 	bl	800d6e4 <LSM303AGR_MAG_I2C_Read>
 800e310:	4243      	negs	r3, r0
 800e312:	4158      	adcs	r0, r3
 800e314:	b2c0      	uxtb	r0, r0
  }
  else
  {
    return MEMS_SUCCESS;
  }
}
 800e316:	bd10      	pop	{r4, pc}

0800e318 <LSM303AGR_MAG_R_WHO_AM_I>:
* Input          : Pointer to u8_t
* Output         : Status of WHO_AM_I
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM303AGR_MAG_R_WHO_AM_I(void *handle, u8_t *value)
{
 800e318:	b510      	push	{r4, lr}
 800e31a:	000a      	movs	r2, r1
  if( !LSM303AGR_MAG_ReadReg(handle, LSM303AGR_MAG_WHO_AM_I_REG, (u8_t *)value, 1) )
 800e31c:	2301      	movs	r3, #1
 800e31e:	214f      	movs	r1, #79	; 0x4f
 800e320:	f7ff fff3 	bl	800e30a <LSM303AGR_MAG_ReadReg>
 800e324:	1e43      	subs	r3, r0, #1
 800e326:	4198      	sbcs	r0, r3
 800e328:	b2c0      	uxtb	r0, r0

  *value &= LSM303AGR_MAG_WHO_AM_I_MASK; //coerce
  *value = *value >> LSM303AGR_MAG_WHO_AM_I_POSITION; //mask

  return MEMS_SUCCESS;
}
 800e32a:	bd10      	pop	{r4, pc}

0800e32c <LSM303AGR_MAG_W_BDU>:
* Input          : LSM303AGR_MAG_BDU_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM303AGR_MAG_W_BDU(void *handle, LSM303AGR_MAG_BDU_t newValue)
{
 800e32c:	b530      	push	{r4, r5, lr}
 800e32e:	b083      	sub	sp, #12
 800e330:	0004      	movs	r4, r0
 800e332:	000d      	movs	r5, r1
  u8_t value;

  if( !LSM303AGR_MAG_ReadReg(handle, LSM303AGR_MAG_CFG_REG_C, &value, 1) )
 800e334:	2301      	movs	r3, #1
 800e336:	466a      	mov	r2, sp
 800e338:	3207      	adds	r2, #7
 800e33a:	2162      	movs	r1, #98	; 0x62
 800e33c:	f7ff ffe5 	bl	800e30a <LSM303AGR_MAG_ReadReg>
 800e340:	2800      	cmp	r0, #0
 800e342:	d101      	bne.n	800e348 <LSM303AGR_MAG_W_BDU+0x1c>

  if( !LSM303AGR_MAG_WriteReg( handle, LSM303AGR_MAG_CFG_REG_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e344:	b003      	add	sp, #12
 800e346:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM303AGR_MAG_BDU_MASK;
 800e348:	466b      	mov	r3, sp
 800e34a:	79d9      	ldrb	r1, [r3, #7]
 800e34c:	2310      	movs	r3, #16
 800e34e:	4399      	bics	r1, r3
  value |= newValue;
 800e350:	4329      	orrs	r1, r5
 800e352:	466b      	mov	r3, sp
 800e354:	71d9      	strb	r1, [r3, #7]
  if( !LSM303AGR_MAG_WriteReg( handle, LSM303AGR_MAG_CFG_REG_C, &value, 1) )
 800e356:	2301      	movs	r3, #1
 800e358:	466a      	mov	r2, sp
 800e35a:	3207      	adds	r2, #7
 800e35c:	2162      	movs	r1, #98	; 0x62
 800e35e:	0020      	movs	r0, r4
 800e360:	f7ff ffcc 	bl	800e2fc <LSM303AGR_MAG_WriteReg>
 800e364:	1e43      	subs	r3, r0, #1
 800e366:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e368:	b2c0      	uxtb	r0, r0
 800e36a:	e7eb      	b.n	800e344 <LSM303AGR_MAG_W_BDU+0x18>

0800e36c <LSM303AGR_MAG_W_MD>:
* Input          : LSM303AGR_MAG_MD_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM303AGR_MAG_W_MD(void *handle, LSM303AGR_MAG_MD_t newValue)
{
 800e36c:	b530      	push	{r4, r5, lr}
 800e36e:	b083      	sub	sp, #12
 800e370:	0004      	movs	r4, r0
 800e372:	000d      	movs	r5, r1
  u8_t value;

  if( !LSM303AGR_MAG_ReadReg(handle, LSM303AGR_MAG_CFG_REG_A, &value, 1) )
 800e374:	2301      	movs	r3, #1
 800e376:	466a      	mov	r2, sp
 800e378:	3207      	adds	r2, #7
 800e37a:	2160      	movs	r1, #96	; 0x60
 800e37c:	f7ff ffc5 	bl	800e30a <LSM303AGR_MAG_ReadReg>
 800e380:	2800      	cmp	r0, #0
 800e382:	d101      	bne.n	800e388 <LSM303AGR_MAG_W_MD+0x1c>

  if( !LSM303AGR_MAG_WriteReg( handle, LSM303AGR_MAG_CFG_REG_A, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e384:	b003      	add	sp, #12
 800e386:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM303AGR_MAG_MD_MASK;
 800e388:	466b      	mov	r3, sp
 800e38a:	79d9      	ldrb	r1, [r3, #7]
 800e38c:	2303      	movs	r3, #3
 800e38e:	4399      	bics	r1, r3
  value |= newValue;
 800e390:	4329      	orrs	r1, r5
 800e392:	466b      	mov	r3, sp
 800e394:	71d9      	strb	r1, [r3, #7]
  if( !LSM303AGR_MAG_WriteReg( handle, LSM303AGR_MAG_CFG_REG_A, &value, 1) )
 800e396:	2301      	movs	r3, #1
 800e398:	466a      	mov	r2, sp
 800e39a:	3207      	adds	r2, #7
 800e39c:	2160      	movs	r1, #96	; 0x60
 800e39e:	0020      	movs	r0, r4
 800e3a0:	f7ff ffac 	bl	800e2fc <LSM303AGR_MAG_WriteReg>
 800e3a4:	1e43      	subs	r3, r0, #1
 800e3a6:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e3a8:	b2c0      	uxtb	r0, r0
 800e3aa:	e7eb      	b.n	800e384 <LSM303AGR_MAG_W_MD+0x18>

0800e3ac <LSM303AGR_MAG_Get_Raw_Magnetic>:
* Input          : pointer to [u8_t]
* Output         : Magnetic buffer u8_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM303AGR_MAG_Get_Raw_Magnetic(void *handle, u8_t *buff)
{
 800e3ac:	b510      	push	{r4, lr}
 800e3ae:	000a      	movs	r2, r1
  if( !LSM303AGR_MAG_ReadReg( handle, LSM303AGR_MAG_OUTX_L_REG, buff, 6 ) )
 800e3b0:	2306      	movs	r3, #6
 800e3b2:	2168      	movs	r1, #104	; 0x68
 800e3b4:	f7ff ffa9 	bl	800e30a <LSM303AGR_MAG_ReadReg>
 800e3b8:	1e43      	subs	r3, r0, #1
 800e3ba:	4198      	sbcs	r0, r3
 800e3bc:	b2c0      	uxtb	r0, r0
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e3be:	bd10      	pop	{r4, pc}

0800e3c0 <LSM303AGR_MAG_W_ODR>:
* Input          : LSM303AGR_MAG_ODR_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM303AGR_MAG_W_ODR(void *handle, LSM303AGR_MAG_ODR_t newValue)
{
 800e3c0:	b530      	push	{r4, r5, lr}
 800e3c2:	b083      	sub	sp, #12
 800e3c4:	0004      	movs	r4, r0
 800e3c6:	000d      	movs	r5, r1
  u8_t value;

  if( !LSM303AGR_MAG_ReadReg(handle, LSM303AGR_MAG_CFG_REG_A, &value, 1) )
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	466a      	mov	r2, sp
 800e3cc:	3207      	adds	r2, #7
 800e3ce:	2160      	movs	r1, #96	; 0x60
 800e3d0:	f7ff ff9b 	bl	800e30a <LSM303AGR_MAG_ReadReg>
 800e3d4:	2800      	cmp	r0, #0
 800e3d6:	d101      	bne.n	800e3dc <LSM303AGR_MAG_W_ODR+0x1c>

  if( !LSM303AGR_MAG_WriteReg( handle, LSM303AGR_MAG_CFG_REG_A, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e3d8:	b003      	add	sp, #12
 800e3da:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM303AGR_MAG_ODR_MASK;
 800e3dc:	466b      	mov	r3, sp
 800e3de:	79d9      	ldrb	r1, [r3, #7]
 800e3e0:	230c      	movs	r3, #12
 800e3e2:	4399      	bics	r1, r3
  value |= newValue;
 800e3e4:	4329      	orrs	r1, r5
 800e3e6:	466b      	mov	r3, sp
 800e3e8:	71d9      	strb	r1, [r3, #7]
  if( !LSM303AGR_MAG_WriteReg( handle, LSM303AGR_MAG_CFG_REG_A, &value, 1) )
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	466a      	mov	r2, sp
 800e3ee:	3207      	adds	r2, #7
 800e3f0:	2160      	movs	r1, #96	; 0x60
 800e3f2:	0020      	movs	r0, r4
 800e3f4:	f7ff ff82 	bl	800e2fc <LSM303AGR_MAG_WriteReg>
 800e3f8:	1e43      	subs	r3, r0, #1
 800e3fa:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e3fc:	b2c0      	uxtb	r0, r0
 800e3fe:	e7eb      	b.n	800e3d8 <LSM303AGR_MAG_W_ODR+0x18>

0800e400 <LSM303AGR_MAG_W_ST>:
* Input          : LSM303AGR_MAG_ST_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM303AGR_MAG_W_ST(void *handle, LSM303AGR_MAG_ST_t newValue)
{
 800e400:	b530      	push	{r4, r5, lr}
 800e402:	b083      	sub	sp, #12
 800e404:	0004      	movs	r4, r0
 800e406:	000d      	movs	r5, r1
  u8_t value;

  if( !LSM303AGR_MAG_ReadReg(handle, LSM303AGR_MAG_CFG_REG_C, &value, 1) )
 800e408:	2301      	movs	r3, #1
 800e40a:	466a      	mov	r2, sp
 800e40c:	3207      	adds	r2, #7
 800e40e:	2162      	movs	r1, #98	; 0x62
 800e410:	f7ff ff7b 	bl	800e30a <LSM303AGR_MAG_ReadReg>
 800e414:	2800      	cmp	r0, #0
 800e416:	d101      	bne.n	800e41c <LSM303AGR_MAG_W_ST+0x1c>

  if( !LSM303AGR_MAG_WriteReg( handle, LSM303AGR_MAG_CFG_REG_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e418:	b003      	add	sp, #12
 800e41a:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM303AGR_MAG_ST_MASK;
 800e41c:	466b      	mov	r3, sp
 800e41e:	79d9      	ldrb	r1, [r3, #7]
 800e420:	2302      	movs	r3, #2
 800e422:	4399      	bics	r1, r3
  value |= newValue;
 800e424:	4329      	orrs	r1, r5
 800e426:	466b      	mov	r3, sp
 800e428:	71d9      	strb	r1, [r3, #7]
  if( !LSM303AGR_MAG_WriteReg( handle, LSM303AGR_MAG_CFG_REG_C, &value, 1) )
 800e42a:	2301      	movs	r3, #1
 800e42c:	466a      	mov	r2, sp
 800e42e:	3207      	adds	r2, #7
 800e430:	2162      	movs	r1, #98	; 0x62
 800e432:	0020      	movs	r0, r4
 800e434:	f7ff ff62 	bl	800e2fc <LSM303AGR_MAG_WriteReg>
 800e438:	1e43      	subs	r3, r0, #1
 800e43a:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e43c:	b2c0      	uxtb	r0, r0
 800e43e:	e7eb      	b.n	800e418 <LSM303AGR_MAG_W_ST+0x18>

0800e440 <LSM6DS3_ACC_GYRO_WriteReg>:
/* Private functions ---------------------------------------------------------*/

/************** Generic Function  *******************/

status_t LSM6DS3_ACC_GYRO_WriteReg(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len)
{
 800e440:	b510      	push	{r4, lr}

  if (LSM6DS3_I2C_Write(handle, Reg, Bufp, len))
 800e442:	f7ff f91f 	bl	800d684 <LSM6DS3_I2C_Write>
 800e446:	4243      	negs	r3, r0
 800e448:	4158      	adcs	r0, r3
 800e44a:	b2c0      	uxtb	r0, r0
  }
  else
  {
    return MEMS_SUCCESS;
  }
}
 800e44c:	bd10      	pop	{r4, pc}

0800e44e <LSM6DS3_ACC_GYRO_ReadReg>:

status_t LSM6DS3_ACC_GYRO_ReadReg(void *handle, uint8_t Reg, uint8_t *Bufp, uint16_t len)
{
 800e44e:	b510      	push	{r4, lr}

  if (LSM6DS3_I2C_Read(handle, Reg, Bufp, len))
 800e450:	f7ff f928 	bl	800d6a4 <LSM6DS3_I2C_Read>
 800e454:	4243      	negs	r3, r0
 800e456:	4158      	adcs	r0, r3
 800e458:	b2c0      	uxtb	r0, r0
  }
  else
  {
    return MEMS_SUCCESS;
  }
}
 800e45a:	bd10      	pop	{r4, pc}

0800e45c <LSM6DS3_ACC_GYRO_R_WHO_AM_I>:
* Input          : Pointer to uint8_t
* Output         : Status of WHO_AM_I_BIT
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_WHO_AM_I(void *handle, uint8_t *value)
{
 800e45c:	b510      	push	{r4, lr}
 800e45e:	000a      	movs	r2, r1
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_WHO_AM_I_REG, (uint8_t *)value, 1) )
 800e460:	2301      	movs	r3, #1
 800e462:	210f      	movs	r1, #15
 800e464:	f7ff fff3 	bl	800e44e <LSM6DS3_ACC_GYRO_ReadReg>
 800e468:	1e43      	subs	r3, r0, #1
 800e46a:	4198      	sbcs	r0, r3
 800e46c:	b2c0      	uxtb	r0, r0

  *value &= LSM6DS3_ACC_GYRO_WHO_AM_I_BIT_MASK; //coerce
  *value = *value >> LSM6DS3_ACC_GYRO_WHO_AM_I_BIT_POSITION; //mask

  return MEMS_SUCCESS;
}
 800e46e:	bd10      	pop	{r4, pc}

0800e470 <LSM6DS3_ACC_GYRO_W_FS_XL>:
* Input          : LSM6DS3_ACC_GYRO_FS_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FS_XL(void *handle, LSM6DS3_ACC_GYRO_FS_XL_t newValue)
{
 800e470:	b530      	push	{r4, r5, lr}
 800e472:	b083      	sub	sp, #12
 800e474:	0004      	movs	r4, r0
 800e476:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
 800e478:	2301      	movs	r3, #1
 800e47a:	466a      	mov	r2, sp
 800e47c:	3207      	adds	r2, #7
 800e47e:	2110      	movs	r1, #16
 800e480:	f7ff ffe5 	bl	800e44e <LSM6DS3_ACC_GYRO_ReadReg>
 800e484:	2800      	cmp	r0, #0
 800e486:	d101      	bne.n	800e48c <LSM6DS3_ACC_GYRO_W_FS_XL+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e488:	b003      	add	sp, #12
 800e48a:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_FS_XL_MASK;
 800e48c:	466b      	mov	r3, sp
 800e48e:	79d9      	ldrb	r1, [r3, #7]
 800e490:	230c      	movs	r3, #12
 800e492:	4399      	bics	r1, r3
  value |= newValue;
 800e494:	4329      	orrs	r1, r5
 800e496:	466b      	mov	r3, sp
 800e498:	71d9      	strb	r1, [r3, #7]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
 800e49a:	2301      	movs	r3, #1
 800e49c:	466a      	mov	r2, sp
 800e49e:	3207      	adds	r2, #7
 800e4a0:	2110      	movs	r1, #16
 800e4a2:	0020      	movs	r0, r4
 800e4a4:	f7ff ffcc 	bl	800e440 <LSM6DS3_ACC_GYRO_WriteReg>
 800e4a8:	1e43      	subs	r3, r0, #1
 800e4aa:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e4ac:	b2c0      	uxtb	r0, r0
 800e4ae:	e7eb      	b.n	800e488 <LSM6DS3_ACC_GYRO_W_FS_XL+0x18>

0800e4b0 <LSM6DS3_ACC_GYRO_R_FS_XL>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_FS_XL_t
* Output         : Status of FS_XL see LSM6DS3_ACC_GYRO_FS_XL_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_FS_XL(void *handle, LSM6DS3_ACC_GYRO_FS_XL_t *value)
{
 800e4b0:	b510      	push	{r4, lr}
 800e4b2:	000c      	movs	r4, r1
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, (uint8_t *)value, 1) )
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	000a      	movs	r2, r1
 800e4b8:	2110      	movs	r1, #16
 800e4ba:	f7ff ffc8 	bl	800e44e <LSM6DS3_ACC_GYRO_ReadReg>
 800e4be:	2800      	cmp	r0, #0
 800e4c0:	d004      	beq.n	800e4cc <LSM6DS3_ACC_GYRO_R_FS_XL+0x1c>
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_FS_XL_MASK; //mask
 800e4c2:	7822      	ldrb	r2, [r4, #0]
 800e4c4:	230c      	movs	r3, #12
 800e4c6:	4013      	ands	r3, r2
 800e4c8:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 800e4ca:	2001      	movs	r0, #1
}
 800e4cc:	bd10      	pop	{r4, pc}

0800e4ce <LSM6DS3_ACC_GYRO_GetRawAccData>:
* Input          : pointer to [uint8_t]
* Output         : GetAccData buffer uint8_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_GetRawAccData(void *handle, uint8_t *buff)
{
 800e4ce:	b570      	push	{r4, r5, r6, lr}
 800e4d0:	0006      	movs	r6, r0
 800e4d2:	000d      	movs	r5, r1
 800e4d4:	2428      	movs	r4, #40	; 0x28
  k = 0;
  for (i = 0; i < 3; i++ )
  {
    for (j = 0; j < numberOfByteForDimension; j++ )
    {
      if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_OUTX_L_XL + k, &buff[k], 1))
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	002a      	movs	r2, r5
 800e4da:	0021      	movs	r1, r4
 800e4dc:	0030      	movs	r0, r6
 800e4de:	f7ff ffb6 	bl	800e44e <LSM6DS3_ACC_GYRO_ReadReg>
 800e4e2:	2800      	cmp	r0, #0
 800e4e4:	d00f      	beq.n	800e506 <LSM6DS3_ACC_GYRO_GetRawAccData+0x38>
 800e4e6:	1c6a      	adds	r2, r5, #1
 800e4e8:	1c61      	adds	r1, r4, #1
 800e4ea:	b2c9      	uxtb	r1, r1
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	0030      	movs	r0, r6
 800e4f0:	f7ff ffad 	bl	800e44e <LSM6DS3_ACC_GYRO_ReadReg>
 800e4f4:	2800      	cmp	r0, #0
 800e4f6:	d006      	beq.n	800e506 <LSM6DS3_ACC_GYRO_GetRawAccData+0x38>
  for (i = 0; i < 3; i++ )
 800e4f8:	3402      	adds	r4, #2
 800e4fa:	b2e4      	uxtb	r4, r4
 800e4fc:	3502      	adds	r5, #2
 800e4fe:	2c2e      	cmp	r4, #46	; 0x2e
 800e500:	d1e9      	bne.n	800e4d6 <LSM6DS3_ACC_GYRO_GetRawAccData+0x8>
        return MEMS_ERROR;
      k++;
    }
  }

  return MEMS_SUCCESS;
 800e502:	2001      	movs	r0, #1
}
 800e504:	bd70      	pop	{r4, r5, r6, pc}
        return MEMS_ERROR;
 800e506:	2000      	movs	r0, #0
 800e508:	e7fc      	b.n	800e504 <LSM6DS3_ACC_GYRO_GetRawAccData+0x36>

0800e50a <LSM6DS3_ACC_GYRO_W_ODR_XL>:
* Input          : LSM6DS3_ACC_GYRO_ODR_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_ODR_XL(void *handle, LSM6DS3_ACC_GYRO_ODR_XL_t newValue)
{
 800e50a:	b530      	push	{r4, r5, lr}
 800e50c:	b083      	sub	sp, #12
 800e50e:	0004      	movs	r4, r0
 800e510:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
 800e512:	2301      	movs	r3, #1
 800e514:	466a      	mov	r2, sp
 800e516:	3207      	adds	r2, #7
 800e518:	2110      	movs	r1, #16
 800e51a:	f7ff ff98 	bl	800e44e <LSM6DS3_ACC_GYRO_ReadReg>
 800e51e:	2800      	cmp	r0, #0
 800e520:	d101      	bne.n	800e526 <LSM6DS3_ACC_GYRO_W_ODR_XL+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e522:	b003      	add	sp, #12
 800e524:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_ODR_XL_MASK;
 800e526:	466b      	mov	r3, sp
 800e528:	79db      	ldrb	r3, [r3, #7]
 800e52a:	210f      	movs	r1, #15
 800e52c:	4019      	ands	r1, r3
  value |= newValue;
 800e52e:	4329      	orrs	r1, r5
 800e530:	466b      	mov	r3, sp
 800e532:	71d9      	strb	r1, [r3, #7]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
 800e534:	2301      	movs	r3, #1
 800e536:	466a      	mov	r2, sp
 800e538:	3207      	adds	r2, #7
 800e53a:	2110      	movs	r1, #16
 800e53c:	0020      	movs	r0, r4
 800e53e:	f7ff ff7f 	bl	800e440 <LSM6DS3_ACC_GYRO_WriteReg>
 800e542:	1e43      	subs	r3, r0, #1
 800e544:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e546:	b2c0      	uxtb	r0, r0
 800e548:	e7eb      	b.n	800e522 <LSM6DS3_ACC_GYRO_W_ODR_XL+0x18>

0800e54a <LSM6DS3_ACC_GYRO_W_FS_G>:
* Input          : LSM6DS3_ACC_GYRO_FS_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FS_G(void *handle, LSM6DS3_ACC_GYRO_FS_G_t newValue)
{
 800e54a:	b530      	push	{r4, r5, lr}
 800e54c:	b083      	sub	sp, #12
 800e54e:	0004      	movs	r4, r0
 800e550:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
 800e552:	2301      	movs	r3, #1
 800e554:	466a      	mov	r2, sp
 800e556:	3207      	adds	r2, #7
 800e558:	2111      	movs	r1, #17
 800e55a:	f7ff ff78 	bl	800e44e <LSM6DS3_ACC_GYRO_ReadReg>
 800e55e:	2800      	cmp	r0, #0
 800e560:	d101      	bne.n	800e566 <LSM6DS3_ACC_GYRO_W_FS_G+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e562:	b003      	add	sp, #12
 800e564:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_FS_G_MASK;
 800e566:	466b      	mov	r3, sp
 800e568:	79d9      	ldrb	r1, [r3, #7]
 800e56a:	230c      	movs	r3, #12
 800e56c:	4399      	bics	r1, r3
  value |= newValue;
 800e56e:	4329      	orrs	r1, r5
 800e570:	466b      	mov	r3, sp
 800e572:	71d9      	strb	r1, [r3, #7]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
 800e574:	2301      	movs	r3, #1
 800e576:	466a      	mov	r2, sp
 800e578:	3207      	adds	r2, #7
 800e57a:	2111      	movs	r1, #17
 800e57c:	0020      	movs	r0, r4
 800e57e:	f7ff ff5f 	bl	800e440 <LSM6DS3_ACC_GYRO_WriteReg>
 800e582:	1e43      	subs	r3, r0, #1
 800e584:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e586:	b2c0      	uxtb	r0, r0
 800e588:	e7eb      	b.n	800e562 <LSM6DS3_ACC_GYRO_W_FS_G+0x18>

0800e58a <LSM6DS3_ACC_GYRO_R_FS_G>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_FS_G_t
* Output         : Status of FS_G see LSM6DS3_ACC_GYRO_FS_G_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_FS_G(void *handle, LSM6DS3_ACC_GYRO_FS_G_t *value)
{
 800e58a:	b510      	push	{r4, lr}
 800e58c:	000c      	movs	r4, r1
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, (uint8_t *)value, 1) )
 800e58e:	2301      	movs	r3, #1
 800e590:	000a      	movs	r2, r1
 800e592:	2111      	movs	r1, #17
 800e594:	f7ff ff5b 	bl	800e44e <LSM6DS3_ACC_GYRO_ReadReg>
 800e598:	2800      	cmp	r0, #0
 800e59a:	d004      	beq.n	800e5a6 <LSM6DS3_ACC_GYRO_R_FS_G+0x1c>
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_FS_G_MASK; //mask
 800e59c:	7822      	ldrb	r2, [r4, #0]
 800e59e:	230c      	movs	r3, #12
 800e5a0:	4013      	ands	r3, r2
 800e5a2:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 800e5a4:	2001      	movs	r0, #1
}
 800e5a6:	bd10      	pop	{r4, pc}

0800e5a8 <LSM6DS3_ACC_GYRO_W_ODR_G>:
* Input          : LSM6DS3_ACC_GYRO_ODR_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_ODR_G(void *handle, LSM6DS3_ACC_GYRO_ODR_G_t newValue)
{
 800e5a8:	b530      	push	{r4, r5, lr}
 800e5aa:	b083      	sub	sp, #12
 800e5ac:	0004      	movs	r4, r0
 800e5ae:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
 800e5b0:	2301      	movs	r3, #1
 800e5b2:	466a      	mov	r2, sp
 800e5b4:	3207      	adds	r2, #7
 800e5b6:	2111      	movs	r1, #17
 800e5b8:	f7ff ff49 	bl	800e44e <LSM6DS3_ACC_GYRO_ReadReg>
 800e5bc:	2800      	cmp	r0, #0
 800e5be:	d101      	bne.n	800e5c4 <LSM6DS3_ACC_GYRO_W_ODR_G+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e5c0:	b003      	add	sp, #12
 800e5c2:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_ODR_G_MASK;
 800e5c4:	466b      	mov	r3, sp
 800e5c6:	79db      	ldrb	r3, [r3, #7]
 800e5c8:	210f      	movs	r1, #15
 800e5ca:	4019      	ands	r1, r3
  value |= newValue;
 800e5cc:	4329      	orrs	r1, r5
 800e5ce:	466b      	mov	r3, sp
 800e5d0:	71d9      	strb	r1, [r3, #7]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	466a      	mov	r2, sp
 800e5d6:	3207      	adds	r2, #7
 800e5d8:	2111      	movs	r1, #17
 800e5da:	0020      	movs	r0, r4
 800e5dc:	f7ff ff30 	bl	800e440 <LSM6DS3_ACC_GYRO_WriteReg>
 800e5e0:	1e43      	subs	r3, r0, #1
 800e5e2:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e5e4:	b2c0      	uxtb	r0, r0
 800e5e6:	e7eb      	b.n	800e5c0 <LSM6DS3_ACC_GYRO_W_ODR_G+0x18>

0800e5e8 <LSM6DS3_ACC_GYRO_GetRawGyroData>:
* Input          : pointer to [uint8_t]
* Output         : GetGyroData buffer uint8_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_GetRawGyroData(void *handle, uint8_t *buff)
{
 800e5e8:	b570      	push	{r4, r5, r6, lr}
 800e5ea:	0006      	movs	r6, r0
 800e5ec:	000d      	movs	r5, r1
 800e5ee:	2422      	movs	r4, #34	; 0x22
  k = 0;
  for (i = 0; i < 3; i++ )
  {
    for (j = 0; j < numberOfByteForDimension; j++ )
    {
      if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_OUTX_L_G + k, &buff[k], 1))
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	002a      	movs	r2, r5
 800e5f4:	0021      	movs	r1, r4
 800e5f6:	0030      	movs	r0, r6
 800e5f8:	f7ff ff29 	bl	800e44e <LSM6DS3_ACC_GYRO_ReadReg>
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	d00f      	beq.n	800e620 <LSM6DS3_ACC_GYRO_GetRawGyroData+0x38>
 800e600:	1c6a      	adds	r2, r5, #1
 800e602:	1c61      	adds	r1, r4, #1
 800e604:	b2c9      	uxtb	r1, r1
 800e606:	2301      	movs	r3, #1
 800e608:	0030      	movs	r0, r6
 800e60a:	f7ff ff20 	bl	800e44e <LSM6DS3_ACC_GYRO_ReadReg>
 800e60e:	2800      	cmp	r0, #0
 800e610:	d006      	beq.n	800e620 <LSM6DS3_ACC_GYRO_GetRawGyroData+0x38>
  for (i = 0; i < 3; i++ )
 800e612:	3402      	adds	r4, #2
 800e614:	b2e4      	uxtb	r4, r4
 800e616:	3502      	adds	r5, #2
 800e618:	2c28      	cmp	r4, #40	; 0x28
 800e61a:	d1e9      	bne.n	800e5f0 <LSM6DS3_ACC_GYRO_GetRawGyroData+0x8>
        return MEMS_ERROR;
      k++;
    }
  }

  return MEMS_SUCCESS;
 800e61c:	2001      	movs	r0, #1
}
 800e61e:	bd70      	pop	{r4, r5, r6, pc}
        return MEMS_ERROR;
 800e620:	2000      	movs	r0, #0
 800e622:	e7fc      	b.n	800e61e <LSM6DS3_ACC_GYRO_GetRawGyroData+0x36>

0800e624 <LSM6DS3_ACC_GYRO_W_BW_XL>:
* Input          : LSM6DS3_ACC_GYRO_BW_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_BW_XL(void *handle, LSM6DS3_ACC_GYRO_BW_XL_t newValue)
{
 800e624:	b530      	push	{r4, r5, lr}
 800e626:	b083      	sub	sp, #12
 800e628:	0004      	movs	r4, r0
 800e62a:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
 800e62c:	2301      	movs	r3, #1
 800e62e:	466a      	mov	r2, sp
 800e630:	3207      	adds	r2, #7
 800e632:	2110      	movs	r1, #16
 800e634:	f7ff ff0b 	bl	800e44e <LSM6DS3_ACC_GYRO_ReadReg>
 800e638:	2800      	cmp	r0, #0
 800e63a:	d101      	bne.n	800e640 <LSM6DS3_ACC_GYRO_W_BW_XL+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e63c:	b003      	add	sp, #12
 800e63e:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_BW_XL_MASK;
 800e640:	466b      	mov	r3, sp
 800e642:	79d9      	ldrb	r1, [r3, #7]
 800e644:	2303      	movs	r3, #3
 800e646:	4399      	bics	r1, r3
  value |= newValue;
 800e648:	4329      	orrs	r1, r5
 800e64a:	466b      	mov	r3, sp
 800e64c:	71d9      	strb	r1, [r3, #7]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
 800e64e:	2301      	movs	r3, #1
 800e650:	466a      	mov	r2, sp
 800e652:	3207      	adds	r2, #7
 800e654:	2110      	movs	r1, #16
 800e656:	0020      	movs	r0, r4
 800e658:	f7ff fef2 	bl	800e440 <LSM6DS3_ACC_GYRO_WriteReg>
 800e65c:	1e43      	subs	r3, r0, #1
 800e65e:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e660:	b2c0      	uxtb	r0, r0
 800e662:	e7eb      	b.n	800e63c <LSM6DS3_ACC_GYRO_W_BW_XL+0x18>

0800e664 <LSM6DS3_ACC_GYRO_R_FS_125>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_FS_125_t
* Output         : Status of FS_125 see LSM6DS3_ACC_GYRO_FS_125_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_FS_125(void *handle, LSM6DS3_ACC_GYRO_FS_125_t *value)
{
 800e664:	b510      	push	{r4, lr}
 800e666:	000c      	movs	r4, r1
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, (uint8_t *)value, 1) )
 800e668:	2301      	movs	r3, #1
 800e66a:	000a      	movs	r2, r1
 800e66c:	2111      	movs	r1, #17
 800e66e:	f7ff feee 	bl	800e44e <LSM6DS3_ACC_GYRO_ReadReg>
 800e672:	2800      	cmp	r0, #0
 800e674:	d004      	beq.n	800e680 <LSM6DS3_ACC_GYRO_R_FS_125+0x1c>
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_FS_125_MASK; //mask
 800e676:	7822      	ldrb	r2, [r4, #0]
 800e678:	2302      	movs	r3, #2
 800e67a:	4013      	ands	r3, r2
 800e67c:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 800e67e:	2001      	movs	r0, #1
}
 800e680:	bd10      	pop	{r4, pc}

0800e682 <LSM6DS3_ACC_GYRO_W_FIFO_MODE>:
* Input          : LSM6DS3_ACC_GYRO_FIFO_MODE_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FIFO_MODE(void *handle, LSM6DS3_ACC_GYRO_FIFO_MODE_t newValue)
{
 800e682:	b530      	push	{r4, r5, lr}
 800e684:	b083      	sub	sp, #12
 800e686:	0004      	movs	r4, r0
 800e688:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL5, &value, 1) )
 800e68a:	2301      	movs	r3, #1
 800e68c:	466a      	mov	r2, sp
 800e68e:	3207      	adds	r2, #7
 800e690:	210a      	movs	r1, #10
 800e692:	f7ff fedc 	bl	800e44e <LSM6DS3_ACC_GYRO_ReadReg>
 800e696:	2800      	cmp	r0, #0
 800e698:	d101      	bne.n	800e69e <LSM6DS3_ACC_GYRO_W_FIFO_MODE+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL5, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e69a:	b003      	add	sp, #12
 800e69c:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_FIFO_MODE_MASK;
 800e69e:	466b      	mov	r3, sp
 800e6a0:	79d9      	ldrb	r1, [r3, #7]
 800e6a2:	2307      	movs	r3, #7
 800e6a4:	4399      	bics	r1, r3
  value |= newValue;
 800e6a6:	4329      	orrs	r1, r5
 800e6a8:	466b      	mov	r3, sp
 800e6aa:	71d9      	strb	r1, [r3, #7]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL5, &value, 1) )
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	466a      	mov	r2, sp
 800e6b0:	3207      	adds	r2, #7
 800e6b2:	210a      	movs	r1, #10
 800e6b4:	0020      	movs	r0, r4
 800e6b6:	f7ff fec3 	bl	800e440 <LSM6DS3_ACC_GYRO_WriteReg>
 800e6ba:	1e43      	subs	r3, r0, #1
 800e6bc:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e6be:	b2c0      	uxtb	r0, r0
 800e6c0:	e7eb      	b.n	800e69a <LSM6DS3_ACC_GYRO_W_FIFO_MODE+0x18>

0800e6c2 <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr>:
* Input          : LSM6DS3_ACC_GYRO_IF_INC_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_IF_Addr_Incr(void *handle, LSM6DS3_ACC_GYRO_IF_INC_t newValue)
{
 800e6c2:	b530      	push	{r4, r5, lr}
 800e6c4:	b083      	sub	sp, #12
 800e6c6:	0004      	movs	r4, r0
 800e6c8:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL3_C, &value, 1) )
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	466a      	mov	r2, sp
 800e6ce:	3207      	adds	r2, #7
 800e6d0:	2112      	movs	r1, #18
 800e6d2:	f7ff febc 	bl	800e44e <LSM6DS3_ACC_GYRO_ReadReg>
 800e6d6:	2800      	cmp	r0, #0
 800e6d8:	d101      	bne.n	800e6de <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL3_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e6da:	b003      	add	sp, #12
 800e6dc:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_IF_INC_MASK;
 800e6de:	466b      	mov	r3, sp
 800e6e0:	79d9      	ldrb	r1, [r3, #7]
 800e6e2:	2304      	movs	r3, #4
 800e6e4:	4399      	bics	r1, r3
  value |= newValue;
 800e6e6:	4329      	orrs	r1, r5
 800e6e8:	466b      	mov	r3, sp
 800e6ea:	71d9      	strb	r1, [r3, #7]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL3_C, &value, 1) )
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	466a      	mov	r2, sp
 800e6f0:	3207      	adds	r2, #7
 800e6f2:	2112      	movs	r1, #18
 800e6f4:	0020      	movs	r0, r4
 800e6f6:	f7ff fea3 	bl	800e440 <LSM6DS3_ACC_GYRO_WriteReg>
 800e6fa:	1e43      	subs	r3, r0, #1
 800e6fc:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e6fe:	b2c0      	uxtb	r0, r0
 800e700:	e7eb      	b.n	800e6da <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr+0x18>

0800e702 <LSM6DS3_ACC_GYRO_W_BW_Fixed_By_ODR>:
* Input          : LSM6DS3_ACC_GYRO_BW_SCAL_ODR_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_BW_Fixed_By_ODR(void *handle, LSM6DS3_ACC_GYRO_BW_SCAL_ODR_t newValue)
{
 800e702:	b530      	push	{r4, r5, lr}
 800e704:	b083      	sub	sp, #12
 800e706:	0004      	movs	r4, r0
 800e708:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL4_C, &value, 1) )
 800e70a:	2301      	movs	r3, #1
 800e70c:	466a      	mov	r2, sp
 800e70e:	3207      	adds	r2, #7
 800e710:	2113      	movs	r1, #19
 800e712:	f7ff fe9c 	bl	800e44e <LSM6DS3_ACC_GYRO_ReadReg>
 800e716:	2800      	cmp	r0, #0
 800e718:	d101      	bne.n	800e71e <LSM6DS3_ACC_GYRO_W_BW_Fixed_By_ODR+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL4_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e71a:	b003      	add	sp, #12
 800e71c:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_BW_SCAL_ODR_MASK;
 800e71e:	466b      	mov	r3, sp
 800e720:	79db      	ldrb	r3, [r3, #7]
 800e722:	217f      	movs	r1, #127	; 0x7f
 800e724:	4019      	ands	r1, r3
  value |= newValue;
 800e726:	4329      	orrs	r1, r5
 800e728:	466b      	mov	r3, sp
 800e72a:	71d9      	strb	r1, [r3, #7]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL4_C, &value, 1) )
 800e72c:	2301      	movs	r3, #1
 800e72e:	466a      	mov	r2, sp
 800e730:	3207      	adds	r2, #7
 800e732:	2113      	movs	r1, #19
 800e734:	0020      	movs	r0, r4
 800e736:	f7ff fe83 	bl	800e440 <LSM6DS3_ACC_GYRO_WriteReg>
 800e73a:	1e43      	subs	r3, r0, #1
 800e73c:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e73e:	b2c0      	uxtb	r0, r0
 800e740:	e7eb      	b.n	800e71a <LSM6DS3_ACC_GYRO_W_BW_Fixed_By_ODR+0x18>

0800e742 <LSM6DS3_ACC_GYRO_W_XEN_XL>:
* Input          : LSM6DS3_ACC_GYRO_XEN_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_XEN_XL(void *handle, LSM6DS3_ACC_GYRO_XEN_XL_t newValue)
{
 800e742:	b530      	push	{r4, r5, lr}
 800e744:	b083      	sub	sp, #12
 800e746:	0004      	movs	r4, r0
 800e748:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
 800e74a:	2301      	movs	r3, #1
 800e74c:	466a      	mov	r2, sp
 800e74e:	3207      	adds	r2, #7
 800e750:	2118      	movs	r1, #24
 800e752:	f7ff fe7c 	bl	800e44e <LSM6DS3_ACC_GYRO_ReadReg>
 800e756:	2800      	cmp	r0, #0
 800e758:	d101      	bne.n	800e75e <LSM6DS3_ACC_GYRO_W_XEN_XL+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e75a:	b003      	add	sp, #12
 800e75c:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_XEN_XL_MASK;
 800e75e:	466b      	mov	r3, sp
 800e760:	79d9      	ldrb	r1, [r3, #7]
 800e762:	2308      	movs	r3, #8
 800e764:	4399      	bics	r1, r3
  value |= newValue;
 800e766:	4329      	orrs	r1, r5
 800e768:	466b      	mov	r3, sp
 800e76a:	71d9      	strb	r1, [r3, #7]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
 800e76c:	2301      	movs	r3, #1
 800e76e:	466a      	mov	r2, sp
 800e770:	3207      	adds	r2, #7
 800e772:	2118      	movs	r1, #24
 800e774:	0020      	movs	r0, r4
 800e776:	f7ff fe63 	bl	800e440 <LSM6DS3_ACC_GYRO_WriteReg>
 800e77a:	1e43      	subs	r3, r0, #1
 800e77c:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e77e:	b2c0      	uxtb	r0, r0
 800e780:	e7eb      	b.n	800e75a <LSM6DS3_ACC_GYRO_W_XEN_XL+0x18>

0800e782 <LSM6DS3_ACC_GYRO_W_YEN_XL>:
* Input          : LSM6DS3_ACC_GYRO_YEN_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_YEN_XL(void *handle, LSM6DS3_ACC_GYRO_YEN_XL_t newValue)
{
 800e782:	b530      	push	{r4, r5, lr}
 800e784:	b083      	sub	sp, #12
 800e786:	0004      	movs	r4, r0
 800e788:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
 800e78a:	2301      	movs	r3, #1
 800e78c:	466a      	mov	r2, sp
 800e78e:	3207      	adds	r2, #7
 800e790:	2118      	movs	r1, #24
 800e792:	f7ff fe5c 	bl	800e44e <LSM6DS3_ACC_GYRO_ReadReg>
 800e796:	2800      	cmp	r0, #0
 800e798:	d101      	bne.n	800e79e <LSM6DS3_ACC_GYRO_W_YEN_XL+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e79a:	b003      	add	sp, #12
 800e79c:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_YEN_XL_MASK;
 800e79e:	466b      	mov	r3, sp
 800e7a0:	79d9      	ldrb	r1, [r3, #7]
 800e7a2:	2310      	movs	r3, #16
 800e7a4:	4399      	bics	r1, r3
  value |= newValue;
 800e7a6:	4329      	orrs	r1, r5
 800e7a8:	466b      	mov	r3, sp
 800e7aa:	71d9      	strb	r1, [r3, #7]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	466a      	mov	r2, sp
 800e7b0:	3207      	adds	r2, #7
 800e7b2:	2118      	movs	r1, #24
 800e7b4:	0020      	movs	r0, r4
 800e7b6:	f7ff fe43 	bl	800e440 <LSM6DS3_ACC_GYRO_WriteReg>
 800e7ba:	1e43      	subs	r3, r0, #1
 800e7bc:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e7be:	b2c0      	uxtb	r0, r0
 800e7c0:	e7eb      	b.n	800e79a <LSM6DS3_ACC_GYRO_W_YEN_XL+0x18>

0800e7c2 <LSM6DS3_ACC_GYRO_W_ZEN_XL>:
* Input          : LSM6DS3_ACC_GYRO_ZEN_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_ZEN_XL(void *handle, LSM6DS3_ACC_GYRO_ZEN_XL_t newValue)
{
 800e7c2:	b530      	push	{r4, r5, lr}
 800e7c4:	b083      	sub	sp, #12
 800e7c6:	0004      	movs	r4, r0
 800e7c8:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	466a      	mov	r2, sp
 800e7ce:	3207      	adds	r2, #7
 800e7d0:	2118      	movs	r1, #24
 800e7d2:	f7ff fe3c 	bl	800e44e <LSM6DS3_ACC_GYRO_ReadReg>
 800e7d6:	2800      	cmp	r0, #0
 800e7d8:	d101      	bne.n	800e7de <LSM6DS3_ACC_GYRO_W_ZEN_XL+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e7da:	b003      	add	sp, #12
 800e7dc:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_ZEN_XL_MASK;
 800e7de:	466b      	mov	r3, sp
 800e7e0:	79d9      	ldrb	r1, [r3, #7]
 800e7e2:	2320      	movs	r3, #32
 800e7e4:	4399      	bics	r1, r3
  value |= newValue;
 800e7e6:	4329      	orrs	r1, r5
 800e7e8:	466b      	mov	r3, sp
 800e7ea:	71d9      	strb	r1, [r3, #7]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
 800e7ec:	2301      	movs	r3, #1
 800e7ee:	466a      	mov	r2, sp
 800e7f0:	3207      	adds	r2, #7
 800e7f2:	2118      	movs	r1, #24
 800e7f4:	0020      	movs	r0, r4
 800e7f6:	f7ff fe23 	bl	800e440 <LSM6DS3_ACC_GYRO_WriteReg>
 800e7fa:	1e43      	subs	r3, r0, #1
 800e7fc:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e7fe:	b2c0      	uxtb	r0, r0
 800e800:	e7eb      	b.n	800e7da <LSM6DS3_ACC_GYRO_W_ZEN_XL+0x18>

0800e802 <LSM6DS3_ACC_GYRO_W_XEN_G>:
* Input          : LSM6DS3_ACC_GYRO_XEN_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_XEN_G(void *handle, LSM6DS3_ACC_GYRO_XEN_G_t newValue)
{
 800e802:	b530      	push	{r4, r5, lr}
 800e804:	b083      	sub	sp, #12
 800e806:	0004      	movs	r4, r0
 800e808:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
 800e80a:	2301      	movs	r3, #1
 800e80c:	466a      	mov	r2, sp
 800e80e:	3207      	adds	r2, #7
 800e810:	2119      	movs	r1, #25
 800e812:	f7ff fe1c 	bl	800e44e <LSM6DS3_ACC_GYRO_ReadReg>
 800e816:	2800      	cmp	r0, #0
 800e818:	d101      	bne.n	800e81e <LSM6DS3_ACC_GYRO_W_XEN_G+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e81a:	b003      	add	sp, #12
 800e81c:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_XEN_G_MASK;
 800e81e:	466b      	mov	r3, sp
 800e820:	79d9      	ldrb	r1, [r3, #7]
 800e822:	2308      	movs	r3, #8
 800e824:	4399      	bics	r1, r3
  value |= newValue;
 800e826:	4329      	orrs	r1, r5
 800e828:	466b      	mov	r3, sp
 800e82a:	71d9      	strb	r1, [r3, #7]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
 800e82c:	2301      	movs	r3, #1
 800e82e:	466a      	mov	r2, sp
 800e830:	3207      	adds	r2, #7
 800e832:	2119      	movs	r1, #25
 800e834:	0020      	movs	r0, r4
 800e836:	f7ff fe03 	bl	800e440 <LSM6DS3_ACC_GYRO_WriteReg>
 800e83a:	1e43      	subs	r3, r0, #1
 800e83c:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e83e:	b2c0      	uxtb	r0, r0
 800e840:	e7eb      	b.n	800e81a <LSM6DS3_ACC_GYRO_W_XEN_G+0x18>

0800e842 <LSM6DS3_ACC_GYRO_W_YEN_G>:
* Input          : LSM6DS3_ACC_GYRO_YEN_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_YEN_G(void *handle, LSM6DS3_ACC_GYRO_YEN_G_t newValue)
{
 800e842:	b530      	push	{r4, r5, lr}
 800e844:	b083      	sub	sp, #12
 800e846:	0004      	movs	r4, r0
 800e848:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
 800e84a:	2301      	movs	r3, #1
 800e84c:	466a      	mov	r2, sp
 800e84e:	3207      	adds	r2, #7
 800e850:	2119      	movs	r1, #25
 800e852:	f7ff fdfc 	bl	800e44e <LSM6DS3_ACC_GYRO_ReadReg>
 800e856:	2800      	cmp	r0, #0
 800e858:	d101      	bne.n	800e85e <LSM6DS3_ACC_GYRO_W_YEN_G+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e85a:	b003      	add	sp, #12
 800e85c:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_YEN_G_MASK;
 800e85e:	466b      	mov	r3, sp
 800e860:	79d9      	ldrb	r1, [r3, #7]
 800e862:	2310      	movs	r3, #16
 800e864:	4399      	bics	r1, r3
  value |= newValue;
 800e866:	4329      	orrs	r1, r5
 800e868:	466b      	mov	r3, sp
 800e86a:	71d9      	strb	r1, [r3, #7]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
 800e86c:	2301      	movs	r3, #1
 800e86e:	466a      	mov	r2, sp
 800e870:	3207      	adds	r2, #7
 800e872:	2119      	movs	r1, #25
 800e874:	0020      	movs	r0, r4
 800e876:	f7ff fde3 	bl	800e440 <LSM6DS3_ACC_GYRO_WriteReg>
 800e87a:	1e43      	subs	r3, r0, #1
 800e87c:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e87e:	b2c0      	uxtb	r0, r0
 800e880:	e7eb      	b.n	800e85a <LSM6DS3_ACC_GYRO_W_YEN_G+0x18>

0800e882 <LSM6DS3_ACC_GYRO_W_ZEN_G>:
* Input          : LSM6DS3_ACC_GYRO_ZEN_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_ZEN_G(void *handle, LSM6DS3_ACC_GYRO_ZEN_G_t newValue)
{
 800e882:	b530      	push	{r4, r5, lr}
 800e884:	b083      	sub	sp, #12
 800e886:	0004      	movs	r4, r0
 800e888:	000d      	movs	r5, r1
  uint8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
 800e88a:	2301      	movs	r3, #1
 800e88c:	466a      	mov	r2, sp
 800e88e:	3207      	adds	r2, #7
 800e890:	2119      	movs	r1, #25
 800e892:	f7ff fddc 	bl	800e44e <LSM6DS3_ACC_GYRO_ReadReg>
 800e896:	2800      	cmp	r0, #0
 800e898:	d101      	bne.n	800e89e <LSM6DS3_ACC_GYRO_W_ZEN_G+0x1c>

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800e89a:	b003      	add	sp, #12
 800e89c:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_ZEN_G_MASK;
 800e89e:	466b      	mov	r3, sp
 800e8a0:	79d9      	ldrb	r1, [r3, #7]
 800e8a2:	2320      	movs	r3, #32
 800e8a4:	4399      	bics	r1, r3
  value |= newValue;
 800e8a6:	4329      	orrs	r1, r5
 800e8a8:	466b      	mov	r3, sp
 800e8aa:	71d9      	strb	r1, [r3, #7]
  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	466a      	mov	r2, sp
 800e8b0:	3207      	adds	r2, #7
 800e8b2:	2119      	movs	r1, #25
 800e8b4:	0020      	movs	r0, r4
 800e8b6:	f7ff fdc3 	bl	800e440 <LSM6DS3_ACC_GYRO_WriteReg>
 800e8ba:	1e43      	subs	r3, r0, #1
 800e8bc:	4198      	sbcs	r0, r3
    return MEMS_ERROR;
 800e8be:	b2c0      	uxtb	r0, r0
 800e8c0:	e7eb      	b.n	800e89a <LSM6DS3_ACC_GYRO_W_ZEN_G+0x18>

0800e8c2 <LSM6DS3_ACC_GYRO_Get_GetFIFOData>:
* Input          : pointer to [uint8_t]
* Output         : GetFIFOData buffer uint8_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_Get_GetFIFOData(void *handle, uint8_t *buff)
{
 800e8c2:	b570      	push	{r4, r5, r6, lr}
 800e8c4:	0005      	movs	r5, r0
 800e8c6:	000c      	movs	r4, r1
  k = 0;
  for (i = 0; i < 1; i++ )
  {
    for (j = 0; j < numberOfByteForDimension; j++ )
    {
      if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_DATA_OUT_L + k, &buff[k], 1))
 800e8c8:	2301      	movs	r3, #1
 800e8ca:	000a      	movs	r2, r1
 800e8cc:	213e      	movs	r1, #62	; 0x3e
 800e8ce:	f7ff fdbe 	bl	800e44e <LSM6DS3_ACC_GYRO_ReadReg>
 800e8d2:	2800      	cmp	r0, #0
 800e8d4:	d00a      	beq.n	800e8ec <LSM6DS3_ACC_GYRO_Get_GetFIFOData+0x2a>
 800e8d6:	1c62      	adds	r2, r4, #1
 800e8d8:	2301      	movs	r3, #1
 800e8da:	213f      	movs	r1, #63	; 0x3f
 800e8dc:	0028      	movs	r0, r5
 800e8de:	f7ff fdb6 	bl	800e44e <LSM6DS3_ACC_GYRO_ReadReg>
 800e8e2:	0003      	movs	r3, r0
        return MEMS_ERROR;
      k++;
    }
  }

  return MEMS_SUCCESS;
 800e8e4:	2001      	movs	r0, #1
      if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_DATA_OUT_L + k, &buff[k], 1))
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d000      	beq.n	800e8ec <LSM6DS3_ACC_GYRO_Get_GetFIFOData+0x2a>
}
 800e8ea:	bd70      	pop	{r4, r5, r6, pc}
        return MEMS_ERROR;
 800e8ec:	2000      	movs	r0, #0
 800e8ee:	e7fc      	b.n	800e8ea <LSM6DS3_ACC_GYRO_Get_GetFIFOData+0x28>

0800e8f0 <LSM6DS3_ACC_Get_Acceleration>:
{
 800e8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8f2:	46c6      	mov	lr, r8
 800e8f4:	b500      	push	{lr}
 800e8f6:	b082      	sub	sp, #8
 800e8f8:	0006      	movs	r6, r0
 800e8fa:	4688      	mov	r8, r1
 800e8fc:	0017      	movs	r7, r2
  LSM6DS3_ACC_GYRO_R_FS_XL(handle, &fs);
 800e8fe:	466b      	mov	r3, sp
 800e900:	1ddc      	adds	r4, r3, #7
 800e902:	0021      	movs	r1, r4
 800e904:	f7ff fdd4 	bl	800e4b0 <LSM6DS3_ACC_GYRO_R_FS_XL>
  switch(fs)
 800e908:	7823      	ldrb	r3, [r4, #0]
 800e90a:	2b08      	cmp	r3, #8
 800e90c:	d058      	beq.n	800e9c0 <LSM6DS3_ACC_Get_Acceleration+0xd0>
 800e90e:	d852      	bhi.n	800e9b6 <LSM6DS3_ACC_Get_Acceleration+0xc6>
 800e910:	243d      	movs	r4, #61	; 0x3d
 800e912:	2500      	movs	r5, #0
 800e914:	2b00      	cmp	r3, #0
 800e916:	d004      	beq.n	800e922 <LSM6DS3_ACC_Get_Acceleration+0x32>
 800e918:	2b04      	cmp	r3, #4
 800e91a:	d154      	bne.n	800e9c6 <LSM6DS3_ACC_Get_Acceleration+0xd6>
      sensitivity = LSM6DS3_ACC_Sensitivity_List[3];
 800e91c:	24f4      	movs	r4, #244	; 0xf4
 800e91e:	0064      	lsls	r4, r4, #1
 800e920:	2500      	movs	r5, #0
  if (from_fifo)
 800e922:	2f00      	cmp	r7, #0
 800e924:	d055      	beq.n	800e9d2 <LSM6DS3_ACC_Get_Acceleration+0xe2>
      LSM6DS3_ACC_GYRO_Get_GetFIFOData(handle, raw_data_tmp.u8bit + 2 * i);
 800e926:	4669      	mov	r1, sp
 800e928:	0030      	movs	r0, r6
 800e92a:	f7ff ffca 	bl	800e8c2 <LSM6DS3_ACC_GYRO_Get_GetFIFOData>
 800e92e:	466b      	mov	r3, sp
 800e930:	1c99      	adds	r1, r3, #2
 800e932:	0030      	movs	r0, r6
 800e934:	f7ff ffc5 	bl	800e8c2 <LSM6DS3_ACC_GYRO_Get_GetFIFOData>
 800e938:	a901      	add	r1, sp, #4
 800e93a:	0030      	movs	r0, r6
 800e93c:	f7ff ffc1 	bl	800e8c2 <LSM6DS3_ACC_GYRO_Get_GetFIFOData>
  buff[0] = (raw_data_tmp.i16bit[0] * sensitivity + 500) / 1000;
 800e940:	466b      	mov	r3, sp
 800e942:	2000      	movs	r0, #0
 800e944:	5e18      	ldrsh	r0, [r3, r0]
 800e946:	17c1      	asrs	r1, r0, #31
 800e948:	0022      	movs	r2, r4
 800e94a:	002b      	movs	r3, r5
 800e94c:	f7f1 fe32 	bl	80005b4 <__aeabi_lmul>
 800e950:	26fa      	movs	r6, #250	; 0xfa
 800e952:	0076      	lsls	r6, r6, #1
 800e954:	2700      	movs	r7, #0
 800e956:	1980      	adds	r0, r0, r6
 800e958:	4179      	adcs	r1, r7
 800e95a:	22fa      	movs	r2, #250	; 0xfa
 800e95c:	0092      	lsls	r2, r2, #2
 800e95e:	2300      	movs	r3, #0
 800e960:	f7f1 fde4 	bl	800052c <__aeabi_ldivmod>
 800e964:	4643      	mov	r3, r8
 800e966:	6018      	str	r0, [r3, #0]
  buff[1] = (raw_data_tmp.i16bit[1] * sensitivity + 500) / 1000;
 800e968:	466b      	mov	r3, sp
 800e96a:	2002      	movs	r0, #2
 800e96c:	5e18      	ldrsh	r0, [r3, r0]
 800e96e:	17c1      	asrs	r1, r0, #31
 800e970:	0022      	movs	r2, r4
 800e972:	002b      	movs	r3, r5
 800e974:	f7f1 fe1e 	bl	80005b4 <__aeabi_lmul>
 800e978:	1980      	adds	r0, r0, r6
 800e97a:	4179      	adcs	r1, r7
 800e97c:	22fa      	movs	r2, #250	; 0xfa
 800e97e:	0092      	lsls	r2, r2, #2
 800e980:	2300      	movs	r3, #0
 800e982:	f7f1 fdd3 	bl	800052c <__aeabi_ldivmod>
 800e986:	4643      	mov	r3, r8
 800e988:	6058      	str	r0, [r3, #4]
  buff[2] = (raw_data_tmp.i16bit[2] * sensitivity + 500) / 1000;
 800e98a:	466b      	mov	r3, sp
 800e98c:	2004      	movs	r0, #4
 800e98e:	5e18      	ldrsh	r0, [r3, r0]
 800e990:	17c1      	asrs	r1, r0, #31
 800e992:	0022      	movs	r2, r4
 800e994:	002b      	movs	r3, r5
 800e996:	f7f1 fe0d 	bl	80005b4 <__aeabi_lmul>
 800e99a:	1980      	adds	r0, r0, r6
 800e99c:	4179      	adcs	r1, r7
 800e99e:	22fa      	movs	r2, #250	; 0xfa
 800e9a0:	0092      	lsls	r2, r2, #2
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	f7f1 fdc2 	bl	800052c <__aeabi_ldivmod>
 800e9a8:	4643      	mov	r3, r8
 800e9aa:	6098      	str	r0, [r3, #8]
}
 800e9ac:	2001      	movs	r0, #1
 800e9ae:	b002      	add	sp, #8
 800e9b0:	bc80      	pop	{r7}
 800e9b2:	46b8      	mov	r8, r7
 800e9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch(fs)
 800e9b6:	2b0c      	cmp	r3, #12
 800e9b8:	d108      	bne.n	800e9cc <LSM6DS3_ACC_Get_Acceleration+0xdc>
      sensitivity = LSM6DS3_ACC_Sensitivity_List[2];
 800e9ba:	24f4      	movs	r4, #244	; 0xf4
 800e9bc:	2500      	movs	r5, #0
 800e9be:	e7b0      	b.n	800e922 <LSM6DS3_ACC_Get_Acceleration+0x32>
      sensitivity = LSM6DS3_ACC_Sensitivity_List[1];
 800e9c0:	247a      	movs	r4, #122	; 0x7a
 800e9c2:	2500      	movs	r5, #0
 800e9c4:	e7ad      	b.n	800e922 <LSM6DS3_ACC_Get_Acceleration+0x32>
  long long sensitivity = 0;
 800e9c6:	2400      	movs	r4, #0
 800e9c8:	2500      	movs	r5, #0
 800e9ca:	e7aa      	b.n	800e922 <LSM6DS3_ACC_Get_Acceleration+0x32>
 800e9cc:	2400      	movs	r4, #0
 800e9ce:	2500      	movs	r5, #0
 800e9d0:	e7a7      	b.n	800e922 <LSM6DS3_ACC_Get_Acceleration+0x32>
    LSM6DS3_ACC_GYRO_GetRawAccData(handle, raw_data_tmp.u8bit);
 800e9d2:	4669      	mov	r1, sp
 800e9d4:	0030      	movs	r0, r6
 800e9d6:	f7ff fd7a 	bl	800e4ce <LSM6DS3_ACC_GYRO_GetRawAccData>
 800e9da:	e7b1      	b.n	800e940 <LSM6DS3_ACC_Get_Acceleration+0x50>

0800e9dc <LSM6DS3_ACC_Get_AngularRate>:
{
 800e9dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9de:	46c6      	mov	lr, r8
 800e9e0:	b500      	push	{lr}
 800e9e2:	b082      	sub	sp, #8
 800e9e4:	0006      	movs	r6, r0
 800e9e6:	4688      	mov	r8, r1
 800e9e8:	0017      	movs	r7, r2
  LSM6DS3_ACC_GYRO_R_FS_125(handle, &fs_125);
 800e9ea:	466b      	mov	r3, sp
 800e9ec:	1ddc      	adds	r4, r3, #7
 800e9ee:	0021      	movs	r1, r4
 800e9f0:	f7ff fe38 	bl	800e664 <LSM6DS3_ACC_GYRO_R_FS_125>
  if (fs_125 == LSM6DS3_ACC_GYRO_FS_125_ENABLED)
 800e9f4:	7823      	ldrb	r3, [r4, #0]
 800e9f6:	2b02      	cmp	r3, #2
 800e9f8:	d14b      	bne.n	800ea92 <LSM6DS3_ACC_Get_AngularRate+0xb6>
    sensitivity = LSM6DS3_GYRO_Sensitivity_List[0];
 800e9fa:	4c39      	ldr	r4, [pc, #228]	; (800eae0 <LSM6DS3_ACC_Get_AngularRate+0x104>)
 800e9fc:	2500      	movs	r5, #0
  if (from_fifo)
 800e9fe:	2f00      	cmp	r7, #0
 800ea00:	d069      	beq.n	800ead6 <LSM6DS3_ACC_Get_AngularRate+0xfa>
      LSM6DS3_ACC_GYRO_Get_GetFIFOData(handle, raw_data_tmp.u8bit + 2 * i);
 800ea02:	4669      	mov	r1, sp
 800ea04:	0030      	movs	r0, r6
 800ea06:	f7ff ff5c 	bl	800e8c2 <LSM6DS3_ACC_GYRO_Get_GetFIFOData>
 800ea0a:	466b      	mov	r3, sp
 800ea0c:	1c99      	adds	r1, r3, #2
 800ea0e:	0030      	movs	r0, r6
 800ea10:	f7ff ff57 	bl	800e8c2 <LSM6DS3_ACC_GYRO_Get_GetFIFOData>
 800ea14:	a901      	add	r1, sp, #4
 800ea16:	0030      	movs	r0, r6
 800ea18:	f7ff ff53 	bl	800e8c2 <LSM6DS3_ACC_GYRO_Get_GetFIFOData>
  buff[0] = (raw_data_tmp.i16bit[0] * sensitivity + 500) / 1000;
 800ea1c:	466b      	mov	r3, sp
 800ea1e:	2000      	movs	r0, #0
 800ea20:	5e18      	ldrsh	r0, [r3, r0]
 800ea22:	17c1      	asrs	r1, r0, #31
 800ea24:	0022      	movs	r2, r4
 800ea26:	002b      	movs	r3, r5
 800ea28:	f7f1 fdc4 	bl	80005b4 <__aeabi_lmul>
 800ea2c:	26fa      	movs	r6, #250	; 0xfa
 800ea2e:	0076      	lsls	r6, r6, #1
 800ea30:	2700      	movs	r7, #0
 800ea32:	1980      	adds	r0, r0, r6
 800ea34:	4179      	adcs	r1, r7
 800ea36:	22fa      	movs	r2, #250	; 0xfa
 800ea38:	0092      	lsls	r2, r2, #2
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	f7f1 fd76 	bl	800052c <__aeabi_ldivmod>
 800ea40:	4643      	mov	r3, r8
 800ea42:	6018      	str	r0, [r3, #0]
  buff[1] = (raw_data_tmp.i16bit[1] * sensitivity + 500) / 1000;
 800ea44:	466b      	mov	r3, sp
 800ea46:	2002      	movs	r0, #2
 800ea48:	5e18      	ldrsh	r0, [r3, r0]
 800ea4a:	17c1      	asrs	r1, r0, #31
 800ea4c:	0022      	movs	r2, r4
 800ea4e:	002b      	movs	r3, r5
 800ea50:	f7f1 fdb0 	bl	80005b4 <__aeabi_lmul>
 800ea54:	1980      	adds	r0, r0, r6
 800ea56:	4179      	adcs	r1, r7
 800ea58:	22fa      	movs	r2, #250	; 0xfa
 800ea5a:	0092      	lsls	r2, r2, #2
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	f7f1 fd65 	bl	800052c <__aeabi_ldivmod>
 800ea62:	4643      	mov	r3, r8
 800ea64:	6058      	str	r0, [r3, #4]
  buff[2] = (raw_data_tmp.i16bit[2] * sensitivity + 500) / 1000;
 800ea66:	466b      	mov	r3, sp
 800ea68:	2004      	movs	r0, #4
 800ea6a:	5e18      	ldrsh	r0, [r3, r0]
 800ea6c:	17c1      	asrs	r1, r0, #31
 800ea6e:	0022      	movs	r2, r4
 800ea70:	002b      	movs	r3, r5
 800ea72:	f7f1 fd9f 	bl	80005b4 <__aeabi_lmul>
 800ea76:	1980      	adds	r0, r0, r6
 800ea78:	4179      	adcs	r1, r7
 800ea7a:	22fa      	movs	r2, #250	; 0xfa
 800ea7c:	0092      	lsls	r2, r2, #2
 800ea7e:	2300      	movs	r3, #0
 800ea80:	f7f1 fd54 	bl	800052c <__aeabi_ldivmod>
 800ea84:	4643      	mov	r3, r8
 800ea86:	6098      	str	r0, [r3, #8]
}
 800ea88:	2001      	movs	r0, #1
 800ea8a:	b002      	add	sp, #8
 800ea8c:	bc80      	pop	{r7}
 800ea8e:	46b8      	mov	r8, r7
 800ea90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LSM6DS3_ACC_GYRO_R_FS_G(handle, &fs);
 800ea92:	466b      	mov	r3, sp
 800ea94:	1d9c      	adds	r4, r3, #6
 800ea96:	0021      	movs	r1, r4
 800ea98:	0030      	movs	r0, r6
 800ea9a:	f7ff fd76 	bl	800e58a <LSM6DS3_ACC_GYRO_R_FS_G>
    switch(fs)
 800ea9e:	7823      	ldrb	r3, [r4, #0]
 800eaa0:	2b08      	cmp	r3, #8
 800eaa2:	d00c      	beq.n	800eabe <LSM6DS3_ACC_Get_AngularRate+0xe2>
 800eaa4:	d806      	bhi.n	800eab4 <LSM6DS3_ACC_Get_AngularRate+0xd8>
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d00c      	beq.n	800eac4 <LSM6DS3_ACC_Get_AngularRate+0xe8>
 800eaaa:	2b04      	cmp	r3, #4
 800eaac:	d10d      	bne.n	800eaca <LSM6DS3_ACC_Get_AngularRate+0xee>
        sensitivity = LSM6DS3_GYRO_Sensitivity_List[2];
 800eaae:	4c0d      	ldr	r4, [pc, #52]	; (800eae4 <LSM6DS3_ACC_Get_AngularRate+0x108>)
 800eab0:	2500      	movs	r5, #0
 800eab2:	e7a4      	b.n	800e9fe <LSM6DS3_ACC_Get_AngularRate+0x22>
    switch(fs)
 800eab4:	2b0c      	cmp	r3, #12
 800eab6:	d10b      	bne.n	800ead0 <LSM6DS3_ACC_Get_AngularRate+0xf4>
        sensitivity = LSM6DS3_GYRO_Sensitivity_List[4];
 800eab8:	4c0b      	ldr	r4, [pc, #44]	; (800eae8 <LSM6DS3_ACC_Get_AngularRate+0x10c>)
 800eaba:	2500      	movs	r5, #0
 800eabc:	e79f      	b.n	800e9fe <LSM6DS3_ACC_Get_AngularRate+0x22>
        sensitivity = LSM6DS3_GYRO_Sensitivity_List[3];
 800eabe:	4c0b      	ldr	r4, [pc, #44]	; (800eaec <LSM6DS3_ACC_Get_AngularRate+0x110>)
 800eac0:	2500      	movs	r5, #0
 800eac2:	e79c      	b.n	800e9fe <LSM6DS3_ACC_Get_AngularRate+0x22>
    switch(fs)
 800eac4:	4c0a      	ldr	r4, [pc, #40]	; (800eaf0 <LSM6DS3_ACC_Get_AngularRate+0x114>)
 800eac6:	2500      	movs	r5, #0
 800eac8:	e799      	b.n	800e9fe <LSM6DS3_ACC_Get_AngularRate+0x22>
  long long sensitivity = 0;
 800eaca:	2400      	movs	r4, #0
 800eacc:	2500      	movs	r5, #0
 800eace:	e796      	b.n	800e9fe <LSM6DS3_ACC_Get_AngularRate+0x22>
 800ead0:	2400      	movs	r4, #0
 800ead2:	2500      	movs	r5, #0
 800ead4:	e793      	b.n	800e9fe <LSM6DS3_ACC_Get_AngularRate+0x22>
    LSM6DS3_ACC_GYRO_GetRawGyroData(handle, raw_data_tmp.u8bit);
 800ead6:	4669      	mov	r1, sp
 800ead8:	0030      	movs	r0, r6
 800eada:	f7ff fd85 	bl	800e5e8 <LSM6DS3_ACC_GYRO_GetRawGyroData>
 800eade:	e79d      	b.n	800ea1c <LSM6DS3_ACC_Get_AngularRate+0x40>
 800eae0:	00001117 	.word	0x00001117
 800eae4:	0000445c 	.word	0x0000445c
 800eae8:	00011170 	.word	0x00011170
 800eaec:	000088b8 	.word	0x000088b8
 800eaf0:	0000222e 	.word	0x0000222e

0800eaf4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800eaf4:	b510      	push	{r4, lr}
  vTaskStartScheduler();
 800eaf6:	f000 ff7d 	bl	800f9f4 <vTaskStartScheduler>
  
  return osOK;
}
 800eafa:	2000      	movs	r0, #0
 800eafc:	bd10      	pop	{r4, pc}

0800eafe <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800eafe:	b510      	push	{r4, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800eb00:	2800      	cmp	r0, #0
 800eb02:	d100      	bne.n	800eb06 <osDelay+0x8>
 800eb04:	3001      	adds	r0, #1
 800eb06:	f001 f8bd 	bl	800fc84 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800eb0a:	2000      	movs	r0, #0
 800eb0c:	bd10      	pop	{r4, pc}

0800eb0e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 800eb0e:	b510      	push	{r4, lr}
 800eb10:	0008      	movs	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 800eb12:	2901      	cmp	r1, #1
 800eb14:	d005      	beq.n	800eb22 <osSemaphoreCreate+0x14>
    vSemaphoreCreateBinary(sema);
    return sema;
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
 800eb16:	2100      	movs	r1, #0
 800eb18:	f000 fb06 	bl	800f128 <xQueueCreateCountingSemaphore>
 800eb1c:	0004      	movs	r4, r0
#else
  return NULL;
#endif
}
 800eb1e:	0020      	movs	r0, r4
 800eb20:	bd10      	pop	{r4, pc}
    vSemaphoreCreateBinary(sema);
 800eb22:	2203      	movs	r2, #3
 800eb24:	2100      	movs	r1, #0
 800eb26:	f000 fada 	bl	800f0de <xQueueGenericCreate>
 800eb2a:	1e04      	subs	r4, r0, #0
 800eb2c:	d0f7      	beq.n	800eb1e <osSemaphoreCreate+0x10>
 800eb2e:	2300      	movs	r3, #0
 800eb30:	2200      	movs	r2, #0
 800eb32:	2100      	movs	r1, #0
 800eb34:	f000 fb0c 	bl	800f150 <xQueueGenericSend>
 800eb38:	e7f1      	b.n	800eb1e <osSemaphoreCreate+0x10>
	...

0800eb3c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800eb3c:	b500      	push	{lr}
 800eb3e:	b083      	sub	sp, #12
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800eb40:	2300      	movs	r3, #0
 800eb42:	9301      	str	r3, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 800eb44:	2800      	cmp	r0, #0
 800eb46:	d020      	beq.n	800eb8a <osSemaphoreWait+0x4e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb48:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d00e      	beq.n	800eb6e <osSemaphoreWait+0x32>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800eb50:	aa01      	add	r2, sp, #4
 800eb52:	2100      	movs	r1, #0
 800eb54:	f000 fcc7 	bl	800f4e6 <xQueueReceiveFromISR>
 800eb58:	2801      	cmp	r0, #1
 800eb5a:	d118      	bne.n	800eb8e <osSemaphoreWait+0x52>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800eb5c:	9801      	ldr	r0, [sp, #4]
 800eb5e:	2800      	cmp	r0, #0
 800eb60:	d011      	beq.n	800eb86 <osSemaphoreWait+0x4a>
 800eb62:	4b0c      	ldr	r3, [pc, #48]	; (800eb94 <osSemaphoreWait+0x58>)
 800eb64:	2280      	movs	r2, #128	; 0x80
 800eb66:	0552      	lsls	r2, r2, #21
 800eb68:	601a      	str	r2, [r3, #0]
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 800eb6a:	2000      	movs	r0, #0
 800eb6c:	e00b      	b.n	800eb86 <osSemaphoreWait+0x4a>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800eb6e:	2300      	movs	r3, #0
 800eb70:	000a      	movs	r2, r1
 800eb72:	2100      	movs	r1, #0
 800eb74:	f000 fc0c 	bl	800f390 <xQueueGenericReceive>
    return osErrorOS;
 800eb78:	3801      	subs	r0, #1
 800eb7a:	4243      	negs	r3, r0
 800eb7c:	4158      	adcs	r0, r3
 800eb7e:	4240      	negs	r0, r0
 800eb80:	23fe      	movs	r3, #254	; 0xfe
 800eb82:	4398      	bics	r0, r3
 800eb84:	30ff      	adds	r0, #255	; 0xff
}
 800eb86:	b003      	add	sp, #12
 800eb88:	bd00      	pop	{pc}
    return osErrorParameter;
 800eb8a:	2080      	movs	r0, #128	; 0x80
 800eb8c:	e7fb      	b.n	800eb86 <osSemaphoreWait+0x4a>
      return osErrorOS;
 800eb8e:	20ff      	movs	r0, #255	; 0xff
 800eb90:	e7f9      	b.n	800eb86 <osSemaphoreWait+0x4a>
 800eb92:	46c0      	nop			; (mov r8, r8)
 800eb94:	e000ed04 	.word	0xe000ed04

0800eb98 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800eb98:	b510      	push	{r4, lr}
 800eb9a:	b082      	sub	sp, #8
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	9301      	str	r3, [sp, #4]
 800eba0:	f3ef 8405 	mrs	r4, IPSR
  
  
  if (inHandlerMode()) {
 800eba4:	2c00      	cmp	r4, #0
 800eba6:	d00d      	beq.n	800ebc4 <osSemaphoreRelease+0x2c>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800eba8:	a901      	add	r1, sp, #4
 800ebaa:	f000 fbb5 	bl	800f318 <xQueueGiveFromISR>
 800ebae:	2801      	cmp	r0, #1
 800ebb0:	d113      	bne.n	800ebda <osSemaphoreRelease+0x42>
  osStatus result = osOK;
 800ebb2:	2400      	movs	r4, #0
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ebb4:	9b01      	ldr	r3, [sp, #4]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d00c      	beq.n	800ebd4 <osSemaphoreRelease+0x3c>
 800ebba:	4b09      	ldr	r3, [pc, #36]	; (800ebe0 <osSemaphoreRelease+0x48>)
 800ebbc:	2280      	movs	r2, #128	; 0x80
 800ebbe:	0552      	lsls	r2, r2, #21
 800ebc0:	601a      	str	r2, [r3, #0]
 800ebc2:	e007      	b.n	800ebd4 <osSemaphoreRelease+0x3c>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	2100      	movs	r1, #0
 800ebca:	f000 fac1 	bl	800f150 <xQueueGenericSend>
 800ebce:	2801      	cmp	r0, #1
 800ebd0:	d000      	beq.n	800ebd4 <osSemaphoreRelease+0x3c>
      result = osErrorOS;
 800ebd2:	24ff      	movs	r4, #255	; 0xff
    }
  }
  
  return result;
}
 800ebd4:	0020      	movs	r0, r4
 800ebd6:	b002      	add	sp, #8
 800ebd8:	bd10      	pop	{r4, pc}
      return osErrorOS;
 800ebda:	24ff      	movs	r4, #255	; 0xff
 800ebdc:	e7fa      	b.n	800ebd4 <osSemaphoreRelease+0x3c>
 800ebde:	46c0      	nop			; (mov r8, r8)
 800ebe0:	e000ed04 	.word	0xe000ed04

0800ebe4 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800ebe4:	b510      	push	{r4, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800ebe6:	f001 fa41 	bl	801006c <xTaskGetSchedulerState>
 800ebea:	2801      	cmp	r0, #1
 800ebec:	d100      	bne.n	800ebf0 <osSystickHandler+0xc>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800ebee:	bd10      	pop	{r4, pc}
    xPortSysTickHandler();
 800ebf0:	f001 fed0 	bl	8010994 <xPortSysTickHandler>
}
 800ebf4:	e7fb      	b.n	800ebee <osSystickHandler+0xa>
	...

0800ebf8 <FreeRTOS_CLIRegisterCommand>:
static int8_t cOutputBuffer[ configCOMMAND_INT_MAX_OUTPUT_SIZE ];

/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
 800ebf8:	b570      	push	{r4, r5, r6, lr}
 800ebfa:	1e05      	subs	r5, r0, #0
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
portBASE_TYPE xReturn = pdFAIL;

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
 800ebfc:	d011      	beq.n	800ec22 <FreeRTOS_CLIRegisterCommand+0x2a>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800ebfe:	2008      	movs	r0, #8
 800ec00:	f001 ff04 	bl	8010a0c <pvPortMalloc>
 800ec04:	1e04      	subs	r4, r0, #0
	configASSERT( pxNewListItem );
 800ec06:	d00e      	beq.n	800ec26 <FreeRTOS_CLIRegisterCommand+0x2e>

	if( pxNewListItem != NULL )
	{
		taskENTER_CRITICAL();
 800ec08:	f001 fe7e 	bl	8010908 <vPortEnterCritical>
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 800ec0c:	6025      	str	r5, [r4, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	6063      	str	r3, [r4, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
 800ec12:	4b06      	ldr	r3, [pc, #24]	; (800ec2c <FreeRTOS_CLIRegisterCommand+0x34>)
 800ec14:	681a      	ldr	r2, [r3, #0]
 800ec16:	6054      	str	r4, [r2, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
 800ec18:	601c      	str	r4, [r3, #0]
		}
		taskEXIT_CRITICAL();
 800ec1a:	f001 fe81 	bl	8010920 <vPortExitCritical>

		xReturn = pdPASS;
	}

	return xReturn;
}
 800ec1e:	2001      	movs	r0, #1
 800ec20:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxCommandToRegister );
 800ec22:	b672      	cpsid	i
 800ec24:	e7fe      	b.n	800ec24 <FreeRTOS_CLIRegisterCommand+0x2c>
	configASSERT( pxNewListItem );
 800ec26:	b672      	cpsid	i
 800ec28:	e7fe      	b.n	800ec28 <FreeRTOS_CLIRegisterCommand+0x30>
 800ec2a:	46c0      	nop			; (mov r8, r8)
 800ec2c:	2000017c 	.word	0x2000017c

0800ec30 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

portBASE_TYPE FreeRTOS_CLIProcessCommand( const int8_t * const pcCommandInput, int8_t * pcWriteBuffer, size_t xWriteBufferLen  )
{
 800ec30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec32:	46de      	mov	lr, fp
 800ec34:	4657      	mov	r7, sl
 800ec36:	464e      	mov	r6, r9
 800ec38:	4645      	mov	r5, r8
 800ec3a:	b5e0      	push	{r5, r6, r7, lr}
 800ec3c:	b083      	sub	sp, #12
 800ec3e:	0006      	movs	r6, r0
 800ec40:	4689      	mov	r9, r1
 800ec42:	9201      	str	r2, [sp, #4]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	than one task. */

	if( pxCommand == NULL )
 800ec44:	4b3b      	ldr	r3, [pc, #236]	; (800ed34 <FreeRTOS_CLIProcessCommand+0x104>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d012      	beq.n	800ec72 <FreeRTOS_CLIProcessCommand+0x42>
		pxCommand = NULL;
	}
	else if( pxCommand != NULL )
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	689b      	ldr	r3, [r3, #8]
 800ec50:	0032      	movs	r2, r6
 800ec52:	9901      	ldr	r1, [sp, #4]
 800ec54:	4648      	mov	r0, r9
 800ec56:	4798      	blx	r3
 800ec58:	1e05      	subs	r5, r0, #0

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 800ec5a:	d102      	bne.n	800ec62 <FreeRTOS_CLIProcessCommand+0x32>
		{
			pxCommand = NULL;
 800ec5c:	4b35      	ldr	r3, [pc, #212]	; (800ed34 <FreeRTOS_CLIProcessCommand+0x104>)
 800ec5e:	2200      	movs	r2, #0
 800ec60:	601a      	str	r2, [r3, #0]
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
		xReturn = pdFALSE;
	}

	return xReturn;
}
 800ec62:	0028      	movs	r0, r5
 800ec64:	b003      	add	sp, #12
 800ec66:	bcf0      	pop	{r4, r5, r6, r7}
 800ec68:	46bb      	mov	fp, r7
 800ec6a:	46b2      	mov	sl, r6
 800ec6c:	46a9      	mov	r9, r5
 800ec6e:	46a0      	mov	r8, r4
 800ec70:	bdf0      	pop	{r4, r5, r6, r7, pc}
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800ec72:	4c31      	ldr	r4, [pc, #196]	; (800ed38 <FreeRTOS_CLIProcessCommand+0x108>)
 800ec74:	4b2f      	ldr	r3, [pc, #188]	; (800ed34 <FreeRTOS_CLIProcessCommand+0x104>)
 800ec76:	601c      	str	r4, [r3, #0]
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800ec78:	2320      	movs	r3, #32
 800ec7a:	469a      	mov	sl, r3
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800ec7c:	4b2d      	ldr	r3, [pc, #180]	; (800ed34 <FreeRTOS_CLIProcessCommand+0x104>)
 800ec7e:	469b      	mov	fp, r3
 800ec80:	e00a      	b.n	800ec98 <FreeRTOS_CLIProcessCommand+0x68>
				if( strncmp( ( const char * ) pcCommandInput, ( const char * ) pcRegisteredCommandString, xCommandStringLength ) == 0 )
 800ec82:	0029      	movs	r1, r5
 800ec84:	0030      	movs	r0, r6
 800ec86:	f005 fee0 	bl	8014a4a <strncmp>
 800ec8a:	1e05      	subs	r5, r0, #0
 800ec8c:	d012      	beq.n	800ecb4 <FreeRTOS_CLIProcessCommand+0x84>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 800ec8e:	6864      	ldr	r4, [r4, #4]
 800ec90:	465b      	mov	r3, fp
 800ec92:	601c      	str	r4, [r3, #0]
 800ec94:	2c00      	cmp	r4, #0
 800ec96:	d015      	beq.n	800ecc4 <FreeRTOS_CLIProcessCommand+0x94>
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 800ec98:	6827      	ldr	r7, [r4, #0]
 800ec9a:	683d      	ldr	r5, [r7, #0]
			xCommandStringLength = strlen( ( const char * ) pcRegisteredCommandString );
 800ec9c:	0028      	movs	r0, r5
 800ec9e:	f7f1 fa3b 	bl	8000118 <strlen>
 800eca2:	0002      	movs	r2, r0
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 800eca4:	5c33      	ldrb	r3, [r6, r0]
 800eca6:	4651      	mov	r1, sl
 800eca8:	438b      	bics	r3, r1
 800ecaa:	b259      	sxtb	r1, r3
 800ecac:	4688      	mov	r8, r1
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d1ed      	bne.n	800ec8e <FreeRTOS_CLIProcessCommand+0x5e>
 800ecb2:	e7e6      	b.n	800ec82 <FreeRTOS_CLIProcessCommand+0x52>
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 800ecb4:	7b3f      	ldrb	r7, [r7, #12]
 800ecb6:	b27f      	sxtb	r7, r7
 800ecb8:	2f00      	cmp	r7, #0
 800ecba:	da0a      	bge.n	800ecd2 <FreeRTOS_CLIProcessCommand+0xa2>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800ecbc:	4b1d      	ldr	r3, [pc, #116]	; (800ed34 <FreeRTOS_CLIProcessCommand+0x104>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d1c3      	bne.n	800ec4c <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( ( char * ) pcWriteBuffer, ( const char * ) "Command not recognised.  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800ecc4:	9a01      	ldr	r2, [sp, #4]
 800ecc6:	491d      	ldr	r1, [pc, #116]	; (800ed3c <FreeRTOS_CLIProcessCommand+0x10c>)
 800ecc8:	4648      	mov	r0, r9
 800ecca:	f005 fecf 	bl	8014a6c <strncpy>
		xReturn = pdFALSE;
 800ecce:	2500      	movs	r5, #0
	return xReturn;
 800ecd0:	e7c7      	b.n	800ec62 <FreeRTOS_CLIProcessCommand+0x32>
{
int8_t cParameters = 0;
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	56f3      	ldrsb	r3, [r6, r3]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d02a      	beq.n	800ed30 <FreeRTOS_CLIProcessCommand+0x100>
 800ecda:	0034      	movs	r4, r6
portBASE_TYPE xLastCharacterWasSpace = pdFALSE;
 800ecdc:	0002      	movs	r2, r0
				xLastCharacterWasSpace = pdTRUE;
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 800ecde:	0001      	movs	r1, r0
				xLastCharacterWasSpace = pdTRUE;
 800ece0:	2001      	movs	r0, #1
 800ece2:	e00b      	b.n	800ecfc <FreeRTOS_CLIProcessCommand+0xcc>
			if( xLastCharacterWasSpace != pdTRUE )
 800ece4:	2a01      	cmp	r2, #1
 800ece6:	d004      	beq.n	800ecf2 <FreeRTOS_CLIProcessCommand+0xc2>
				cParameters++;
 800ece8:	4643      	mov	r3, r8
 800ecea:	3301      	adds	r3, #1
 800ecec:	b25b      	sxtb	r3, r3
 800ecee:	4698      	mov	r8, r3
				xLastCharacterWasSpace = pdTRUE;
 800ecf0:	0002      	movs	r2, r0
		}

		pcCommandString++;
 800ecf2:	3401      	adds	r4, #1
	while( *pcCommandString != 0x00 )
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	56e3      	ldrsb	r3, [r4, r3]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d003      	beq.n	800ed04 <FreeRTOS_CLIProcessCommand+0xd4>
		if( ( *pcCommandString ) == ' ' )
 800ecfc:	2b20      	cmp	r3, #32
 800ecfe:	d0f1      	beq.n	800ece4 <FreeRTOS_CLIProcessCommand+0xb4>
			xLastCharacterWasSpace = pdFALSE;
 800ed00:	000a      	movs	r2, r1
 800ed02:	e7f6      	b.n	800ecf2 <FreeRTOS_CLIProcessCommand+0xc2>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 800ed04:	2a01      	cmp	r2, #1
 800ed06:	d00e      	beq.n	800ed26 <FreeRTOS_CLIProcessCommand+0xf6>
	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 800ed08:	4b0a      	ldr	r3, [pc, #40]	; (800ed34 <FreeRTOS_CLIProcessCommand+0x104>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d0d9      	beq.n	800ecc4 <FreeRTOS_CLIProcessCommand+0x94>
 800ed10:	4547      	cmp	r7, r8
 800ed12:	d09b      	beq.n	800ec4c <FreeRTOS_CLIProcessCommand+0x1c>
		strncpy( ( char * ) pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 800ed14:	9a01      	ldr	r2, [sp, #4]
 800ed16:	490a      	ldr	r1, [pc, #40]	; (800ed40 <FreeRTOS_CLIProcessCommand+0x110>)
 800ed18:	4648      	mov	r0, r9
 800ed1a:	f005 fea7 	bl	8014a6c <strncpy>
		pxCommand = NULL;
 800ed1e:	4b05      	ldr	r3, [pc, #20]	; (800ed34 <FreeRTOS_CLIProcessCommand+0x104>)
 800ed20:	2200      	movs	r2, #0
 800ed22:	601a      	str	r2, [r3, #0]
 800ed24:	e79d      	b.n	800ec62 <FreeRTOS_CLIProcessCommand+0x32>
	{
		cParameters--;
 800ed26:	4643      	mov	r3, r8
 800ed28:	3b01      	subs	r3, #1
 800ed2a:	b25b      	sxtb	r3, r3
 800ed2c:	4698      	mov	r8, r3
 800ed2e:	e7eb      	b.n	800ed08 <FreeRTOS_CLIProcessCommand+0xd8>
int8_t cParameters = 0;
 800ed30:	4698      	mov	r8, r3
 800ed32:	e7e9      	b.n	800ed08 <FreeRTOS_CLIProcessCommand+0xd8>
 800ed34:	20001a70 	.word	0x20001a70
 800ed38:	20000180 	.word	0x20000180
 800ed3c:	0801d4f8 	.word	0x0801d4f8
 800ed40:	0801d4a0 	.word	0x0801d4a0

0800ed44 <FreeRTOS_CLIGetOutputBuffer>:
}
 800ed44:	4800      	ldr	r0, [pc, #0]	; (800ed48 <FreeRTOS_CLIGetOutputBuffer+0x4>)
 800ed46:	4770      	bx	lr
 800ed48:	20001808 	.word	0x20001808

0800ed4c <FreeRTOS_CLIGetParameter>:
{
 800ed4c:	b510      	push	{r4, lr}
	*pxParameterStringLength = 0;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	6013      	str	r3, [r2, #0]
unsigned portBASE_TYPE uxParametersFound = 0;
 800ed52:	2400      	movs	r4, #0
	while( uxParametersFound < uxWantedParameter )
 800ed54:	e00d      	b.n	800ed72 <FreeRTOS_CLIGetParameter+0x26>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800ed56:	2300      	movs	r3, #0
 800ed58:	56c3      	ldrsb	r3, [r0, r3]
 800ed5a:	2b20      	cmp	r3, #32
 800ed5c:	d104      	bne.n	800ed68 <FreeRTOS_CLIGetParameter+0x1c>
			pcCommandString++;
 800ed5e:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800ed60:	2300      	movs	r3, #0
 800ed62:	56c3      	ldrsb	r3, [r0, r3]
 800ed64:	2b20      	cmp	r3, #32
 800ed66:	d0fa      	beq.n	800ed5e <FreeRTOS_CLIGetParameter+0x12>
		if( *pcCommandString != 0x00 )
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d029      	beq.n	800edc0 <FreeRTOS_CLIGetParameter+0x74>
			uxParametersFound++;
 800ed6c:	3401      	adds	r4, #1
			if( uxParametersFound == uxWantedParameter )
 800ed6e:	42a1      	cmp	r1, r4
 800ed70:	d00f      	beq.n	800ed92 <FreeRTOS_CLIGetParameter+0x46>
	while( uxParametersFound < uxWantedParameter )
 800ed72:	428c      	cmp	r4, r1
 800ed74:	d026      	beq.n	800edc4 <FreeRTOS_CLIGetParameter+0x78>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800ed76:	2300      	movs	r3, #0
 800ed78:	56c3      	ldrsb	r3, [r0, r3]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d006      	beq.n	800ed8c <FreeRTOS_CLIGetParameter+0x40>
 800ed7e:	2b20      	cmp	r3, #32
 800ed80:	d0e9      	beq.n	800ed56 <FreeRTOS_CLIGetParameter+0xa>
			pcCommandString++;
 800ed82:	3001      	adds	r0, #1
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800ed84:	2300      	movs	r3, #0
 800ed86:	56c3      	ldrsb	r3, [r0, r3]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d1f8      	bne.n	800ed7e <FreeRTOS_CLIGetParameter+0x32>
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	56c3      	ldrsb	r3, [r0, r3]
 800ed90:	e7ea      	b.n	800ed68 <FreeRTOS_CLIGetParameter+0x1c>
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800ed92:	2300      	movs	r3, #0
 800ed94:	56c3      	ldrsb	r3, [r0, r3]
 800ed96:	0001      	movs	r1, r0
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d00f      	beq.n	800edbc <FreeRTOS_CLIGetParameter+0x70>
 800ed9c:	2b20      	cmp	r3, #32
 800ed9e:	d007      	beq.n	800edb0 <FreeRTOS_CLIGetParameter+0x64>
					( *pxParameterStringLength )++;
 800eda0:	6813      	ldr	r3, [r2, #0]
 800eda2:	3301      	adds	r3, #1
 800eda4:	6013      	str	r3, [r2, #0]
					pcCommandString++;
 800eda6:	3101      	adds	r1, #1
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800eda8:	2300      	movs	r3, #0
 800edaa:	56cb      	ldrsb	r3, [r1, r3]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d1f5      	bne.n	800ed9c <FreeRTOS_CLIGetParameter+0x50>
				if( *pxParameterStringLength == 0 )
 800edb0:	6813      	ldr	r3, [r2, #0]
					pcReturn = NULL;
 800edb2:	1e5a      	subs	r2, r3, #1
 800edb4:	4193      	sbcs	r3, r2
 800edb6:	425b      	negs	r3, r3
 800edb8:	4018      	ands	r0, r3
 800edba:	e004      	b.n	800edc6 <FreeRTOS_CLIGetParameter+0x7a>
 800edbc:	2000      	movs	r0, #0
 800edbe:	e002      	b.n	800edc6 <FreeRTOS_CLIGetParameter+0x7a>
const int8_t *pcReturn = NULL;
 800edc0:	2000      	movs	r0, #0
 800edc2:	e000      	b.n	800edc6 <FreeRTOS_CLIGetParameter+0x7a>
 800edc4:	2000      	movs	r0, #0
}
 800edc6:	bd10      	pop	{r4, pc}

0800edc8 <prvHelpCommand>:
{
 800edc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edca:	46c6      	mov	lr, r8
 800edcc:	b500      	push	{lr}
 800edce:	b082      	sub	sp, #8
 800edd0:	0005      	movs	r5, r0
 800edd2:	000c      	movs	r4, r1
 800edd4:	0010      	movs	r0, r2
portBASE_TYPE xParameterStringLength1 = 0;
 800edd6:	2300      	movs	r3, #0
 800edd8:	9301      	str	r3, [sp, #4]
	pcParameterString1 = ( int8_t * ) FreeRTOS_CLIGetParameter (pcCommandString, 1, &xParameterStringLength1);
 800edda:	aa01      	add	r2, sp, #4
 800eddc:	2101      	movs	r1, #1
 800edde:	f7ff ffb5 	bl	800ed4c <FreeRTOS_CLIGetParameter>
	if (pcParameterString1 != NULL && !strncmp((const char *)pcParameterString1, "params", 6))
 800ede2:	2800      	cmp	r0, #0
 800ede4:	d02a      	beq.n	800ee3c <prvHelpCommand+0x74>
 800ede6:	2206      	movs	r2, #6
 800ede8:	4932      	ldr	r1, [pc, #200]	; (800eeb4 <prvHelpCommand+0xec>)
 800edea:	f005 fe2e 	bl	8014a4a <strncmp>
 800edee:	1e06      	subs	r6, r0, #0
 800edf0:	d14b      	bne.n	800ee8a <prvHelpCommand+0xc2>
		if( str == NumOfParamsHelpStrings )
 800edf2:	4b31      	ldr	r3, [pc, #196]	; (800eeb8 <prvHelpCommand+0xf0>)
 800edf4:	781b      	ldrb	r3, [r3, #0]
 800edf6:	2b07      	cmp	r3, #7
 800edf8:	d015      	beq.n	800ee26 <prvHelpCommand+0x5e>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800edfa:	1c5a      	adds	r2, r3, #1
 800edfc:	b2d2      	uxtb	r2, r2
 800edfe:	4690      	mov	r8, r2
 800ee00:	4a2d      	ldr	r2, [pc, #180]	; (800eeb8 <prvHelpCommand+0xf0>)
 800ee02:	4641      	mov	r1, r8
 800ee04:	7011      	strb	r1, [r2, #0]
 800ee06:	009b      	lsls	r3, r3, #2
 800ee08:	4a2c      	ldr	r2, [pc, #176]	; (800eebc <prvHelpCommand+0xf4>)
 800ee0a:	5899      	ldr	r1, [r3, r2]
 800ee0c:	0022      	movs	r2, r4
 800ee0e:	0028      	movs	r0, r5
 800ee10:	f005 fe2c 	bl	8014a6c <strncpy>
			xReturn = pdTRUE;
 800ee14:	2701      	movs	r7, #1
		if( str == NumOfParamsHelpStrings )
 800ee16:	4643      	mov	r3, r8
 800ee18:	2b07      	cmp	r3, #7
 800ee1a:	d136      	bne.n	800ee8a <prvHelpCommand+0xc2>
			xReturn = pdFALSE; str = 0;
 800ee1c:	4b26      	ldr	r3, [pc, #152]	; (800eeb8 <prvHelpCommand+0xf0>)
 800ee1e:	2200      	movs	r2, #0
 800ee20:	701a      	strb	r2, [r3, #0]
 800ee22:	0037      	movs	r7, r6
 800ee24:	e031      	b.n	800ee8a <prvHelpCommand+0xc2>
		strncpy( ( char * ) pcWriteBuffer, ( const char * )pcParamsHelpString[str++], xWriteBufferLen );
 800ee26:	4b24      	ldr	r3, [pc, #144]	; (800eeb8 <prvHelpCommand+0xf0>)
 800ee28:	2201      	movs	r2, #1
 800ee2a:	701a      	strb	r2, [r3, #0]
 800ee2c:	4b23      	ldr	r3, [pc, #140]	; (800eebc <prvHelpCommand+0xf4>)
 800ee2e:	6819      	ldr	r1, [r3, #0]
 800ee30:	0022      	movs	r2, r4
 800ee32:	0028      	movs	r0, r5
 800ee34:	f005 fe1a 	bl	8014a6c <strncpy>
			xReturn = pdTRUE;
 800ee38:	2701      	movs	r7, #1
 800ee3a:	e026      	b.n	800ee8a <prvHelpCommand+0xc2>
		if( pxCommand == NULL )
 800ee3c:	4b20      	ldr	r3, [pc, #128]	; (800eec0 <prvHelpCommand+0xf8>)
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d027      	beq.n	800ee94 <prvHelpCommand+0xcc>
		if (counter > numOfBosCommands) {
 800ee44:	4b1f      	ldr	r3, [pc, #124]	; (800eec4 <prvHelpCommand+0xfc>)
 800ee46:	781e      	ldrb	r6, [r3, #0]
 800ee48:	4b1f      	ldr	r3, [pc, #124]	; (800eec8 <prvHelpCommand+0x100>)
 800ee4a:	781b      	ldrb	r3, [r3, #0]
 800ee4c:	42b3      	cmp	r3, r6
 800ee4e:	d228      	bcs.n	800eea2 <prvHelpCommand+0xda>
			strncpy( 8 + ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen-8 );
 800ee50:	0022      	movs	r2, r4
 800ee52:	3a08      	subs	r2, #8
 800ee54:	4b1a      	ldr	r3, [pc, #104]	; (800eec0 <prvHelpCommand+0xf8>)
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	6859      	ldr	r1, [r3, #4]
 800ee5c:	0028      	movs	r0, r5
 800ee5e:	3008      	adds	r0, #8
 800ee60:	f005 fe04 	bl	8014a6c <strncpy>
			strcpy(1 + ( char * ) pcWriteBuffer, ( char * ) modulePNstring[modulePN]);
 800ee64:	1c68      	adds	r0, r5, #1
 800ee66:	4919      	ldr	r1, [pc, #100]	; (800eecc <prvHelpCommand+0x104>)
 800ee68:	f005 fde7 	bl	8014a3a <strcpy>
			pcWriteBuffer[0] = '('; pcWriteBuffer[6] = ')'; pcWriteBuffer[7] = ' ';
 800ee6c:	2328      	movs	r3, #40	; 0x28
 800ee6e:	702b      	strb	r3, [r5, #0]
 800ee70:	3301      	adds	r3, #1
 800ee72:	71ab      	strb	r3, [r5, #6]
 800ee74:	3b09      	subs	r3, #9
 800ee76:	71eb      	strb	r3, [r5, #7]
		pxCommand = pxCommand->pxNext;
 800ee78:	4b11      	ldr	r3, [pc, #68]	; (800eec0 <prvHelpCommand+0xf8>)
 800ee7a:	681a      	ldr	r2, [r3, #0]
 800ee7c:	6857      	ldr	r7, [r2, #4]
 800ee7e:	601f      	str	r7, [r3, #0]
		counter++;
 800ee80:	3601      	adds	r6, #1
 800ee82:	4b10      	ldr	r3, [pc, #64]	; (800eec4 <prvHelpCommand+0xfc>)
 800ee84:	701e      	strb	r6, [r3, #0]
			xReturn = pdTRUE;
 800ee86:	1e7b      	subs	r3, r7, #1
 800ee88:	419f      	sbcs	r7, r3
}
 800ee8a:	0038      	movs	r0, r7
 800ee8c:	b002      	add	sp, #8
 800ee8e:	bc80      	pop	{r7}
 800ee90:	46b8      	mov	r8, r7
 800ee92:	bdf0      	pop	{r4, r5, r6, r7, pc}
			pxCommand = &xRegisteredCommands;
 800ee94:	4b0a      	ldr	r3, [pc, #40]	; (800eec0 <prvHelpCommand+0xf8>)
 800ee96:	4a0e      	ldr	r2, [pc, #56]	; (800eed0 <prvHelpCommand+0x108>)
 800ee98:	601a      	str	r2, [r3, #0]
			counter = 1;
 800ee9a:	4b0a      	ldr	r3, [pc, #40]	; (800eec4 <prvHelpCommand+0xfc>)
 800ee9c:	2201      	movs	r2, #1
 800ee9e:	701a      	strb	r2, [r3, #0]
 800eea0:	e7d0      	b.n	800ee44 <prvHelpCommand+0x7c>
			strncpy( ( char * ) pcWriteBuffer, ( const char * ) pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800eea2:	4b07      	ldr	r3, [pc, #28]	; (800eec0 <prvHelpCommand+0xf8>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	6859      	ldr	r1, [r3, #4]
 800eeaa:	0022      	movs	r2, r4
 800eeac:	0028      	movs	r0, r5
 800eeae:	f005 fddd 	bl	8014a6c <strncpy>
 800eeb2:	e7e1      	b.n	800ee78 <prvHelpCommand+0xb0>
 800eeb4:	0801b918 	.word	0x0801b918
 800eeb8:	20001a78 	.word	0x20001a78
 800eebc:	20000074 	.word	0x20000074
 800eec0:	20001a74 	.word	0x20001a74
 800eec4:	20001a6c 	.word	0x20001a6c
 800eec8:	20006668 	.word	0x20006668
 800eecc:	0801ae3c 	.word	0x0801ae3c
 800eed0:	20000180 	.word	0x20000180

0800eed4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eed4:	0003      	movs	r3, r0
 800eed6:	3308      	adds	r3, #8
 800eed8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800eeda:	2201      	movs	r2, #1
 800eedc:	4252      	negs	r2, r2
 800eede:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eee0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eee2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800eee4:	2300      	movs	r3, #0
 800eee6:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800eee8:	4770      	bx	lr

0800eeea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800eeea:	2300      	movs	r3, #0
 800eeec:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800eeee:	4770      	bx	lr

0800eef0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800eef0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800eef2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800eef4:	689a      	ldr	r2, [r3, #8]
 800eef6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800eef8:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800eefa:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800eefc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800eefe:	6803      	ldr	r3, [r0, #0]
 800ef00:	3301      	adds	r3, #1
 800ef02:	6003      	str	r3, [r0, #0]
}
 800ef04:	4770      	bx	lr

0800ef06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ef06:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ef08:	680c      	ldr	r4, [r1, #0]
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ef0a:	0003      	movs	r3, r0
 800ef0c:	3308      	adds	r3, #8
	if( xValueOfInsertion == portMAX_DELAY )
 800ef0e:	1c62      	adds	r2, r4, #1
 800ef10:	d00e      	beq.n	800ef30 <vListInsert+0x2a>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ef12:	001a      	movs	r2, r3
 800ef14:	685b      	ldr	r3, [r3, #4]
 800ef16:	681d      	ldr	r5, [r3, #0]
 800ef18:	42a5      	cmp	r5, r4
 800ef1a:	d9fa      	bls.n	800ef12 <vListInsert+0xc>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ef1c:	6853      	ldr	r3, [r2, #4]
 800ef1e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ef20:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ef22:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800ef24:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ef26:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800ef28:	6803      	ldr	r3, [r0, #0]
 800ef2a:	3301      	adds	r3, #1
 800ef2c:	6003      	str	r3, [r0, #0]
}
 800ef2e:	bd30      	pop	{r4, r5, pc}
		pxIterator = pxList->xListEnd.pxPrevious;
 800ef30:	6902      	ldr	r2, [r0, #16]
 800ef32:	e7f3      	b.n	800ef1c <vListInsert+0x16>

0800ef34 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800ef34:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ef36:	6841      	ldr	r1, [r0, #4]
 800ef38:	6882      	ldr	r2, [r0, #8]
 800ef3a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ef3c:	6841      	ldr	r1, [r0, #4]
 800ef3e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ef40:	685a      	ldr	r2, [r3, #4]
 800ef42:	4282      	cmp	r2, r0
 800ef44:	d005      	beq.n	800ef52 <uxListRemove+0x1e>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800ef46:	2200      	movs	r2, #0
 800ef48:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800ef4a:	681a      	ldr	r2, [r3, #0]
 800ef4c:	1e50      	subs	r0, r2, #1
 800ef4e:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800ef50:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ef52:	6882      	ldr	r2, [r0, #8]
 800ef54:	605a      	str	r2, [r3, #4]
 800ef56:	e7f6      	b.n	800ef46 <uxListRemove+0x12>

0800ef58 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ef58:	b570      	push	{r4, r5, r6, lr}
 800ef5a:	0004      	movs	r4, r0
 800ef5c:	0015      	movs	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ef5e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800ef60:	2a00      	cmp	r2, #0
 800ef62:	d10d      	bne.n	800ef80 <prvCopyDataToQueue+0x28>
BaseType_t xReturn = pdFALSE;
 800ef64:	2000      	movs	r0, #0
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ef66:	6823      	ldr	r3, [r4, #0]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d003      	beq.n	800ef74 <prvCopyDataToQueue+0x1c>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800ef6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ef6e:	3301      	adds	r3, #1
 800ef70:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 800ef72:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800ef74:	6860      	ldr	r0, [r4, #4]
 800ef76:	f001 f8c7 	bl	8010108 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	6063      	str	r3, [r4, #4]
 800ef7e:	e7f5      	b.n	800ef6c <prvCopyDataToQueue+0x14>
	else if( xPosition == queueSEND_TO_BACK )
 800ef80:	2d00      	cmp	r5, #0
 800ef82:	d10e      	bne.n	800efa2 <prvCopyDataToQueue+0x4a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800ef84:	6880      	ldr	r0, [r0, #8]
 800ef86:	f005 faeb 	bl	8014560 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800ef8a:	68a3      	ldr	r3, [r4, #8]
 800ef8c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ef8e:	4694      	mov	ip, r2
 800ef90:	4463      	add	r3, ip
 800ef92:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800ef94:	0028      	movs	r0, r5
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ef96:	6862      	ldr	r2, [r4, #4]
 800ef98:	4293      	cmp	r3, r2
 800ef9a:	d3e7      	bcc.n	800ef6c <prvCopyDataToQueue+0x14>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ef9c:	6823      	ldr	r3, [r4, #0]
 800ef9e:	60a3      	str	r3, [r4, #8]
 800efa0:	e7e4      	b.n	800ef6c <prvCopyDataToQueue+0x14>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efa2:	68c0      	ldr	r0, [r0, #12]
 800efa4:	f005 fadc 	bl	8014560 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800efa8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800efaa:	425a      	negs	r2, r3
 800efac:	68e1      	ldr	r1, [r4, #12]
 800efae:	1acb      	subs	r3, r1, r3
 800efb0:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800efb2:	6821      	ldr	r1, [r4, #0]
 800efb4:	428b      	cmp	r3, r1
 800efb6:	d203      	bcs.n	800efc0 <prvCopyDataToQueue+0x68>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800efb8:	6863      	ldr	r3, [r4, #4]
 800efba:	469c      	mov	ip, r3
 800efbc:	4462      	add	r2, ip
 800efbe:	60e2      	str	r2, [r4, #12]
BaseType_t xReturn = pdFALSE;
 800efc0:	2000      	movs	r0, #0
		if( xPosition == queueOVERWRITE )
 800efc2:	2d02      	cmp	r5, #2
 800efc4:	d1d2      	bne.n	800ef6c <prvCopyDataToQueue+0x14>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800efc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d0cf      	beq.n	800ef6c <prvCopyDataToQueue+0x14>
				--( pxQueue->uxMessagesWaiting );
 800efcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800efce:	3b01      	subs	r3, #1
 800efd0:	63a3      	str	r3, [r4, #56]	; 0x38
 800efd2:	e7cb      	b.n	800ef6c <prvCopyDataToQueue+0x14>

0800efd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800efd4:	b510      	push	{r4, lr}
 800efd6:	0003      	movs	r3, r0
 800efd8:	0008      	movs	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800efda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800efdc:	2a00      	cmp	r2, #0
 800efde:	d00a      	beq.n	800eff6 <prvCopyDataFromQueue+0x22>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800efe0:	68d9      	ldr	r1, [r3, #12]
 800efe2:	1889      	adds	r1, r1, r2
 800efe4:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800efe6:	685c      	ldr	r4, [r3, #4]
 800efe8:	42a1      	cmp	r1, r4
 800efea:	d301      	bcc.n	800eff0 <prvCopyDataFromQueue+0x1c>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800efec:	6819      	ldr	r1, [r3, #0]
 800efee:	60d9      	str	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800eff0:	68d9      	ldr	r1, [r3, #12]
 800eff2:	f005 fab5 	bl	8014560 <memcpy>
	}
}
 800eff6:	bd10      	pop	{r4, pc}

0800eff8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800eff8:	b570      	push	{r4, r5, r6, lr}
 800effa:	0004      	movs	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800effc:	f001 fc84 	bl	8010908 <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800f000:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f002:	2b00      	cmp	r3, #0
 800f004:	dd13      	ble.n	800f02e <prvUnlockQueue+0x36>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f006:	0025      	movs	r5, r4
 800f008:	3524      	adds	r5, #36	; 0x24
 800f00a:	e007      	b.n	800f01c <prvUnlockQueue+0x24>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 800f00c:	f001 f828 	bl	8010060 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 800f010:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f012:	3b01      	subs	r3, #1
 800f014:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 800f016:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f018:	2b00      	cmp	r3, #0
 800f01a:	dd08      	ble.n	800f02e <prvUnlockQueue+0x36>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f01c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d005      	beq.n	800f02e <prvUnlockQueue+0x36>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f022:	0028      	movs	r0, r5
 800f024:	f000 ff9a 	bl	800ff5c <xTaskRemoveFromEventList>
 800f028:	2800      	cmp	r0, #0
 800f02a:	d0f1      	beq.n	800f010 <prvUnlockQueue+0x18>
 800f02c:	e7ee      	b.n	800f00c <prvUnlockQueue+0x14>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 800f02e:	2301      	movs	r3, #1
 800f030:	425b      	negs	r3, r3
 800f032:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 800f034:	f001 fc74 	bl	8010920 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f038:	f001 fc66 	bl	8010908 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800f03c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f03e:	2b00      	cmp	r3, #0
 800f040:	dd13      	ble.n	800f06a <prvUnlockQueue+0x72>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f042:	0025      	movs	r5, r4
 800f044:	3510      	adds	r5, #16
 800f046:	e007      	b.n	800f058 <prvUnlockQueue+0x60>
				{
					vTaskMissedYield();
 800f048:	f001 f80a 	bl	8010060 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 800f04c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f04e:	3b01      	subs	r3, #1
 800f050:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 800f052:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f054:	2b00      	cmp	r3, #0
 800f056:	dd08      	ble.n	800f06a <prvUnlockQueue+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f058:	6923      	ldr	r3, [r4, #16]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d005      	beq.n	800f06a <prvUnlockQueue+0x72>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f05e:	0028      	movs	r0, r5
 800f060:	f000 ff7c 	bl	800ff5c <xTaskRemoveFromEventList>
 800f064:	2800      	cmp	r0, #0
 800f066:	d0f1      	beq.n	800f04c <prvUnlockQueue+0x54>
 800f068:	e7ee      	b.n	800f048 <prvUnlockQueue+0x50>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 800f06a:	2301      	movs	r3, #1
 800f06c:	425b      	negs	r3, r3
 800f06e:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f070:	f001 fc56 	bl	8010920 <vPortExitCritical>
}
 800f074:	bd70      	pop	{r4, r5, r6, pc}

0800f076 <xQueueGenericReset>:
{
 800f076:	b570      	push	{r4, r5, r6, lr}
 800f078:	0004      	movs	r4, r0
 800f07a:	000d      	movs	r5, r1
	configASSERT( pxQueue );
 800f07c:	2800      	cmp	r0, #0
 800f07e:	d01a      	beq.n	800f0b6 <xQueueGenericReset+0x40>
	taskENTER_CRITICAL();
 800f080:	f001 fc42 	bl	8010908 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800f084:	6822      	ldr	r2, [r4, #0]
 800f086:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800f088:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f08a:	434b      	muls	r3, r1
 800f08c:	18d0      	adds	r0, r2, r3
 800f08e:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f090:	2000      	movs	r0, #0
 800f092:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f094:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800f096:	1a5b      	subs	r3, r3, r1
 800f098:	18d3      	adds	r3, r2, r3
 800f09a:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
 800f09c:	2301      	movs	r3, #1
 800f09e:	425b      	negs	r3, r3
 800f0a0:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 800f0a2:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
 800f0a4:	2d00      	cmp	r5, #0
 800f0a6:	d111      	bne.n	800f0cc <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f0a8:	6923      	ldr	r3, [r4, #16]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d105      	bne.n	800f0ba <xQueueGenericReset+0x44>
	taskEXIT_CRITICAL();
 800f0ae:	f001 fc37 	bl	8010920 <vPortExitCritical>
}
 800f0b2:	2001      	movs	r0, #1
 800f0b4:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxQueue );
 800f0b6:	b672      	cpsid	i
 800f0b8:	e7fe      	b.n	800f0b8 <xQueueGenericReset+0x42>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800f0ba:	0020      	movs	r0, r4
 800f0bc:	3010      	adds	r0, #16
 800f0be:	f000 ff4d 	bl	800ff5c <xTaskRemoveFromEventList>
 800f0c2:	2801      	cmp	r0, #1
 800f0c4:	d1f3      	bne.n	800f0ae <xQueueGenericReset+0x38>
					queueYIELD_IF_USING_PREEMPTION();
 800f0c6:	f001 fc13 	bl	80108f0 <vPortYield>
 800f0ca:	e7f0      	b.n	800f0ae <xQueueGenericReset+0x38>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f0cc:	0020      	movs	r0, r4
 800f0ce:	3010      	adds	r0, #16
 800f0d0:	f7ff ff00 	bl	800eed4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f0d4:	0020      	movs	r0, r4
 800f0d6:	3024      	adds	r0, #36	; 0x24
 800f0d8:	f7ff fefc 	bl	800eed4 <vListInitialise>
 800f0dc:	e7e7      	b.n	800f0ae <xQueueGenericReset+0x38>

0800f0de <xQueueGenericCreate>:
{
 800f0de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0e0:	0005      	movs	r5, r0
 800f0e2:	000e      	movs	r6, r1
 800f0e4:	0017      	movs	r7, r2
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f0e6:	2800      	cmp	r0, #0
 800f0e8:	d101      	bne.n	800f0ee <xQueueGenericCreate+0x10>
 800f0ea:	b672      	cpsid	i
 800f0ec:	e7fe      	b.n	800f0ec <xQueueGenericCreate+0xe>
	if( uxItemSize == ( UBaseType_t ) 0 )
 800f0ee:	2900      	cmp	r1, #0
 800f0f0:	d013      	beq.n	800f11a <xQueueGenericCreate+0x3c>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0f2:	0008      	movs	r0, r1
 800f0f4:	4368      	muls	r0, r5
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800f0f6:	3055      	adds	r0, #85	; 0x55
 800f0f8:	f001 fc88 	bl	8010a0c <pvPortMalloc>
 800f0fc:	0004      	movs	r4, r0
			pxNewQueue->pcHead = pcAllocatedBuffer + sizeof( Queue_t );
 800f0fe:	3054      	adds	r0, #84	; 0x54
	if( pcAllocatedBuffer != NULL )
 800f100:	2c00      	cmp	r4, #0
 800f102:	d00f      	beq.n	800f124 <xQueueGenericCreate+0x46>
 800f104:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
 800f106:	63e5      	str	r5, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 800f108:	6426      	str	r6, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f10a:	2101      	movs	r1, #1
 800f10c:	0020      	movs	r0, r4
 800f10e:	f7ff ffb2 	bl	800f076 <xQueueGenericReset>
			pxNewQueue->ucQueueType = ucQueueType;
 800f112:	2350      	movs	r3, #80	; 0x50
 800f114:	54e7      	strb	r7, [r4, r3]
}
 800f116:	0020      	movs	r0, r4
 800f118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	pcAllocatedBuffer = ( int8_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800f11a:	2054      	movs	r0, #84	; 0x54
 800f11c:	f001 fc76 	bl	8010a0c <pvPortMalloc>
 800f120:	1e04      	subs	r4, r0, #0
	if( pcAllocatedBuffer != NULL )
 800f122:	d1ef      	bne.n	800f104 <xQueueGenericCreate+0x26>
	configASSERT( xReturn );
 800f124:	b672      	cpsid	i
 800f126:	e7fe      	b.n	800f126 <xQueueGenericCreate+0x48>

0800f128 <xQueueCreateCountingSemaphore>:
	{
 800f128:	b510      	push	{r4, lr}
 800f12a:	000c      	movs	r4, r1
		configASSERT( uxMaxCount != 0 );
 800f12c:	2800      	cmp	r0, #0
 800f12e:	d101      	bne.n	800f134 <xQueueCreateCountingSemaphore+0xc>
 800f130:	b672      	cpsid	i
 800f132:	e7fe      	b.n	800f132 <xQueueCreateCountingSemaphore+0xa>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f134:	4288      	cmp	r0, r1
 800f136:	d201      	bcs.n	800f13c <xQueueCreateCountingSemaphore+0x14>
 800f138:	b672      	cpsid	i
 800f13a:	e7fe      	b.n	800f13a <xQueueCreateCountingSemaphore+0x12>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f13c:	2202      	movs	r2, #2
 800f13e:	2100      	movs	r1, #0
 800f140:	f7ff ffcd 	bl	800f0de <xQueueGenericCreate>
		if( xHandle != NULL )
 800f144:	2800      	cmp	r0, #0
 800f146:	d001      	beq.n	800f14c <xQueueCreateCountingSemaphore+0x24>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f148:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800f14a:	bd10      	pop	{r4, pc}
		configASSERT( xHandle );
 800f14c:	b672      	cpsid	i
 800f14e:	e7fe      	b.n	800f14e <xQueueCreateCountingSemaphore+0x26>

0800f150 <xQueueGenericSend>:
{
 800f150:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f152:	46ce      	mov	lr, r9
 800f154:	4647      	mov	r7, r8
 800f156:	b580      	push	{r7, lr}
 800f158:	b085      	sub	sp, #20
 800f15a:	0004      	movs	r4, r0
 800f15c:	000e      	movs	r6, r1
 800f15e:	9201      	str	r2, [sp, #4]
 800f160:	001d      	movs	r5, r3
	configASSERT( pxQueue );
 800f162:	2800      	cmp	r0, #0
 800f164:	d008      	beq.n	800f178 <xQueueGenericSend+0x28>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f166:	2900      	cmp	r1, #0
 800f168:	d008      	beq.n	800f17c <xQueueGenericSend+0x2c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f16a:	2d02      	cmp	r5, #2
 800f16c:	d10b      	bne.n	800f186 <xQueueGenericSend+0x36>
 800f16e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f170:	2b01      	cmp	r3, #1
 800f172:	d008      	beq.n	800f186 <xQueueGenericSend+0x36>
 800f174:	b672      	cpsid	i
 800f176:	e7fe      	b.n	800f176 <xQueueGenericSend+0x26>
	configASSERT( pxQueue );
 800f178:	b672      	cpsid	i
 800f17a:	e7fe      	b.n	800f17a <xQueueGenericSend+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f17c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d0f3      	beq.n	800f16a <xQueueGenericSend+0x1a>
 800f182:	b672      	cpsid	i
 800f184:	e7fe      	b.n	800f184 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f186:	f000 ff71 	bl	801006c <xTaskGetSchedulerState>
 800f18a:	2800      	cmp	r0, #0
 800f18c:	d104      	bne.n	800f198 <xQueueGenericSend+0x48>
 800f18e:	9b01      	ldr	r3, [sp, #4]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d005      	beq.n	800f1a0 <xQueueGenericSend+0x50>
 800f194:	b672      	cpsid	i
 800f196:	e7fe      	b.n	800f196 <xQueueGenericSend+0x46>
 800f198:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 800f19a:	2300      	movs	r3, #0
 800f19c:	4698      	mov	r8, r3
 800f19e:	e033      	b.n	800f208 <xQueueGenericSend+0xb8>
 800f1a0:	2700      	movs	r7, #0
 800f1a2:	e7fa      	b.n	800f19a <xQueueGenericSend+0x4a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f1a4:	002a      	movs	r2, r5
 800f1a6:	0031      	movs	r1, r6
 800f1a8:	0020      	movs	r0, r4
 800f1aa:	f7ff fed5 	bl	800ef58 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f1ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d109      	bne.n	800f1c8 <xQueueGenericSend+0x78>
					else if( xYieldRequired != pdFALSE )
 800f1b4:	2800      	cmp	r0, #0
 800f1b6:	d110      	bne.n	800f1da <xQueueGenericSend+0x8a>
				taskEXIT_CRITICAL();
 800f1b8:	f001 fbb2 	bl	8010920 <vPortExitCritical>
				return pdPASS;
 800f1bc:	2001      	movs	r0, #1
}
 800f1be:	b005      	add	sp, #20
 800f1c0:	bcc0      	pop	{r6, r7}
 800f1c2:	46b9      	mov	r9, r7
 800f1c4:	46b0      	mov	r8, r6
 800f1c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 800f1c8:	0020      	movs	r0, r4
 800f1ca:	3024      	adds	r0, #36	; 0x24
 800f1cc:	f000 fec6 	bl	800ff5c <xTaskRemoveFromEventList>
 800f1d0:	2801      	cmp	r0, #1
 800f1d2:	d1f1      	bne.n	800f1b8 <xQueueGenericSend+0x68>
							queueYIELD_IF_USING_PREEMPTION();
 800f1d4:	f001 fb8c 	bl	80108f0 <vPortYield>
 800f1d8:	e7ee      	b.n	800f1b8 <xQueueGenericSend+0x68>
						queueYIELD_IF_USING_PREEMPTION();
 800f1da:	f001 fb89 	bl	80108f0 <vPortYield>
 800f1de:	e7eb      	b.n	800f1b8 <xQueueGenericSend+0x68>
					taskEXIT_CRITICAL();
 800f1e0:	f001 fb9e 	bl	8010920 <vPortExitCritical>
					return errQUEUE_FULL;
 800f1e4:	2000      	movs	r0, #0
 800f1e6:	e7ea      	b.n	800f1be <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 800f1e8:	a802      	add	r0, sp, #8
 800f1ea:	f000 fef7 	bl	800ffdc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f1ee:	e018      	b.n	800f222 <xQueueGenericSend+0xd2>
		prvLockQueue( pxQueue );
 800f1f0:	4643      	mov	r3, r8
 800f1f2:	6463      	str	r3, [r4, #68]	; 0x44
 800f1f4:	e01e      	b.n	800f234 <xQueueGenericSend+0xe4>
 800f1f6:	4643      	mov	r3, r8
 800f1f8:	64a3      	str	r3, [r4, #72]	; 0x48
 800f1fa:	e01e      	b.n	800f23a <xQueueGenericSend+0xea>
				prvUnlockQueue( pxQueue );
 800f1fc:	0020      	movs	r0, r4
 800f1fe:	f7ff fefb 	bl	800eff8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f202:	f000 fccb 	bl	800fb9c <xTaskResumeAll>
 800f206:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800f208:	f001 fb7e 	bl	8010908 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f20c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f20e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f210:	4293      	cmp	r3, r2
 800f212:	d3c7      	bcc.n	800f1a4 <xQueueGenericSend+0x54>
 800f214:	2d02      	cmp	r5, #2
 800f216:	d0c5      	beq.n	800f1a4 <xQueueGenericSend+0x54>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f218:	9b01      	ldr	r3, [sp, #4]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d0e0      	beq.n	800f1e0 <xQueueGenericSend+0x90>
				else if( xEntryTimeSet == pdFALSE )
 800f21e:	2f00      	cmp	r7, #0
 800f220:	d0e2      	beq.n	800f1e8 <xQueueGenericSend+0x98>
		taskEXIT_CRITICAL();
 800f222:	f001 fb7d 	bl	8010920 <vPortExitCritical>
		vTaskSuspendAll();
 800f226:	f000 fc11 	bl	800fa4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f22a:	f001 fb6d 	bl	8010908 <vPortEnterCritical>
 800f22e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f230:	3301      	adds	r3, #1
 800f232:	d0dd      	beq.n	800f1f0 <xQueueGenericSend+0xa0>
 800f234:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f236:	3301      	adds	r3, #1
 800f238:	d0dd      	beq.n	800f1f6 <xQueueGenericSend+0xa6>
 800f23a:	f001 fb71 	bl	8010920 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f23e:	a901      	add	r1, sp, #4
 800f240:	a802      	add	r0, sp, #8
 800f242:	f000 fedb 	bl	800fffc <xTaskCheckForTimeOut>
 800f246:	2800      	cmp	r0, #0
 800f248:	d117      	bne.n	800f27a <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f24a:	f001 fb5d 	bl	8010908 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f24e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f250:	4699      	mov	r9, r3
 800f252:	6be7      	ldr	r7, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800f254:	f001 fb64 	bl	8010920 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f258:	45b9      	cmp	r9, r7
 800f25a:	d1cf      	bne.n	800f1fc <xQueueGenericSend+0xac>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f25c:	0020      	movs	r0, r4
 800f25e:	3010      	adds	r0, #16
 800f260:	9901      	ldr	r1, [sp, #4]
 800f262:	f000 fe3d 	bl	800fee0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f266:	0020      	movs	r0, r4
 800f268:	f7ff fec6 	bl	800eff8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f26c:	f000 fc96 	bl	800fb9c <xTaskResumeAll>
 800f270:	2800      	cmp	r0, #0
 800f272:	d1c8      	bne.n	800f206 <xQueueGenericSend+0xb6>
					portYIELD_WITHIN_API();
 800f274:	f001 fb3c 	bl	80108f0 <vPortYield>
 800f278:	e7c5      	b.n	800f206 <xQueueGenericSend+0xb6>
			prvUnlockQueue( pxQueue );
 800f27a:	0020      	movs	r0, r4
 800f27c:	f7ff febc 	bl	800eff8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f280:	f000 fc8c 	bl	800fb9c <xTaskResumeAll>
			return errQUEUE_FULL;
 800f284:	2000      	movs	r0, #0
 800f286:	e79a      	b.n	800f1be <xQueueGenericSend+0x6e>

0800f288 <xQueueGenericSendFromISR>:
{
 800f288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f28a:	b083      	sub	sp, #12
 800f28c:	0004      	movs	r4, r0
 800f28e:	000d      	movs	r5, r1
 800f290:	0017      	movs	r7, r2
 800f292:	001e      	movs	r6, r3
	configASSERT( pxQueue );
 800f294:	2800      	cmp	r0, #0
 800f296:	d008      	beq.n	800f2aa <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f298:	2900      	cmp	r1, #0
 800f29a:	d008      	beq.n	800f2ae <xQueueGenericSendFromISR+0x26>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f29c:	2e02      	cmp	r6, #2
 800f29e:	d12d      	bne.n	800f2fc <xQueueGenericSendFromISR+0x74>
 800f2a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800f2a2:	2b01      	cmp	r3, #1
 800f2a4:	d019      	beq.n	800f2da <xQueueGenericSendFromISR+0x52>
 800f2a6:	b672      	cpsid	i
 800f2a8:	e7fe      	b.n	800f2a8 <xQueueGenericSendFromISR+0x20>
	configASSERT( pxQueue );
 800f2aa:	b672      	cpsid	i
 800f2ac:	e7fe      	b.n	800f2ac <xQueueGenericSendFromISR+0x24>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f2ae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d0f3      	beq.n	800f29c <xQueueGenericSendFromISR+0x14>
 800f2b4:	b672      	cpsid	i
 800f2b6:	e7fe      	b.n	800f2b6 <xQueueGenericSendFromISR+0x2e>
			xReturn = pdPASS;
 800f2b8:	2501      	movs	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f2ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d025      	beq.n	800f30c <xQueueGenericSendFromISR+0x84>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f2c0:	0020      	movs	r0, r4
 800f2c2:	3024      	adds	r0, #36	; 0x24
 800f2c4:	f000 fe4a 	bl	800ff5c <xTaskRemoveFromEventList>
 800f2c8:	2800      	cmp	r0, #0
 800f2ca:	d01f      	beq.n	800f30c <xQueueGenericSendFromISR+0x84>
							if( pxHigherPriorityTaskWoken != NULL )
 800f2cc:	2f00      	cmp	r7, #0
 800f2ce:	d002      	beq.n	800f2d6 <xQueueGenericSendFromISR+0x4e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f2d0:	2301      	movs	r3, #1
 800f2d2:	603b      	str	r3, [r7, #0]
 800f2d4:	e01a      	b.n	800f30c <xQueueGenericSendFromISR+0x84>
			xReturn = pdPASS;
 800f2d6:	2501      	movs	r5, #1
 800f2d8:	e018      	b.n	800f30c <xQueueGenericSendFromISR+0x84>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f2da:	f001 fb31 	bl	8010940 <ulSetInterruptMaskFromISR>
 800f2de:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f2e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f2e2:	0032      	movs	r2, r6
 800f2e4:	0029      	movs	r1, r5
 800f2e6:	0020      	movs	r0, r4
 800f2e8:	f7ff fe36 	bl	800ef58 <prvCopyDataToQueue>
			if( pxQueue->xTxLock == queueUNLOCKED )
 800f2ec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	d0e2      	beq.n	800f2b8 <xQueueGenericSendFromISR+0x30>
				++( pxQueue->xTxLock );
 800f2f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f2f4:	3301      	adds	r3, #1
 800f2f6:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800f2f8:	2501      	movs	r5, #1
 800f2fa:	e007      	b.n	800f30c <xQueueGenericSendFromISR+0x84>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f2fc:	f001 fb20 	bl	8010940 <ulSetInterruptMaskFromISR>
 800f300:	9001      	str	r0, [sp, #4]
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f302:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f304:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f306:	4293      	cmp	r3, r2
 800f308:	d3eb      	bcc.n	800f2e2 <xQueueGenericSendFromISR+0x5a>
			xReturn = errQUEUE_FULL;
 800f30a:	2500      	movs	r5, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f30c:	9801      	ldr	r0, [sp, #4]
 800f30e:	f001 fb1c 	bl	801094a <vClearInterruptMaskFromISR>
}
 800f312:	0028      	movs	r0, r5
 800f314:	b003      	add	sp, #12
 800f316:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f318 <xQueueGiveFromISR>:
{
 800f318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f31a:	0004      	movs	r4, r0
 800f31c:	000e      	movs	r6, r1
	configASSERT( pxQueue );
 800f31e:	2800      	cmp	r0, #0
 800f320:	d004      	beq.n	800f32c <xQueueGiveFromISR+0x14>
	configASSERT( pxQueue->uxItemSize == 0 );
 800f322:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f324:	2b00      	cmp	r3, #0
 800f326:	d003      	beq.n	800f330 <xQueueGiveFromISR+0x18>
 800f328:	b672      	cpsid	i
 800f32a:	e7fe      	b.n	800f32a <xQueueGiveFromISR+0x12>
	configASSERT( pxQueue );
 800f32c:	b672      	cpsid	i
 800f32e:	e7fe      	b.n	800f32e <xQueueGiveFromISR+0x16>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800f330:	6803      	ldr	r3, [r0, #0]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d016      	beq.n	800f364 <xQueueGiveFromISR+0x4c>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f336:	f001 fb03 	bl	8010940 <ulSetInterruptMaskFromISR>
 800f33a:	0007      	movs	r7, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800f33c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = errQUEUE_FULL;
 800f33e:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800f340:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800f342:	4293      	cmp	r3, r2
 800f344:	d209      	bcs.n	800f35a <xQueueGiveFromISR+0x42>
			++( pxQueue->uxMessagesWaiting );
 800f346:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f348:	3301      	adds	r3, #1
 800f34a:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xTxLock == queueUNLOCKED )
 800f34c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f34e:	3301      	adds	r3, #1
 800f350:	d00d      	beq.n	800f36e <xQueueGiveFromISR+0x56>
				++( pxQueue->xTxLock );
 800f352:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f354:	3301      	adds	r3, #1
 800f356:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
 800f358:	2501      	movs	r5, #1
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f35a:	0038      	movs	r0, r7
 800f35c:	f001 faf5 	bl	801094a <vClearInterruptMaskFromISR>
}
 800f360:	0028      	movs	r0, r5
 800f362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800f364:	6843      	ldr	r3, [r0, #4]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d0e5      	beq.n	800f336 <xQueueGiveFromISR+0x1e>
 800f36a:	b672      	cpsid	i
 800f36c:	e7fe      	b.n	800f36c <xQueueGiveFromISR+0x54>
			xReturn = pdPASS;
 800f36e:	3501      	adds	r5, #1
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f370:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f372:	2b00      	cmp	r3, #0
 800f374:	d0f1      	beq.n	800f35a <xQueueGiveFromISR+0x42>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f376:	0020      	movs	r0, r4
 800f378:	3024      	adds	r0, #36	; 0x24
 800f37a:	f000 fdef 	bl	800ff5c <xTaskRemoveFromEventList>
 800f37e:	2800      	cmp	r0, #0
 800f380:	d0eb      	beq.n	800f35a <xQueueGiveFromISR+0x42>
							if( pxHigherPriorityTaskWoken != NULL )
 800f382:	2e00      	cmp	r6, #0
 800f384:	d002      	beq.n	800f38c <xQueueGiveFromISR+0x74>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f386:	2301      	movs	r3, #1
 800f388:	6033      	str	r3, [r6, #0]
 800f38a:	e7e6      	b.n	800f35a <xQueueGiveFromISR+0x42>
			xReturn = pdPASS;
 800f38c:	2501      	movs	r5, #1
 800f38e:	e7e4      	b.n	800f35a <xQueueGiveFromISR+0x42>

0800f390 <xQueueGenericReceive>:
{
 800f390:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f392:	46c6      	mov	lr, r8
 800f394:	b500      	push	{lr}
 800f396:	b084      	sub	sp, #16
 800f398:	0004      	movs	r4, r0
 800f39a:	000d      	movs	r5, r1
 800f39c:	9201      	str	r2, [sp, #4]
 800f39e:	4698      	mov	r8, r3
	configASSERT( pxQueue );
 800f3a0:	2800      	cmp	r0, #0
 800f3a2:	d00a      	beq.n	800f3ba <xQueueGenericReceive+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f3a4:	2900      	cmp	r1, #0
 800f3a6:	d00a      	beq.n	800f3be <xQueueGenericReceive+0x2e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f3a8:	f000 fe60 	bl	801006c <xTaskGetSchedulerState>
 800f3ac:	2800      	cmp	r0, #0
 800f3ae:	d10b      	bne.n	800f3c8 <xQueueGenericReceive+0x38>
 800f3b0:	9b01      	ldr	r3, [sp, #4]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d00b      	beq.n	800f3ce <xQueueGenericReceive+0x3e>
 800f3b6:	b672      	cpsid	i
 800f3b8:	e7fe      	b.n	800f3b8 <xQueueGenericReceive+0x28>
	configASSERT( pxQueue );
 800f3ba:	b672      	cpsid	i
 800f3bc:	e7fe      	b.n	800f3bc <xQueueGenericReceive+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f3be:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d0f1      	beq.n	800f3a8 <xQueueGenericReceive+0x18>
 800f3c4:	b672      	cpsid	i
 800f3c6:	e7fe      	b.n	800f3c6 <xQueueGenericReceive+0x36>
 800f3c8:	2700      	movs	r7, #0
		prvLockQueue( pxQueue );
 800f3ca:	2600      	movs	r6, #0
 800f3cc:	e04d      	b.n	800f46a <xQueueGenericReceive+0xda>
 800f3ce:	2700      	movs	r7, #0
 800f3d0:	e7fb      	b.n	800f3ca <xQueueGenericReceive+0x3a>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800f3d2:	68e7      	ldr	r7, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f3d4:	0029      	movs	r1, r5
 800f3d6:	0020      	movs	r0, r4
 800f3d8:	f7ff fdfc 	bl	800efd4 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 800f3dc:	4643      	mov	r3, r8
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d11c      	bne.n	800f41c <xQueueGenericReceive+0x8c>
					--( pxQueue->uxMessagesWaiting );
 800f3e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f3e4:	3b01      	subs	r3, #1
 800f3e6:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f3e8:	6823      	ldr	r3, [r4, #0]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d009      	beq.n	800f402 <xQueueGenericReceive+0x72>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f3ee:	6923      	ldr	r3, [r4, #16]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d10a      	bne.n	800f40a <xQueueGenericReceive+0x7a>
				taskEXIT_CRITICAL();
 800f3f4:	f001 fa94 	bl	8010920 <vPortExitCritical>
				return pdPASS;
 800f3f8:	2001      	movs	r0, #1
}
 800f3fa:	b004      	add	sp, #16
 800f3fc:	bc80      	pop	{r7}
 800f3fe:	46b8      	mov	r8, r7
 800f400:	bdf0      	pop	{r4, r5, r6, r7, pc}
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800f402:	f000 ff8b 	bl	801031c <pvTaskIncrementMutexHeldCount>
 800f406:	6060      	str	r0, [r4, #4]
 800f408:	e7f1      	b.n	800f3ee <xQueueGenericReceive+0x5e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 800f40a:	0020      	movs	r0, r4
 800f40c:	3010      	adds	r0, #16
 800f40e:	f000 fda5 	bl	800ff5c <xTaskRemoveFromEventList>
 800f412:	2801      	cmp	r0, #1
 800f414:	d1ee      	bne.n	800f3f4 <xQueueGenericReceive+0x64>
							queueYIELD_IF_USING_PREEMPTION();
 800f416:	f001 fa6b 	bl	80108f0 <vPortYield>
 800f41a:	e7eb      	b.n	800f3f4 <xQueueGenericReceive+0x64>
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800f41c:	60e7      	str	r7, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f41e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f420:	2b00      	cmp	r3, #0
 800f422:	d0e7      	beq.n	800f3f4 <xQueueGenericReceive+0x64>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f424:	0020      	movs	r0, r4
 800f426:	3024      	adds	r0, #36	; 0x24
 800f428:	f000 fd98 	bl	800ff5c <xTaskRemoveFromEventList>
 800f42c:	2800      	cmp	r0, #0
 800f42e:	d0e1      	beq.n	800f3f4 <xQueueGenericReceive+0x64>
							queueYIELD_IF_USING_PREEMPTION();
 800f430:	f001 fa5e 	bl	80108f0 <vPortYield>
 800f434:	e7de      	b.n	800f3f4 <xQueueGenericReceive+0x64>
					taskEXIT_CRITICAL();
 800f436:	f001 fa73 	bl	8010920 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800f43a:	2000      	movs	r0, #0
 800f43c:	e7dd      	b.n	800f3fa <xQueueGenericReceive+0x6a>
					vTaskSetTimeOutState( &xTimeOut );
 800f43e:	a802      	add	r0, sp, #8
 800f440:	f000 fdcc 	bl	800ffdc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f444:	e01b      	b.n	800f47e <xQueueGenericReceive+0xee>
		prvLockQueue( pxQueue );
 800f446:	6466      	str	r6, [r4, #68]	; 0x44
 800f448:	e022      	b.n	800f490 <xQueueGenericReceive+0x100>
 800f44a:	64a6      	str	r6, [r4, #72]	; 0x48
 800f44c:	e023      	b.n	800f496 <xQueueGenericReceive+0x106>
						taskENTER_CRITICAL();
 800f44e:	f001 fa5b 	bl	8010908 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800f452:	6860      	ldr	r0, [r4, #4]
 800f454:	f000 fe1a 	bl	801008c <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 800f458:	f001 fa62 	bl	8010920 <vPortExitCritical>
 800f45c:	e02d      	b.n	800f4ba <xQueueGenericReceive+0x12a>
				prvUnlockQueue( pxQueue );
 800f45e:	0020      	movs	r0, r4
 800f460:	f7ff fdca 	bl	800eff8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f464:	f000 fb9a 	bl	800fb9c <xTaskResumeAll>
 800f468:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800f46a:	f001 fa4d 	bl	8010908 <vPortEnterCritical>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f46e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f470:	2b00      	cmp	r3, #0
 800f472:	d1ae      	bne.n	800f3d2 <xQueueGenericReceive+0x42>
				if( xTicksToWait == ( TickType_t ) 0 )
 800f474:	9b01      	ldr	r3, [sp, #4]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d0dd      	beq.n	800f436 <xQueueGenericReceive+0xa6>
				else if( xEntryTimeSet == pdFALSE )
 800f47a:	2f00      	cmp	r7, #0
 800f47c:	d0df      	beq.n	800f43e <xQueueGenericReceive+0xae>
		taskEXIT_CRITICAL();
 800f47e:	f001 fa4f 	bl	8010920 <vPortExitCritical>
		vTaskSuspendAll();
 800f482:	f000 fae3 	bl	800fa4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f486:	f001 fa3f 	bl	8010908 <vPortEnterCritical>
 800f48a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f48c:	3301      	adds	r3, #1
 800f48e:	d0da      	beq.n	800f446 <xQueueGenericReceive+0xb6>
 800f490:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f492:	3301      	adds	r3, #1
 800f494:	d0d9      	beq.n	800f44a <xQueueGenericReceive+0xba>
 800f496:	f001 fa43 	bl	8010920 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f49a:	a901      	add	r1, sp, #4
 800f49c:	a802      	add	r0, sp, #8
 800f49e:	f000 fdad 	bl	800fffc <xTaskCheckForTimeOut>
 800f4a2:	2800      	cmp	r0, #0
 800f4a4:	d118      	bne.n	800f4d8 <xQueueGenericReceive+0x148>
	taskENTER_CRITICAL();
 800f4a6:	f001 fa2f 	bl	8010908 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f4aa:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800f4ac:	f001 fa38 	bl	8010920 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f4b0:	2f00      	cmp	r7, #0
 800f4b2:	d1d4      	bne.n	800f45e <xQueueGenericReceive+0xce>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f4b4:	6823      	ldr	r3, [r4, #0]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d0c9      	beq.n	800f44e <xQueueGenericReceive+0xbe>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f4ba:	0020      	movs	r0, r4
 800f4bc:	3024      	adds	r0, #36	; 0x24
 800f4be:	9901      	ldr	r1, [sp, #4]
 800f4c0:	f000 fd0e 	bl	800fee0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f4c4:	0020      	movs	r0, r4
 800f4c6:	f7ff fd97 	bl	800eff8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f4ca:	f000 fb67 	bl	800fb9c <xTaskResumeAll>
 800f4ce:	2800      	cmp	r0, #0
 800f4d0:	d1ca      	bne.n	800f468 <xQueueGenericReceive+0xd8>
					portYIELD_WITHIN_API();
 800f4d2:	f001 fa0d 	bl	80108f0 <vPortYield>
 800f4d6:	e7c7      	b.n	800f468 <xQueueGenericReceive+0xd8>
			prvUnlockQueue( pxQueue );
 800f4d8:	0020      	movs	r0, r4
 800f4da:	f7ff fd8d 	bl	800eff8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f4de:	f000 fb5d 	bl	800fb9c <xTaskResumeAll>
			return errQUEUE_EMPTY;
 800f4e2:	2000      	movs	r0, #0
 800f4e4:	e789      	b.n	800f3fa <xQueueGenericReceive+0x6a>

0800f4e6 <xQueueReceiveFromISR>:
{
 800f4e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4e8:	46c6      	mov	lr, r8
 800f4ea:	b500      	push	{lr}
 800f4ec:	0004      	movs	r4, r0
 800f4ee:	000f      	movs	r7, r1
 800f4f0:	0016      	movs	r6, r2
	configASSERT( pxQueue );
 800f4f2:	2800      	cmp	r0, #0
 800f4f4:	d00f      	beq.n	800f516 <xQueueReceiveFromISR+0x30>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f4f6:	2900      	cmp	r1, #0
 800f4f8:	d00f      	beq.n	800f51a <xQueueReceiveFromISR+0x34>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f4fa:	f001 fa21 	bl	8010940 <ulSetInterruptMaskFromISR>
 800f4fe:	4680      	mov	r8, r0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f500:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			xReturn = pdFAIL;
 800f502:	2500      	movs	r5, #0
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f504:	2b00      	cmp	r3, #0
 800f506:	d10d      	bne.n	800f524 <xQueueReceiveFromISR+0x3e>
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800f508:	4640      	mov	r0, r8
 800f50a:	f001 fa1e 	bl	801094a <vClearInterruptMaskFromISR>
}
 800f50e:	0028      	movs	r0, r5
 800f510:	bc80      	pop	{r7}
 800f512:	46b8      	mov	r8, r7
 800f514:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( pxQueue );
 800f516:	b672      	cpsid	i
 800f518:	e7fe      	b.n	800f518 <xQueueReceiveFromISR+0x32>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f51a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d0ec      	beq.n	800f4fa <xQueueReceiveFromISR+0x14>
 800f520:	b672      	cpsid	i
 800f522:	e7fe      	b.n	800f522 <xQueueReceiveFromISR+0x3c>
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f524:	0039      	movs	r1, r7
 800f526:	0020      	movs	r0, r4
 800f528:	f7ff fd54 	bl	800efd4 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 800f52c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f52e:	3b01      	subs	r3, #1
 800f530:	63a3      	str	r3, [r4, #56]	; 0x38
			if( pxQueue->xRxLock == queueUNLOCKED )
 800f532:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f534:	3301      	adds	r3, #1
 800f536:	d004      	beq.n	800f542 <xQueueReceiveFromISR+0x5c>
				++( pxQueue->xRxLock );
 800f538:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f53a:	3301      	adds	r3, #1
 800f53c:	6463      	str	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800f53e:	2501      	movs	r5, #1
 800f540:	e7e2      	b.n	800f508 <xQueueReceiveFromISR+0x22>
 800f542:	3501      	adds	r5, #1
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f544:	6923      	ldr	r3, [r4, #16]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d0de      	beq.n	800f508 <xQueueReceiveFromISR+0x22>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f54a:	0020      	movs	r0, r4
 800f54c:	3010      	adds	r0, #16
 800f54e:	f000 fd05 	bl	800ff5c <xTaskRemoveFromEventList>
 800f552:	2800      	cmp	r0, #0
 800f554:	d0d8      	beq.n	800f508 <xQueueReceiveFromISR+0x22>
						if( pxHigherPriorityTaskWoken != NULL )
 800f556:	2e00      	cmp	r6, #0
 800f558:	d002      	beq.n	800f560 <xQueueReceiveFromISR+0x7a>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f55a:	2301      	movs	r3, #1
 800f55c:	6033      	str	r3, [r6, #0]
 800f55e:	e7d3      	b.n	800f508 <xQueueReceiveFromISR+0x22>
			xReturn = pdPASS;
 800f560:	2501      	movs	r5, #1
 800f562:	e7d1      	b.n	800f508 <xQueueReceiveFromISR+0x22>

0800f564 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f564:	b510      	push	{r4, lr}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f566:	4a08      	ldr	r2, [pc, #32]	; (800f588 <vQueueAddToRegistry+0x24>)
 800f568:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f56a:	6814      	ldr	r4, [r2, #0]
 800f56c:	2c00      	cmp	r4, #0
 800f56e:	d004      	beq.n	800f57a <vQueueAddToRegistry+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f570:	3301      	adds	r3, #1
 800f572:	3208      	adds	r2, #8
 800f574:	2b08      	cmp	r3, #8
 800f576:	d1f8      	bne.n	800f56a <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f578:	bd10      	pop	{r4, pc}
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f57a:	4a03      	ldr	r2, [pc, #12]	; (800f588 <vQueueAddToRegistry+0x24>)
 800f57c:	00db      	lsls	r3, r3, #3
 800f57e:	5099      	str	r1, [r3, r2]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f580:	18d3      	adds	r3, r2, r3
 800f582:	6058      	str	r0, [r3, #4]
				break;
 800f584:	e7f8      	b.n	800f578 <vQueueAddToRegistry+0x14>
 800f586:	46c0      	nop			; (mov r8, r8)
 800f588:	20006b3c 	.word	0x20006b3c

0800f58c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait )
	{
 800f58c:	b570      	push	{r4, r5, r6, lr}
 800f58e:	0004      	movs	r4, r0
 800f590:	000d      	movs	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f592:	f001 f9b9 	bl	8010908 <vPortEnterCritical>
 800f596:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f598:	3301      	adds	r3, #1
 800f59a:	d00b      	beq.n	800f5b4 <vQueueWaitForMessageRestricted+0x28>
 800f59c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800f59e:	3301      	adds	r3, #1
 800f5a0:	d00b      	beq.n	800f5ba <vQueueWaitForMessageRestricted+0x2e>
 800f5a2:	f001 f9bd 	bl	8010920 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f5a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d009      	beq.n	800f5c0 <vQueueWaitForMessageRestricted+0x34>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f5ac:	0020      	movs	r0, r4
 800f5ae:	f7ff fd23 	bl	800eff8 <prvUnlockQueue>
	}
 800f5b2:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	6463      	str	r3, [r4, #68]	; 0x44
 800f5b8:	e7f0      	b.n	800f59c <vQueueWaitForMessageRestricted+0x10>
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	64a3      	str	r3, [r4, #72]	; 0x48
 800f5be:	e7f0      	b.n	800f5a2 <vQueueWaitForMessageRestricted+0x16>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f5c0:	0020      	movs	r0, r4
 800f5c2:	3024      	adds	r0, #36	; 0x24
 800f5c4:	0029      	movs	r1, r5
 800f5c6:	f000 fcaf 	bl	800ff28 <vTaskPlaceOnEventListRestricted>
 800f5ca:	e7ef      	b.n	800f5ac <vQueueWaitForMessageRestricted+0x20>

0800f5cc <prvListTaskWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTaskWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800f5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f5ce:	46de      	mov	lr, fp
 800f5d0:	4657      	mov	r7, sl
 800f5d2:	464e      	mov	r6, r9
 800f5d4:	4645      	mov	r5, r8
 800f5d6:	b5e0      	push	{r5, r6, r7, lr}
 800f5d8:	0004      	movs	r4, r0
	volatile TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800f5da:	680b      	ldr	r3, [r1, #0]
 800f5dc:	469b      	mov	fp, r3
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d045      	beq.n	800f66e <prvListTaskWithinSingleList+0xa2>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800f5e2:	684b      	ldr	r3, [r1, #4]
 800f5e4:	685b      	ldr	r3, [r3, #4]
 800f5e6:	604b      	str	r3, [r1, #4]
 800f5e8:	2008      	movs	r0, #8
 800f5ea:	4684      	mov	ip, r0
 800f5ec:	448c      	add	ip, r1
 800f5ee:	4563      	cmp	r3, ip
 800f5f0:	d007      	beq.n	800f602 <prvListTaskWithinSingleList+0x36>
 800f5f2:	684b      	ldr	r3, [r1, #4]
 800f5f4:	68db      	ldr	r3, [r3, #12]
 800f5f6:	4698      	mov	r8, r3
	UBaseType_t uxTask = 0;
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	469b      	mov	fp, r3
					be reported as being in the Blocked state. */
					if( eState == eSuspended )
					{
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
						{
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800f5fc:	3302      	adds	r3, #2
 800f5fe:	4699      	mov	r9, r3
 800f600:	e01c      	b.n	800f63c <prvListTaskWithinSingleList+0x70>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
 800f602:	68cb      	ldr	r3, [r1, #12]
 800f604:	604b      	str	r3, [r1, #4]
 800f606:	e7f4      	b.n	800f5f2 <prvListTaskWithinSingleList+0x26>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800f608:	685b      	ldr	r3, [r3, #4]
 800f60a:	604b      	str	r3, [r1, #4]
 800f60c:	e01b      	b.n	800f646 <prvListTaskWithinSingleList+0x7a>
							pxTaskStatusArray[ uxTask ].eCurrentState = eBlocked;
 800f60e:	4648      	mov	r0, r9
 800f610:	7320      	strb	r0, [r4, #12]
				}
				#endif /* INCLUDE_vTaskSuspend */

				#if ( configUSE_MUTEXES == 1 )
				{
					pxTaskStatusArray[ uxTask ].uxBasePriority = pxNextTCB->uxBasePriority;
 800f612:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800f614:	6175      	str	r5, [r6, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1 )
				{
					pxTaskStatusArray[ uxTask ].ulRunTimeCounter = pxNextTCB->ulRunTimeCounter;
 800f616:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800f618:	61b5      	str	r5, [r6, #24]
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxEndOfStack );
				}
				#else
				{
					pxTaskStatusArray[ uxTask ].usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxNextTCB->pxStack );
 800f61a:	6b1f      	ldr	r7, [r3, #48]	; 0x30

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
	uint32_t ulCount = 0U;

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f61c:	783d      	ldrb	r5, [r7, #0]
 800f61e:	2da5      	cmp	r5, #165	; 0xa5
 800f620:	d123      	bne.n	800f66a <prvListTaskWithinSingleList+0x9e>
	uint32_t ulCount = 0U;
 800f622:	2500      	movs	r5, #0
		{
			pucStackByte -= portSTACK_GROWTH;
			ulCount++;
 800f624:	3501      	adds	r5, #1
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800f626:	5d78      	ldrb	r0, [r7, r5]
 800f628:	28a5      	cmp	r0, #165	; 0xa5
 800f62a:	d0fb      	beq.n	800f624 <prvListTaskWithinSingleList+0x58>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 800f62c:	08ad      	lsrs	r5, r5, #2

		return ( uint16_t ) ulCount;
 800f62e:	83b5      	strh	r5, [r6, #28]
				uxTask++;
 800f630:	2001      	movs	r0, #1
 800f632:	4682      	mov	sl, r0
 800f634:	44d3      	add	fp, sl
			} while( pxNextTCB != pxFirstTCB );
 800f636:	3420      	adds	r4, #32
 800f638:	4598      	cmp	r8, r3
 800f63a:	d018      	beq.n	800f66e <prvListTaskWithinSingleList+0xa2>
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
 800f63c:	684b      	ldr	r3, [r1, #4]
 800f63e:	685b      	ldr	r3, [r3, #4]
 800f640:	604b      	str	r3, [r1, #4]
 800f642:	459c      	cmp	ip, r3
 800f644:	d0e0      	beq.n	800f608 <prvListTaskWithinSingleList+0x3c>
 800f646:	684b      	ldr	r3, [r1, #4]
 800f648:	68db      	ldr	r3, [r3, #12]
				pxTaskStatusArray[ uxTask ].xHandle = ( TaskHandle_t ) pxNextTCB;
 800f64a:	0026      	movs	r6, r4
 800f64c:	6023      	str	r3, [r4, #0]
				pxTaskStatusArray[ uxTask ].pcTaskName = ( const char * ) &( pxNextTCB->pcTaskName [ 0 ] );
 800f64e:	001d      	movs	r5, r3
 800f650:	3534      	adds	r5, #52	; 0x34
 800f652:	6065      	str	r5, [r4, #4]
				pxTaskStatusArray[ uxTask ].xTaskNumber = pxNextTCB->uxTCBNumber;
 800f654:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 800f656:	60a5      	str	r5, [r4, #8]
				pxTaskStatusArray[ uxTask ].eCurrentState = eState;
 800f658:	7322      	strb	r2, [r4, #12]
				pxTaskStatusArray[ uxTask ].uxCurrentPriority = pxNextTCB->uxPriority;
 800f65a:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800f65c:	6125      	str	r5, [r4, #16]
					if( eState == eSuspended )
 800f65e:	2a03      	cmp	r2, #3
 800f660:	d1d7      	bne.n	800f612 <prvListTaskWithinSingleList+0x46>
						if( listLIST_ITEM_CONTAINER( &( pxNextTCB->xEventListItem ) ) != NULL )
 800f662:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800f664:	2d00      	cmp	r5, #0
 800f666:	d1d2      	bne.n	800f60e <prvListTaskWithinSingleList+0x42>
 800f668:	e7d3      	b.n	800f612 <prvListTaskWithinSingleList+0x46>
	uint32_t ulCount = 0U;
 800f66a:	2500      	movs	r5, #0
 800f66c:	e7de      	b.n	800f62c <prvListTaskWithinSingleList+0x60>
	}
 800f66e:	4658      	mov	r0, fp
 800f670:	bcf0      	pop	{r4, r5, r6, r7}
 800f672:	46bb      	mov	fp, r7
 800f674:	46b2      	mov	sl, r6
 800f676:	46a9      	mov	r9, r5
 800f678:	46a0      	mov	r8, r4
 800f67a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f67c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f67c:	4b08      	ldr	r3, [pc, #32]	; (800f6a0 <prvResetNextTaskUnblockTime+0x24>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d104      	bne.n	800f690 <prvResetNextTaskUnblockTime+0x14>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f686:	4b07      	ldr	r3, [pc, #28]	; (800f6a4 <prvResetNextTaskUnblockTime+0x28>)
 800f688:	2201      	movs	r2, #1
 800f68a:	4252      	negs	r2, r2
 800f68c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
	}
}
 800f68e:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800f690:	4b03      	ldr	r3, [pc, #12]	; (800f6a0 <prvResetNextTaskUnblockTime+0x24>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 800f696:	68db      	ldr	r3, [r3, #12]
 800f698:	685a      	ldr	r2, [r3, #4]
 800f69a:	4b02      	ldr	r3, [pc, #8]	; (800f6a4 <prvResetNextTaskUnblockTime+0x28>)
 800f69c:	601a      	str	r2, [r3, #0]
}
 800f69e:	e7f6      	b.n	800f68e <prvResetNextTaskUnblockTime+0x12>
 800f6a0:	20001a80 	.word	0x20001a80
 800f6a4:	20000188 	.word	0x20000188

0800f6a8 <prvAddCurrentTaskToDelayedList>:
{
 800f6a8:	b510      	push	{r4, lr}
 800f6aa:	0004      	movs	r4, r0
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800f6ac:	4b0e      	ldr	r3, [pc, #56]	; (800f6e8 <prvAddCurrentTaskToDelayedList+0x40>)
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
 800f6b2:	4b0e      	ldr	r3, [pc, #56]	; (800f6ec <prvAddCurrentTaskToDelayedList+0x44>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	4283      	cmp	r3, r0
 800f6b8:	d907      	bls.n	800f6ca <prvAddCurrentTaskToDelayedList+0x22>
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f6ba:	4b0d      	ldr	r3, [pc, #52]	; (800f6f0 <prvAddCurrentTaskToDelayedList+0x48>)
 800f6bc:	6818      	ldr	r0, [r3, #0]
 800f6be:	4b0a      	ldr	r3, [pc, #40]	; (800f6e8 <prvAddCurrentTaskToDelayedList+0x40>)
 800f6c0:	6819      	ldr	r1, [r3, #0]
 800f6c2:	3104      	adds	r1, #4
 800f6c4:	f7ff fc1f 	bl	800ef06 <vListInsert>
}
 800f6c8:	bd10      	pop	{r4, pc}
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800f6ca:	4b0a      	ldr	r3, [pc, #40]	; (800f6f4 <prvAddCurrentTaskToDelayedList+0x4c>)
 800f6cc:	6818      	ldr	r0, [r3, #0]
 800f6ce:	4b06      	ldr	r3, [pc, #24]	; (800f6e8 <prvAddCurrentTaskToDelayedList+0x40>)
 800f6d0:	6819      	ldr	r1, [r3, #0]
 800f6d2:	3104      	adds	r1, #4
 800f6d4:	f7ff fc17 	bl	800ef06 <vListInsert>
		if( xTimeToWake < xNextTaskUnblockTime )
 800f6d8:	4b07      	ldr	r3, [pc, #28]	; (800f6f8 <prvAddCurrentTaskToDelayedList+0x50>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	42a3      	cmp	r3, r4
 800f6de:	d9f3      	bls.n	800f6c8 <prvAddCurrentTaskToDelayedList+0x20>
			xNextTaskUnblockTime = xTimeToWake;
 800f6e0:	4b05      	ldr	r3, [pc, #20]	; (800f6f8 <prvAddCurrentTaskToDelayedList+0x50>)
 800f6e2:	601c      	str	r4, [r3, #0]
}
 800f6e4:	e7f0      	b.n	800f6c8 <prvAddCurrentTaskToDelayedList+0x20>
 800f6e6:	46c0      	nop			; (mov r8, r8)
 800f6e8:	20001a7c 	.word	0x20001a7c
 800f6ec:	20001b9c 	.word	0x20001b9c
 800f6f0:	20001a84 	.word	0x20001a84
 800f6f4:	20001a80 	.word	0x20001a80
 800f6f8:	20000188 	.word	0x20000188

0800f6fc <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 800f6fc:	b510      	push	{r4, lr}
 800f6fe:	0004      	movs	r4, r0
	BaseType_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 800f700:	f005 f99b 	bl	8014a3a <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f704:	0020      	movs	r0, r4
 800f706:	f7f0 fd07 	bl	8000118 <strlen>
 800f70a:	280b      	cmp	r0, #11
 800f70c:	dc08      	bgt.n	800f720 <prvWriteNameToBuffer+0x24>
 800f70e:	1823      	adds	r3, r4, r0
 800f710:	0021      	movs	r1, r4
 800f712:	310c      	adds	r1, #12
		{
			pcBuffer[ x ] = ' ';
 800f714:	2220      	movs	r2, #32
 800f716:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800f718:	3301      	adds	r3, #1
 800f71a:	428b      	cmp	r3, r1
 800f71c:	d1fb      	bne.n	800f716 <prvWriteNameToBuffer+0x1a>
 800f71e:	200c      	movs	r0, #12
		}

		/* Terminate. */
		pcBuffer[ x ] = 0x00;
 800f720:	1820      	adds	r0, r4, r0
 800f722:	2300      	movs	r3, #0
 800f724:	7003      	strb	r3, [r0, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
	}
 800f726:	bd10      	pop	{r4, pc}

0800f728 <xTaskGenericCreate>:
{
 800f728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f72a:	46de      	mov	lr, fp
 800f72c:	4657      	mov	r7, sl
 800f72e:	464e      	mov	r6, r9
 800f730:	4645      	mov	r5, r8
 800f732:	b5e0      	push	{r5, r6, r7, lr}
 800f734:	b083      	sub	sp, #12
 800f736:	9001      	str	r0, [sp, #4]
 800f738:	4688      	mov	r8, r1
 800f73a:	0017      	movs	r7, r2
 800f73c:	469a      	mov	sl, r3
 800f73e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f740:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
 800f742:	2800      	cmp	r0, #0
 800f744:	d003      	beq.n	800f74e <xTaskGenericCreate+0x26>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 800f746:	2e06      	cmp	r6, #6
 800f748:	d903      	bls.n	800f752 <xTaskGenericCreate+0x2a>
 800f74a:	b672      	cpsid	i
 800f74c:	e7fe      	b.n	800f74c <xTaskGenericCreate+0x24>
	configASSERT( pxTaskCode );
 800f74e:	b672      	cpsid	i
 800f750:	e7fe      	b.n	800f750 <xTaskGenericCreate+0x28>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f752:	2d00      	cmp	r5, #0
 800f754:	d05b      	beq.n	800f80e <xTaskGenericCreate+0xe6>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800f756:	2060      	movs	r0, #96	; 0x60
 800f758:	f001 f958 	bl	8010a0c <pvPortMalloc>
 800f75c:	1e04      	subs	r4, r0, #0
			if( pxNewTCB != NULL )
 800f75e:	d064      	beq.n	800f82a <xTaskGenericCreate+0x102>
				pxNewTCB->pxStack = pxStack;
 800f760:	6305      	str	r5, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800f762:	00ba      	lsls	r2, r7, #2
 800f764:	21a5      	movs	r1, #165	; 0xa5
 800f766:	0028      	movs	r0, r5
 800f768:	f004 ff03 	bl	8014572 <memset>
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
 800f76c:	4b5e      	ldr	r3, [pc, #376]	; (800f8e8 <xTaskGenericCreate+0x1c0>)
 800f76e:	18fd      	adds	r5, r7, r3
 800f770:	00ad      	lsls	r5, r5, #2
 800f772:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800f774:	469c      	mov	ip, r3
 800f776:	4465      	add	r5, ip
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800f778:	2307      	movs	r3, #7
 800f77a:	439d      	bics	r5, r3
 800f77c:	46a9      	mov	r9, r5
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f77e:	2300      	movs	r3, #0
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800f780:	0021      	movs	r1, r4
 800f782:	3134      	adds	r1, #52	; 0x34
 800f784:	4642      	mov	r2, r8
 800f786:	5cd2      	ldrb	r2, [r2, r3]
 800f788:	54ca      	strb	r2, [r1, r3]
		if( pcName[ x ] == 0x00 )
 800f78a:	2a00      	cmp	r2, #0
 800f78c:	d002      	beq.n	800f794 <xTaskGenericCreate+0x6c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f78e:	3301      	adds	r3, #1
 800f790:	2b0d      	cmp	r3, #13
 800f792:	d1f7      	bne.n	800f784 <xTaskGenericCreate+0x5c>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f794:	2340      	movs	r3, #64	; 0x40
 800f796:	2200      	movs	r2, #0
 800f798:	54e2      	strb	r2, [r4, r3]
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f79a:	0035      	movs	r5, r6
 800f79c:	2e06      	cmp	r6, #6
 800f79e:	d900      	bls.n	800f7a2 <xTaskGenericCreate+0x7a>
 800f7a0:	2506      	movs	r5, #6
	pxTCB->uxPriority = uxPriority;
 800f7a2:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
 800f7a4:	64e5      	str	r5, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800f7a6:	2700      	movs	r7, #0
 800f7a8:	6527      	str	r7, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800f7aa:	1d23      	adds	r3, r4, #4
 800f7ac:	469b      	mov	fp, r3
 800f7ae:	0018      	movs	r0, r3
 800f7b0:	f7ff fb9b 	bl	800eeea <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 800f7b4:	0020      	movs	r0, r4
 800f7b6:	3018      	adds	r0, #24
 800f7b8:	f7ff fb97 	bl	800eeea <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 800f7bc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7be:	2307      	movs	r3, #7
 800f7c0:	1b5b      	subs	r3, r3, r5
 800f7c2:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 800f7c4:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulRunTimeCounter = 0UL;
 800f7c6:	6567      	str	r7, [r4, #84]	; 0x54
		pxTCB->ulNotifiedValue = 0;
 800f7c8:	65a7      	str	r7, [r4, #88]	; 0x58
		pxTCB->eNotifyState = eNotWaitingNotification;
 800f7ca:	235c      	movs	r3, #92	; 0x5c
 800f7cc:	54e7      	strb	r7, [r4, r3]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f7ce:	4652      	mov	r2, sl
 800f7d0:	9901      	ldr	r1, [sp, #4]
 800f7d2:	4648      	mov	r0, r9
 800f7d4:	f001 f850 	bl	8010878 <pxPortInitialiseStack>
 800f7d8:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
 800f7da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d000      	beq.n	800f7e2 <xTaskGenericCreate+0xba>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f7e0:	601c      	str	r4, [r3, #0]
		taskENTER_CRITICAL();
 800f7e2:	f001 f891 	bl	8010908 <vPortEnterCritical>
			uxCurrentNumberOfTasks++;
 800f7e6:	4a41      	ldr	r2, [pc, #260]	; (800f8ec <xTaskGenericCreate+0x1c4>)
 800f7e8:	6813      	ldr	r3, [r2, #0]
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 800f7ee:	4b40      	ldr	r3, [pc, #256]	; (800f8f0 <xTaskGenericCreate+0x1c8>)
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d01d      	beq.n	800f832 <xTaskGenericCreate+0x10a>
				if( xSchedulerRunning == pdFALSE )
 800f7f6:	4b3f      	ldr	r3, [pc, #252]	; (800f8f4 <xTaskGenericCreate+0x1cc>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d11e      	bne.n	800f83c <xTaskGenericCreate+0x114>
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800f7fe:	4b3c      	ldr	r3, [pc, #240]	; (800f8f0 <xTaskGenericCreate+0x1c8>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f804:	42b3      	cmp	r3, r6
 800f806:	d819      	bhi.n	800f83c <xTaskGenericCreate+0x114>
						pxCurrentTCB = pxNewTCB;
 800f808:	4b39      	ldr	r3, [pc, #228]	; (800f8f0 <xTaskGenericCreate+0x1c8>)
 800f80a:	601c      	str	r4, [r3, #0]
 800f80c:	e016      	b.n	800f83c <xTaskGenericCreate+0x114>
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f80e:	0090      	lsls	r0, r2, #2
 800f810:	f001 f8fc 	bl	8010a0c <pvPortMalloc>
 800f814:	1e05      	subs	r5, r0, #0
		if( pxStack != NULL )
 800f816:	d19e      	bne.n	800f756 <xTaskGenericCreate+0x2e>
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f818:	2001      	movs	r0, #1
 800f81a:	4240      	negs	r0, r0
}
 800f81c:	b003      	add	sp, #12
 800f81e:	bcf0      	pop	{r4, r5, r6, r7}
 800f820:	46bb      	mov	fp, r7
 800f822:	46b2      	mov	sl, r6
 800f824:	46a9      	mov	r9, r5
 800f826:	46a0      	mov	r8, r4
 800f828:	bdf0      	pop	{r4, r5, r6, r7, pc}
				vPortFree( pxStack );
 800f82a:	0028      	movs	r0, r5
 800f82c:	f001 f980 	bl	8010b30 <vPortFree>
	if( pxNewTCB != NULL )
 800f830:	e7f2      	b.n	800f818 <xTaskGenericCreate+0xf0>
				pxCurrentTCB =  pxNewTCB;
 800f832:	4b2f      	ldr	r3, [pc, #188]	; (800f8f0 <xTaskGenericCreate+0x1c8>)
 800f834:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f836:	6813      	ldr	r3, [r2, #0]
 800f838:	2b01      	cmp	r3, #1
 800f83a:	d023      	beq.n	800f884 <xTaskGenericCreate+0x15c>
			uxTaskNumber++;
 800f83c:	4a2e      	ldr	r2, [pc, #184]	; (800f8f8 <xTaskGenericCreate+0x1d0>)
 800f83e:	6813      	ldr	r3, [r2, #0]
 800f840:	3301      	adds	r3, #1
 800f842:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f844:	6463      	str	r3, [r4, #68]	; 0x44
			prvAddTaskToReadyList( pxNewTCB );
 800f846:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f848:	4a2c      	ldr	r2, [pc, #176]	; (800f8fc <xTaskGenericCreate+0x1d4>)
 800f84a:	6812      	ldr	r2, [r2, #0]
 800f84c:	4293      	cmp	r3, r2
 800f84e:	d901      	bls.n	800f854 <xTaskGenericCreate+0x12c>
 800f850:	4a2a      	ldr	r2, [pc, #168]	; (800f8fc <xTaskGenericCreate+0x1d4>)
 800f852:	6013      	str	r3, [r2, #0]
 800f854:	0098      	lsls	r0, r3, #2
 800f856:	18c0      	adds	r0, r0, r3
 800f858:	0080      	lsls	r0, r0, #2
 800f85a:	4b29      	ldr	r3, [pc, #164]	; (800f900 <xTaskGenericCreate+0x1d8>)
 800f85c:	18c0      	adds	r0, r0, r3
 800f85e:	4659      	mov	r1, fp
 800f860:	f7ff fb46 	bl	800eef0 <vListInsertEnd>
		taskEXIT_CRITICAL();
 800f864:	f001 f85c 	bl	8010920 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800f868:	4b22      	ldr	r3, [pc, #136]	; (800f8f4 <xTaskGenericCreate+0x1cc>)
 800f86a:	681b      	ldr	r3, [r3, #0]
			xReturn = pdPASS;
 800f86c:	2001      	movs	r0, #1
		if( xSchedulerRunning != pdFALSE )
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d0d4      	beq.n	800f81c <xTaskGenericCreate+0xf4>
			if( pxCurrentTCB->uxPriority < uxPriority )
 800f872:	4b1f      	ldr	r3, [pc, #124]	; (800f8f0 <xTaskGenericCreate+0x1c8>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f878:	42b3      	cmp	r3, r6
 800f87a:	d2cf      	bcs.n	800f81c <xTaskGenericCreate+0xf4>
				taskYIELD_IF_USING_PREEMPTION();
 800f87c:	f001 f838 	bl	80108f0 <vPortYield>
			xReturn = pdPASS;
 800f880:	2001      	movs	r0, #1
 800f882:	e7cb      	b.n	800f81c <xTaskGenericCreate+0xf4>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f884:	4d1e      	ldr	r5, [pc, #120]	; (800f900 <xTaskGenericCreate+0x1d8>)
 800f886:	0028      	movs	r0, r5
 800f888:	f7ff fb24 	bl	800eed4 <vListInitialise>
 800f88c:	0028      	movs	r0, r5
 800f88e:	3014      	adds	r0, #20
 800f890:	f7ff fb20 	bl	800eed4 <vListInitialise>
 800f894:	0028      	movs	r0, r5
 800f896:	3028      	adds	r0, #40	; 0x28
 800f898:	f7ff fb1c 	bl	800eed4 <vListInitialise>
 800f89c:	0028      	movs	r0, r5
 800f89e:	303c      	adds	r0, #60	; 0x3c
 800f8a0:	f7ff fb18 	bl	800eed4 <vListInitialise>
 800f8a4:	0028      	movs	r0, r5
 800f8a6:	3050      	adds	r0, #80	; 0x50
 800f8a8:	f7ff fb14 	bl	800eed4 <vListInitialise>
 800f8ac:	0028      	movs	r0, r5
 800f8ae:	3064      	adds	r0, #100	; 0x64
 800f8b0:	f7ff fb10 	bl	800eed4 <vListInitialise>
 800f8b4:	0028      	movs	r0, r5
 800f8b6:	3078      	adds	r0, #120	; 0x78
 800f8b8:	f7ff fb0c 	bl	800eed4 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 800f8bc:	4f11      	ldr	r7, [pc, #68]	; (800f904 <xTaskGenericCreate+0x1dc>)
 800f8be:	0038      	movs	r0, r7
 800f8c0:	f7ff fb08 	bl	800eed4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f8c4:	4d10      	ldr	r5, [pc, #64]	; (800f908 <xTaskGenericCreate+0x1e0>)
 800f8c6:	0028      	movs	r0, r5
 800f8c8:	f7ff fb04 	bl	800eed4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f8cc:	480f      	ldr	r0, [pc, #60]	; (800f90c <xTaskGenericCreate+0x1e4>)
 800f8ce:	f7ff fb01 	bl	800eed4 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800f8d2:	480f      	ldr	r0, [pc, #60]	; (800f910 <xTaskGenericCreate+0x1e8>)
 800f8d4:	f7ff fafe 	bl	800eed4 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800f8d8:	480e      	ldr	r0, [pc, #56]	; (800f914 <xTaskGenericCreate+0x1ec>)
 800f8da:	f7ff fafb 	bl	800eed4 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800f8de:	4b0e      	ldr	r3, [pc, #56]	; (800f918 <xTaskGenericCreate+0x1f0>)
 800f8e0:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f8e2:	4b0e      	ldr	r3, [pc, #56]	; (800f91c <xTaskGenericCreate+0x1f4>)
 800f8e4:	601d      	str	r5, [r3, #0]
}
 800f8e6:	e7a9      	b.n	800f83c <xTaskGenericCreate+0x114>
 800f8e8:	3fffffff 	.word	0x3fffffff
 800f8ec:	20001b18 	.word	0x20001b18
 800f8f0:	20001a7c 	.word	0x20001a7c
 800f8f4:	20001b70 	.word	0x20001b70
 800f8f8:	20001b24 	.word	0x20001b24
 800f8fc:	20001b2c 	.word	0x20001b2c
 800f900:	20001a88 	.word	0x20001a88
 800f904:	20001b30 	.word	0x20001b30
 800f908:	20001b44 	.word	0x20001b44
 800f90c:	20001b5c 	.word	0x20001b5c
 800f910:	20001b88 	.word	0x20001b88
 800f914:	20001b74 	.word	0x20001b74
 800f918:	20001a80 	.word	0x20001a80
 800f91c:	20001a84 	.word	0x20001a84

0800f920 <uxTaskPriorityGet>:
	{
 800f920:	b510      	push	{r4, lr}
 800f922:	0004      	movs	r4, r0
		taskENTER_CRITICAL();
 800f924:	f000 fff0 	bl	8010908 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f928:	2c00      	cmp	r4, #0
 800f92a:	d004      	beq.n	800f936 <uxTaskPriorityGet+0x16>
			uxReturn = pxTCB->uxPriority;
 800f92c:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
		taskEXIT_CRITICAL();
 800f92e:	f000 fff7 	bl	8010920 <vPortExitCritical>
	}
 800f932:	0020      	movs	r0, r4
 800f934:	bd10      	pop	{r4, pc}
			pxTCB = prvGetTCBFromHandle( xTask );
 800f936:	4b01      	ldr	r3, [pc, #4]	; (800f93c <uxTaskPriorityGet+0x1c>)
 800f938:	681c      	ldr	r4, [r3, #0]
 800f93a:	e7f7      	b.n	800f92c <uxTaskPriorityGet+0xc>
 800f93c:	20001a7c 	.word	0x20001a7c

0800f940 <vTaskPrioritySet>:
	{
 800f940:	b570      	push	{r4, r5, r6, lr}
 800f942:	0004      	movs	r4, r0
 800f944:	000d      	movs	r5, r1
		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 800f946:	2906      	cmp	r1, #6
 800f948:	d901      	bls.n	800f94e <vTaskPrioritySet+0xe>
 800f94a:	b672      	cpsid	i
 800f94c:	e7fe      	b.n	800f94c <vTaskPrioritySet+0xc>
		taskENTER_CRITICAL();
 800f94e:	f000 ffdb 	bl	8010908 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f952:	2c00      	cmp	r4, #0
 800f954:	d00e      	beq.n	800f974 <vTaskPrioritySet+0x34>
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800f956:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
			if( uxCurrentBasePriority != uxNewPriority )
 800f958:	428d      	cmp	r5, r1
 800f95a:	d027      	beq.n	800f9ac <vTaskPrioritySet+0x6c>
				if( uxNewPriority > uxCurrentBasePriority )
 800f95c:	d90d      	bls.n	800f97a <vTaskPrioritySet+0x3a>
					if( pxTCB != pxCurrentTCB )
 800f95e:	4b22      	ldr	r3, [pc, #136]	; (800f9e8 <vTaskPrioritySet+0xa8>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	42a3      	cmp	r3, r4
 800f964:	d025      	beq.n	800f9b2 <vTaskPrioritySet+0x72>
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800f966:	4b20      	ldr	r3, [pc, #128]	; (800f9e8 <vTaskPrioritySet+0xa8>)
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f96c:	2600      	movs	r6, #0
 800f96e:	429d      	cmp	r5, r3
 800f970:	4176      	adcs	r6, r6
 800f972:	e007      	b.n	800f984 <vTaskPrioritySet+0x44>
			pxTCB = prvGetTCBFromHandle( xTask );
 800f974:	4b1c      	ldr	r3, [pc, #112]	; (800f9e8 <vTaskPrioritySet+0xa8>)
 800f976:	681c      	ldr	r4, [r3, #0]
 800f978:	e7ed      	b.n	800f956 <vTaskPrioritySet+0x16>
				else if( pxTCB == pxCurrentTCB )
 800f97a:	4b1b      	ldr	r3, [pc, #108]	; (800f9e8 <vTaskPrioritySet+0xa8>)
 800f97c:	681e      	ldr	r6, [r3, #0]
 800f97e:	1b36      	subs	r6, r6, r4
							xYieldRequired = pdTRUE;
 800f980:	4273      	negs	r3, r6
 800f982:	415e      	adcs	r6, r3
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f984:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800f986:	4291      	cmp	r1, r2
 800f988:	d015      	beq.n	800f9b6 <vTaskPrioritySet+0x76>
					pxTCB->uxBasePriority = uxNewPriority;
 800f98a:	64e5      	str	r5, [r4, #76]	; 0x4c
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f98c:	69a3      	ldr	r3, [r4, #24]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	db02      	blt.n	800f998 <vTaskPrioritySet+0x58>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f992:	2307      	movs	r3, #7
 800f994:	1b5d      	subs	r5, r3, r5
 800f996:	61a5      	str	r5, [r4, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 800f998:	0093      	lsls	r3, r2, #2
 800f99a:	189b      	adds	r3, r3, r2
 800f99c:	009b      	lsls	r3, r3, #2
 800f99e:	4a13      	ldr	r2, [pc, #76]	; (800f9ec <vTaskPrioritySet+0xac>)
 800f9a0:	189b      	adds	r3, r3, r2
 800f9a2:	6962      	ldr	r2, [r4, #20]
 800f9a4:	429a      	cmp	r2, r3
 800f9a6:	d008      	beq.n	800f9ba <vTaskPrioritySet+0x7a>
				if( xYieldRequired == pdTRUE )
 800f9a8:	2e01      	cmp	r6, #1
 800f9aa:	d01a      	beq.n	800f9e2 <vTaskPrioritySet+0xa2>
		taskEXIT_CRITICAL();
 800f9ac:	f000 ffb8 	bl	8010920 <vPortExitCritical>
	}
 800f9b0:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xYieldRequired = pdFALSE;
 800f9b2:	2600      	movs	r6, #0
 800f9b4:	e7e6      	b.n	800f984 <vTaskPrioritySet+0x44>
						pxTCB->uxPriority = uxNewPriority;
 800f9b6:	62e5      	str	r5, [r4, #44]	; 0x2c
 800f9b8:	e7e7      	b.n	800f98a <vTaskPrioritySet+0x4a>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800f9ba:	1d25      	adds	r5, r4, #4
 800f9bc:	0028      	movs	r0, r5
 800f9be:	f7ff fab9 	bl	800ef34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f9c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800f9c4:	4a0a      	ldr	r2, [pc, #40]	; (800f9f0 <vTaskPrioritySet+0xb0>)
 800f9c6:	6812      	ldr	r2, [r2, #0]
 800f9c8:	4293      	cmp	r3, r2
 800f9ca:	d901      	bls.n	800f9d0 <vTaskPrioritySet+0x90>
 800f9cc:	4a08      	ldr	r2, [pc, #32]	; (800f9f0 <vTaskPrioritySet+0xb0>)
 800f9ce:	6013      	str	r3, [r2, #0]
 800f9d0:	0098      	lsls	r0, r3, #2
 800f9d2:	18c0      	adds	r0, r0, r3
 800f9d4:	0080      	lsls	r0, r0, #2
 800f9d6:	4b05      	ldr	r3, [pc, #20]	; (800f9ec <vTaskPrioritySet+0xac>)
 800f9d8:	18c0      	adds	r0, r0, r3
 800f9da:	0029      	movs	r1, r5
 800f9dc:	f7ff fa88 	bl	800eef0 <vListInsertEnd>
 800f9e0:	e7e2      	b.n	800f9a8 <vTaskPrioritySet+0x68>
					taskYIELD_IF_USING_PREEMPTION();
 800f9e2:	f000 ff85 	bl	80108f0 <vPortYield>
 800f9e6:	e7e1      	b.n	800f9ac <vTaskPrioritySet+0x6c>
 800f9e8:	20001a7c 	.word	0x20001a7c
 800f9ec:	20001a88 	.word	0x20001a88
 800f9f0:	20001b2c 	.word	0x20001b2c

0800f9f4 <vTaskStartScheduler>:
{
 800f9f4:	b500      	push	{lr}
 800f9f6:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	9303      	str	r3, [sp, #12]
 800f9fc:	9302      	str	r3, [sp, #8]
 800f9fe:	9301      	str	r3, [sp, #4]
 800fa00:	9300      	str	r3, [sp, #0]
 800fa02:	22a0      	movs	r2, #160	; 0xa0
 800fa04:	490d      	ldr	r1, [pc, #52]	; (800fa3c <vTaskStartScheduler+0x48>)
 800fa06:	480e      	ldr	r0, [pc, #56]	; (800fa40 <vTaskStartScheduler+0x4c>)
 800fa08:	f7ff fe8e 	bl	800f728 <xTaskGenericCreate>
		if( xReturn == pdPASS )
 800fa0c:	2801      	cmp	r0, #1
 800fa0e:	d003      	beq.n	800fa18 <vTaskStartScheduler+0x24>
		configASSERT( xReturn );
 800fa10:	2800      	cmp	r0, #0
 800fa12:	d110      	bne.n	800fa36 <vTaskStartScheduler+0x42>
 800fa14:	b672      	cpsid	i
 800fa16:	e7fe      	b.n	800fa16 <vTaskStartScheduler+0x22>
			xReturn = xTimerCreateTimerTask();
 800fa18:	f000 fd8c 	bl	8010534 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800fa1c:	2801      	cmp	r0, #1
 800fa1e:	d1f7      	bne.n	800fa10 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
 800fa20:	b672      	cpsid	i
		xSchedulerRunning = pdTRUE;
 800fa22:	4b08      	ldr	r3, [pc, #32]	; (800fa44 <vTaskStartScheduler+0x50>)
 800fa24:	2201      	movs	r2, #1
 800fa26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800fa28:	4b07      	ldr	r3, [pc, #28]	; (800fa48 <vTaskStartScheduler+0x54>)
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	601a      	str	r2, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800fa2e:	f7f8 fc87 	bl	8008340 <vMainConfigureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 800fa32:	f000 ff33 	bl	801089c <xPortStartScheduler>
}
 800fa36:	b005      	add	sp, #20
 800fa38:	bd00      	pop	{pc}
 800fa3a:	46c0      	nop			; (mov r8, r8)
 800fa3c:	0801d5dc 	.word	0x0801d5dc
 800fa40:	0800fccd 	.word	0x0800fccd
 800fa44:	20001b70 	.word	0x20001b70
 800fa48:	20001b9c 	.word	0x20001b9c

0800fa4c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800fa4c:	4a02      	ldr	r2, [pc, #8]	; (800fa58 <vTaskSuspendAll+0xc>)
 800fa4e:	6813      	ldr	r3, [r2, #0]
 800fa50:	3301      	adds	r3, #1
 800fa52:	6013      	str	r3, [r2, #0]
}
 800fa54:	4770      	bx	lr
 800fa56:	46c0      	nop			; (mov r8, r8)
 800fa58:	20001b20 	.word	0x20001b20

0800fa5c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800fa5c:	4b01      	ldr	r3, [pc, #4]	; (800fa64 <xTaskGetTickCount+0x8>)
 800fa5e:	6818      	ldr	r0, [r3, #0]
}
 800fa60:	4770      	bx	lr
 800fa62:	46c0      	nop			; (mov r8, r8)
 800fa64:	20001b9c 	.word	0x20001b9c

0800fa68 <xTaskGetTickCountFromISR>:
		xReturn = xTickCount;
 800fa68:	4b01      	ldr	r3, [pc, #4]	; (800fa70 <xTaskGetTickCountFromISR+0x8>)
 800fa6a:	6818      	ldr	r0, [r3, #0]
}
 800fa6c:	4770      	bx	lr
 800fa6e:	46c0      	nop			; (mov r8, r8)
 800fa70:	20001b9c 	.word	0x20001b9c

0800fa74 <xTaskIncrementTick>:
{
 800fa74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa76:	46ce      	mov	lr, r9
 800fa78:	b500      	push	{lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa7a:	4b3d      	ldr	r3, [pc, #244]	; (800fb70 <xTaskIncrementTick+0xfc>)
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d167      	bne.n	800fb52 <xTaskIncrementTick+0xde>
		++xTickCount;
 800fa82:	4b3c      	ldr	r3, [pc, #240]	; (800fb74 <xTaskIncrementTick+0x100>)
 800fa84:	681a      	ldr	r2, [r3, #0]
 800fa86:	3201      	adds	r2, #1
 800fa88:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
 800fa8a:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
 800fa8c:	2e00      	cmp	r6, #0
 800fa8e:	d112      	bne.n	800fab6 <xTaskIncrementTick+0x42>
				taskSWITCH_DELAYED_LISTS();
 800fa90:	4b39      	ldr	r3, [pc, #228]	; (800fb78 <xTaskIncrementTick+0x104>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d001      	beq.n	800fa9e <xTaskIncrementTick+0x2a>
 800fa9a:	b672      	cpsid	i
 800fa9c:	e7fe      	b.n	800fa9c <xTaskIncrementTick+0x28>
 800fa9e:	4a36      	ldr	r2, [pc, #216]	; (800fb78 <xTaskIncrementTick+0x104>)
 800faa0:	6811      	ldr	r1, [r2, #0]
 800faa2:	4b36      	ldr	r3, [pc, #216]	; (800fb7c <xTaskIncrementTick+0x108>)
 800faa4:	6818      	ldr	r0, [r3, #0]
 800faa6:	6010      	str	r0, [r2, #0]
 800faa8:	6019      	str	r1, [r3, #0]
 800faaa:	4a35      	ldr	r2, [pc, #212]	; (800fb80 <xTaskIncrementTick+0x10c>)
 800faac:	6813      	ldr	r3, [r2, #0]
 800faae:	3301      	adds	r3, #1
 800fab0:	6013      	str	r3, [r2, #0]
 800fab2:	f7ff fde3 	bl	800f67c <prvResetNextTaskUnblockTime>
			if( xConstTickCount >= xNextTaskUnblockTime )
 800fab6:	4b33      	ldr	r3, [pc, #204]	; (800fb84 <xTaskIncrementTick+0x110>)
 800fab8:	681b      	ldr	r3, [r3, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800faba:	2400      	movs	r4, #0
			if( xConstTickCount >= xNextTaskUnblockTime )
 800fabc:	42b3      	cmp	r3, r6
 800fabe:	d80b      	bhi.n	800fad8 <xTaskIncrementTick+0x64>
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fac0:	4b2d      	ldr	r3, [pc, #180]	; (800fb78 <xTaskIncrementTick+0x104>)
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d001      	beq.n	800face <xTaskIncrementTick+0x5a>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800faca:	4d2b      	ldr	r5, [pc, #172]	; (800fb78 <xTaskIncrementTick+0x104>)
 800facc:	e027      	b.n	800fb1e <xTaskIncrementTick+0xaa>
BaseType_t xSwitchRequired = pdFALSE;
 800face:	2400      	movs	r4, #0
						xNextTaskUnblockTime = portMAX_DELAY;
 800fad0:	4b2c      	ldr	r3, [pc, #176]	; (800fb84 <xTaskIncrementTick+0x110>)
 800fad2:	2201      	movs	r2, #1
 800fad4:	4252      	negs	r2, r2
 800fad6:	601a      	str	r2, [r3, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fad8:	4b2b      	ldr	r3, [pc, #172]	; (800fb88 <xTaskIncrementTick+0x114>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fade:	0093      	lsls	r3, r2, #2
 800fae0:	189b      	adds	r3, r3, r2
 800fae2:	009b      	lsls	r3, r3, #2
 800fae4:	4a29      	ldr	r2, [pc, #164]	; (800fb8c <xTaskIncrementTick+0x118>)
 800fae6:	589b      	ldr	r3, [r3, r2]
 800fae8:	2b01      	cmp	r3, #1
 800faea:	d937      	bls.n	800fb5c <xTaskIncrementTick+0xe8>
				xSwitchRequired = pdTRUE;
 800faec:	2401      	movs	r4, #1
 800faee:	e035      	b.n	800fb5c <xTaskIncrementTick+0xe8>
							xNextTaskUnblockTime = xItemValue;
 800faf0:	4a24      	ldr	r2, [pc, #144]	; (800fb84 <xTaskIncrementTick+0x110>)
 800faf2:	6013      	str	r3, [r2, #0]
							break;
 800faf4:	e7f0      	b.n	800fad8 <xTaskIncrementTick+0x64>
						prvAddTaskToReadyList( pxTCB );
 800faf6:	0098      	lsls	r0, r3, #2
 800faf8:	18c0      	adds	r0, r0, r3
 800fafa:	0080      	lsls	r0, r0, #2
 800fafc:	4b23      	ldr	r3, [pc, #140]	; (800fb8c <xTaskIncrementTick+0x118>)
 800fafe:	18c0      	adds	r0, r0, r3
 800fb00:	4649      	mov	r1, r9
 800fb02:	f7ff f9f5 	bl	800eef0 <vListInsertEnd>
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fb06:	4b20      	ldr	r3, [pc, #128]	; (800fb88 <xTaskIncrementTick+0x114>)
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb0e:	429a      	cmp	r2, r3
 800fb10:	d300      	bcc.n	800fb14 <xTaskIncrementTick+0xa0>
								xSwitchRequired = pdTRUE;
 800fb12:	2401      	movs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fb14:	4b18      	ldr	r3, [pc, #96]	; (800fb78 <xTaskIncrementTick+0x104>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d0d8      	beq.n	800fad0 <xTaskIncrementTick+0x5c>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800fb1e:	682b      	ldr	r3, [r5, #0]
 800fb20:	68db      	ldr	r3, [r3, #12]
 800fb22:	68df      	ldr	r7, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 800fb24:	687b      	ldr	r3, [r7, #4]
						if( xConstTickCount < xItemValue )
 800fb26:	429e      	cmp	r6, r3
 800fb28:	d3e2      	bcc.n	800faf0 <xTaskIncrementTick+0x7c>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800fb2a:	1d3b      	adds	r3, r7, #4
 800fb2c:	4699      	mov	r9, r3
 800fb2e:	0018      	movs	r0, r3
 800fb30:	f7ff fa00 	bl	800ef34 <uxListRemove>
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d003      	beq.n	800fb42 <xTaskIncrementTick+0xce>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fb3a:	0038      	movs	r0, r7
 800fb3c:	3018      	adds	r0, #24
 800fb3e:	f7ff f9f9 	bl	800ef34 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800fb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb44:	4a12      	ldr	r2, [pc, #72]	; (800fb90 <xTaskIncrementTick+0x11c>)
 800fb46:	6812      	ldr	r2, [r2, #0]
 800fb48:	4293      	cmp	r3, r2
 800fb4a:	d9d4      	bls.n	800faf6 <xTaskIncrementTick+0x82>
 800fb4c:	4a10      	ldr	r2, [pc, #64]	; (800fb90 <xTaskIncrementTick+0x11c>)
 800fb4e:	6013      	str	r3, [r2, #0]
 800fb50:	e7d1      	b.n	800faf6 <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 800fb52:	4a10      	ldr	r2, [pc, #64]	; (800fb94 <xTaskIncrementTick+0x120>)
 800fb54:	6813      	ldr	r3, [r2, #0]
 800fb56:	3301      	adds	r3, #1
 800fb58:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800fb5a:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800fb5c:	4b0e      	ldr	r3, [pc, #56]	; (800fb98 <xTaskIncrementTick+0x124>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d000      	beq.n	800fb66 <xTaskIncrementTick+0xf2>
			xSwitchRequired = pdTRUE;
 800fb64:	2401      	movs	r4, #1
}
 800fb66:	0020      	movs	r0, r4
 800fb68:	bc80      	pop	{r7}
 800fb6a:	46b9      	mov	r9, r7
 800fb6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb6e:	46c0      	nop			; (mov r8, r8)
 800fb70:	20001b20 	.word	0x20001b20
 800fb74:	20001b9c 	.word	0x20001b9c
 800fb78:	20001a80 	.word	0x20001a80
 800fb7c:	20001a84 	.word	0x20001a84
 800fb80:	20001b58 	.word	0x20001b58
 800fb84:	20000188 	.word	0x20000188
 800fb88:	20001a7c 	.word	0x20001a7c
 800fb8c:	20001a88 	.word	0x20001a88
 800fb90:	20001b2c 	.word	0x20001b2c
 800fb94:	20001b1c 	.word	0x20001b1c
 800fb98:	20001ba0 	.word	0x20001ba0

0800fb9c <xTaskResumeAll>:
{
 800fb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxSchedulerSuspended );
 800fb9e:	4b31      	ldr	r3, [pc, #196]	; (800fc64 <xTaskResumeAll+0xc8>)
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d101      	bne.n	800fbaa <xTaskResumeAll+0xe>
 800fba6:	b672      	cpsid	i
 800fba8:	e7fe      	b.n	800fba8 <xTaskResumeAll+0xc>
	taskENTER_CRITICAL();
 800fbaa:	f000 fead 	bl	8010908 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800fbae:	4b2d      	ldr	r3, [pc, #180]	; (800fc64 <xTaskResumeAll+0xc8>)
 800fbb0:	681a      	ldr	r2, [r3, #0]
 800fbb2:	3a01      	subs	r2, #1
 800fbb4:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbb6:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800fbb8:	2400      	movs	r4, #0
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d14b      	bne.n	800fc56 <xTaskResumeAll+0xba>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fbbe:	4b2a      	ldr	r3, [pc, #168]	; (800fc68 <xTaskResumeAll+0xcc>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
BaseType_t xAlreadyYielded = pdFALSE;
 800fbc2:	2400      	movs	r4, #0
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d046      	beq.n	800fc56 <xTaskResumeAll+0xba>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fbc8:	4d28      	ldr	r5, [pc, #160]	; (800fc6c <xTaskResumeAll+0xd0>)
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800fbca:	002c      	movs	r4, r5
 800fbcc:	e00d      	b.n	800fbea <xTaskResumeAll+0x4e>
					prvAddTaskToReadyList( pxTCB );
 800fbce:	0098      	lsls	r0, r3, #2
 800fbd0:	18c0      	adds	r0, r0, r3
 800fbd2:	0080      	lsls	r0, r0, #2
 800fbd4:	4b26      	ldr	r3, [pc, #152]	; (800fc70 <xTaskResumeAll+0xd4>)
 800fbd6:	18c0      	adds	r0, r0, r3
 800fbd8:	0039      	movs	r1, r7
 800fbda:	f7ff f989 	bl	800eef0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fbde:	4b25      	ldr	r3, [pc, #148]	; (800fc74 <xTaskResumeAll+0xd8>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800fbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbe6:	429a      	cmp	r2, r3
 800fbe8:	d214      	bcs.n	800fc14 <xTaskResumeAll+0x78>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fbea:	682b      	ldr	r3, [r5, #0]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d015      	beq.n	800fc1c <xTaskResumeAll+0x80>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800fbf0:	68e3      	ldr	r3, [r4, #12]
 800fbf2:	68de      	ldr	r6, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fbf4:	0030      	movs	r0, r6
 800fbf6:	3018      	adds	r0, #24
 800fbf8:	f7ff f99c 	bl	800ef34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800fbfc:	1d37      	adds	r7, r6, #4
 800fbfe:	0038      	movs	r0, r7
 800fc00:	f7ff f998 	bl	800ef34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fc04:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800fc06:	4a1c      	ldr	r2, [pc, #112]	; (800fc78 <xTaskResumeAll+0xdc>)
 800fc08:	6812      	ldr	r2, [r2, #0]
 800fc0a:	4293      	cmp	r3, r2
 800fc0c:	d9df      	bls.n	800fbce <xTaskResumeAll+0x32>
 800fc0e:	4a1a      	ldr	r2, [pc, #104]	; (800fc78 <xTaskResumeAll+0xdc>)
 800fc10:	6013      	str	r3, [r2, #0]
 800fc12:	e7dc      	b.n	800fbce <xTaskResumeAll+0x32>
						xYieldPending = pdTRUE;
 800fc14:	4b19      	ldr	r3, [pc, #100]	; (800fc7c <xTaskResumeAll+0xe0>)
 800fc16:	2201      	movs	r2, #1
 800fc18:	601a      	str	r2, [r3, #0]
 800fc1a:	e7e6      	b.n	800fbea <xTaskResumeAll+0x4e>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 800fc1c:	4b18      	ldr	r3, [pc, #96]	; (800fc80 <xTaskResumeAll+0xe4>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d013      	beq.n	800fc4c <xTaskResumeAll+0xb0>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800fc24:	4b16      	ldr	r3, [pc, #88]	; (800fc80 <xTaskResumeAll+0xe4>)
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d00f      	beq.n	800fc4c <xTaskResumeAll+0xb0>
							xYieldPending = pdTRUE;
 800fc2c:	4d13      	ldr	r5, [pc, #76]	; (800fc7c <xTaskResumeAll+0xe0>)
 800fc2e:	2601      	movs	r6, #1
						--uxPendedTicks;
 800fc30:	4c13      	ldr	r4, [pc, #76]	; (800fc80 <xTaskResumeAll+0xe4>)
 800fc32:	e005      	b.n	800fc40 <xTaskResumeAll+0xa4>
 800fc34:	6823      	ldr	r3, [r4, #0]
 800fc36:	3b01      	subs	r3, #1
 800fc38:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800fc3a:	6823      	ldr	r3, [r4, #0]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d005      	beq.n	800fc4c <xTaskResumeAll+0xb0>
						if( xTaskIncrementTick() != pdFALSE )
 800fc40:	f7ff ff18 	bl	800fa74 <xTaskIncrementTick>
 800fc44:	2800      	cmp	r0, #0
 800fc46:	d0f5      	beq.n	800fc34 <xTaskResumeAll+0x98>
							xYieldPending = pdTRUE;
 800fc48:	602e      	str	r6, [r5, #0]
 800fc4a:	e7f3      	b.n	800fc34 <xTaskResumeAll+0x98>
				if( xYieldPending == pdTRUE )
 800fc4c:	4b0b      	ldr	r3, [pc, #44]	; (800fc7c <xTaskResumeAll+0xe0>)
 800fc4e:	681c      	ldr	r4, [r3, #0]
 800fc50:	2c01      	cmp	r4, #1
 800fc52:	d004      	beq.n	800fc5e <xTaskResumeAll+0xc2>
BaseType_t xAlreadyYielded = pdFALSE;
 800fc54:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800fc56:	f000 fe63 	bl	8010920 <vPortExitCritical>
}
 800fc5a:	0020      	movs	r0, r4
 800fc5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					taskYIELD_IF_USING_PREEMPTION();
 800fc5e:	f000 fe47 	bl	80108f0 <vPortYield>
 800fc62:	e7f8      	b.n	800fc56 <xTaskResumeAll+0xba>
 800fc64:	20001b20 	.word	0x20001b20
 800fc68:	20001b18 	.word	0x20001b18
 800fc6c:	20001b5c 	.word	0x20001b5c
 800fc70:	20001a88 	.word	0x20001a88
 800fc74:	20001a7c 	.word	0x20001a7c
 800fc78:	20001b2c 	.word	0x20001b2c
 800fc7c:	20001ba0 	.word	0x20001ba0
 800fc80:	20001b1c 	.word	0x20001b1c

0800fc84 <vTaskDelay>:
	{
 800fc84:	b510      	push	{r4, lr}
 800fc86:	1e04      	subs	r4, r0, #0
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fc88:	d016      	beq.n	800fcb8 <vTaskDelay+0x34>
			configASSERT( uxSchedulerSuspended == 0 );
 800fc8a:	4b0d      	ldr	r3, [pc, #52]	; (800fcc0 <vTaskDelay+0x3c>)
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d001      	beq.n	800fc96 <vTaskDelay+0x12>
 800fc92:	b672      	cpsid	i
 800fc94:	e7fe      	b.n	800fc94 <vTaskDelay+0x10>
			vTaskSuspendAll();
 800fc96:	f7ff fed9 	bl	800fa4c <vTaskSuspendAll>
				xTimeToWake = xTickCount + xTicksToDelay;
 800fc9a:	4b0a      	ldr	r3, [pc, #40]	; (800fcc4 <vTaskDelay+0x40>)
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	191c      	adds	r4, r3, r4
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fca0:	4b09      	ldr	r3, [pc, #36]	; (800fcc8 <vTaskDelay+0x44>)
 800fca2:	6818      	ldr	r0, [r3, #0]
 800fca4:	3004      	adds	r0, #4
 800fca6:	f7ff f945 	bl	800ef34 <uxListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800fcaa:	0020      	movs	r0, r4
 800fcac:	f7ff fcfc 	bl	800f6a8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800fcb0:	f7ff ff74 	bl	800fb9c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800fcb4:	2800      	cmp	r0, #0
 800fcb6:	d101      	bne.n	800fcbc <vTaskDelay+0x38>
			portYIELD_WITHIN_API();
 800fcb8:	f000 fe1a 	bl	80108f0 <vPortYield>
	}
 800fcbc:	bd10      	pop	{r4, pc}
 800fcbe:	46c0      	nop			; (mov r8, r8)
 800fcc0:	20001b20 	.word	0x20001b20
 800fcc4:	20001b9c 	.word	0x20001b9c
 800fcc8:	20001a7c 	.word	0x20001a7c

0800fccc <prvIdleTask>:
{
 800fccc:	b570      	push	{r4, r5, r6, lr}
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800fcce:	4e16      	ldr	r6, [pc, #88]	; (800fd28 <prvIdleTask+0x5c>)
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800fcd0:	4d16      	ldr	r5, [pc, #88]	; (800fd2c <prvIdleTask+0x60>)
 800fcd2:	e003      	b.n	800fcdc <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fcd4:	4b16      	ldr	r3, [pc, #88]	; (800fd30 <prvIdleTask+0x64>)
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	2b01      	cmp	r3, #1
 800fcda:	d822      	bhi.n	800fd22 <prvIdleTask+0x56>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800fcdc:	6833      	ldr	r3, [r6, #0]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d0f8      	beq.n	800fcd4 <prvIdleTask+0x8>
			vTaskSuspendAll();
 800fce2:	f7ff feb3 	bl	800fa4c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800fce6:	682c      	ldr	r4, [r5, #0]
			( void ) xTaskResumeAll();
 800fce8:	f7ff ff58 	bl	800fb9c <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 800fcec:	2c00      	cmp	r4, #0
 800fcee:	d0f5      	beq.n	800fcdc <prvIdleTask+0x10>
				taskENTER_CRITICAL();
 800fcf0:	f000 fe0a 	bl	8010908 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800fcf4:	4b0d      	ldr	r3, [pc, #52]	; (800fd2c <prvIdleTask+0x60>)
 800fcf6:	68db      	ldr	r3, [r3, #12]
 800fcf8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800fcfa:	1d20      	adds	r0, r4, #4
 800fcfc:	f7ff f91a 	bl	800ef34 <uxListRemove>
					--uxCurrentNumberOfTasks;
 800fd00:	4a0c      	ldr	r2, [pc, #48]	; (800fd34 <prvIdleTask+0x68>)
 800fd02:	6813      	ldr	r3, [r2, #0]
 800fd04:	3b01      	subs	r3, #1
 800fd06:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800fd08:	4a07      	ldr	r2, [pc, #28]	; (800fd28 <prvIdleTask+0x5c>)
 800fd0a:	6813      	ldr	r3, [r2, #0]
 800fd0c:	3b01      	subs	r3, #1
 800fd0e:	6013      	str	r3, [r2, #0]
				taskEXIT_CRITICAL();
 800fd10:	f000 fe06 	bl	8010920 <vPortExitCritical>
			vPortFreeAligned( pxTCB->pxStack );
 800fd14:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800fd16:	f000 ff0b 	bl	8010b30 <vPortFree>
		vPortFree( pxTCB );
 800fd1a:	0020      	movs	r0, r4
 800fd1c:	f000 ff08 	bl	8010b30 <vPortFree>
	}
 800fd20:	e7dc      	b.n	800fcdc <prvIdleTask+0x10>
				taskYIELD();
 800fd22:	f000 fde5 	bl	80108f0 <vPortYield>
 800fd26:	e7d9      	b.n	800fcdc <prvIdleTask+0x10>
 800fd28:	20001b28 	.word	0x20001b28
 800fd2c:	20001b88 	.word	0x20001b88
 800fd30:	20001a88 	.word	0x20001a88
 800fd34:	20001b18 	.word	0x20001b18

0800fd38 <uxTaskGetSystemState>:
	{
 800fd38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd3a:	46c6      	mov	lr, r8
 800fd3c:	b500      	push	{lr}
 800fd3e:	0006      	movs	r6, r0
 800fd40:	000d      	movs	r5, r1
 800fd42:	4690      	mov	r8, r2
		vTaskSuspendAll();
 800fd44:	f7ff fe82 	bl	800fa4c <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800fd48:	4b1e      	ldr	r3, [pc, #120]	; (800fdc4 <uxTaskGetSystemState+0x8c>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800fd4c:	2400      	movs	r4, #0
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800fd4e:	42ab      	cmp	r3, r5
 800fd50:	d832      	bhi.n	800fdb8 <uxTaskGetSystemState+0x80>
 800fd52:	4d1d      	ldr	r5, [pc, #116]	; (800fdc8 <uxTaskGetSystemState+0x90>)
 800fd54:	002f      	movs	r7, r5
 800fd56:	3f78      	subs	r7, #120	; 0x78
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 800fd58:	0160      	lsls	r0, r4, #5
 800fd5a:	1830      	adds	r0, r6, r0
 800fd5c:	2201      	movs	r2, #1
 800fd5e:	0029      	movs	r1, r5
 800fd60:	f7ff fc34 	bl	800f5cc <prvListTaskWithinSingleList>
 800fd64:	1824      	adds	r4, r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd66:	002b      	movs	r3, r5
 800fd68:	3d14      	subs	r5, #20
 800fd6a:	42bb      	cmp	r3, r7
 800fd6c:	d1f4      	bne.n	800fd58 <uxTaskGetSystemState+0x20>
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 800fd6e:	4b17      	ldr	r3, [pc, #92]	; (800fdcc <uxTaskGetSystemState+0x94>)
 800fd70:	6819      	ldr	r1, [r3, #0]
 800fd72:	0160      	lsls	r0, r4, #5
 800fd74:	1830      	adds	r0, r6, r0
 800fd76:	2202      	movs	r2, #2
 800fd78:	f7ff fc28 	bl	800f5cc <prvListTaskWithinSingleList>
 800fd7c:	1824      	adds	r4, r4, r0
				uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800fd7e:	4b14      	ldr	r3, [pc, #80]	; (800fdd0 <uxTaskGetSystemState+0x98>)
 800fd80:	6819      	ldr	r1, [r3, #0]
 800fd82:	0160      	lsls	r0, r4, #5
 800fd84:	1830      	adds	r0, r6, r0
 800fd86:	2202      	movs	r2, #2
 800fd88:	f7ff fc20 	bl	800f5cc <prvListTaskWithinSingleList>
 800fd8c:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 800fd8e:	0160      	lsls	r0, r4, #5
 800fd90:	1830      	adds	r0, r6, r0
 800fd92:	2204      	movs	r2, #4
 800fd94:	490f      	ldr	r1, [pc, #60]	; (800fdd4 <uxTaskGetSystemState+0x9c>)
 800fd96:	f7ff fc19 	bl	800f5cc <prvListTaskWithinSingleList>
 800fd9a:	1824      	adds	r4, r4, r0
					uxTask += prvListTaskWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 800fd9c:	0160      	lsls	r0, r4, #5
 800fd9e:	1830      	adds	r0, r6, r0
 800fda0:	2203      	movs	r2, #3
 800fda2:	490d      	ldr	r1, [pc, #52]	; (800fdd8 <uxTaskGetSystemState+0xa0>)
 800fda4:	f7ff fc12 	bl	800f5cc <prvListTaskWithinSingleList>
 800fda8:	1824      	adds	r4, r4, r0
					if( pulTotalRunTime != NULL )
 800fdaa:	4643      	mov	r3, r8
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d003      	beq.n	800fdb8 <uxTaskGetSystemState+0x80>
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800fdb0:	f7f8 fad6 	bl	8008360 <ulMainGetRunTimeCounterValue>
 800fdb4:	4643      	mov	r3, r8
 800fdb6:	6018      	str	r0, [r3, #0]
		( void ) xTaskResumeAll();
 800fdb8:	f7ff fef0 	bl	800fb9c <xTaskResumeAll>
	}
 800fdbc:	0020      	movs	r0, r4
 800fdbe:	bc80      	pop	{r7}
 800fdc0:	46b8      	mov	r8, r7
 800fdc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdc4:	20001b18 	.word	0x20001b18
 800fdc8:	20001b00 	.word	0x20001b00
 800fdcc:	20001a80 	.word	0x20001a80
 800fdd0:	20001a84 	.word	0x20001a84
 800fdd4:	20001b88 	.word	0x20001b88
 800fdd8:	20001b74 	.word	0x20001b74

0800fddc <vTaskSwitchContext>:
{
 800fddc:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fdde:	4b39      	ldr	r3, [pc, #228]	; (800fec4 <vTaskSwitchContext+0xe8>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d003      	beq.n	800fdee <vTaskSwitchContext+0x12>
		xYieldPending = pdTRUE;
 800fde6:	4b38      	ldr	r3, [pc, #224]	; (800fec8 <vTaskSwitchContext+0xec>)
 800fde8:	2201      	movs	r2, #1
 800fdea:	601a      	str	r2, [r3, #0]
}
 800fdec:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800fdee:	4b36      	ldr	r3, [pc, #216]	; (800fec8 <vTaskSwitchContext+0xec>)
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800fdf4:	f7f8 fab4 	bl	8008360 <ulMainGetRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 800fdf8:	4b34      	ldr	r3, [pc, #208]	; (800fecc <vTaskSwitchContext+0xf0>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	4298      	cmp	r0, r3
 800fdfe:	d905      	bls.n	800fe0c <vTaskSwitchContext+0x30>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800fe00:	4a33      	ldr	r2, [pc, #204]	; (800fed0 <vTaskSwitchContext+0xf4>)
 800fe02:	6812      	ldr	r2, [r2, #0]
 800fe04:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800fe06:	1acb      	subs	r3, r1, r3
 800fe08:	181b      	adds	r3, r3, r0
 800fe0a:	6553      	str	r3, [r2, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
 800fe0c:	4b2f      	ldr	r3, [pc, #188]	; (800fecc <vTaskSwitchContext+0xf0>)
 800fe0e:	6018      	str	r0, [r3, #0]
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800fe10:	4b2f      	ldr	r3, [pc, #188]	; (800fed0 <vTaskSwitchContext+0xf4>)
 800fe12:	681a      	ldr	r2, [r3, #0]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	6812      	ldr	r2, [r2, #0]
 800fe18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d93b      	bls.n	800fe96 <vTaskSwitchContext+0xba>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800fe1e:	4b2c      	ldr	r3, [pc, #176]	; (800fed0 <vTaskSwitchContext+0xf4>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fe24:	2214      	movs	r2, #20
 800fe26:	492b      	ldr	r1, [pc, #172]	; (800fed4 <vTaskSwitchContext+0xf8>)
 800fe28:	f004 fb8c 	bl	8014544 <memcmp>
 800fe2c:	2800      	cmp	r0, #0
 800fe2e:	d139      	bne.n	800fea4 <vTaskSwitchContext+0xc8>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800fe30:	4b29      	ldr	r3, [pc, #164]	; (800fed8 <vTaskSwitchContext+0xfc>)
 800fe32:	681a      	ldr	r2, [r3, #0]
 800fe34:	0093      	lsls	r3, r2, #2
 800fe36:	189b      	adds	r3, r3, r2
 800fe38:	009b      	lsls	r3, r3, #2
 800fe3a:	4a28      	ldr	r2, [pc, #160]	; (800fedc <vTaskSwitchContext+0x100>)
 800fe3c:	589b      	ldr	r3, [r3, r2]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d10f      	bne.n	800fe62 <vTaskSwitchContext+0x86>
 800fe42:	4825      	ldr	r0, [pc, #148]	; (800fed8 <vTaskSwitchContext+0xfc>)
 800fe44:	0002      	movs	r2, r0
 800fe46:	6803      	ldr	r3, [r0, #0]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d032      	beq.n	800feb2 <vTaskSwitchContext+0xd6>
 800fe4c:	6813      	ldr	r3, [r2, #0]
 800fe4e:	3b01      	subs	r3, #1
 800fe50:	6013      	str	r3, [r2, #0]
 800fe52:	6811      	ldr	r1, [r2, #0]
 800fe54:	008b      	lsls	r3, r1, #2
 800fe56:	185b      	adds	r3, r3, r1
 800fe58:	009b      	lsls	r3, r3, #2
 800fe5a:	4920      	ldr	r1, [pc, #128]	; (800fedc <vTaskSwitchContext+0x100>)
 800fe5c:	585b      	ldr	r3, [r3, r1]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d0f1      	beq.n	800fe46 <vTaskSwitchContext+0x6a>
 800fe62:	4b1d      	ldr	r3, [pc, #116]	; (800fed8 <vTaskSwitchContext+0xfc>)
 800fe64:	681a      	ldr	r2, [r3, #0]
 800fe66:	4c1d      	ldr	r4, [pc, #116]	; (800fedc <vTaskSwitchContext+0x100>)
 800fe68:	0093      	lsls	r3, r2, #2
 800fe6a:	1899      	adds	r1, r3, r2
 800fe6c:	0089      	lsls	r1, r1, #2
 800fe6e:	1861      	adds	r1, r4, r1
 800fe70:	6848      	ldr	r0, [r1, #4]
 800fe72:	6840      	ldr	r0, [r0, #4]
 800fe74:	6048      	str	r0, [r1, #4]
 800fe76:	189b      	adds	r3, r3, r2
 800fe78:	009b      	lsls	r3, r3, #2
 800fe7a:	3308      	adds	r3, #8
 800fe7c:	191b      	adds	r3, r3, r4
 800fe7e:	4298      	cmp	r0, r3
 800fe80:	d019      	beq.n	800feb6 <vTaskSwitchContext+0xda>
 800fe82:	0093      	lsls	r3, r2, #2
 800fe84:	189a      	adds	r2, r3, r2
 800fe86:	0092      	lsls	r2, r2, #2
 800fe88:	4b14      	ldr	r3, [pc, #80]	; (800fedc <vTaskSwitchContext+0x100>)
 800fe8a:	189a      	adds	r2, r3, r2
 800fe8c:	6853      	ldr	r3, [r2, #4]
 800fe8e:	68da      	ldr	r2, [r3, #12]
 800fe90:	4b0f      	ldr	r3, [pc, #60]	; (800fed0 <vTaskSwitchContext+0xf4>)
 800fe92:	601a      	str	r2, [r3, #0]
}
 800fe94:	e7aa      	b.n	800fdec <vTaskSwitchContext+0x10>
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
 800fe96:	4b0e      	ldr	r3, [pc, #56]	; (800fed0 <vTaskSwitchContext+0xf4>)
 800fe98:	6818      	ldr	r0, [r3, #0]
 800fe9a:	6819      	ldr	r1, [r3, #0]
 800fe9c:	3134      	adds	r1, #52	; 0x34
 800fe9e:	f7fd fd29 	bl	800d8f4 <vApplicationStackOverflowHook>
 800fea2:	e7bc      	b.n	800fe1e <vTaskSwitchContext+0x42>
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
 800fea4:	4b0a      	ldr	r3, [pc, #40]	; (800fed0 <vTaskSwitchContext+0xf4>)
 800fea6:	6818      	ldr	r0, [r3, #0]
 800fea8:	6819      	ldr	r1, [r3, #0]
 800feaa:	3134      	adds	r1, #52	; 0x34
 800feac:	f7fd fd22 	bl	800d8f4 <vApplicationStackOverflowHook>
 800feb0:	e7be      	b.n	800fe30 <vTaskSwitchContext+0x54>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800feb2:	b672      	cpsid	i
 800feb4:	e7fe      	b.n	800feb4 <vTaskSwitchContext+0xd8>
 800feb6:	6840      	ldr	r0, [r0, #4]
 800feb8:	0093      	lsls	r3, r2, #2
 800feba:	189b      	adds	r3, r3, r2
 800febc:	009b      	lsls	r3, r3, #2
 800febe:	18e3      	adds	r3, r4, r3
 800fec0:	6058      	str	r0, [r3, #4]
 800fec2:	e7de      	b.n	800fe82 <vTaskSwitchContext+0xa6>
 800fec4:	20001b20 	.word	0x20001b20
 800fec8:	20001ba0 	.word	0x20001ba0
 800fecc:	20001b14 	.word	0x20001b14
 800fed0:	20001a7c 	.word	0x20001a7c
 800fed4:	0801d60c 	.word	0x0801d60c
 800fed8:	20001b2c 	.word	0x20001b2c
 800fedc:	20001a88 	.word	0x20001a88

0800fee0 <vTaskPlaceOnEventList>:
{
 800fee0:	b570      	push	{r4, r5, r6, lr}
 800fee2:	000c      	movs	r4, r1
	configASSERT( pxEventList );
 800fee4:	2800      	cmp	r0, #0
 800fee6:	d010      	beq.n	800ff0a <vTaskPlaceOnEventList+0x2a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fee8:	4d0c      	ldr	r5, [pc, #48]	; (800ff1c <vTaskPlaceOnEventList+0x3c>)
 800feea:	6829      	ldr	r1, [r5, #0]
 800feec:	3118      	adds	r1, #24
 800feee:	f7ff f80a 	bl	800ef06 <vListInsert>
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800fef2:	6828      	ldr	r0, [r5, #0]
 800fef4:	3004      	adds	r0, #4
 800fef6:	f7ff f81d 	bl	800ef34 <uxListRemove>
		if( xTicksToWait == portMAX_DELAY )
 800fefa:	1c63      	adds	r3, r4, #1
 800fefc:	d007      	beq.n	800ff0e <vTaskPlaceOnEventList+0x2e>
			xTimeToWake = xTickCount + xTicksToWait;
 800fefe:	4b08      	ldr	r3, [pc, #32]	; (800ff20 <vTaskPlaceOnEventList+0x40>)
 800ff00:	6818      	ldr	r0, [r3, #0]
 800ff02:	1900      	adds	r0, r0, r4
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 800ff04:	f7ff fbd0 	bl	800f6a8 <prvAddCurrentTaskToDelayedList>
}
 800ff08:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxEventList );
 800ff0a:	b672      	cpsid	i
 800ff0c:	e7fe      	b.n	800ff0c <vTaskPlaceOnEventList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800ff0e:	4b03      	ldr	r3, [pc, #12]	; (800ff1c <vTaskPlaceOnEventList+0x3c>)
 800ff10:	6819      	ldr	r1, [r3, #0]
 800ff12:	3104      	adds	r1, #4
 800ff14:	4803      	ldr	r0, [pc, #12]	; (800ff24 <vTaskPlaceOnEventList+0x44>)
 800ff16:	f7fe ffeb 	bl	800eef0 <vListInsertEnd>
 800ff1a:	e7f5      	b.n	800ff08 <vTaskPlaceOnEventList+0x28>
 800ff1c:	20001a7c 	.word	0x20001a7c
 800ff20:	20001b9c 	.word	0x20001b9c
 800ff24:	20001b74 	.word	0x20001b74

0800ff28 <vTaskPlaceOnEventListRestricted>:
	{
 800ff28:	b570      	push	{r4, r5, r6, lr}
 800ff2a:	000c      	movs	r4, r1
		configASSERT( pxEventList );
 800ff2c:	2800      	cmp	r0, #0
 800ff2e:	d00e      	beq.n	800ff4e <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ff30:	4d08      	ldr	r5, [pc, #32]	; (800ff54 <vTaskPlaceOnEventListRestricted+0x2c>)
 800ff32:	6829      	ldr	r1, [r5, #0]
 800ff34:	3118      	adds	r1, #24
 800ff36:	f7fe ffdb 	bl	800eef0 <vListInsertEnd>
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800ff3a:	6828      	ldr	r0, [r5, #0]
 800ff3c:	3004      	adds	r0, #4
 800ff3e:	f7fe fff9 	bl	800ef34 <uxListRemove>
		xTimeToWake = xTickCount + xTicksToWait;
 800ff42:	4b05      	ldr	r3, [pc, #20]	; (800ff58 <vTaskPlaceOnEventListRestricted+0x30>)
 800ff44:	6818      	ldr	r0, [r3, #0]
 800ff46:	1900      	adds	r0, r0, r4
		prvAddCurrentTaskToDelayedList( xTimeToWake );
 800ff48:	f7ff fbae 	bl	800f6a8 <prvAddCurrentTaskToDelayedList>
	}
 800ff4c:	bd70      	pop	{r4, r5, r6, pc}
		configASSERT( pxEventList );
 800ff4e:	b672      	cpsid	i
 800ff50:	e7fe      	b.n	800ff50 <vTaskPlaceOnEventListRestricted+0x28>
 800ff52:	46c0      	nop			; (mov r8, r8)
 800ff54:	20001a7c 	.word	0x20001a7c
 800ff58:	20001b9c 	.word	0x20001b9c

0800ff5c <xTaskRemoveFromEventList>:
{
 800ff5c:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ff5e:	68c3      	ldr	r3, [r0, #12]
 800ff60:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800ff62:	2c00      	cmp	r4, #0
 800ff64:	d027      	beq.n	800ffb6 <xTaskRemoveFromEventList+0x5a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ff66:	0025      	movs	r5, r4
 800ff68:	3518      	adds	r5, #24
 800ff6a:	0028      	movs	r0, r5
 800ff6c:	f7fe ffe2 	bl	800ef34 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff70:	4b14      	ldr	r3, [pc, #80]	; (800ffc4 <xTaskRemoveFromEventList+0x68>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d120      	bne.n	800ffba <xTaskRemoveFromEventList+0x5e>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 800ff78:	1d25      	adds	r5, r4, #4
 800ff7a:	0028      	movs	r0, r5
 800ff7c:	f7fe ffda 	bl	800ef34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ff80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ff82:	4a11      	ldr	r2, [pc, #68]	; (800ffc8 <xTaskRemoveFromEventList+0x6c>)
 800ff84:	6812      	ldr	r2, [r2, #0]
 800ff86:	4293      	cmp	r3, r2
 800ff88:	d901      	bls.n	800ff8e <xTaskRemoveFromEventList+0x32>
 800ff8a:	4a0f      	ldr	r2, [pc, #60]	; (800ffc8 <xTaskRemoveFromEventList+0x6c>)
 800ff8c:	6013      	str	r3, [r2, #0]
 800ff8e:	0098      	lsls	r0, r3, #2
 800ff90:	18c0      	adds	r0, r0, r3
 800ff92:	0080      	lsls	r0, r0, #2
 800ff94:	4b0d      	ldr	r3, [pc, #52]	; (800ffcc <xTaskRemoveFromEventList+0x70>)
 800ff96:	18c0      	adds	r0, r0, r3
 800ff98:	0029      	movs	r1, r5
 800ff9a:	f7fe ffa9 	bl	800eef0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ff9e:	4b0c      	ldr	r3, [pc, #48]	; (800ffd0 <xTaskRemoveFromEventList+0x74>)
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ffa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
		xReturn = pdFALSE;
 800ffa6:	2000      	movs	r0, #0
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	d903      	bls.n	800ffb4 <xTaskRemoveFromEventList+0x58>
		xYieldPending = pdTRUE;
 800ffac:	4b09      	ldr	r3, [pc, #36]	; (800ffd4 <xTaskRemoveFromEventList+0x78>)
 800ffae:	2201      	movs	r2, #1
 800ffb0:	601a      	str	r2, [r3, #0]
		xReturn = pdTRUE;
 800ffb2:	3001      	adds	r0, #1
}
 800ffb4:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( pxUnblockedTCB );
 800ffb6:	b672      	cpsid	i
 800ffb8:	e7fe      	b.n	800ffb8 <xTaskRemoveFromEventList+0x5c>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ffba:	0029      	movs	r1, r5
 800ffbc:	4806      	ldr	r0, [pc, #24]	; (800ffd8 <xTaskRemoveFromEventList+0x7c>)
 800ffbe:	f7fe ff97 	bl	800eef0 <vListInsertEnd>
 800ffc2:	e7ec      	b.n	800ff9e <xTaskRemoveFromEventList+0x42>
 800ffc4:	20001b20 	.word	0x20001b20
 800ffc8:	20001b2c 	.word	0x20001b2c
 800ffcc:	20001a88 	.word	0x20001a88
 800ffd0:	20001a7c 	.word	0x20001a7c
 800ffd4:	20001ba0 	.word	0x20001ba0
 800ffd8:	20001b5c 	.word	0x20001b5c

0800ffdc <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
 800ffdc:	2800      	cmp	r0, #0
 800ffde:	d006      	beq.n	800ffee <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ffe0:	4b04      	ldr	r3, [pc, #16]	; (800fff4 <vTaskSetTimeOutState+0x18>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ffe6:	4b04      	ldr	r3, [pc, #16]	; (800fff8 <vTaskSetTimeOutState+0x1c>)
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	6043      	str	r3, [r0, #4]
}
 800ffec:	4770      	bx	lr
	configASSERT( pxTimeOut );
 800ffee:	b672      	cpsid	i
 800fff0:	e7fe      	b.n	800fff0 <vTaskSetTimeOutState+0x14>
 800fff2:	46c0      	nop			; (mov r8, r8)
 800fff4:	20001b58 	.word	0x20001b58
 800fff8:	20001b9c 	.word	0x20001b9c

0800fffc <xTaskCheckForTimeOut>:
{
 800fffc:	b570      	push	{r4, r5, r6, lr}
 800fffe:	0004      	movs	r4, r0
 8010000:	000d      	movs	r5, r1
	configASSERT( pxTimeOut );
 8010002:	2800      	cmp	r0, #0
 8010004:	d01e      	beq.n	8010044 <xTaskCheckForTimeOut+0x48>
	configASSERT( pxTicksToWait );
 8010006:	2900      	cmp	r1, #0
 8010008:	d01e      	beq.n	8010048 <xTaskCheckForTimeOut+0x4c>
	taskENTER_CRITICAL();
 801000a:	f000 fc7d 	bl	8010908 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 801000e:	4b12      	ldr	r3, [pc, #72]	; (8010058 <xTaskCheckForTimeOut+0x5c>)
 8010010:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8010012:	682b      	ldr	r3, [r5, #0]
 8010014:	1c59      	adds	r1, r3, #1
 8010016:	d019      	beq.n	801004c <xTaskCheckForTimeOut+0x50>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010018:	4910      	ldr	r1, [pc, #64]	; (801005c <xTaskCheckForTimeOut+0x60>)
 801001a:	6809      	ldr	r1, [r1, #0]
 801001c:	6820      	ldr	r0, [r4, #0]
 801001e:	4288      	cmp	r0, r1
 8010020:	d003      	beq.n	801002a <xTaskCheckForTimeOut+0x2e>
			xReturn = pdTRUE;
 8010022:	2601      	movs	r6, #1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010024:	6861      	ldr	r1, [r4, #4]
 8010026:	4291      	cmp	r1, r2
 8010028:	d911      	bls.n	801004e <xTaskCheckForTimeOut+0x52>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 801002a:	6861      	ldr	r1, [r4, #4]
 801002c:	1a50      	subs	r0, r2, r1
			xReturn = pdTRUE;
 801002e:	2601      	movs	r6, #1
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8010030:	4283      	cmp	r3, r0
 8010032:	d90c      	bls.n	801004e <xTaskCheckForTimeOut+0x52>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8010034:	1a9b      	subs	r3, r3, r2
 8010036:	185b      	adds	r3, r3, r1
 8010038:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 801003a:	0020      	movs	r0, r4
 801003c:	f7ff ffce 	bl	800ffdc <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8010040:	2600      	movs	r6, #0
 8010042:	e004      	b.n	801004e <xTaskCheckForTimeOut+0x52>
	configASSERT( pxTimeOut );
 8010044:	b672      	cpsid	i
 8010046:	e7fe      	b.n	8010046 <xTaskCheckForTimeOut+0x4a>
	configASSERT( pxTicksToWait );
 8010048:	b672      	cpsid	i
 801004a:	e7fe      	b.n	801004a <xTaskCheckForTimeOut+0x4e>
				xReturn = pdFALSE;
 801004c:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 801004e:	f000 fc67 	bl	8010920 <vPortExitCritical>
}
 8010052:	0030      	movs	r0, r6
 8010054:	bd70      	pop	{r4, r5, r6, pc}
 8010056:	46c0      	nop			; (mov r8, r8)
 8010058:	20001b9c 	.word	0x20001b9c
 801005c:	20001b58 	.word	0x20001b58

08010060 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8010060:	4b01      	ldr	r3, [pc, #4]	; (8010068 <vTaskMissedYield+0x8>)
 8010062:	2201      	movs	r2, #1
 8010064:	601a      	str	r2, [r3, #0]
}
 8010066:	4770      	bx	lr
 8010068:	20001ba0 	.word	0x20001ba0

0801006c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 801006c:	4b05      	ldr	r3, [pc, #20]	; (8010084 <xTaskGetSchedulerState+0x18>)
 801006e:	681b      	ldr	r3, [r3, #0]
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010070:	2001      	movs	r0, #1
		if( xSchedulerRunning == pdFALSE )
 8010072:	2b00      	cmp	r3, #0
 8010074:	d004      	beq.n	8010080 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010076:	4b04      	ldr	r3, [pc, #16]	; (8010088 <xTaskGetSchedulerState+0x1c>)
 8010078:	6818      	ldr	r0, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 801007a:	4243      	negs	r3, r0
 801007c:	4158      	adcs	r0, r3
 801007e:	0040      	lsls	r0, r0, #1
	}
 8010080:	4770      	bx	lr
 8010082:	46c0      	nop			; (mov r8, r8)
 8010084:	20001b70 	.word	0x20001b70
 8010088:	20001b20 	.word	0x20001b20

0801008c <vTaskPriorityInherit>:
	{
 801008c:	b570      	push	{r4, r5, r6, lr}
 801008e:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 8010090:	d01a      	beq.n	80100c8 <vTaskPriorityInherit+0x3c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010092:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8010094:	4b19      	ldr	r3, [pc, #100]	; (80100fc <vTaskPriorityInherit+0x70>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801009a:	429a      	cmp	r2, r3
 801009c:	d214      	bcs.n	80100c8 <vTaskPriorityInherit+0x3c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801009e:	6983      	ldr	r3, [r0, #24]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	db05      	blt.n	80100b0 <vTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100a4:	4b15      	ldr	r3, [pc, #84]	; (80100fc <vTaskPriorityInherit+0x70>)
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80100aa:	2307      	movs	r3, #7
 80100ac:	1a5b      	subs	r3, r3, r1
 80100ae:	6183      	str	r3, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 80100b0:	0093      	lsls	r3, r2, #2
 80100b2:	189b      	adds	r3, r3, r2
 80100b4:	009b      	lsls	r3, r3, #2
 80100b6:	4a12      	ldr	r2, [pc, #72]	; (8010100 <vTaskPriorityInherit+0x74>)
 80100b8:	189b      	adds	r3, r3, r2
 80100ba:	6962      	ldr	r2, [r4, #20]
 80100bc:	429a      	cmp	r2, r3
 80100be:	d004      	beq.n	80100ca <vTaskPriorityInherit+0x3e>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80100c0:	4b0e      	ldr	r3, [pc, #56]	; (80100fc <vTaskPriorityInherit+0x70>)
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100c6:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 80100c8:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80100ca:	1d25      	adds	r5, r4, #4
 80100cc:	0028      	movs	r0, r5
 80100ce:	f7fe ff31 	bl	800ef34 <uxListRemove>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80100d2:	4b0a      	ldr	r3, [pc, #40]	; (80100fc <vTaskPriorityInherit+0x70>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100d8:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80100da:	4a0a      	ldr	r2, [pc, #40]	; (8010104 <vTaskPriorityInherit+0x78>)
 80100dc:	6812      	ldr	r2, [r2, #0]
 80100de:	4293      	cmp	r3, r2
 80100e0:	d808      	bhi.n	80100f4 <vTaskPriorityInherit+0x68>
 80100e2:	0098      	lsls	r0, r3, #2
 80100e4:	18c0      	adds	r0, r0, r3
 80100e6:	0080      	lsls	r0, r0, #2
 80100e8:	4b05      	ldr	r3, [pc, #20]	; (8010100 <vTaskPriorityInherit+0x74>)
 80100ea:	18c0      	adds	r0, r0, r3
 80100ec:	0029      	movs	r1, r5
 80100ee:	f7fe feff 	bl	800eef0 <vListInsertEnd>
	}
 80100f2:	e7e9      	b.n	80100c8 <vTaskPriorityInherit+0x3c>
					prvAddTaskToReadyList( pxTCB );
 80100f4:	4a03      	ldr	r2, [pc, #12]	; (8010104 <vTaskPriorityInherit+0x78>)
 80100f6:	6013      	str	r3, [r2, #0]
 80100f8:	e7f3      	b.n	80100e2 <vTaskPriorityInherit+0x56>
 80100fa:	46c0      	nop			; (mov r8, r8)
 80100fc:	20001a7c 	.word	0x20001a7c
 8010100:	20001a88 	.word	0x20001a88
 8010104:	20001b2c 	.word	0x20001b2c

08010108 <xTaskPriorityDisinherit>:
	{
 8010108:	b570      	push	{r4, r5, r6, lr}
 801010a:	1e04      	subs	r4, r0, #0
		if( pxMutexHolder != NULL )
 801010c:	d02c      	beq.n	8010168 <xTaskPriorityDisinherit+0x60>
			configASSERT( pxTCB == pxCurrentTCB );
 801010e:	4b18      	ldr	r3, [pc, #96]	; (8010170 <xTaskPriorityDisinherit+0x68>)
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	4283      	cmp	r3, r0
 8010114:	d001      	beq.n	801011a <xTaskPriorityDisinherit+0x12>
 8010116:	b672      	cpsid	i
 8010118:	e7fe      	b.n	8010118 <xTaskPriorityDisinherit+0x10>
			configASSERT( pxTCB->uxMutexesHeld );
 801011a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 801011c:	2b00      	cmp	r3, #0
 801011e:	d101      	bne.n	8010124 <xTaskPriorityDisinherit+0x1c>
 8010120:	b672      	cpsid	i
 8010122:	e7fe      	b.n	8010122 <xTaskPriorityDisinherit+0x1a>
			( pxTCB->uxMutexesHeld )--;
 8010124:	3b01      	subs	r3, #1
 8010126:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010128:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 801012a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 801012c:	428a      	cmp	r2, r1
 801012e:	d01d      	beq.n	801016c <xTaskPriorityDisinherit+0x64>
	BaseType_t xReturn = pdFALSE;
 8010130:	2000      	movs	r0, #0
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010132:	2b00      	cmp	r3, #0
 8010134:	d119      	bne.n	801016a <xTaskPriorityDisinherit+0x62>
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8010136:	1d25      	adds	r5, r4, #4
 8010138:	0028      	movs	r0, r5
 801013a:	f7fe fefb 	bl	800ef34 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801013e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8010140:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010142:	2207      	movs	r2, #7
 8010144:	1ad2      	subs	r2, r2, r3
 8010146:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8010148:	4a0a      	ldr	r2, [pc, #40]	; (8010174 <xTaskPriorityDisinherit+0x6c>)
 801014a:	6812      	ldr	r2, [r2, #0]
 801014c:	4293      	cmp	r3, r2
 801014e:	d901      	bls.n	8010154 <xTaskPriorityDisinherit+0x4c>
 8010150:	4a08      	ldr	r2, [pc, #32]	; (8010174 <xTaskPriorityDisinherit+0x6c>)
 8010152:	6013      	str	r3, [r2, #0]
 8010154:	0098      	lsls	r0, r3, #2
 8010156:	18c0      	adds	r0, r0, r3
 8010158:	0080      	lsls	r0, r0, #2
 801015a:	4b07      	ldr	r3, [pc, #28]	; (8010178 <xTaskPriorityDisinherit+0x70>)
 801015c:	18c0      	adds	r0, r0, r3
 801015e:	0029      	movs	r1, r5
 8010160:	f7fe fec6 	bl	800eef0 <vListInsertEnd>
					xReturn = pdTRUE;
 8010164:	2001      	movs	r0, #1
 8010166:	e000      	b.n	801016a <xTaskPriorityDisinherit+0x62>
	BaseType_t xReturn = pdFALSE;
 8010168:	2000      	movs	r0, #0
	}
 801016a:	bd70      	pop	{r4, r5, r6, pc}
	BaseType_t xReturn = pdFALSE;
 801016c:	2000      	movs	r0, #0
 801016e:	e7fc      	b.n	801016a <xTaskPriorityDisinherit+0x62>
 8010170:	20001a7c 	.word	0x20001a7c
 8010174:	20001b2c 	.word	0x20001b2c
 8010178:	20001a88 	.word	0x20001a88

0801017c <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 801017c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801017e:	46ce      	mov	lr, r9
 8010180:	4647      	mov	r7, r8
 8010182:	b580      	push	{r7, lr}
 8010184:	b085      	sub	sp, #20
 8010186:	0004      	movs	r4, r0
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 8010188:	2300      	movs	r3, #0
 801018a:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 801018c:	4b30      	ldr	r3, [pc, #192]	; (8010250 <vTaskList+0xd4>)
 801018e:	681a      	ldr	r2, [r3, #0]
 8010190:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 8010192:	6818      	ldr	r0, [r3, #0]
 8010194:	0140      	lsls	r0, r0, #5
 8010196:	f000 fc39 	bl	8010a0c <pvPortMalloc>
 801019a:	1e05      	subs	r5, r0, #0

		if( pxTaskStatusArray != NULL )
 801019c:	d053      	beq.n	8010246 <vTaskList+0xca>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 801019e:	9903      	ldr	r1, [sp, #12]
 80101a0:	2200      	movs	r2, #0
 80101a2:	f7ff fdc9 	bl	800fd38 <uxTaskGetSystemState>
 80101a6:	9003      	str	r0, [sp, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 80101a8:	2300      	movs	r3, #0
 80101aa:	9302      	str	r3, [sp, #8]
 80101ac:	9a02      	ldr	r2, [sp, #8]
 80101ae:	9b03      	ldr	r3, [sp, #12]
 80101b0:	429a      	cmp	r2, r3
 80101b2:	d245      	bcs.n	8010240 <vTaskList+0xc4>
										break;

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
										break;

					case eDeleted:		cStatus = tskDELETED_CHAR;
 80101b4:	2343      	movs	r3, #67	; 0x43
 80101b6:	4698      	mov	r8, r3
				switch( pxTaskStatusArray[ x ].eCurrentState )
 80101b8:	2741      	movs	r7, #65	; 0x41
				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 80101ba:	4b26      	ldr	r3, [pc, #152]	; (8010254 <vTaskList+0xd8>)
 80101bc:	4699      	mov	r9, r3
 80101be:	e02a      	b.n	8010216 <vTaskList+0x9a>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 80101c0:	3a02      	subs	r2, #2
 80101c2:	1e53      	subs	r3, r2, #1
 80101c4:	419a      	sbcs	r2, r3
 80101c6:	4256      	negs	r6, r2
 80101c8:	43be      	bics	r6, r7
 80101ca:	3642      	adds	r6, #66	; 0x42
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80101cc:	9b02      	ldr	r3, [sp, #8]
 80101ce:	015b      	lsls	r3, r3, #5
 80101d0:	18eb      	adds	r3, r5, r3
 80101d2:	6859      	ldr	r1, [r3, #4]
 80101d4:	0020      	movs	r0, r4
 80101d6:	f7ff fa91 	bl	800f6fc <prvWriteNameToBuffer>
 80101da:	0004      	movs	r4, r0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
 80101dc:	9b02      	ldr	r3, [sp, #8]
 80101de:	9a02      	ldr	r2, [sp, #8]
 80101e0:	9902      	ldr	r1, [sp, #8]
 80101e2:	015b      	lsls	r3, r3, #5
 80101e4:	18eb      	adds	r3, r5, r3
 80101e6:	691b      	ldr	r3, [r3, #16]
 80101e8:	0149      	lsls	r1, r1, #5
 80101ea:	1869      	adds	r1, r5, r1
 80101ec:	6889      	ldr	r1, [r1, #8]
 80101ee:	9101      	str	r1, [sp, #4]
 80101f0:	0152      	lsls	r2, r2, #5
 80101f2:	18aa      	adds	r2, r5, r2
 80101f4:	8b92      	ldrh	r2, [r2, #28]
 80101f6:	9200      	str	r2, [sp, #0]
 80101f8:	0032      	movs	r2, r6
 80101fa:	4649      	mov	r1, r9
 80101fc:	f004 fbe2 	bl	80149c4 <sprintf>
				pcWriteBuffer += strlen( pcWriteBuffer );
 8010200:	0020      	movs	r0, r4
 8010202:	f7ef ff89 	bl	8000118 <strlen>
 8010206:	1824      	adds	r4, r4, r0
			for( x = 0; x < uxArraySize; x++ )
 8010208:	9b02      	ldr	r3, [sp, #8]
 801020a:	3301      	adds	r3, #1
 801020c:	9302      	str	r3, [sp, #8]
 801020e:	9a02      	ldr	r2, [sp, #8]
 8010210:	9b03      	ldr	r3, [sp, #12]
 8010212:	429a      	cmp	r2, r3
 8010214:	d214      	bcs.n	8010240 <vTaskList+0xc4>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8010216:	9b02      	ldr	r3, [sp, #8]
 8010218:	015b      	lsls	r3, r3, #5
 801021a:	18eb      	adds	r3, r5, r3
 801021c:	7b1a      	ldrb	r2, [r3, #12]
 801021e:	2a03      	cmp	r2, #3
 8010220:	d00c      	beq.n	801023c <vTaskList+0xc0>
 8010222:	d803      	bhi.n	801022c <vTaskList+0xb0>
					case eReady:		cStatus = tskREADY_CHAR;
 8010224:	2652      	movs	r6, #82	; 0x52
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8010226:	2a01      	cmp	r2, #1
 8010228:	d1ca      	bne.n	80101c0 <vTaskList+0x44>
 801022a:	e7cf      	b.n	80101cc <vTaskList+0x50>
					case eDeleted:		cStatus = tskDELETED_CHAR;
 801022c:	3a04      	subs	r2, #4
 801022e:	1e53      	subs	r3, r2, #1
 8010230:	419a      	sbcs	r2, r3
 8010232:	4256      	negs	r6, r2
 8010234:	4643      	mov	r3, r8
 8010236:	439e      	bics	r6, r3
 8010238:	3644      	adds	r6, #68	; 0x44
 801023a:	e7c7      	b.n	80101cc <vTaskList+0x50>
					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 801023c:	2653      	movs	r6, #83	; 0x53
 801023e:	e7c5      	b.n	80101cc <vTaskList+0x50>
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 8010240:	0028      	movs	r0, r5
 8010242:	f000 fc75 	bl	8010b30 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010246:	b005      	add	sp, #20
 8010248:	bcc0      	pop	{r6, r7}
 801024a:	46b9      	mov	r9, r7
 801024c:	46b0      	mov	r8, r6
 801024e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010250:	20001b18 	.word	0x20001b18
 8010254:	0801d5e4 	.word	0x0801d5e4

08010258 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 8010258:	b5f0      	push	{r4, r5, r6, r7, lr}
 801025a:	46c6      	mov	lr, r8
 801025c:	b500      	push	{lr}
 801025e:	b084      	sub	sp, #16
 8010260:	0004      	movs	r4, r0
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = 0x00;
 8010262:	2300      	movs	r3, #0
 8010264:	7003      	strb	r3, [r0, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8010266:	4b2a      	ldr	r3, [pc, #168]	; (8010310 <vTaskGetRunTimeStats+0xb8>)
 8010268:	681a      	ldr	r2, [r3, #0]
 801026a:	9203      	str	r2, [sp, #12]

		/* Allocate an array index for each task. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
 801026c:	6818      	ldr	r0, [r3, #0]
 801026e:	0140      	lsls	r0, r0, #5
 8010270:	f000 fbcc 	bl	8010a0c <pvPortMalloc>
 8010274:	1e07      	subs	r7, r0, #0

		if( pxTaskStatusArray != NULL )
 8010276:	d015      	beq.n	80102a4 <vTaskGetRunTimeStats+0x4c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8010278:	9903      	ldr	r1, [sp, #12]
 801027a:	aa01      	add	r2, sp, #4
 801027c:	f7ff fd5c 	bl	800fd38 <uxTaskGetSystemState>
 8010280:	9003      	str	r0, [sp, #12]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 8010282:	9d01      	ldr	r5, [sp, #4]
 8010284:	2164      	movs	r1, #100	; 0x64
 8010286:	0028      	movs	r0, r5
 8010288:	f7ef ff62 	bl	8000150 <__udivsi3>
 801028c:	9001      	str	r0, [sp, #4]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0 )
 801028e:	2d63      	cmp	r5, #99	; 0x63
 8010290:	d905      	bls.n	801029e <vTaskGetRunTimeStats+0x46>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 8010292:	2300      	movs	r3, #0
 8010294:	9302      	str	r3, [sp, #8]
 8010296:	9a02      	ldr	r2, [sp, #8]
 8010298:	9b03      	ldr	r3, [sp, #12]
 801029a:	429a      	cmp	r2, r3
 801029c:	d318      	bcc.n	80102d0 <vTaskGetRunTimeStats+0x78>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again. */
			vPortFree( pxTaskStatusArray );
 801029e:	0038      	movs	r0, r7
 80102a0:	f000 fc46 	bl	8010b30 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80102a4:	b004      	add	sp, #16
 80102a6:	bc80      	pop	{r7}
 80102a8:	46b8      	mov	r8, r7
 80102aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
 80102ac:	9b02      	ldr	r3, [sp, #8]
 80102ae:	015b      	lsls	r3, r3, #5
 80102b0:	18fb      	adds	r3, r7, r3
 80102b2:	699a      	ldr	r2, [r3, #24]
 80102b4:	4917      	ldr	r1, [pc, #92]	; (8010314 <vTaskGetRunTimeStats+0xbc>)
 80102b6:	f004 fb85 	bl	80149c4 <sprintf>
					pcWriteBuffer += strlen( pcWriteBuffer );
 80102ba:	0020      	movs	r0, r4
 80102bc:	f7ef ff2c 	bl	8000118 <strlen>
 80102c0:	1824      	adds	r4, r4, r0
				for( x = 0; x < uxArraySize; x++ )
 80102c2:	9b02      	ldr	r3, [sp, #8]
 80102c4:	3301      	adds	r3, #1
 80102c6:	9302      	str	r3, [sp, #8]
 80102c8:	9a02      	ldr	r2, [sp, #8]
 80102ca:	9b03      	ldr	r3, [sp, #12]
 80102cc:	429a      	cmp	r2, r3
 80102ce:	d2e6      	bcs.n	801029e <vTaskGetRunTimeStats+0x46>
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 80102d0:	9b02      	ldr	r3, [sp, #8]
 80102d2:	015b      	lsls	r3, r3, #5
 80102d4:	18fb      	adds	r3, r7, r3
 80102d6:	699e      	ldr	r6, [r3, #24]
 80102d8:	9d01      	ldr	r5, [sp, #4]
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80102da:	9b02      	ldr	r3, [sp, #8]
 80102dc:	015b      	lsls	r3, r3, #5
 80102de:	18fb      	adds	r3, r7, r3
 80102e0:	6859      	ldr	r1, [r3, #4]
 80102e2:	0020      	movs	r0, r4
 80102e4:	f7ff fa0a 	bl	800f6fc <prvWriteNameToBuffer>
 80102e8:	0004      	movs	r4, r0
					if( ulStatsAsPercentage > 0UL )
 80102ea:	42ae      	cmp	r6, r5
 80102ec:	d3de      	bcc.n	80102ac <vTaskGetRunTimeStats+0x54>
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 80102ee:	9b02      	ldr	r3, [sp, #8]
 80102f0:	4698      	mov	r8, r3
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 80102f2:	0029      	movs	r1, r5
 80102f4:	0030      	movs	r0, r6
 80102f6:	f7ef ff2b 	bl	8000150 <__udivsi3>
 80102fa:	0003      	movs	r3, r0
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
 80102fc:	4642      	mov	r2, r8
 80102fe:	0152      	lsls	r2, r2, #5
 8010300:	18ba      	adds	r2, r7, r2
 8010302:	6992      	ldr	r2, [r2, #24]
 8010304:	4904      	ldr	r1, [pc, #16]	; (8010318 <vTaskGetRunTimeStats+0xc0>)
 8010306:	0020      	movs	r0, r4
 8010308:	f004 fb5c 	bl	80149c4 <sprintf>
 801030c:	e7d5      	b.n	80102ba <vTaskGetRunTimeStats+0x62>
 801030e:	46c0      	nop			; (mov r8, r8)
 8010310:	20001b18 	.word	0x20001b18
 8010314:	0801d600 	.word	0x0801d600
 8010318:	0801d5f4 	.word	0x0801d5f4

0801031c <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801031c:	4b05      	ldr	r3, [pc, #20]	; (8010334 <pvTaskIncrementMutexHeldCount+0x18>)
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d004      	beq.n	801032e <pvTaskIncrementMutexHeldCount+0x12>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010324:	4b03      	ldr	r3, [pc, #12]	; (8010334 <pvTaskIncrementMutexHeldCount+0x18>)
 8010326:	681a      	ldr	r2, [r3, #0]
 8010328:	6d13      	ldr	r3, [r2, #80]	; 0x50
 801032a:	3301      	adds	r3, #1
 801032c:	6513      	str	r3, [r2, #80]	; 0x50
		}

		return pxCurrentTCB;
 801032e:	4b01      	ldr	r3, [pc, #4]	; (8010334 <pvTaskIncrementMutexHeldCount+0x18>)
 8010330:	6818      	ldr	r0, [r3, #0]
	}
 8010332:	4770      	bx	lr
 8010334:	20001a7c 	.word	0x20001a7c

08010338 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8010338:	b570      	push	{r4, r5, r6, lr}
 801033a:	0004      	movs	r4, r0
 801033c:	000d      	movs	r5, r1
	TickType_t xTimeToWake;
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 801033e:	f000 fae3 	bl	8010908 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8010342:	4b20      	ldr	r3, [pc, #128]	; (80103c4 <ulTaskNotifyTake+0x8c>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010348:	2b00      	cmp	r3, #0
 801034a:	d106      	bne.n	801035a <ulTaskNotifyTake+0x22>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->eNotifyState = eWaitingNotification;
 801034c:	4b1d      	ldr	r3, [pc, #116]	; (80103c4 <ulTaskNotifyTake+0x8c>)
 801034e:	681a      	ldr	r2, [r3, #0]
 8010350:	235c      	movs	r3, #92	; 0x5c
 8010352:	2101      	movs	r1, #1
 8010354:	54d1      	strb	r1, [r2, r3]

				if( xTicksToWait > ( TickType_t ) 0 )
 8010356:	2d00      	cmp	r5, #0
 8010358:	d117      	bne.n	801038a <ulTaskNotifyTake+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801035a:	f000 fae1 	bl	8010920 <vPortExitCritical>

		taskENTER_CRITICAL();
 801035e:	f000 fad3 	bl	8010908 <vPortEnterCritical>
		{
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8010362:	4b18      	ldr	r3, [pc, #96]	; (80103c4 <ulTaskNotifyTake+0x8c>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	6d9d      	ldr	r5, [r3, #88]	; 0x58

			if( ulReturn != 0UL )
 8010368:	2d00      	cmp	r5, #0
 801036a:	d005      	beq.n	8010378 <ulTaskNotifyTake+0x40>
			{
				if( xClearCountOnExit != pdFALSE )
 801036c:	2c00      	cmp	r4, #0
 801036e:	d022      	beq.n	80103b6 <ulTaskNotifyTake+0x7e>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8010370:	4b14      	ldr	r3, [pc, #80]	; (80103c4 <ulTaskNotifyTake+0x8c>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	2200      	movs	r2, #0
 8010376:	659a      	str	r2, [r3, #88]	; 0x58
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
 8010378:	4b12      	ldr	r3, [pc, #72]	; (80103c4 <ulTaskNotifyTake+0x8c>)
 801037a:	681a      	ldr	r2, [r3, #0]
 801037c:	235c      	movs	r3, #92	; 0x5c
 801037e:	2100      	movs	r1, #0
 8010380:	54d1      	strb	r1, [r2, r3]
		}
		taskEXIT_CRITICAL();
 8010382:	f000 facd 	bl	8010920 <vPortExitCritical>

		return ulReturn;
	}
 8010386:	0028      	movs	r0, r5
 8010388:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 801038a:	4b0e      	ldr	r3, [pc, #56]	; (80103c4 <ulTaskNotifyTake+0x8c>)
 801038c:	6818      	ldr	r0, [r3, #0]
 801038e:	3004      	adds	r0, #4
 8010390:	f7fe fdd0 	bl	800ef34 <uxListRemove>
						if( xTicksToWait == portMAX_DELAY )
 8010394:	1c6b      	adds	r3, r5, #1
 8010396:	d007      	beq.n	80103a8 <ulTaskNotifyTake+0x70>
							xTimeToWake = xTickCount + xTicksToWait;
 8010398:	4b0b      	ldr	r3, [pc, #44]	; (80103c8 <ulTaskNotifyTake+0x90>)
 801039a:	6818      	ldr	r0, [r3, #0]
 801039c:	1940      	adds	r0, r0, r5
							prvAddCurrentTaskToDelayedList( xTimeToWake );
 801039e:	f7ff f983 	bl	800f6a8 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 80103a2:	f000 faa5 	bl	80108f0 <vPortYield>
 80103a6:	e7d8      	b.n	801035a <ulTaskNotifyTake+0x22>
							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80103a8:	4b06      	ldr	r3, [pc, #24]	; (80103c4 <ulTaskNotifyTake+0x8c>)
 80103aa:	6819      	ldr	r1, [r3, #0]
 80103ac:	3104      	adds	r1, #4
 80103ae:	4807      	ldr	r0, [pc, #28]	; (80103cc <ulTaskNotifyTake+0x94>)
 80103b0:	f7fe fd9e 	bl	800eef0 <vListInsertEnd>
 80103b4:	e7f5      	b.n	80103a2 <ulTaskNotifyTake+0x6a>
					( pxCurrentTCB->ulNotifiedValue )--;
 80103b6:	4b03      	ldr	r3, [pc, #12]	; (80103c4 <ulTaskNotifyTake+0x8c>)
 80103b8:	681a      	ldr	r2, [r3, #0]
 80103ba:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80103bc:	3b01      	subs	r3, #1
 80103be:	6593      	str	r3, [r2, #88]	; 0x58
 80103c0:	e7da      	b.n	8010378 <ulTaskNotifyTake+0x40>
 80103c2:	46c0      	nop			; (mov r8, r8)
 80103c4:	20001a7c 	.word	0x20001a7c
 80103c8:	20001b9c 	.word	0x20001b9c
 80103cc:	20001b74 	.word	0x20001b74

080103d0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80103d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103d2:	0004      	movs	r4, r0
 80103d4:	000e      	movs	r6, r1
 80103d6:	0015      	movs	r5, r2
 80103d8:	001f      	movs	r7, r3
	TCB_t * pxTCB;
	eNotifyValue eOriginalNotifyState;
	BaseType_t xReturn = pdPASS;

		configASSERT( xTaskToNotify );
 80103da:	2800      	cmp	r0, #0
 80103dc:	d015      	beq.n	801040a <xTaskGenericNotify+0x3a>
		pxTCB = ( TCB_t * ) xTaskToNotify;

		taskENTER_CRITICAL();
 80103de:	f000 fa93 	bl	8010908 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80103e2:	2f00      	cmp	r7, #0
 80103e4:	d001      	beq.n	80103ea <xTaskGenericNotify+0x1a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80103e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80103e8:	603b      	str	r3, [r7, #0]
			}

			eOriginalNotifyState = pxTCB->eNotifyState;
 80103ea:	225c      	movs	r2, #92	; 0x5c
 80103ec:	5ca3      	ldrb	r3, [r4, r2]
 80103ee:	b2db      	uxtb	r3, r3

			pxTCB->eNotifyState = eNotified;
 80103f0:	2102      	movs	r1, #2
 80103f2:	54a1      	strb	r1, [r4, r2]

			switch( eAction )
 80103f4:	2d03      	cmp	r5, #3
 80103f6:	d01a      	beq.n	801042e <xTaskGenericNotify+0x5e>
 80103f8:	d809      	bhi.n	801040e <xTaskGenericNotify+0x3e>
 80103fa:	2d01      	cmp	r5, #1
 80103fc:	d00d      	beq.n	801041a <xTaskGenericNotify+0x4a>
 80103fe:	2d02      	cmp	r5, #2
 8010400:	d10e      	bne.n	8010420 <xTaskGenericNotify+0x50>
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
					break;

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8010402:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8010404:	3201      	adds	r2, #1
 8010406:	65a2      	str	r2, [r4, #88]	; 0x58
					break;
 8010408:	e00a      	b.n	8010420 <xTaskGenericNotify+0x50>
		configASSERT( xTaskToNotify );
 801040a:	b672      	cpsid	i
 801040c:	e7fe      	b.n	801040c <xTaskGenericNotify+0x3c>
			switch( eAction )
 801040e:	2d04      	cmp	r5, #4
 8010410:	d106      	bne.n	8010420 <xTaskGenericNotify+0x50>
				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
					break;

				case eSetValueWithoutOverwrite :
					if( eOriginalNotifyState != eNotified )
 8010412:	2b02      	cmp	r3, #2
 8010414:	d02f      	beq.n	8010476 <xTaskGenericNotify+0xa6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8010416:	65a6      	str	r6, [r4, #88]	; 0x58
 8010418:	e002      	b.n	8010420 <xTaskGenericNotify+0x50>
					pxTCB->ulNotifiedValue |= ulValue;
 801041a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 801041c:	4316      	orrs	r6, r2
 801041e:	65a6      	str	r6, [r4, #88]	; 0x58
			}


			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( eOriginalNotifyState == eWaitingNotification )
 8010420:	2501      	movs	r5, #1
 8010422:	2b01      	cmp	r3, #1
 8010424:	d005      	beq.n	8010432 <xTaskGenericNotify+0x62>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010426:	f000 fa7b 	bl	8010920 <vPortExitCritical>

		return xReturn;
	}
 801042a:	0028      	movs	r0, r5
 801042c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxTCB->ulNotifiedValue = ulValue;
 801042e:	65a6      	str	r6, [r4, #88]	; 0x58
					break;
 8010430:	e7f6      	b.n	8010420 <xTaskGenericNotify+0x50>
				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8010432:	1d25      	adds	r5, r4, #4
 8010434:	0028      	movs	r0, r5
 8010436:	f7fe fd7d 	bl	800ef34 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801043a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801043c:	4a0f      	ldr	r2, [pc, #60]	; (801047c <xTaskGenericNotify+0xac>)
 801043e:	6812      	ldr	r2, [r2, #0]
 8010440:	4293      	cmp	r3, r2
 8010442:	d901      	bls.n	8010448 <xTaskGenericNotify+0x78>
 8010444:	4a0d      	ldr	r2, [pc, #52]	; (801047c <xTaskGenericNotify+0xac>)
 8010446:	6013      	str	r3, [r2, #0]
 8010448:	0098      	lsls	r0, r3, #2
 801044a:	18c0      	adds	r0, r0, r3
 801044c:	0080      	lsls	r0, r0, #2
 801044e:	4b0c      	ldr	r3, [pc, #48]	; (8010480 <xTaskGenericNotify+0xb0>)
 8010450:	18c0      	adds	r0, r0, r3
 8010452:	0029      	movs	r1, r5
 8010454:	f7fe fd4c 	bl	800eef0 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8010458:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801045a:	2b00      	cmp	r3, #0
 801045c:	d001      	beq.n	8010462 <xTaskGenericNotify+0x92>
 801045e:	b672      	cpsid	i
 8010460:	e7fe      	b.n	8010460 <xTaskGenericNotify+0x90>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010462:	4b08      	ldr	r3, [pc, #32]	; (8010484 <xTaskGenericNotify+0xb4>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8010468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801046a:	2501      	movs	r5, #1
 801046c:	429a      	cmp	r2, r3
 801046e:	d9da      	bls.n	8010426 <xTaskGenericNotify+0x56>
					taskYIELD_IF_USING_PREEMPTION();
 8010470:	f000 fa3e 	bl	80108f0 <vPortYield>
 8010474:	e7d7      	b.n	8010426 <xTaskGenericNotify+0x56>
						xReturn = pdFAIL;
 8010476:	2500      	movs	r5, #0
 8010478:	e7d5      	b.n	8010426 <xTaskGenericNotify+0x56>
 801047a:	46c0      	nop			; (mov r8, r8)
 801047c:	20001b2c 	.word	0x20001b2c
 8010480:	20001a88 	.word	0x20001a88
 8010484:	20001a7c 	.word	0x20001a7c

08010488 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010488:	b510      	push	{r4, lr}
 801048a:	0004      	movs	r4, r0
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801048c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801048e:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010490:	4291      	cmp	r1, r2
 8010492:	d80c      	bhi.n	80104ae <prvInsertTimerInActiveList+0x26>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8010494:	1ad2      	subs	r2, r2, r3
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010496:	2001      	movs	r0, #1
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
 8010498:	69a3      	ldr	r3, [r4, #24]
 801049a:	429a      	cmp	r2, r3
 801049c:	d300      	bcc.n	80104a0 <prvInsertTimerInActiveList+0x18>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 801049e:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80104a0:	1d21      	adds	r1, r4, #4
 80104a2:	4b09      	ldr	r3, [pc, #36]	; (80104c8 <prvInsertTimerInActiveList+0x40>)
 80104a4:	6818      	ldr	r0, [r3, #0]
 80104a6:	f7fe fd2e 	bl	800ef06 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80104aa:	2000      	movs	r0, #0
 80104ac:	e7f7      	b.n	801049e <prvInsertTimerInActiveList+0x16>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80104ae:	429a      	cmp	r2, r3
 80104b0:	d202      	bcs.n	80104b8 <prvInsertTimerInActiveList+0x30>
			xProcessTimerNow = pdTRUE;
 80104b2:	2001      	movs	r0, #1
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80104b4:	4299      	cmp	r1, r3
 80104b6:	d2f2      	bcs.n	801049e <prvInsertTimerInActiveList+0x16>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80104b8:	1d21      	adds	r1, r4, #4
 80104ba:	4b04      	ldr	r3, [pc, #16]	; (80104cc <prvInsertTimerInActiveList+0x44>)
 80104bc:	6818      	ldr	r0, [r3, #0]
 80104be:	f7fe fd22 	bl	800ef06 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80104c2:	2000      	movs	r0, #0
 80104c4:	e7eb      	b.n	801049e <prvInsertTimerInActiveList+0x16>
 80104c6:	46c0      	nop			; (mov r8, r8)
 80104c8:	20001ba8 	.word	0x20001ba8
 80104cc:	20001ba4 	.word	0x20001ba4

080104d0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80104d0:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80104d2:	f000 fa19 	bl	8010908 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80104d6:	4b11      	ldr	r3, [pc, #68]	; (801051c <prvCheckForValidListAndQueue+0x4c>)
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d002      	beq.n	80104e4 <prvCheckForValidListAndQueue+0x14>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80104de:	f000 fa1f 	bl	8010920 <vPortExitCritical>
}
 80104e2:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
 80104e4:	4d0e      	ldr	r5, [pc, #56]	; (8010520 <prvCheckForValidListAndQueue+0x50>)
 80104e6:	0028      	movs	r0, r5
 80104e8:	f7fe fcf4 	bl	800eed4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80104ec:	4c0d      	ldr	r4, [pc, #52]	; (8010524 <prvCheckForValidListAndQueue+0x54>)
 80104ee:	0020      	movs	r0, r4
 80104f0:	f7fe fcf0 	bl	800eed4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80104f4:	4b0c      	ldr	r3, [pc, #48]	; (8010528 <prvCheckForValidListAndQueue+0x58>)
 80104f6:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80104f8:	4b0c      	ldr	r3, [pc, #48]	; (801052c <prvCheckForValidListAndQueue+0x5c>)
 80104fa:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80104fc:	2200      	movs	r2, #0
 80104fe:	2110      	movs	r1, #16
 8010500:	2004      	movs	r0, #4
 8010502:	f7fe fdec 	bl	800f0de <xQueueGenericCreate>
 8010506:	4b05      	ldr	r3, [pc, #20]	; (801051c <prvCheckForValidListAndQueue+0x4c>)
 8010508:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
 801050a:	2800      	cmp	r0, #0
 801050c:	d003      	beq.n	8010516 <prvCheckForValidListAndQueue+0x46>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801050e:	4908      	ldr	r1, [pc, #32]	; (8010530 <prvCheckForValidListAndQueue+0x60>)
 8010510:	f7ff f828 	bl	800f564 <vQueueAddToRegistry>
 8010514:	e7e3      	b.n	80104de <prvCheckForValidListAndQueue+0xe>
			configASSERT( xTimerQueue );
 8010516:	b672      	cpsid	i
 8010518:	e7fe      	b.n	8010518 <prvCheckForValidListAndQueue+0x48>
 801051a:	46c0      	nop			; (mov r8, r8)
 801051c:	20001bd8 	.word	0x20001bd8
 8010520:	20001bac 	.word	0x20001bac
 8010524:	20001bc0 	.word	0x20001bc0
 8010528:	20001ba4 	.word	0x20001ba4
 801052c:	20001ba8 	.word	0x20001ba8
 8010530:	0801d620 	.word	0x0801d620

08010534 <xTimerCreateTimerTask>:
{
 8010534:	b500      	push	{lr}
 8010536:	b085      	sub	sp, #20
	prvCheckForValidListAndQueue();
 8010538:	f7ff ffca 	bl	80104d0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 801053c:	4b0a      	ldr	r3, [pc, #40]	; (8010568 <xTimerCreateTimerTask+0x34>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d00d      	beq.n	8010560 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
 8010544:	2300      	movs	r3, #0
 8010546:	9303      	str	r3, [sp, #12]
 8010548:	9302      	str	r3, [sp, #8]
 801054a:	9301      	str	r3, [sp, #4]
 801054c:	3303      	adds	r3, #3
 801054e:	9300      	str	r3, [sp, #0]
 8010550:	2300      	movs	r3, #0
 8010552:	22a0      	movs	r2, #160	; 0xa0
 8010554:	4905      	ldr	r1, [pc, #20]	; (801056c <xTimerCreateTimerTask+0x38>)
 8010556:	4806      	ldr	r0, [pc, #24]	; (8010570 <xTimerCreateTimerTask+0x3c>)
 8010558:	f7ff f8e6 	bl	800f728 <xTaskGenericCreate>
	configASSERT( xReturn );
 801055c:	2800      	cmp	r0, #0
 801055e:	d101      	bne.n	8010564 <xTimerCreateTimerTask+0x30>
 8010560:	b672      	cpsid	i
 8010562:	e7fe      	b.n	8010562 <xTimerCreateTimerTask+0x2e>
}
 8010564:	b005      	add	sp, #20
 8010566:	bd00      	pop	{pc}
 8010568:	20001bd8 	.word	0x20001bd8
 801056c:	0801d628 	.word	0x0801d628
 8010570:	080106bd 	.word	0x080106bd

08010574 <xTimerCreate>:
{
 8010574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010576:	46c6      	mov	lr, r8
 8010578:	b500      	push	{lr}
 801057a:	4680      	mov	r8, r0
 801057c:	000d      	movs	r5, r1
 801057e:	0017      	movs	r7, r2
 8010580:	001e      	movs	r6, r3
	if( xTimerPeriodInTicks == ( TickType_t ) 0U )
 8010582:	2900      	cmp	r1, #0
 8010584:	d014      	beq.n	80105b0 <xTimerCreate+0x3c>
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8010586:	202c      	movs	r0, #44	; 0x2c
 8010588:	f000 fa40 	bl	8010a0c <pvPortMalloc>
 801058c:	1e04      	subs	r4, r0, #0
		if( pxNewTimer != NULL )
 801058e:	d00b      	beq.n	80105a8 <xTimerCreate+0x34>
			prvCheckForValidListAndQueue();
 8010590:	f7ff ff9e 	bl	80104d0 <prvCheckForValidListAndQueue>
			pxNewTimer->pcTimerName = pcTimerName;
 8010594:	4643      	mov	r3, r8
 8010596:	6023      	str	r3, [r4, #0]
			pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8010598:	61a5      	str	r5, [r4, #24]
			pxNewTimer->uxAutoReload = uxAutoReload;
 801059a:	61e7      	str	r7, [r4, #28]
			pxNewTimer->pvTimerID = pvTimerID;
 801059c:	6226      	str	r6, [r4, #32]
			pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 801059e:	9b06      	ldr	r3, [sp, #24]
 80105a0:	6263      	str	r3, [r4, #36]	; 0x24
			vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80105a2:	1d20      	adds	r0, r4, #4
 80105a4:	f7fe fca1 	bl	800eeea <vListInitialiseItem>
}
 80105a8:	0020      	movs	r0, r4
 80105aa:	bc80      	pop	{r7}
 80105ac:	46b8      	mov	r8, r7
 80105ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80105b0:	b672      	cpsid	i
 80105b2:	e7fe      	b.n	80105b2 <xTimerCreate+0x3e>

080105b4 <xTimerGenericCommand>:
{
 80105b4:	b530      	push	{r4, r5, lr}
 80105b6:	b085      	sub	sp, #20
 80105b8:	0004      	movs	r4, r0
 80105ba:	001d      	movs	r5, r3
	if( xTimerQueue != NULL )
 80105bc:	4b12      	ldr	r3, [pc, #72]	; (8010608 <xTimerGenericCommand+0x54>)
 80105be:	6818      	ldr	r0, [r3, #0]
 80105c0:	2800      	cmp	r0, #0
 80105c2:	d01f      	beq.n	8010604 <xTimerGenericCommand+0x50>
		xMessage.xMessageID = xCommandID;
 80105c4:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80105c6:	9201      	str	r2, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80105c8:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80105ca:	2905      	cmp	r1, #5
 80105cc:	dc13      	bgt.n	80105f6 <xTimerGenericCommand+0x42>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80105ce:	f7ff fd4d 	bl	801006c <xTaskGetSchedulerState>
 80105d2:	2802      	cmp	r0, #2
 80105d4:	d007      	beq.n	80105e6 <xTimerGenericCommand+0x32>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80105d6:	4b0c      	ldr	r3, [pc, #48]	; (8010608 <xTimerGenericCommand+0x54>)
 80105d8:	6818      	ldr	r0, [r3, #0]
 80105da:	2300      	movs	r3, #0
 80105dc:	2200      	movs	r2, #0
 80105de:	4669      	mov	r1, sp
 80105e0:	f7fe fdb6 	bl	800f150 <xQueueGenericSend>
 80105e4:	e00c      	b.n	8010600 <xTimerGenericCommand+0x4c>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80105e6:	4b08      	ldr	r3, [pc, #32]	; (8010608 <xTimerGenericCommand+0x54>)
 80105e8:	6818      	ldr	r0, [r3, #0]
 80105ea:	2300      	movs	r3, #0
 80105ec:	9a08      	ldr	r2, [sp, #32]
 80105ee:	4669      	mov	r1, sp
 80105f0:	f7fe fdae 	bl	800f150 <xQueueGenericSend>
 80105f4:	e004      	b.n	8010600 <xTimerGenericCommand+0x4c>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80105f6:	2300      	movs	r3, #0
 80105f8:	002a      	movs	r2, r5
 80105fa:	4669      	mov	r1, sp
 80105fc:	f7fe fe44 	bl	800f288 <xQueueGenericSendFromISR>
}
 8010600:	b005      	add	sp, #20
 8010602:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 8010604:	2000      	movs	r0, #0
	return xReturn;
 8010606:	e7fb      	b.n	8010600 <xTimerGenericCommand+0x4c>
 8010608:	20001bd8 	.word	0x20001bd8

0801060c <prvSampleTimeNow>:
{
 801060c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801060e:	46d6      	mov	lr, sl
 8010610:	464f      	mov	r7, r9
 8010612:	4646      	mov	r6, r8
 8010614:	b5c0      	push	{r6, r7, lr}
 8010616:	b084      	sub	sp, #16
 8010618:	0006      	movs	r6, r0
	xTimeNow = xTaskGetTickCount();
 801061a:	f7ff fa1f 	bl	800fa5c <xTaskGetTickCount>
 801061e:	0004      	movs	r4, r0
	if( xTimeNow < xLastTime )
 8010620:	4b23      	ldr	r3, [pc, #140]	; (80106b0 <prvSampleTimeNow+0xa4>)
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	4283      	cmp	r3, r0
 8010626:	d80a      	bhi.n	801063e <prvSampleTimeNow+0x32>
		*pxTimerListsWereSwitched = pdFALSE;
 8010628:	2300      	movs	r3, #0
 801062a:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 801062c:	4b20      	ldr	r3, [pc, #128]	; (80106b0 <prvSampleTimeNow+0xa4>)
 801062e:	601c      	str	r4, [r3, #0]
}
 8010630:	0020      	movs	r0, r4
 8010632:	b004      	add	sp, #16
 8010634:	bce0      	pop	{r5, r6, r7}
 8010636:	46ba      	mov	sl, r7
 8010638:	46b1      	mov	r9, r6
 801063a:	46a8      	mov	r8, r5
 801063c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801063e:	4b1d      	ldr	r3, [pc, #116]	; (80106b4 <prvSampleTimeNow+0xa8>)
 8010640:	4698      	mov	r8, r3
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010642:	2300      	movs	r3, #0
 8010644:	4699      	mov	r9, r3
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010646:	4643      	mov	r3, r8
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	681a      	ldr	r2, [r3, #0]
 801064c:	2a00      	cmp	r2, #0
 801064e:	d026      	beq.n	801069e <prvSampleTimeNow+0x92>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010650:	68db      	ldr	r3, [r3, #12]
 8010652:	681a      	ldr	r2, [r3, #0]
 8010654:	4692      	mov	sl, r2
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010656:	68dd      	ldr	r5, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010658:	1d2f      	adds	r7, r5, #4
 801065a:	0038      	movs	r0, r7
 801065c:	f7fe fc6a 	bl	800ef34 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010660:	0028      	movs	r0, r5
 8010662:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010664:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8010666:	69eb      	ldr	r3, [r5, #28]
 8010668:	2b01      	cmp	r3, #1
 801066a:	d1ec      	bne.n	8010646 <prvSampleTimeNow+0x3a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801066c:	69ab      	ldr	r3, [r5, #24]
 801066e:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
 8010670:	459a      	cmp	sl, r3
 8010672:	d209      	bcs.n	8010688 <prvSampleTimeNow+0x7c>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010674:	606b      	str	r3, [r5, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010676:	612d      	str	r5, [r5, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010678:	4b0e      	ldr	r3, [pc, #56]	; (80106b4 <prvSampleTimeNow+0xa8>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	9303      	str	r3, [sp, #12]
 801067e:	0039      	movs	r1, r7
 8010680:	0018      	movs	r0, r3
 8010682:	f7fe fc40 	bl	800ef06 <vListInsert>
 8010686:	e7de      	b.n	8010646 <prvSampleTimeNow+0x3a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010688:	464b      	mov	r3, r9
 801068a:	9300      	str	r3, [sp, #0]
 801068c:	4652      	mov	r2, sl
 801068e:	4649      	mov	r1, r9
 8010690:	0028      	movs	r0, r5
 8010692:	f7ff ff8f 	bl	80105b4 <xTimerGenericCommand>
				configASSERT( xResult );
 8010696:	2800      	cmp	r0, #0
 8010698:	d1d5      	bne.n	8010646 <prvSampleTimeNow+0x3a>
 801069a:	b672      	cpsid	i
 801069c:	e7fe      	b.n	801069c <prvSampleTimeNow+0x90>
	pxCurrentTimerList = pxOverflowTimerList;
 801069e:	4a06      	ldr	r2, [pc, #24]	; (80106b8 <prvSampleTimeNow+0xac>)
 80106a0:	4904      	ldr	r1, [pc, #16]	; (80106b4 <prvSampleTimeNow+0xa8>)
 80106a2:	6810      	ldr	r0, [r2, #0]
 80106a4:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 80106a6:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 80106a8:	2301      	movs	r3, #1
 80106aa:	6033      	str	r3, [r6, #0]
 80106ac:	e7be      	b.n	801062c <prvSampleTimeNow+0x20>
 80106ae:	46c0      	nop			; (mov r8, r8)
 80106b0:	20001bd4 	.word	0x20001bd4
 80106b4:	20001ba4 	.word	0x20001ba4
 80106b8:	20001ba8 	.word	0x20001ba8

080106bc <prvTimerTask>:
{
 80106bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106be:	b08d      	sub	sp, #52	; 0x34
 80106c0:	4d57      	ldr	r5, [pc, #348]	; (8010820 <prvTimerTask+0x164>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80106c2:	4b58      	ldr	r3, [pc, #352]	; (8010824 <prvTimerTask+0x168>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	681e      	ldr	r6, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80106c8:	2e00      	cmp	r6, #0
 80106ca:	d100      	bne.n	80106ce <prvTimerTask+0x12>
 80106cc:	e09b      	b.n	8010806 <prvTimerTask+0x14a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80106ce:	68db      	ldr	r3, [r3, #12]
 80106d0:	681e      	ldr	r6, [r3, #0]
	vTaskSuspendAll();
 80106d2:	f7ff f9bb 	bl	800fa4c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80106d6:	a808      	add	r0, sp, #32
 80106d8:	f7ff ff98 	bl	801060c <prvSampleTimeNow>
 80106dc:	0004      	movs	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80106de:	9b08      	ldr	r3, [sp, #32]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d000      	beq.n	80106e6 <prvTimerTask+0x2a>
 80106e4:	e099      	b.n	801081a <prvTimerTask+0x15e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80106e6:	4286      	cmp	r6, r0
 80106e8:	d90a      	bls.n	8010700 <prvTimerTask+0x44>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
 80106ea:	1b31      	subs	r1, r6, r4
 80106ec:	4b4e      	ldr	r3, [pc, #312]	; (8010828 <prvTimerTask+0x16c>)
 80106ee:	6818      	ldr	r0, [r3, #0]
 80106f0:	f7fe ff4c 	bl	800f58c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80106f4:	f7ff fa52 	bl	800fb9c <xTaskResumeAll>
 80106f8:	2800      	cmp	r0, #0
 80106fa:	d025      	beq.n	8010748 <prvTimerTask+0x8c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80106fc:	4c4a      	ldr	r4, [pc, #296]	; (8010828 <prvTimerTask+0x16c>)
}
 80106fe:	e033      	b.n	8010768 <prvTimerTask+0xac>
				( void ) xTaskResumeAll();
 8010700:	f7ff fa4c 	bl	800fb9c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010704:	4b47      	ldr	r3, [pc, #284]	; (8010824 <prvTimerTask+0x168>)
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	68db      	ldr	r3, [r3, #12]
 801070a:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801070c:	1d38      	adds	r0, r7, #4
 801070e:	f7fe fc11 	bl	800ef34 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8010712:	69fb      	ldr	r3, [r7, #28]
 8010714:	2b01      	cmp	r3, #1
 8010716:	d003      	beq.n	8010720 <prvTimerTask+0x64>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801071a:	0038      	movs	r0, r7
 801071c:	4798      	blx	r3
}
 801071e:	e7ed      	b.n	80106fc <prvTimerTask+0x40>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
 8010720:	69bb      	ldr	r3, [r7, #24]
 8010722:	18f1      	adds	r1, r6, r3
 8010724:	0033      	movs	r3, r6
 8010726:	0022      	movs	r2, r4
 8010728:	0038      	movs	r0, r7
 801072a:	f7ff fead 	bl	8010488 <prvInsertTimerInActiveList>
 801072e:	2801      	cmp	r0, #1
 8010730:	d1f2      	bne.n	8010718 <prvTimerTask+0x5c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010732:	2100      	movs	r1, #0
 8010734:	9100      	str	r1, [sp, #0]
 8010736:	000b      	movs	r3, r1
 8010738:	0032      	movs	r2, r6
 801073a:	0038      	movs	r0, r7
 801073c:	f7ff ff3a 	bl	80105b4 <xTimerGenericCommand>
			configASSERT( xResult );
 8010740:	2800      	cmp	r0, #0
 8010742:	d1e9      	bne.n	8010718 <prvTimerTask+0x5c>
 8010744:	b672      	cpsid	i
 8010746:	e7fe      	b.n	8010746 <prvTimerTask+0x8a>
					portYIELD_WITHIN_API();
 8010748:	f000 f8d2 	bl	80108f0 <vPortYield>
 801074c:	e7d6      	b.n	80106fc <prvTimerTask+0x40>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801074e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010750:	9303      	str	r3, [sp, #12]
 8010752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010754:	9304      	str	r3, [sp, #16]
 8010756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010758:	9305      	str	r3, [sp, #20]
 801075a:	9903      	ldr	r1, [sp, #12]
 801075c:	9804      	ldr	r0, [sp, #16]
 801075e:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010760:	9b08      	ldr	r3, [sp, #32]
 8010762:	9303      	str	r3, [sp, #12]
 8010764:	2b00      	cmp	r3, #0
 8010766:	da0b      	bge.n	8010780 <prvTimerTask+0xc4>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010768:	2300      	movs	r3, #0
 801076a:	2200      	movs	r2, #0
 801076c:	a908      	add	r1, sp, #32
 801076e:	6820      	ldr	r0, [r4, #0]
 8010770:	f7fe fe0e 	bl	800f390 <xQueueGenericReceive>
 8010774:	2800      	cmp	r0, #0
 8010776:	d0a4      	beq.n	80106c2 <prvTimerTask+0x6>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010778:	9b08      	ldr	r3, [sp, #32]
 801077a:	9303      	str	r3, [sp, #12]
 801077c:	2b00      	cmp	r3, #0
 801077e:	dbe6      	blt.n	801074e <prvTimerTask+0x92>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010780:	9e0a      	ldr	r6, [sp, #40]	; 0x28
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8010782:	6973      	ldr	r3, [r6, #20]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d002      	beq.n	801078e <prvTimerTask+0xd2>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010788:	1d30      	adds	r0, r6, #4
 801078a:	f7fe fbd3 	bl	800ef34 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801078e:	a807      	add	r0, sp, #28
 8010790:	f7ff ff3c 	bl	801060c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8010794:	9b08      	ldr	r3, [sp, #32]
 8010796:	9303      	str	r3, [sp, #12]
 8010798:	2b09      	cmp	r3, #9
 801079a:	d8e5      	bhi.n	8010768 <prvTimerTask+0xac>
 801079c:	009b      	lsls	r3, r3, #2
 801079e:	58eb      	ldr	r3, [r5, r3]
 80107a0:	469f      	mov	pc, r3
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
 80107a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107a4:	69b2      	ldr	r2, [r6, #24]
 80107a6:	4694      	mov	ip, r2
 80107a8:	4463      	add	r3, ip
 80107aa:	0019      	movs	r1, r3
 80107ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107ae:	0002      	movs	r2, r0
 80107b0:	0030      	movs	r0, r6
 80107b2:	f7ff fe69 	bl	8010488 <prvInsertTimerInActiveList>
 80107b6:	2801      	cmp	r0, #1
 80107b8:	d1d6      	bne.n	8010768 <prvTimerTask+0xac>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80107ba:	0030      	movs	r0, r6
 80107bc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80107be:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80107c0:	69f3      	ldr	r3, [r6, #28]
 80107c2:	2b01      	cmp	r3, #1
 80107c4:	d1d0      	bne.n	8010768 <prvTimerTask+0xac>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80107c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107c8:	69b1      	ldr	r1, [r6, #24]
 80107ca:	468c      	mov	ip, r1
 80107cc:	4463      	add	r3, ip
 80107ce:	001a      	movs	r2, r3
 80107d0:	2300      	movs	r3, #0
 80107d2:	9300      	str	r3, [sp, #0]
 80107d4:	2100      	movs	r1, #0
 80107d6:	0030      	movs	r0, r6
 80107d8:	f7ff feec 	bl	80105b4 <xTimerGenericCommand>
							configASSERT( xResult );
 80107dc:	2800      	cmp	r0, #0
 80107de:	d1c3      	bne.n	8010768 <prvTimerTask+0xac>
 80107e0:	b672      	cpsid	i
 80107e2:	e7fe      	b.n	80107e2 <prvTimerTask+0x126>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80107e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80107e6:	61b1      	str	r1, [r6, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80107e8:	2900      	cmp	r1, #0
 80107ea:	d006      	beq.n	80107fa <prvTimerTask+0x13e>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80107ec:	1841      	adds	r1, r0, r1
 80107ee:	0003      	movs	r3, r0
 80107f0:	0002      	movs	r2, r0
 80107f2:	0030      	movs	r0, r6
 80107f4:	f7ff fe48 	bl	8010488 <prvInsertTimerInActiveList>
					break;
 80107f8:	e7b6      	b.n	8010768 <prvTimerTask+0xac>
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80107fa:	b672      	cpsid	i
 80107fc:	e7fe      	b.n	80107fc <prvTimerTask+0x140>
					vPortFree( pxTimer );
 80107fe:	0030      	movs	r0, r6
 8010800:	f000 f996 	bl	8010b30 <vPortFree>
					break;
 8010804:	e7b0      	b.n	8010768 <prvTimerTask+0xac>
	vTaskSuspendAll();
 8010806:	f7ff f921 	bl	800fa4c <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801080a:	a808      	add	r0, sp, #32
 801080c:	f7ff fefe 	bl	801060c <prvSampleTimeNow>
 8010810:	0004      	movs	r4, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8010812:	9b08      	ldr	r3, [sp, #32]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d100      	bne.n	801081a <prvTimerTask+0x15e>
 8010818:	e767      	b.n	80106ea <prvTimerTask+0x2e>
			( void ) xTaskResumeAll();
 801081a:	f7ff f9bf 	bl	800fb9c <xTaskResumeAll>
 801081e:	e76d      	b.n	80106fc <prvTimerTask+0x40>
 8010820:	0801d630 	.word	0x0801d630
 8010824:	20001ba4 	.word	0x20001ba4
 8010828:	20001bd8 	.word	0x20001bd8

0801082c <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 801082c:	b510      	push	{r4, lr}
 801082e:	1e04      	subs	r4, r0, #0
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
void *pvReturn;

	configASSERT( xTimer );
 8010830:	d006      	beq.n	8010840 <pvTimerGetTimerID+0x14>

	taskENTER_CRITICAL();
 8010832:	f000 f869 	bl	8010908 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8010836:	6a24      	ldr	r4, [r4, #32]
	}
	taskEXIT_CRITICAL();
 8010838:	f000 f872 	bl	8010920 <vPortExitCritical>

	return pvReturn;
}
 801083c:	0020      	movs	r0, r4
 801083e:	bd10      	pop	{r4, pc}
	configASSERT( xTimer );
 8010840:	b672      	cpsid	i
 8010842:	e7fe      	b.n	8010842 <pvTimerGetTimerID+0x16>

08010844 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010844:	4b03      	ldr	r3, [pc, #12]	; (8010854 <prvTaskExitError+0x10>)
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	3301      	adds	r3, #1
 801084a:	d001      	beq.n	8010850 <prvTaskExitError+0xc>
 801084c:	b672      	cpsid	i
 801084e:	e7fe      	b.n	801084e <prvTaskExitError+0xa>
	portDISABLE_INTERRUPTS();
 8010850:	b672      	cpsid	i
	for( ;; );
 8010852:	e7fe      	b.n	8010852 <prvTaskExitError+0xe>
 8010854:	2000018c 	.word	0x2000018c

08010858 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8010858:	4a06      	ldr	r2, [pc, #24]	; (8010874 <pxCurrentTCBConst2>)
 801085a:	6813      	ldr	r3, [r2, #0]
 801085c:	6818      	ldr	r0, [r3, #0]
 801085e:	3020      	adds	r0, #32
 8010860:	f380 8809 	msr	PSP, r0
 8010864:	2002      	movs	r0, #2
 8010866:	f380 8814 	msr	CONTROL, r0
 801086a:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 801086c:	46ae      	mov	lr, r5
 801086e:	b662      	cpsie	i
 8010870:	bd00      	pop	{pc}
 8010872:	46c0      	nop			; (mov r8, r8)

08010874 <pxCurrentTCBConst2>:
 8010874:	20001a7c 	.word	0x20001a7c

08010878 <pxPortInitialiseStack>:
{
 8010878:	b510      	push	{r4, lr}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801087a:	1f03      	subs	r3, r0, #4
 801087c:	2480      	movs	r4, #128	; 0x80
 801087e:	0464      	lsls	r4, r4, #17
 8010880:	601c      	str	r4, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8010882:	3b04      	subs	r3, #4
 8010884:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010886:	3b04      	subs	r3, #4
 8010888:	4902      	ldr	r1, [pc, #8]	; (8010894 <pxPortInitialiseStack+0x1c>)
 801088a:	6019      	str	r1, [r3, #0]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801088c:	3b14      	subs	r3, #20
 801088e:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8010890:	3840      	subs	r0, #64	; 0x40
}
 8010892:	bd10      	pop	{r4, pc}
 8010894:	08010845 	.word	0x08010845

08010898 <SVC_Handler>:
}
 8010898:	4770      	bx	lr
	...

0801089c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801089c:	b510      	push	{r4, lr}
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 801089e:	4b0f      	ldr	r3, [pc, #60]	; (80108dc <xPortStartScheduler+0x40>)
 80108a0:	6819      	ldr	r1, [r3, #0]
 80108a2:	22ff      	movs	r2, #255	; 0xff
 80108a4:	0412      	lsls	r2, r2, #16
 80108a6:	430a      	orrs	r2, r1
 80108a8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80108aa:	6819      	ldr	r1, [r3, #0]
 80108ac:	22ff      	movs	r2, #255	; 0xff
 80108ae:	0612      	lsls	r2, r2, #24
 80108b0:	430a      	orrs	r2, r1
 80108b2:	601a      	str	r2, [r3, #0]
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80108b4:	4b0a      	ldr	r3, [pc, #40]	; (80108e0 <xPortStartScheduler+0x44>)
 80108b6:	6818      	ldr	r0, [r3, #0]
 80108b8:	21fa      	movs	r1, #250	; 0xfa
 80108ba:	0089      	lsls	r1, r1, #2
 80108bc:	f7ef fc48 	bl	8000150 <__udivsi3>
 80108c0:	3801      	subs	r0, #1
 80108c2:	4b08      	ldr	r3, [pc, #32]	; (80108e4 <xPortStartScheduler+0x48>)
 80108c4:	6018      	str	r0, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80108c6:	4b08      	ldr	r3, [pc, #32]	; (80108e8 <xPortStartScheduler+0x4c>)
 80108c8:	2207      	movs	r2, #7
 80108ca:	601a      	str	r2, [r3, #0]
	uxCriticalNesting = 0;
 80108cc:	4b07      	ldr	r3, [pc, #28]	; (80108ec <xPortStartScheduler+0x50>)
 80108ce:	2200      	movs	r2, #0
 80108d0:	601a      	str	r2, [r3, #0]
	vPortStartFirstTask();
 80108d2:	f7ff ffc1 	bl	8010858 <vPortStartFirstTask>
	prvTaskExitError();
 80108d6:	f7ff ffb5 	bl	8010844 <prvTaskExitError>
 80108da:	46c0      	nop			; (mov r8, r8)
 80108dc:	e000ed20 	.word	0xe000ed20
 80108e0:	20000178 	.word	0x20000178
 80108e4:	e000e014 	.word	0xe000e014
 80108e8:	e000e010 	.word	0xe000e010
 80108ec:	2000018c 	.word	0x2000018c

080108f0 <vPortYield>:
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80108f0:	4b04      	ldr	r3, [pc, #16]	; (8010904 <vPortYield+0x14>)
 80108f2:	2280      	movs	r2, #128	; 0x80
 80108f4:	0552      	lsls	r2, r2, #21
 80108f6:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" );
 80108f8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80108fc:	f3bf 8f6f 	isb	sy
}
 8010900:	4770      	bx	lr
 8010902:	46c0      	nop			; (mov r8, r8)
 8010904:	e000ed04 	.word	0xe000ed04

08010908 <vPortEnterCritical>:
    portDISABLE_INTERRUPTS();
 8010908:	b672      	cpsid	i
    uxCriticalNesting++;
 801090a:	4a04      	ldr	r2, [pc, #16]	; (801091c <vPortEnterCritical+0x14>)
 801090c:	6813      	ldr	r3, [r2, #0]
 801090e:	3301      	adds	r3, #1
 8010910:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 8010912:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8010916:	f3bf 8f6f 	isb	sy
}
 801091a:	4770      	bx	lr
 801091c:	2000018c 	.word	0x2000018c

08010920 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8010920:	4b06      	ldr	r3, [pc, #24]	; (801093c <vPortExitCritical+0x1c>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d101      	bne.n	801092c <vPortExitCritical+0xc>
 8010928:	b672      	cpsid	i
 801092a:	e7fe      	b.n	801092a <vPortExitCritical+0xa>
    uxCriticalNesting--;
 801092c:	3b01      	subs	r3, #1
 801092e:	4a03      	ldr	r2, [pc, #12]	; (801093c <vPortExitCritical+0x1c>)
 8010930:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8010932:	2b00      	cmp	r3, #0
 8010934:	d100      	bne.n	8010938 <vPortExitCritical+0x18>
        portENABLE_INTERRUPTS();
 8010936:	b662      	cpsie	i
}
 8010938:	4770      	bx	lr
 801093a:	46c0      	nop			; (mov r8, r8)
 801093c:	2000018c 	.word	0x2000018c

08010940 <ulSetInterruptMaskFromISR>:
	__asm volatile(
 8010940:	f3ef 8010 	mrs	r0, PRIMASK
 8010944:	b672      	cpsid	i
 8010946:	4770      	bx	lr
}
 8010948:	2000      	movs	r0, #0

0801094a <vClearInterruptMaskFromISR>:
	__asm volatile(
 801094a:	f380 8810 	msr	PRIMASK, r0
 801094e:	4770      	bx	lr

08010950 <PendSV_Handler>:
	__asm volatile
 8010950:	f3ef 8009 	mrs	r0, PSP
 8010954:	4b0e      	ldr	r3, [pc, #56]	; (8010990 <pxCurrentTCBConst>)
 8010956:	681a      	ldr	r2, [r3, #0]
 8010958:	3820      	subs	r0, #32
 801095a:	6010      	str	r0, [r2, #0]
 801095c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 801095e:	4644      	mov	r4, r8
 8010960:	464d      	mov	r5, r9
 8010962:	4656      	mov	r6, sl
 8010964:	465f      	mov	r7, fp
 8010966:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8010968:	b508      	push	{r3, lr}
 801096a:	b672      	cpsid	i
 801096c:	f7ff fa36 	bl	800fddc <vTaskSwitchContext>
 8010970:	b662      	cpsie	i
 8010972:	bc0c      	pop	{r2, r3}
 8010974:	6811      	ldr	r1, [r2, #0]
 8010976:	6808      	ldr	r0, [r1, #0]
 8010978:	3010      	adds	r0, #16
 801097a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 801097c:	46a0      	mov	r8, r4
 801097e:	46a9      	mov	r9, r5
 8010980:	46b2      	mov	sl, r6
 8010982:	46bb      	mov	fp, r7
 8010984:	f380 8809 	msr	PSP, r0
 8010988:	3820      	subs	r0, #32
 801098a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 801098c:	4718      	bx	r3
 801098e:	46c0      	nop			; (mov r8, r8)

08010990 <pxCurrentTCBConst>:
 8010990:	20001a7c 	.word	0x20001a7c

08010994 <xPortSysTickHandler>:
{
 8010994:	b510      	push	{r4, lr}
	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8010996:	f7ff ffd3 	bl	8010940 <ulSetInterruptMaskFromISR>
 801099a:	0004      	movs	r4, r0
		if( xTaskIncrementTick() != pdFALSE )
 801099c:	f7ff f86a 	bl	800fa74 <xTaskIncrementTick>
 80109a0:	2800      	cmp	r0, #0
 80109a2:	d003      	beq.n	80109ac <xPortSysTickHandler+0x18>
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80109a4:	4b03      	ldr	r3, [pc, #12]	; (80109b4 <xPortSysTickHandler+0x20>)
 80109a6:	2280      	movs	r2, #128	; 0x80
 80109a8:	0552      	lsls	r2, r2, #21
 80109aa:	601a      	str	r2, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80109ac:	0020      	movs	r0, r4
 80109ae:	f7ff ffcc 	bl	801094a <vClearInterruptMaskFromISR>
}
 80109b2:	bd10      	pop	{r4, pc}
 80109b4:	e000ed04 	.word	0xe000ed04

080109b8 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80109b8:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80109ba:	4b12      	ldr	r3, [pc, #72]	; (8010a04 <prvInsertBlockIntoFreeList+0x4c>)
 80109bc:	001a      	movs	r2, r3
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	4283      	cmp	r3, r0
 80109c2:	d3fb      	bcc.n	80109bc <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80109c4:	6851      	ldr	r1, [r2, #4]
 80109c6:	1854      	adds	r4, r2, r1
 80109c8:	42a0      	cmp	r0, r4
 80109ca:	d008      	beq.n	80109de <prvInsertBlockIntoFreeList+0x26>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80109cc:	6841      	ldr	r1, [r0, #4]
 80109ce:	1844      	adds	r4, r0, r1
 80109d0:	42a3      	cmp	r3, r4
 80109d2:	d009      	beq.n	80109e8 <prvInsertBlockIntoFreeList+0x30>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80109d4:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80109d6:	4290      	cmp	r0, r2
 80109d8:	d000      	beq.n	80109dc <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80109da:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80109dc:	bd10      	pop	{r4, pc}
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80109de:	6840      	ldr	r0, [r0, #4]
 80109e0:	1841      	adds	r1, r0, r1
 80109e2:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
 80109e4:	0010      	movs	r0, r2
 80109e6:	e7f1      	b.n	80109cc <prvInsertBlockIntoFreeList+0x14>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80109e8:	4c07      	ldr	r4, [pc, #28]	; (8010a08 <prvInsertBlockIntoFreeList+0x50>)
 80109ea:	6824      	ldr	r4, [r4, #0]
 80109ec:	42a3      	cmp	r3, r4
 80109ee:	d006      	beq.n	80109fe <prvInsertBlockIntoFreeList+0x46>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80109f0:	685b      	ldr	r3, [r3, #4]
 80109f2:	1859      	adds	r1, r3, r1
 80109f4:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80109f6:	6813      	ldr	r3, [r2, #0]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	6003      	str	r3, [r0, #0]
 80109fc:	e7eb      	b.n	80109d6 <prvInsertBlockIntoFreeList+0x1e>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80109fe:	6004      	str	r4, [r0, #0]
 8010a00:	e7e9      	b.n	80109d6 <prvInsertBlockIntoFreeList+0x1e>
 8010a02:	46c0      	nop			; (mov r8, r8)
 8010a04:	20006624 	.word	0x20006624
 8010a08:	20001bdc 	.word	0x20001bdc

08010a0c <pvPortMalloc>:
{
 8010a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a0e:	0004      	movs	r4, r0
	vTaskSuspendAll();
 8010a10:	f7ff f81c 	bl	800fa4c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8010a14:	4b3f      	ldr	r3, [pc, #252]	; (8010b14 <pvPortMalloc+0x108>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d015      	beq.n	8010a48 <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010a1c:	4b3e      	ldr	r3, [pc, #248]	; (8010b18 <pvPortMalloc+0x10c>)
 8010a1e:	681e      	ldr	r6, [r3, #0]
 8010a20:	4234      	tst	r4, r6
 8010a22:	d135      	bne.n	8010a90 <pvPortMalloc+0x84>
			if( xWantedSize > 0 )
 8010a24:	2c00      	cmp	r4, #0
 8010a26:	d03a      	beq.n	8010a9e <pvPortMalloc+0x92>
				xWantedSize += xHeapStructSize;
 8010a28:	0023      	movs	r3, r4
 8010a2a:	3308      	adds	r3, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010a2c:	0762      	lsls	r2, r4, #29
 8010a2e:	d002      	beq.n	8010a36 <pvPortMalloc+0x2a>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010a30:	2207      	movs	r2, #7
 8010a32:	4393      	bics	r3, r2
 8010a34:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d031      	beq.n	8010a9e <pvPortMalloc+0x92>
 8010a3a:	4a38      	ldr	r2, [pc, #224]	; (8010b1c <pvPortMalloc+0x110>)
 8010a3c:	6815      	ldr	r5, [r2, #0]
 8010a3e:	429d      	cmp	r5, r3
 8010a40:	d330      	bcc.n	8010aa4 <pvPortMalloc+0x98>
				pxBlock = xStart.pxNextFreeBlock;
 8010a42:	4a37      	ldr	r2, [pc, #220]	; (8010b20 <pvPortMalloc+0x114>)
 8010a44:	6814      	ldr	r4, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010a46:	e032      	b.n	8010aae <pvPortMalloc+0xa2>
	ulAddress = ( uint32_t ) ucHeap;
 8010a48:	4a36      	ldr	r2, [pc, #216]	; (8010b24 <pvPortMalloc+0x118>)
	if( ( ulAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010a4a:	0753      	lsls	r3, r2, #29
 8010a4c:	d01e      	beq.n	8010a8c <pvPortMalloc+0x80>
		ulAddress += ( portBYTE_ALIGNMENT - 1 );
 8010a4e:	1dd1      	adds	r1, r2, #7
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8010a50:	2307      	movs	r3, #7
 8010a52:	4399      	bics	r1, r3
		xTotalHeapSize -= ulAddress - ( uint32_t ) ucHeap;
 8010a54:	4b34      	ldr	r3, [pc, #208]	; (8010b28 <pvPortMalloc+0x11c>)
 8010a56:	18d3      	adds	r3, r2, r3
 8010a58:	1a5b      	subs	r3, r3, r1
		ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8010a5a:	000a      	movs	r2, r1
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010a5c:	4830      	ldr	r0, [pc, #192]	; (8010b20 <pvPortMalloc+0x114>)
 8010a5e:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010a60:	2100      	movs	r1, #0
 8010a62:	6041      	str	r1, [r0, #4]
	ulAddress = ( ( uint32_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010a64:	18d3      	adds	r3, r2, r3
	ulAddress -= xHeapStructSize;
 8010a66:	3b08      	subs	r3, #8
	ulAddress &= ~( ( uint32_t ) portBYTE_ALIGNMENT_MASK );
 8010a68:	2007      	movs	r0, #7
 8010a6a:	4383      	bics	r3, r0
	pxEnd = ( void * ) ulAddress;
 8010a6c:	4829      	ldr	r0, [pc, #164]	; (8010b14 <pvPortMalloc+0x108>)
 8010a6e:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8010a70:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010a72:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = ulAddress - ( uint32_t ) pxFirstFreeBlock;
 8010a74:	1a99      	subs	r1, r3, r2
 8010a76:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010a78:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010a7a:	4b2c      	ldr	r3, [pc, #176]	; (8010b2c <pvPortMalloc+0x120>)
 8010a7c:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010a7e:	4b27      	ldr	r3, [pc, #156]	; (8010b1c <pvPortMalloc+0x110>)
 8010a80:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010a82:	4b25      	ldr	r3, [pc, #148]	; (8010b18 <pvPortMalloc+0x10c>)
 8010a84:	2280      	movs	r2, #128	; 0x80
 8010a86:	0612      	lsls	r2, r2, #24
 8010a88:	601a      	str	r2, [r3, #0]
}
 8010a8a:	e7c7      	b.n	8010a1c <pvPortMalloc+0x10>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010a8c:	4b26      	ldr	r3, [pc, #152]	; (8010b28 <pvPortMalloc+0x11c>)
 8010a8e:	e7e5      	b.n	8010a5c <pvPortMalloc+0x50>
	( void ) xTaskResumeAll();
 8010a90:	f7ff f884 	bl	800fb9c <xTaskResumeAll>
			vApplicationMallocFailedHook();
 8010a94:	f7fc ff30 	bl	800d8f8 <vApplicationMallocFailedHook>
 8010a98:	2700      	movs	r7, #0
}
 8010a9a:	0038      	movs	r0, r7
 8010a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	( void ) xTaskResumeAll();
 8010a9e:	f7ff f87d 	bl	800fb9c <xTaskResumeAll>
		if( pvReturn == NULL )
 8010aa2:	e7f7      	b.n	8010a94 <pvPortMalloc+0x88>
	( void ) xTaskResumeAll();
 8010aa4:	f7ff f87a 	bl	800fb9c <xTaskResumeAll>
		if( pvReturn == NULL )
 8010aa8:	e7f4      	b.n	8010a94 <pvPortMalloc+0x88>
 8010aaa:	0022      	movs	r2, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 8010aac:	000c      	movs	r4, r1
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010aae:	6861      	ldr	r1, [r4, #4]
 8010ab0:	4299      	cmp	r1, r3
 8010ab2:	d202      	bcs.n	8010aba <pvPortMalloc+0xae>
 8010ab4:	6821      	ldr	r1, [r4, #0]
 8010ab6:	2900      	cmp	r1, #0
 8010ab8:	d1f7      	bne.n	8010aaa <pvPortMalloc+0x9e>
				if( pxBlock != pxEnd )
 8010aba:	4916      	ldr	r1, [pc, #88]	; (8010b14 <pvPortMalloc+0x108>)
 8010abc:	6809      	ldr	r1, [r1, #0]
 8010abe:	42a1      	cmp	r1, r4
 8010ac0:	d00c      	beq.n	8010adc <pvPortMalloc+0xd0>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010ac2:	6817      	ldr	r7, [r2, #0]
 8010ac4:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010ac6:	6821      	ldr	r1, [r4, #0]
 8010ac8:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010aca:	6862      	ldr	r2, [r4, #4]
 8010acc:	1ad2      	subs	r2, r2, r3
 8010ace:	2a10      	cmp	r2, #16
 8010ad0:	d90b      	bls.n	8010aea <pvPortMalloc+0xde>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010ad2:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( uint32_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010ad4:	0741      	lsls	r1, r0, #29
 8010ad6:	d004      	beq.n	8010ae2 <pvPortMalloc+0xd6>
 8010ad8:	b672      	cpsid	i
 8010ada:	e7fe      	b.n	8010ada <pvPortMalloc+0xce>
	( void ) xTaskResumeAll();
 8010adc:	f7ff f85e 	bl	800fb9c <xTaskResumeAll>
		if( pvReturn == NULL )
 8010ae0:	e7d8      	b.n	8010a94 <pvPortMalloc+0x88>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010ae2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010ae4:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 8010ae6:	f7ff ff67 	bl	80109b8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010aea:	6862      	ldr	r2, [r4, #4]
 8010aec:	1aad      	subs	r5, r5, r2
 8010aee:	490b      	ldr	r1, [pc, #44]	; (8010b1c <pvPortMalloc+0x110>)
 8010af0:	600d      	str	r5, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010af2:	490e      	ldr	r1, [pc, #56]	; (8010b2c <pvPortMalloc+0x120>)
 8010af4:	6809      	ldr	r1, [r1, #0]
 8010af6:	428d      	cmp	r5, r1
 8010af8:	d201      	bcs.n	8010afe <pvPortMalloc+0xf2>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010afa:	490c      	ldr	r1, [pc, #48]	; (8010b2c <pvPortMalloc+0x120>)
 8010afc:	600d      	str	r5, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010afe:	4316      	orrs	r6, r2
 8010b00:	6066      	str	r6, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010b02:	2300      	movs	r3, #0
 8010b04:	6023      	str	r3, [r4, #0]
	( void ) xTaskResumeAll();
 8010b06:	f7ff f849 	bl	800fb9c <xTaskResumeAll>
	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010b0a:	077b      	lsls	r3, r7, #29
 8010b0c:	d0c5      	beq.n	8010a9a <pvPortMalloc+0x8e>
 8010b0e:	b672      	cpsid	i
 8010b10:	e7fe      	b.n	8010b10 <pvPortMalloc+0x104>
 8010b12:	46c0      	nop			; (mov r8, r8)
 8010b14:	20001bdc 	.word	0x20001bdc
 8010b18:	20006618 	.word	0x20006618
 8010b1c:	2000661c 	.word	0x2000661c
 8010b20:	20006624 	.word	0x20006624
 8010b24:	20001be0 	.word	0x20001be0
 8010b28:	00004a38 	.word	0x00004a38
 8010b2c:	20006620 	.word	0x20006620

08010b30 <vPortFree>:
{
 8010b30:	b510      	push	{r4, lr}
	if( pv != NULL )
 8010b32:	2800      	cmp	r0, #0
 8010b34:	d020      	beq.n	8010b78 <vPortFree+0x48>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010b36:	0003      	movs	r3, r0
 8010b38:	3b08      	subs	r3, #8
 8010b3a:	685b      	ldr	r3, [r3, #4]
 8010b3c:	4a0f      	ldr	r2, [pc, #60]	; (8010b7c <vPortFree+0x4c>)
 8010b3e:	6812      	ldr	r2, [r2, #0]
 8010b40:	421a      	tst	r2, r3
 8010b42:	d101      	bne.n	8010b48 <vPortFree+0x18>
 8010b44:	b672      	cpsid	i
 8010b46:	e7fe      	b.n	8010b46 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010b48:	0001      	movs	r1, r0
 8010b4a:	3908      	subs	r1, #8
 8010b4c:	6809      	ldr	r1, [r1, #0]
 8010b4e:	2900      	cmp	r1, #0
 8010b50:	d001      	beq.n	8010b56 <vPortFree+0x26>
 8010b52:	b672      	cpsid	i
 8010b54:	e7fe      	b.n	8010b54 <vPortFree+0x24>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010b56:	3808      	subs	r0, #8
 8010b58:	0004      	movs	r4, r0
 8010b5a:	4393      	bics	r3, r2
 8010b5c:	6043      	str	r3, [r0, #4]
				vTaskSuspendAll();
 8010b5e:	f7fe ff75 	bl	800fa4c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010b62:	4a07      	ldr	r2, [pc, #28]	; (8010b80 <vPortFree+0x50>)
 8010b64:	6863      	ldr	r3, [r4, #4]
 8010b66:	6811      	ldr	r1, [r2, #0]
 8010b68:	468c      	mov	ip, r1
 8010b6a:	4463      	add	r3, ip
 8010b6c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010b6e:	0020      	movs	r0, r4
 8010b70:	f7ff ff22 	bl	80109b8 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8010b74:	f7ff f812 	bl	800fb9c <xTaskResumeAll>
}
 8010b78:	bd10      	pop	{r4, pc}
 8010b7a:	46c0      	nop			; (mov r8, r8)
 8010b7c:	20006618 	.word	0x20006618
 8010b80:	2000661c 	.word	0x2000661c

08010b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8010b84:	b510      	push	{r4, lr}
 8010b86:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8010b88:	f002 f956 	bl	8012e38 <HAL_RCC_GetHCLKFreq>
 8010b8c:	21fa      	movs	r1, #250	; 0xfa
 8010b8e:	0089      	lsls	r1, r1, #2
 8010b90:	f7ef fade 	bl	8000150 <__udivsi3>
 8010b94:	f000 f888 	bl	8010ca8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8010b98:	2001      	movs	r0, #1
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	0021      	movs	r1, r4
 8010b9e:	4240      	negs	r0, r0
 8010ba0:	f000 f83c 	bl	8010c1c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8010ba4:	2000      	movs	r0, #0
 8010ba6:	bd10      	pop	{r4, pc}

08010ba8 <HAL_Init>:
{
 8010ba8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010baa:	4a06      	ldr	r2, [pc, #24]	; (8010bc4 <HAL_Init+0x1c>)
 8010bac:	6813      	ldr	r3, [r2, #0]
 8010bae:	2110      	movs	r1, #16
 8010bb0:	430b      	orrs	r3, r1
 8010bb2:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8010bb4:	2000      	movs	r0, #0
 8010bb6:	f7ff ffe5 	bl	8010b84 <HAL_InitTick>
  HAL_MspInit();
 8010bba:	f001 fce1 	bl	8012580 <HAL_MspInit>
}
 8010bbe:	2000      	movs	r0, #0
 8010bc0:	bd10      	pop	{r4, pc}
 8010bc2:	46c0      	nop			; (mov r8, r8)
 8010bc4:	40022000 	.word	0x40022000

08010bc8 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8010bc8:	4a02      	ldr	r2, [pc, #8]	; (8010bd4 <HAL_IncTick+0xc>)
 8010bca:	6813      	ldr	r3, [r2, #0]
 8010bcc:	3301      	adds	r3, #1
 8010bce:	6013      	str	r3, [r2, #0]
}
 8010bd0:	4770      	bx	lr
 8010bd2:	46c0      	nop			; (mov r8, r8)
 8010bd4:	2000662c 	.word	0x2000662c

08010bd8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8010bd8:	4b01      	ldr	r3, [pc, #4]	; (8010be0 <HAL_GetTick+0x8>)
 8010bda:	6818      	ldr	r0, [r3, #0]
}
 8010bdc:	4770      	bx	lr
 8010bde:	46c0      	nop			; (mov r8, r8)
 8010be0:	2000662c 	.word	0x2000662c

08010be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8010be4:	b510      	push	{r4, lr}
 8010be6:	b082      	sub	sp, #8
 8010be8:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8010bea:	f7ff fff5 	bl	8010bd8 <HAL_GetTick>
 8010bee:	0004      	movs	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8010bf0:	f7ff fff2 	bl	8010bd8 <HAL_GetTick>
 8010bf4:	9b01      	ldr	r3, [sp, #4]
 8010bf6:	1b00      	subs	r0, r0, r4
 8010bf8:	4298      	cmp	r0, r3
 8010bfa:	d3f9      	bcc.n	8010bf0 <HAL_Delay+0xc>
  {
  }
}
 8010bfc:	b002      	add	sp, #8
 8010bfe:	bd10      	pop	{r4, pc}

08010c00 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8010c00:	4b01      	ldr	r3, [pc, #4]	; (8010c08 <HAL_GetREVID+0x8>)
 8010c02:	6818      	ldr	r0, [r3, #0]
 8010c04:	0c00      	lsrs	r0, r0, #16
}
 8010c06:	4770      	bx	lr
 8010c08:	40015800 	.word	0x40015800

08010c0c <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8010c0c:	4b02      	ldr	r3, [pc, #8]	; (8010c18 <HAL_GetDEVID+0xc>)
 8010c0e:	6818      	ldr	r0, [r3, #0]
 8010c10:	0500      	lsls	r0, r0, #20
 8010c12:	0d00      	lsrs	r0, r0, #20
}
 8010c14:	4770      	bx	lr
 8010c16:	46c0      	nop			; (mov r8, r8)
 8010c18:	40015800 	.word	0x40015800

08010c1c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8010c1c:	b570      	push	{r4, r5, r6, lr}
  if((int32_t)(IRQn) < 0) {
 8010c1e:	2800      	cmp	r0, #0
 8010c20:	db14      	blt.n	8010c4c <HAL_NVIC_SetPriority+0x30>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010c22:	0884      	lsrs	r4, r0, #2
 8010c24:	00a4      	lsls	r4, r4, #2
 8010c26:	4b14      	ldr	r3, [pc, #80]	; (8010c78 <HAL_NVIC_SetPriority+0x5c>)
 8010c28:	469c      	mov	ip, r3
 8010c2a:	4464      	add	r4, ip
 8010c2c:	26c0      	movs	r6, #192	; 0xc0
 8010c2e:	00b6      	lsls	r6, r6, #2
 8010c30:	59a5      	ldr	r5, [r4, r6]
 8010c32:	2203      	movs	r2, #3
 8010c34:	4010      	ands	r0, r2
 8010c36:	00c0      	lsls	r0, r0, #3
 8010c38:	23ff      	movs	r3, #255	; 0xff
 8010c3a:	001a      	movs	r2, r3
 8010c3c:	4082      	lsls	r2, r0
 8010c3e:	4395      	bics	r5, r2
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010c40:	0189      	lsls	r1, r1, #6
 8010c42:	400b      	ands	r3, r1
 8010c44:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010c46:	432b      	orrs	r3, r5
 8010c48:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8010c4a:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010c4c:	230f      	movs	r3, #15
 8010c4e:	4003      	ands	r3, r0
 8010c50:	3b08      	subs	r3, #8
 8010c52:	089b      	lsrs	r3, r3, #2
 8010c54:	009b      	lsls	r3, r3, #2
 8010c56:	4a09      	ldr	r2, [pc, #36]	; (8010c7c <HAL_NVIC_SetPriority+0x60>)
 8010c58:	4694      	mov	ip, r2
 8010c5a:	4463      	add	r3, ip
 8010c5c:	69dd      	ldr	r5, [r3, #28]
 8010c5e:	2403      	movs	r4, #3
 8010c60:	4020      	ands	r0, r4
 8010c62:	00c0      	lsls	r0, r0, #3
 8010c64:	22ff      	movs	r2, #255	; 0xff
 8010c66:	0014      	movs	r4, r2
 8010c68:	4084      	lsls	r4, r0
 8010c6a:	43a5      	bics	r5, r4
       (((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8010c6c:	0189      	lsls	r1, r1, #6
 8010c6e:	400a      	ands	r2, r1
 8010c70:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010c72:	432a      	orrs	r2, r5
 8010c74:	61da      	str	r2, [r3, #28]
 8010c76:	e7e8      	b.n	8010c4a <HAL_NVIC_SetPriority+0x2e>
 8010c78:	e000e100 	.word	0xe000e100
 8010c7c:	e000ed00 	.word	0xe000ed00

08010c80 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010c80:	231f      	movs	r3, #31
 8010c82:	4018      	ands	r0, r3
 8010c84:	3b1e      	subs	r3, #30
 8010c86:	4083      	lsls	r3, r0
 8010c88:	4a01      	ldr	r2, [pc, #4]	; (8010c90 <HAL_NVIC_EnableIRQ+0x10>)
 8010c8a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8010c8c:	4770      	bx	lr
 8010c8e:	46c0      	nop			; (mov r8, r8)
 8010c90:	e000e100 	.word	0xe000e100

08010c94 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8010c94:	231f      	movs	r3, #31
 8010c96:	4018      	ands	r0, r3
 8010c98:	3b1e      	subs	r3, #30
 8010c9a:	4083      	lsls	r3, r0
 8010c9c:	4901      	ldr	r1, [pc, #4]	; (8010ca4 <HAL_NVIC_DisableIRQ+0x10>)
 8010c9e:	2280      	movs	r2, #128	; 0x80
 8010ca0:	508b      	str	r3, [r1, r2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8010ca2:	4770      	bx	lr
 8010ca4:	e000e100 	.word	0xe000e100

08010ca8 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8010ca8:	3801      	subs	r0, #1
 8010caa:	2380      	movs	r3, #128	; 0x80
 8010cac:	045b      	lsls	r3, r3, #17
 8010cae:	4298      	cmp	r0, r3
 8010cb0:	d20f      	bcs.n	8010cd2 <HAL_SYSTICK_Config+0x2a>

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010cb2:	4a09      	ldr	r2, [pc, #36]	; (8010cd8 <HAL_SYSTICK_Config+0x30>)
 8010cb4:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8010cb6:	4809      	ldr	r0, [pc, #36]	; (8010cdc <HAL_SYSTICK_Config+0x34>)
 8010cb8:	6a03      	ldr	r3, [r0, #32]
 8010cba:	021b      	lsls	r3, r3, #8
 8010cbc:	0a1b      	lsrs	r3, r3, #8
 8010cbe:	21c0      	movs	r1, #192	; 0xc0
 8010cc0:	0609      	lsls	r1, r1, #24
 8010cc2:	430b      	orrs	r3, r1
 8010cc4:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8010cca:	3307      	adds	r3, #7
 8010ccc:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010cce:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8010cd0:	4770      	bx	lr
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk) { return (1UL); }    /* Reload value impossible */
 8010cd2:	2001      	movs	r0, #1
   return SysTick_Config(TicksNumb);
 8010cd4:	e7fc      	b.n	8010cd0 <HAL_SYSTICK_Config+0x28>
 8010cd6:	46c0      	nop			; (mov r8, r8)
 8010cd8:	e000e010 	.word	0xe000e010
 8010cdc:	e000ed00 	.word	0xe000ed00

08010ce0 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8010ce0:	2804      	cmp	r0, #4
 8010ce2:	d005      	beq.n	8010cf0 <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8010ce4:	4a05      	ldr	r2, [pc, #20]	; (8010cfc <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8010ce6:	6813      	ldr	r3, [r2, #0]
 8010ce8:	2104      	movs	r1, #4
 8010cea:	438b      	bics	r3, r1
 8010cec:	6013      	str	r3, [r2, #0]
  }
}
 8010cee:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8010cf0:	4a02      	ldr	r2, [pc, #8]	; (8010cfc <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 8010cf2:	6813      	ldr	r3, [r2, #0]
 8010cf4:	2104      	movs	r1, #4
 8010cf6:	430b      	orrs	r3, r1
 8010cf8:	6013      	str	r3, [r2, #0]
 8010cfa:	e7f8      	b.n	8010cee <HAL_SYSTICK_CLKSourceConfig+0xe>
 8010cfc:	e000e010 	.word	0xe000e010

08010d00 <CRC_Handle_8>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8010d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d02:	0015      	movs	r5, r2
  uint32_t i = 0; /* input data buffer index */
  
   /* Processing time optimization: 4 bytes are entered in a row with a single word write,
    * last bytes must be carefully fed to the CRC calculator to ensure a correct type
    * handling by the IP */
   for(i = 0; i < (BufferLength/4); i++)
 8010d04:	0892      	lsrs	r2, r2, #2
 8010d06:	2d03      	cmp	r5, #3
 8010d08:	d927      	bls.n	8010d5a <CRC_Handle_8+0x5a>
 8010d0a:	000c      	movs	r4, r1
 8010d0c:	2700      	movs	r7, #0
   {
      hcrc->Instance->DR = ((uint32_t)pBuffer[4*i]<<24) | ((uint32_t)pBuffer[4*i+1]<<16) | ((uint32_t)pBuffer[4*i+2]<<8) | (uint32_t)pBuffer[4*i+3];      
 8010d0e:	7823      	ldrb	r3, [r4, #0]
 8010d10:	061b      	lsls	r3, r3, #24
 8010d12:	7866      	ldrb	r6, [r4, #1]
 8010d14:	0436      	lsls	r6, r6, #16
 8010d16:	4333      	orrs	r3, r6
 8010d18:	78e6      	ldrb	r6, [r4, #3]
 8010d1a:	4333      	orrs	r3, r6
 8010d1c:	78a6      	ldrb	r6, [r4, #2]
 8010d1e:	0236      	lsls	r6, r6, #8
 8010d20:	4333      	orrs	r3, r6
 8010d22:	6806      	ldr	r6, [r0, #0]
 8010d24:	6033      	str	r3, [r6, #0]
   for(i = 0; i < (BufferLength/4); i++)
 8010d26:	3701      	adds	r7, #1
 8010d28:	3404      	adds	r4, #4
 8010d2a:	4297      	cmp	r7, r2
 8010d2c:	d3ef      	bcc.n	8010d0e <CRC_Handle_8+0xe>
 8010d2e:	2301      	movs	r3, #1
 8010d30:	2d03      	cmp	r5, #3
 8010d32:	d900      	bls.n	8010d36 <CRC_Handle_8+0x36>
 8010d34:	0013      	movs	r3, r2
   }
   /* last bytes specific handling */
   if ((BufferLength%4) != 0)
 8010d36:	2203      	movs	r2, #3
 8010d38:	0014      	movs	r4, r2
 8010d3a:	402c      	ands	r4, r5
 8010d3c:	422a      	tst	r2, r5
 8010d3e:	d012      	beq.n	8010d66 <CRC_Handle_8+0x66>
   {
     if  (BufferLength%4 == 1)
 8010d40:	2c01      	cmp	r4, #1
 8010d42:	d00c      	beq.n	8010d5e <CRC_Handle_8+0x5e>
     {
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
     }
     if  (BufferLength%4 == 2)
 8010d44:	2c02      	cmp	r4, #2
 8010d46:	d111      	bne.n	8010d6c <CRC_Handle_8+0x6c>
     {
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010d48:	009b      	lsls	r3, r3, #2
 8010d4a:	5cca      	ldrb	r2, [r1, r3]
 8010d4c:	0212      	lsls	r2, r2, #8
 8010d4e:	18cb      	adds	r3, r1, r3
 8010d50:	785b      	ldrb	r3, [r3, #1]
 8010d52:	4313      	orrs	r3, r2
 8010d54:	6802      	ldr	r2, [r0, #0]
 8010d56:	8013      	strh	r3, [r2, #0]
     }
     if  (BufferLength%4 == 3)
 8010d58:	e005      	b.n	8010d66 <CRC_Handle_8+0x66>
   for(i = 0; i < (BufferLength/4); i++)
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	e7eb      	b.n	8010d36 <CRC_Handle_8+0x36>
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i];
 8010d5e:	009b      	lsls	r3, r3, #2
 8010d60:	5c5b      	ldrb	r3, [r3, r1]
 8010d62:	6802      	ldr	r2, [r0, #0]
 8010d64:	7013      	strb	r3, [r2, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
     }
   }
  
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010d66:	6803      	ldr	r3, [r0, #0]
 8010d68:	6818      	ldr	r0, [r3, #0]
}
 8010d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     if  (BufferLength%4 == 3)
 8010d6c:	2c03      	cmp	r4, #3
 8010d6e:	d1fa      	bne.n	8010d66 <CRC_Handle_8+0x66>
       *(uint16_t*) (&hcrc->Instance->DR) = ((uint16_t)pBuffer[4*i]<<8) | (uint16_t)pBuffer[4*i+1];
 8010d70:	009b      	lsls	r3, r3, #2
 8010d72:	5ccc      	ldrb	r4, [r1, r3]
 8010d74:	0224      	lsls	r4, r4, #8
 8010d76:	18cb      	adds	r3, r1, r3
 8010d78:	785a      	ldrb	r2, [r3, #1]
 8010d7a:	4322      	orrs	r2, r4
 8010d7c:	6801      	ldr	r1, [r0, #0]
 8010d7e:	800a      	strh	r2, [r1, #0]
       *(uint8_t*) (&hcrc->Instance->DR) = pBuffer[4*i+2];       
 8010d80:	789b      	ldrb	r3, [r3, #2]
 8010d82:	6802      	ldr	r2, [r0, #0]
 8010d84:	7013      	strb	r3, [r2, #0]
 8010d86:	e7ee      	b.n	8010d66 <CRC_Handle_8+0x66>

08010d88 <CRC_Handle_16>:
  * @param  pBuffer: pointer to the input data buffer
  * @param  BufferLength: input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */  
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8010d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d8a:	0016      	movs	r6, r2
  uint32_t i = 0;  /* input data buffer index */
  
  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure 
   * a correct type handling by the IP */
  for(i = 0; i < (BufferLength/2); i++)
 8010d8c:	0852      	lsrs	r2, r2, #1
 8010d8e:	2e01      	cmp	r6, #1
 8010d90:	d918      	bls.n	8010dc4 <CRC_Handle_16+0x3c>
 8010d92:	000c      	movs	r4, r1
 8010d94:	2500      	movs	r5, #0
  {
    hcrc->Instance->DR = (pBuffer[2*i]<<16) | pBuffer[2*i+1];     
 8010d96:	8823      	ldrh	r3, [r4, #0]
 8010d98:	041b      	lsls	r3, r3, #16
 8010d9a:	8867      	ldrh	r7, [r4, #2]
 8010d9c:	433b      	orrs	r3, r7
 8010d9e:	6807      	ldr	r7, [r0, #0]
 8010da0:	603b      	str	r3, [r7, #0]
  for(i = 0; i < (BufferLength/2); i++)
 8010da2:	3501      	adds	r5, #1
 8010da4:	3404      	adds	r4, #4
 8010da6:	4295      	cmp	r5, r2
 8010da8:	d3f5      	bcc.n	8010d96 <CRC_Handle_16+0xe>
 8010daa:	2301      	movs	r3, #1
 8010dac:	2e01      	cmp	r6, #1
 8010dae:	d900      	bls.n	8010db2 <CRC_Handle_16+0x2a>
 8010db0:	0013      	movs	r3, r2
  }
  if ((BufferLength%2) != 0)
 8010db2:	07f2      	lsls	r2, r6, #31
 8010db4:	d503      	bpl.n	8010dbe <CRC_Handle_16+0x36>
  {
    *(uint16_t*) (&hcrc->Instance->DR) = pBuffer[2*i]; 
 8010db6:	009b      	lsls	r3, r3, #2
 8010db8:	5a5b      	ldrh	r3, [r3, r1]
 8010dba:	6802      	ldr	r2, [r0, #0]
 8010dbc:	8013      	strh	r3, [r2, #0]
  }
   
  /* Return the CRC computed value */ 
  return hcrc->Instance->DR;
 8010dbe:	6803      	ldr	r3, [r0, #0]
 8010dc0:	6818      	ldr	r0, [r3, #0]
}
 8010dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  for(i = 0; i < (BufferLength/2); i++)
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	e7f4      	b.n	8010db2 <CRC_Handle_16+0x2a>

08010dc8 <HAL_CRC_Init>:
{
 8010dc8:	b510      	push	{r4, lr}
 8010dca:	1e04      	subs	r4, r0, #0
  if(hcrc == NULL)
 8010dcc:	d029      	beq.n	8010e22 <HAL_CRC_Init+0x5a>
  if(hcrc->State == HAL_CRC_STATE_RESET)
 8010dce:	7f43      	ldrb	r3, [r0, #29]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d01e      	beq.n	8010e12 <HAL_CRC_Init+0x4a>
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8010dd4:	2302      	movs	r3, #2
 8010dd6:	7763      	strb	r3, [r4, #29]
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 8010dd8:	0020      	movs	r0, r4
 8010dda:	f000 f8ab 	bl	8010f34 <HAL_CRCEx_Init>
 8010dde:	2800      	cmp	r0, #0
 8010de0:	d121      	bne.n	8010e26 <HAL_CRC_Init+0x5e>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8010de2:	7963      	ldrb	r3, [r4, #5]
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d118      	bne.n	8010e1a <HAL_CRC_Init+0x52>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8010de8:	6823      	ldr	r3, [r4, #0]
 8010dea:	2201      	movs	r2, #1
 8010dec:	4252      	negs	r2, r2
 8010dee:	611a      	str	r2, [r3, #16]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8010df0:	6822      	ldr	r2, [r4, #0]
 8010df2:	6893      	ldr	r3, [r2, #8]
 8010df4:	2160      	movs	r1, #96	; 0x60
 8010df6:	438b      	bics	r3, r1
 8010df8:	6961      	ldr	r1, [r4, #20]
 8010dfa:	430b      	orrs	r3, r1
 8010dfc:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8010dfe:	6822      	ldr	r2, [r4, #0]
 8010e00:	6893      	ldr	r3, [r2, #8]
 8010e02:	2180      	movs	r1, #128	; 0x80
 8010e04:	438b      	bics	r3, r1
 8010e06:	69a1      	ldr	r1, [r4, #24]
 8010e08:	430b      	orrs	r3, r1
 8010e0a:	6093      	str	r3, [r2, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8010e0c:	2301      	movs	r3, #1
 8010e0e:	7763      	strb	r3, [r4, #29]
}
 8010e10:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8010e12:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8010e14:	f7fc fa4e 	bl	800d2b4 <HAL_CRC_MspInit>
 8010e18:	e7dc      	b.n	8010dd4 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8010e1a:	6823      	ldr	r3, [r4, #0]
 8010e1c:	6922      	ldr	r2, [r4, #16]
 8010e1e:	611a      	str	r2, [r3, #16]
 8010e20:	e7e6      	b.n	8010df0 <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 8010e22:	2001      	movs	r0, #1
 8010e24:	e7f4      	b.n	8010e10 <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 8010e26:	2001      	movs	r0, #1
 8010e28:	e7f2      	b.n	8010e10 <HAL_CRC_Init+0x48>

08010e2a <HAL_CRC_Accumulate>:
{
 8010e2a:	b510      	push	{r4, lr}
 8010e2c:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010e2e:	7f03      	ldrb	r3, [r0, #28]
 8010e30:	2b01      	cmp	r3, #1
 8010e32:	d023      	beq.n	8010e7c <HAL_CRC_Accumulate+0x52>
 8010e34:	2301      	movs	r3, #1
 8010e36:	7703      	strb	r3, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010e38:	3301      	adds	r3, #1
 8010e3a:	7743      	strb	r3, [r0, #29]
  switch (hcrc->InputDataFormat)
 8010e3c:	6a03      	ldr	r3, [r0, #32]
 8010e3e:	2b02      	cmp	r3, #2
 8010e40:	d019      	beq.n	8010e76 <HAL_CRC_Accumulate+0x4c>
 8010e42:	2b03      	cmp	r3, #3
 8010e44:	d007      	beq.n	8010e56 <HAL_CRC_Accumulate+0x2c>
 8010e46:	2b01      	cmp	r3, #1
 8010e48:	d012      	beq.n	8010e70 <HAL_CRC_Accumulate+0x46>
 8010e4a:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 8010e4c:	2301      	movs	r3, #1
 8010e4e:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010e50:	2300      	movs	r3, #0
 8010e52:	7723      	strb	r3, [r4, #28]
}
 8010e54:	bd10      	pop	{r4, pc}
      for(index = 0; index < BufferLength; index++)
 8010e56:	2a00      	cmp	r2, #0
 8010e58:	d007      	beq.n	8010e6a <HAL_CRC_Accumulate+0x40>
 8010e5a:	000b      	movs	r3, r1
 8010e5c:	0092      	lsls	r2, r2, #2
 8010e5e:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 8010e60:	6822      	ldr	r2, [r4, #0]
 8010e62:	cb01      	ldmia	r3!, {r0}
 8010e64:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 8010e66:	428b      	cmp	r3, r1
 8010e68:	d1fa      	bne.n	8010e60 <HAL_CRC_Accumulate+0x36>
      temp = hcrc->Instance->DR;
 8010e6a:	6823      	ldr	r3, [r4, #0]
 8010e6c:	6818      	ldr	r0, [r3, #0]
      break;
 8010e6e:	e7ed      	b.n	8010e4c <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010e70:	f7ff ff46 	bl	8010d00 <CRC_Handle_8>
      break;
 8010e74:	e7ea      	b.n	8010e4c <HAL_CRC_Accumulate+0x22>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010e76:	f7ff ff87 	bl	8010d88 <CRC_Handle_16>
      break;
 8010e7a:	e7e7      	b.n	8010e4c <HAL_CRC_Accumulate+0x22>
  __HAL_LOCK(hcrc); 
 8010e7c:	2002      	movs	r0, #2
 8010e7e:	e7e9      	b.n	8010e54 <HAL_CRC_Accumulate+0x2a>

08010e80 <HAL_CRC_Calculate>:
{
 8010e80:	b570      	push	{r4, r5, r6, lr}
 8010e82:	0004      	movs	r4, r0
  __HAL_LOCK(hcrc); 
 8010e84:	7f03      	ldrb	r3, [r0, #28]
 8010e86:	2b01      	cmp	r3, #1
 8010e88:	d029      	beq.n	8010ede <HAL_CRC_Calculate+0x5e>
 8010e8a:	2501      	movs	r5, #1
 8010e8c:	7705      	strb	r5, [r0, #28]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8010e8e:	2302      	movs	r3, #2
 8010e90:	7743      	strb	r3, [r0, #29]
  __HAL_CRC_DR_RESET(hcrc);
 8010e92:	6800      	ldr	r0, [r0, #0]
 8010e94:	6883      	ldr	r3, [r0, #8]
 8010e96:	432b      	orrs	r3, r5
 8010e98:	6083      	str	r3, [r0, #8]
  switch (hcrc->InputDataFormat)
 8010e9a:	6a23      	ldr	r3, [r4, #32]
 8010e9c:	2b02      	cmp	r3, #2
 8010e9e:	d01a      	beq.n	8010ed6 <HAL_CRC_Calculate+0x56>
 8010ea0:	2b03      	cmp	r3, #3
 8010ea2:	d007      	beq.n	8010eb4 <HAL_CRC_Calculate+0x34>
 8010ea4:	2b01      	cmp	r3, #1
 8010ea6:	d012      	beq.n	8010ece <HAL_CRC_Calculate+0x4e>
 8010ea8:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY; 
 8010eaa:	2301      	movs	r3, #1
 8010eac:	7763      	strb	r3, [r4, #29]
  __HAL_UNLOCK(hcrc);
 8010eae:	2300      	movs	r3, #0
 8010eb0:	7723      	strb	r3, [r4, #28]
}
 8010eb2:	bd70      	pop	{r4, r5, r6, pc}
      for(index = 0; index < BufferLength; index++)
 8010eb4:	2a00      	cmp	r2, #0
 8010eb6:	d007      	beq.n	8010ec8 <HAL_CRC_Calculate+0x48>
 8010eb8:	000b      	movs	r3, r1
 8010eba:	0092      	lsls	r2, r2, #2
 8010ebc:	1889      	adds	r1, r1, r2
        hcrc->Instance->DR = pBuffer[index];
 8010ebe:	6822      	ldr	r2, [r4, #0]
 8010ec0:	cb01      	ldmia	r3!, {r0}
 8010ec2:	6010      	str	r0, [r2, #0]
      for(index = 0; index < BufferLength; index++)
 8010ec4:	428b      	cmp	r3, r1
 8010ec6:	d1fa      	bne.n	8010ebe <HAL_CRC_Calculate+0x3e>
      temp = hcrc->Instance->DR;
 8010ec8:	6823      	ldr	r3, [r4, #0]
 8010eca:	6818      	ldr	r0, [r3, #0]
      break;
 8010ecc:	e7ed      	b.n	8010eaa <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_8(hcrc, (uint8_t*)pBuffer, BufferLength);
 8010ece:	0020      	movs	r0, r4
 8010ed0:	f7ff ff16 	bl	8010d00 <CRC_Handle_8>
      break;
 8010ed4:	e7e9      	b.n	8010eaa <HAL_CRC_Calculate+0x2a>
      temp = CRC_Handle_16(hcrc, (uint16_t*)pBuffer, BufferLength);
 8010ed6:	0020      	movs	r0, r4
 8010ed8:	f7ff ff56 	bl	8010d88 <CRC_Handle_16>
      break;
 8010edc:	e7e5      	b.n	8010eaa <HAL_CRC_Calculate+0x2a>
  __HAL_LOCK(hcrc); 
 8010ede:	2002      	movs	r0, #2
 8010ee0:	e7e7      	b.n	8010eb2 <HAL_CRC_Calculate+0x32>

08010ee2 <HAL_CRCEx_Polynomial_Set>:
  *          @arg CRC_POLYLENGTH_16B: 16-bit long CRC (generating polynomial of degree 16)
  *          @arg CRC_POLYLENGTH_32B: 32-bit long CRC (generating polynomial of degree 32)                
  * @retval HAL status
  */                                   
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8010ee2:	b530      	push	{r4, r5, lr}
  uint32_t msb = 31; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8010ee4:	231f      	movs	r3, #31
   * definition. HAL_ERROR is reported if Pol degree is 
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while (((Pol & (1U << msb)) == 0) && (msb-- > 0))
 8010ee6:	2501      	movs	r5, #1
 8010ee8:	002c      	movs	r4, r5
 8010eea:	409c      	lsls	r4, r3
 8010eec:	4221      	tst	r1, r4
 8010eee:	d105      	bne.n	8010efc <HAL_CRCEx_Polynomial_Set+0x1a>
 8010ef0:	3b01      	subs	r3, #1
 8010ef2:	d2f9      	bcs.n	8010ee8 <HAL_CRCEx_Polynomial_Set+0x6>
  {}

  switch (PolyLength)
 8010ef4:	2a10      	cmp	r2, #16
 8010ef6:	d103      	bne.n	8010f00 <HAL_CRCEx_Polynomial_Set+0x1e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      { 
        return  HAL_ERROR;
 8010ef8:	2001      	movs	r0, #1
 8010efa:	e00e      	b.n	8010f1a <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8010efc:	2a10      	cmp	r2, #16
 8010efe:	d011      	beq.n	8010f24 <HAL_CRCEx_Polynomial_Set+0x42>
 8010f00:	2a18      	cmp	r2, #24
 8010f02:	d00b      	beq.n	8010f1c <HAL_CRCEx_Polynomial_Set+0x3a>
 8010f04:	2a08      	cmp	r2, #8
 8010f06:	d011      	beq.n	8010f2c <HAL_CRCEx_Polynomial_Set+0x4a>
    default:
      break;
  }

  /* set generating polynomial */
  WRITE_REG(hcrc->Instance->POL, Pol);
 8010f08:	6803      	ldr	r3, [r0, #0]
 8010f0a:	6159      	str	r1, [r3, #20]
  
  /* set generating polynomial size */
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);  
 8010f0c:	6801      	ldr	r1, [r0, #0]
 8010f0e:	688b      	ldr	r3, [r1, #8]
 8010f10:	2018      	movs	r0, #24
 8010f12:	4383      	bics	r3, r0
 8010f14:	431a      	orrs	r2, r3
 8010f16:	608a      	str	r2, [r1, #8]
  
  /* Return function status */
  return HAL_OK;
 8010f18:	2000      	movs	r0, #0
}
 8010f1a:	bd30      	pop	{r4, r5, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8010f1c:	2b06      	cmp	r3, #6
 8010f1e:	d9f3      	bls.n	8010f08 <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 8010f20:	2001      	movs	r0, #1
 8010f22:	e7fa      	b.n	8010f1a <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_8B)
 8010f24:	2b07      	cmp	r3, #7
 8010f26:	d9ef      	bls.n	8010f08 <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 8010f28:	2001      	movs	r0, #1
 8010f2a:	e7f6      	b.n	8010f1a <HAL_CRCEx_Polynomial_Set+0x38>
      if (msb >= HAL_CRC_LENGTH_16B)
 8010f2c:	2b0f      	cmp	r3, #15
 8010f2e:	d9eb      	bls.n	8010f08 <HAL_CRCEx_Polynomial_Set+0x26>
        return  HAL_ERROR;
 8010f30:	2001      	movs	r0, #1
 8010f32:	e7f2      	b.n	8010f1a <HAL_CRCEx_Polynomial_Set+0x38>

08010f34 <HAL_CRCEx_Init>:
{
 8010f34:	b510      	push	{r4, lr}
 8010f36:	0003      	movs	r3, r0
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8010f38:	7900      	ldrb	r0, [r0, #4]
 8010f3a:	2800      	cmp	r0, #0
 8010f3c:	d108      	bne.n	8010f50 <HAL_CRCEx_Init+0x1c>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);  
 8010f3e:	681a      	ldr	r2, [r3, #0]
 8010f40:	4908      	ldr	r1, [pc, #32]	; (8010f64 <HAL_CRCEx_Init+0x30>)
 8010f42:	6151      	str	r1, [r2, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8010f44:	681a      	ldr	r2, [r3, #0]
 8010f46:	6893      	ldr	r3, [r2, #8]
 8010f48:	2118      	movs	r1, #24
 8010f4a:	438b      	bics	r3, r1
 8010f4c:	6093      	str	r3, [r2, #8]
}
 8010f4e:	bd10      	pop	{r4, pc}
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8010f50:	68da      	ldr	r2, [r3, #12]
 8010f52:	6899      	ldr	r1, [r3, #8]
 8010f54:	0018      	movs	r0, r3
 8010f56:	f7ff ffc4 	bl	8010ee2 <HAL_CRCEx_Polynomial_Set>
 8010f5a:	1e43      	subs	r3, r0, #1
 8010f5c:	4198      	sbcs	r0, r3
      return HAL_ERROR;
 8010f5e:	b2c0      	uxtb	r0, r0
 8010f60:	e7f5      	b.n	8010f4e <HAL_CRCEx_Init+0x1a>
 8010f62:	46c0      	nop			; (mov r8, r8)
 8010f64:	04c11db7 	.word	0x04c11db7

08010f68 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8010f68:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8010f6a:	2800      	cmp	r0, #0
 8010f6c:	d022      	beq.n	8010fb4 <HAL_DMA_Init+0x4c>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(hdma->State == HAL_DMA_STATE_RESET)
 8010f6e:	2321      	movs	r3, #33	; 0x21
 8010f70:	5cc3      	ldrb	r3, [r0, r3]
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d102      	bne.n	8010f7c <HAL_DMA_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 8010f76:	3320      	adds	r3, #32
 8010f78:	2200      	movs	r2, #0
 8010f7a:	54c2      	strb	r2, [r0, r3]
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8010f7c:	2121      	movs	r1, #33	; 0x21
 8010f7e:	2302      	movs	r3, #2
 8010f80:	5443      	strb	r3, [r0, r1]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8010f82:	6804      	ldr	r4, [r0, #0]
 8010f84:	6823      	ldr	r3, [r4, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8010f86:	4a0c      	ldr	r2, [pc, #48]	; (8010fb8 <HAL_DMA_Init+0x50>)
 8010f88:	401a      	ands	r2, r3
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8010f8a:	6843      	ldr	r3, [r0, #4]
 8010f8c:	6885      	ldr	r5, [r0, #8]
 8010f8e:	432b      	orrs	r3, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8010f90:	68c5      	ldr	r5, [r0, #12]
 8010f92:	432b      	orrs	r3, r5
 8010f94:	6905      	ldr	r5, [r0, #16]
 8010f96:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8010f98:	6945      	ldr	r5, [r0, #20]
 8010f9a:	432b      	orrs	r3, r5
 8010f9c:	6985      	ldr	r5, [r0, #24]
 8010f9e:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8010fa0:	69c5      	ldr	r5, [r0, #28]
 8010fa2:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 8010fa4:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8010fa6:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8010fa8:	2300      	movs	r3, #0
 8010faa:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8010fac:	3301      	adds	r3, #1
 8010fae:	5443      	strb	r3, [r0, r1]
  
  return HAL_OK;
 8010fb0:	2000      	movs	r0, #0
}  
 8010fb2:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8010fb4:	2001      	movs	r0, #1
 8010fb6:	e7fc      	b.n	8010fb2 <HAL_DMA_Init+0x4a>
 8010fb8:	ffffc00f 	.word	0xffffc00f

08010fbc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8010fbc:	b570      	push	{r4, r5, r6, lr}
  /* Process locked */
  __HAL_LOCK(hdma);
 8010fbe:	2420      	movs	r4, #32
 8010fc0:	5d04      	ldrb	r4, [r0, r4]
 8010fc2:	2c01      	cmp	r4, #1
 8010fc4:	d02d      	beq.n	8011022 <HAL_DMA_Start_IT+0x66>
 8010fc6:	2601      	movs	r6, #1
 8010fc8:	2420      	movs	r4, #32
 8010fca:	5506      	strb	r6, [r0, r4]

  /* Change DMA peripheral state */  
  hdma->State = HAL_DMA_STATE_BUSY;  
 8010fcc:	3401      	adds	r4, #1
 8010fce:	2502      	movs	r5, #2
 8010fd0:	5505      	strb	r5, [r0, r4]

   /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8010fd2:	6805      	ldr	r5, [r0, #0]
 8010fd4:	682c      	ldr	r4, [r5, #0]
 8010fd6:	43b4      	bics	r4, r6
 8010fd8:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8010fda:	6804      	ldr	r4, [r0, #0]
 8010fdc:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8010fde:	6843      	ldr	r3, [r0, #4]
 8010fe0:	2b10      	cmp	r3, #16
 8010fe2:	d019      	beq.n	8011018 <HAL_DMA_Start_IT+0x5c>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8010fe4:	6803      	ldr	r3, [r0, #0]
 8010fe6:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8010fe8:	6803      	ldr	r3, [r0, #0]
 8010fea:	60da      	str	r2, [r3, #12]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TC);
 8010fec:	6802      	ldr	r2, [r0, #0]
 8010fee:	6813      	ldr	r3, [r2, #0]
 8010ff0:	2102      	movs	r1, #2
 8010ff2:	430b      	orrs	r3, r1
 8010ff4:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);  
 8010ff6:	6802      	ldr	r2, [r0, #0]
 8010ff8:	6813      	ldr	r3, [r2, #0]
 8010ffa:	3102      	adds	r1, #2
 8010ffc:	430b      	orrs	r3, r1
 8010ffe:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE_IT(hdma, DMA_IT_TE);
 8011000:	6802      	ldr	r2, [r0, #0]
 8011002:	6813      	ldr	r3, [r2, #0]
 8011004:	3104      	adds	r1, #4
 8011006:	430b      	orrs	r3, r1
 8011008:	6013      	str	r3, [r2, #0]
  __HAL_DMA_ENABLE(hdma);   
 801100a:	6802      	ldr	r2, [r0, #0]
 801100c:	6813      	ldr	r3, [r2, #0]
 801100e:	3907      	subs	r1, #7
 8011010:	430b      	orrs	r3, r1
 8011012:	6013      	str	r3, [r2, #0]
  return HAL_OK;    
 8011014:	2000      	movs	r0, #0
} 
 8011016:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CPAR = DstAddress;
 8011018:	6803      	ldr	r3, [r0, #0]
 801101a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 801101c:	6803      	ldr	r3, [r0, #0]
 801101e:	60d9      	str	r1, [r3, #12]
 8011020:	e7e4      	b.n	8010fec <HAL_DMA_Start_IT+0x30>
  __HAL_LOCK(hdma);
 8011022:	2002      	movs	r0, #2
 8011024:	e7f7      	b.n	8011016 <HAL_DMA_Start_IT+0x5a>

08011026 <HAL_DMA_Abort>:
{
 8011026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011028:	0004      	movs	r4, r0
  __HAL_DMA_DISABLE(hdma);
 801102a:	6802      	ldr	r2, [r0, #0]
 801102c:	6813      	ldr	r3, [r2, #0]
 801102e:	2101      	movs	r1, #1
 8011030:	438b      	bics	r3, r1
 8011032:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8011034:	f7ff fdd0 	bl	8010bd8 <HAL_GetTick>
 8011038:	0005      	movs	r5, r0
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 801103a:	2601      	movs	r6, #1
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 801103c:	27fa      	movs	r7, #250	; 0xfa
 801103e:	00bf      	lsls	r7, r7, #2
  while((hdma->Instance->CCR & DMA_CCR_EN) != 0) 
 8011040:	6823      	ldr	r3, [r4, #0]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	421e      	tst	r6, r3
 8011046:	d00f      	beq.n	8011068 <HAL_DMA_Abort+0x42>
    if((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8011048:	f7ff fdc6 	bl	8010bd8 <HAL_GetTick>
 801104c:	1b40      	subs	r0, r0, r5
 801104e:	42b8      	cmp	r0, r7
 8011050:	d9f6      	bls.n	8011040 <HAL_DMA_Abort+0x1a>
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TIMEOUT);
 8011052:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011054:	2220      	movs	r2, #32
 8011056:	4313      	orrs	r3, r2
 8011058:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 801105a:	2321      	movs	r3, #33	; 0x21
 801105c:	2103      	movs	r1, #3
 801105e:	54e1      	strb	r1, [r4, r3]
      __HAL_UNLOCK(hdma);
 8011060:	2300      	movs	r3, #0
 8011062:	54a3      	strb	r3, [r4, r2]
      return HAL_TIMEOUT;
 8011064:	2003      	movs	r0, #3
 8011066:	e006      	b.n	8011076 <HAL_DMA_Abort+0x50>
  hdma->State = HAL_DMA_STATE_READY; 
 8011068:	2321      	movs	r3, #33	; 0x21
 801106a:	2201      	movs	r2, #1
 801106c:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hdma);
 801106e:	3b01      	subs	r3, #1
 8011070:	2200      	movs	r2, #0
 8011072:	54e2      	strb	r2, [r4, r3]
  return HAL_OK; 
 8011074:	2000      	movs	r0, #0
}
 8011076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011078 <HAL_DMA_IRQHandler>:
{        
 8011078:	b510      	push	{r4, lr}
 801107a:	0004      	movs	r4, r0
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801107c:	6803      	ldr	r3, [r0, #0]
 801107e:	4ab1      	ldr	r2, [pc, #708]	; (8011344 <HAL_DMA_IRQHandler+0x2cc>)
 8011080:	4293      	cmp	r3, r2
 8011082:	d97e      	bls.n	8011182 <HAL_DMA_IRQHandler+0x10a>
 8011084:	4ab0      	ldr	r2, [pc, #704]	; (8011348 <HAL_DMA_IRQHandler+0x2d0>)
 8011086:	6811      	ldr	r1, [r2, #0]
 8011088:	4ab0      	ldr	r2, [pc, #704]	; (801134c <HAL_DMA_IRQHandler+0x2d4>)
 801108a:	4293      	cmp	r3, r2
 801108c:	d026      	beq.n	80110dc <HAL_DMA_IRQHandler+0x64>
 801108e:	4ab0      	ldr	r2, [pc, #704]	; (8011350 <HAL_DMA_IRQHandler+0x2d8>)
 8011090:	4293      	cmp	r3, r2
 8011092:	d05e      	beq.n	8011152 <HAL_DMA_IRQHandler+0xda>
 8011094:	4aaf      	ldr	r2, [pc, #700]	; (8011354 <HAL_DMA_IRQHandler+0x2dc>)
 8011096:	4293      	cmp	r3, r2
 8011098:	d05d      	beq.n	8011156 <HAL_DMA_IRQHandler+0xde>
 801109a:	4aaf      	ldr	r2, [pc, #700]	; (8011358 <HAL_DMA_IRQHandler+0x2e0>)
 801109c:	4293      	cmp	r3, r2
 801109e:	d05d      	beq.n	801115c <HAL_DMA_IRQHandler+0xe4>
 80110a0:	4aae      	ldr	r2, [pc, #696]	; (801135c <HAL_DMA_IRQHandler+0x2e4>)
 80110a2:	4293      	cmp	r3, r2
 80110a4:	d05d      	beq.n	8011162 <HAL_DMA_IRQHandler+0xea>
 80110a6:	4aae      	ldr	r2, [pc, #696]	; (8011360 <HAL_DMA_IRQHandler+0x2e8>)
 80110a8:	4293      	cmp	r3, r2
 80110aa:	d05d      	beq.n	8011168 <HAL_DMA_IRQHandler+0xf0>
 80110ac:	4aa5      	ldr	r2, [pc, #660]	; (8011344 <HAL_DMA_IRQHandler+0x2cc>)
 80110ae:	4293      	cmp	r3, r2
 80110b0:	d05d      	beq.n	801116e <HAL_DMA_IRQHandler+0xf6>
 80110b2:	4aac      	ldr	r2, [pc, #688]	; (8011364 <HAL_DMA_IRQHandler+0x2ec>)
 80110b4:	4293      	cmp	r3, r2
 80110b6:	d05d      	beq.n	8011174 <HAL_DMA_IRQHandler+0xfc>
 80110b8:	4aab      	ldr	r2, [pc, #684]	; (8011368 <HAL_DMA_IRQHandler+0x2f0>)
 80110ba:	4293      	cmp	r3, r2
 80110bc:	d05c      	beq.n	8011178 <HAL_DMA_IRQHandler+0x100>
 80110be:	4aab      	ldr	r2, [pc, #684]	; (801136c <HAL_DMA_IRQHandler+0x2f4>)
 80110c0:	4293      	cmp	r3, r2
 80110c2:	d05b      	beq.n	801117c <HAL_DMA_IRQHandler+0x104>
 80110c4:	4aaa      	ldr	r2, [pc, #680]	; (8011370 <HAL_DMA_IRQHandler+0x2f8>)
 80110c6:	189a      	adds	r2, r3, r2
 80110c8:	4250      	negs	r0, r2
 80110ca:	4142      	adcs	r2, r0
 80110cc:	4252      	negs	r2, r2
 80110ce:	48a9      	ldr	r0, [pc, #676]	; (8011374 <HAL_DMA_IRQHandler+0x2fc>)
 80110d0:	4002      	ands	r2, r0
 80110d2:	2080      	movs	r0, #128	; 0x80
 80110d4:	0300      	lsls	r0, r0, #12
 80110d6:	4684      	mov	ip, r0
 80110d8:	4462      	add	r2, ip
 80110da:	e000      	b.n	80110de <HAL_DMA_IRQHandler+0x66>
 80110dc:	2208      	movs	r2, #8
 80110de:	420a      	tst	r2, r1
 80110e0:	d001      	beq.n	80110e6 <HAL_DMA_IRQHandler+0x6e>
 80110e2:	f000 fbfb 	bl	80118dc <HAL_DMA_IRQHandler+0x864>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80110e6:	4a98      	ldr	r2, [pc, #608]	; (8011348 <HAL_DMA_IRQHandler+0x2d0>)
 80110e8:	6811      	ldr	r1, [r2, #0]
 80110ea:	4a98      	ldr	r2, [pc, #608]	; (801134c <HAL_DMA_IRQHandler+0x2d4>)
 80110ec:	4293      	cmp	r3, r2
 80110ee:	d100      	bne.n	80110f2 <HAL_DMA_IRQHandler+0x7a>
 80110f0:	e18d      	b.n	801140e <HAL_DMA_IRQHandler+0x396>
 80110f2:	4a97      	ldr	r2, [pc, #604]	; (8011350 <HAL_DMA_IRQHandler+0x2d8>)
 80110f4:	4293      	cmp	r3, r2
 80110f6:	d100      	bne.n	80110fa <HAL_DMA_IRQHandler+0x82>
 80110f8:	e18e      	b.n	8011418 <HAL_DMA_IRQHandler+0x3a0>
 80110fa:	4a96      	ldr	r2, [pc, #600]	; (8011354 <HAL_DMA_IRQHandler+0x2dc>)
 80110fc:	4293      	cmp	r3, r2
 80110fe:	d100      	bne.n	8011102 <HAL_DMA_IRQHandler+0x8a>
 8011100:	e18c      	b.n	801141c <HAL_DMA_IRQHandler+0x3a4>
 8011102:	4a95      	ldr	r2, [pc, #596]	; (8011358 <HAL_DMA_IRQHandler+0x2e0>)
 8011104:	4293      	cmp	r3, r2
 8011106:	d100      	bne.n	801110a <HAL_DMA_IRQHandler+0x92>
 8011108:	e18b      	b.n	8011422 <HAL_DMA_IRQHandler+0x3aa>
 801110a:	4a94      	ldr	r2, [pc, #592]	; (801135c <HAL_DMA_IRQHandler+0x2e4>)
 801110c:	4293      	cmp	r3, r2
 801110e:	d100      	bne.n	8011112 <HAL_DMA_IRQHandler+0x9a>
 8011110:	e18a      	b.n	8011428 <HAL_DMA_IRQHandler+0x3b0>
 8011112:	4a93      	ldr	r2, [pc, #588]	; (8011360 <HAL_DMA_IRQHandler+0x2e8>)
 8011114:	4293      	cmp	r3, r2
 8011116:	d100      	bne.n	801111a <HAL_DMA_IRQHandler+0xa2>
 8011118:	e189      	b.n	801142e <HAL_DMA_IRQHandler+0x3b6>
 801111a:	4a8a      	ldr	r2, [pc, #552]	; (8011344 <HAL_DMA_IRQHandler+0x2cc>)
 801111c:	4293      	cmp	r3, r2
 801111e:	d100      	bne.n	8011122 <HAL_DMA_IRQHandler+0xaa>
 8011120:	e188      	b.n	8011434 <HAL_DMA_IRQHandler+0x3bc>
 8011122:	4a90      	ldr	r2, [pc, #576]	; (8011364 <HAL_DMA_IRQHandler+0x2ec>)
 8011124:	4293      	cmp	r3, r2
 8011126:	d100      	bne.n	801112a <HAL_DMA_IRQHandler+0xb2>
 8011128:	e187      	b.n	801143a <HAL_DMA_IRQHandler+0x3c2>
 801112a:	4a8f      	ldr	r2, [pc, #572]	; (8011368 <HAL_DMA_IRQHandler+0x2f0>)
 801112c:	4293      	cmp	r3, r2
 801112e:	d100      	bne.n	8011132 <HAL_DMA_IRQHandler+0xba>
 8011130:	e185      	b.n	801143e <HAL_DMA_IRQHandler+0x3c6>
 8011132:	4a8e      	ldr	r2, [pc, #568]	; (801136c <HAL_DMA_IRQHandler+0x2f4>)
 8011134:	4293      	cmp	r3, r2
 8011136:	d100      	bne.n	801113a <HAL_DMA_IRQHandler+0xc2>
 8011138:	e183      	b.n	8011442 <HAL_DMA_IRQHandler+0x3ca>
 801113a:	4a8d      	ldr	r2, [pc, #564]	; (8011370 <HAL_DMA_IRQHandler+0x2f8>)
 801113c:	189a      	adds	r2, r3, r2
 801113e:	4250      	negs	r0, r2
 8011140:	4142      	adcs	r2, r0
 8011142:	4252      	negs	r2, r2
 8011144:	488c      	ldr	r0, [pc, #560]	; (8011378 <HAL_DMA_IRQHandler+0x300>)
 8011146:	4002      	ands	r2, r0
 8011148:	2080      	movs	r0, #128	; 0x80
 801114a:	02c0      	lsls	r0, r0, #11
 801114c:	4684      	mov	ip, r0
 801114e:	4462      	add	r2, ip
 8011150:	e15e      	b.n	8011410 <HAL_DMA_IRQHandler+0x398>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8011152:	2280      	movs	r2, #128	; 0x80
 8011154:	e7c3      	b.n	80110de <HAL_DMA_IRQHandler+0x66>
 8011156:	2280      	movs	r2, #128	; 0x80
 8011158:	0112      	lsls	r2, r2, #4
 801115a:	e7c0      	b.n	80110de <HAL_DMA_IRQHandler+0x66>
 801115c:	2280      	movs	r2, #128	; 0x80
 801115e:	0212      	lsls	r2, r2, #8
 8011160:	e7bd      	b.n	80110de <HAL_DMA_IRQHandler+0x66>
 8011162:	2280      	movs	r2, #128	; 0x80
 8011164:	0312      	lsls	r2, r2, #12
 8011166:	e7ba      	b.n	80110de <HAL_DMA_IRQHandler+0x66>
 8011168:	2280      	movs	r2, #128	; 0x80
 801116a:	0412      	lsls	r2, r2, #16
 801116c:	e7b7      	b.n	80110de <HAL_DMA_IRQHandler+0x66>
 801116e:	2280      	movs	r2, #128	; 0x80
 8011170:	0512      	lsls	r2, r2, #20
 8011172:	e7b4      	b.n	80110de <HAL_DMA_IRQHandler+0x66>
 8011174:	2208      	movs	r2, #8
 8011176:	e7b2      	b.n	80110de <HAL_DMA_IRQHandler+0x66>
 8011178:	2280      	movs	r2, #128	; 0x80
 801117a:	e7b0      	b.n	80110de <HAL_DMA_IRQHandler+0x66>
 801117c:	2280      	movs	r2, #128	; 0x80
 801117e:	0112      	lsls	r2, r2, #4
 8011180:	e7ad      	b.n	80110de <HAL_DMA_IRQHandler+0x66>
 8011182:	4a7e      	ldr	r2, [pc, #504]	; (801137c <HAL_DMA_IRQHandler+0x304>)
 8011184:	6811      	ldr	r1, [r2, #0]
 8011186:	4a71      	ldr	r2, [pc, #452]	; (801134c <HAL_DMA_IRQHandler+0x2d4>)
 8011188:	4293      	cmp	r3, r2
 801118a:	d026      	beq.n	80111da <HAL_DMA_IRQHandler+0x162>
 801118c:	4a70      	ldr	r2, [pc, #448]	; (8011350 <HAL_DMA_IRQHandler+0x2d8>)
 801118e:	4293      	cmp	r3, r2
 8011190:	d05d      	beq.n	801124e <HAL_DMA_IRQHandler+0x1d6>
 8011192:	4a70      	ldr	r2, [pc, #448]	; (8011354 <HAL_DMA_IRQHandler+0x2dc>)
 8011194:	4293      	cmp	r3, r2
 8011196:	d05c      	beq.n	8011252 <HAL_DMA_IRQHandler+0x1da>
 8011198:	4a6f      	ldr	r2, [pc, #444]	; (8011358 <HAL_DMA_IRQHandler+0x2e0>)
 801119a:	4293      	cmp	r3, r2
 801119c:	d05c      	beq.n	8011258 <HAL_DMA_IRQHandler+0x1e0>
 801119e:	4a6f      	ldr	r2, [pc, #444]	; (801135c <HAL_DMA_IRQHandler+0x2e4>)
 80111a0:	4293      	cmp	r3, r2
 80111a2:	d05c      	beq.n	801125e <HAL_DMA_IRQHandler+0x1e6>
 80111a4:	4a6e      	ldr	r2, [pc, #440]	; (8011360 <HAL_DMA_IRQHandler+0x2e8>)
 80111a6:	4293      	cmp	r3, r2
 80111a8:	d05c      	beq.n	8011264 <HAL_DMA_IRQHandler+0x1ec>
 80111aa:	4a66      	ldr	r2, [pc, #408]	; (8011344 <HAL_DMA_IRQHandler+0x2cc>)
 80111ac:	4293      	cmp	r3, r2
 80111ae:	d05c      	beq.n	801126a <HAL_DMA_IRQHandler+0x1f2>
 80111b0:	4a6c      	ldr	r2, [pc, #432]	; (8011364 <HAL_DMA_IRQHandler+0x2ec>)
 80111b2:	4293      	cmp	r3, r2
 80111b4:	d05c      	beq.n	8011270 <HAL_DMA_IRQHandler+0x1f8>
 80111b6:	4a6c      	ldr	r2, [pc, #432]	; (8011368 <HAL_DMA_IRQHandler+0x2f0>)
 80111b8:	4293      	cmp	r3, r2
 80111ba:	d05b      	beq.n	8011274 <HAL_DMA_IRQHandler+0x1fc>
 80111bc:	4a6b      	ldr	r2, [pc, #428]	; (801136c <HAL_DMA_IRQHandler+0x2f4>)
 80111be:	4293      	cmp	r3, r2
 80111c0:	d05a      	beq.n	8011278 <HAL_DMA_IRQHandler+0x200>
 80111c2:	4a6b      	ldr	r2, [pc, #428]	; (8011370 <HAL_DMA_IRQHandler+0x2f8>)
 80111c4:	189a      	adds	r2, r3, r2
 80111c6:	4250      	negs	r0, r2
 80111c8:	4142      	adcs	r2, r0
 80111ca:	4252      	negs	r2, r2
 80111cc:	4869      	ldr	r0, [pc, #420]	; (8011374 <HAL_DMA_IRQHandler+0x2fc>)
 80111ce:	4002      	ands	r2, r0
 80111d0:	2080      	movs	r0, #128	; 0x80
 80111d2:	0300      	lsls	r0, r0, #12
 80111d4:	4684      	mov	ip, r0
 80111d6:	4462      	add	r2, ip
 80111d8:	e000      	b.n	80111dc <HAL_DMA_IRQHandler+0x164>
 80111da:	2208      	movs	r2, #8
 80111dc:	420a      	tst	r2, r1
 80111de:	d000      	beq.n	80111e2 <HAL_DMA_IRQHandler+0x16a>
 80111e0:	e376      	b.n	80118d0 <HAL_DMA_IRQHandler+0x858>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80111e2:	4a66      	ldr	r2, [pc, #408]	; (801137c <HAL_DMA_IRQHandler+0x304>)
 80111e4:	6811      	ldr	r1, [r2, #0]
 80111e6:	4a59      	ldr	r2, [pc, #356]	; (801134c <HAL_DMA_IRQHandler+0x2d4>)
 80111e8:	4293      	cmp	r3, r2
 80111ea:	d100      	bne.n	80111ee <HAL_DMA_IRQHandler+0x176>
 80111ec:	e12c      	b.n	8011448 <HAL_DMA_IRQHandler+0x3d0>
 80111ee:	4a58      	ldr	r2, [pc, #352]	; (8011350 <HAL_DMA_IRQHandler+0x2d8>)
 80111f0:	4293      	cmp	r3, r2
 80111f2:	d100      	bne.n	80111f6 <HAL_DMA_IRQHandler+0x17e>
 80111f4:	e16e      	b.n	80114d4 <HAL_DMA_IRQHandler+0x45c>
 80111f6:	4a57      	ldr	r2, [pc, #348]	; (8011354 <HAL_DMA_IRQHandler+0x2dc>)
 80111f8:	4293      	cmp	r3, r2
 80111fa:	d100      	bne.n	80111fe <HAL_DMA_IRQHandler+0x186>
 80111fc:	e16c      	b.n	80114d8 <HAL_DMA_IRQHandler+0x460>
 80111fe:	4a56      	ldr	r2, [pc, #344]	; (8011358 <HAL_DMA_IRQHandler+0x2e0>)
 8011200:	4293      	cmp	r3, r2
 8011202:	d100      	bne.n	8011206 <HAL_DMA_IRQHandler+0x18e>
 8011204:	e16b      	b.n	80114de <HAL_DMA_IRQHandler+0x466>
 8011206:	4a55      	ldr	r2, [pc, #340]	; (801135c <HAL_DMA_IRQHandler+0x2e4>)
 8011208:	4293      	cmp	r3, r2
 801120a:	d100      	bne.n	801120e <HAL_DMA_IRQHandler+0x196>
 801120c:	e16a      	b.n	80114e4 <HAL_DMA_IRQHandler+0x46c>
 801120e:	4a54      	ldr	r2, [pc, #336]	; (8011360 <HAL_DMA_IRQHandler+0x2e8>)
 8011210:	4293      	cmp	r3, r2
 8011212:	d100      	bne.n	8011216 <HAL_DMA_IRQHandler+0x19e>
 8011214:	e169      	b.n	80114ea <HAL_DMA_IRQHandler+0x472>
 8011216:	4a4b      	ldr	r2, [pc, #300]	; (8011344 <HAL_DMA_IRQHandler+0x2cc>)
 8011218:	4293      	cmp	r3, r2
 801121a:	d100      	bne.n	801121e <HAL_DMA_IRQHandler+0x1a6>
 801121c:	e168      	b.n	80114f0 <HAL_DMA_IRQHandler+0x478>
 801121e:	4a51      	ldr	r2, [pc, #324]	; (8011364 <HAL_DMA_IRQHandler+0x2ec>)
 8011220:	4293      	cmp	r3, r2
 8011222:	d100      	bne.n	8011226 <HAL_DMA_IRQHandler+0x1ae>
 8011224:	e167      	b.n	80114f6 <HAL_DMA_IRQHandler+0x47e>
 8011226:	4a50      	ldr	r2, [pc, #320]	; (8011368 <HAL_DMA_IRQHandler+0x2f0>)
 8011228:	4293      	cmp	r3, r2
 801122a:	d100      	bne.n	801122e <HAL_DMA_IRQHandler+0x1b6>
 801122c:	e165      	b.n	80114fa <HAL_DMA_IRQHandler+0x482>
 801122e:	4a4f      	ldr	r2, [pc, #316]	; (801136c <HAL_DMA_IRQHandler+0x2f4>)
 8011230:	4293      	cmp	r3, r2
 8011232:	d100      	bne.n	8011236 <HAL_DMA_IRQHandler+0x1be>
 8011234:	e163      	b.n	80114fe <HAL_DMA_IRQHandler+0x486>
 8011236:	4a4e      	ldr	r2, [pc, #312]	; (8011370 <HAL_DMA_IRQHandler+0x2f8>)
 8011238:	189a      	adds	r2, r3, r2
 801123a:	4250      	negs	r0, r2
 801123c:	4142      	adcs	r2, r0
 801123e:	4252      	negs	r2, r2
 8011240:	484d      	ldr	r0, [pc, #308]	; (8011378 <HAL_DMA_IRQHandler+0x300>)
 8011242:	4002      	ands	r2, r0
 8011244:	2080      	movs	r0, #128	; 0x80
 8011246:	02c0      	lsls	r0, r0, #11
 8011248:	4684      	mov	ip, r0
 801124a:	4462      	add	r2, ip
 801124c:	e0fd      	b.n	801144a <HAL_DMA_IRQHandler+0x3d2>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 801124e:	2280      	movs	r2, #128	; 0x80
 8011250:	e7c4      	b.n	80111dc <HAL_DMA_IRQHandler+0x164>
 8011252:	2280      	movs	r2, #128	; 0x80
 8011254:	0112      	lsls	r2, r2, #4
 8011256:	e7c1      	b.n	80111dc <HAL_DMA_IRQHandler+0x164>
 8011258:	2280      	movs	r2, #128	; 0x80
 801125a:	0212      	lsls	r2, r2, #8
 801125c:	e7be      	b.n	80111dc <HAL_DMA_IRQHandler+0x164>
 801125e:	2280      	movs	r2, #128	; 0x80
 8011260:	0312      	lsls	r2, r2, #12
 8011262:	e7bb      	b.n	80111dc <HAL_DMA_IRQHandler+0x164>
 8011264:	2280      	movs	r2, #128	; 0x80
 8011266:	0412      	lsls	r2, r2, #16
 8011268:	e7b8      	b.n	80111dc <HAL_DMA_IRQHandler+0x164>
 801126a:	2280      	movs	r2, #128	; 0x80
 801126c:	0512      	lsls	r2, r2, #20
 801126e:	e7b5      	b.n	80111dc <HAL_DMA_IRQHandler+0x164>
 8011270:	2208      	movs	r2, #8
 8011272:	e7b3      	b.n	80111dc <HAL_DMA_IRQHandler+0x164>
 8011274:	2280      	movs	r2, #128	; 0x80
 8011276:	e7b1      	b.n	80111dc <HAL_DMA_IRQHandler+0x164>
 8011278:	2280      	movs	r2, #128	; 0x80
 801127a:	0112      	lsls	r2, r2, #4
 801127c:	e7ae      	b.n	80111dc <HAL_DMA_IRQHandler+0x164>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 801127e:	681a      	ldr	r2, [r3, #0]
 8011280:	2108      	movs	r1, #8
 8011282:	438a      	bics	r2, r1
 8011284:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011286:	6823      	ldr	r3, [r4, #0]
 8011288:	4a2e      	ldr	r2, [pc, #184]	; (8011344 <HAL_DMA_IRQHandler+0x2cc>)
 801128a:	4293      	cmp	r3, r2
 801128c:	d978      	bls.n	8011380 <HAL_DMA_IRQHandler+0x308>
 801128e:	4a2f      	ldr	r2, [pc, #188]	; (801134c <HAL_DMA_IRQHandler+0x2d4>)
 8011290:	4293      	cmp	r3, r2
 8011292:	d027      	beq.n	80112e4 <HAL_DMA_IRQHandler+0x26c>
 8011294:	4a2e      	ldr	r2, [pc, #184]	; (8011350 <HAL_DMA_IRQHandler+0x2d8>)
 8011296:	4293      	cmp	r3, r2
 8011298:	d03c      	beq.n	8011314 <HAL_DMA_IRQHandler+0x29c>
 801129a:	4a2e      	ldr	r2, [pc, #184]	; (8011354 <HAL_DMA_IRQHandler+0x2dc>)
 801129c:	4293      	cmp	r3, r2
 801129e:	d03b      	beq.n	8011318 <HAL_DMA_IRQHandler+0x2a0>
 80112a0:	4a2d      	ldr	r2, [pc, #180]	; (8011358 <HAL_DMA_IRQHandler+0x2e0>)
 80112a2:	4293      	cmp	r3, r2
 80112a4:	d03b      	beq.n	801131e <HAL_DMA_IRQHandler+0x2a6>
 80112a6:	4a2d      	ldr	r2, [pc, #180]	; (801135c <HAL_DMA_IRQHandler+0x2e4>)
 80112a8:	4293      	cmp	r3, r2
 80112aa:	d03b      	beq.n	8011324 <HAL_DMA_IRQHandler+0x2ac>
 80112ac:	4a2c      	ldr	r2, [pc, #176]	; (8011360 <HAL_DMA_IRQHandler+0x2e8>)
 80112ae:	4293      	cmp	r3, r2
 80112b0:	d03b      	beq.n	801132a <HAL_DMA_IRQHandler+0x2b2>
 80112b2:	4a24      	ldr	r2, [pc, #144]	; (8011344 <HAL_DMA_IRQHandler+0x2cc>)
 80112b4:	4293      	cmp	r3, r2
 80112b6:	d03b      	beq.n	8011330 <HAL_DMA_IRQHandler+0x2b8>
 80112b8:	4a2a      	ldr	r2, [pc, #168]	; (8011364 <HAL_DMA_IRQHandler+0x2ec>)
 80112ba:	4293      	cmp	r3, r2
 80112bc:	d03b      	beq.n	8011336 <HAL_DMA_IRQHandler+0x2be>
 80112be:	4a2a      	ldr	r2, [pc, #168]	; (8011368 <HAL_DMA_IRQHandler+0x2f0>)
 80112c0:	4293      	cmp	r3, r2
 80112c2:	d03a      	beq.n	801133a <HAL_DMA_IRQHandler+0x2c2>
 80112c4:	4a29      	ldr	r2, [pc, #164]	; (801136c <HAL_DMA_IRQHandler+0x2f4>)
 80112c6:	4293      	cmp	r3, r2
 80112c8:	d039      	beq.n	801133e <HAL_DMA_IRQHandler+0x2c6>
 80112ca:	4a29      	ldr	r2, [pc, #164]	; (8011370 <HAL_DMA_IRQHandler+0x2f8>)
 80112cc:	4694      	mov	ip, r2
 80112ce:	4463      	add	r3, ip
 80112d0:	425a      	negs	r2, r3
 80112d2:	4153      	adcs	r3, r2
 80112d4:	425b      	negs	r3, r3
 80112d6:	4a27      	ldr	r2, [pc, #156]	; (8011374 <HAL_DMA_IRQHandler+0x2fc>)
 80112d8:	4013      	ands	r3, r2
 80112da:	2280      	movs	r2, #128	; 0x80
 80112dc:	0312      	lsls	r2, r2, #12
 80112de:	4694      	mov	ip, r2
 80112e0:	4463      	add	r3, ip
 80112e2:	e000      	b.n	80112e6 <HAL_DMA_IRQHandler+0x26e>
 80112e4:	2308      	movs	r3, #8
 80112e6:	4a18      	ldr	r2, [pc, #96]	; (8011348 <HAL_DMA_IRQHandler+0x2d0>)
 80112e8:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 80112ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80112ec:	2201      	movs	r2, #1
 80112ee:	4313      	orrs	r3, r2
 80112f0:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_ERROR;    
 80112f2:	2321      	movs	r3, #33	; 0x21
 80112f4:	3203      	adds	r2, #3
 80112f6:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma); 
 80112f8:	3b01      	subs	r3, #1
 80112fa:	2200      	movs	r2, #0
 80112fc:	54e2      	strb	r2, [r4, r3]
      if (hdma->XferErrorCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 80112fe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011300:	2b00      	cmp	r3, #0
 8011302:	d001      	beq.n	8011308 <HAL_DMA_IRQHandler+0x290>
        hdma->XferErrorCallback(hdma);
 8011304:	0020      	movs	r0, r4
 8011306:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011308:	6823      	ldr	r3, [r4, #0]
 801130a:	4a0e      	ldr	r2, [pc, #56]	; (8011344 <HAL_DMA_IRQHandler+0x2cc>)
 801130c:	4293      	cmp	r3, r2
 801130e:	d800      	bhi.n	8011312 <HAL_DMA_IRQHandler+0x29a>
 8011310:	e767      	b.n	80111e2 <HAL_DMA_IRQHandler+0x16a>
 8011312:	e6e8      	b.n	80110e6 <HAL_DMA_IRQHandler+0x6e>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8011314:	2380      	movs	r3, #128	; 0x80
 8011316:	e7e6      	b.n	80112e6 <HAL_DMA_IRQHandler+0x26e>
 8011318:	2380      	movs	r3, #128	; 0x80
 801131a:	011b      	lsls	r3, r3, #4
 801131c:	e7e3      	b.n	80112e6 <HAL_DMA_IRQHandler+0x26e>
 801131e:	2380      	movs	r3, #128	; 0x80
 8011320:	021b      	lsls	r3, r3, #8
 8011322:	e7e0      	b.n	80112e6 <HAL_DMA_IRQHandler+0x26e>
 8011324:	2380      	movs	r3, #128	; 0x80
 8011326:	031b      	lsls	r3, r3, #12
 8011328:	e7dd      	b.n	80112e6 <HAL_DMA_IRQHandler+0x26e>
 801132a:	2380      	movs	r3, #128	; 0x80
 801132c:	041b      	lsls	r3, r3, #16
 801132e:	e7da      	b.n	80112e6 <HAL_DMA_IRQHandler+0x26e>
 8011330:	2380      	movs	r3, #128	; 0x80
 8011332:	051b      	lsls	r3, r3, #20
 8011334:	e7d7      	b.n	80112e6 <HAL_DMA_IRQHandler+0x26e>
 8011336:	2308      	movs	r3, #8
 8011338:	e7d5      	b.n	80112e6 <HAL_DMA_IRQHandler+0x26e>
 801133a:	2380      	movs	r3, #128	; 0x80
 801133c:	e7d3      	b.n	80112e6 <HAL_DMA_IRQHandler+0x26e>
 801133e:	2380      	movs	r3, #128	; 0x80
 8011340:	011b      	lsls	r3, r3, #4
 8011342:	e7d0      	b.n	80112e6 <HAL_DMA_IRQHandler+0x26e>
 8011344:	40020080 	.word	0x40020080
 8011348:	40020400 	.word	0x40020400
 801134c:	40020008 	.word	0x40020008
 8011350:	4002001c 	.word	0x4002001c
 8011354:	40020030 	.word	0x40020030
 8011358:	40020044 	.word	0x40020044
 801135c:	40020058 	.word	0x40020058
 8011360:	4002006c 	.word	0x4002006c
 8011364:	40020408 	.word	0x40020408
 8011368:	4002041c 	.word	0x4002041c
 801136c:	40020430 	.word	0x40020430
 8011370:	bffdfbbc 	.word	0xbffdfbbc
 8011374:	fff88000 	.word	0xfff88000
 8011378:	fffc4000 	.word	0xfffc4000
 801137c:	40020000 	.word	0x40020000
 8011380:	4ab3      	ldr	r2, [pc, #716]	; (8011650 <HAL_DMA_IRQHandler+0x5d8>)
 8011382:	4293      	cmp	r3, r2
 8011384:	d027      	beq.n	80113d6 <HAL_DMA_IRQHandler+0x35e>
 8011386:	4ab3      	ldr	r2, [pc, #716]	; (8011654 <HAL_DMA_IRQHandler+0x5dc>)
 8011388:	4293      	cmp	r3, r2
 801138a:	d028      	beq.n	80113de <HAL_DMA_IRQHandler+0x366>
 801138c:	4ab2      	ldr	r2, [pc, #712]	; (8011658 <HAL_DMA_IRQHandler+0x5e0>)
 801138e:	4293      	cmp	r3, r2
 8011390:	d027      	beq.n	80113e2 <HAL_DMA_IRQHandler+0x36a>
 8011392:	4ab2      	ldr	r2, [pc, #712]	; (801165c <HAL_DMA_IRQHandler+0x5e4>)
 8011394:	4293      	cmp	r3, r2
 8011396:	d027      	beq.n	80113e8 <HAL_DMA_IRQHandler+0x370>
 8011398:	4ab1      	ldr	r2, [pc, #708]	; (8011660 <HAL_DMA_IRQHandler+0x5e8>)
 801139a:	4293      	cmp	r3, r2
 801139c:	d027      	beq.n	80113ee <HAL_DMA_IRQHandler+0x376>
 801139e:	4ab1      	ldr	r2, [pc, #708]	; (8011664 <HAL_DMA_IRQHandler+0x5ec>)
 80113a0:	4293      	cmp	r3, r2
 80113a2:	d027      	beq.n	80113f4 <HAL_DMA_IRQHandler+0x37c>
 80113a4:	4ab0      	ldr	r2, [pc, #704]	; (8011668 <HAL_DMA_IRQHandler+0x5f0>)
 80113a6:	4293      	cmp	r3, r2
 80113a8:	d027      	beq.n	80113fa <HAL_DMA_IRQHandler+0x382>
 80113aa:	4ab0      	ldr	r2, [pc, #704]	; (801166c <HAL_DMA_IRQHandler+0x5f4>)
 80113ac:	4293      	cmp	r3, r2
 80113ae:	d027      	beq.n	8011400 <HAL_DMA_IRQHandler+0x388>
 80113b0:	4aaf      	ldr	r2, [pc, #700]	; (8011670 <HAL_DMA_IRQHandler+0x5f8>)
 80113b2:	4293      	cmp	r3, r2
 80113b4:	d026      	beq.n	8011404 <HAL_DMA_IRQHandler+0x38c>
 80113b6:	4aaf      	ldr	r2, [pc, #700]	; (8011674 <HAL_DMA_IRQHandler+0x5fc>)
 80113b8:	4293      	cmp	r3, r2
 80113ba:	d025      	beq.n	8011408 <HAL_DMA_IRQHandler+0x390>
 80113bc:	4aae      	ldr	r2, [pc, #696]	; (8011678 <HAL_DMA_IRQHandler+0x600>)
 80113be:	4694      	mov	ip, r2
 80113c0:	4463      	add	r3, ip
 80113c2:	425a      	negs	r2, r3
 80113c4:	4153      	adcs	r3, r2
 80113c6:	425b      	negs	r3, r3
 80113c8:	4aac      	ldr	r2, [pc, #688]	; (801167c <HAL_DMA_IRQHandler+0x604>)
 80113ca:	4013      	ands	r3, r2
 80113cc:	2280      	movs	r2, #128	; 0x80
 80113ce:	0312      	lsls	r2, r2, #12
 80113d0:	4694      	mov	ip, r2
 80113d2:	4463      	add	r3, ip
 80113d4:	e000      	b.n	80113d8 <HAL_DMA_IRQHandler+0x360>
 80113d6:	2308      	movs	r3, #8
 80113d8:	4aa9      	ldr	r2, [pc, #676]	; (8011680 <HAL_DMA_IRQHandler+0x608>)
 80113da:	6053      	str	r3, [r2, #4]
 80113dc:	e785      	b.n	80112ea <HAL_DMA_IRQHandler+0x272>
 80113de:	2380      	movs	r3, #128	; 0x80
 80113e0:	e7fa      	b.n	80113d8 <HAL_DMA_IRQHandler+0x360>
 80113e2:	2380      	movs	r3, #128	; 0x80
 80113e4:	011b      	lsls	r3, r3, #4
 80113e6:	e7f7      	b.n	80113d8 <HAL_DMA_IRQHandler+0x360>
 80113e8:	2380      	movs	r3, #128	; 0x80
 80113ea:	021b      	lsls	r3, r3, #8
 80113ec:	e7f4      	b.n	80113d8 <HAL_DMA_IRQHandler+0x360>
 80113ee:	2380      	movs	r3, #128	; 0x80
 80113f0:	031b      	lsls	r3, r3, #12
 80113f2:	e7f1      	b.n	80113d8 <HAL_DMA_IRQHandler+0x360>
 80113f4:	2380      	movs	r3, #128	; 0x80
 80113f6:	041b      	lsls	r3, r3, #16
 80113f8:	e7ee      	b.n	80113d8 <HAL_DMA_IRQHandler+0x360>
 80113fa:	2380      	movs	r3, #128	; 0x80
 80113fc:	051b      	lsls	r3, r3, #20
 80113fe:	e7eb      	b.n	80113d8 <HAL_DMA_IRQHandler+0x360>
 8011400:	2308      	movs	r3, #8
 8011402:	e7e9      	b.n	80113d8 <HAL_DMA_IRQHandler+0x360>
 8011404:	2380      	movs	r3, #128	; 0x80
 8011406:	e7e7      	b.n	80113d8 <HAL_DMA_IRQHandler+0x360>
 8011408:	2380      	movs	r3, #128	; 0x80
 801140a:	011b      	lsls	r3, r3, #4
 801140c:	e7e4      	b.n	80113d8 <HAL_DMA_IRQHandler+0x360>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 801140e:	2204      	movs	r2, #4
 8011410:	420a      	tst	r2, r1
 8011412:	d11d      	bne.n	8011450 <HAL_DMA_IRQHandler+0x3d8>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011414:	6821      	ldr	r1, [r4, #0]
 8011416:	e085      	b.n	8011524 <HAL_DMA_IRQHandler+0x4ac>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 8011418:	2240      	movs	r2, #64	; 0x40
 801141a:	e7f9      	b.n	8011410 <HAL_DMA_IRQHandler+0x398>
 801141c:	2280      	movs	r2, #128	; 0x80
 801141e:	00d2      	lsls	r2, r2, #3
 8011420:	e7f6      	b.n	8011410 <HAL_DMA_IRQHandler+0x398>
 8011422:	2280      	movs	r2, #128	; 0x80
 8011424:	01d2      	lsls	r2, r2, #7
 8011426:	e7f3      	b.n	8011410 <HAL_DMA_IRQHandler+0x398>
 8011428:	2280      	movs	r2, #128	; 0x80
 801142a:	02d2      	lsls	r2, r2, #11
 801142c:	e7f0      	b.n	8011410 <HAL_DMA_IRQHandler+0x398>
 801142e:	2280      	movs	r2, #128	; 0x80
 8011430:	03d2      	lsls	r2, r2, #15
 8011432:	e7ed      	b.n	8011410 <HAL_DMA_IRQHandler+0x398>
 8011434:	2280      	movs	r2, #128	; 0x80
 8011436:	04d2      	lsls	r2, r2, #19
 8011438:	e7ea      	b.n	8011410 <HAL_DMA_IRQHandler+0x398>
 801143a:	2204      	movs	r2, #4
 801143c:	e7e8      	b.n	8011410 <HAL_DMA_IRQHandler+0x398>
 801143e:	2240      	movs	r2, #64	; 0x40
 8011440:	e7e6      	b.n	8011410 <HAL_DMA_IRQHandler+0x398>
 8011442:	2280      	movs	r2, #128	; 0x80
 8011444:	00d2      	lsls	r2, r2, #3
 8011446:	e7e3      	b.n	8011410 <HAL_DMA_IRQHandler+0x398>
 8011448:	2204      	movs	r2, #4
 801144a:	420a      	tst	r2, r1
 801144c:	d100      	bne.n	8011450 <HAL_DMA_IRQHandler+0x3d8>
 801144e:	e208      	b.n	8011862 <HAL_DMA_IRQHandler+0x7ea>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8011450:	681a      	ldr	r2, [r3, #0]
 8011452:	0752      	lsls	r2, r2, #29
 8011454:	d561      	bpl.n	801151a <HAL_DMA_IRQHandler+0x4a2>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8011456:	681a      	ldr	r2, [r3, #0]
 8011458:	0692      	lsls	r2, r2, #26
 801145a:	d403      	bmi.n	8011464 <HAL_DMA_IRQHandler+0x3ec>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801145c:	681a      	ldr	r2, [r3, #0]
 801145e:	2104      	movs	r1, #4
 8011460:	438a      	bics	r2, r1
 8011462:	601a      	str	r2, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011464:	6823      	ldr	r3, [r4, #0]
 8011466:	4a80      	ldr	r2, [pc, #512]	; (8011668 <HAL_DMA_IRQHandler+0x5f0>)
 8011468:	4293      	cmp	r3, r2
 801146a:	d800      	bhi.n	801146e <HAL_DMA_IRQHandler+0x3f6>
 801146c:	e0a8      	b.n	80115c0 <HAL_DMA_IRQHandler+0x548>
 801146e:	4a78      	ldr	r2, [pc, #480]	; (8011650 <HAL_DMA_IRQHandler+0x5d8>)
 8011470:	4293      	cmp	r3, r2
 8011472:	d047      	beq.n	8011504 <HAL_DMA_IRQHandler+0x48c>
 8011474:	4a77      	ldr	r2, [pc, #476]	; (8011654 <HAL_DMA_IRQHandler+0x5dc>)
 8011476:	4293      	cmp	r3, r2
 8011478:	d100      	bne.n	801147c <HAL_DMA_IRQHandler+0x404>
 801147a:	e089      	b.n	8011590 <HAL_DMA_IRQHandler+0x518>
 801147c:	4a76      	ldr	r2, [pc, #472]	; (8011658 <HAL_DMA_IRQHandler+0x5e0>)
 801147e:	4293      	cmp	r3, r2
 8011480:	d100      	bne.n	8011484 <HAL_DMA_IRQHandler+0x40c>
 8011482:	e087      	b.n	8011594 <HAL_DMA_IRQHandler+0x51c>
 8011484:	4a75      	ldr	r2, [pc, #468]	; (801165c <HAL_DMA_IRQHandler+0x5e4>)
 8011486:	4293      	cmp	r3, r2
 8011488:	d100      	bne.n	801148c <HAL_DMA_IRQHandler+0x414>
 801148a:	e086      	b.n	801159a <HAL_DMA_IRQHandler+0x522>
 801148c:	4a74      	ldr	r2, [pc, #464]	; (8011660 <HAL_DMA_IRQHandler+0x5e8>)
 801148e:	4293      	cmp	r3, r2
 8011490:	d100      	bne.n	8011494 <HAL_DMA_IRQHandler+0x41c>
 8011492:	e085      	b.n	80115a0 <HAL_DMA_IRQHandler+0x528>
 8011494:	4a73      	ldr	r2, [pc, #460]	; (8011664 <HAL_DMA_IRQHandler+0x5ec>)
 8011496:	4293      	cmp	r3, r2
 8011498:	d100      	bne.n	801149c <HAL_DMA_IRQHandler+0x424>
 801149a:	e084      	b.n	80115a6 <HAL_DMA_IRQHandler+0x52e>
 801149c:	4a72      	ldr	r2, [pc, #456]	; (8011668 <HAL_DMA_IRQHandler+0x5f0>)
 801149e:	4293      	cmp	r3, r2
 80114a0:	d100      	bne.n	80114a4 <HAL_DMA_IRQHandler+0x42c>
 80114a2:	e083      	b.n	80115ac <HAL_DMA_IRQHandler+0x534>
 80114a4:	4a71      	ldr	r2, [pc, #452]	; (801166c <HAL_DMA_IRQHandler+0x5f4>)
 80114a6:	4293      	cmp	r3, r2
 80114a8:	d100      	bne.n	80114ac <HAL_DMA_IRQHandler+0x434>
 80114aa:	e082      	b.n	80115b2 <HAL_DMA_IRQHandler+0x53a>
 80114ac:	4a70      	ldr	r2, [pc, #448]	; (8011670 <HAL_DMA_IRQHandler+0x5f8>)
 80114ae:	4293      	cmp	r3, r2
 80114b0:	d100      	bne.n	80114b4 <HAL_DMA_IRQHandler+0x43c>
 80114b2:	e080      	b.n	80115b6 <HAL_DMA_IRQHandler+0x53e>
 80114b4:	4a6f      	ldr	r2, [pc, #444]	; (8011674 <HAL_DMA_IRQHandler+0x5fc>)
 80114b6:	4293      	cmp	r3, r2
 80114b8:	d07f      	beq.n	80115ba <HAL_DMA_IRQHandler+0x542>
 80114ba:	4a6f      	ldr	r2, [pc, #444]	; (8011678 <HAL_DMA_IRQHandler+0x600>)
 80114bc:	4694      	mov	ip, r2
 80114be:	4463      	add	r3, ip
 80114c0:	425a      	negs	r2, r3
 80114c2:	4153      	adcs	r3, r2
 80114c4:	425b      	negs	r3, r3
 80114c6:	4a6f      	ldr	r2, [pc, #444]	; (8011684 <HAL_DMA_IRQHandler+0x60c>)
 80114c8:	4013      	ands	r3, r2
 80114ca:	2280      	movs	r2, #128	; 0x80
 80114cc:	02d2      	lsls	r2, r2, #11
 80114ce:	4694      	mov	ip, r2
 80114d0:	4463      	add	r3, ip
 80114d2:	e018      	b.n	8011506 <HAL_DMA_IRQHandler+0x48e>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80114d4:	2240      	movs	r2, #64	; 0x40
 80114d6:	e7b8      	b.n	801144a <HAL_DMA_IRQHandler+0x3d2>
 80114d8:	2280      	movs	r2, #128	; 0x80
 80114da:	00d2      	lsls	r2, r2, #3
 80114dc:	e7b5      	b.n	801144a <HAL_DMA_IRQHandler+0x3d2>
 80114de:	2280      	movs	r2, #128	; 0x80
 80114e0:	01d2      	lsls	r2, r2, #7
 80114e2:	e7b2      	b.n	801144a <HAL_DMA_IRQHandler+0x3d2>
 80114e4:	2280      	movs	r2, #128	; 0x80
 80114e6:	02d2      	lsls	r2, r2, #11
 80114e8:	e7af      	b.n	801144a <HAL_DMA_IRQHandler+0x3d2>
 80114ea:	2280      	movs	r2, #128	; 0x80
 80114ec:	03d2      	lsls	r2, r2, #15
 80114ee:	e7ac      	b.n	801144a <HAL_DMA_IRQHandler+0x3d2>
 80114f0:	2280      	movs	r2, #128	; 0x80
 80114f2:	04d2      	lsls	r2, r2, #19
 80114f4:	e7a9      	b.n	801144a <HAL_DMA_IRQHandler+0x3d2>
 80114f6:	2204      	movs	r2, #4
 80114f8:	e7a7      	b.n	801144a <HAL_DMA_IRQHandler+0x3d2>
 80114fa:	2240      	movs	r2, #64	; 0x40
 80114fc:	e7a5      	b.n	801144a <HAL_DMA_IRQHandler+0x3d2>
 80114fe:	2280      	movs	r2, #128	; 0x80
 8011500:	00d2      	lsls	r2, r2, #3
 8011502:	e7a2      	b.n	801144a <HAL_DMA_IRQHandler+0x3d2>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011504:	2304      	movs	r3, #4
 8011506:	4a60      	ldr	r2, [pc, #384]	; (8011688 <HAL_DMA_IRQHandler+0x610>)
 8011508:	6053      	str	r3, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY_HALF;
 801150a:	2321      	movs	r3, #33	; 0x21
 801150c:	2211      	movs	r2, #17
 801150e:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferHalfCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011510:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011512:	2b00      	cmp	r3, #0
 8011514:	d001      	beq.n	801151a <HAL_DMA_IRQHandler+0x4a2>
        hdma->XferHalfCpltCallback(hdma);
 8011516:	0020      	movs	r0, r4
 8011518:	4798      	blx	r3
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 801151a:	6821      	ldr	r1, [r4, #0]
 801151c:	4b52      	ldr	r3, [pc, #328]	; (8011668 <HAL_DMA_IRQHandler+0x5f0>)
 801151e:	4299      	cmp	r1, r3
 8011520:	d800      	bhi.n	8011524 <HAL_DMA_IRQHandler+0x4ac>
 8011522:	e19f      	b.n	8011864 <HAL_DMA_IRQHandler+0x7ec>
 8011524:	4b58      	ldr	r3, [pc, #352]	; (8011688 <HAL_DMA_IRQHandler+0x610>)
 8011526:	6818      	ldr	r0, [r3, #0]
 8011528:	4a49      	ldr	r2, [pc, #292]	; (8011650 <HAL_DMA_IRQHandler+0x5d8>)
 801152a:	4291      	cmp	r1, r2
 801152c:	d100      	bne.n	8011530 <HAL_DMA_IRQHandler+0x4b8>
 801152e:	e0af      	b.n	8011690 <HAL_DMA_IRQHandler+0x618>
 8011530:	4a48      	ldr	r2, [pc, #288]	; (8011654 <HAL_DMA_IRQHandler+0x5dc>)
 8011532:	4291      	cmp	r1, r2
 8011534:	d100      	bne.n	8011538 <HAL_DMA_IRQHandler+0x4c0>
 8011536:	e0ee      	b.n	8011716 <HAL_DMA_IRQHandler+0x69e>
 8011538:	4a47      	ldr	r2, [pc, #284]	; (8011658 <HAL_DMA_IRQHandler+0x5e0>)
 801153a:	4291      	cmp	r1, r2
 801153c:	d100      	bne.n	8011540 <HAL_DMA_IRQHandler+0x4c8>
 801153e:	e0ec      	b.n	801171a <HAL_DMA_IRQHandler+0x6a2>
 8011540:	4a46      	ldr	r2, [pc, #280]	; (801165c <HAL_DMA_IRQHandler+0x5e4>)
 8011542:	4291      	cmp	r1, r2
 8011544:	d100      	bne.n	8011548 <HAL_DMA_IRQHandler+0x4d0>
 8011546:	e0eb      	b.n	8011720 <HAL_DMA_IRQHandler+0x6a8>
 8011548:	4b45      	ldr	r3, [pc, #276]	; (8011660 <HAL_DMA_IRQHandler+0x5e8>)
 801154a:	4299      	cmp	r1, r3
 801154c:	d100      	bne.n	8011550 <HAL_DMA_IRQHandler+0x4d8>
 801154e:	e0ea      	b.n	8011726 <HAL_DMA_IRQHandler+0x6ae>
 8011550:	4b44      	ldr	r3, [pc, #272]	; (8011664 <HAL_DMA_IRQHandler+0x5ec>)
 8011552:	4299      	cmp	r1, r3
 8011554:	d100      	bne.n	8011558 <HAL_DMA_IRQHandler+0x4e0>
 8011556:	e0e9      	b.n	801172c <HAL_DMA_IRQHandler+0x6b4>
 8011558:	4b43      	ldr	r3, [pc, #268]	; (8011668 <HAL_DMA_IRQHandler+0x5f0>)
 801155a:	4299      	cmp	r1, r3
 801155c:	d100      	bne.n	8011560 <HAL_DMA_IRQHandler+0x4e8>
 801155e:	e0e8      	b.n	8011732 <HAL_DMA_IRQHandler+0x6ba>
 8011560:	4b42      	ldr	r3, [pc, #264]	; (801166c <HAL_DMA_IRQHandler+0x5f4>)
 8011562:	4299      	cmp	r1, r3
 8011564:	d100      	bne.n	8011568 <HAL_DMA_IRQHandler+0x4f0>
 8011566:	e0e7      	b.n	8011738 <HAL_DMA_IRQHandler+0x6c0>
 8011568:	4b41      	ldr	r3, [pc, #260]	; (8011670 <HAL_DMA_IRQHandler+0x5f8>)
 801156a:	4299      	cmp	r1, r3
 801156c:	d100      	bne.n	8011570 <HAL_DMA_IRQHandler+0x4f8>
 801156e:	e0e5      	b.n	801173c <HAL_DMA_IRQHandler+0x6c4>
 8011570:	4b40      	ldr	r3, [pc, #256]	; (8011674 <HAL_DMA_IRQHandler+0x5fc>)
 8011572:	4299      	cmp	r1, r3
 8011574:	d100      	bne.n	8011578 <HAL_DMA_IRQHandler+0x500>
 8011576:	e0e3      	b.n	8011740 <HAL_DMA_IRQHandler+0x6c8>
 8011578:	4b3f      	ldr	r3, [pc, #252]	; (8011678 <HAL_DMA_IRQHandler+0x600>)
 801157a:	18ca      	adds	r2, r1, r3
 801157c:	4253      	negs	r3, r2
 801157e:	415a      	adcs	r2, r3
 8011580:	4252      	negs	r2, r2
 8011582:	4b42      	ldr	r3, [pc, #264]	; (801168c <HAL_DMA_IRQHandler+0x614>)
 8011584:	4013      	ands	r3, r2
 8011586:	2280      	movs	r2, #128	; 0x80
 8011588:	0292      	lsls	r2, r2, #10
 801158a:	4694      	mov	ip, r2
 801158c:	4463      	add	r3, ip
 801158e:	e080      	b.n	8011692 <HAL_DMA_IRQHandler+0x61a>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8011590:	2340      	movs	r3, #64	; 0x40
 8011592:	e7b8      	b.n	8011506 <HAL_DMA_IRQHandler+0x48e>
 8011594:	2380      	movs	r3, #128	; 0x80
 8011596:	00db      	lsls	r3, r3, #3
 8011598:	e7b5      	b.n	8011506 <HAL_DMA_IRQHandler+0x48e>
 801159a:	2380      	movs	r3, #128	; 0x80
 801159c:	01db      	lsls	r3, r3, #7
 801159e:	e7b2      	b.n	8011506 <HAL_DMA_IRQHandler+0x48e>
 80115a0:	2380      	movs	r3, #128	; 0x80
 80115a2:	02db      	lsls	r3, r3, #11
 80115a4:	e7af      	b.n	8011506 <HAL_DMA_IRQHandler+0x48e>
 80115a6:	2380      	movs	r3, #128	; 0x80
 80115a8:	03db      	lsls	r3, r3, #15
 80115aa:	e7ac      	b.n	8011506 <HAL_DMA_IRQHandler+0x48e>
 80115ac:	2380      	movs	r3, #128	; 0x80
 80115ae:	04db      	lsls	r3, r3, #19
 80115b0:	e7a9      	b.n	8011506 <HAL_DMA_IRQHandler+0x48e>
 80115b2:	2304      	movs	r3, #4
 80115b4:	e7a7      	b.n	8011506 <HAL_DMA_IRQHandler+0x48e>
 80115b6:	2340      	movs	r3, #64	; 0x40
 80115b8:	e7a5      	b.n	8011506 <HAL_DMA_IRQHandler+0x48e>
 80115ba:	2380      	movs	r3, #128	; 0x80
 80115bc:	00db      	lsls	r3, r3, #3
 80115be:	e7a2      	b.n	8011506 <HAL_DMA_IRQHandler+0x48e>
 80115c0:	4a23      	ldr	r2, [pc, #140]	; (8011650 <HAL_DMA_IRQHandler+0x5d8>)
 80115c2:	4293      	cmp	r3, r2
 80115c4:	d027      	beq.n	8011616 <HAL_DMA_IRQHandler+0x59e>
 80115c6:	4a23      	ldr	r2, [pc, #140]	; (8011654 <HAL_DMA_IRQHandler+0x5dc>)
 80115c8:	4293      	cmp	r3, r2
 80115ca:	d028      	beq.n	801161e <HAL_DMA_IRQHandler+0x5a6>
 80115cc:	4a22      	ldr	r2, [pc, #136]	; (8011658 <HAL_DMA_IRQHandler+0x5e0>)
 80115ce:	4293      	cmp	r3, r2
 80115d0:	d027      	beq.n	8011622 <HAL_DMA_IRQHandler+0x5aa>
 80115d2:	4a22      	ldr	r2, [pc, #136]	; (801165c <HAL_DMA_IRQHandler+0x5e4>)
 80115d4:	4293      	cmp	r3, r2
 80115d6:	d027      	beq.n	8011628 <HAL_DMA_IRQHandler+0x5b0>
 80115d8:	4a21      	ldr	r2, [pc, #132]	; (8011660 <HAL_DMA_IRQHandler+0x5e8>)
 80115da:	4293      	cmp	r3, r2
 80115dc:	d027      	beq.n	801162e <HAL_DMA_IRQHandler+0x5b6>
 80115de:	4a21      	ldr	r2, [pc, #132]	; (8011664 <HAL_DMA_IRQHandler+0x5ec>)
 80115e0:	4293      	cmp	r3, r2
 80115e2:	d027      	beq.n	8011634 <HAL_DMA_IRQHandler+0x5bc>
 80115e4:	4a20      	ldr	r2, [pc, #128]	; (8011668 <HAL_DMA_IRQHandler+0x5f0>)
 80115e6:	4293      	cmp	r3, r2
 80115e8:	d027      	beq.n	801163a <HAL_DMA_IRQHandler+0x5c2>
 80115ea:	4a20      	ldr	r2, [pc, #128]	; (801166c <HAL_DMA_IRQHandler+0x5f4>)
 80115ec:	4293      	cmp	r3, r2
 80115ee:	d027      	beq.n	8011640 <HAL_DMA_IRQHandler+0x5c8>
 80115f0:	4a1f      	ldr	r2, [pc, #124]	; (8011670 <HAL_DMA_IRQHandler+0x5f8>)
 80115f2:	4293      	cmp	r3, r2
 80115f4:	d026      	beq.n	8011644 <HAL_DMA_IRQHandler+0x5cc>
 80115f6:	4a1f      	ldr	r2, [pc, #124]	; (8011674 <HAL_DMA_IRQHandler+0x5fc>)
 80115f8:	4293      	cmp	r3, r2
 80115fa:	d025      	beq.n	8011648 <HAL_DMA_IRQHandler+0x5d0>
 80115fc:	4a1e      	ldr	r2, [pc, #120]	; (8011678 <HAL_DMA_IRQHandler+0x600>)
 80115fe:	4694      	mov	ip, r2
 8011600:	4463      	add	r3, ip
 8011602:	425a      	negs	r2, r3
 8011604:	4153      	adcs	r3, r2
 8011606:	425b      	negs	r3, r3
 8011608:	4a1e      	ldr	r2, [pc, #120]	; (8011684 <HAL_DMA_IRQHandler+0x60c>)
 801160a:	4013      	ands	r3, r2
 801160c:	2280      	movs	r2, #128	; 0x80
 801160e:	02d2      	lsls	r2, r2, #11
 8011610:	4694      	mov	ip, r2
 8011612:	4463      	add	r3, ip
 8011614:	e000      	b.n	8011618 <HAL_DMA_IRQHandler+0x5a0>
 8011616:	2304      	movs	r3, #4
 8011618:	4a19      	ldr	r2, [pc, #100]	; (8011680 <HAL_DMA_IRQHandler+0x608>)
 801161a:	6053      	str	r3, [r2, #4]
 801161c:	e775      	b.n	801150a <HAL_DMA_IRQHandler+0x492>
 801161e:	2340      	movs	r3, #64	; 0x40
 8011620:	e7fa      	b.n	8011618 <HAL_DMA_IRQHandler+0x5a0>
 8011622:	2380      	movs	r3, #128	; 0x80
 8011624:	00db      	lsls	r3, r3, #3
 8011626:	e7f7      	b.n	8011618 <HAL_DMA_IRQHandler+0x5a0>
 8011628:	2380      	movs	r3, #128	; 0x80
 801162a:	01db      	lsls	r3, r3, #7
 801162c:	e7f4      	b.n	8011618 <HAL_DMA_IRQHandler+0x5a0>
 801162e:	2380      	movs	r3, #128	; 0x80
 8011630:	02db      	lsls	r3, r3, #11
 8011632:	e7f1      	b.n	8011618 <HAL_DMA_IRQHandler+0x5a0>
 8011634:	2380      	movs	r3, #128	; 0x80
 8011636:	03db      	lsls	r3, r3, #15
 8011638:	e7ee      	b.n	8011618 <HAL_DMA_IRQHandler+0x5a0>
 801163a:	2380      	movs	r3, #128	; 0x80
 801163c:	04db      	lsls	r3, r3, #19
 801163e:	e7eb      	b.n	8011618 <HAL_DMA_IRQHandler+0x5a0>
 8011640:	2304      	movs	r3, #4
 8011642:	e7e9      	b.n	8011618 <HAL_DMA_IRQHandler+0x5a0>
 8011644:	2340      	movs	r3, #64	; 0x40
 8011646:	e7e7      	b.n	8011618 <HAL_DMA_IRQHandler+0x5a0>
 8011648:	2380      	movs	r3, #128	; 0x80
 801164a:	00db      	lsls	r3, r3, #3
 801164c:	e7e4      	b.n	8011618 <HAL_DMA_IRQHandler+0x5a0>
 801164e:	46c0      	nop			; (mov r8, r8)
 8011650:	40020008 	.word	0x40020008
 8011654:	4002001c 	.word	0x4002001c
 8011658:	40020030 	.word	0x40020030
 801165c:	40020044 	.word	0x40020044
 8011660:	40020058 	.word	0x40020058
 8011664:	4002006c 	.word	0x4002006c
 8011668:	40020080 	.word	0x40020080
 801166c:	40020408 	.word	0x40020408
 8011670:	4002041c 	.word	0x4002041c
 8011674:	40020430 	.word	0x40020430
 8011678:	bffdfbbc 	.word	0xbffdfbbc
 801167c:	fff88000 	.word	0xfff88000
 8011680:	40020000 	.word	0x40020000
 8011684:	fffc4000 	.word	0xfffc4000
 8011688:	40020400 	.word	0x40020400
 801168c:	fffe2000 	.word	0xfffe2000
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011690:	2302      	movs	r3, #2
 8011692:	4003      	ands	r3, r0
 8011694:	1e5a      	subs	r2, r3, #1
 8011696:	4193      	sbcs	r3, r2
 8011698:	b2db      	uxtb	r3, r3
 801169a:	2b00      	cmp	r3, #0
 801169c:	d100      	bne.n	80116a0 <HAL_DMA_IRQHandler+0x628>
 801169e:	e080      	b.n	80117a2 <HAL_DMA_IRQHandler+0x72a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80116a0:	680b      	ldr	r3, [r1, #0]
 80116a2:	079b      	lsls	r3, r3, #30
 80116a4:	d57d      	bpl.n	80117a2 <HAL_DMA_IRQHandler+0x72a>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80116a6:	680b      	ldr	r3, [r1, #0]
 80116a8:	069b      	lsls	r3, r3, #26
 80116aa:	d403      	bmi.n	80116b4 <HAL_DMA_IRQHandler+0x63c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 80116ac:	680b      	ldr	r3, [r1, #0]
 80116ae:	2202      	movs	r2, #2
 80116b0:	4393      	bics	r3, r2
 80116b2:	600b      	str	r3, [r1, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80116b4:	6823      	ldr	r3, [r4, #0]
 80116b6:	4a8d      	ldr	r2, [pc, #564]	; (80118ec <HAL_DMA_IRQHandler+0x874>)
 80116b8:	4293      	cmp	r3, r2
 80116ba:	d800      	bhi.n	80116be <HAL_DMA_IRQHandler+0x646>
 80116bc:	e08a      	b.n	80117d4 <HAL_DMA_IRQHandler+0x75c>
 80116be:	4a8c      	ldr	r2, [pc, #560]	; (80118f0 <HAL_DMA_IRQHandler+0x878>)
 80116c0:	4293      	cmp	r3, r2
 80116c2:	d05e      	beq.n	8011782 <HAL_DMA_IRQHandler+0x70a>
 80116c4:	4a8b      	ldr	r2, [pc, #556]	; (80118f4 <HAL_DMA_IRQHandler+0x87c>)
 80116c6:	4293      	cmp	r3, r2
 80116c8:	d100      	bne.n	80116cc <HAL_DMA_IRQHandler+0x654>
 80116ca:	e06b      	b.n	80117a4 <HAL_DMA_IRQHandler+0x72c>
 80116cc:	4a8a      	ldr	r2, [pc, #552]	; (80118f8 <HAL_DMA_IRQHandler+0x880>)
 80116ce:	4293      	cmp	r3, r2
 80116d0:	d06a      	beq.n	80117a8 <HAL_DMA_IRQHandler+0x730>
 80116d2:	4a8a      	ldr	r2, [pc, #552]	; (80118fc <HAL_DMA_IRQHandler+0x884>)
 80116d4:	4293      	cmp	r3, r2
 80116d6:	d06a      	beq.n	80117ae <HAL_DMA_IRQHandler+0x736>
 80116d8:	4a89      	ldr	r2, [pc, #548]	; (8011900 <HAL_DMA_IRQHandler+0x888>)
 80116da:	4293      	cmp	r3, r2
 80116dc:	d06a      	beq.n	80117b4 <HAL_DMA_IRQHandler+0x73c>
 80116de:	4a89      	ldr	r2, [pc, #548]	; (8011904 <HAL_DMA_IRQHandler+0x88c>)
 80116e0:	4293      	cmp	r3, r2
 80116e2:	d06a      	beq.n	80117ba <HAL_DMA_IRQHandler+0x742>
 80116e4:	4a81      	ldr	r2, [pc, #516]	; (80118ec <HAL_DMA_IRQHandler+0x874>)
 80116e6:	4293      	cmp	r3, r2
 80116e8:	d06a      	beq.n	80117c0 <HAL_DMA_IRQHandler+0x748>
 80116ea:	4a87      	ldr	r2, [pc, #540]	; (8011908 <HAL_DMA_IRQHandler+0x890>)
 80116ec:	4293      	cmp	r3, r2
 80116ee:	d06a      	beq.n	80117c6 <HAL_DMA_IRQHandler+0x74e>
 80116f0:	4a86      	ldr	r2, [pc, #536]	; (801190c <HAL_DMA_IRQHandler+0x894>)
 80116f2:	4293      	cmp	r3, r2
 80116f4:	d069      	beq.n	80117ca <HAL_DMA_IRQHandler+0x752>
 80116f6:	4a86      	ldr	r2, [pc, #536]	; (8011910 <HAL_DMA_IRQHandler+0x898>)
 80116f8:	4293      	cmp	r3, r2
 80116fa:	d068      	beq.n	80117ce <HAL_DMA_IRQHandler+0x756>
 80116fc:	4a85      	ldr	r2, [pc, #532]	; (8011914 <HAL_DMA_IRQHandler+0x89c>)
 80116fe:	4694      	mov	ip, r2
 8011700:	4463      	add	r3, ip
 8011702:	425a      	negs	r2, r3
 8011704:	4153      	adcs	r3, r2
 8011706:	425b      	negs	r3, r3
 8011708:	4a83      	ldr	r2, [pc, #524]	; (8011918 <HAL_DMA_IRQHandler+0x8a0>)
 801170a:	4013      	ands	r3, r2
 801170c:	2280      	movs	r2, #128	; 0x80
 801170e:	0292      	lsls	r2, r2, #10
 8011710:	4694      	mov	ip, r2
 8011712:	4463      	add	r3, ip
 8011714:	e036      	b.n	8011784 <HAL_DMA_IRQHandler+0x70c>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011716:	2320      	movs	r3, #32
 8011718:	e7bb      	b.n	8011692 <HAL_DMA_IRQHandler+0x61a>
 801171a:	2380      	movs	r3, #128	; 0x80
 801171c:	009b      	lsls	r3, r3, #2
 801171e:	e7b8      	b.n	8011692 <HAL_DMA_IRQHandler+0x61a>
 8011720:	2380      	movs	r3, #128	; 0x80
 8011722:	019b      	lsls	r3, r3, #6
 8011724:	e7b5      	b.n	8011692 <HAL_DMA_IRQHandler+0x61a>
 8011726:	2380      	movs	r3, #128	; 0x80
 8011728:	029b      	lsls	r3, r3, #10
 801172a:	e7b2      	b.n	8011692 <HAL_DMA_IRQHandler+0x61a>
 801172c:	2380      	movs	r3, #128	; 0x80
 801172e:	039b      	lsls	r3, r3, #14
 8011730:	e7af      	b.n	8011692 <HAL_DMA_IRQHandler+0x61a>
 8011732:	2380      	movs	r3, #128	; 0x80
 8011734:	049b      	lsls	r3, r3, #18
 8011736:	e7ac      	b.n	8011692 <HAL_DMA_IRQHandler+0x61a>
 8011738:	2302      	movs	r3, #2
 801173a:	e7aa      	b.n	8011692 <HAL_DMA_IRQHandler+0x61a>
 801173c:	2320      	movs	r3, #32
 801173e:	e7a8      	b.n	8011692 <HAL_DMA_IRQHandler+0x61a>
 8011740:	2380      	movs	r3, #128	; 0x80
 8011742:	009b      	lsls	r3, r3, #2
 8011744:	e7a5      	b.n	8011692 <HAL_DMA_IRQHandler+0x61a>
 8011746:	2302      	movs	r3, #2
 8011748:	4003      	ands	r3, r0
 801174a:	1e5a      	subs	r2, r3, #1
 801174c:	4193      	sbcs	r3, r2
 801174e:	b2db      	uxtb	r3, r3
 8011750:	e7a3      	b.n	801169a <HAL_DMA_IRQHandler+0x622>
 8011752:	2320      	movs	r3, #32
 8011754:	e7f8      	b.n	8011748 <HAL_DMA_IRQHandler+0x6d0>
 8011756:	2380      	movs	r3, #128	; 0x80
 8011758:	009b      	lsls	r3, r3, #2
 801175a:	e7f5      	b.n	8011748 <HAL_DMA_IRQHandler+0x6d0>
 801175c:	2380      	movs	r3, #128	; 0x80
 801175e:	019b      	lsls	r3, r3, #6
 8011760:	e7f2      	b.n	8011748 <HAL_DMA_IRQHandler+0x6d0>
 8011762:	2380      	movs	r3, #128	; 0x80
 8011764:	029b      	lsls	r3, r3, #10
 8011766:	e7ef      	b.n	8011748 <HAL_DMA_IRQHandler+0x6d0>
 8011768:	2380      	movs	r3, #128	; 0x80
 801176a:	039b      	lsls	r3, r3, #14
 801176c:	e7ec      	b.n	8011748 <HAL_DMA_IRQHandler+0x6d0>
 801176e:	2380      	movs	r3, #128	; 0x80
 8011770:	049b      	lsls	r3, r3, #18
 8011772:	e7e9      	b.n	8011748 <HAL_DMA_IRQHandler+0x6d0>
 8011774:	2302      	movs	r3, #2
 8011776:	e7e7      	b.n	8011748 <HAL_DMA_IRQHandler+0x6d0>
 8011778:	2320      	movs	r3, #32
 801177a:	e7e5      	b.n	8011748 <HAL_DMA_IRQHandler+0x6d0>
 801177c:	2380      	movs	r3, #128	; 0x80
 801177e:	009b      	lsls	r3, r3, #2
 8011780:	e7e2      	b.n	8011748 <HAL_DMA_IRQHandler+0x6d0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8011782:	2302      	movs	r3, #2
 8011784:	4a65      	ldr	r2, [pc, #404]	; (801191c <HAL_DMA_IRQHandler+0x8a4>)
 8011786:	6053      	str	r3, [r2, #4]
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 8011788:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801178a:	6363      	str	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;    
 801178c:	2321      	movs	r3, #33	; 0x21
 801178e:	2201      	movs	r2, #1
 8011790:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hdma);
 8011792:	3b01      	subs	r3, #1
 8011794:	2200      	movs	r2, #0
 8011796:	54e2      	strb	r2, [r4, r3]
      if(hdma->XferCpltCallback != (void (*)(DMA_HandleTypeDef *))NULL)
 8011798:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801179a:	2b00      	cmp	r3, #0
 801179c:	d001      	beq.n	80117a2 <HAL_DMA_IRQHandler+0x72a>
        hdma->XferCpltCallback(hdma);
 801179e:	0020      	movs	r0, r4
 80117a0:	4798      	blx	r3
}  
 80117a2:	bd10      	pop	{r4, pc}
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80117a4:	2320      	movs	r3, #32
 80117a6:	e7ed      	b.n	8011784 <HAL_DMA_IRQHandler+0x70c>
 80117a8:	2380      	movs	r3, #128	; 0x80
 80117aa:	009b      	lsls	r3, r3, #2
 80117ac:	e7ea      	b.n	8011784 <HAL_DMA_IRQHandler+0x70c>
 80117ae:	2380      	movs	r3, #128	; 0x80
 80117b0:	019b      	lsls	r3, r3, #6
 80117b2:	e7e7      	b.n	8011784 <HAL_DMA_IRQHandler+0x70c>
 80117b4:	2380      	movs	r3, #128	; 0x80
 80117b6:	029b      	lsls	r3, r3, #10
 80117b8:	e7e4      	b.n	8011784 <HAL_DMA_IRQHandler+0x70c>
 80117ba:	2380      	movs	r3, #128	; 0x80
 80117bc:	039b      	lsls	r3, r3, #14
 80117be:	e7e1      	b.n	8011784 <HAL_DMA_IRQHandler+0x70c>
 80117c0:	2380      	movs	r3, #128	; 0x80
 80117c2:	049b      	lsls	r3, r3, #18
 80117c4:	e7de      	b.n	8011784 <HAL_DMA_IRQHandler+0x70c>
 80117c6:	2302      	movs	r3, #2
 80117c8:	e7dc      	b.n	8011784 <HAL_DMA_IRQHandler+0x70c>
 80117ca:	2320      	movs	r3, #32
 80117cc:	e7da      	b.n	8011784 <HAL_DMA_IRQHandler+0x70c>
 80117ce:	2380      	movs	r3, #128	; 0x80
 80117d0:	009b      	lsls	r3, r3, #2
 80117d2:	e7d7      	b.n	8011784 <HAL_DMA_IRQHandler+0x70c>
 80117d4:	4a46      	ldr	r2, [pc, #280]	; (80118f0 <HAL_DMA_IRQHandler+0x878>)
 80117d6:	4293      	cmp	r3, r2
 80117d8:	d027      	beq.n	801182a <HAL_DMA_IRQHandler+0x7b2>
 80117da:	4a46      	ldr	r2, [pc, #280]	; (80118f4 <HAL_DMA_IRQHandler+0x87c>)
 80117dc:	4293      	cmp	r3, r2
 80117de:	d028      	beq.n	8011832 <HAL_DMA_IRQHandler+0x7ba>
 80117e0:	4a45      	ldr	r2, [pc, #276]	; (80118f8 <HAL_DMA_IRQHandler+0x880>)
 80117e2:	4293      	cmp	r3, r2
 80117e4:	d027      	beq.n	8011836 <HAL_DMA_IRQHandler+0x7be>
 80117e6:	4a45      	ldr	r2, [pc, #276]	; (80118fc <HAL_DMA_IRQHandler+0x884>)
 80117e8:	4293      	cmp	r3, r2
 80117ea:	d027      	beq.n	801183c <HAL_DMA_IRQHandler+0x7c4>
 80117ec:	4a44      	ldr	r2, [pc, #272]	; (8011900 <HAL_DMA_IRQHandler+0x888>)
 80117ee:	4293      	cmp	r3, r2
 80117f0:	d027      	beq.n	8011842 <HAL_DMA_IRQHandler+0x7ca>
 80117f2:	4a44      	ldr	r2, [pc, #272]	; (8011904 <HAL_DMA_IRQHandler+0x88c>)
 80117f4:	4293      	cmp	r3, r2
 80117f6:	d027      	beq.n	8011848 <HAL_DMA_IRQHandler+0x7d0>
 80117f8:	4a3c      	ldr	r2, [pc, #240]	; (80118ec <HAL_DMA_IRQHandler+0x874>)
 80117fa:	4293      	cmp	r3, r2
 80117fc:	d027      	beq.n	801184e <HAL_DMA_IRQHandler+0x7d6>
 80117fe:	4a42      	ldr	r2, [pc, #264]	; (8011908 <HAL_DMA_IRQHandler+0x890>)
 8011800:	4293      	cmp	r3, r2
 8011802:	d027      	beq.n	8011854 <HAL_DMA_IRQHandler+0x7dc>
 8011804:	4a41      	ldr	r2, [pc, #260]	; (801190c <HAL_DMA_IRQHandler+0x894>)
 8011806:	4293      	cmp	r3, r2
 8011808:	d026      	beq.n	8011858 <HAL_DMA_IRQHandler+0x7e0>
 801180a:	4a41      	ldr	r2, [pc, #260]	; (8011910 <HAL_DMA_IRQHandler+0x898>)
 801180c:	4293      	cmp	r3, r2
 801180e:	d025      	beq.n	801185c <HAL_DMA_IRQHandler+0x7e4>
 8011810:	4a40      	ldr	r2, [pc, #256]	; (8011914 <HAL_DMA_IRQHandler+0x89c>)
 8011812:	4694      	mov	ip, r2
 8011814:	4463      	add	r3, ip
 8011816:	425a      	negs	r2, r3
 8011818:	4153      	adcs	r3, r2
 801181a:	425b      	negs	r3, r3
 801181c:	4a3e      	ldr	r2, [pc, #248]	; (8011918 <HAL_DMA_IRQHandler+0x8a0>)
 801181e:	4013      	ands	r3, r2
 8011820:	2280      	movs	r2, #128	; 0x80
 8011822:	0292      	lsls	r2, r2, #10
 8011824:	4694      	mov	ip, r2
 8011826:	4463      	add	r3, ip
 8011828:	e000      	b.n	801182c <HAL_DMA_IRQHandler+0x7b4>
 801182a:	2302      	movs	r3, #2
 801182c:	4a3c      	ldr	r2, [pc, #240]	; (8011920 <HAL_DMA_IRQHandler+0x8a8>)
 801182e:	6053      	str	r3, [r2, #4]
 8011830:	e7aa      	b.n	8011788 <HAL_DMA_IRQHandler+0x710>
 8011832:	2320      	movs	r3, #32
 8011834:	e7fa      	b.n	801182c <HAL_DMA_IRQHandler+0x7b4>
 8011836:	2380      	movs	r3, #128	; 0x80
 8011838:	009b      	lsls	r3, r3, #2
 801183a:	e7f7      	b.n	801182c <HAL_DMA_IRQHandler+0x7b4>
 801183c:	2380      	movs	r3, #128	; 0x80
 801183e:	019b      	lsls	r3, r3, #6
 8011840:	e7f4      	b.n	801182c <HAL_DMA_IRQHandler+0x7b4>
 8011842:	2380      	movs	r3, #128	; 0x80
 8011844:	029b      	lsls	r3, r3, #10
 8011846:	e7f1      	b.n	801182c <HAL_DMA_IRQHandler+0x7b4>
 8011848:	2380      	movs	r3, #128	; 0x80
 801184a:	039b      	lsls	r3, r3, #14
 801184c:	e7ee      	b.n	801182c <HAL_DMA_IRQHandler+0x7b4>
 801184e:	2380      	movs	r3, #128	; 0x80
 8011850:	049b      	lsls	r3, r3, #18
 8011852:	e7eb      	b.n	801182c <HAL_DMA_IRQHandler+0x7b4>
 8011854:	2302      	movs	r3, #2
 8011856:	e7e9      	b.n	801182c <HAL_DMA_IRQHandler+0x7b4>
 8011858:	2320      	movs	r3, #32
 801185a:	e7e7      	b.n	801182c <HAL_DMA_IRQHandler+0x7b4>
 801185c:	2380      	movs	r3, #128	; 0x80
 801185e:	009b      	lsls	r3, r3, #2
 8011860:	e7e4      	b.n	801182c <HAL_DMA_IRQHandler+0x7b4>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8011862:	6821      	ldr	r1, [r4, #0]
 8011864:	4b2e      	ldr	r3, [pc, #184]	; (8011920 <HAL_DMA_IRQHandler+0x8a8>)
 8011866:	6818      	ldr	r0, [r3, #0]
 8011868:	4a21      	ldr	r2, [pc, #132]	; (80118f0 <HAL_DMA_IRQHandler+0x878>)
 801186a:	4291      	cmp	r1, r2
 801186c:	d100      	bne.n	8011870 <HAL_DMA_IRQHandler+0x7f8>
 801186e:	e76a      	b.n	8011746 <HAL_DMA_IRQHandler+0x6ce>
 8011870:	4a20      	ldr	r2, [pc, #128]	; (80118f4 <HAL_DMA_IRQHandler+0x87c>)
 8011872:	4291      	cmp	r1, r2
 8011874:	d100      	bne.n	8011878 <HAL_DMA_IRQHandler+0x800>
 8011876:	e76c      	b.n	8011752 <HAL_DMA_IRQHandler+0x6da>
 8011878:	4a1f      	ldr	r2, [pc, #124]	; (80118f8 <HAL_DMA_IRQHandler+0x880>)
 801187a:	4291      	cmp	r1, r2
 801187c:	d100      	bne.n	8011880 <HAL_DMA_IRQHandler+0x808>
 801187e:	e76a      	b.n	8011756 <HAL_DMA_IRQHandler+0x6de>
 8011880:	4a1e      	ldr	r2, [pc, #120]	; (80118fc <HAL_DMA_IRQHandler+0x884>)
 8011882:	4291      	cmp	r1, r2
 8011884:	d100      	bne.n	8011888 <HAL_DMA_IRQHandler+0x810>
 8011886:	e769      	b.n	801175c <HAL_DMA_IRQHandler+0x6e4>
 8011888:	4b1d      	ldr	r3, [pc, #116]	; (8011900 <HAL_DMA_IRQHandler+0x888>)
 801188a:	4299      	cmp	r1, r3
 801188c:	d100      	bne.n	8011890 <HAL_DMA_IRQHandler+0x818>
 801188e:	e768      	b.n	8011762 <HAL_DMA_IRQHandler+0x6ea>
 8011890:	4b1c      	ldr	r3, [pc, #112]	; (8011904 <HAL_DMA_IRQHandler+0x88c>)
 8011892:	4299      	cmp	r1, r3
 8011894:	d100      	bne.n	8011898 <HAL_DMA_IRQHandler+0x820>
 8011896:	e767      	b.n	8011768 <HAL_DMA_IRQHandler+0x6f0>
 8011898:	4b14      	ldr	r3, [pc, #80]	; (80118ec <HAL_DMA_IRQHandler+0x874>)
 801189a:	4299      	cmp	r1, r3
 801189c:	d100      	bne.n	80118a0 <HAL_DMA_IRQHandler+0x828>
 801189e:	e766      	b.n	801176e <HAL_DMA_IRQHandler+0x6f6>
 80118a0:	4b19      	ldr	r3, [pc, #100]	; (8011908 <HAL_DMA_IRQHandler+0x890>)
 80118a2:	4299      	cmp	r1, r3
 80118a4:	d100      	bne.n	80118a8 <HAL_DMA_IRQHandler+0x830>
 80118a6:	e765      	b.n	8011774 <HAL_DMA_IRQHandler+0x6fc>
 80118a8:	4b18      	ldr	r3, [pc, #96]	; (801190c <HAL_DMA_IRQHandler+0x894>)
 80118aa:	4299      	cmp	r1, r3
 80118ac:	d100      	bne.n	80118b0 <HAL_DMA_IRQHandler+0x838>
 80118ae:	e763      	b.n	8011778 <HAL_DMA_IRQHandler+0x700>
 80118b0:	4b17      	ldr	r3, [pc, #92]	; (8011910 <HAL_DMA_IRQHandler+0x898>)
 80118b2:	4299      	cmp	r1, r3
 80118b4:	d100      	bne.n	80118b8 <HAL_DMA_IRQHandler+0x840>
 80118b6:	e761      	b.n	801177c <HAL_DMA_IRQHandler+0x704>
 80118b8:	4b16      	ldr	r3, [pc, #88]	; (8011914 <HAL_DMA_IRQHandler+0x89c>)
 80118ba:	18ca      	adds	r2, r1, r3
 80118bc:	4253      	negs	r3, r2
 80118be:	415a      	adcs	r2, r3
 80118c0:	4252      	negs	r2, r2
 80118c2:	4b15      	ldr	r3, [pc, #84]	; (8011918 <HAL_DMA_IRQHandler+0x8a0>)
 80118c4:	4013      	ands	r3, r2
 80118c6:	2280      	movs	r2, #128	; 0x80
 80118c8:	0292      	lsls	r2, r2, #10
 80118ca:	4694      	mov	ip, r2
 80118cc:	4463      	add	r3, ip
 80118ce:	e73b      	b.n	8011748 <HAL_DMA_IRQHandler+0x6d0>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80118d0:	681a      	ldr	r2, [r3, #0]
 80118d2:	0712      	lsls	r2, r2, #28
 80118d4:	d500      	bpl.n	80118d8 <HAL_DMA_IRQHandler+0x860>
 80118d6:	e4d2      	b.n	801127e <HAL_DMA_IRQHandler+0x206>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80118d8:	6823      	ldr	r3, [r4, #0]
 80118da:	e482      	b.n	80111e2 <HAL_DMA_IRQHandler+0x16a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80118dc:	681a      	ldr	r2, [r3, #0]
 80118de:	0712      	lsls	r2, r2, #28
 80118e0:	d500      	bpl.n	80118e4 <HAL_DMA_IRQHandler+0x86c>
 80118e2:	e4cc      	b.n	801127e <HAL_DMA_IRQHandler+0x206>
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80118e4:	6823      	ldr	r3, [r4, #0]
 80118e6:	f7ff fbfe 	bl	80110e6 <HAL_DMA_IRQHandler+0x6e>
 80118ea:	46c0      	nop			; (mov r8, r8)
 80118ec:	40020080 	.word	0x40020080
 80118f0:	40020008 	.word	0x40020008
 80118f4:	4002001c 	.word	0x4002001c
 80118f8:	40020030 	.word	0x40020030
 80118fc:	40020044 	.word	0x40020044
 8011900:	40020058 	.word	0x40020058
 8011904:	4002006c 	.word	0x4002006c
 8011908:	40020408 	.word	0x40020408
 801190c:	4002041c 	.word	0x4002041c
 8011910:	40020430 	.word	0x40020430
 8011914:	bffdfbbc 	.word	0xbffdfbbc
 8011918:	fffe2000 	.word	0xfffe2000
 801191c:	40020400 	.word	0x40020400
 8011920:	40020000 	.word	0x40020000

08011924 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8011924:	4b0a      	ldr	r3, [pc, #40]	; (8011950 <FLASH_SetErrorCode+0x2c>)
 8011926:	68db      	ldr	r3, [r3, #12]
 8011928:	06db      	lsls	r3, r3, #27
 801192a:	d504      	bpl.n	8011936 <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 801192c:	4a09      	ldr	r2, [pc, #36]	; (8011954 <FLASH_SetErrorCode+0x30>)
 801192e:	69d3      	ldr	r3, [r2, #28]
 8011930:	2102      	movs	r1, #2
 8011932:	430b      	orrs	r3, r1
 8011934:	61d3      	str	r3, [r2, #28]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8011936:	4b06      	ldr	r3, [pc, #24]	; (8011950 <FLASH_SetErrorCode+0x2c>)
 8011938:	68db      	ldr	r3, [r3, #12]
 801193a:	075b      	lsls	r3, r3, #29
 801193c:	d504      	bpl.n	8011948 <FLASH_SetErrorCode+0x24>
  {
     pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 801193e:	4a05      	ldr	r2, [pc, #20]	; (8011954 <FLASH_SetErrorCode+0x30>)
 8011940:	69d3      	ldr	r3, [r2, #28]
 8011942:	2101      	movs	r1, #1
 8011944:	430b      	orrs	r3, r1
 8011946:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR | FLASH_FLAG_PGERR);
 8011948:	4b01      	ldr	r3, [pc, #4]	; (8011950 <FLASH_SetErrorCode+0x2c>)
 801194a:	2214      	movs	r2, #20
 801194c:	60da      	str	r2, [r3, #12]
}  
 801194e:	4770      	bx	lr
 8011950:	40022000 	.word	0x40022000
 8011954:	20006b80 	.word	0x20006b80

08011958 <HAL_FLASH_Unlock>:
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8011958:	4b06      	ldr	r3, [pc, #24]	; (8011974 <HAL_FLASH_Unlock+0x1c>)
 801195a:	691b      	ldr	r3, [r3, #16]
 801195c:	061b      	lsls	r3, r3, #24
 801195e:	d506      	bpl.n	801196e <HAL_FLASH_Unlock+0x16>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8011960:	4b04      	ldr	r3, [pc, #16]	; (8011974 <HAL_FLASH_Unlock+0x1c>)
 8011962:	4a05      	ldr	r2, [pc, #20]	; (8011978 <HAL_FLASH_Unlock+0x20>)
 8011964:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8011966:	4a05      	ldr	r2, [pc, #20]	; (801197c <HAL_FLASH_Unlock+0x24>)
 8011968:	605a      	str	r2, [r3, #4]
  return HAL_OK; 
 801196a:	2000      	movs	r0, #0
}
 801196c:	4770      	bx	lr
    return HAL_ERROR;
 801196e:	2001      	movs	r0, #1
 8011970:	e7fc      	b.n	801196c <HAL_FLASH_Unlock+0x14>
 8011972:	46c0      	nop			; (mov r8, r8)
 8011974:	40022000 	.word	0x40022000
 8011978:	45670123 	.word	0x45670123
 801197c:	cdef89ab 	.word	0xcdef89ab

08011980 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8011980:	4a03      	ldr	r2, [pc, #12]	; (8011990 <HAL_FLASH_Lock+0x10>)
 8011982:	6913      	ldr	r3, [r2, #16]
 8011984:	2180      	movs	r1, #128	; 0x80
 8011986:	430b      	orrs	r3, r1
 8011988:	6113      	str	r3, [r2, #16]
}
 801198a:	2000      	movs	r0, #0
 801198c:	4770      	bx	lr
 801198e:	46c0      	nop			; (mov r8, r8)
 8011990:	40022000 	.word	0x40022000

08011994 <FLASH_WaitForLastOperation>:
{
 8011994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011996:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8011998:	f7ff f91e 	bl	8010bd8 <HAL_GetTick>
 801199c:	0007      	movs	r7, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 801199e:	4e13      	ldr	r6, [pc, #76]	; (80119ec <FLASH_WaitForLastOperation+0x58>)
 80119a0:	2501      	movs	r5, #1
 80119a2:	68f3      	ldr	r3, [r6, #12]
 80119a4:	421d      	tst	r5, r3
 80119a6:	d00a      	beq.n	80119be <FLASH_WaitForLastOperation+0x2a>
    if (Timeout != HAL_MAX_DELAY)
 80119a8:	1c63      	adds	r3, r4, #1
 80119aa:	d0fa      	beq.n	80119a2 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80119ac:	2c00      	cmp	r4, #0
 80119ae:	d01b      	beq.n	80119e8 <FLASH_WaitForLastOperation+0x54>
 80119b0:	f7ff f912 	bl	8010bd8 <HAL_GetTick>
 80119b4:	1bc0      	subs	r0, r0, r7
 80119b6:	42a0      	cmp	r0, r4
 80119b8:	d9f3      	bls.n	80119a2 <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 80119ba:	2003      	movs	r0, #3
 80119bc:	e00f      	b.n	80119de <FLASH_WaitForLastOperation+0x4a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80119be:	4b0b      	ldr	r3, [pc, #44]	; (80119ec <FLASH_WaitForLastOperation+0x58>)
 80119c0:	68db      	ldr	r3, [r3, #12]
 80119c2:	069b      	lsls	r3, r3, #26
 80119c4:	d502      	bpl.n	80119cc <FLASH_WaitForLastOperation+0x38>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80119c6:	4b09      	ldr	r3, [pc, #36]	; (80119ec <FLASH_WaitForLastOperation+0x58>)
 80119c8:	2220      	movs	r2, #32
 80119ca:	60da      	str	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80119cc:	4b07      	ldr	r3, [pc, #28]	; (80119ec <FLASH_WaitForLastOperation+0x58>)
 80119ce:	68db      	ldr	r3, [r3, #12]
 80119d0:	06db      	lsls	r3, r3, #27
 80119d2:	d405      	bmi.n	80119e0 <FLASH_WaitForLastOperation+0x4c>
 80119d4:	4b05      	ldr	r3, [pc, #20]	; (80119ec <FLASH_WaitForLastOperation+0x58>)
 80119d6:	68db      	ldr	r3, [r3, #12]
  return HAL_OK;
 80119d8:	2000      	movs	r0, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80119da:	075b      	lsls	r3, r3, #29
 80119dc:	d400      	bmi.n	80119e0 <FLASH_WaitForLastOperation+0x4c>
}
 80119de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FLASH_SetErrorCode();
 80119e0:	f7ff ffa0 	bl	8011924 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80119e4:	2001      	movs	r0, #1
 80119e6:	e7fa      	b.n	80119de <FLASH_WaitForLastOperation+0x4a>
        return HAL_TIMEOUT;
 80119e8:	2003      	movs	r0, #3
 80119ea:	e7f8      	b.n	80119de <FLASH_WaitForLastOperation+0x4a>
 80119ec:	40022000 	.word	0x40022000

080119f0 <HAL_FLASH_Program>:
{
 80119f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119f2:	46de      	mov	lr, fp
 80119f4:	4657      	mov	r7, sl
 80119f6:	464e      	mov	r6, r9
 80119f8:	4645      	mov	r5, r8
 80119fa:	b5e0      	push	{r5, r6, r7, lr}
 80119fc:	b083      	sub	sp, #12
 80119fe:	0004      	movs	r4, r0
 8011a00:	000e      	movs	r6, r1
 8011a02:	9201      	str	r2, [sp, #4]
 8011a04:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8011a06:	4b2a      	ldr	r3, [pc, #168]	; (8011ab0 <HAL_FLASH_Program+0xc0>)
 8011a08:	7e1b      	ldrb	r3, [r3, #24]
 8011a0a:	2b01      	cmp	r3, #1
 8011a0c:	d04e      	beq.n	8011aac <HAL_FLASH_Program+0xbc>
 8011a0e:	4b28      	ldr	r3, [pc, #160]	; (8011ab0 <HAL_FLASH_Program+0xc0>)
 8011a10:	2201      	movs	r2, #1
 8011a12:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011a14:	4827      	ldr	r0, [pc, #156]	; (8011ab4 <HAL_FLASH_Program+0xc4>)
 8011a16:	f7ff ffbd 	bl	8011994 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8011a1a:	2800      	cmp	r0, #0
 8011a1c:	d13c      	bne.n	8011a98 <HAL_FLASH_Program+0xa8>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8011a1e:	2c01      	cmp	r4, #1
 8011a20:	d010      	beq.n	8011a44 <HAL_FLASH_Program+0x54>
      nbiterations = 4;
 8011a22:	3c02      	subs	r4, #2
 8011a24:	4260      	negs	r0, r4
 8011a26:	4144      	adcs	r4, r0
 8011a28:	4264      	negs	r4, r4
 8011a2a:	2301      	movs	r3, #1
 8011a2c:	439c      	bics	r4, r3
 8011a2e:	46a0      	mov	r8, r4
 8011a30:	3303      	adds	r3, #3
 8011a32:	469c      	mov	ip, r3
 8011a34:	44e0      	add	r8, ip
 8011a36:	2500      	movs	r5, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011a38:	4b1d      	ldr	r3, [pc, #116]	; (8011ab0 <HAL_FLASH_Program+0xc0>)
 8011a3a:	469b      	mov	fp, r3
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	469a      	mov	sl, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011a40:	4c1d      	ldr	r4, [pc, #116]	; (8011ab8 <HAL_FLASH_Program+0xc8>)
 8011a42:	e021      	b.n	8011a88 <HAL_FLASH_Program+0x98>
      nbiterations = 1;
 8011a44:	2301      	movs	r3, #1
 8011a46:	4698      	mov	r8, r3
 8011a48:	e7f5      	b.n	8011a36 <HAL_FLASH_Program+0x46>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011a4a:	2220      	movs	r2, #32
 8011a4c:	1ad2      	subs	r2, r2, r3
 8011a4e:	4649      	mov	r1, r9
 8011a50:	4091      	lsls	r1, r2
 8011a52:	000a      	movs	r2, r1
 8011a54:	9901      	ldr	r1, [sp, #4]
 8011a56:	40d9      	lsrs	r1, r3
 8011a58:	000b      	movs	r3, r1
 8011a5a:	4313      	orrs	r3, r2
 8011a5c:	b29b      	uxth	r3, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011a5e:	465a      	mov	r2, fp
 8011a60:	4651      	mov	r1, sl
 8011a62:	61d1      	str	r1, [r2, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8011a64:	6922      	ldr	r2, [r4, #16]
 8011a66:	2701      	movs	r7, #1
 8011a68:	433a      	orrs	r2, r7
 8011a6a:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 8011a6c:	8033      	strh	r3, [r6, #0]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011a6e:	4811      	ldr	r0, [pc, #68]	; (8011ab4 <HAL_FLASH_Program+0xc4>)
 8011a70:	f7ff ff90 	bl	8011994 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8011a74:	6923      	ldr	r3, [r4, #16]
 8011a76:	43bb      	bics	r3, r7
 8011a78:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 8011a7a:	2800      	cmp	r0, #0
 8011a7c:	d10c      	bne.n	8011a98 <HAL_FLASH_Program+0xa8>
    for (index = 0; index < nbiterations; index++)
 8011a7e:	3501      	adds	r5, #1
 8011a80:	3602      	adds	r6, #2
 8011a82:	b2eb      	uxtb	r3, r5
 8011a84:	4598      	cmp	r8, r3
 8011a86:	d907      	bls.n	8011a98 <HAL_FLASH_Program+0xa8>
      FLASH_Program_HalfWord((Address + (2*index)), (uint16_t)(Data >> (16*index)));
 8011a88:	012b      	lsls	r3, r5, #4
 8011a8a:	2220      	movs	r2, #32
 8011a8c:	4252      	negs	r2, r2
 8011a8e:	189a      	adds	r2, r3, r2
 8011a90:	d4db      	bmi.n	8011a4a <HAL_FLASH_Program+0x5a>
 8011a92:	464b      	mov	r3, r9
 8011a94:	40d3      	lsrs	r3, r2
 8011a96:	e7e1      	b.n	8011a5c <HAL_FLASH_Program+0x6c>
  __HAL_UNLOCK(&pFlash);
 8011a98:	4b05      	ldr	r3, [pc, #20]	; (8011ab0 <HAL_FLASH_Program+0xc0>)
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	761a      	strb	r2, [r3, #24]
}
 8011a9e:	b003      	add	sp, #12
 8011aa0:	bcf0      	pop	{r4, r5, r6, r7}
 8011aa2:	46bb      	mov	fp, r7
 8011aa4:	46b2      	mov	sl, r6
 8011aa6:	46a9      	mov	r9, r5
 8011aa8:	46a0      	mov	r8, r4
 8011aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8011aac:	2002      	movs	r0, #2
 8011aae:	e7f6      	b.n	8011a9e <HAL_FLASH_Program+0xae>
 8011ab0:	20006b80 	.word	0x20006b80
 8011ab4:	0000c350 	.word	0x0000c350
 8011ab8:	40022000 	.word	0x40022000

08011abc <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011abc:	4b06      	ldr	r3, [pc, #24]	; (8011ad8 <FLASH_MassErase+0x1c>)
 8011abe:	2200      	movs	r2, #0
 8011ac0:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8011ac2:	4b06      	ldr	r3, [pc, #24]	; (8011adc <FLASH_MassErase+0x20>)
 8011ac4:	691a      	ldr	r2, [r3, #16]
 8011ac6:	2104      	movs	r1, #4
 8011ac8:	430a      	orrs	r2, r1
 8011aca:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011acc:	691a      	ldr	r2, [r3, #16]
 8011ace:	313c      	adds	r1, #60	; 0x3c
 8011ad0:	430a      	orrs	r2, r1
 8011ad2:	611a      	str	r2, [r3, #16]
}
 8011ad4:	4770      	bx	lr
 8011ad6:	46c0      	nop			; (mov r8, r8)
 8011ad8:	20006b80 	.word	0x20006b80
 8011adc:	40022000 	.word	0x40022000

08011ae0 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8011ae0:	4b06      	ldr	r3, [pc, #24]	; (8011afc <FLASH_PageErase+0x1c>)
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8011ae6:	4b06      	ldr	r3, [pc, #24]	; (8011b00 <FLASH_PageErase+0x20>)
 8011ae8:	691a      	ldr	r2, [r3, #16]
 8011aea:	2102      	movs	r1, #2
 8011aec:	430a      	orrs	r2, r1
 8011aee:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8011af0:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8011af2:	691a      	ldr	r2, [r3, #16]
 8011af4:	313e      	adds	r1, #62	; 0x3e
 8011af6:	430a      	orrs	r2, r1
 8011af8:	611a      	str	r2, [r3, #16]
}
 8011afa:	4770      	bx	lr
 8011afc:	20006b80 	.word	0x20006b80
 8011b00:	40022000 	.word	0x40022000

08011b04 <HAL_FLASHEx_Erase>:
{
 8011b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b06:	46ce      	mov	lr, r9
 8011b08:	4647      	mov	r7, r8
 8011b0a:	b580      	push	{r7, lr}
 8011b0c:	0005      	movs	r5, r0
 8011b0e:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8011b10:	4b2a      	ldr	r3, [pc, #168]	; (8011bbc <HAL_FLASHEx_Erase+0xb8>)
 8011b12:	7e1b      	ldrb	r3, [r3, #24]
 8011b14:	2b01      	cmp	r3, #1
 8011b16:	d04e      	beq.n	8011bb6 <HAL_FLASHEx_Erase+0xb2>
 8011b18:	4b28      	ldr	r3, [pc, #160]	; (8011bbc <HAL_FLASHEx_Erase+0xb8>)
 8011b1a:	2201      	movs	r2, #1
 8011b1c:	761a      	strb	r2, [r3, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8011b1e:	6803      	ldr	r3, [r0, #0]
 8011b20:	2b01      	cmp	r3, #1
 8011b22:	d02a      	beq.n	8011b7a <HAL_FLASHEx_Erase+0x76>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011b24:	4826      	ldr	r0, [pc, #152]	; (8011bc0 <HAL_FLASHEx_Erase+0xbc>)
 8011b26:	f7ff ff35 	bl	8011994 <FLASH_WaitForLastOperation>
 8011b2a:	0003      	movs	r3, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 8011b2c:	2001      	movs	r0, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d12a      	bne.n	8011b88 <HAL_FLASHEx_Erase+0x84>
        *PageError = 0xFFFFFFFF;
 8011b32:	3b01      	subs	r3, #1
 8011b34:	4642      	mov	r2, r8
 8011b36:	6013      	str	r3, [r2, #0]
        for(address = pEraseInit->PageAddress;
 8011b38:	686c      	ldr	r4, [r5, #4]
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8011b3a:	68ab      	ldr	r3, [r5, #8]
 8011b3c:	02db      	lsls	r3, r3, #11
 8011b3e:	191b      	adds	r3, r3, r4
        for(address = pEraseInit->PageAddress;
 8011b40:	429c      	cmp	r4, r3
 8011b42:	d236      	bcs.n	8011bb2 <HAL_FLASHEx_Erase+0xae>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011b44:	4b1e      	ldr	r3, [pc, #120]	; (8011bc0 <HAL_FLASHEx_Erase+0xbc>)
 8011b46:	4699      	mov	r9, r3
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8011b48:	4e1e      	ldr	r6, [pc, #120]	; (8011bc4 <HAL_FLASHEx_Erase+0xc0>)
 8011b4a:	2702      	movs	r7, #2
          FLASH_PageErase(address);
 8011b4c:	0020      	movs	r0, r4
 8011b4e:	f7ff ffc7 	bl	8011ae0 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011b52:	4648      	mov	r0, r9
 8011b54:	f7ff ff1e 	bl	8011994 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8011b58:	6933      	ldr	r3, [r6, #16]
 8011b5a:	43bb      	bics	r3, r7
 8011b5c:	6133      	str	r3, [r6, #16]
          if (status != HAL_OK)
 8011b5e:	2800      	cmp	r0, #0
 8011b60:	d124      	bne.n	8011bac <HAL_FLASHEx_Erase+0xa8>
            address += FLASH_PAGE_SIZE)
 8011b62:	2380      	movs	r3, #128	; 0x80
 8011b64:	011b      	lsls	r3, r3, #4
 8011b66:	469c      	mov	ip, r3
 8011b68:	4464      	add	r4, ip
            address < (pEraseInit->PageAddress + (pEraseInit->NbPages)*FLASH_PAGE_SIZE);
 8011b6a:	68ab      	ldr	r3, [r5, #8]
 8011b6c:	02db      	lsls	r3, r3, #11
 8011b6e:	686a      	ldr	r2, [r5, #4]
 8011b70:	4694      	mov	ip, r2
 8011b72:	4463      	add	r3, ip
        for(address = pEraseInit->PageAddress;
 8011b74:	42a3      	cmp	r3, r4
 8011b76:	d8e9      	bhi.n	8011b4c <HAL_FLASHEx_Erase+0x48>
 8011b78:	e006      	b.n	8011b88 <HAL_FLASHEx_Erase+0x84>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011b7a:	4811      	ldr	r0, [pc, #68]	; (8011bc0 <HAL_FLASHEx_Erase+0xbc>)
 8011b7c:	f7ff ff0a 	bl	8011994 <FLASH_WaitForLastOperation>
 8011b80:	0003      	movs	r3, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 8011b82:	2001      	movs	r0, #1
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d006      	beq.n	8011b96 <HAL_FLASHEx_Erase+0x92>
  __HAL_UNLOCK(&pFlash);
 8011b88:	4b0c      	ldr	r3, [pc, #48]	; (8011bbc <HAL_FLASHEx_Erase+0xb8>)
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	761a      	strb	r2, [r3, #24]
}
 8011b8e:	bcc0      	pop	{r6, r7}
 8011b90:	46b9      	mov	r9, r7
 8011b92:	46b0      	mov	r8, r6
 8011b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        FLASH_MassErase();
 8011b96:	f7ff ff91 	bl	8011abc <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8011b9a:	4809      	ldr	r0, [pc, #36]	; (8011bc0 <HAL_FLASHEx_Erase+0xbc>)
 8011b9c:	f7ff fefa 	bl	8011994 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8011ba0:	4a08      	ldr	r2, [pc, #32]	; (8011bc4 <HAL_FLASHEx_Erase+0xc0>)
 8011ba2:	6913      	ldr	r3, [r2, #16]
 8011ba4:	2104      	movs	r1, #4
 8011ba6:	438b      	bics	r3, r1
 8011ba8:	6113      	str	r3, [r2, #16]
 8011baa:	e7ed      	b.n	8011b88 <HAL_FLASHEx_Erase+0x84>
            *PageError = address;
 8011bac:	4643      	mov	r3, r8
 8011bae:	601c      	str	r4, [r3, #0]
            break;
 8011bb0:	e7ea      	b.n	8011b88 <HAL_FLASHEx_Erase+0x84>
  HAL_StatusTypeDef status = HAL_ERROR;
 8011bb2:	2001      	movs	r0, #1
 8011bb4:	e7e8      	b.n	8011b88 <HAL_FLASHEx_Erase+0x84>
  __HAL_LOCK(&pFlash);
 8011bb6:	2002      	movs	r0, #2
 8011bb8:	e7e9      	b.n	8011b8e <HAL_FLASHEx_Erase+0x8a>
 8011bba:	46c0      	nop			; (mov r8, r8)
 8011bbc:	20006b80 	.word	0x20006b80
 8011bc0:	0000c350 	.word	0x0000c350
 8011bc4:	40022000 	.word	0x40022000

08011bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8011bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011bca:	46de      	mov	lr, fp
 8011bcc:	4657      	mov	r7, sl
 8011bce:	464e      	mov	r6, r9
 8011bd0:	4645      	mov	r5, r8
 8011bd2:	b5e0      	push	{r5, r6, r7, lr}
 8011bd4:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while ((GPIO_Init->Pin) >> position)
 8011bd6:	680a      	ldr	r2, [r1, #0]
 8011bd8:	2a00      	cmp	r2, #0
 8011bda:	d100      	bne.n	8011bde <HAL_GPIO_Init+0x16>
 8011bdc:	e0c9      	b.n	8011d72 <HAL_GPIO_Init+0x1aa>
  uint32_t position = 0x00;
 8011bde:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011be0:	2401      	movs	r4, #1
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8011be2:	2510      	movs	r5, #16
 8011be4:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8011be6:	2580      	movs	r5, #128	; 0x80
 8011be8:	056d      	lsls	r5, r5, #21
 8011bea:	46a8      	mov	r8, r5
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011bec:	4d64      	ldr	r5, [pc, #400]	; (8011d80 <HAL_GPIO_Init+0x1b8>)
 8011bee:	1945      	adds	r5, r0, r5
 8011bf0:	1e6e      	subs	r6, r5, #1
 8011bf2:	41b5      	sbcs	r5, r6
 8011bf4:	3504      	adds	r5, #4
 8011bf6:	46a9      	mov	r9, r5
 8011bf8:	e044      	b.n	8011c84 <HAL_GPIO_Init+0xbc>
        temp = GPIOx->AFR[position >> 3];
 8011bfa:	08da      	lsrs	r2, r3, #3
 8011bfc:	0092      	lsls	r2, r2, #2
 8011bfe:	1882      	adds	r2, r0, r2
 8011c00:	9201      	str	r2, [sp, #4]
 8011c02:	6a15      	ldr	r5, [r2, #32]
 8011c04:	46aa      	mov	sl, r5
        CLEAR_BIT(temp, (uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;      
 8011c06:	2507      	movs	r5, #7
 8011c08:	401d      	ands	r5, r3
 8011c0a:	00ad      	lsls	r5, r5, #2
 8011c0c:	270f      	movs	r7, #15
 8011c0e:	40af      	lsls	r7, r5
 8011c10:	46bb      	mov	fp, r7
 8011c12:	4657      	mov	r7, sl
 8011c14:	465a      	mov	r2, fp
 8011c16:	4397      	bics	r7, r2
 8011c18:	46ba      	mov	sl, r7
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));       
 8011c1a:	690f      	ldr	r7, [r1, #16]
 8011c1c:	40af      	lsls	r7, r5
 8011c1e:	003d      	movs	r5, r7
 8011c20:	4652      	mov	r2, sl
 8011c22:	4315      	orrs	r5, r2
        GPIOx->AFR[position >> 3] = temp;
 8011c24:	9a01      	ldr	r2, [sp, #4]
 8011c26:	6215      	str	r5, [r2, #32]
 8011c28:	e037      	b.n	8011c9a <HAL_GPIO_Init+0xd2>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011c2a:	2500      	movs	r5, #0
 8011c2c:	465f      	mov	r7, fp
 8011c2e:	40bd      	lsls	r5, r7
 8011c30:	4657      	mov	r7, sl
 8011c32:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8011c34:	6095      	str	r5, [r2, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8011c36:	4a53      	ldr	r2, [pc, #332]	; (8011d84 <HAL_GPIO_Init+0x1bc>)
 8011c38:	6812      	ldr	r2, [r2, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011c3a:	43f5      	mvns	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8011c3c:	684f      	ldr	r7, [r1, #4]
 8011c3e:	03ff      	lsls	r7, r7, #15
 8011c40:	d500      	bpl.n	8011c44 <HAL_GPIO_Init+0x7c>
 8011c42:	e08e      	b.n	8011d62 <HAL_GPIO_Init+0x19a>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8011c44:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8011c46:	4f4f      	ldr	r7, [pc, #316]	; (8011d84 <HAL_GPIO_Init+0x1bc>)
 8011c48:	603a      	str	r2, [r7, #0]

        temp = EXTI->EMR;
 8011c4a:	687a      	ldr	r2, [r7, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8011c4c:	684f      	ldr	r7, [r1, #4]
 8011c4e:	03bf      	lsls	r7, r7, #14
 8011c50:	d500      	bpl.n	8011c54 <HAL_GPIO_Init+0x8c>
 8011c52:	e088      	b.n	8011d66 <HAL_GPIO_Init+0x19e>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8011c54:	402a      	ands	r2, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8011c56:	4f4b      	ldr	r7, [pc, #300]	; (8011d84 <HAL_GPIO_Init+0x1bc>)
 8011c58:	607a      	str	r2, [r7, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8011c5a:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8011c5c:	684f      	ldr	r7, [r1, #4]
 8011c5e:	02ff      	lsls	r7, r7, #11
 8011c60:	d500      	bpl.n	8011c64 <HAL_GPIO_Init+0x9c>
 8011c62:	e082      	b.n	8011d6a <HAL_GPIO_Init+0x1a2>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011c64:	402a      	ands	r2, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8011c66:	4f47      	ldr	r7, [pc, #284]	; (8011d84 <HAL_GPIO_Init+0x1bc>)
 8011c68:	60ba      	str	r2, [r7, #8]

        temp = EXTI->FTSR;
 8011c6a:	68fa      	ldr	r2, [r7, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8011c6c:	684f      	ldr	r7, [r1, #4]
 8011c6e:	02bf      	lsls	r7, r7, #10
 8011c70:	d47d      	bmi.n	8011d6e <HAL_GPIO_Init+0x1a6>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8011c72:	402a      	ands	r2, r5
 8011c74:	0016      	movs	r6, r2
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8011c76:	4a43      	ldr	r2, [pc, #268]	; (8011d84 <HAL_GPIO_Init+0x1bc>)
 8011c78:	60d6      	str	r6, [r2, #12]
      }
    }
    
    position++;
 8011c7a:	3301      	adds	r3, #1
  while ((GPIO_Init->Pin) >> position)
 8011c7c:	680a      	ldr	r2, [r1, #0]
 8011c7e:	0015      	movs	r5, r2
 8011c80:	40dd      	lsrs	r5, r3
 8011c82:	d076      	beq.n	8011d72 <HAL_GPIO_Init+0x1aa>
    iocurrent = (GPIO_Init->Pin) & (1 << position);
 8011c84:	0025      	movs	r5, r4
 8011c86:	409d      	lsls	r5, r3
 8011c88:	0016      	movs	r6, r2
 8011c8a:	402e      	ands	r6, r5
    if(iocurrent)
 8011c8c:	422a      	tst	r2, r5
 8011c8e:	d0f4      	beq.n	8011c7a <HAL_GPIO_Init+0xb2>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8011c90:	684a      	ldr	r2, [r1, #4]
 8011c92:	4665      	mov	r5, ip
 8011c94:	43aa      	bics	r2, r5
 8011c96:	2a02      	cmp	r2, #2
 8011c98:	d0af      	beq.n	8011bfa <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8011c9a:	6802      	ldr	r2, [r0, #0]
 8011c9c:	4693      	mov	fp, r2
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8011c9e:	005d      	lsls	r5, r3, #1
 8011ca0:	2203      	movs	r2, #3
 8011ca2:	40aa      	lsls	r2, r5
 8011ca4:	43d7      	mvns	r7, r2
 8011ca6:	46ba      	mov	sl, r7
 8011ca8:	465f      	mov	r7, fp
 8011caa:	4397      	bics	r7, r2
 8011cac:	46bb      	mov	fp, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8011cae:	684a      	ldr	r2, [r1, #4]
 8011cb0:	2703      	movs	r7, #3
 8011cb2:	403a      	ands	r2, r7
 8011cb4:	40aa      	lsls	r2, r5
 8011cb6:	465f      	mov	r7, fp
 8011cb8:	433a      	orrs	r2, r7
      GPIOx->MODER = temp;
 8011cba:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8011cbc:	684a      	ldr	r2, [r1, #4]
 8011cbe:	4667      	mov	r7, ip
 8011cc0:	43ba      	bics	r2, r7
 8011cc2:	3a01      	subs	r2, #1
 8011cc4:	2a01      	cmp	r2, #1
 8011cc6:	d812      	bhi.n	8011cee <HAL_GPIO_Init+0x126>
        temp = GPIOx->OSPEEDR; 
 8011cc8:	6882      	ldr	r2, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8011cca:	4657      	mov	r7, sl
 8011ccc:	4017      	ands	r7, r2
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8011cce:	68ca      	ldr	r2, [r1, #12]
 8011cd0:	40aa      	lsls	r2, r5
 8011cd2:	433a      	orrs	r2, r7
        GPIOx->OSPEEDR = temp;
 8011cd4:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8011cd6:	6842      	ldr	r2, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8011cd8:	0027      	movs	r7, r4
 8011cda:	409f      	lsls	r7, r3
 8011cdc:	43ba      	bics	r2, r7
 8011cde:	4693      	mov	fp, r2
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8011ce0:	684a      	ldr	r2, [r1, #4]
 8011ce2:	0912      	lsrs	r2, r2, #4
 8011ce4:	4022      	ands	r2, r4
 8011ce6:	409a      	lsls	r2, r3
 8011ce8:	465f      	mov	r7, fp
 8011cea:	433a      	orrs	r2, r7
        GPIOx->OTYPER = temp;
 8011cec:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8011cee:	68c2      	ldr	r2, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8011cf0:	4657      	mov	r7, sl
 8011cf2:	4017      	ands	r7, r2
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8011cf4:	688a      	ldr	r2, [r1, #8]
 8011cf6:	40aa      	lsls	r2, r5
 8011cf8:	433a      	orrs	r2, r7
      GPIOx->PUPDR = temp;
 8011cfa:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8011cfc:	684a      	ldr	r2, [r1, #4]
 8011cfe:	4645      	mov	r5, r8
 8011d00:	422a      	tst	r2, r5
 8011d02:	d0ba      	beq.n	8011c7a <HAL_GPIO_Init+0xb2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011d04:	4a20      	ldr	r2, [pc, #128]	; (8011d88 <HAL_GPIO_Init+0x1c0>)
 8011d06:	6995      	ldr	r5, [r2, #24]
 8011d08:	4325      	orrs	r5, r4
 8011d0a:	6195      	str	r5, [r2, #24]
 8011d0c:	6992      	ldr	r2, [r2, #24]
 8011d0e:	4022      	ands	r2, r4
 8011d10:	9203      	str	r2, [sp, #12]
 8011d12:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8011d14:	089a      	lsrs	r2, r3, #2
 8011d16:	0092      	lsls	r2, r2, #2
 8011d18:	4d1c      	ldr	r5, [pc, #112]	; (8011d8c <HAL_GPIO_Init+0x1c4>)
 8011d1a:	46aa      	mov	sl, r5
 8011d1c:	4452      	add	r2, sl
 8011d1e:	6895      	ldr	r5, [r2, #8]
 8011d20:	46aa      	mov	sl, r5
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8011d22:	2503      	movs	r5, #3
 8011d24:	401d      	ands	r5, r3
 8011d26:	00ad      	lsls	r5, r5, #2
 8011d28:	46ab      	mov	fp, r5
 8011d2a:	250f      	movs	r5, #15
 8011d2c:	465f      	mov	r7, fp
 8011d2e:	40bd      	lsls	r5, r7
 8011d30:	4657      	mov	r7, sl
 8011d32:	43af      	bics	r7, r5
 8011d34:	46ba      	mov	sl, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8011d36:	2590      	movs	r5, #144	; 0x90
 8011d38:	05ed      	lsls	r5, r5, #23
 8011d3a:	42a8      	cmp	r0, r5
 8011d3c:	d100      	bne.n	8011d40 <HAL_GPIO_Init+0x178>
 8011d3e:	e774      	b.n	8011c2a <HAL_GPIO_Init+0x62>
 8011d40:	4d13      	ldr	r5, [pc, #76]	; (8011d90 <HAL_GPIO_Init+0x1c8>)
 8011d42:	42a8      	cmp	r0, r5
 8011d44:	d007      	beq.n	8011d56 <HAL_GPIO_Init+0x18e>
 8011d46:	4d13      	ldr	r5, [pc, #76]	; (8011d94 <HAL_GPIO_Init+0x1cc>)
 8011d48:	42a8      	cmp	r0, r5
 8011d4a:	d006      	beq.n	8011d5a <HAL_GPIO_Init+0x192>
 8011d4c:	4d12      	ldr	r5, [pc, #72]	; (8011d98 <HAL_GPIO_Init+0x1d0>)
 8011d4e:	42a8      	cmp	r0, r5
 8011d50:	d005      	beq.n	8011d5e <HAL_GPIO_Init+0x196>
 8011d52:	464d      	mov	r5, r9
 8011d54:	e76a      	b.n	8011c2c <HAL_GPIO_Init+0x64>
 8011d56:	0025      	movs	r5, r4
 8011d58:	e768      	b.n	8011c2c <HAL_GPIO_Init+0x64>
 8011d5a:	2502      	movs	r5, #2
 8011d5c:	e766      	b.n	8011c2c <HAL_GPIO_Init+0x64>
 8011d5e:	2503      	movs	r5, #3
 8011d60:	e764      	b.n	8011c2c <HAL_GPIO_Init+0x64>
          SET_BIT(temp, iocurrent); 
 8011d62:	4332      	orrs	r2, r6
 8011d64:	e76f      	b.n	8011c46 <HAL_GPIO_Init+0x7e>
          SET_BIT(temp, iocurrent); 
 8011d66:	4332      	orrs	r2, r6
 8011d68:	e775      	b.n	8011c56 <HAL_GPIO_Init+0x8e>
          SET_BIT(temp, iocurrent); 
 8011d6a:	4332      	orrs	r2, r6
 8011d6c:	e77b      	b.n	8011c66 <HAL_GPIO_Init+0x9e>
          SET_BIT(temp, iocurrent); 
 8011d6e:	4316      	orrs	r6, r2
 8011d70:	e781      	b.n	8011c76 <HAL_GPIO_Init+0xae>
  } 
}
 8011d72:	b005      	add	sp, #20
 8011d74:	bcf0      	pop	{r4, r5, r6, r7}
 8011d76:	46bb      	mov	fp, r7
 8011d78:	46b2      	mov	sl, r6
 8011d7a:	46a9      	mov	r9, r5
 8011d7c:	46a0      	mov	r8, r4
 8011d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d80:	b7fff000 	.word	0xb7fff000
 8011d84:	40010400 	.word	0x40010400
 8011d88:	40021000 	.word	0x40021000
 8011d8c:	40010000 	.word	0x40010000
 8011d90:	48000400 	.word	0x48000400
 8011d94:	48000800 	.word	0x48000800
 8011d98:	48000c00 	.word	0x48000c00

08011d9c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8011d9c:	6900      	ldr	r0, [r0, #16]
 8011d9e:	4008      	ands	r0, r1
 8011da0:	1e41      	subs	r1, r0, #1
 8011da2:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8011da4:	b2c0      	uxtb	r0, r0
  }
 8011da6:	4770      	bx	lr

08011da8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8011da8:	2a00      	cmp	r2, #0
 8011daa:	d001      	beq.n	8011db0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8011dac:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8011dae:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8011db0:	6281      	str	r1, [r0, #40]	; 0x28
}
 8011db2:	e7fc      	b.n	8011dae <HAL_GPIO_WritePin+0x6>

08011db4 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8011db4:	6943      	ldr	r3, [r0, #20]
 8011db6:	4059      	eors	r1, r3
 8011db8:	6141      	str	r1, [r0, #20]
}
 8011dba:	4770      	bx	lr

08011dbc <I2C_TransferConfig>:
  *     @arg I2C_GENERATE_START_READ: Generate Restart for read request.
  *     @arg I2C_GENERATE_START_WRITE: Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8011dbc:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
    
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 8011dbe:	6804      	ldr	r4, [r0, #0]
 8011dc0:	6860      	ldr	r0, [r4, #4]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8011dc2:	4d06      	ldr	r5, [pc, #24]	; (8011ddc <I2C_TransferConfig+0x20>)
 8011dc4:	4028      	ands	r0, r5
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8011dc6:	0412      	lsls	r2, r2, #16
 8011dc8:	9d03      	ldr	r5, [sp, #12]
 8011dca:	432b      	orrs	r3, r5
 8011dcc:	431a      	orrs	r2, r3
 8011dce:	0589      	lsls	r1, r1, #22
 8011dd0:	0d89      	lsrs	r1, r1, #22
 8011dd2:	430a      	orrs	r2, r1
 8011dd4:	4302      	orrs	r2, r0
            (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
 8011dd6:	6062      	str	r2, [r4, #4]
}  
 8011dd8:	bd30      	pop	{r4, r5, pc}
 8011dda:	46c0      	nop			; (mov r8, r8)
 8011ddc:	fc009800 	.word	0xfc009800

08011de0 <I2C_IsAcknowledgeFailed>:
{
 8011de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011de2:	0007      	movs	r7, r0
 8011de4:	000c      	movs	r4, r1
  tickstart = HAL_GetTick();
 8011de6:	f7fe fef7 	bl	8010bd8 <HAL_GetTick>
 8011dea:	0005      	movs	r5, r0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	699a      	ldr	r2, [r3, #24]
  return HAL_OK;      
 8011df0:	2000      	movs	r0, #0
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8011df2:	06d2      	lsls	r2, r2, #27
 8011df4:	d53c      	bpl.n	8011e70 <I2C_IsAcknowledgeFailed+0x90>
    if((hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX)
 8011df6:	2235      	movs	r2, #53	; 0x35
 8011df8:	5cba      	ldrb	r2, [r7, r2]
 8011dfa:	2a12      	cmp	r2, #18
 8011dfc:	d007      	beq.n	8011e0e <I2C_IsAcknowledgeFailed+0x2e>
 8011dfe:	2235      	movs	r2, #53	; 0x35
 8011e00:	5cba      	ldrb	r2, [r7, r2]
 8011e02:	2a52      	cmp	r2, #82	; 0x52
 8011e04:	d003      	beq.n	8011e0e <I2C_IsAcknowledgeFailed+0x2e>
       || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX))
 8011e06:	2235      	movs	r2, #53	; 0x35
 8011e08:	5cba      	ldrb	r2, [r7, r2]
 8011e0a:	2a62      	cmp	r2, #98	; 0x62
 8011e0c:	d107      	bne.n	8011e1e <I2C_IsAcknowledgeFailed+0x3e>
      if((hi2c->Instance->CR2 & I2C_AUTOEND_MODE) != I2C_AUTOEND_MODE)
 8011e0e:	685a      	ldr	r2, [r3, #4]
 8011e10:	0192      	lsls	r2, r2, #6
 8011e12:	d404      	bmi.n	8011e1e <I2C_IsAcknowledgeFailed+0x3e>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8011e14:	6859      	ldr	r1, [r3, #4]
 8011e16:	2280      	movs	r2, #128	; 0x80
 8011e18:	01d2      	lsls	r2, r2, #7
 8011e1a:	430a      	orrs	r2, r1
 8011e1c:	605a      	str	r2, [r3, #4]
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8011e1e:	2620      	movs	r6, #32
 8011e20:	683a      	ldr	r2, [r7, #0]
 8011e22:	6993      	ldr	r3, [r2, #24]
 8011e24:	421e      	tst	r6, r3
 8011e26:	d110      	bne.n	8011e4a <I2C_IsAcknowledgeFailed+0x6a>
      if(Timeout != HAL_MAX_DELAY)
 8011e28:	1c63      	adds	r3, r4, #1
 8011e2a:	d0fa      	beq.n	8011e22 <I2C_IsAcknowledgeFailed+0x42>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8011e2c:	2c00      	cmp	r4, #0
 8011e2e:	d004      	beq.n	8011e3a <I2C_IsAcknowledgeFailed+0x5a>
 8011e30:	f7fe fed2 	bl	8010bd8 <HAL_GetTick>
 8011e34:	1b40      	subs	r0, r0, r5
 8011e36:	42a0      	cmp	r0, r4
 8011e38:	d9f2      	bls.n	8011e20 <I2C_IsAcknowledgeFailed+0x40>
          hi2c->State= HAL_I2C_STATE_READY;
 8011e3a:	2335      	movs	r3, #53	; 0x35
 8011e3c:	2201      	movs	r2, #1
 8011e3e:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(hi2c);
 8011e40:	3b01      	subs	r3, #1
 8011e42:	2200      	movs	r2, #0
 8011e44:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8011e46:	2003      	movs	r0, #3
 8011e48:	e012      	b.n	8011e70 <I2C_IsAcknowledgeFailed+0x90>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8011e4a:	2310      	movs	r3, #16
 8011e4c:	61d3      	str	r3, [r2, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8011e4e:	683b      	ldr	r3, [r7, #0]
 8011e50:	2220      	movs	r2, #32
 8011e52:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8011e54:	683a      	ldr	r2, [r7, #0]
 8011e56:	6853      	ldr	r3, [r2, #4]
 8011e58:	4906      	ldr	r1, [pc, #24]	; (8011e74 <I2C_IsAcknowledgeFailed+0x94>)
 8011e5a:	400b      	ands	r3, r1
 8011e5c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8011e5e:	2304      	movs	r3, #4
 8011e60:	63bb      	str	r3, [r7, #56]	; 0x38
    hi2c->State= HAL_I2C_STATE_READY;
 8011e62:	3331      	adds	r3, #49	; 0x31
 8011e64:	2201      	movs	r2, #1
 8011e66:	54fa      	strb	r2, [r7, r3]
    __HAL_UNLOCK(hi2c);
 8011e68:	3b01      	subs	r3, #1
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	54fa      	strb	r2, [r7, r3]
    return HAL_ERROR;
 8011e6e:	2001      	movs	r0, #1
}
 8011e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e72:	46c0      	nop			; (mov r8, r8)
 8011e74:	fe00e800 	.word	0xfe00e800

08011e78 <I2C_WaitOnTXISFlagUntilTimeout>:
{  
 8011e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e7a:	0004      	movs	r4, r0
 8011e7c:	000d      	movs	r5, r1
  uint32_t tickstart = HAL_GetTick();
 8011e7e:	f7fe feab 	bl	8010bd8 <HAL_GetTick>
 8011e82:	0006      	movs	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8011e84:	2702      	movs	r7, #2
 8011e86:	6823      	ldr	r3, [r4, #0]
 8011e88:	699b      	ldr	r3, [r3, #24]
 8011e8a:	421f      	tst	r7, r3
 8011e8c:	d11a      	bne.n	8011ec4 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8011e8e:	0029      	movs	r1, r5
 8011e90:	0020      	movs	r0, r4
 8011e92:	f7ff ffa5 	bl	8011de0 <I2C_IsAcknowledgeFailed>
 8011e96:	2800      	cmp	r0, #0
 8011e98:	d116      	bne.n	8011ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if(Timeout != HAL_MAX_DELAY)
 8011e9a:	1c6b      	adds	r3, r5, #1
 8011e9c:	d0f3      	beq.n	8011e86 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8011e9e:	2d00      	cmp	r5, #0
 8011ea0:	d004      	beq.n	8011eac <I2C_WaitOnTXISFlagUntilTimeout+0x34>
 8011ea2:	f7fe fe99 	bl	8010bd8 <HAL_GetTick>
 8011ea6:	1b80      	subs	r0, r0, r6
 8011ea8:	42a8      	cmp	r0, r5
 8011eaa:	d9ec      	bls.n	8011e86 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8011eac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8011eae:	2220      	movs	r2, #32
 8011eb0:	4313      	orrs	r3, r2
 8011eb2:	63a3      	str	r3, [r4, #56]	; 0x38
        hi2c->State= HAL_I2C_STATE_READY;
 8011eb4:	2335      	movs	r3, #53	; 0x35
 8011eb6:	3a1f      	subs	r2, #31
 8011eb8:	54e2      	strb	r2, [r4, r3]
        __HAL_UNLOCK(hi2c);
 8011eba:	3b01      	subs	r3, #1
 8011ebc:	2200      	movs	r2, #0
 8011ebe:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 8011ec0:	2003      	movs	r0, #3
 8011ec2:	e000      	b.n	8011ec6 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
  return HAL_OK;      
 8011ec4:	2000      	movs	r0, #0
}
 8011ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8011ec8:	2001      	movs	r0, #1
 8011eca:	e7fc      	b.n	8011ec6 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>

08011ecc <I2C_WaitOnFlagUntilTimeout>:
{  
 8011ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011ece:	46ce      	mov	lr, r9
 8011ed0:	b500      	push	{lr}
 8011ed2:	b082      	sub	sp, #8
 8011ed4:	0007      	movs	r7, r0
 8011ed6:	000e      	movs	r6, r1
 8011ed8:	0014      	movs	r4, r2
 8011eda:	9201      	str	r2, [sp, #4]
 8011edc:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8011ede:	f7fe fe7b 	bl	8010bd8 <HAL_GetTick>
 8011ee2:	4681      	mov	r9, r0
  if(Status == RESET)
 8011ee4:	2c00      	cmp	r4, #0
 8011ee6:	d017      	beq.n	8011f18 <I2C_WaitOnFlagUntilTimeout+0x4c>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8011ee8:	6839      	ldr	r1, [r7, #0]
 8011eea:	698b      	ldr	r3, [r1, #24]
 8011eec:	0032      	movs	r2, r6
 8011eee:	439a      	bics	r2, r3
 8011ef0:	03d2      	lsls	r2, r2, #15
 8011ef2:	d12e      	bne.n	8011f52 <I2C_WaitOnFlagUntilTimeout+0x86>
      if(Timeout != HAL_MAX_DELAY)
 8011ef4:	1c6b      	adds	r3, r5, #1
 8011ef6:	d0f8      	beq.n	8011eea <I2C_WaitOnFlagUntilTimeout+0x1e>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8011ef8:	2d00      	cmp	r5, #0
 8011efa:	d005      	beq.n	8011f08 <I2C_WaitOnFlagUntilTimeout+0x3c>
 8011efc:	f7fe fe6c 	bl	8010bd8 <HAL_GetTick>
 8011f00:	464b      	mov	r3, r9
 8011f02:	1ac0      	subs	r0, r0, r3
 8011f04:	42a8      	cmp	r0, r5
 8011f06:	d9ef      	bls.n	8011ee8 <I2C_WaitOnFlagUntilTimeout+0x1c>
          hi2c->State= HAL_I2C_STATE_READY;
 8011f08:	2335      	movs	r3, #53	; 0x35
 8011f0a:	2201      	movs	r2, #1
 8011f0c:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(hi2c);
 8011f0e:	3b01      	subs	r3, #1
 8011f10:	2200      	movs	r2, #0
 8011f12:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8011f14:	2003      	movs	r0, #3
 8011f16:	e018      	b.n	8011f4a <I2C_WaitOnFlagUntilTimeout+0x7e>
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8011f18:	683a      	ldr	r2, [r7, #0]
 8011f1a:	6993      	ldr	r3, [r2, #24]
 8011f1c:	0034      	movs	r4, r6
 8011f1e:	439c      	bics	r4, r3
 8011f20:	03e4      	lsls	r4, r4, #15
 8011f22:	d011      	beq.n	8011f48 <I2C_WaitOnFlagUntilTimeout+0x7c>
      if(Timeout != HAL_MAX_DELAY)
 8011f24:	1c6b      	adds	r3, r5, #1
 8011f26:	d0f8      	beq.n	8011f1a <I2C_WaitOnFlagUntilTimeout+0x4e>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8011f28:	2d00      	cmp	r5, #0
 8011f2a:	d005      	beq.n	8011f38 <I2C_WaitOnFlagUntilTimeout+0x6c>
 8011f2c:	f7fe fe54 	bl	8010bd8 <HAL_GetTick>
 8011f30:	464b      	mov	r3, r9
 8011f32:	1ac0      	subs	r0, r0, r3
 8011f34:	42a8      	cmp	r0, r5
 8011f36:	d9ef      	bls.n	8011f18 <I2C_WaitOnFlagUntilTimeout+0x4c>
          hi2c->State= HAL_I2C_STATE_READY;
 8011f38:	2335      	movs	r3, #53	; 0x35
 8011f3a:	2201      	movs	r2, #1
 8011f3c:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(hi2c);
 8011f3e:	3b01      	subs	r3, #1
 8011f40:	2200      	movs	r2, #0
 8011f42:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8011f44:	2003      	movs	r0, #3
 8011f46:	e000      	b.n	8011f4a <I2C_WaitOnFlagUntilTimeout+0x7e>
  return HAL_OK;      
 8011f48:	9801      	ldr	r0, [sp, #4]
}
 8011f4a:	b002      	add	sp, #8
 8011f4c:	bc80      	pop	{r7}
 8011f4e:	46b9      	mov	r9, r7
 8011f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;      
 8011f52:	2000      	movs	r0, #0
 8011f54:	e7f9      	b.n	8011f4a <I2C_WaitOnFlagUntilTimeout+0x7e>

08011f56 <I2C_RequestMemoryWrite>:
{
 8011f56:	b570      	push	{r4, r5, r6, lr}
 8011f58:	b082      	sub	sp, #8
 8011f5a:	0004      	movs	r4, r0
 8011f5c:	0016      	movs	r6, r2
 8011f5e:	001d      	movs	r5, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8011f60:	2380      	movs	r3, #128	; 0x80
 8011f62:	b2ea      	uxtb	r2, r5
 8011f64:	2080      	movs	r0, #128	; 0x80
 8011f66:	0180      	lsls	r0, r0, #6
 8011f68:	9000      	str	r0, [sp, #0]
 8011f6a:	045b      	lsls	r3, r3, #17
 8011f6c:	0020      	movs	r0, r4
 8011f6e:	f7ff ff25 	bl	8011dbc <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8011f72:	9906      	ldr	r1, [sp, #24]
 8011f74:	0020      	movs	r0, r4
 8011f76:	f7ff ff7f 	bl	8011e78 <I2C_WaitOnTXISFlagUntilTimeout>
 8011f7a:	2800      	cmp	r0, #0
 8011f7c:	d009      	beq.n	8011f92 <I2C_RequestMemoryWrite+0x3c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8011f7e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
      return HAL_TIMEOUT;
 8011f80:	3804      	subs	r0, #4
 8011f82:	4243      	negs	r3, r0
 8011f84:	4158      	adcs	r0, r3
 8011f86:	4240      	negs	r0, r0
 8011f88:	2301      	movs	r3, #1
 8011f8a:	4398      	bics	r0, r3
 8011f8c:	3003      	adds	r0, #3
}
 8011f8e:	b002      	add	sp, #8
 8011f90:	bd70      	pop	{r4, r5, r6, pc}
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8011f92:	2d01      	cmp	r5, #1
 8011f94:	d10c      	bne.n	8011fb0 <I2C_RequestMemoryWrite+0x5a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);    
 8011f96:	6823      	ldr	r3, [r4, #0]
 8011f98:	b2f6      	uxtb	r6, r6
 8011f9a:	629e      	str	r6, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8011f9c:	9b06      	ldr	r3, [sp, #24]
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	2180      	movs	r1, #128	; 0x80
 8011fa2:	0020      	movs	r0, r4
 8011fa4:	f7ff ff92 	bl	8011ecc <I2C_WaitOnFlagUntilTimeout>
 8011fa8:	2800      	cmp	r0, #0
 8011faa:	d0f0      	beq.n	8011f8e <I2C_RequestMemoryWrite+0x38>
    return HAL_TIMEOUT;
 8011fac:	2003      	movs	r0, #3
 8011fae:	e7ee      	b.n	8011f8e <I2C_RequestMemoryWrite+0x38>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress); 
 8011fb0:	6823      	ldr	r3, [r4, #0]
 8011fb2:	0a32      	lsrs	r2, r6, #8
 8011fb4:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8011fb6:	9906      	ldr	r1, [sp, #24]
 8011fb8:	0020      	movs	r0, r4
 8011fba:	f7ff ff5d 	bl	8011e78 <I2C_WaitOnTXISFlagUntilTimeout>
 8011fbe:	2800      	cmp	r0, #0
 8011fc0:	d008      	beq.n	8011fd4 <I2C_RequestMemoryWrite+0x7e>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8011fc2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        return HAL_TIMEOUT;
 8011fc4:	3804      	subs	r0, #4
 8011fc6:	4243      	negs	r3, r0
 8011fc8:	4158      	adcs	r0, r3
 8011fca:	4240      	negs	r0, r0
 8011fcc:	2301      	movs	r3, #1
 8011fce:	4398      	bics	r0, r3
 8011fd0:	3003      	adds	r0, #3
 8011fd2:	e7dc      	b.n	8011f8e <I2C_RequestMemoryWrite+0x38>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 8011fd4:	6823      	ldr	r3, [r4, #0]
 8011fd6:	b2f6      	uxtb	r6, r6
 8011fd8:	629e      	str	r6, [r3, #40]	; 0x28
 8011fda:	e7df      	b.n	8011f9c <I2C_RequestMemoryWrite+0x46>

08011fdc <I2C_RequestMemoryRead>:
{
 8011fdc:	b570      	push	{r4, r5, r6, lr}
 8011fde:	b082      	sub	sp, #8
 8011fe0:	0004      	movs	r4, r0
 8011fe2:	0016      	movs	r6, r2
 8011fe4:	001d      	movs	r5, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8011fe6:	b2da      	uxtb	r2, r3
 8011fe8:	2380      	movs	r3, #128	; 0x80
 8011fea:	019b      	lsls	r3, r3, #6
 8011fec:	9300      	str	r3, [sp, #0]
 8011fee:	2300      	movs	r3, #0
 8011ff0:	f7ff fee4 	bl	8011dbc <I2C_TransferConfig>
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8011ff4:	9906      	ldr	r1, [sp, #24]
 8011ff6:	0020      	movs	r0, r4
 8011ff8:	f7ff ff3e 	bl	8011e78 <I2C_WaitOnTXISFlagUntilTimeout>
 8011ffc:	2800      	cmp	r0, #0
 8011ffe:	d009      	beq.n	8012014 <I2C_RequestMemoryRead+0x38>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012000:	6ba0      	ldr	r0, [r4, #56]	; 0x38
      return HAL_TIMEOUT;
 8012002:	3804      	subs	r0, #4
 8012004:	4243      	negs	r3, r0
 8012006:	4158      	adcs	r0, r3
 8012008:	4240      	negs	r0, r0
 801200a:	2301      	movs	r3, #1
 801200c:	4398      	bics	r0, r3
 801200e:	3003      	adds	r0, #3
}
 8012010:	b002      	add	sp, #8
 8012012:	bd70      	pop	{r4, r5, r6, pc}
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8012014:	2d01      	cmp	r5, #1
 8012016:	d10c      	bne.n	8012032 <I2C_RequestMemoryRead+0x56>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);    
 8012018:	6823      	ldr	r3, [r4, #0]
 801201a:	b2f6      	uxtb	r6, r6
 801201c:	629e      	str	r6, [r3, #40]	; 0x28
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout) != HAL_OK)      
 801201e:	9b06      	ldr	r3, [sp, #24]
 8012020:	2200      	movs	r2, #0
 8012022:	2140      	movs	r1, #64	; 0x40
 8012024:	0020      	movs	r0, r4
 8012026:	f7ff ff51 	bl	8011ecc <I2C_WaitOnFlagUntilTimeout>
 801202a:	2800      	cmp	r0, #0
 801202c:	d0f0      	beq.n	8012010 <I2C_RequestMemoryRead+0x34>
    return HAL_TIMEOUT;
 801202e:	2003      	movs	r0, #3
 8012030:	e7ee      	b.n	8012010 <I2C_RequestMemoryRead+0x34>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress); 
 8012032:	6823      	ldr	r3, [r4, #0]
 8012034:	0a32      	lsrs	r2, r6, #8
 8012036:	629a      	str	r2, [r3, #40]	; 0x28
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8012038:	9906      	ldr	r1, [sp, #24]
 801203a:	0020      	movs	r0, r4
 801203c:	f7ff ff1c 	bl	8011e78 <I2C_WaitOnTXISFlagUntilTimeout>
 8012040:	2800      	cmp	r0, #0
 8012042:	d008      	beq.n	8012056 <I2C_RequestMemoryRead+0x7a>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012044:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        return HAL_TIMEOUT;
 8012046:	3804      	subs	r0, #4
 8012048:	4243      	negs	r3, r0
 801204a:	4158      	adcs	r0, r3
 801204c:	4240      	negs	r0, r0
 801204e:	2301      	movs	r3, #1
 8012050:	4398      	bics	r0, r3
 8012052:	3003      	adds	r0, #3
 8012054:	e7dc      	b.n	8012010 <I2C_RequestMemoryRead+0x34>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);  
 8012056:	6823      	ldr	r3, [r4, #0]
 8012058:	b2f6      	uxtb	r6, r6
 801205a:	629e      	str	r6, [r3, #40]	; 0x28
 801205c:	e7df      	b.n	801201e <I2C_RequestMemoryRead+0x42>

0801205e <I2C_WaitOnSTOPFlagUntilTimeout>:
{  
 801205e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012060:	0005      	movs	r5, r0
 8012062:	000c      	movs	r4, r1
  tickstart = HAL_GetTick();
 8012064:	f7fe fdb8 	bl	8010bd8 <HAL_GetTick>
 8012068:	0006      	movs	r6, r0
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801206a:	2720      	movs	r7, #32
 801206c:	682b      	ldr	r3, [r5, #0]
 801206e:	699b      	ldr	r3, [r3, #24]
 8012070:	421f      	tst	r7, r3
 8012072:	d118      	bne.n	80120a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8012074:	0021      	movs	r1, r4
 8012076:	0028      	movs	r0, r5
 8012078:	f7ff feb2 	bl	8011de0 <I2C_IsAcknowledgeFailed>
 801207c:	2800      	cmp	r0, #0
 801207e:	d114      	bne.n	80120aa <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8012080:	2c00      	cmp	r4, #0
 8012082:	d004      	beq.n	801208e <I2C_WaitOnSTOPFlagUntilTimeout+0x30>
 8012084:	f7fe fda8 	bl	8010bd8 <HAL_GetTick>
 8012088:	1b80      	subs	r0, r0, r6
 801208a:	42a0      	cmp	r0, r4
 801208c:	d9ee      	bls.n	801206c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801208e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8012090:	2220      	movs	r2, #32
 8012092:	4313      	orrs	r3, r2
 8012094:	63ab      	str	r3, [r5, #56]	; 0x38
      hi2c->State= HAL_I2C_STATE_READY;
 8012096:	2335      	movs	r3, #53	; 0x35
 8012098:	3a1f      	subs	r2, #31
 801209a:	54ea      	strb	r2, [r5, r3]
      __HAL_UNLOCK(hi2c);
 801209c:	3b01      	subs	r3, #1
 801209e:	2200      	movs	r2, #0
 80120a0:	54ea      	strb	r2, [r5, r3]
      return HAL_TIMEOUT;
 80120a2:	2003      	movs	r0, #3
}
 80120a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 80120a6:	2000      	movs	r0, #0
 80120a8:	e7fc      	b.n	80120a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 80120aa:	2001      	movs	r0, #1
 80120ac:	e7fa      	b.n	80120a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

080120ae <HAL_I2C_MspInit>:
}
 80120ae:	4770      	bx	lr

080120b0 <HAL_I2C_Init>:
{ 
 80120b0:	b510      	push	{r4, lr}
 80120b2:	1e04      	subs	r4, r0, #0
  if(hi2c == NULL)
 80120b4:	d051      	beq.n	801215a <HAL_I2C_Init+0xaa>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80120b6:	2335      	movs	r3, #53	; 0x35
 80120b8:	5cc3      	ldrb	r3, [r0, r3]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d03c      	beq.n	8012138 <HAL_I2C_Init+0x88>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80120be:	2335      	movs	r3, #53	; 0x35
 80120c0:	2202      	movs	r2, #2
 80120c2:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 80120c4:	6822      	ldr	r2, [r4, #0]
 80120c6:	6813      	ldr	r3, [r2, #0]
 80120c8:	2101      	movs	r1, #1
 80120ca:	438b      	bics	r3, r1
 80120cc:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80120ce:	6822      	ldr	r2, [r4, #0]
 80120d0:	4b23      	ldr	r3, [pc, #140]	; (8012160 <HAL_I2C_Init+0xb0>)
 80120d2:	6861      	ldr	r1, [r4, #4]
 80120d4:	400b      	ands	r3, r1
 80120d6:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80120d8:	6822      	ldr	r2, [r4, #0]
 80120da:	6893      	ldr	r3, [r2, #8]
 80120dc:	4921      	ldr	r1, [pc, #132]	; (8012164 <HAL_I2C_Init+0xb4>)
 80120de:	400b      	ands	r3, r1
 80120e0:	6093      	str	r3, [r2, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 80120e2:	68a3      	ldr	r3, [r4, #8]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d007      	beq.n	80120f8 <HAL_I2C_Init+0x48>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80120e8:	68e2      	ldr	r2, [r4, #12]
 80120ea:	2a01      	cmp	r2, #1
 80120ec:	d02a      	beq.n	8012144 <HAL_I2C_Init+0x94>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80120ee:	6821      	ldr	r1, [r4, #0]
 80120f0:	2284      	movs	r2, #132	; 0x84
 80120f2:	0212      	lsls	r2, r2, #8
 80120f4:	4313      	orrs	r3, r2
 80120f6:	608b      	str	r3, [r1, #8]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80120f8:	68e3      	ldr	r3, [r4, #12]
 80120fa:	2b02      	cmp	r3, #2
 80120fc:	d028      	beq.n	8012150 <HAL_I2C_Init+0xa0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80120fe:	6822      	ldr	r2, [r4, #0]
 8012100:	6851      	ldr	r1, [r2, #4]
 8012102:	4b19      	ldr	r3, [pc, #100]	; (8012168 <HAL_I2C_Init+0xb8>)
 8012104:	430b      	orrs	r3, r1
 8012106:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8012108:	6821      	ldr	r1, [r4, #0]
 801210a:	6923      	ldr	r3, [r4, #16]
 801210c:	6962      	ldr	r2, [r4, #20]
 801210e:	4313      	orrs	r3, r2
 8012110:	69a2      	ldr	r2, [r4, #24]
 8012112:	0212      	lsls	r2, r2, #8
 8012114:	4313      	orrs	r3, r2
 8012116:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8012118:	6822      	ldr	r2, [r4, #0]
 801211a:	69e3      	ldr	r3, [r4, #28]
 801211c:	6a21      	ldr	r1, [r4, #32]
 801211e:	430b      	orrs	r3, r1
 8012120:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8012122:	6821      	ldr	r1, [r4, #0]
 8012124:	680b      	ldr	r3, [r1, #0]
 8012126:	2201      	movs	r2, #1
 8012128:	4313      	orrs	r3, r2
 801212a:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801212c:	2300      	movs	r3, #0
 801212e:	63a3      	str	r3, [r4, #56]	; 0x38
  hi2c->State = HAL_I2C_STATE_READY;
 8012130:	3335      	adds	r3, #53	; 0x35
 8012132:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8012134:	2000      	movs	r0, #0
}
 8012136:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8012138:	3334      	adds	r3, #52	; 0x34
 801213a:	2200      	movs	r2, #0
 801213c:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 801213e:	f7ff ffb6 	bl	80120ae <HAL_I2C_MspInit>
 8012142:	e7bc      	b.n	80120be <HAL_I2C_Init+0xe>
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8012144:	6821      	ldr	r1, [r4, #0]
 8012146:	2280      	movs	r2, #128	; 0x80
 8012148:	0212      	lsls	r2, r2, #8
 801214a:	4313      	orrs	r3, r2
 801214c:	608b      	str	r3, [r1, #8]
 801214e:	e7d3      	b.n	80120f8 <HAL_I2C_Init+0x48>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8012150:	6823      	ldr	r3, [r4, #0]
 8012152:	2280      	movs	r2, #128	; 0x80
 8012154:	0112      	lsls	r2, r2, #4
 8012156:	605a      	str	r2, [r3, #4]
 8012158:	e7d1      	b.n	80120fe <HAL_I2C_Init+0x4e>
    return HAL_ERROR;
 801215a:	2001      	movs	r0, #1
 801215c:	e7eb      	b.n	8012136 <HAL_I2C_Init+0x86>
 801215e:	46c0      	nop			; (mov r8, r8)
 8012160:	f0ffffff 	.word	0xf0ffffff
 8012164:	ffff7fff 	.word	0xffff7fff
 8012168:	02008000 	.word	0x02008000

0801216c <HAL_I2C_Mem_Write>:
{
 801216c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801216e:	46de      	mov	lr, fp
 8012170:	4657      	mov	r7, sl
 8012172:	4646      	mov	r6, r8
 8012174:	b5c0      	push	{r6, r7, lr}
 8012176:	b084      	sub	sp, #16
 8012178:	0005      	movs	r5, r0
 801217a:	000e      	movs	r6, r1
 801217c:	9103      	str	r1, [sp, #12]
 801217e:	a90c      	add	r1, sp, #48	; 0x30
 8012180:	c901      	ldmia	r1!, {r0}
 8012182:	4680      	mov	r8, r0
 8012184:	880c      	ldrh	r4, [r1, #0]
  if(hi2c->State == HAL_I2C_STATE_READY)
 8012186:	2135      	movs	r1, #53	; 0x35
 8012188:	5c69      	ldrb	r1, [r5, r1]
 801218a:	b2cf      	uxtb	r7, r1
 801218c:	2901      	cmp	r1, #1
 801218e:	d000      	beq.n	8012192 <HAL_I2C_Mem_Write+0x26>
 8012190:	e09d      	b.n	80122ce <HAL_I2C_Mem_Write+0x162>
    if((pData == NULL) || (Size == 0)) 
 8012192:	2800      	cmp	r0, #0
 8012194:	d100      	bne.n	8012198 <HAL_I2C_Mem_Write+0x2c>
 8012196:	e09b      	b.n	80122d0 <HAL_I2C_Mem_Write+0x164>
 8012198:	2c00      	cmp	r4, #0
 801219a:	d100      	bne.n	801219e <HAL_I2C_Mem_Write+0x32>
 801219c:	e098      	b.n	80122d0 <HAL_I2C_Mem_Write+0x164>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 801219e:	6829      	ldr	r1, [r5, #0]
 80121a0:	6989      	ldr	r1, [r1, #24]
 80121a2:	0409      	lsls	r1, r1, #16
 80121a4:	d500      	bpl.n	80121a8 <HAL_I2C_Mem_Write+0x3c>
 80121a6:	e09a      	b.n	80122de <HAL_I2C_Mem_Write+0x172>
    __HAL_LOCK(hi2c);
 80121a8:	2134      	movs	r1, #52	; 0x34
 80121aa:	5c69      	ldrb	r1, [r5, r1]
 80121ac:	2901      	cmp	r1, #1
 80121ae:	d100      	bne.n	80121b2 <HAL_I2C_Mem_Write+0x46>
 80121b0:	e097      	b.n	80122e2 <HAL_I2C_Mem_Write+0x176>
 80121b2:	2134      	movs	r1, #52	; 0x34
 80121b4:	2001      	movs	r0, #1
 80121b6:	5468      	strb	r0, [r5, r1]
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
 80121b8:	3101      	adds	r1, #1
 80121ba:	3051      	adds	r0, #81	; 0x51
 80121bc:	5468      	strb	r0, [r5, r1]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80121be:	2100      	movs	r1, #0
 80121c0:	63a9      	str	r1, [r5, #56]	; 0x38
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 80121c2:	990e      	ldr	r1, [sp, #56]	; 0x38
 80121c4:	9100      	str	r1, [sp, #0]
 80121c6:	0031      	movs	r1, r6
 80121c8:	0028      	movs	r0, r5
 80121ca:	f7ff fec4 	bl	8011f56 <I2C_RequestMemoryWrite>
 80121ce:	2800      	cmp	r0, #0
 80121d0:	d00b      	beq.n	80121ea <HAL_I2C_Mem_Write+0x7e>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80121d2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80121d4:	2b04      	cmp	r3, #4
 80121d6:	d004      	beq.n	80121e2 <HAL_I2C_Mem_Write+0x76>
        __HAL_UNLOCK(hi2c);
 80121d8:	2334      	movs	r3, #52	; 0x34
 80121da:	2200      	movs	r2, #0
 80121dc:	54ea      	strb	r2, [r5, r3]
        return HAL_TIMEOUT;
 80121de:	2703      	movs	r7, #3
 80121e0:	e076      	b.n	80122d0 <HAL_I2C_Mem_Write+0x164>
        __HAL_UNLOCK(hi2c);
 80121e2:	3330      	adds	r3, #48	; 0x30
 80121e4:	2200      	movs	r2, #0
 80121e6:	54ea      	strb	r2, [r5, r3]
        return HAL_ERROR;
 80121e8:	e072      	b.n	80122d0 <HAL_I2C_Mem_Write+0x164>
    if(Size > 255)
 80121ea:	2cff      	cmp	r4, #255	; 0xff
 80121ec:	d910      	bls.n	8012210 <HAL_I2C_Mem_Write+0xa4>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80121ee:	2380      	movs	r3, #128	; 0x80
 80121f0:	2200      	movs	r2, #0
 80121f2:	9200      	str	r2, [sp, #0]
 80121f4:	045b      	lsls	r3, r3, #17
 80121f6:	32ff      	adds	r2, #255	; 0xff
 80121f8:	9903      	ldr	r1, [sp, #12]
 80121fa:	0028      	movs	r0, r5
 80121fc:	f7ff fdde 	bl	8011dbc <I2C_TransferConfig>
      Sizetmp = 255;
 8012200:	26ff      	movs	r6, #255	; 0xff
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8012202:	2380      	movs	r3, #128	; 0x80
 8012204:	049b      	lsls	r3, r3, #18
 8012206:	469b      	mov	fp, r3
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8012208:	2380      	movs	r3, #128	; 0x80
 801220a:	045b      	lsls	r3, r3, #17
 801220c:	469a      	mov	sl, r3
 801220e:	e032      	b.n	8012276 <HAL_I2C_Mem_Write+0x10a>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8012210:	2380      	movs	r3, #128	; 0x80
 8012212:	b2e2      	uxtb	r2, r4
 8012214:	2100      	movs	r1, #0
 8012216:	9100      	str	r1, [sp, #0]
 8012218:	049b      	lsls	r3, r3, #18
 801221a:	9903      	ldr	r1, [sp, #12]
 801221c:	0028      	movs	r0, r5
 801221e:	f7ff fdcd 	bl	8011dbc <I2C_TransferConfig>
      Sizetmp = Size;
 8012222:	0026      	movs	r6, r4
 8012224:	e7ed      	b.n	8012202 <HAL_I2C_Mem_Write+0x96>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012226:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8012228:	2b04      	cmp	r3, #4
 801222a:	d051      	beq.n	80122d0 <HAL_I2C_Mem_Write+0x164>
          return HAL_TIMEOUT;
 801222c:	2703      	movs	r7, #3
 801222e:	e04f      	b.n	80122d0 <HAL_I2C_Mem_Write+0x164>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 8012230:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012232:	2200      	movs	r2, #0
 8012234:	2180      	movs	r1, #128	; 0x80
 8012236:	0028      	movs	r0, r5
 8012238:	f7ff fe48 	bl	8011ecc <I2C_WaitOnFlagUntilTimeout>
 801223c:	2800      	cmp	r0, #0
 801223e:	d152      	bne.n	80122e6 <HAL_I2C_Mem_Write+0x17a>
        if(Size > 255)
 8012240:	2cff      	cmp	r4, #255	; 0xff
 8012242:	d909      	bls.n	8012258 <HAL_I2C_Mem_Write+0xec>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8012244:	2300      	movs	r3, #0
 8012246:	9300      	str	r3, [sp, #0]
 8012248:	4653      	mov	r3, sl
 801224a:	22ff      	movs	r2, #255	; 0xff
 801224c:	9903      	ldr	r1, [sp, #12]
 801224e:	0028      	movs	r0, r5
 8012250:	f7ff fdb4 	bl	8011dbc <I2C_TransferConfig>
          Sizetmp = 255;
 8012254:	36ff      	adds	r6, #255	; 0xff
 8012256:	e00b      	b.n	8012270 <HAL_I2C_Mem_Write+0x104>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8012258:	b2e2      	uxtb	r2, r4
 801225a:	2300      	movs	r3, #0
 801225c:	9300      	str	r3, [sp, #0]
 801225e:	465b      	mov	r3, fp
 8012260:	9903      	ldr	r1, [sp, #12]
 8012262:	0028      	movs	r0, r5
 8012264:	f7ff fdaa 	bl	8011dbc <I2C_TransferConfig>
          Sizetmp = Size;
 8012268:	0026      	movs	r6, r4
 801226a:	e001      	b.n	8012270 <HAL_I2C_Mem_Write+0x104>
    }while(Size > 0);
 801226c:	2c00      	cmp	r4, #0
 801226e:	d013      	beq.n	8012298 <HAL_I2C_Mem_Write+0x12c>
 8012270:	2301      	movs	r3, #1
 8012272:	469c      	mov	ip, r3
 8012274:	44e0      	add	r8, ip
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8012276:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012278:	0028      	movs	r0, r5
 801227a:	f7ff fdfd 	bl	8011e78 <I2C_WaitOnTXISFlagUntilTimeout>
 801227e:	2800      	cmp	r0, #0
 8012280:	d1d1      	bne.n	8012226 <HAL_I2C_Mem_Write+0xba>
      hi2c->Instance->TXDR = (*pData++);
 8012282:	682b      	ldr	r3, [r5, #0]
 8012284:	4642      	mov	r2, r8
 8012286:	7812      	ldrb	r2, [r2, #0]
 8012288:	629a      	str	r2, [r3, #40]	; 0x28
      Sizetmp--;
 801228a:	3e01      	subs	r6, #1
      Size--;
 801228c:	3c01      	subs	r4, #1
 801228e:	b2a4      	uxth	r4, r4
      if((Sizetmp == 0)&&(Size!=0))
 8012290:	2e00      	cmp	r6, #0
 8012292:	d1eb      	bne.n	801226c <HAL_I2C_Mem_Write+0x100>
 8012294:	2c00      	cmp	r4, #0
 8012296:	d1cb      	bne.n	8012230 <HAL_I2C_Mem_Write+0xc4>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 8012298:	2119      	movs	r1, #25
 801229a:	0028      	movs	r0, r5
 801229c:	f7ff fedf 	bl	801205e <I2C_WaitOnSTOPFlagUntilTimeout>
 80122a0:	2800      	cmp	r0, #0
 80122a2:	d004      	beq.n	80122ae <HAL_I2C_Mem_Write+0x142>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80122a4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80122a6:	2b04      	cmp	r3, #4
 80122a8:	d012      	beq.n	80122d0 <HAL_I2C_Mem_Write+0x164>
        return HAL_TIMEOUT;
 80122aa:	2703      	movs	r7, #3
 80122ac:	e010      	b.n	80122d0 <HAL_I2C_Mem_Write+0x164>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80122ae:	682b      	ldr	r3, [r5, #0]
 80122b0:	2220      	movs	r2, #32
 80122b2:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80122b4:	682a      	ldr	r2, [r5, #0]
 80122b6:	6853      	ldr	r3, [r2, #4]
 80122b8:	490c      	ldr	r1, [pc, #48]	; (80122ec <HAL_I2C_Mem_Write+0x180>)
 80122ba:	400b      	ands	r3, r1
 80122bc:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY; 	  
 80122be:	2335      	movs	r3, #53	; 0x35
 80122c0:	2201      	movs	r2, #1
 80122c2:	54ea      	strb	r2, [r5, r3]
    __HAL_UNLOCK(hi2c);
 80122c4:	3b01      	subs	r3, #1
 80122c6:	2200      	movs	r2, #0
 80122c8:	54ea      	strb	r2, [r5, r3]
    return HAL_OK;
 80122ca:	0007      	movs	r7, r0
 80122cc:	e000      	b.n	80122d0 <HAL_I2C_Mem_Write+0x164>
    return HAL_BUSY;
 80122ce:	2702      	movs	r7, #2
}
 80122d0:	0038      	movs	r0, r7
 80122d2:	b004      	add	sp, #16
 80122d4:	bce0      	pop	{r5, r6, r7}
 80122d6:	46bb      	mov	fp, r7
 80122d8:	46b2      	mov	sl, r6
 80122da:	46a8      	mov	r8, r5
 80122dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_BUSY;
 80122de:	2702      	movs	r7, #2
 80122e0:	e7f6      	b.n	80122d0 <HAL_I2C_Mem_Write+0x164>
    __HAL_LOCK(hi2c);
 80122e2:	2702      	movs	r7, #2
 80122e4:	e7f4      	b.n	80122d0 <HAL_I2C_Mem_Write+0x164>
          return HAL_TIMEOUT;
 80122e6:	2703      	movs	r7, #3
 80122e8:	e7f2      	b.n	80122d0 <HAL_I2C_Mem_Write+0x164>
 80122ea:	46c0      	nop			; (mov r8, r8)
 80122ec:	fe00e800 	.word	0xfe00e800

080122f0 <HAL_I2C_Mem_Read>:
{
 80122f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122f2:	46de      	mov	lr, fp
 80122f4:	4657      	mov	r7, sl
 80122f6:	4646      	mov	r6, r8
 80122f8:	b5c0      	push	{r6, r7, lr}
 80122fa:	b084      	sub	sp, #16
 80122fc:	0005      	movs	r5, r0
 80122fe:	000e      	movs	r6, r1
 8012300:	9103      	str	r1, [sp, #12]
 8012302:	a90c      	add	r1, sp, #48	; 0x30
 8012304:	c901      	ldmia	r1!, {r0}
 8012306:	4680      	mov	r8, r0
 8012308:	880c      	ldrh	r4, [r1, #0]
  if(hi2c->State == HAL_I2C_STATE_READY)
 801230a:	2135      	movs	r1, #53	; 0x35
 801230c:	5c69      	ldrb	r1, [r5, r1]
 801230e:	b2cf      	uxtb	r7, r1
 8012310:	2901      	cmp	r1, #1
 8012312:	d000      	beq.n	8012316 <HAL_I2C_Mem_Read+0x26>
 8012314:	e09c      	b.n	8012450 <HAL_I2C_Mem_Read+0x160>
    if((pData == NULL) || (Size == 0)) 
 8012316:	2800      	cmp	r0, #0
 8012318:	d100      	bne.n	801231c <HAL_I2C_Mem_Read+0x2c>
 801231a:	e09a      	b.n	8012452 <HAL_I2C_Mem_Read+0x162>
 801231c:	2c00      	cmp	r4, #0
 801231e:	d100      	bne.n	8012322 <HAL_I2C_Mem_Read+0x32>
 8012320:	e097      	b.n	8012452 <HAL_I2C_Mem_Read+0x162>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8012322:	6829      	ldr	r1, [r5, #0]
 8012324:	6989      	ldr	r1, [r1, #24]
 8012326:	0409      	lsls	r1, r1, #16
 8012328:	d500      	bpl.n	801232c <HAL_I2C_Mem_Read+0x3c>
 801232a:	e099      	b.n	8012460 <HAL_I2C_Mem_Read+0x170>
    __HAL_LOCK(hi2c);
 801232c:	2134      	movs	r1, #52	; 0x34
 801232e:	5c69      	ldrb	r1, [r5, r1]
 8012330:	2901      	cmp	r1, #1
 8012332:	d100      	bne.n	8012336 <HAL_I2C_Mem_Read+0x46>
 8012334:	e096      	b.n	8012464 <HAL_I2C_Mem_Read+0x174>
 8012336:	2134      	movs	r1, #52	; 0x34
 8012338:	2001      	movs	r0, #1
 801233a:	5468      	strb	r0, [r5, r1]
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
 801233c:	3101      	adds	r1, #1
 801233e:	3061      	adds	r0, #97	; 0x61
 8012340:	5468      	strb	r0, [r5, r1]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012342:	2100      	movs	r1, #0
 8012344:	63a9      	str	r1, [r5, #56]	; 0x38
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8012346:	990e      	ldr	r1, [sp, #56]	; 0x38
 8012348:	9100      	str	r1, [sp, #0]
 801234a:	0031      	movs	r1, r6
 801234c:	0028      	movs	r0, r5
 801234e:	f7ff fe45 	bl	8011fdc <I2C_RequestMemoryRead>
 8012352:	2800      	cmp	r0, #0
 8012354:	d00b      	beq.n	801236e <HAL_I2C_Mem_Read+0x7e>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012356:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8012358:	2b04      	cmp	r3, #4
 801235a:	d004      	beq.n	8012366 <HAL_I2C_Mem_Read+0x76>
        __HAL_UNLOCK(hi2c);
 801235c:	2334      	movs	r3, #52	; 0x34
 801235e:	2200      	movs	r2, #0
 8012360:	54ea      	strb	r2, [r5, r3]
        return HAL_TIMEOUT;
 8012362:	2703      	movs	r7, #3
 8012364:	e075      	b.n	8012452 <HAL_I2C_Mem_Read+0x162>
        __HAL_UNLOCK(hi2c);
 8012366:	3330      	adds	r3, #48	; 0x30
 8012368:	2200      	movs	r2, #0
 801236a:	54ea      	strb	r2, [r5, r3]
        return HAL_ERROR;
 801236c:	e071      	b.n	8012452 <HAL_I2C_Mem_Read+0x162>
    if(Size > 255)
 801236e:	2cff      	cmp	r4, #255	; 0xff
 8012370:	d911      	bls.n	8012396 <HAL_I2C_Mem_Read+0xa6>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8012372:	2380      	movs	r3, #128	; 0x80
 8012374:	2290      	movs	r2, #144	; 0x90
 8012376:	0192      	lsls	r2, r2, #6
 8012378:	9200      	str	r2, [sp, #0]
 801237a:	045b      	lsls	r3, r3, #17
 801237c:	22ff      	movs	r2, #255	; 0xff
 801237e:	9903      	ldr	r1, [sp, #12]
 8012380:	0028      	movs	r0, r5
 8012382:	f7ff fd1b 	bl	8011dbc <I2C_TransferConfig>
      Sizetmp = 255;
 8012386:	26ff      	movs	r6, #255	; 0xff
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8012388:	2380      	movs	r3, #128	; 0x80
 801238a:	049b      	lsls	r3, r3, #18
 801238c:	469b      	mov	fp, r3
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801238e:	2380      	movs	r3, #128	; 0x80
 8012390:	045b      	lsls	r3, r3, #17
 8012392:	469a      	mov	sl, r3
 8012394:	e02e      	b.n	80123f4 <HAL_I2C_Mem_Read+0x104>
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8012396:	2380      	movs	r3, #128	; 0x80
 8012398:	b2e2      	uxtb	r2, r4
 801239a:	2190      	movs	r1, #144	; 0x90
 801239c:	0189      	lsls	r1, r1, #6
 801239e:	9100      	str	r1, [sp, #0]
 80123a0:	049b      	lsls	r3, r3, #18
 80123a2:	9903      	ldr	r1, [sp, #12]
 80123a4:	0028      	movs	r0, r5
 80123a6:	f7ff fd09 	bl	8011dbc <I2C_TransferConfig>
      Sizetmp = Size;
 80123aa:	0026      	movs	r6, r4
 80123ac:	e7ec      	b.n	8012388 <HAL_I2C_Mem_Read+0x98>
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 80123ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80123b0:	2200      	movs	r2, #0
 80123b2:	2180      	movs	r1, #128	; 0x80
 80123b4:	0028      	movs	r0, r5
 80123b6:	f7ff fd89 	bl	8011ecc <I2C_WaitOnFlagUntilTimeout>
 80123ba:	2800      	cmp	r0, #0
 80123bc:	d156      	bne.n	801246c <HAL_I2C_Mem_Read+0x17c>
        if(Size > 255)
 80123be:	2cff      	cmp	r4, #255	; 0xff
 80123c0:	d909      	bls.n	80123d6 <HAL_I2C_Mem_Read+0xe6>
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80123c2:	2300      	movs	r3, #0
 80123c4:	9300      	str	r3, [sp, #0]
 80123c6:	4653      	mov	r3, sl
 80123c8:	22ff      	movs	r2, #255	; 0xff
 80123ca:	9903      	ldr	r1, [sp, #12]
 80123cc:	0028      	movs	r0, r5
 80123ce:	f7ff fcf5 	bl	8011dbc <I2C_TransferConfig>
          Sizetmp = 255;
 80123d2:	36ff      	adds	r6, #255	; 0xff
 80123d4:	e00b      	b.n	80123ee <HAL_I2C_Mem_Read+0xfe>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80123d6:	b2e2      	uxtb	r2, r4
 80123d8:	2300      	movs	r3, #0
 80123da:	9300      	str	r3, [sp, #0]
 80123dc:	465b      	mov	r3, fp
 80123de:	9903      	ldr	r1, [sp, #12]
 80123e0:	0028      	movs	r0, r5
 80123e2:	f7ff fceb 	bl	8011dbc <I2C_TransferConfig>
          Sizetmp = Size;
 80123e6:	0026      	movs	r6, r4
 80123e8:	e001      	b.n	80123ee <HAL_I2C_Mem_Read+0xfe>
    }while(Size > 0);
 80123ea:	2c00      	cmp	r4, #0
 80123ec:	d015      	beq.n	801241a <HAL_I2C_Mem_Read+0x12a>
 80123ee:	2301      	movs	r3, #1
 80123f0:	469c      	mov	ip, r3
 80123f2:	44e0      	add	r8, ip
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)      
 80123f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80123f6:	2200      	movs	r2, #0
 80123f8:	2104      	movs	r1, #4
 80123fa:	0028      	movs	r0, r5
 80123fc:	f7ff fd66 	bl	8011ecc <I2C_WaitOnFlagUntilTimeout>
 8012400:	2800      	cmp	r0, #0
 8012402:	d131      	bne.n	8012468 <HAL_I2C_Mem_Read+0x178>
      (*pData++) = hi2c->Instance->RXDR;
 8012404:	682b      	ldr	r3, [r5, #0]
 8012406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012408:	4642      	mov	r2, r8
 801240a:	7013      	strb	r3, [r2, #0]
      Sizetmp--;
 801240c:	3e01      	subs	r6, #1
      Size--;   
 801240e:	3c01      	subs	r4, #1
 8012410:	b2a4      	uxth	r4, r4
      if((Sizetmp == 0)&&(Size!=0))
 8012412:	2e00      	cmp	r6, #0
 8012414:	d1e9      	bne.n	80123ea <HAL_I2C_Mem_Read+0xfa>
 8012416:	2c00      	cmp	r4, #0
 8012418:	d1c9      	bne.n	80123ae <HAL_I2C_Mem_Read+0xbe>
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 801241a:	2119      	movs	r1, #25
 801241c:	0028      	movs	r0, r5
 801241e:	f7ff fe1e 	bl	801205e <I2C_WaitOnSTOPFlagUntilTimeout>
 8012422:	2800      	cmp	r0, #0
 8012424:	d004      	beq.n	8012430 <HAL_I2C_Mem_Read+0x140>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8012426:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8012428:	2b04      	cmp	r3, #4
 801242a:	d012      	beq.n	8012452 <HAL_I2C_Mem_Read+0x162>
        return HAL_TIMEOUT;
 801242c:	2703      	movs	r7, #3
 801242e:	e010      	b.n	8012452 <HAL_I2C_Mem_Read+0x162>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8012430:	682b      	ldr	r3, [r5, #0]
 8012432:	2220      	movs	r2, #32
 8012434:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8012436:	682a      	ldr	r2, [r5, #0]
 8012438:	6853      	ldr	r3, [r2, #4]
 801243a:	490d      	ldr	r1, [pc, #52]	; (8012470 <HAL_I2C_Mem_Read+0x180>)
 801243c:	400b      	ands	r3, r1
 801243e:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8012440:	2335      	movs	r3, #53	; 0x35
 8012442:	2201      	movs	r2, #1
 8012444:	54ea      	strb	r2, [r5, r3]
    __HAL_UNLOCK(hi2c);
 8012446:	3b01      	subs	r3, #1
 8012448:	2200      	movs	r2, #0
 801244a:	54ea      	strb	r2, [r5, r3]
    return HAL_OK;
 801244c:	0007      	movs	r7, r0
 801244e:	e000      	b.n	8012452 <HAL_I2C_Mem_Read+0x162>
    return HAL_BUSY;
 8012450:	2702      	movs	r7, #2
}
 8012452:	0038      	movs	r0, r7
 8012454:	b004      	add	sp, #16
 8012456:	bce0      	pop	{r5, r6, r7}
 8012458:	46bb      	mov	fp, r7
 801245a:	46b2      	mov	sl, r6
 801245c:	46a8      	mov	r8, r5
 801245e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_BUSY;
 8012460:	2702      	movs	r7, #2
 8012462:	e7f6      	b.n	8012452 <HAL_I2C_Mem_Read+0x162>
    __HAL_LOCK(hi2c);
 8012464:	2702      	movs	r7, #2
 8012466:	e7f4      	b.n	8012452 <HAL_I2C_Mem_Read+0x162>
        return HAL_TIMEOUT;
 8012468:	2703      	movs	r7, #3
 801246a:	e7f2      	b.n	8012452 <HAL_I2C_Mem_Read+0x162>
          return HAL_TIMEOUT;
 801246c:	2703      	movs	r7, #3
 801246e:	e7f0      	b.n	8012452 <HAL_I2C_Mem_Read+0x162>
 8012470:	fe00e800 	.word	0xfe00e800

08012474 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter : new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8012474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012476:	0003      	movs	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
  
  if((hi2c->State == HAL_I2C_STATE_BUSY) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_RX)
 8012478:	2235      	movs	r2, #53	; 0x35
 801247a:	5c82      	ldrb	r2, [r0, r2]
 801247c:	b2d0      	uxtb	r0, r2
 801247e:	2a02      	cmp	r2, #2
 8012480:	d02e      	beq.n	80124e0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
 8012482:	2235      	movs	r2, #53	; 0x35
 8012484:	5c9a      	ldrb	r2, [r3, r2]
 8012486:	2a12      	cmp	r2, #18
 8012488:	d02b      	beq.n	80124e2 <HAL_I2CEx_ConfigAnalogFilter+0x6e>
 801248a:	2235      	movs	r2, #53	; 0x35
 801248c:	5c9a      	ldrb	r2, [r3, r2]
 801248e:	2a22      	cmp	r2, #34	; 0x22
 8012490:	d029      	beq.n	80124e6 <HAL_I2CEx_ConfigAnalogFilter+0x72>
     || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_RX))
 8012492:	2235      	movs	r2, #53	; 0x35
 8012494:	5c9a      	ldrb	r2, [r3, r2]
 8012496:	2a32      	cmp	r2, #50	; 0x32
 8012498:	d027      	beq.n	80124ea <HAL_I2CEx_ConfigAnalogFilter+0x76>
 801249a:	2235      	movs	r2, #53	; 0x35
 801249c:	5c9a      	ldrb	r2, [r3, r2]
 801249e:	2a42      	cmp	r2, #66	; 0x42
 80124a0:	d025      	beq.n	80124ee <HAL_I2CEx_ConfigAnalogFilter+0x7a>
  {
    return HAL_BUSY;
  }
  
  /* Process Locked */
  __HAL_LOCK(hi2c);
 80124a2:	2234      	movs	r2, #52	; 0x34
 80124a4:	5c9a      	ldrb	r2, [r3, r2]
 80124a6:	2a01      	cmp	r2, #1
 80124a8:	d023      	beq.n	80124f2 <HAL_I2CEx_ConfigAnalogFilter+0x7e>
 80124aa:	2434      	movs	r4, #52	; 0x34
 80124ac:	2201      	movs	r2, #1
 80124ae:	551a      	strb	r2, [r3, r4]

  hi2c->State = HAL_I2C_STATE_BUSY;
 80124b0:	2535      	movs	r5, #53	; 0x35
 80124b2:	2002      	movs	r0, #2
 80124b4:	5558      	strb	r0, [r3, r5]
  
  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);    
 80124b6:	681e      	ldr	r6, [r3, #0]
 80124b8:	6830      	ldr	r0, [r6, #0]
 80124ba:	4390      	bics	r0, r2
 80124bc:	6030      	str	r0, [r6, #0]
  
  /* Reset I2Cx ANOFF bit */
  hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);    
 80124be:	681e      	ldr	r6, [r3, #0]
 80124c0:	6830      	ldr	r0, [r6, #0]
 80124c2:	4f0d      	ldr	r7, [pc, #52]	; (80124f8 <HAL_I2CEx_ConfigAnalogFilter+0x84>)
 80124c4:	4038      	ands	r0, r7
 80124c6:	6030      	str	r0, [r6, #0]
  
  /* Set analog filter bit*/
  hi2c->Instance->CR1 |= AnalogFilter;
 80124c8:	681e      	ldr	r6, [r3, #0]
 80124ca:	6830      	ldr	r0, [r6, #0]
 80124cc:	4301      	orrs	r1, r0
 80124ce:	6031      	str	r1, [r6, #0]
  
  __HAL_I2C_ENABLE(hi2c); 
 80124d0:	6818      	ldr	r0, [r3, #0]
 80124d2:	6801      	ldr	r1, [r0, #0]
 80124d4:	4311      	orrs	r1, r2
 80124d6:	6001      	str	r1, [r0, #0]
  
  hi2c->State = HAL_I2C_STATE_READY;
 80124d8:	555a      	strb	r2, [r3, r5]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80124da:	2200      	movs	r2, #0
 80124dc:	551a      	strb	r2, [r3, r4]

  return HAL_OK; 
 80124de:	2000      	movs	r0, #0
}
 80124e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80124e2:	2002      	movs	r0, #2
 80124e4:	e7fc      	b.n	80124e0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
 80124e6:	2002      	movs	r0, #2
 80124e8:	e7fa      	b.n	80124e0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
 80124ea:	2002      	movs	r0, #2
 80124ec:	e7f8      	b.n	80124e0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
 80124ee:	2002      	movs	r0, #2
 80124f0:	e7f6      	b.n	80124e0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  __HAL_LOCK(hi2c);
 80124f2:	2002      	movs	r0, #2
 80124f4:	e7f4      	b.n	80124e0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
 80124f6:	46c0      	nop			; (mov r8, r8)
 80124f8:	ffffefff 	.word	0xffffefff

080124fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter : Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80124fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124fe:	0003      	movs	r3, r0
  
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
  
  if((hi2c->State == HAL_I2C_STATE_BUSY) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MASTER_BUSY_RX)
 8012500:	2235      	movs	r2, #53	; 0x35
 8012502:	5c82      	ldrb	r2, [r0, r2]
 8012504:	b2d0      	uxtb	r0, r2
 8012506:	2a02      	cmp	r2, #2
 8012508:	d02c      	beq.n	8012564 <HAL_I2CEx_ConfigDigitalFilter+0x68>
 801250a:	2235      	movs	r2, #53	; 0x35
 801250c:	5c9a      	ldrb	r2, [r3, r2]
 801250e:	2a12      	cmp	r2, #18
 8012510:	d029      	beq.n	8012566 <HAL_I2CEx_ConfigDigitalFilter+0x6a>
 8012512:	2235      	movs	r2, #53	; 0x35
 8012514:	5c9a      	ldrb	r2, [r3, r2]
 8012516:	2a22      	cmp	r2, #34	; 0x22
 8012518:	d027      	beq.n	801256a <HAL_I2CEx_ConfigDigitalFilter+0x6e>
     || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_SLAVE_BUSY_RX))
 801251a:	2235      	movs	r2, #53	; 0x35
 801251c:	5c9a      	ldrb	r2, [r3, r2]
 801251e:	2a32      	cmp	r2, #50	; 0x32
 8012520:	d025      	beq.n	801256e <HAL_I2CEx_ConfigDigitalFilter+0x72>
 8012522:	2235      	movs	r2, #53	; 0x35
 8012524:	5c9a      	ldrb	r2, [r3, r2]
 8012526:	2a42      	cmp	r2, #66	; 0x42
 8012528:	d023      	beq.n	8012572 <HAL_I2CEx_ConfigDigitalFilter+0x76>
  {
    return HAL_BUSY;
  }
  
  /* Process Locked */
  __HAL_LOCK(hi2c);
 801252a:	2234      	movs	r2, #52	; 0x34
 801252c:	5c9a      	ldrb	r2, [r3, r2]
 801252e:	2a01      	cmp	r2, #1
 8012530:	d021      	beq.n	8012576 <HAL_I2CEx_ConfigDigitalFilter+0x7a>
 8012532:	2434      	movs	r4, #52	; 0x34
 8012534:	2201      	movs	r2, #1
 8012536:	551a      	strb	r2, [r3, r4]

  hi2c->State = HAL_I2C_STATE_BUSY;
 8012538:	2535      	movs	r5, #53	; 0x35
 801253a:	2002      	movs	r0, #2
 801253c:	5558      	strb	r0, [r3, r5]
  
  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);  
 801253e:	681e      	ldr	r6, [r3, #0]
 8012540:	6830      	ldr	r0, [r6, #0]
 8012542:	4390      	bics	r0, r2
 8012544:	6030      	str	r0, [r6, #0]
  
  /* Get the old register value */
  tmpreg = hi2c->Instance->CR1;
 8012546:	681e      	ldr	r6, [r3, #0]
 8012548:	6830      	ldr	r0, [r6, #0]
  
  /* Reset I2Cx DNF bits [11:8] */
  tmpreg &= ~(I2C_CR1_DFN);
 801254a:	4f0c      	ldr	r7, [pc, #48]	; (801257c <HAL_I2CEx_ConfigDigitalFilter+0x80>)
 801254c:	4038      	ands	r0, r7
  
  /* Set I2Cx DNF coefficient */
  tmpreg |= DigitalFilter << 8;
 801254e:	0209      	lsls	r1, r1, #8
 8012550:	4301      	orrs	r1, r0
  
  /* Store the new register value */
  hi2c->Instance->CR1 = tmpreg;
 8012552:	6031      	str	r1, [r6, #0]
  
  __HAL_I2C_ENABLE(hi2c); 
 8012554:	6818      	ldr	r0, [r3, #0]
 8012556:	6801      	ldr	r1, [r0, #0]
 8012558:	4311      	orrs	r1, r2
 801255a:	6001      	str	r1, [r0, #0]
  
  hi2c->State = HAL_I2C_STATE_READY;
 801255c:	555a      	strb	r2, [r3, r5]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 801255e:	2200      	movs	r2, #0
 8012560:	551a      	strb	r2, [r3, r4]

  return HAL_OK; 
 8012562:	2000      	movs	r0, #0
}  
 8012564:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8012566:	2002      	movs	r0, #2
 8012568:	e7fc      	b.n	8012564 <HAL_I2CEx_ConfigDigitalFilter+0x68>
 801256a:	2002      	movs	r0, #2
 801256c:	e7fa      	b.n	8012564 <HAL_I2CEx_ConfigDigitalFilter+0x68>
 801256e:	2002      	movs	r0, #2
 8012570:	e7f8      	b.n	8012564 <HAL_I2CEx_ConfigDigitalFilter+0x68>
 8012572:	2002      	movs	r0, #2
 8012574:	e7f6      	b.n	8012564 <HAL_I2CEx_ConfigDigitalFilter+0x68>
  __HAL_LOCK(hi2c);
 8012576:	2002      	movs	r0, #2
 8012578:	e7f4      	b.n	8012564 <HAL_I2CEx_ConfigDigitalFilter+0x68>
 801257a:	46c0      	nop			; (mov r8, r8)
 801257c:	fffff0ff 	.word	0xfffff0ff

08012580 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by MicroXplorer and eventually  
            modified by the user
   */ 
}
 8012580:	4770      	bx	lr
	...

08012584 <HAL_PWR_EnableBkUpAccess>:
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 8012584:	4a03      	ldr	r2, [pc, #12]	; (8012594 <HAL_PWR_EnableBkUpAccess+0x10>)
 8012586:	6811      	ldr	r1, [r2, #0]
 8012588:	2380      	movs	r3, #128	; 0x80
 801258a:	005b      	lsls	r3, r3, #1
 801258c:	430b      	orrs	r3, r1
 801258e:	6013      	str	r3, [r2, #0]
}
 8012590:	4770      	bx	lr
 8012592:	46c0      	nop			; (mov r8, r8)
 8012594:	40007000 	.word	0x40007000

08012598 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012598:	b5f0      	push	{r4, r5, r6, r7, lr}
 801259a:	46c6      	mov	lr, r8
 801259c:	b500      	push	{lr}
 801259e:	b082      	sub	sp, #8
 80125a0:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80125a2:	6803      	ldr	r3, [r0, #0]
 80125a4:	07db      	lsls	r3, r3, #31
 80125a6:	d538      	bpl.n	801261a <HAL_RCC_OscConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80125a8:	4bbd      	ldr	r3, [pc, #756]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 80125aa:	685a      	ldr	r2, [r3, #4]
 80125ac:	230c      	movs	r3, #12
 80125ae:	4013      	ands	r3, r2
 80125b0:	2b04      	cmp	r3, #4
 80125b2:	d02a      	beq.n	801260a <HAL_RCC_OscConfig+0x72>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80125b4:	4bba      	ldr	r3, [pc, #744]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 80125b6:	685a      	ldr	r2, [r3, #4]
 80125b8:	230c      	movs	r3, #12
 80125ba:	4013      	ands	r3, r2
 80125bc:	2b08      	cmp	r3, #8
 80125be:	d108      	bne.n	80125d2 <HAL_RCC_OscConfig+0x3a>
 80125c0:	4bb7      	ldr	r3, [pc, #732]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 80125c2:	685b      	ldr	r3, [r3, #4]
 80125c4:	22c0      	movs	r2, #192	; 0xc0
 80125c6:	0252      	lsls	r2, r2, #9
 80125c8:	4013      	ands	r3, r2
 80125ca:	2280      	movs	r2, #128	; 0x80
 80125cc:	0252      	lsls	r2, r2, #9
 80125ce:	4293      	cmp	r3, r2
 80125d0:	d01b      	beq.n	801260a <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 80125d2:	4bb3      	ldr	r3, [pc, #716]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 80125d4:	681a      	ldr	r2, [r3, #0]
 80125d6:	49b3      	ldr	r1, [pc, #716]	; (80128a4 <HAL_RCC_OscConfig+0x30c>)
 80125d8:	400a      	ands	r2, r1
 80125da:	601a      	str	r2, [r3, #0]
 80125dc:	681a      	ldr	r2, [r3, #0]
 80125de:	49b2      	ldr	r1, [pc, #712]	; (80128a8 <HAL_RCC_OscConfig+0x310>)
 80125e0:	400a      	ands	r2, r1
 80125e2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80125e4:	f7fe faf8 	bl	8010bd8 <HAL_GetTick>
 80125e8:	0005      	movs	r5, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80125ea:	4fad      	ldr	r7, [pc, #692]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 80125ec:	2680      	movs	r6, #128	; 0x80
 80125ee:	02b6      	lsls	r6, r6, #10
 80125f0:	683b      	ldr	r3, [r7, #0]
 80125f2:	4233      	tst	r3, r6
 80125f4:	d039      	beq.n	801266a <HAL_RCC_OscConfig+0xd2>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80125f6:	f7fe faef 	bl	8010bd8 <HAL_GetTick>
 80125fa:	1b40      	subs	r0, r0, r5
 80125fc:	2864      	cmp	r0, #100	; 0x64
 80125fe:	d9f7      	bls.n	80125f0 <HAL_RCC_OscConfig+0x58>
        {
          return HAL_TIMEOUT;
 8012600:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8012602:	b002      	add	sp, #8
 8012604:	bc80      	pop	{r7}
 8012606:	46b8      	mov	r8, r7
 8012608:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801260a:	4ba5      	ldr	r3, [pc, #660]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	039b      	lsls	r3, r3, #14
 8012610:	d503      	bpl.n	801261a <HAL_RCC_OscConfig+0x82>
 8012612:	6863      	ldr	r3, [r4, #4]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d100      	bne.n	801261a <HAL_RCC_OscConfig+0x82>
 8012618:	e274      	b.n	8012b04 <HAL_RCC_OscConfig+0x56c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801261a:	6823      	ldr	r3, [r4, #0]
 801261c:	079b      	lsls	r3, r3, #30
 801261e:	d400      	bmi.n	8012622 <HAL_RCC_OscConfig+0x8a>
 8012620:	e08d      	b.n	801273e <HAL_RCC_OscConfig+0x1a6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8012622:	4b9f      	ldr	r3, [pc, #636]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 8012624:	685b      	ldr	r3, [r3, #4]
 8012626:	220c      	movs	r2, #12
 8012628:	421a      	tst	r2, r3
 801262a:	d077      	beq.n	801271c <HAL_RCC_OscConfig+0x184>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 801262c:	4b9c      	ldr	r3, [pc, #624]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 801262e:	685a      	ldr	r2, [r3, #4]
 8012630:	230c      	movs	r3, #12
 8012632:	4013      	ands	r3, r2
 8012634:	2b08      	cmp	r3, #8
 8012636:	d068      	beq.n	801270a <HAL_RCC_OscConfig+0x172>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8012638:	68e3      	ldr	r3, [r4, #12]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d100      	bne.n	8012640 <HAL_RCC_OscConfig+0xa8>
 801263e:	e0a1      	b.n	8012784 <HAL_RCC_OscConfig+0x1ec>
        __HAL_RCC_HSI_ENABLE();
 8012640:	4a97      	ldr	r2, [pc, #604]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 8012642:	6813      	ldr	r3, [r2, #0]
 8012644:	2101      	movs	r1, #1
 8012646:	430b      	orrs	r3, r1
 8012648:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801264a:	f7fe fac5 	bl	8010bd8 <HAL_GetTick>
 801264e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012650:	4f93      	ldr	r7, [pc, #588]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 8012652:	2602      	movs	r6, #2
 8012654:	683b      	ldr	r3, [r7, #0]
 8012656:	421e      	tst	r6, r3
 8012658:	d000      	beq.n	801265c <HAL_RCC_OscConfig+0xc4>
 801265a:	e08a      	b.n	8012772 <HAL_RCC_OscConfig+0x1da>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801265c:	f7fe fabc 	bl	8010bd8 <HAL_GetTick>
 8012660:	1b40      	subs	r0, r0, r5
 8012662:	2864      	cmp	r0, #100	; 0x64
 8012664:	d9f6      	bls.n	8012654 <HAL_RCC_OscConfig+0xbc>
            return HAL_TIMEOUT;
 8012666:	2003      	movs	r0, #3
 8012668:	e7cb      	b.n	8012602 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801266a:	6863      	ldr	r3, [r4, #4]
 801266c:	2b01      	cmp	r3, #1
 801266e:	d00b      	beq.n	8012688 <HAL_RCC_OscConfig+0xf0>
 8012670:	2b00      	cmp	r3, #0
 8012672:	d122      	bne.n	80126ba <HAL_RCC_OscConfig+0x122>
 8012674:	4b8a      	ldr	r3, [pc, #552]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 8012676:	681a      	ldr	r2, [r3, #0]
 8012678:	498a      	ldr	r1, [pc, #552]	; (80128a4 <HAL_RCC_OscConfig+0x30c>)
 801267a:	400a      	ands	r2, r1
 801267c:	601a      	str	r2, [r3, #0]
 801267e:	681a      	ldr	r2, [r3, #0]
 8012680:	4989      	ldr	r1, [pc, #548]	; (80128a8 <HAL_RCC_OscConfig+0x310>)
 8012682:	400a      	ands	r2, r1
 8012684:	601a      	str	r2, [r3, #0]
 8012686:	e005      	b.n	8012694 <HAL_RCC_OscConfig+0xfc>
 8012688:	4a85      	ldr	r2, [pc, #532]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 801268a:	6811      	ldr	r1, [r2, #0]
 801268c:	2380      	movs	r3, #128	; 0x80
 801268e:	025b      	lsls	r3, r3, #9
 8012690:	430b      	orrs	r3, r1
 8012692:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8012694:	6863      	ldr	r3, [r4, #4]
 8012696:	2b00      	cmp	r3, #0
 8012698:	d027      	beq.n	80126ea <HAL_RCC_OscConfig+0x152>
        tickstart = HAL_GetTick();
 801269a:	f7fe fa9d 	bl	8010bd8 <HAL_GetTick>
 801269e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80126a0:	4f7f      	ldr	r7, [pc, #508]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 80126a2:	2680      	movs	r6, #128	; 0x80
 80126a4:	02b6      	lsls	r6, r6, #10
 80126a6:	683b      	ldr	r3, [r7, #0]
 80126a8:	4233      	tst	r3, r6
 80126aa:	d1b6      	bne.n	801261a <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80126ac:	f7fe fa94 	bl	8010bd8 <HAL_GetTick>
 80126b0:	1b40      	subs	r0, r0, r5
 80126b2:	2864      	cmp	r0, #100	; 0x64
 80126b4:	d9f7      	bls.n	80126a6 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 80126b6:	2003      	movs	r0, #3
 80126b8:	e7a3      	b.n	8012602 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80126ba:	2b05      	cmp	r3, #5
 80126bc:	d009      	beq.n	80126d2 <HAL_RCC_OscConfig+0x13a>
 80126be:	4b78      	ldr	r3, [pc, #480]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 80126c0:	681a      	ldr	r2, [r3, #0]
 80126c2:	4978      	ldr	r1, [pc, #480]	; (80128a4 <HAL_RCC_OscConfig+0x30c>)
 80126c4:	400a      	ands	r2, r1
 80126c6:	601a      	str	r2, [r3, #0]
 80126c8:	681a      	ldr	r2, [r3, #0]
 80126ca:	4977      	ldr	r1, [pc, #476]	; (80128a8 <HAL_RCC_OscConfig+0x310>)
 80126cc:	400a      	ands	r2, r1
 80126ce:	601a      	str	r2, [r3, #0]
 80126d0:	e7e0      	b.n	8012694 <HAL_RCC_OscConfig+0xfc>
 80126d2:	4b73      	ldr	r3, [pc, #460]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 80126d4:	6819      	ldr	r1, [r3, #0]
 80126d6:	2280      	movs	r2, #128	; 0x80
 80126d8:	02d2      	lsls	r2, r2, #11
 80126da:	430a      	orrs	r2, r1
 80126dc:	601a      	str	r2, [r3, #0]
 80126de:	6819      	ldr	r1, [r3, #0]
 80126e0:	2280      	movs	r2, #128	; 0x80
 80126e2:	0252      	lsls	r2, r2, #9
 80126e4:	430a      	orrs	r2, r1
 80126e6:	601a      	str	r2, [r3, #0]
 80126e8:	e7d4      	b.n	8012694 <HAL_RCC_OscConfig+0xfc>
        tickstart = HAL_GetTick();
 80126ea:	f7fe fa75 	bl	8010bd8 <HAL_GetTick>
 80126ee:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80126f0:	4f6b      	ldr	r7, [pc, #428]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 80126f2:	2680      	movs	r6, #128	; 0x80
 80126f4:	02b6      	lsls	r6, r6, #10
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	4233      	tst	r3, r6
 80126fa:	d08e      	beq.n	801261a <HAL_RCC_OscConfig+0x82>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80126fc:	f7fe fa6c 	bl	8010bd8 <HAL_GetTick>
 8012700:	1b40      	subs	r0, r0, r5
 8012702:	2864      	cmp	r0, #100	; 0x64
 8012704:	d9f7      	bls.n	80126f6 <HAL_RCC_OscConfig+0x15e>
            return HAL_TIMEOUT;
 8012706:	2003      	movs	r0, #3
 8012708:	e77b      	b.n	8012602 <HAL_RCC_OscConfig+0x6a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 801270a:	4b65      	ldr	r3, [pc, #404]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 801270c:	685b      	ldr	r3, [r3, #4]
 801270e:	22c0      	movs	r2, #192	; 0xc0
 8012710:	0252      	lsls	r2, r2, #9
 8012712:	4013      	ands	r3, r2
 8012714:	2280      	movs	r2, #128	; 0x80
 8012716:	0212      	lsls	r2, r2, #8
 8012718:	4293      	cmp	r3, r2
 801271a:	d18d      	bne.n	8012638 <HAL_RCC_OscConfig+0xa0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801271c:	4b60      	ldr	r3, [pc, #384]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	079b      	lsls	r3, r3, #30
 8012722:	d504      	bpl.n	801272e <HAL_RCC_OscConfig+0x196>
        return HAL_ERROR;
 8012724:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012726:	68e3      	ldr	r3, [r4, #12]
 8012728:	2b01      	cmp	r3, #1
 801272a:	d000      	beq.n	801272e <HAL_RCC_OscConfig+0x196>
 801272c:	e769      	b.n	8012602 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801272e:	495c      	ldr	r1, [pc, #368]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 8012730:	680a      	ldr	r2, [r1, #0]
 8012732:	6923      	ldr	r3, [r4, #16]
 8012734:	00db      	lsls	r3, r3, #3
 8012736:	20f8      	movs	r0, #248	; 0xf8
 8012738:	4382      	bics	r2, r0
 801273a:	4313      	orrs	r3, r2
 801273c:	600b      	str	r3, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801273e:	6823      	ldr	r3, [r4, #0]
 8012740:	071b      	lsls	r3, r3, #28
 8012742:	d547      	bpl.n	80127d4 <HAL_RCC_OscConfig+0x23c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8012744:	6a23      	ldr	r3, [r4, #32]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d030      	beq.n	80127ac <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 801274a:	4a55      	ldr	r2, [pc, #340]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 801274c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 801274e:	2101      	movs	r1, #1
 8012750:	430b      	orrs	r3, r1
 8012752:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8012754:	f7fe fa40 	bl	8010bd8 <HAL_GetTick>
 8012758:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801275a:	4f51      	ldr	r7, [pc, #324]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 801275c:	2602      	movs	r6, #2
 801275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012760:	421e      	tst	r6, r3
 8012762:	d137      	bne.n	80127d4 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012764:	f7fe fa38 	bl	8010bd8 <HAL_GetTick>
 8012768:	1b40      	subs	r0, r0, r5
 801276a:	2864      	cmp	r0, #100	; 0x64
 801276c:	d9f7      	bls.n	801275e <HAL_RCC_OscConfig+0x1c6>
          return HAL_TIMEOUT;
 801276e:	2003      	movs	r0, #3
 8012770:	e747      	b.n	8012602 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012772:	494b      	ldr	r1, [pc, #300]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 8012774:	680a      	ldr	r2, [r1, #0]
 8012776:	6923      	ldr	r3, [r4, #16]
 8012778:	00db      	lsls	r3, r3, #3
 801277a:	20f8      	movs	r0, #248	; 0xf8
 801277c:	4382      	bics	r2, r0
 801277e:	4313      	orrs	r3, r2
 8012780:	600b      	str	r3, [r1, #0]
 8012782:	e7dc      	b.n	801273e <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_HSI_DISABLE();
 8012784:	4a46      	ldr	r2, [pc, #280]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 8012786:	6813      	ldr	r3, [r2, #0]
 8012788:	2101      	movs	r1, #1
 801278a:	438b      	bics	r3, r1
 801278c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 801278e:	f7fe fa23 	bl	8010bd8 <HAL_GetTick>
 8012792:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012794:	4f42      	ldr	r7, [pc, #264]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 8012796:	2602      	movs	r6, #2
 8012798:	683b      	ldr	r3, [r7, #0]
 801279a:	421e      	tst	r6, r3
 801279c:	d0cf      	beq.n	801273e <HAL_RCC_OscConfig+0x1a6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801279e:	f7fe fa1b 	bl	8010bd8 <HAL_GetTick>
 80127a2:	1b40      	subs	r0, r0, r5
 80127a4:	2864      	cmp	r0, #100	; 0x64
 80127a6:	d9f7      	bls.n	8012798 <HAL_RCC_OscConfig+0x200>
            return HAL_TIMEOUT;
 80127a8:	2003      	movs	r0, #3
 80127aa:	e72a      	b.n	8012602 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_LSI_DISABLE();
 80127ac:	4a3c      	ldr	r2, [pc, #240]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 80127ae:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80127b0:	2101      	movs	r1, #1
 80127b2:	438b      	bics	r3, r1
 80127b4:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 80127b6:	f7fe fa0f 	bl	8010bd8 <HAL_GetTick>
 80127ba:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80127bc:	4f38      	ldr	r7, [pc, #224]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 80127be:	2602      	movs	r6, #2
 80127c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127c2:	421e      	tst	r6, r3
 80127c4:	d006      	beq.n	80127d4 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80127c6:	f7fe fa07 	bl	8010bd8 <HAL_GetTick>
 80127ca:	1b40      	subs	r0, r0, r5
 80127cc:	2864      	cmp	r0, #100	; 0x64
 80127ce:	d9f7      	bls.n	80127c0 <HAL_RCC_OscConfig+0x228>
          return HAL_TIMEOUT;
 80127d0:	2003      	movs	r0, #3
 80127d2:	e716      	b.n	8012602 <HAL_RCC_OscConfig+0x6a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80127d4:	6823      	ldr	r3, [r4, #0]
 80127d6:	075b      	lsls	r3, r3, #29
 80127d8:	d442      	bmi.n	8012860 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80127da:	6823      	ldr	r3, [r4, #0]
 80127dc:	06db      	lsls	r3, r3, #27
 80127de:	d512      	bpl.n	8012806 <HAL_RCC_OscConfig+0x26e>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80127e0:	6963      	ldr	r3, [r4, #20]
 80127e2:	2b01      	cmp	r3, #1
 80127e4:	d100      	bne.n	80127e8 <HAL_RCC_OscConfig+0x250>
 80127e6:	e0ce      	b.n	8012986 <HAL_RCC_OscConfig+0x3ee>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80127e8:	3305      	adds	r3, #5
 80127ea:	d000      	beq.n	80127ee <HAL_RCC_OscConfig+0x256>
 80127ec:	e0ec      	b.n	80129c8 <HAL_RCC_OscConfig+0x430>
      __HAL_RCC_HSI14ADC_ENABLE();
 80127ee:	4a2c      	ldr	r2, [pc, #176]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 80127f0:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80127f2:	2104      	movs	r1, #4
 80127f4:	438b      	bics	r3, r1
 80127f6:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80127f8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80127fa:	69a3      	ldr	r3, [r4, #24]
 80127fc:	00db      	lsls	r3, r3, #3
 80127fe:	20f8      	movs	r0, #248	; 0xf8
 8012800:	4381      	bics	r1, r0
 8012802:	430b      	orrs	r3, r1
 8012804:	6353      	str	r3, [r2, #52]	; 0x34
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8012806:	6823      	ldr	r3, [r4, #0]
 8012808:	069b      	lsls	r3, r3, #26
 801280a:	d400      	bmi.n	801280e <HAL_RCC_OscConfig+0x276>
 801280c:	e106      	b.n	8012a1c <HAL_RCC_OscConfig+0x484>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 801280e:	4b24      	ldr	r3, [pc, #144]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 8012810:	685a      	ldr	r2, [r3, #4]
 8012812:	230c      	movs	r3, #12
 8012814:	4013      	ands	r3, r2
 8012816:	2b0c      	cmp	r3, #12
 8012818:	d100      	bne.n	801281c <HAL_RCC_OscConfig+0x284>
 801281a:	e0f6      	b.n	8012a0a <HAL_RCC_OscConfig+0x472>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 801281c:	4b20      	ldr	r3, [pc, #128]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 801281e:	685a      	ldr	r2, [r3, #4]
 8012820:	230c      	movs	r3, #12
 8012822:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8012824:	2b08      	cmp	r3, #8
 8012826:	d100      	bne.n	801282a <HAL_RCC_OscConfig+0x292>
 8012828:	e0e7      	b.n	80129fa <HAL_RCC_OscConfig+0x462>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801282a:	69e3      	ldr	r3, [r4, #28]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d100      	bne.n	8012832 <HAL_RCC_OscConfig+0x29a>
 8012830:	e116      	b.n	8012a60 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_HSI48_ENABLE();
 8012832:	4a1b      	ldr	r2, [pc, #108]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 8012834:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8012836:	2380      	movs	r3, #128	; 0x80
 8012838:	025b      	lsls	r3, r3, #9
 801283a:	430b      	orrs	r3, r1
 801283c:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 801283e:	f7fe f9cb 	bl	8010bd8 <HAL_GetTick>
 8012842:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012844:	4f16      	ldr	r7, [pc, #88]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 8012846:	2680      	movs	r6, #128	; 0x80
 8012848:	0276      	lsls	r6, r6, #9
 801284a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801284c:	4233      	tst	r3, r6
 801284e:	d000      	beq.n	8012852 <HAL_RCC_OscConfig+0x2ba>
 8012850:	e0e4      	b.n	8012a1c <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012852:	f7fe f9c1 	bl	8010bd8 <HAL_GetTick>
 8012856:	1b40      	subs	r0, r0, r5
 8012858:	2864      	cmp	r0, #100	; 0x64
 801285a:	d9f6      	bls.n	801284a <HAL_RCC_OscConfig+0x2b2>
            return HAL_TIMEOUT;
 801285c:	2003      	movs	r0, #3
 801285e:	e6d0      	b.n	8012602 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_PWR_CLK_ENABLE();
 8012860:	4a0f      	ldr	r2, [pc, #60]	; (80128a0 <HAL_RCC_OscConfig+0x308>)
 8012862:	69d1      	ldr	r1, [r2, #28]
 8012864:	2080      	movs	r0, #128	; 0x80
 8012866:	0540      	lsls	r0, r0, #21
 8012868:	4301      	orrs	r1, r0
 801286a:	61d1      	str	r1, [r2, #28]
 801286c:	69d3      	ldr	r3, [r2, #28]
 801286e:	4003      	ands	r3, r0
 8012870:	9301      	str	r3, [sp, #4]
 8012872:	9b01      	ldr	r3, [sp, #4]
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8012874:	4a0d      	ldr	r2, [pc, #52]	; (80128ac <HAL_RCC_OscConfig+0x314>)
 8012876:	6811      	ldr	r1, [r2, #0]
 8012878:	2380      	movs	r3, #128	; 0x80
 801287a:	005b      	lsls	r3, r3, #1
 801287c:	430b      	orrs	r3, r1
 801287e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8012880:	f7fe f9aa 	bl	8010bd8 <HAL_GetTick>
 8012884:	0005      	movs	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8012886:	4f09      	ldr	r7, [pc, #36]	; (80128ac <HAL_RCC_OscConfig+0x314>)
 8012888:	2680      	movs	r6, #128	; 0x80
 801288a:	0076      	lsls	r6, r6, #1
 801288c:	683b      	ldr	r3, [r7, #0]
 801288e:	4233      	tst	r3, r6
 8012890:	d10e      	bne.n	80128b0 <HAL_RCC_OscConfig+0x318>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8012892:	f7fe f9a1 	bl	8010bd8 <HAL_GetTick>
 8012896:	1b40      	subs	r0, r0, r5
 8012898:	2864      	cmp	r0, #100	; 0x64
 801289a:	d9f7      	bls.n	801288c <HAL_RCC_OscConfig+0x2f4>
        return HAL_TIMEOUT;
 801289c:	2003      	movs	r0, #3
 801289e:	e6b0      	b.n	8012602 <HAL_RCC_OscConfig+0x6a>
 80128a0:	40021000 	.word	0x40021000
 80128a4:	fffeffff 	.word	0xfffeffff
 80128a8:	fffbffff 	.word	0xfffbffff
 80128ac:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80128b0:	4b96      	ldr	r3, [pc, #600]	; (8012b0c <HAL_RCC_OscConfig+0x574>)
 80128b2:	6a1a      	ldr	r2, [r3, #32]
 80128b4:	2101      	movs	r1, #1
 80128b6:	438a      	bics	r2, r1
 80128b8:	621a      	str	r2, [r3, #32]
 80128ba:	6a1a      	ldr	r2, [r3, #32]
 80128bc:	3103      	adds	r1, #3
 80128be:	438a      	bics	r2, r1
 80128c0:	621a      	str	r2, [r3, #32]
    tickstart = HAL_GetTick();
 80128c2:	f7fe f989 	bl	8010bd8 <HAL_GetTick>
 80128c6:	0005      	movs	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80128c8:	4f90      	ldr	r7, [pc, #576]	; (8012b0c <HAL_RCC_OscConfig+0x574>)
 80128ca:	2602      	movs	r6, #2
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80128cc:	4b90      	ldr	r3, [pc, #576]	; (8012b10 <HAL_RCC_OscConfig+0x578>)
 80128ce:	4698      	mov	r8, r3
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80128d0:	6a3b      	ldr	r3, [r7, #32]
 80128d2:	421e      	tst	r6, r3
 80128d4:	d006      	beq.n	80128e4 <HAL_RCC_OscConfig+0x34c>
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80128d6:	f7fe f97f 	bl	8010bd8 <HAL_GetTick>
 80128da:	1b40      	subs	r0, r0, r5
 80128dc:	4540      	cmp	r0, r8
 80128de:	d9f7      	bls.n	80128d0 <HAL_RCC_OscConfig+0x338>
        return HAL_TIMEOUT;
 80128e0:	2003      	movs	r0, #3
 80128e2:	e68e      	b.n	8012602 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80128e4:	68a3      	ldr	r3, [r4, #8]
 80128e6:	2b01      	cmp	r3, #1
 80128e8:	d00b      	beq.n	8012902 <HAL_RCC_OscConfig+0x36a>
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d123      	bne.n	8012936 <HAL_RCC_OscConfig+0x39e>
 80128ee:	4b87      	ldr	r3, [pc, #540]	; (8012b0c <HAL_RCC_OscConfig+0x574>)
 80128f0:	6a1a      	ldr	r2, [r3, #32]
 80128f2:	2101      	movs	r1, #1
 80128f4:	438a      	bics	r2, r1
 80128f6:	621a      	str	r2, [r3, #32]
 80128f8:	6a1a      	ldr	r2, [r3, #32]
 80128fa:	3103      	adds	r1, #3
 80128fc:	438a      	bics	r2, r1
 80128fe:	621a      	str	r2, [r3, #32]
 8012900:	e004      	b.n	801290c <HAL_RCC_OscConfig+0x374>
 8012902:	4a82      	ldr	r2, [pc, #520]	; (8012b0c <HAL_RCC_OscConfig+0x574>)
 8012904:	6a13      	ldr	r3, [r2, #32]
 8012906:	2101      	movs	r1, #1
 8012908:	430b      	orrs	r3, r1
 801290a:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801290c:	68a3      	ldr	r3, [r4, #8]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d027      	beq.n	8012962 <HAL_RCC_OscConfig+0x3ca>
      tickstart = HAL_GetTick();
 8012912:	f7fe f961 	bl	8010bd8 <HAL_GetTick>
 8012916:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012918:	4f7c      	ldr	r7, [pc, #496]	; (8012b0c <HAL_RCC_OscConfig+0x574>)
 801291a:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801291c:	4b7c      	ldr	r3, [pc, #496]	; (8012b10 <HAL_RCC_OscConfig+0x578>)
 801291e:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012920:	6a3b      	ldr	r3, [r7, #32]
 8012922:	421e      	tst	r6, r3
 8012924:	d000      	beq.n	8012928 <HAL_RCC_OscConfig+0x390>
 8012926:	e758      	b.n	80127da <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012928:	f7fe f956 	bl	8010bd8 <HAL_GetTick>
 801292c:	1b40      	subs	r0, r0, r5
 801292e:	4540      	cmp	r0, r8
 8012930:	d9f6      	bls.n	8012920 <HAL_RCC_OscConfig+0x388>
          return HAL_TIMEOUT;
 8012932:	2003      	movs	r0, #3
 8012934:	e665      	b.n	8012602 <HAL_RCC_OscConfig+0x6a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012936:	2b05      	cmp	r3, #5
 8012938:	d009      	beq.n	801294e <HAL_RCC_OscConfig+0x3b6>
 801293a:	4b74      	ldr	r3, [pc, #464]	; (8012b0c <HAL_RCC_OscConfig+0x574>)
 801293c:	6a1a      	ldr	r2, [r3, #32]
 801293e:	2101      	movs	r1, #1
 8012940:	438a      	bics	r2, r1
 8012942:	621a      	str	r2, [r3, #32]
 8012944:	6a1a      	ldr	r2, [r3, #32]
 8012946:	3103      	adds	r1, #3
 8012948:	438a      	bics	r2, r1
 801294a:	621a      	str	r2, [r3, #32]
 801294c:	e7de      	b.n	801290c <HAL_RCC_OscConfig+0x374>
 801294e:	4b6f      	ldr	r3, [pc, #444]	; (8012b0c <HAL_RCC_OscConfig+0x574>)
 8012950:	6a1a      	ldr	r2, [r3, #32]
 8012952:	2104      	movs	r1, #4
 8012954:	430a      	orrs	r2, r1
 8012956:	621a      	str	r2, [r3, #32]
 8012958:	6a1a      	ldr	r2, [r3, #32]
 801295a:	3903      	subs	r1, #3
 801295c:	430a      	orrs	r2, r1
 801295e:	621a      	str	r2, [r3, #32]
 8012960:	e7d4      	b.n	801290c <HAL_RCC_OscConfig+0x374>
      tickstart = HAL_GetTick();
 8012962:	f7fe f939 	bl	8010bd8 <HAL_GetTick>
 8012966:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012968:	4f68      	ldr	r7, [pc, #416]	; (8012b0c <HAL_RCC_OscConfig+0x574>)
 801296a:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801296c:	4b68      	ldr	r3, [pc, #416]	; (8012b10 <HAL_RCC_OscConfig+0x578>)
 801296e:	4698      	mov	r8, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012970:	6a3b      	ldr	r3, [r7, #32]
 8012972:	421e      	tst	r6, r3
 8012974:	d100      	bne.n	8012978 <HAL_RCC_OscConfig+0x3e0>
 8012976:	e730      	b.n	80127da <HAL_RCC_OscConfig+0x242>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012978:	f7fe f92e 	bl	8010bd8 <HAL_GetTick>
 801297c:	1b40      	subs	r0, r0, r5
 801297e:	4540      	cmp	r0, r8
 8012980:	d9f6      	bls.n	8012970 <HAL_RCC_OscConfig+0x3d8>
          return HAL_TIMEOUT;
 8012982:	2003      	movs	r0, #3
 8012984:	e63d      	b.n	8012602 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8012986:	4b61      	ldr	r3, [pc, #388]	; (8012b0c <HAL_RCC_OscConfig+0x574>)
 8012988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801298a:	2104      	movs	r1, #4
 801298c:	430a      	orrs	r2, r1
 801298e:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8012990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012992:	3903      	subs	r1, #3
 8012994:	430a      	orrs	r2, r1
 8012996:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8012998:	f7fe f91e 	bl	8010bd8 <HAL_GetTick>
 801299c:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 801299e:	4f5b      	ldr	r7, [pc, #364]	; (8012b0c <HAL_RCC_OscConfig+0x574>)
 80129a0:	2602      	movs	r6, #2
 80129a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129a4:	421e      	tst	r6, r3
 80129a6:	d106      	bne.n	80129b6 <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80129a8:	f7fe f916 	bl	8010bd8 <HAL_GetTick>
 80129ac:	1b40      	subs	r0, r0, r5
 80129ae:	2864      	cmp	r0, #100	; 0x64
 80129b0:	d9f7      	bls.n	80129a2 <HAL_RCC_OscConfig+0x40a>
          return HAL_TIMEOUT;
 80129b2:	2003      	movs	r0, #3
 80129b4:	e625      	b.n	8012602 <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80129b6:	4955      	ldr	r1, [pc, #340]	; (8012b0c <HAL_RCC_OscConfig+0x574>)
 80129b8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80129ba:	69a3      	ldr	r3, [r4, #24]
 80129bc:	00db      	lsls	r3, r3, #3
 80129be:	20f8      	movs	r0, #248	; 0xf8
 80129c0:	4382      	bics	r2, r0
 80129c2:	4313      	orrs	r3, r2
 80129c4:	634b      	str	r3, [r1, #52]	; 0x34
 80129c6:	e71e      	b.n	8012806 <HAL_RCC_OscConfig+0x26e>
      __HAL_RCC_HSI14ADC_DISABLE();
 80129c8:	4b50      	ldr	r3, [pc, #320]	; (8012b0c <HAL_RCC_OscConfig+0x574>)
 80129ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80129cc:	2104      	movs	r1, #4
 80129ce:	430a      	orrs	r2, r1
 80129d0:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80129d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80129d4:	3903      	subs	r1, #3
 80129d6:	438a      	bics	r2, r1
 80129d8:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 80129da:	f7fe f8fd 	bl	8010bd8 <HAL_GetTick>
 80129de:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80129e0:	4f4a      	ldr	r7, [pc, #296]	; (8012b0c <HAL_RCC_OscConfig+0x574>)
 80129e2:	2602      	movs	r6, #2
 80129e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129e6:	421e      	tst	r6, r3
 80129e8:	d100      	bne.n	80129ec <HAL_RCC_OscConfig+0x454>
 80129ea:	e70c      	b.n	8012806 <HAL_RCC_OscConfig+0x26e>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80129ec:	f7fe f8f4 	bl	8010bd8 <HAL_GetTick>
 80129f0:	1b40      	subs	r0, r0, r5
 80129f2:	2864      	cmp	r0, #100	; 0x64
 80129f4:	d9f6      	bls.n	80129e4 <HAL_RCC_OscConfig+0x44c>
          return HAL_TIMEOUT;
 80129f6:	2003      	movs	r0, #3
 80129f8:	e603      	b.n	8012602 <HAL_RCC_OscConfig+0x6a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80129fa:	4b44      	ldr	r3, [pc, #272]	; (8012b0c <HAL_RCC_OscConfig+0x574>)
 80129fc:	685b      	ldr	r3, [r3, #4]
 80129fe:	22c0      	movs	r2, #192	; 0xc0
 8012a00:	0252      	lsls	r2, r2, #9
 8012a02:	4013      	ands	r3, r2
 8012a04:	4293      	cmp	r3, r2
 8012a06:	d000      	beq.n	8012a0a <HAL_RCC_OscConfig+0x472>
 8012a08:	e70f      	b.n	801282a <HAL_RCC_OscConfig+0x292>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8012a0a:	4b40      	ldr	r3, [pc, #256]	; (8012b0c <HAL_RCC_OscConfig+0x574>)
 8012a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a0e:	03db      	lsls	r3, r3, #15
 8012a10:	d504      	bpl.n	8012a1c <HAL_RCC_OscConfig+0x484>
        return HAL_ERROR;
 8012a12:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8012a14:	69e3      	ldr	r3, [r4, #28]
 8012a16:	2b01      	cmp	r3, #1
 8012a18:	d000      	beq.n	8012a1c <HAL_RCC_OscConfig+0x484>
 8012a1a:	e5f2      	b.n	8012602 <HAL_RCC_OscConfig+0x6a>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012a1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  return HAL_OK;
 8012a1e:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d100      	bne.n	8012a26 <HAL_RCC_OscConfig+0x48e>
 8012a24:	e5ed      	b.n	8012602 <HAL_RCC_OscConfig+0x6a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012a26:	4a39      	ldr	r2, [pc, #228]	; (8012b0c <HAL_RCC_OscConfig+0x574>)
 8012a28:	6851      	ldr	r1, [r2, #4]
 8012a2a:	220c      	movs	r2, #12
 8012a2c:	400a      	ands	r2, r1
 8012a2e:	2a08      	cmp	r2, #8
 8012a30:	d06a      	beq.n	8012b08 <HAL_RCC_OscConfig+0x570>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012a32:	2b02      	cmp	r3, #2
 8012a34:	d029      	beq.n	8012a8a <HAL_RCC_OscConfig+0x4f2>
        __HAL_RCC_PLL_DISABLE();
 8012a36:	4a35      	ldr	r2, [pc, #212]	; (8012b0c <HAL_RCC_OscConfig+0x574>)
 8012a38:	6813      	ldr	r3, [r2, #0]
 8012a3a:	4936      	ldr	r1, [pc, #216]	; (8012b14 <HAL_RCC_OscConfig+0x57c>)
 8012a3c:	400b      	ands	r3, r1
 8012a3e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012a40:	f7fe f8ca 	bl	8010bd8 <HAL_GetTick>
 8012a44:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8012a46:	4e31      	ldr	r6, [pc, #196]	; (8012b0c <HAL_RCC_OscConfig+0x574>)
 8012a48:	2580      	movs	r5, #128	; 0x80
 8012a4a:	04ad      	lsls	r5, r5, #18
 8012a4c:	6833      	ldr	r3, [r6, #0]
 8012a4e:	422b      	tst	r3, r5
 8012a50:	d056      	beq.n	8012b00 <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012a52:	f7fe f8c1 	bl	8010bd8 <HAL_GetTick>
 8012a56:	1b00      	subs	r0, r0, r4
 8012a58:	2864      	cmp	r0, #100	; 0x64
 8012a5a:	d9f7      	bls.n	8012a4c <HAL_RCC_OscConfig+0x4b4>
            return HAL_TIMEOUT;
 8012a5c:	2003      	movs	r0, #3
 8012a5e:	e5d0      	b.n	8012602 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI48_DISABLE();
 8012a60:	4a2a      	ldr	r2, [pc, #168]	; (8012b0c <HAL_RCC_OscConfig+0x574>)
 8012a62:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8012a64:	492c      	ldr	r1, [pc, #176]	; (8012b18 <HAL_RCC_OscConfig+0x580>)
 8012a66:	400b      	ands	r3, r1
 8012a68:	6353      	str	r3, [r2, #52]	; 0x34
        tickstart = HAL_GetTick();
 8012a6a:	f7fe f8b5 	bl	8010bd8 <HAL_GetTick>
 8012a6e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8012a70:	4f26      	ldr	r7, [pc, #152]	; (8012b0c <HAL_RCC_OscConfig+0x574>)
 8012a72:	2680      	movs	r6, #128	; 0x80
 8012a74:	0276      	lsls	r6, r6, #9
 8012a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a78:	4233      	tst	r3, r6
 8012a7a:	d0cf      	beq.n	8012a1c <HAL_RCC_OscConfig+0x484>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8012a7c:	f7fe f8ac 	bl	8010bd8 <HAL_GetTick>
 8012a80:	1b40      	subs	r0, r0, r5
 8012a82:	2864      	cmp	r0, #100	; 0x64
 8012a84:	d9f7      	bls.n	8012a76 <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 8012a86:	2003      	movs	r0, #3
 8012a88:	e5bb      	b.n	8012602 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_DISABLE();
 8012a8a:	4a20      	ldr	r2, [pc, #128]	; (8012b0c <HAL_RCC_OscConfig+0x574>)
 8012a8c:	6813      	ldr	r3, [r2, #0]
 8012a8e:	4921      	ldr	r1, [pc, #132]	; (8012b14 <HAL_RCC_OscConfig+0x57c>)
 8012a90:	400b      	ands	r3, r1
 8012a92:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8012a94:	f7fe f8a0 	bl	8010bd8 <HAL_GetTick>
 8012a98:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8012a9a:	4f1c      	ldr	r7, [pc, #112]	; (8012b0c <HAL_RCC_OscConfig+0x574>)
 8012a9c:	2680      	movs	r6, #128	; 0x80
 8012a9e:	04b6      	lsls	r6, r6, #18
 8012aa0:	683b      	ldr	r3, [r7, #0]
 8012aa2:	4233      	tst	r3, r6
 8012aa4:	d006      	beq.n	8012ab4 <HAL_RCC_OscConfig+0x51c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012aa6:	f7fe f897 	bl	8010bd8 <HAL_GetTick>
 8012aaa:	1b40      	subs	r0, r0, r5
 8012aac:	2864      	cmp	r0, #100	; 0x64
 8012aae:	d9f7      	bls.n	8012aa0 <HAL_RCC_OscConfig+0x508>
            return HAL_TIMEOUT;
 8012ab0:	2003      	movs	r0, #3
 8012ab2:	e5a6      	b.n	8012602 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8012ab4:	4b15      	ldr	r3, [pc, #84]	; (8012b0c <HAL_RCC_OscConfig+0x574>)
 8012ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ab8:	210f      	movs	r1, #15
 8012aba:	438a      	bics	r2, r1
 8012abc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012abe:	430a      	orrs	r2, r1
 8012ac0:	62da      	str	r2, [r3, #44]	; 0x2c
 8012ac2:	6859      	ldr	r1, [r3, #4]
 8012ac4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8012ac6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8012ac8:	4302      	orrs	r2, r0
 8012aca:	4814      	ldr	r0, [pc, #80]	; (8012b1c <HAL_RCC_OscConfig+0x584>)
 8012acc:	4001      	ands	r1, r0
 8012ace:	430a      	orrs	r2, r1
 8012ad0:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8012ad2:	6819      	ldr	r1, [r3, #0]
 8012ad4:	2280      	movs	r2, #128	; 0x80
 8012ad6:	0452      	lsls	r2, r2, #17
 8012ad8:	430a      	orrs	r2, r1
 8012ada:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8012adc:	f7fe f87c 	bl	8010bd8 <HAL_GetTick>
 8012ae0:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8012ae2:	4e0a      	ldr	r6, [pc, #40]	; (8012b0c <HAL_RCC_OscConfig+0x574>)
 8012ae4:	2580      	movs	r5, #128	; 0x80
 8012ae6:	04ad      	lsls	r5, r5, #18
 8012ae8:	6833      	ldr	r3, [r6, #0]
 8012aea:	422b      	tst	r3, r5
 8012aec:	d106      	bne.n	8012afc <HAL_RCC_OscConfig+0x564>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012aee:	f7fe f873 	bl	8010bd8 <HAL_GetTick>
 8012af2:	1b00      	subs	r0, r0, r4
 8012af4:	2864      	cmp	r0, #100	; 0x64
 8012af6:	d9f7      	bls.n	8012ae8 <HAL_RCC_OscConfig+0x550>
            return HAL_TIMEOUT;
 8012af8:	2003      	movs	r0, #3
 8012afa:	e582      	b.n	8012602 <HAL_RCC_OscConfig+0x6a>
  return HAL_OK;
 8012afc:	2000      	movs	r0, #0
 8012afe:	e580      	b.n	8012602 <HAL_RCC_OscConfig+0x6a>
 8012b00:	2000      	movs	r0, #0
 8012b02:	e57e      	b.n	8012602 <HAL_RCC_OscConfig+0x6a>
        return HAL_ERROR;
 8012b04:	2001      	movs	r0, #1
 8012b06:	e57c      	b.n	8012602 <HAL_RCC_OscConfig+0x6a>
      return HAL_ERROR;
 8012b08:	2001      	movs	r0, #1
 8012b0a:	e57a      	b.n	8012602 <HAL_RCC_OscConfig+0x6a>
 8012b0c:	40021000 	.word	0x40021000
 8012b10:	00001388 	.word	0x00001388
 8012b14:	feffffff 	.word	0xfeffffff
 8012b18:	fffeffff 	.word	0xfffeffff
 8012b1c:	ffc27fff 	.word	0xffc27fff

08012b20 <HAL_RCC_ClockConfig>:
  *         You can use HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b22:	46ce      	mov	lr, r9
 8012b24:	4647      	mov	r7, r8
 8012b26:	b580      	push	{r7, lr}
 8012b28:	0004      	movs	r4, r0
 8012b2a:	000d      	movs	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8012b2c:	4b96      	ldr	r3, [pc, #600]	; (8012d88 <HAL_RCC_ClockConfig+0x268>)
 8012b2e:	681a      	ldr	r2, [r3, #0]
 8012b30:	2301      	movs	r3, #1
 8012b32:	4013      	ands	r3, r2
 8012b34:	428b      	cmp	r3, r1
 8012b36:	d300      	bcc.n	8012b3a <HAL_RCC_ClockConfig+0x1a>
 8012b38:	e086      	b.n	8012c48 <HAL_RCC_ClockConfig+0x128>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012b3a:	4993      	ldr	r1, [pc, #588]	; (8012d88 <HAL_RCC_ClockConfig+0x268>)
 8012b3c:	680b      	ldr	r3, [r1, #0]
 8012b3e:	2201      	movs	r2, #1
 8012b40:	4393      	bics	r3, r2
 8012b42:	432b      	orrs	r3, r5
 8012b44:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012b46:	680b      	ldr	r3, [r1, #0]
 8012b48:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 8012b4a:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012b4c:	42aa      	cmp	r2, r5
 8012b4e:	d000      	beq.n	8012b52 <HAL_RCC_ClockConfig+0x32>
 8012b50:	e111      	b.n	8012d76 <HAL_RCC_ClockConfig+0x256>
    }
    
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012b52:	6823      	ldr	r3, [r4, #0]
 8012b54:	079b      	lsls	r3, r3, #30
 8012b56:	d506      	bpl.n	8012b66 <HAL_RCC_ClockConfig+0x46>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012b58:	4a8c      	ldr	r2, [pc, #560]	; (8012d8c <HAL_RCC_ClockConfig+0x26c>)
 8012b5a:	6853      	ldr	r3, [r2, #4]
 8012b5c:	21f0      	movs	r1, #240	; 0xf0
 8012b5e:	438b      	bics	r3, r1
 8012b60:	68a1      	ldr	r1, [r4, #8]
 8012b62:	430b      	orrs	r3, r1
 8012b64:	6053      	str	r3, [r2, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012b66:	6823      	ldr	r3, [r4, #0]
 8012b68:	07db      	lsls	r3, r3, #31
 8012b6a:	d400      	bmi.n	8012b6e <HAL_RCC_ClockConfig+0x4e>
 8012b6c:	e0f5      	b.n	8012d5a <HAL_RCC_ClockConfig+0x23a>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012b6e:	6862      	ldr	r2, [r4, #4]
 8012b70:	2a01      	cmp	r2, #1
 8012b72:	d009      	beq.n	8012b88 <HAL_RCC_ClockConfig+0x68>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012b74:	2a02      	cmp	r2, #2
 8012b76:	d02b      	beq.n	8012bd0 <HAL_RCC_ClockConfig+0xb0>
          return HAL_ERROR;
        }
      }
#if defined(RCC_CR2_HSI48ON)
      /* HSI48 is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012b78:	2a03      	cmp	r2, #3
 8012b7a:	d02f      	beq.n	8012bdc <HAL_RCC_ClockConfig+0xbc>
#endif /* RCC_CR2_HSI48ON */
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012b7c:	4b83      	ldr	r3, [pc, #524]	; (8012d8c <HAL_RCC_ClockConfig+0x26c>)
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	079b      	lsls	r3, r3, #30
 8012b82:	d406      	bmi.n	8012b92 <HAL_RCC_ClockConfig+0x72>
        {
          return HAL_ERROR;
 8012b84:	2001      	movs	r0, #1
 8012b86:	e0f6      	b.n	8012d76 <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012b88:	4b80      	ldr	r3, [pc, #512]	; (8012d8c <HAL_RCC_ClockConfig+0x26c>)
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	039b      	lsls	r3, r3, #14
 8012b8e:	d400      	bmi.n	8012b92 <HAL_RCC_ClockConfig+0x72>
 8012b90:	e0f5      	b.n	8012d7e <HAL_RCC_ClockConfig+0x25e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012b92:	497e      	ldr	r1, [pc, #504]	; (8012d8c <HAL_RCC_ClockConfig+0x26c>)
 8012b94:	684b      	ldr	r3, [r1, #4]
 8012b96:	2003      	movs	r0, #3
 8012b98:	4383      	bics	r3, r0
 8012b9a:	4313      	orrs	r3, r2
 8012b9c:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012b9e:	f7fe f81b 	bl	8010bd8 <HAL_GetTick>
 8012ba2:	0005      	movs	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012ba4:	6863      	ldr	r3, [r4, #4]
 8012ba6:	2b01      	cmp	r3, #1
 8012ba8:	d01e      	beq.n	8012be8 <HAL_RCC_ClockConfig+0xc8>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012baa:	2b02      	cmp	r3, #2
 8012bac:	d02c      	beq.n	8012c08 <HAL_RCC_ClockConfig+0xe8>
            return HAL_TIMEOUT;
          }
        }
      }
#if defined(RCC_CR2_HSI48ON)
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012bae:	2b03      	cmp	r3, #3
 8012bb0:	d03a      	beq.n	8012c28 <HAL_RCC_ClockConfig+0x108>
        }
      }
#endif /* RCC_CR2_HSI48ON */
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012bb2:	4f76      	ldr	r7, [pc, #472]	; (8012d8c <HAL_RCC_ClockConfig+0x26c>)
 8012bb4:	260c      	movs	r6, #12
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012bb6:	4b76      	ldr	r3, [pc, #472]	; (8012d90 <HAL_RCC_ClockConfig+0x270>)
 8012bb8:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	421e      	tst	r6, r3
 8012bbe:	d100      	bne.n	8012bc2 <HAL_RCC_ClockConfig+0xa2>
 8012bc0:	e0cb      	b.n	8012d5a <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012bc2:	f7fe f809 	bl	8010bd8 <HAL_GetTick>
 8012bc6:	1b40      	subs	r0, r0, r5
 8012bc8:	4540      	cmp	r0, r8
 8012bca:	d9f6      	bls.n	8012bba <HAL_RCC_ClockConfig+0x9a>
          {
            return HAL_TIMEOUT;
 8012bcc:	2003      	movs	r0, #3
 8012bce:	e0d2      	b.n	8012d76 <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012bd0:	4b6e      	ldr	r3, [pc, #440]	; (8012d8c <HAL_RCC_ClockConfig+0x26c>)
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	019b      	lsls	r3, r3, #6
 8012bd6:	d4dc      	bmi.n	8012b92 <HAL_RCC_ClockConfig+0x72>
          return HAL_ERROR;
 8012bd8:	2001      	movs	r0, #1
 8012bda:	e0cc      	b.n	8012d76 <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012bdc:	4b6b      	ldr	r3, [pc, #428]	; (8012d8c <HAL_RCC_ClockConfig+0x26c>)
 8012bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012be0:	03db      	lsls	r3, r3, #15
 8012be2:	d4d6      	bmi.n	8012b92 <HAL_RCC_ClockConfig+0x72>
          return HAL_ERROR;
 8012be4:	2001      	movs	r0, #1
 8012be6:	e0c6      	b.n	8012d76 <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012be8:	4f68      	ldr	r7, [pc, #416]	; (8012d8c <HAL_RCC_ClockConfig+0x26c>)
 8012bea:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012bec:	4b68      	ldr	r3, [pc, #416]	; (8012d90 <HAL_RCC_ClockConfig+0x270>)
 8012bee:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	4033      	ands	r3, r6
 8012bf4:	2b04      	cmp	r3, #4
 8012bf6:	d100      	bne.n	8012bfa <HAL_RCC_ClockConfig+0xda>
 8012bf8:	e0af      	b.n	8012d5a <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012bfa:	f7fd ffed 	bl	8010bd8 <HAL_GetTick>
 8012bfe:	1b40      	subs	r0, r0, r5
 8012c00:	4540      	cmp	r0, r8
 8012c02:	d9f5      	bls.n	8012bf0 <HAL_RCC_ClockConfig+0xd0>
            return HAL_TIMEOUT;
 8012c04:	2003      	movs	r0, #3
 8012c06:	e0b6      	b.n	8012d76 <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012c08:	4f60      	ldr	r7, [pc, #384]	; (8012d8c <HAL_RCC_ClockConfig+0x26c>)
 8012c0a:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012c0c:	4b60      	ldr	r3, [pc, #384]	; (8012d90 <HAL_RCC_ClockConfig+0x270>)
 8012c0e:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	4033      	ands	r3, r6
 8012c14:	2b08      	cmp	r3, #8
 8012c16:	d100      	bne.n	8012c1a <HAL_RCC_ClockConfig+0xfa>
 8012c18:	e09f      	b.n	8012d5a <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012c1a:	f7fd ffdd 	bl	8010bd8 <HAL_GetTick>
 8012c1e:	1b40      	subs	r0, r0, r5
 8012c20:	4540      	cmp	r0, r8
 8012c22:	d9f5      	bls.n	8012c10 <HAL_RCC_ClockConfig+0xf0>
            return HAL_TIMEOUT;
 8012c24:	2003      	movs	r0, #3
 8012c26:	e0a6      	b.n	8012d76 <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012c28:	4f58      	ldr	r7, [pc, #352]	; (8012d8c <HAL_RCC_ClockConfig+0x26c>)
 8012c2a:	260c      	movs	r6, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012c2c:	4b58      	ldr	r3, [pc, #352]	; (8012d90 <HAL_RCC_ClockConfig+0x270>)
 8012c2e:	4698      	mov	r8, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	4033      	ands	r3, r6
 8012c34:	2b0c      	cmp	r3, #12
 8012c36:	d100      	bne.n	8012c3a <HAL_RCC_ClockConfig+0x11a>
 8012c38:	e08f      	b.n	8012d5a <HAL_RCC_ClockConfig+0x23a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012c3a:	f7fd ffcd 	bl	8010bd8 <HAL_GetTick>
 8012c3e:	1b40      	subs	r0, r0, r5
 8012c40:	4540      	cmp	r0, r8
 8012c42:	d9f5      	bls.n	8012c30 <HAL_RCC_ClockConfig+0x110>
            return HAL_TIMEOUT;
 8012c44:	2003      	movs	r0, #3
 8012c46:	e096      	b.n	8012d76 <HAL_RCC_ClockConfig+0x256>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012c48:	6803      	ldr	r3, [r0, #0]
 8012c4a:	079b      	lsls	r3, r3, #30
 8012c4c:	d506      	bpl.n	8012c5c <HAL_RCC_ClockConfig+0x13c>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012c4e:	4a4f      	ldr	r2, [pc, #316]	; (8012d8c <HAL_RCC_ClockConfig+0x26c>)
 8012c50:	6853      	ldr	r3, [r2, #4]
 8012c52:	21f0      	movs	r1, #240	; 0xf0
 8012c54:	438b      	bics	r3, r1
 8012c56:	6881      	ldr	r1, [r0, #8]
 8012c58:	430b      	orrs	r3, r1
 8012c5a:	6053      	str	r3, [r2, #4]
    }
    
    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012c5c:	6823      	ldr	r3, [r4, #0]
 8012c5e:	07db      	lsls	r3, r3, #31
 8012c60:	d570      	bpl.n	8012d44 <HAL_RCC_ClockConfig+0x224>
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012c62:	6862      	ldr	r2, [r4, #4]
 8012c64:	2a01      	cmp	r2, #1
 8012c66:	d009      	beq.n	8012c7c <HAL_RCC_ClockConfig+0x15c>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012c68:	2a02      	cmp	r2, #2
 8012c6a:	d02c      	beq.n	8012cc6 <HAL_RCC_ClockConfig+0x1a6>
          return HAL_ERROR;
        }
      }
#if defined(RCC_CR2_HSI48ON)
      /* HSI48 is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012c6c:	2a03      	cmp	r2, #3
 8012c6e:	d030      	beq.n	8012cd2 <HAL_RCC_ClockConfig+0x1b2>
#endif /* RCC_CR2_HSI48ON */
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012c70:	4b46      	ldr	r3, [pc, #280]	; (8012d8c <HAL_RCC_ClockConfig+0x26c>)
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	079b      	lsls	r3, r3, #30
 8012c76:	d406      	bmi.n	8012c86 <HAL_RCC_ClockConfig+0x166>
        {
          return HAL_ERROR;
 8012c78:	2001      	movs	r0, #1
 8012c7a:	e07c      	b.n	8012d76 <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012c7c:	4b43      	ldr	r3, [pc, #268]	; (8012d8c <HAL_RCC_ClockConfig+0x26c>)
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	039b      	lsls	r3, r3, #14
 8012c82:	d400      	bmi.n	8012c86 <HAL_RCC_ClockConfig+0x166>
 8012c84:	e07d      	b.n	8012d82 <HAL_RCC_ClockConfig+0x262>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8012c86:	4941      	ldr	r1, [pc, #260]	; (8012d8c <HAL_RCC_ClockConfig+0x26c>)
 8012c88:	684b      	ldr	r3, [r1, #4]
 8012c8a:	2003      	movs	r0, #3
 8012c8c:	4383      	bics	r3, r0
 8012c8e:	4313      	orrs	r3, r2
 8012c90:	604b      	str	r3, [r1, #4]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012c92:	f7fd ffa1 	bl	8010bd8 <HAL_GetTick>
 8012c96:	0006      	movs	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012c98:	6863      	ldr	r3, [r4, #4]
 8012c9a:	2b01      	cmp	r3, #1
 8012c9c:	d01f      	beq.n	8012cde <HAL_RCC_ClockConfig+0x1be>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8012c9e:	2b02      	cmp	r3, #2
 8012ca0:	d02e      	beq.n	8012d00 <HAL_RCC_ClockConfig+0x1e0>
            return HAL_TIMEOUT;
          }
        }
      }
#if defined(RCC_CR2_HSI48ON)
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8012ca2:	2b03      	cmp	r3, #3
 8012ca4:	d03d      	beq.n	8012d22 <HAL_RCC_ClockConfig+0x202>
        }
      }
#endif /* RCC_CR2_HSI48ON */
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012ca6:	4b39      	ldr	r3, [pc, #228]	; (8012d8c <HAL_RCC_ClockConfig+0x26c>)
 8012ca8:	4698      	mov	r8, r3
 8012caa:	270c      	movs	r7, #12
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012cac:	4b38      	ldr	r3, [pc, #224]	; (8012d90 <HAL_RCC_ClockConfig+0x270>)
 8012cae:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8012cb0:	4643      	mov	r3, r8
 8012cb2:	685b      	ldr	r3, [r3, #4]
 8012cb4:	421f      	tst	r7, r3
 8012cb6:	d045      	beq.n	8012d44 <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012cb8:	f7fd ff8e 	bl	8010bd8 <HAL_GetTick>
 8012cbc:	1b80      	subs	r0, r0, r6
 8012cbe:	4548      	cmp	r0, r9
 8012cc0:	d9f6      	bls.n	8012cb0 <HAL_RCC_ClockConfig+0x190>
          {
            return HAL_TIMEOUT;
 8012cc2:	2003      	movs	r0, #3
 8012cc4:	e057      	b.n	8012d76 <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012cc6:	4b31      	ldr	r3, [pc, #196]	; (8012d8c <HAL_RCC_ClockConfig+0x26c>)
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	019b      	lsls	r3, r3, #6
 8012ccc:	d4db      	bmi.n	8012c86 <HAL_RCC_ClockConfig+0x166>
          return HAL_ERROR;
 8012cce:	2001      	movs	r0, #1
 8012cd0:	e051      	b.n	8012d76 <HAL_RCC_ClockConfig+0x256>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8012cd2:	4b2e      	ldr	r3, [pc, #184]	; (8012d8c <HAL_RCC_ClockConfig+0x26c>)
 8012cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012cd6:	03db      	lsls	r3, r3, #15
 8012cd8:	d4d5      	bmi.n	8012c86 <HAL_RCC_ClockConfig+0x166>
          return HAL_ERROR;
 8012cda:	2001      	movs	r0, #1
 8012cdc:	e04b      	b.n	8012d76 <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012cde:	4b2b      	ldr	r3, [pc, #172]	; (8012d8c <HAL_RCC_ClockConfig+0x26c>)
 8012ce0:	4698      	mov	r8, r3
 8012ce2:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012ce4:	4b2a      	ldr	r3, [pc, #168]	; (8012d90 <HAL_RCC_ClockConfig+0x270>)
 8012ce6:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8012ce8:	4643      	mov	r3, r8
 8012cea:	685b      	ldr	r3, [r3, #4]
 8012cec:	403b      	ands	r3, r7
 8012cee:	2b04      	cmp	r3, #4
 8012cf0:	d028      	beq.n	8012d44 <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012cf2:	f7fd ff71 	bl	8010bd8 <HAL_GetTick>
 8012cf6:	1b80      	subs	r0, r0, r6
 8012cf8:	4548      	cmp	r0, r9
 8012cfa:	d9f5      	bls.n	8012ce8 <HAL_RCC_ClockConfig+0x1c8>
            return HAL_TIMEOUT;
 8012cfc:	2003      	movs	r0, #3
 8012cfe:	e03a      	b.n	8012d76 <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012d00:	4b22      	ldr	r3, [pc, #136]	; (8012d8c <HAL_RCC_ClockConfig+0x26c>)
 8012d02:	4698      	mov	r8, r3
 8012d04:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012d06:	4b22      	ldr	r3, [pc, #136]	; (8012d90 <HAL_RCC_ClockConfig+0x270>)
 8012d08:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8012d0a:	4643      	mov	r3, r8
 8012d0c:	685b      	ldr	r3, [r3, #4]
 8012d0e:	403b      	ands	r3, r7
 8012d10:	2b08      	cmp	r3, #8
 8012d12:	d017      	beq.n	8012d44 <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012d14:	f7fd ff60 	bl	8010bd8 <HAL_GetTick>
 8012d18:	1b80      	subs	r0, r0, r6
 8012d1a:	4548      	cmp	r0, r9
 8012d1c:	d9f5      	bls.n	8012d0a <HAL_RCC_ClockConfig+0x1ea>
            return HAL_TIMEOUT;
 8012d1e:	2003      	movs	r0, #3
 8012d20:	e029      	b.n	8012d76 <HAL_RCC_ClockConfig+0x256>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012d22:	4b1a      	ldr	r3, [pc, #104]	; (8012d8c <HAL_RCC_ClockConfig+0x26c>)
 8012d24:	4698      	mov	r8, r3
 8012d26:	270c      	movs	r7, #12
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012d28:	4b19      	ldr	r3, [pc, #100]	; (8012d90 <HAL_RCC_ClockConfig+0x270>)
 8012d2a:	4699      	mov	r9, r3
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8012d2c:	4643      	mov	r3, r8
 8012d2e:	685b      	ldr	r3, [r3, #4]
 8012d30:	403b      	ands	r3, r7
 8012d32:	2b0c      	cmp	r3, #12
 8012d34:	d006      	beq.n	8012d44 <HAL_RCC_ClockConfig+0x224>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012d36:	f7fd ff4f 	bl	8010bd8 <HAL_GetTick>
 8012d3a:	1b80      	subs	r0, r0, r6
 8012d3c:	4548      	cmp	r0, r9
 8012d3e:	d9f5      	bls.n	8012d2c <HAL_RCC_ClockConfig+0x20c>
            return HAL_TIMEOUT;
 8012d40:	2003      	movs	r0, #3
 8012d42:	e018      	b.n	8012d76 <HAL_RCC_ClockConfig+0x256>
        }
      }      
    } 
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012d44:	4910      	ldr	r1, [pc, #64]	; (8012d88 <HAL_RCC_ClockConfig+0x268>)
 8012d46:	680b      	ldr	r3, [r1, #0]
 8012d48:	2201      	movs	r2, #1
 8012d4a:	4393      	bics	r3, r2
 8012d4c:	432b      	orrs	r3, r5
 8012d4e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012d50:	680b      	ldr	r3, [r1, #0]
 8012d52:	401a      	ands	r2, r3
    {
      return HAL_ERROR;
 8012d54:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8012d56:	42aa      	cmp	r2, r5
 8012d58:	d10d      	bne.n	8012d76 <HAL_RCC_ClockConfig+0x256>
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012d5a:	6823      	ldr	r3, [r4, #0]
 8012d5c:	075b      	lsls	r3, r3, #29
 8012d5e:	d506      	bpl.n	8012d6e <HAL_RCC_ClockConfig+0x24e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8012d60:	4a0a      	ldr	r2, [pc, #40]	; (8012d8c <HAL_RCC_ClockConfig+0x26c>)
 8012d62:	6853      	ldr	r3, [r2, #4]
 8012d64:	490b      	ldr	r1, [pc, #44]	; (8012d94 <HAL_RCC_ClockConfig+0x274>)
 8012d66:	400b      	ands	r3, r1
 8012d68:	68e1      	ldr	r1, [r4, #12]
 8012d6a:	430b      	orrs	r3, r1
 8012d6c:	6053      	str	r3, [r2, #4]
  }
  
  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8012d6e:	2000      	movs	r0, #0
 8012d70:	f7fd ff08 	bl	8010b84 <HAL_InitTick>
  
  return HAL_OK;
 8012d74:	2000      	movs	r0, #0
}
 8012d76:	bcc0      	pop	{r6, r7}
 8012d78:	46b9      	mov	r9, r7
 8012d7a:	46b0      	mov	r8, r6
 8012d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return HAL_ERROR;
 8012d7e:	2001      	movs	r0, #1
 8012d80:	e7f9      	b.n	8012d76 <HAL_RCC_ClockConfig+0x256>
          return HAL_ERROR;
 8012d82:	2001      	movs	r0, #1
 8012d84:	e7f7      	b.n	8012d76 <HAL_RCC_ClockConfig+0x256>
 8012d86:	46c0      	nop			; (mov r8, r8)
 8012d88:	40022000 	.word	0x40022000
 8012d8c:	40021000 	.word	0x40021000
 8012d90:	00001388 	.word	0x00001388
 8012d94:	fffff8ff 	.word	0xfffff8ff

08012d98 <HAL_RCC_GetSysClockFreq>:
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012d98:	b510      	push	{r4, lr}
 8012d9a:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9,
 8012d9c:	aa04      	add	r2, sp, #16
 8012d9e:	4b20      	ldr	r3, [pc, #128]	; (8012e20 <HAL_RCC_GetSysClockFreq+0x88>)
 8012da0:	cb13      	ldmia	r3!, {r0, r1, r4}
 8012da2:	c213      	stmia	r2!, {r0, r1, r4}
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	6013      	str	r3, [r2, #0]
                                         10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8,
 8012da8:	466a      	mov	r2, sp
 8012daa:	4b1e      	ldr	r3, [pc, #120]	; (8012e24 <HAL_RCC_GetSysClockFreq+0x8c>)
 8012dac:	cb13      	ldmia	r3!, {r0, r1, r4}
 8012dae:	c213      	stmia	r2!, {r0, r1, r4}
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	6013      	str	r3, [r2, #0]
                                           9,10, 11, 12, 13, 14, 15, 16};

  uint32_t tmpreg = 0, prediv = 0, pllclk = 0, pllmul = 0;
  uint32_t sysclockfreq = 0;
  
  tmpreg = RCC->CFGR;
 8012db4:	4b1c      	ldr	r3, [pc, #112]	; (8012e28 <HAL_RCC_GetSysClockFreq+0x90>)
 8012db6:	685b      	ldr	r3, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8012db8:	200c      	movs	r0, #12
 8012dba:	4018      	ands	r0, r3
 8012dbc:	2808      	cmp	r0, #8
 8012dbe:	d00a      	beq.n	8012dd6 <HAL_RCC_GetSysClockFreq+0x3e>
 8012dc0:	380c      	subs	r0, #12
 8012dc2:	1e43      	subs	r3, r0, #1
 8012dc4:	4198      	sbcs	r0, r3
 8012dc6:	4240      	negs	r0, r0
 8012dc8:	4b18      	ldr	r3, [pc, #96]	; (8012e2c <HAL_RCC_GetSysClockFreq+0x94>)
 8012dca:	4018      	ands	r0, r3
 8012dcc:	4b18      	ldr	r3, [pc, #96]	; (8012e30 <HAL_RCC_GetSysClockFreq+0x98>)
 8012dce:	469c      	mov	ip, r3
 8012dd0:	4460      	add	r0, ip
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8012dd2:	b008      	add	sp, #32
 8012dd4:	bd10      	pop	{r4, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8012dd6:	0c99      	lsrs	r1, r3, #18
 8012dd8:	220f      	movs	r2, #15
 8012dda:	4011      	ands	r1, r2
 8012ddc:	a804      	add	r0, sp, #16
 8012dde:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8012de0:	4911      	ldr	r1, [pc, #68]	; (8012e28 <HAL_RCC_GetSysClockFreq+0x90>)
 8012de2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8012de4:	400a      	ands	r2, r1
 8012de6:	4669      	mov	r1, sp
 8012de8:	5c89      	ldrb	r1, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8012dea:	22c0      	movs	r2, #192	; 0xc0
 8012dec:	0252      	lsls	r2, r2, #9
 8012dee:	4013      	ands	r3, r2
 8012df0:	2280      	movs	r2, #128	; 0x80
 8012df2:	0252      	lsls	r2, r2, #9
 8012df4:	4293      	cmp	r3, r2
 8012df6:	d008      	beq.n	8012e0a <HAL_RCC_GetSysClockFreq+0x72>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8012df8:	22c0      	movs	r2, #192	; 0xc0
 8012dfa:	0252      	lsls	r2, r2, #9
 8012dfc:	4293      	cmp	r3, r2
 8012dfe:	d009      	beq.n	8012e14 <HAL_RCC_GetSysClockFreq+0x7c>
        pllclk = (HSI_VALUE/prediv) * pllmul;
 8012e00:	480c      	ldr	r0, [pc, #48]	; (8012e34 <HAL_RCC_GetSysClockFreq+0x9c>)
 8012e02:	f7ed f9a5 	bl	8000150 <__udivsi3>
 8012e06:	4360      	muls	r0, r4
 8012e08:	e7e3      	b.n	8012dd2 <HAL_RCC_GetSysClockFreq+0x3a>
        pllclk = (HSE_VALUE/prediv) * pllmul;
 8012e0a:	480a      	ldr	r0, [pc, #40]	; (8012e34 <HAL_RCC_GetSysClockFreq+0x9c>)
 8012e0c:	f7ed f9a0 	bl	8000150 <__udivsi3>
 8012e10:	4360      	muls	r0, r4
 8012e12:	e7de      	b.n	8012dd2 <HAL_RCC_GetSysClockFreq+0x3a>
        pllclk = (HSI48_VALUE/prediv) * pllmul;
 8012e14:	4806      	ldr	r0, [pc, #24]	; (8012e30 <HAL_RCC_GetSysClockFreq+0x98>)
 8012e16:	f7ed f99b 	bl	8000150 <__udivsi3>
 8012e1a:	4360      	muls	r0, r4
 8012e1c:	e7d9      	b.n	8012dd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8012e1e:	46c0      	nop			; (mov r8, r8)
 8012e20:	0801d658 	.word	0x0801d658
 8012e24:	0801d66c 	.word	0x0801d66c
 8012e28:	40021000 	.word	0x40021000
 8012e2c:	fd9da600 	.word	0xfd9da600
 8012e30:	02dc6c00 	.word	0x02dc6c00
 8012e34:	007a1200 	.word	0x007a1200

08012e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8012e38:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8012e3a:	f7ff ffad 	bl	8012d98 <HAL_RCC_GetSysClockFreq>
 8012e3e:	4b05      	ldr	r3, [pc, #20]	; (8012e54 <HAL_RCC_GetHCLKFreq+0x1c>)
 8012e40:	685b      	ldr	r3, [r3, #4]
 8012e42:	061b      	lsls	r3, r3, #24
 8012e44:	0f1b      	lsrs	r3, r3, #28
 8012e46:	4a04      	ldr	r2, [pc, #16]	; (8012e58 <HAL_RCC_GetHCLKFreq+0x20>)
 8012e48:	5cd3      	ldrb	r3, [r2, r3]
 8012e4a:	40d8      	lsrs	r0, r3
 8012e4c:	4b03      	ldr	r3, [pc, #12]	; (8012e5c <HAL_RCC_GetHCLKFreq+0x24>)
 8012e4e:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8012e50:	bd10      	pop	{r4, pc}
 8012e52:	46c0      	nop			; (mov r8, r8)
 8012e54:	40021000 	.word	0x40021000
 8012e58:	0801d680 	.word	0x0801d680
 8012e5c:	20000178 	.word	0x20000178

08012e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8012e60:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> aAPBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE)>> RCC_CFGR_PPRE_BITNUMBER]);
 8012e62:	f7ff ffe9 	bl	8012e38 <HAL_RCC_GetHCLKFreq>
 8012e66:	4b04      	ldr	r3, [pc, #16]	; (8012e78 <HAL_RCC_GetPCLK1Freq+0x18>)
 8012e68:	685b      	ldr	r3, [r3, #4]
 8012e6a:	055b      	lsls	r3, r3, #21
 8012e6c:	0f5b      	lsrs	r3, r3, #29
 8012e6e:	4a03      	ldr	r2, [pc, #12]	; (8012e7c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8012e70:	5cd3      	ldrb	r3, [r2, r3]
 8012e72:	40d8      	lsrs	r0, r3
}    
 8012e74:	bd10      	pop	{r4, pc}
 8012e76:	46c0      	nop			; (mov r8, r8)
 8012e78:	40021000 	.word	0x40021000
 8012e7c:	0801d680 	.word	0x0801d680

08012e80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval None
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e82:	46c6      	mov	lr, r8
 8012e84:	b500      	push	{lr}
 8012e86:	b082      	sub	sp, #8
 8012e88:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8012e8a:	6803      	ldr	r3, [r0, #0]
 8012e8c:	03db      	lsls	r3, r3, #15
 8012e8e:	d507      	bpl.n	8012ea0 <HAL_RCCEx_PeriphCLKConfig+0x20>
  {
    /* Reset the Backup domain only if the RTC Clock source selction is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8012e90:	4b43      	ldr	r3, [pc, #268]	; (8012fa0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012e92:	6a1b      	ldr	r3, [r3, #32]
 8012e94:	6842      	ldr	r2, [r0, #4]
 8012e96:	4053      	eors	r3, r2
 8012e98:	22c0      	movs	r2, #192	; 0xc0
 8012e9a:	0092      	lsls	r2, r2, #2
 8012e9c:	4213      	tst	r3, r2
 8012e9e:	d136      	bne.n	8012f0e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
    }
  }
  
  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8012ea0:	6823      	ldr	r3, [r4, #0]
 8012ea2:	07db      	lsls	r3, r3, #31
 8012ea4:	d506      	bpl.n	8012eb4 <HAL_RCCEx_PeriphCLKConfig+0x34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8012ea6:	4a3e      	ldr	r2, [pc, #248]	; (8012fa0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012ea8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012eaa:	2103      	movs	r1, #3
 8012eac:	438b      	bics	r3, r1
 8012eae:	68a1      	ldr	r1, [r4, #8]
 8012eb0:	430b      	orrs	r3, r1
 8012eb2:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8012eb4:	6823      	ldr	r3, [r4, #0]
 8012eb6:	079b      	lsls	r3, r3, #30
 8012eb8:	d506      	bpl.n	8012ec8 <HAL_RCCEx_PeriphCLKConfig+0x48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8012eba:	4a39      	ldr	r2, [pc, #228]	; (8012fa0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012ebc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012ebe:	4939      	ldr	r1, [pc, #228]	; (8012fa4 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8012ec0:	400b      	ands	r3, r1
 8012ec2:	68e1      	ldr	r1, [r4, #12]
 8012ec4:	430b      	orrs	r3, r1
 8012ec6:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8012ec8:	6823      	ldr	r3, [r4, #0]
 8012eca:	035b      	lsls	r3, r3, #13
 8012ecc:	d506      	bpl.n	8012edc <HAL_RCCEx_PeriphCLKConfig+0x5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8012ece:	4a34      	ldr	r2, [pc, #208]	; (8012fa0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012ed0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012ed2:	4935      	ldr	r1, [pc, #212]	; (8012fa8 <HAL_RCCEx_PeriphCLKConfig+0x128>)
 8012ed4:	400b      	ands	r3, r1
 8012ed6:	6921      	ldr	r1, [r4, #16]
 8012ed8:	430b      	orrs	r3, r1
 8012eda:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8012edc:	6823      	ldr	r3, [r4, #0]
 8012ede:	069b      	lsls	r3, r3, #26
 8012ee0:	d506      	bpl.n	8012ef0 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8012ee2:	4a2f      	ldr	r2, [pc, #188]	; (8012fa0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012ee4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012ee6:	2110      	movs	r1, #16
 8012ee8:	438b      	bics	r3, r1
 8012eea:	6961      	ldr	r1, [r4, #20]
 8012eec:	430b      	orrs	r3, r1
 8012eee:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8012ef0:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8012ef2:	6823      	ldr	r3, [r4, #0]
 8012ef4:	055b      	lsls	r3, r3, #21
 8012ef6:	d506      	bpl.n	8012f06 <HAL_RCCEx_PeriphCLKConfig+0x86>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8012ef8:	4a29      	ldr	r2, [pc, #164]	; (8012fa0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012efa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8012efc:	2140      	movs	r1, #64	; 0x40
 8012efe:	438b      	bics	r3, r1
 8012f00:	69a1      	ldr	r1, [r4, #24]
 8012f02:	430b      	orrs	r3, r1
 8012f04:	6313      	str	r3, [r2, #48]	; 0x30
}
 8012f06:	b002      	add	sp, #8
 8012f08:	bc80      	pop	{r7}
 8012f0a:	46b8      	mov	r8, r7
 8012f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8012f0e:	4a24      	ldr	r2, [pc, #144]	; (8012fa0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012f10:	69d1      	ldr	r1, [r2, #28]
 8012f12:	2080      	movs	r0, #128	; 0x80
 8012f14:	0540      	lsls	r0, r0, #21
 8012f16:	4301      	orrs	r1, r0
 8012f18:	61d1      	str	r1, [r2, #28]
 8012f1a:	69d3      	ldr	r3, [r2, #28]
 8012f1c:	4003      	ands	r3, r0
 8012f1e:	9301      	str	r3, [sp, #4]
 8012f20:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012f22:	4a22      	ldr	r2, [pc, #136]	; (8012fac <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8012f24:	6811      	ldr	r1, [r2, #0]
 8012f26:	2380      	movs	r3, #128	; 0x80
 8012f28:	005b      	lsls	r3, r3, #1
 8012f2a:	430b      	orrs	r3, r1
 8012f2c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8012f2e:	f7fd fe53 	bl	8010bd8 <HAL_GetTick>
 8012f32:	0005      	movs	r5, r0
      while((PWR->CR & PWR_CR_DBP) == RESET)
 8012f34:	4f1d      	ldr	r7, [pc, #116]	; (8012fac <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8012f36:	2680      	movs	r6, #128	; 0x80
 8012f38:	0076      	lsls	r6, r6, #1
 8012f3a:	683b      	ldr	r3, [r7, #0]
 8012f3c:	4233      	tst	r3, r6
 8012f3e:	d106      	bne.n	8012f4e <HAL_RCCEx_PeriphCLKConfig+0xce>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012f40:	f7fd fe4a 	bl	8010bd8 <HAL_GetTick>
 8012f44:	1b40      	subs	r0, r0, r5
 8012f46:	2864      	cmp	r0, #100	; 0x64
 8012f48:	d9f7      	bls.n	8012f3a <HAL_RCCEx_PeriphCLKConfig+0xba>
          return HAL_TIMEOUT;
 8012f4a:	2003      	movs	r0, #3
 8012f4c:	e7db      	b.n	8012f06 <HAL_RCCEx_PeriphCLKConfig+0x86>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8012f4e:	4b14      	ldr	r3, [pc, #80]	; (8012fa0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012f50:	6a18      	ldr	r0, [r3, #32]
 8012f52:	4a17      	ldr	r2, [pc, #92]	; (8012fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8012f54:	4002      	ands	r2, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 8012f56:	6a1d      	ldr	r5, [r3, #32]
 8012f58:	2180      	movs	r1, #128	; 0x80
 8012f5a:	0249      	lsls	r1, r1, #9
 8012f5c:	4329      	orrs	r1, r5
 8012f5e:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8012f60:	6a19      	ldr	r1, [r3, #32]
 8012f62:	4d14      	ldr	r5, [pc, #80]	; (8012fb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8012f64:	4029      	ands	r1, r5
 8012f66:	6219      	str	r1, [r3, #32]
      RCC->BDCR = temp_reg;
 8012f68:	621a      	str	r2, [r3, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY))
 8012f6a:	0783      	lsls	r3, r0, #30
 8012f6c:	d407      	bmi.n	8012f7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8012f6e:	4a0c      	ldr	r2, [pc, #48]	; (8012fa0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012f70:	6a13      	ldr	r3, [r2, #32]
 8012f72:	490f      	ldr	r1, [pc, #60]	; (8012fb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8012f74:	400b      	ands	r3, r1
 8012f76:	6861      	ldr	r1, [r4, #4]
 8012f78:	430b      	orrs	r3, r1
 8012f7a:	6213      	str	r3, [r2, #32]
 8012f7c:	e790      	b.n	8012ea0 <HAL_RCCEx_PeriphCLKConfig+0x20>
        tickstart = HAL_GetTick();
 8012f7e:	f7fd fe2b 	bl	8010bd8 <HAL_GetTick>
 8012f82:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012f84:	4f06      	ldr	r7, [pc, #24]	; (8012fa0 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8012f86:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012f88:	4b0b      	ldr	r3, [pc, #44]	; (8012fb8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8012f8a:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012f8c:	6a3b      	ldr	r3, [r7, #32]
 8012f8e:	421e      	tst	r6, r3
 8012f90:	d1ed      	bne.n	8012f6e <HAL_RCCEx_PeriphCLKConfig+0xee>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012f92:	f7fd fe21 	bl	8010bd8 <HAL_GetTick>
 8012f96:	1b40      	subs	r0, r0, r5
 8012f98:	4540      	cmp	r0, r8
 8012f9a:	d9f7      	bls.n	8012f8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            return HAL_TIMEOUT;
 8012f9c:	2003      	movs	r0, #3
 8012f9e:	e7b2      	b.n	8012f06 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8012fa0:	40021000 	.word	0x40021000
 8012fa4:	fffcffff 	.word	0xfffcffff
 8012fa8:	fff3ffff 	.word	0xfff3ffff
 8012fac:	40007000 	.word	0x40007000
 8012fb0:	fffffcff 	.word	0xfffffcff
 8012fb4:	fffeffff 	.word	0xfffeffff
 8012fb8:	00001388 	.word	0x00001388

08012fbc <HAL_RTC_MspInit>:
__weak void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_MspInit could be implemented in the user file
   */ 
}
 8012fbc:	4770      	bx	lr

08012fbe <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8012fbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fc0:	0004      	movs	r4, r0
  uint32_t tickstart = 0;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8012fc2:	6802      	ldr	r2, [r0, #0]
 8012fc4:	68d3      	ldr	r3, [r2, #12]
 8012fc6:	21a0      	movs	r1, #160	; 0xa0
 8012fc8:	438b      	bics	r3, r1
 8012fca:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8012fcc:	f7fd fe04 	bl	8010bd8 <HAL_GetTick>
 8012fd0:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8012fd2:	2620      	movs	r6, #32
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012fd4:	27fa      	movs	r7, #250	; 0xfa
 8012fd6:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8012fd8:	6823      	ldr	r3, [r4, #0]
 8012fda:	68db      	ldr	r3, [r3, #12]
 8012fdc:	421e      	tst	r6, r3
 8012fde:	d106      	bne.n	8012fee <HAL_RTC_WaitForSynchro+0x30>
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8012fe0:	f7fd fdfa 	bl	8010bd8 <HAL_GetTick>
 8012fe4:	1b40      	subs	r0, r0, r5
 8012fe6:	42b8      	cmp	r0, r7
 8012fe8:	d9f6      	bls.n	8012fd8 <HAL_RTC_WaitForSynchro+0x1a>
    {       
      return HAL_TIMEOUT;
 8012fea:	2003      	movs	r0, #3
 8012fec:	e000      	b.n	8012ff0 <HAL_RTC_WaitForSynchro+0x32>
    } 
  }

  return HAL_OK;
 8012fee:	2000      	movs	r0, #0
}
 8012ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012ff2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc: RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8012ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ff4:	0004      	movs	r4, r0
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012ff6:	6803      	ldr	r3, [r0, #0]
 8012ff8:	68da      	ldr	r2, [r3, #12]
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8012ffa:	2000      	movs	r0, #0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8012ffc:	0652      	lsls	r2, r2, #25
 8012ffe:	d500      	bpl.n	8013002 <RTC_EnterInitMode+0x10>
}
 8013000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8013002:	2201      	movs	r2, #1
 8013004:	4252      	negs	r2, r2
 8013006:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8013008:	f7fd fde6 	bl	8010bd8 <HAL_GetTick>
 801300c:	0005      	movs	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 801300e:	2640      	movs	r6, #64	; 0x40
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8013010:	27fa      	movs	r7, #250	; 0xfa
 8013012:	00bf      	lsls	r7, r7, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8013014:	6823      	ldr	r3, [r4, #0]
 8013016:	68db      	ldr	r3, [r3, #12]
 8013018:	421e      	tst	r6, r3
 801301a:	d106      	bne.n	801302a <RTC_EnterInitMode+0x38>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 801301c:	f7fd fddc 	bl	8010bd8 <HAL_GetTick>
 8013020:	1b40      	subs	r0, r0, r5
 8013022:	42b8      	cmp	r0, r7
 8013024:	d9f6      	bls.n	8013014 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8013026:	2003      	movs	r0, #3
 8013028:	e7ea      	b.n	8013000 <RTC_EnterInitMode+0xe>
  return HAL_OK;  
 801302a:	2000      	movs	r0, #0
 801302c:	e7e8      	b.n	8013000 <RTC_EnterInitMode+0xe>
	...

08013030 <HAL_RTC_Init>:
{
 8013030:	b570      	push	{r4, r5, r6, lr}
 8013032:	1e04      	subs	r4, r0, #0
  if(hrtc == NULL)
 8013034:	d046      	beq.n	80130c4 <HAL_RTC_Init+0x94>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8013036:	7f43      	ldrb	r3, [r0, #29]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d013      	beq.n	8013064 <HAL_RTC_Init+0x34>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 801303c:	2302      	movs	r3, #2
 801303e:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013040:	6823      	ldr	r3, [r4, #0]
 8013042:	22ca      	movs	r2, #202	; 0xca
 8013044:	625a      	str	r2, [r3, #36]	; 0x24
 8013046:	6823      	ldr	r3, [r4, #0]
 8013048:	3a77      	subs	r2, #119	; 0x77
 801304a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 801304c:	0020      	movs	r0, r4
 801304e:	f7ff ffd0 	bl	8012ff2 <RTC_EnterInitMode>
 8013052:	2800      	cmp	r0, #0
 8013054:	d00a      	beq.n	801306c <HAL_RTC_Init+0x3c>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8013056:	6823      	ldr	r3, [r4, #0]
 8013058:	22ff      	movs	r2, #255	; 0xff
 801305a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 801305c:	2304      	movs	r3, #4
 801305e:	7763      	strb	r3, [r4, #29]
    return HAL_ERROR;
 8013060:	2001      	movs	r0, #1
}
 8013062:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Lock = HAL_UNLOCKED;
 8013064:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8013066:	f7ff ffa9 	bl	8012fbc <HAL_RTC_MspInit>
 801306a:	e7e7      	b.n	801303c <HAL_RTC_Init+0xc>
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801306c:	6822      	ldr	r2, [r4, #0]
 801306e:	6893      	ldr	r3, [r2, #8]
 8013070:	4915      	ldr	r1, [pc, #84]	; (80130c8 <HAL_RTC_Init+0x98>)
 8013072:	400b      	ands	r3, r1
 8013074:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8013076:	6822      	ldr	r2, [r4, #0]
 8013078:	6891      	ldr	r1, [r2, #8]
 801307a:	6863      	ldr	r3, [r4, #4]
 801307c:	6925      	ldr	r5, [r4, #16]
 801307e:	432b      	orrs	r3, r5
 8013080:	6965      	ldr	r5, [r4, #20]
 8013082:	432b      	orrs	r3, r5
 8013084:	430b      	orrs	r3, r1
 8013086:	6093      	str	r3, [r2, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8013088:	6823      	ldr	r3, [r4, #0]
 801308a:	68e2      	ldr	r2, [r4, #12]
 801308c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 801308e:	6822      	ldr	r2, [r4, #0]
 8013090:	6911      	ldr	r1, [r2, #16]
 8013092:	68a3      	ldr	r3, [r4, #8]
 8013094:	041b      	lsls	r3, r3, #16
 8013096:	430b      	orrs	r3, r1
 8013098:	6113      	str	r3, [r2, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 801309a:	6822      	ldr	r2, [r4, #0]
 801309c:	68d3      	ldr	r3, [r2, #12]
 801309e:	2180      	movs	r1, #128	; 0x80
 80130a0:	438b      	bics	r3, r1
 80130a2:	60d3      	str	r3, [r2, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80130a4:	6822      	ldr	r2, [r4, #0]
 80130a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80130a8:	4908      	ldr	r1, [pc, #32]	; (80130cc <HAL_RTC_Init+0x9c>)
 80130aa:	400b      	ands	r3, r1
 80130ac:	6413      	str	r3, [r2, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 80130ae:	6822      	ldr	r2, [r4, #0]
 80130b0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80130b2:	69a1      	ldr	r1, [r4, #24]
 80130b4:	430b      	orrs	r3, r1
 80130b6:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80130b8:	6823      	ldr	r3, [r4, #0]
 80130ba:	22ff      	movs	r2, #255	; 0xff
 80130bc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80130be:	2301      	movs	r3, #1
 80130c0:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 80130c2:	e7ce      	b.n	8013062 <HAL_RTC_Init+0x32>
     return HAL_ERROR;
 80130c4:	2001      	movs	r0, #1
 80130c6:	e7cc      	b.n	8013062 <HAL_RTC_Init+0x32>
 80130c8:	ff8fffbf 	.word	0xff8fffbf
 80130cc:	fffbffff 	.word	0xfffbffff

080130d0 <RTC_ByteToBcd2>:
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0;
  
  while(Value >= 10)
 80130d0:	2809      	cmp	r0, #9
 80130d2:	d909      	bls.n	80130e8 <RTC_ByteToBcd2+0x18>
  uint32_t bcdhigh = 0;
 80130d4:	2300      	movs	r3, #0
  {
    bcdhigh++;
 80130d6:	3301      	adds	r3, #1
    Value -= 10;
 80130d8:	380a      	subs	r0, #10
 80130da:	b2c0      	uxtb	r0, r0
  while(Value >= 10)
 80130dc:	2809      	cmp	r0, #9
 80130de:	d8fa      	bhi.n	80130d6 <RTC_ByteToBcd2+0x6>
  }
  
  return  ((uint8_t)(bcdhigh << 4) | Value);
 80130e0:	011b      	lsls	r3, r3, #4
 80130e2:	4318      	orrs	r0, r3
 80130e4:	b2c0      	uxtb	r0, r0
}
 80130e6:	4770      	bx	lr
  uint32_t bcdhigh = 0;
 80130e8:	2300      	movs	r3, #0
 80130ea:	e7f9      	b.n	80130e0 <RTC_ByteToBcd2+0x10>

080130ec <HAL_RTC_SetTime>:
{
 80130ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130ee:	0004      	movs	r4, r0
 80130f0:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 80130f2:	7f03      	ldrb	r3, [r0, #28]
 80130f4:	2b01      	cmp	r3, #1
 80130f6:	d100      	bne.n	80130fa <HAL_RTC_SetTime+0xe>
 80130f8:	e072      	b.n	80131e0 <HAL_RTC_SetTime+0xf4>
 80130fa:	2301      	movs	r3, #1
 80130fc:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80130fe:	3301      	adds	r3, #1
 8013100:	7743      	strb	r3, [r0, #29]
  if(Format == RTC_FORMAT_BIN)
 8013102:	2a00      	cmp	r2, #0
 8013104:	d144      	bne.n	8013190 <HAL_RTC_SetTime+0xa4>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8013106:	6803      	ldr	r3, [r0, #0]
 8013108:	689b      	ldr	r3, [r3, #8]
 801310a:	065b      	lsls	r3, r3, #25
 801310c:	d401      	bmi.n	8013112 <HAL_RTC_SetTime+0x26>
      sTime->TimeFormat = 0x00;
 801310e:	2300      	movs	r3, #0
 8013110:	720b      	strb	r3, [r1, #8]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8013112:	7830      	ldrb	r0, [r6, #0]
 8013114:	f7ff ffdc 	bl	80130d0 <RTC_ByteToBcd2>
 8013118:	0005      	movs	r5, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 801311a:	7870      	ldrb	r0, [r6, #1]
 801311c:	f7ff ffd8 	bl	80130d0 <RTC_ByteToBcd2>
 8013120:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8013122:	78b0      	ldrb	r0, [r6, #2]
 8013124:	f7ff ffd4 	bl	80130d0 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16));  
 8013128:	7a33      	ldrb	r3, [r6, #8]
 801312a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 801312c:	4303      	orrs	r3, r0
 801312e:	042d      	lsls	r5, r5, #16
 8013130:	431d      	orrs	r5, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8013132:	023f      	lsls	r7, r7, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8013134:	433d      	orrs	r5, r7
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013136:	6823      	ldr	r3, [r4, #0]
 8013138:	22ca      	movs	r2, #202	; 0xca
 801313a:	625a      	str	r2, [r3, #36]	; 0x24
 801313c:	6823      	ldr	r3, [r4, #0]
 801313e:	3a77      	subs	r2, #119	; 0x77
 8013140:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8013142:	0020      	movs	r0, r4
 8013144:	f7ff ff55 	bl	8012ff2 <RTC_EnterInitMode>
 8013148:	1e07      	subs	r7, r0, #0
 801314a:	d132      	bne.n	80131b2 <HAL_RTC_SetTime+0xc6>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801314c:	6823      	ldr	r3, [r4, #0]
 801314e:	4825      	ldr	r0, [pc, #148]	; (80131e4 <HAL_RTC_SetTime+0xf8>)
 8013150:	4005      	ands	r5, r0
 8013152:	601d      	str	r5, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8013154:	6822      	ldr	r2, [r4, #0]
 8013156:	6893      	ldr	r3, [r2, #8]
 8013158:	4923      	ldr	r1, [pc, #140]	; (80131e8 <HAL_RTC_SetTime+0xfc>)
 801315a:	400b      	ands	r3, r1
 801315c:	6093      	str	r3, [r2, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 801315e:	6822      	ldr	r2, [r4, #0]
 8013160:	6891      	ldr	r1, [r2, #8]
 8013162:	68f3      	ldr	r3, [r6, #12]
 8013164:	6930      	ldr	r0, [r6, #16]
 8013166:	4303      	orrs	r3, r0
 8013168:	430b      	orrs	r3, r1
 801316a:	6093      	str	r3, [r2, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 801316c:	6822      	ldr	r2, [r4, #0]
 801316e:	68d3      	ldr	r3, [r2, #12]
 8013170:	2180      	movs	r1, #128	; 0x80
 8013172:	438b      	bics	r3, r1
 8013174:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8013176:	6823      	ldr	r3, [r4, #0]
 8013178:	689b      	ldr	r3, [r3, #8]
 801317a:	069b      	lsls	r3, r3, #26
 801317c:	d522      	bpl.n	80131c4 <HAL_RTC_SetTime+0xd8>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801317e:	6823      	ldr	r3, [r4, #0]
 8013180:	22ff      	movs	r2, #255	; 0xff
 8013182:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8013184:	2301      	movs	r3, #1
 8013186:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8013188:	2300      	movs	r3, #0
 801318a:	7723      	strb	r3, [r4, #28]
}
 801318c:	0038      	movs	r0, r7
 801318e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8013190:	6803      	ldr	r3, [r0, #0]
 8013192:	689b      	ldr	r3, [r3, #8]
 8013194:	065b      	lsls	r3, r3, #25
 8013196:	d401      	bmi.n	801319c <HAL_RTC_SetTime+0xb0>
      sTime->TimeFormat = 0x00;
 8013198:	2300      	movs	r3, #0
 801319a:	720b      	strb	r3, [r1, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 801319c:	7835      	ldrb	r5, [r6, #0]
 801319e:	042d      	lsls	r5, r5, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80131a0:	7870      	ldrb	r0, [r6, #1]
 80131a2:	0200      	lsls	r0, r0, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80131a4:	4305      	orrs	r5, r0
              ((uint32_t)sTime->Seconds) | \
 80131a6:	78b0      	ldrb	r0, [r6, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80131a8:	4305      	orrs	r5, r0
              ((uint32_t)(sTime->TimeFormat) << 16));   
 80131aa:	7a30      	ldrb	r0, [r6, #8]
 80131ac:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80131ae:	4305      	orrs	r5, r0
 80131b0:	e7c1      	b.n	8013136 <HAL_RTC_SetTime+0x4a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80131b2:	6823      	ldr	r3, [r4, #0]
 80131b4:	22ff      	movs	r2, #255	; 0xff
 80131b6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80131b8:	2304      	movs	r3, #4
 80131ba:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80131bc:	2300      	movs	r3, #0
 80131be:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 80131c0:	2701      	movs	r7, #1
 80131c2:	e7e3      	b.n	801318c <HAL_RTC_SetTime+0xa0>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80131c4:	0020      	movs	r0, r4
 80131c6:	f7ff fefa 	bl	8012fbe <HAL_RTC_WaitForSynchro>
 80131ca:	2800      	cmp	r0, #0
 80131cc:	d0d7      	beq.n	801317e <HAL_RTC_SetTime+0x92>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80131ce:	6823      	ldr	r3, [r4, #0]
 80131d0:	22ff      	movs	r2, #255	; 0xff
 80131d2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80131d4:	2304      	movs	r3, #4
 80131d6:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 80131d8:	2300      	movs	r3, #0
 80131da:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 80131dc:	2701      	movs	r7, #1
 80131de:	e7d5      	b.n	801318c <HAL_RTC_SetTime+0xa0>
  __HAL_LOCK(hrtc);
 80131e0:	2702      	movs	r7, #2
 80131e2:	e7d3      	b.n	801318c <HAL_RTC_SetTime+0xa0>
 80131e4:	007f7f7f 	.word	0x007f7f7f
 80131e8:	fffbffff 	.word	0xfffbffff

080131ec <HAL_RTC_SetDate>:
{
 80131ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131ee:	46c6      	mov	lr, r8
 80131f0:	b500      	push	{lr}
 80131f2:	0004      	movs	r4, r0
 80131f4:	000e      	movs	r6, r1
 __HAL_LOCK(hrtc);
 80131f6:	7f03      	ldrb	r3, [r0, #28]
 80131f8:	2b01      	cmp	r3, #1
 80131fa:	d037      	beq.n	801326c <HAL_RTC_SetDate+0x80>
 80131fc:	2301      	movs	r3, #1
 80131fe:	7703      	strb	r3, [r0, #28]
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8013200:	3301      	adds	r3, #1
 8013202:	7743      	strb	r3, [r0, #29]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10) == 0x10))
 8013204:	2a00      	cmp	r2, #0
 8013206:	d133      	bne.n	8013270 <HAL_RTC_SetDate+0x84>
 8013208:	784b      	ldrb	r3, [r1, #1]
 801320a:	06da      	lsls	r2, r3, #27
 801320c:	d503      	bpl.n	8013216 <HAL_RTC_SetDate+0x2a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);
 801320e:	2210      	movs	r2, #16
 8013210:	4393      	bics	r3, r2
 8013212:	330a      	adds	r3, #10
 8013214:	704b      	strb	r3, [r1, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8013216:	78f0      	ldrb	r0, [r6, #3]
 8013218:	f7ff ff5a 	bl	80130d0 <RTC_ByteToBcd2>
 801321c:	0005      	movs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 801321e:	7870      	ldrb	r0, [r6, #1]
 8013220:	f7ff ff56 	bl	80130d0 <RTC_ByteToBcd2>
 8013224:	4680      	mov	r8, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8013226:	78b0      	ldrb	r0, [r6, #2]
 8013228:	f7ff ff52 	bl	80130d0 <RTC_ByteToBcd2>
                 ((uint32_t)sDate->WeekDay << 13));   
 801322c:	7833      	ldrb	r3, [r6, #0]
 801322e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8013230:	4303      	orrs	r3, r0
 8013232:	042d      	lsls	r5, r5, #16
 8013234:	431d      	orrs	r5, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8013236:	4643      	mov	r3, r8
 8013238:	0218      	lsls	r0, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 801323a:	4305      	orrs	r5, r0
 801323c:	e022      	b.n	8013284 <HAL_RTC_SetDate+0x98>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 801323e:	6823      	ldr	r3, [r4, #0]
 8013240:	22ff      	movs	r2, #255	; 0xff
 8013242:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8013244:	2304      	movs	r3, #4
 8013246:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8013248:	2300      	movs	r3, #0
 801324a:	7723      	strb	r3, [r4, #28]
    return HAL_ERROR;
 801324c:	2601      	movs	r6, #1
 801324e:	e038      	b.n	80132c2 <HAL_RTC_SetDate+0xd6>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8013250:	0020      	movs	r0, r4
 8013252:	f7ff feb4 	bl	8012fbe <HAL_RTC_WaitForSynchro>
 8013256:	2800      	cmp	r0, #0
 8013258:	d02c      	beq.n	80132b4 <HAL_RTC_SetDate+0xc8>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 801325a:	6823      	ldr	r3, [r4, #0]
 801325c:	22ff      	movs	r2, #255	; 0xff
 801325e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8013260:	2304      	movs	r3, #4
 8013262:	7763      	strb	r3, [r4, #29]
        __HAL_UNLOCK(hrtc);
 8013264:	2300      	movs	r3, #0
 8013266:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8013268:	2601      	movs	r6, #1
 801326a:	e02a      	b.n	80132c2 <HAL_RTC_SetDate+0xd6>
 __HAL_LOCK(hrtc);
 801326c:	2602      	movs	r6, #2
 801326e:	e028      	b.n	80132c2 <HAL_RTC_SetDate+0xd6>
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8013270:	78cd      	ldrb	r5, [r1, #3]
 8013272:	042d      	lsls	r5, r5, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8013274:	7848      	ldrb	r0, [r1, #1]
 8013276:	0200      	lsls	r0, r0, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8013278:	4305      	orrs	r5, r0
                  ((uint32_t)sDate->Date) | \
 801327a:	7888      	ldrb	r0, [r1, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 801327c:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->WeekDay) << 13));  
 801327e:	7808      	ldrb	r0, [r1, #0]
 8013280:	0340      	lsls	r0, r0, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8013282:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8013284:	6823      	ldr	r3, [r4, #0]
 8013286:	22ca      	movs	r2, #202	; 0xca
 8013288:	625a      	str	r2, [r3, #36]	; 0x24
 801328a:	6823      	ldr	r3, [r4, #0]
 801328c:	3a77      	subs	r2, #119	; 0x77
 801328e:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8013290:	0020      	movs	r0, r4
 8013292:	f7ff feae 	bl	8012ff2 <RTC_EnterInitMode>
 8013296:	1e06      	subs	r6, r0, #0
 8013298:	d1d1      	bne.n	801323e <HAL_RTC_SetDate+0x52>
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801329a:	6823      	ldr	r3, [r4, #0]
 801329c:	480b      	ldr	r0, [pc, #44]	; (80132cc <HAL_RTC_SetDate+0xe0>)
 801329e:	4005      	ands	r5, r0
 80132a0:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80132a2:	6822      	ldr	r2, [r4, #0]
 80132a4:	68d3      	ldr	r3, [r2, #12]
 80132a6:	2180      	movs	r1, #128	; 0x80
 80132a8:	438b      	bics	r3, r1
 80132aa:	60d3      	str	r3, [r2, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80132ac:	6823      	ldr	r3, [r4, #0]
 80132ae:	689b      	ldr	r3, [r3, #8]
 80132b0:	069b      	lsls	r3, r3, #26
 80132b2:	d5cd      	bpl.n	8013250 <HAL_RTC_SetDate+0x64>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 80132b4:	6823      	ldr	r3, [r4, #0]
 80132b6:	22ff      	movs	r2, #255	; 0xff
 80132b8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80132ba:	2301      	movs	r3, #1
 80132bc:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 80132be:	2300      	movs	r3, #0
 80132c0:	7723      	strb	r3, [r4, #28]
}
 80132c2:	0030      	movs	r0, r6
 80132c4:	bc80      	pop	{r7}
 80132c6:	46b8      	mov	r8, r7
 80132c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132ca:	46c0      	nop			; (mov r8, r8)
 80132cc:	00ffff3f 	.word	0x00ffff3f

080132d0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80132d0:	0003      	movs	r3, r0
  uint32_t tmp = 0;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80132d2:	0902      	lsrs	r2, r0, #4
 80132d4:	0090      	lsls	r0, r2, #2
 80132d6:	1880      	adds	r0, r0, r2
 80132d8:	0040      	lsls	r0, r0, #1
  return (tmp + (Value & (uint8_t)0x0F));
 80132da:	220f      	movs	r2, #15
 80132dc:	4013      	ands	r3, r2
 80132de:	18c0      	adds	r0, r0, r3
 80132e0:	b2c0      	uxtb	r0, r0
}
 80132e2:	4770      	bx	lr

080132e4 <HAL_RTC_GetTime>:
{
 80132e4:	b570      	push	{r4, r5, r6, lr}
 80132e6:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80132e8:	6803      	ldr	r3, [r0, #0]
 80132ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132ec:	604b      	str	r3, [r1, #4]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 80132ee:	6803      	ldr	r3, [r0, #0]
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	490e      	ldr	r1, [pc, #56]	; (801332c <HAL_RTC_GetTime+0x48>)
 80132f4:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 80132f6:	0c19      	lsrs	r1, r3, #16
 80132f8:	203f      	movs	r0, #63	; 0x3f
 80132fa:	4008      	ands	r0, r1
 80132fc:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 80132fe:	0a1e      	lsrs	r6, r3, #8
 8013300:	b2f6      	uxtb	r6, r6
 8013302:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8013304:	b2dd      	uxtb	r5, r3
 8013306:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16); 
 8013308:	2340      	movs	r3, #64	; 0x40
 801330a:	400b      	ands	r3, r1
 801330c:	7223      	strb	r3, [r4, #8]
  if(Format == RTC_FORMAT_BIN)
 801330e:	2a00      	cmp	r2, #0
 8013310:	d10a      	bne.n	8013328 <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8013312:	f7ff ffdd 	bl	80132d0 <RTC_Bcd2ToByte>
 8013316:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8013318:	0030      	movs	r0, r6
 801331a:	f7ff ffd9 	bl	80132d0 <RTC_Bcd2ToByte>
 801331e:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8013320:	0028      	movs	r0, r5
 8013322:	f7ff ffd5 	bl	80132d0 <RTC_Bcd2ToByte>
 8013326:	70a0      	strb	r0, [r4, #2]
}
 8013328:	2000      	movs	r0, #0
 801332a:	bd70      	pop	{r4, r5, r6, pc}
 801332c:	007f7f7f 	.word	0x007f7f7f

08013330 <HAL_RTC_GetDate>:
{
 8013330:	b570      	push	{r4, r5, r6, lr}
 8013332:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8013334:	6803      	ldr	r3, [r0, #0]
 8013336:	685b      	ldr	r3, [r3, #4]
 8013338:	490d      	ldr	r1, [pc, #52]	; (8013370 <HAL_RTC_GetDate+0x40>)
 801333a:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 801333c:	0c18      	lsrs	r0, r3, #16
 801333e:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8013340:	04dd      	lsls	r5, r3, #19
 8013342:	0eed      	lsrs	r5, r5, #27
 8013344:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8013346:	b2de      	uxtb	r6, r3
 8013348:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13); 
 801334a:	041b      	lsls	r3, r3, #16
 801334c:	0f5b      	lsrs	r3, r3, #29
 801334e:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8013350:	2a00      	cmp	r2, #0
 8013352:	d10a      	bne.n	801336a <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8013354:	f7ff ffbc 	bl	80132d0 <RTC_Bcd2ToByte>
 8013358:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 801335a:	0028      	movs	r0, r5
 801335c:	f7ff ffb8 	bl	80132d0 <RTC_Bcd2ToByte>
 8013360:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8013362:	0030      	movs	r0, r6
 8013364:	f7ff ffb4 	bl	80132d0 <RTC_Bcd2ToByte>
 8013368:	70a0      	strb	r0, [r4, #2]
}
 801336a:	2000      	movs	r0, #0
 801336c:	bd70      	pop	{r4, r5, r6, pc}
 801336e:	46c0      	nop			; (mov r8, r8)
 8013370:	00ffff3f 	.word	0x00ffff3f

08013374 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8013374:	6803      	ldr	r3, [r0, #0]
 8013376:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8013378:	0089      	lsls	r1, r1, #2
 801337a:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 801337c:	600a      	str	r2, [r1, #0]
}
 801337e:	4770      	bx	lr

08013380 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp = 0;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8013380:	6803      	ldr	r3, [r0, #0]
 8013382:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4);
 8013384:	0089      	lsls	r1, r1, #2
 8013386:	18c9      	adds	r1, r1, r3
  
  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8013388:	6808      	ldr	r0, [r1, #0]
}
 801338a:	4770      	bx	lr

0801338c <HAL_TIM_Base_MspInit>:
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 801338c:	4770      	bx	lr

0801338e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim : TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801338e:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8013390:	2239      	movs	r2, #57	; 0x39
 8013392:	2302      	movs	r3, #2
 8013394:	5483      	strb	r3, [r0, r2]

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8013396:	6804      	ldr	r4, [r0, #0]
 8013398:	6823      	ldr	r3, [r4, #0]
 801339a:	2101      	movs	r1, #1
 801339c:	430b      	orrs	r3, r1
 801339e:	6023      	str	r3, [r4, #0]

  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80133a0:	5481      	strb	r1, [r0, r2]

  /* Return function status */
  return HAL_OK;
}
 80133a2:	2000      	movs	r0, #0
 80133a4:	bd10      	pop	{r4, pc}
	...

080133a8 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 80133a8:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80133aa:	4a2f      	ldr	r2, [pc, #188]	; (8013468 <TIM_Base_SetConfig+0xc0>)
 80133ac:	4290      	cmp	r0, r2
 80133ae:	d044      	beq.n	801343a <TIM_Base_SetConfig+0x92>
 80133b0:	2280      	movs	r2, #128	; 0x80
 80133b2:	05d2      	lsls	r2, r2, #23
 80133b4:	4290      	cmp	r0, r2
 80133b6:	d032      	beq.n	801341e <TIM_Base_SetConfig+0x76>
 80133b8:	4a2c      	ldr	r2, [pc, #176]	; (801346c <TIM_Base_SetConfig+0xc4>)
 80133ba:	4290      	cmp	r0, r2
 80133bc:	d04f      	beq.n	801345e <TIM_Base_SetConfig+0xb6>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80133be:	4a2c      	ldr	r2, [pc, #176]	; (8013470 <TIM_Base_SetConfig+0xc8>)
 80133c0:	4290      	cmp	r0, r2
 80133c2:	d030      	beq.n	8013426 <TIM_Base_SetConfig+0x7e>
 80133c4:	4a2b      	ldr	r2, [pc, #172]	; (8013474 <TIM_Base_SetConfig+0xcc>)
 80133c6:	4290      	cmp	r0, r2
 80133c8:	d01f      	beq.n	801340a <TIM_Base_SetConfig+0x62>
 80133ca:	4a2b      	ldr	r2, [pc, #172]	; (8013478 <TIM_Base_SetConfig+0xd0>)
 80133cc:	4290      	cmp	r0, r2
 80133ce:	d012      	beq.n	80133f6 <TIM_Base_SetConfig+0x4e>
 80133d0:	4a2a      	ldr	r2, [pc, #168]	; (801347c <TIM_Base_SetConfig+0xd4>)
 80133d2:	4290      	cmp	r0, r2
 80133d4:	d005      	beq.n	80133e2 <TIM_Base_SetConfig+0x3a>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80133d6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80133d8:	688b      	ldr	r3, [r1, #8]
 80133da:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80133dc:	680b      	ldr	r3, [r1, #0]
 80133de:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80133e0:	e03a      	b.n	8013458 <TIM_Base_SetConfig+0xb0>
    tmpcr1 &= ~TIM_CR1_CKD;
 80133e2:	4a27      	ldr	r2, [pc, #156]	; (8013480 <TIM_Base_SetConfig+0xd8>)
 80133e4:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80133e6:	68ca      	ldr	r2, [r1, #12]
 80133e8:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80133ea:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80133ec:	688b      	ldr	r3, [r1, #8]
 80133ee:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80133f0:	680b      	ldr	r3, [r1, #0]
 80133f2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80133f4:	e02e      	b.n	8013454 <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~TIM_CR1_CKD;
 80133f6:	4a22      	ldr	r2, [pc, #136]	; (8013480 <TIM_Base_SetConfig+0xd8>)
 80133f8:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80133fa:	68ca      	ldr	r2, [r1, #12]
 80133fc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80133fe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013400:	688b      	ldr	r3, [r1, #8]
 8013402:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8013404:	680b      	ldr	r3, [r1, #0]
 8013406:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013408:	e024      	b.n	8013454 <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~TIM_CR1_CKD;
 801340a:	4a1d      	ldr	r2, [pc, #116]	; (8013480 <TIM_Base_SetConfig+0xd8>)
 801340c:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801340e:	68ca      	ldr	r2, [r1, #12]
 8013410:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8013412:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013414:	688b      	ldr	r3, [r1, #8]
 8013416:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8013418:	680b      	ldr	r3, [r1, #0]
 801341a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801341c:	e01a      	b.n	8013454 <TIM_Base_SetConfig+0xac>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801341e:	2270      	movs	r2, #112	; 0x70
 8013420:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8013422:	684a      	ldr	r2, [r1, #4]
 8013424:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8013426:	4a16      	ldr	r2, [pc, #88]	; (8013480 <TIM_Base_SetConfig+0xd8>)
 8013428:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801342a:	68ca      	ldr	r2, [r1, #12]
 801342c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 801342e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8013430:	688b      	ldr	r3, [r1, #8]
 8013432:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8013434:	680b      	ldr	r3, [r1, #0]
 8013436:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8013438:	e00e      	b.n	8013458 <TIM_Base_SetConfig+0xb0>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801343a:	2270      	movs	r2, #112	; 0x70
 801343c:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 801343e:	684a      	ldr	r2, [r1, #4]
 8013440:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8013442:	4a0f      	ldr	r2, [pc, #60]	; (8013480 <TIM_Base_SetConfig+0xd8>)
 8013444:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8013446:	68ca      	ldr	r2, [r1, #12]
 8013448:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 801344a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 801344c:	688b      	ldr	r3, [r1, #8]
 801344e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8013450:	680b      	ldr	r3, [r1, #0]
 8013452:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8013454:	690b      	ldr	r3, [r1, #16]
 8013456:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8013458:	2301      	movs	r3, #1
 801345a:	6143      	str	r3, [r0, #20]
}
 801345c:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801345e:	2270      	movs	r2, #112	; 0x70
 8013460:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8013462:	684a      	ldr	r2, [r1, #4]
 8013464:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8013466:	e7de      	b.n	8013426 <TIM_Base_SetConfig+0x7e>
 8013468:	40012c00 	.word	0x40012c00
 801346c:	40000400 	.word	0x40000400
 8013470:	40002000 	.word	0x40002000
 8013474:	40014000 	.word	0x40014000
 8013478:	40014400 	.word	0x40014400
 801347c:	40014800 	.word	0x40014800
 8013480:	fffffcff 	.word	0xfffffcff

08013484 <HAL_TIM_Base_Init>:
{
 8013484:	b570      	push	{r4, r5, r6, lr}
 8013486:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8013488:	d014      	beq.n	80134b4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 801348a:	2339      	movs	r3, #57	; 0x39
 801348c:	5cc3      	ldrb	r3, [r0, r3]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d00a      	beq.n	80134a8 <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8013492:	2539      	movs	r5, #57	; 0x39
 8013494:	2302      	movs	r3, #2
 8013496:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013498:	0021      	movs	r1, r4
 801349a:	c901      	ldmia	r1!, {r0}
 801349c:	f7ff ff84 	bl	80133a8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80134a0:	2301      	movs	r3, #1
 80134a2:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80134a4:	2000      	movs	r0, #0
}
 80134a6:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80134a8:	3338      	adds	r3, #56	; 0x38
 80134aa:	2200      	movs	r2, #0
 80134ac:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80134ae:	f7ff ff6d 	bl	801338c <HAL_TIM_Base_MspInit>
 80134b2:	e7ee      	b.n	8013492 <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80134b4:	2001      	movs	r0, #1
 80134b6:	e7f6      	b.n	80134a6 <HAL_TIM_Base_Init+0x22>

080134b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80134b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80134ba:	2338      	movs	r3, #56	; 0x38
 80134bc:	5cc3      	ldrb	r3, [r0, r3]
 80134be:	2b01      	cmp	r3, #1
 80134c0:	d01e      	beq.n	8013500 <HAL_TIMEx_MasterConfigSynchronization+0x48>
 80134c2:	2238      	movs	r2, #56	; 0x38
 80134c4:	2501      	movs	r5, #1
 80134c6:	5485      	strb	r5, [r0, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80134c8:	2439      	movs	r4, #57	; 0x39
 80134ca:	2302      	movs	r3, #2
 80134cc:	5503      	strb	r3, [r0, r4]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80134ce:	6806      	ldr	r6, [r0, #0]
 80134d0:	6873      	ldr	r3, [r6, #4]
 80134d2:	2770      	movs	r7, #112	; 0x70
 80134d4:	43bb      	bics	r3, r7
 80134d6:	6073      	str	r3, [r6, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80134d8:	6806      	ldr	r6, [r0, #0]
 80134da:	6873      	ldr	r3, [r6, #4]
 80134dc:	680f      	ldr	r7, [r1, #0]
 80134de:	433b      	orrs	r3, r7
 80134e0:	6073      	str	r3, [r6, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80134e2:	6806      	ldr	r6, [r0, #0]
 80134e4:	68b3      	ldr	r3, [r6, #8]
 80134e6:	2780      	movs	r7, #128	; 0x80
 80134e8:	43bb      	bics	r3, r7
 80134ea:	60b3      	str	r3, [r6, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80134ec:	6806      	ldr	r6, [r0, #0]
 80134ee:	68b3      	ldr	r3, [r6, #8]
 80134f0:	6849      	ldr	r1, [r1, #4]
 80134f2:	430b      	orrs	r3, r1
 80134f4:	60b3      	str	r3, [r6, #8]

  htim->State = HAL_TIM_STATE_READY;
 80134f6:	5505      	strb	r5, [r0, r4]

  __HAL_UNLOCK(htim);
 80134f8:	2300      	movs	r3, #0
 80134fa:	5483      	strb	r3, [r0, r2]

  return HAL_OK;
 80134fc:	2000      	movs	r0, #0
}
 80134fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 8013500:	2002      	movs	r0, #2
 8013502:	e7fc      	b.n	80134fe <HAL_TIMEx_MasterConfigSynchronization+0x46>

08013504 <HAL_UART_MspDeInit>:
 __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspDeInit can be implemented in the user file
   */
}
 8013504:	4770      	bx	lr

08013506 <HAL_UART_DeInit>:
{
 8013506:	b570      	push	{r4, r5, r6, lr}
 8013508:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 801350a:	d016      	beq.n	801353a <HAL_UART_DeInit+0x34>
  huart->State = HAL_UART_STATE_BUSY;
 801350c:	2669      	movs	r6, #105	; 0x69
 801350e:	2302      	movs	r3, #2
 8013510:	5583      	strb	r3, [r0, r6]
  __HAL_UART_DISABLE(huart);
 8013512:	6802      	ldr	r2, [r0, #0]
 8013514:	6813      	ldr	r3, [r2, #0]
 8013516:	2101      	movs	r1, #1
 8013518:	438b      	bics	r3, r1
 801351a:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0;
 801351c:	6803      	ldr	r3, [r0, #0]
 801351e:	2500      	movs	r5, #0
 8013520:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0;
 8013522:	6803      	ldr	r3, [r0, #0]
 8013524:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0;
 8013526:	6803      	ldr	r3, [r0, #0]
 8013528:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 801352a:	f7ff ffeb 	bl	8013504 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801352e:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->State = HAL_UART_STATE_RESET;
 8013530:	55a5      	strb	r5, [r4, r6]
  __HAL_UNLOCK(huart);
 8013532:	2368      	movs	r3, #104	; 0x68
 8013534:	54e5      	strb	r5, [r4, r3]
  return HAL_OK;
 8013536:	2000      	movs	r0, #0
}
 8013538:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 801353a:	2001      	movs	r0, #1
 801353c:	e7fc      	b.n	8013538 <HAL_UART_DeInit+0x32>

0801353e <HAL_UART_Transmit_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801353e:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013540:	2369      	movs	r3, #105	; 0x69
 8013542:	5cc3      	ldrb	r3, [r0, r3]
 8013544:	2b01      	cmp	r3, #1
 8013546:	d003      	beq.n	8013550 <HAL_UART_Transmit_IT+0x12>
 8013548:	2369      	movs	r3, #105	; 0x69
 801354a:	5cc3      	ldrb	r3, [r0, r3]
 801354c:	2b22      	cmp	r3, #34	; 0x22
 801354e:	d12b      	bne.n	80135a8 <HAL_UART_Transmit_IT+0x6a>
  {
    if((pData == NULL ) || (Size == 0))
 8013550:	2900      	cmp	r1, #0
 8013552:	d02b      	beq.n	80135ac <HAL_UART_Transmit_IT+0x6e>
 8013554:	2a00      	cmp	r2, #0
 8013556:	d02b      	beq.n	80135b0 <HAL_UART_Transmit_IT+0x72>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8013558:	2368      	movs	r3, #104	; 0x68
 801355a:	5cc3      	ldrb	r3, [r0, r3]
 801355c:	2b01      	cmp	r3, #1
 801355e:	d029      	beq.n	80135b4 <HAL_UART_Transmit_IT+0x76>
 8013560:	2368      	movs	r3, #104	; 0x68
 8013562:	2401      	movs	r4, #1
 8013564:	54c4      	strb	r4, [r0, r3]

    huart->pTxBuffPtr = pData;
 8013566:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8013568:	3b18      	subs	r3, #24
 801356a:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 801356c:	3302      	adds	r3, #2
 801356e:	52c2      	strh	r2, [r0, r3]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013570:	2300      	movs	r3, #0
 8013572:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8013574:	3369      	adds	r3, #105	; 0x69
 8013576:	5cc3      	ldrb	r3, [r0, r3]
 8013578:	2b22      	cmp	r3, #34	; 0x22
 801357a:	d011      	beq.n	80135a0 <HAL_UART_Transmit_IT+0x62>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 801357c:	2369      	movs	r3, #105	; 0x69
 801357e:	2212      	movs	r2, #18
 8013580:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8013582:	6802      	ldr	r2, [r0, #0]
 8013584:	6893      	ldr	r3, [r2, #8]
 8013586:	2101      	movs	r1, #1
 8013588:	430b      	orrs	r3, r1
 801358a:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 801358c:	2368      	movs	r3, #104	; 0x68
 801358e:	2200      	movs	r2, #0
 8013590:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Transmit Data Register Empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8013592:	6802      	ldr	r2, [r0, #0]
 8013594:	6813      	ldr	r3, [r2, #0]
 8013596:	317f      	adds	r1, #127	; 0x7f
 8013598:	430b      	orrs	r3, r1
 801359a:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 801359c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 801359e:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80135a0:	3347      	adds	r3, #71	; 0x47
 80135a2:	2232      	movs	r2, #50	; 0x32
 80135a4:	54c2      	strb	r2, [r0, r3]
 80135a6:	e7ec      	b.n	8013582 <HAL_UART_Transmit_IT+0x44>
    return HAL_BUSY;
 80135a8:	2002      	movs	r0, #2
 80135aa:	e7f8      	b.n	801359e <HAL_UART_Transmit_IT+0x60>
      return HAL_ERROR;
 80135ac:	2001      	movs	r0, #1
 80135ae:	e7f6      	b.n	801359e <HAL_UART_Transmit_IT+0x60>
 80135b0:	2001      	movs	r0, #1
 80135b2:	e7f4      	b.n	801359e <HAL_UART_Transmit_IT+0x60>
    __HAL_LOCK(huart);
 80135b4:	2002      	movs	r0, #2
 80135b6:	e7f2      	b.n	801359e <HAL_UART_Transmit_IT+0x60>

080135b8 <HAL_UART_Receive_IT>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80135b8:	b510      	push	{r4, lr}
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80135ba:	2369      	movs	r3, #105	; 0x69
 80135bc:	5cc3      	ldrb	r3, [r0, r3]
 80135be:	2b01      	cmp	r3, #1
 80135c0:	d003      	beq.n	80135ca <HAL_UART_Receive_IT+0x12>
 80135c2:	2369      	movs	r3, #105	; 0x69
 80135c4:	5cc3      	ldrb	r3, [r0, r3]
 80135c6:	2b12      	cmp	r3, #18
 80135c8:	d15d      	bne.n	8013686 <HAL_UART_Receive_IT+0xce>
  {
    if((pData == NULL ) || (Size == 0))
 80135ca:	2900      	cmp	r1, #0
 80135cc:	d05d      	beq.n	801368a <HAL_UART_Receive_IT+0xd2>
 80135ce:	2a00      	cmp	r2, #0
 80135d0:	d05d      	beq.n	801368e <HAL_UART_Receive_IT+0xd6>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80135d2:	2368      	movs	r3, #104	; 0x68
 80135d4:	5cc3      	ldrb	r3, [r0, r3]
 80135d6:	2b01      	cmp	r3, #1
 80135d8:	d05b      	beq.n	8013692 <HAL_UART_Receive_IT+0xda>
 80135da:	2368      	movs	r3, #104	; 0x68
 80135dc:	2401      	movs	r4, #1
 80135de:	54c4      	strb	r4, [r0, r3]

    huart->pRxBuffPtr = pData;
 80135e0:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 80135e2:	3b10      	subs	r3, #16
 80135e4:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 80135e6:	3302      	adds	r3, #2
 80135e8:	52c2      	strh	r2, [r0, r3]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80135ea:	6883      	ldr	r3, [r0, #8]
 80135ec:	2280      	movs	r2, #128	; 0x80
 80135ee:	0152      	lsls	r2, r2, #5
 80135f0:	4293      	cmp	r3, r2
 80135f2:	d008      	beq.n	8013606 <HAL_UART_Receive_IT+0x4e>
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d115      	bne.n	8013624 <HAL_UART_Receive_IT+0x6c>
 80135f8:	6903      	ldr	r3, [r0, #16]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d10e      	bne.n	801361c <HAL_UART_Receive_IT+0x64>
 80135fe:	335c      	adds	r3, #92	; 0x5c
 8013600:	22ff      	movs	r2, #255	; 0xff
 8013602:	52c2      	strh	r2, [r0, r3]
 8013604:	e012      	b.n	801362c <HAL_UART_Receive_IT+0x74>
 8013606:	6903      	ldr	r3, [r0, #16]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d103      	bne.n	8013614 <HAL_UART_Receive_IT+0x5c>
 801360c:	335c      	adds	r3, #92	; 0x5c
 801360e:	4a22      	ldr	r2, [pc, #136]	; (8013698 <HAL_UART_Receive_IT+0xe0>)
 8013610:	52c2      	strh	r2, [r0, r3]
 8013612:	e00b      	b.n	801362c <HAL_UART_Receive_IT+0x74>
 8013614:	235c      	movs	r3, #92	; 0x5c
 8013616:	22ff      	movs	r2, #255	; 0xff
 8013618:	52c2      	strh	r2, [r0, r3]
 801361a:	e007      	b.n	801362c <HAL_UART_Receive_IT+0x74>
 801361c:	235c      	movs	r3, #92	; 0x5c
 801361e:	227f      	movs	r2, #127	; 0x7f
 8013620:	52c2      	strh	r2, [r0, r3]
 8013622:	e003      	b.n	801362c <HAL_UART_Receive_IT+0x74>
 8013624:	2280      	movs	r2, #128	; 0x80
 8013626:	0552      	lsls	r2, r2, #21
 8013628:	4293      	cmp	r3, r2
 801362a:	d01d      	beq.n	8013668 <HAL_UART_Receive_IT+0xb0>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801362c:	2300      	movs	r3, #0
 801362e:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8013630:	3369      	adds	r3, #105	; 0x69
 8013632:	5cc3      	ldrb	r3, [r0, r3]
 8013634:	2b12      	cmp	r3, #18
 8013636:	d022      	beq.n	801367e <HAL_UART_Receive_IT+0xc6>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8013638:	2369      	movs	r3, #105	; 0x69
 801363a:	2222      	movs	r2, #34	; 0x22
 801363c:	54c2      	strb	r2, [r0, r3]
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801363e:	6802      	ldr	r2, [r0, #0]
 8013640:	6811      	ldr	r1, [r2, #0]
 8013642:	2380      	movs	r3, #128	; 0x80
 8013644:	005b      	lsls	r3, r3, #1
 8013646:	430b      	orrs	r3, r1
 8013648:	6013      	str	r3, [r2, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801364a:	6802      	ldr	r2, [r0, #0]
 801364c:	6893      	ldr	r3, [r2, #8]
 801364e:	2101      	movs	r1, #1
 8013650:	430b      	orrs	r3, r1
 8013652:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8013654:	2368      	movs	r3, #104	; 0x68
 8013656:	2200      	movs	r2, #0
 8013658:	54c2      	strb	r2, [r0, r3]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801365a:	6802      	ldr	r2, [r0, #0]
 801365c:	6813      	ldr	r3, [r2, #0]
 801365e:	311f      	adds	r1, #31
 8013660:	430b      	orrs	r3, r1
 8013662:	6013      	str	r3, [r2, #0]

    return HAL_OK;
 8013664:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8013666:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 8013668:	6903      	ldr	r3, [r0, #16]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d103      	bne.n	8013676 <HAL_UART_Receive_IT+0xbe>
 801366e:	335c      	adds	r3, #92	; 0x5c
 8013670:	227f      	movs	r2, #127	; 0x7f
 8013672:	52c2      	strh	r2, [r0, r3]
 8013674:	e7da      	b.n	801362c <HAL_UART_Receive_IT+0x74>
 8013676:	235c      	movs	r3, #92	; 0x5c
 8013678:	223f      	movs	r2, #63	; 0x3f
 801367a:	52c2      	strh	r2, [r0, r3]
 801367c:	e7d6      	b.n	801362c <HAL_UART_Receive_IT+0x74>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801367e:	3357      	adds	r3, #87	; 0x57
 8013680:	2232      	movs	r2, #50	; 0x32
 8013682:	54c2      	strb	r2, [r0, r3]
 8013684:	e7db      	b.n	801363e <HAL_UART_Receive_IT+0x86>
    return HAL_BUSY;
 8013686:	2002      	movs	r0, #2
 8013688:	e7ed      	b.n	8013666 <HAL_UART_Receive_IT+0xae>
      return HAL_ERROR;
 801368a:	2001      	movs	r0, #1
 801368c:	e7eb      	b.n	8013666 <HAL_UART_Receive_IT+0xae>
 801368e:	2001      	movs	r0, #1
 8013690:	e7e9      	b.n	8013666 <HAL_UART_Receive_IT+0xae>
    __HAL_LOCK(huart);
 8013692:	2002      	movs	r0, #2
 8013694:	e7e7      	b.n	8013666 <HAL_UART_Receive_IT+0xae>
 8013696:	46c0      	nop			; (mov r8, r8)
 8013698:	000001ff 	.word	0x000001ff

0801369c <HAL_UART_Transmit_DMA>:
  * @param pData: pointer to data buffer.
  * @param Size: amount of data to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801369c:	b510      	push	{r4, lr}
 801369e:	0004      	movs	r4, r0
 80136a0:	0013      	movs	r3, r2
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 80136a2:	2269      	movs	r2, #105	; 0x69
 80136a4:	5c82      	ldrb	r2, [r0, r2]
 80136a6:	2a01      	cmp	r2, #1
 80136a8:	d003      	beq.n	80136b2 <HAL_UART_Transmit_DMA+0x16>
 80136aa:	2269      	movs	r2, #105	; 0x69
 80136ac:	5c82      	ldrb	r2, [r0, r2]
 80136ae:	2a22      	cmp	r2, #34	; 0x22
 80136b0:	d137      	bne.n	8013722 <HAL_UART_Transmit_DMA+0x86>
  {
    if((pData == NULL ) || (Size == 0))
 80136b2:	2900      	cmp	r1, #0
 80136b4:	d037      	beq.n	8013726 <HAL_UART_Transmit_DMA+0x8a>
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d037      	beq.n	801372a <HAL_UART_Transmit_DMA+0x8e>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80136ba:	2268      	movs	r2, #104	; 0x68
 80136bc:	5ca2      	ldrb	r2, [r4, r2]
 80136be:	2a01      	cmp	r2, #1
 80136c0:	d035      	beq.n	801372e <HAL_UART_Transmit_DMA+0x92>
 80136c2:	2268      	movs	r2, #104	; 0x68
 80136c4:	2001      	movs	r0, #1
 80136c6:	54a0      	strb	r0, [r4, r2]

    huart->pTxBuffPtr = pData;
 80136c8:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->TxXferSize = Size;
 80136ca:	3a18      	subs	r2, #24
 80136cc:	52a3      	strh	r3, [r4, r2]
    huart->TxXferCount = Size;
 80136ce:	3202      	adds	r2, #2
 80136d0:	52a3      	strh	r3, [r4, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80136d2:	2200      	movs	r2, #0
 80136d4:	66e2      	str	r2, [r4, #108]	; 0x6c
    /* Check if a receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 80136d6:	3269      	adds	r2, #105	; 0x69
 80136d8:	5ca2      	ldrb	r2, [r4, r2]
 80136da:	2a22      	cmp	r2, #34	; 0x22
 80136dc:	d01d      	beq.n	801371a <HAL_UART_Transmit_DMA+0x7e>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 80136de:	2269      	movs	r2, #105	; 0x69
 80136e0:	2012      	movs	r0, #18
 80136e2:	54a0      	strb	r0, [r4, r2]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80136e4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80136e6:	4813      	ldr	r0, [pc, #76]	; (8013734 <HAL_UART_Transmit_DMA+0x98>)
 80136e8:	6290      	str	r0, [r2, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80136ea:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80136ec:	4812      	ldr	r0, [pc, #72]	; (8013738 <HAL_UART_Transmit_DMA+0x9c>)
 80136ee:	62d0      	str	r0, [r2, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80136f0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80136f2:	4812      	ldr	r0, [pc, #72]	; (801373c <HAL_UART_Transmit_DMA+0xa0>)
 80136f4:	6310      	str	r0, [r2, #48]	; 0x30

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->TDR, Size);
 80136f6:	6822      	ldr	r2, [r4, #0]
 80136f8:	3228      	adds	r2, #40	; 0x28
 80136fa:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80136fc:	f7fd fc5e 	bl	8010fbc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8013700:	6823      	ldr	r3, [r4, #0]
 8013702:	2240      	movs	r2, #64	; 0x40
 8013704:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    huart->Instance->CR3 |= USART_CR3_DMAT;
 8013706:	6822      	ldr	r2, [r4, #0]
 8013708:	6893      	ldr	r3, [r2, #8]
 801370a:	2180      	movs	r1, #128	; 0x80
 801370c:	430b      	orrs	r3, r1
 801370e:	6093      	str	r3, [r2, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8013710:	2368      	movs	r3, #104	; 0x68
 8013712:	2200      	movs	r2, #0
 8013714:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 8013716:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8013718:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 801371a:	3247      	adds	r2, #71	; 0x47
 801371c:	3031      	adds	r0, #49	; 0x31
 801371e:	54a0      	strb	r0, [r4, r2]
 8013720:	e7e0      	b.n	80136e4 <HAL_UART_Transmit_DMA+0x48>
    return HAL_BUSY;
 8013722:	2002      	movs	r0, #2
 8013724:	e7f8      	b.n	8013718 <HAL_UART_Transmit_DMA+0x7c>
      return HAL_ERROR;
 8013726:	2001      	movs	r0, #1
 8013728:	e7f6      	b.n	8013718 <HAL_UART_Transmit_DMA+0x7c>
 801372a:	2001      	movs	r0, #1
 801372c:	e7f4      	b.n	8013718 <HAL_UART_Transmit_DMA+0x7c>
    __HAL_LOCK(huart);
 801372e:	2002      	movs	r0, #2
 8013730:	e7f2      	b.n	8013718 <HAL_UART_Transmit_DMA+0x7c>
 8013732:	46c0      	nop			; (mov r8, r8)
 8013734:	080137dd 	.word	0x080137dd
 8013738:	0801380f 	.word	0x0801380f
 801373c:	0801385f 	.word	0x0801385f

08013740 <HAL_UART_Receive_DMA>:
  * @note   When the UART parity is enabled (PCE = 1), the received data contain
  *         the parity bit (MSB position).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8013740:	b510      	push	{r4, lr}
 8013742:	0004      	movs	r4, r0
 8013744:	0008      	movs	r0, r1
 8013746:	0013      	movs	r3, r2
  uint32_t *tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 8013748:	2269      	movs	r2, #105	; 0x69
 801374a:	5ca2      	ldrb	r2, [r4, r2]
 801374c:	2a01      	cmp	r2, #1
 801374e:	d003      	beq.n	8013758 <HAL_UART_Receive_DMA+0x18>
 8013750:	2269      	movs	r2, #105	; 0x69
 8013752:	5ca2      	ldrb	r2, [r4, r2]
 8013754:	2a12      	cmp	r2, #18
 8013756:	d133      	bne.n	80137c0 <HAL_UART_Receive_DMA+0x80>
  {
    if((pData == NULL ) || (Size == 0))
 8013758:	2800      	cmp	r0, #0
 801375a:	d033      	beq.n	80137c4 <HAL_UART_Receive_DMA+0x84>
 801375c:	2b00      	cmp	r3, #0
 801375e:	d033      	beq.n	80137c8 <HAL_UART_Receive_DMA+0x88>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8013760:	2268      	movs	r2, #104	; 0x68
 8013762:	5ca2      	ldrb	r2, [r4, r2]
 8013764:	2a01      	cmp	r2, #1
 8013766:	d031      	beq.n	80137cc <HAL_UART_Receive_DMA+0x8c>
 8013768:	2268      	movs	r2, #104	; 0x68
 801376a:	2101      	movs	r1, #1
 801376c:	54a1      	strb	r1, [r4, r2]

    huart->pRxBuffPtr = pData;
 801376e:	6560      	str	r0, [r4, #84]	; 0x54
    huart->RxXferSize = Size;
 8013770:	3a10      	subs	r2, #16
 8013772:	52a3      	strh	r3, [r4, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013774:	2200      	movs	r2, #0
 8013776:	66e2      	str	r2, [r4, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX)
 8013778:	3269      	adds	r2, #105	; 0x69
 801377a:	5ca2      	ldrb	r2, [r4, r2]
 801377c:	2a12      	cmp	r2, #18
 801377e:	d01b      	beq.n	80137b8 <HAL_UART_Receive_DMA+0x78>
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8013780:	2269      	movs	r2, #105	; 0x69
 8013782:	2122      	movs	r1, #34	; 0x22
 8013784:	54a1      	strb	r1, [r4, r2]
    }

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8013786:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013788:	4911      	ldr	r1, [pc, #68]	; (80137d0 <HAL_UART_Receive_DMA+0x90>)
 801378a:	6291      	str	r1, [r2, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 801378c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801378e:	4911      	ldr	r1, [pc, #68]	; (80137d4 <HAL_UART_Receive_DMA+0x94>)
 8013790:	62d1      	str	r1, [r2, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8013792:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013794:	4910      	ldr	r1, [pc, #64]	; (80137d8 <HAL_UART_Receive_DMA+0x98>)
 8013796:	6311      	str	r1, [r2, #48]	; 0x30

    /* Enable the DMA channel */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, *(uint32_t*)tmp, Size);
 8013798:	6821      	ldr	r1, [r4, #0]
 801379a:	3124      	adds	r1, #36	; 0x24
 801379c:	0002      	movs	r2, r0
 801379e:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80137a0:	f7fd fc0c 	bl	8010fbc <HAL_DMA_Start_IT>

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
     huart->Instance->CR3 |= USART_CR3_DMAR;
 80137a4:	6822      	ldr	r2, [r4, #0]
 80137a6:	6893      	ldr	r3, [r2, #8]
 80137a8:	2140      	movs	r1, #64	; 0x40
 80137aa:	430b      	orrs	r3, r1
 80137ac:	6093      	str	r3, [r2, #8]

     /* Process Unlocked */
     __HAL_UNLOCK(huart);
 80137ae:	2368      	movs	r3, #104	; 0x68
 80137b0:	2200      	movs	r2, #0
 80137b2:	54e2      	strb	r2, [r4, r3]

    return HAL_OK;
 80137b4:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80137b6:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 80137b8:	3257      	adds	r2, #87	; 0x57
 80137ba:	3131      	adds	r1, #49	; 0x31
 80137bc:	54a1      	strb	r1, [r4, r2]
 80137be:	e7e2      	b.n	8013786 <HAL_UART_Receive_DMA+0x46>
    return HAL_BUSY;
 80137c0:	2002      	movs	r0, #2
 80137c2:	e7f8      	b.n	80137b6 <HAL_UART_Receive_DMA+0x76>
      return HAL_ERROR;
 80137c4:	2001      	movs	r0, #1
 80137c6:	e7f6      	b.n	80137b6 <HAL_UART_Receive_DMA+0x76>
 80137c8:	2001      	movs	r0, #1
 80137ca:	e7f4      	b.n	80137b6 <HAL_UART_Receive_DMA+0x76>
    __HAL_LOCK(huart);
 80137cc:	2002      	movs	r0, #2
 80137ce:	e7f2      	b.n	80137b6 <HAL_UART_Receive_DMA+0x76>
 80137d0:	08013819 	.word	0x08013819
 80137d4:	08013855 	.word	0x08013855
 80137d8:	0801385f 	.word	0x0801385f

080137dc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80137dc:	b510      	push	{r4, lr}
 80137de:	0003      	movs	r3, r0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80137e0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	069b      	lsls	r3, r3, #26
 80137e8:	d40d      	bmi.n	8013806 <UART_DMATransmitCplt+0x2a>
  {  
    huart->TxXferCount = 0;
 80137ea:	2352      	movs	r3, #82	; 0x52
 80137ec:	2200      	movs	r2, #0
 80137ee:	52c2      	strh	r2, [r0, r3]
  
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAT);
 80137f0:	6802      	ldr	r2, [r0, #0]
 80137f2:	6893      	ldr	r3, [r2, #8]
 80137f4:	2180      	movs	r1, #128	; 0x80
 80137f6:	438b      	bics	r3, r1
 80137f8:	6093      	str	r3, [r2, #8]

    /* Enable the UART Transmit Complete Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80137fa:	6802      	ldr	r2, [r0, #0]
 80137fc:	6813      	ldr	r3, [r2, #0]
 80137fe:	3940      	subs	r1, #64	; 0x40
 8013800:	430b      	orrs	r3, r1
 8013802:	6013      	str	r3, [r2, #0]
  else
  {
    HAL_UART_TxCpltCallback(huart);
  }

}
 8013804:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8013806:	f7fa f803 	bl	800d810 <HAL_UART_TxCpltCallback>
}
 801380a:	e7fb      	b.n	8013804 <UART_DMATransmitCplt+0x28>

0801380c <HAL_UART_TxHalfCpltCallback>:
}
 801380c:	4770      	bx	lr

0801380e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801380e:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_TxHalfCpltCallback(huart);
 8013810:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8013812:	f7ff fffb 	bl	801380c <HAL_UART_TxHalfCpltCallback>
}
 8013816:	bd10      	pop	{r4, pc}

08013818 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013818:	b510      	push	{r4, lr}
 801381a:	0003      	movs	r3, r0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 801381c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	069b      	lsls	r3, r3, #26
 8013824:	d40e      	bmi.n	8013844 <UART_DMAReceiveCplt+0x2c>
  {
    huart->RxXferCount = 0;
 8013826:	235a      	movs	r3, #90	; 0x5a
 8013828:	2200      	movs	r2, #0
 801382a:	52c2      	strh	r2, [r0, r3]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    huart->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DMAR);
 801382c:	6802      	ldr	r2, [r0, #0]
 801382e:	6893      	ldr	r3, [r2, #8]
 8013830:	2140      	movs	r1, #64	; 0x40
 8013832:	438b      	bics	r3, r1
 8013834:	6093      	str	r3, [r2, #8]

    /* Check if a transmit Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013836:	2369      	movs	r3, #105	; 0x69
 8013838:	5cc3      	ldrb	r3, [r0, r3]
 801383a:	2b32      	cmp	r3, #50	; 0x32
 801383c:	d005      	beq.n	801384a <UART_DMAReceiveCplt+0x32>
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 801383e:	2369      	movs	r3, #105	; 0x69
 8013840:	2201      	movs	r2, #1
 8013842:	54c2      	strb	r2, [r0, r3]
    }
  }
  
  HAL_UART_RxCpltCallback(huart);
 8013844:	f7fa f822 	bl	800d88c <HAL_UART_RxCpltCallback>
}
 8013848:	bd10      	pop	{r4, pc}
      huart->State = HAL_UART_STATE_BUSY_TX;
 801384a:	3337      	adds	r3, #55	; 0x37
 801384c:	2212      	movs	r2, #18
 801384e:	54c2      	strb	r2, [r0, r3]
 8013850:	e7f8      	b.n	8013844 <UART_DMAReceiveCplt+0x2c>

08013852 <HAL_UART_RxHalfCpltCallback>:
}
 8013852:	4770      	bx	lr

08013854 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma : DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013854:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart);
 8013856:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8013858:	f7ff fffb 	bl	8013852 <HAL_UART_RxHalfCpltCallback>
}
 801385c:	bd10      	pop	{r4, pc}

0801385e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma: DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801385e:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8013860:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0;
 8013862:	2300      	movs	r3, #0
 8013864:	225a      	movs	r2, #90	; 0x5a
 8013866:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0;
 8013868:	3a08      	subs	r2, #8
 801386a:	5283      	strh	r3, [r0, r2]
  huart->State= HAL_UART_STATE_READY;
 801386c:	3369      	adds	r3, #105	; 0x69
 801386e:	3a51      	subs	r2, #81	; 0x51
 8013870:	54c2      	strb	r2, [r0, r3]
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8013872:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8013874:	320f      	adds	r2, #15
 8013876:	4313      	orrs	r3, r2
 8013878:	66c3      	str	r3, [r0, #108]	; 0x6c
  HAL_UART_ErrorCallback(huart);
 801387a:	f7f9 ffe1 	bl	800d840 <HAL_UART_ErrorCallback>
}
 801387e:	bd10      	pop	{r4, pc}

08013880 <UART_SetConfig>:
{
 8013880:	b570      	push	{r4, r5, r6, lr}
 8013882:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8013884:	6801      	ldr	r1, [r0, #0]
 8013886:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013888:	6883      	ldr	r3, [r0, #8]
 801388a:	6900      	ldr	r0, [r0, #16]
 801388c:	4303      	orrs	r3, r0
 801388e:	6960      	ldr	r0, [r4, #20]
 8013890:	4303      	orrs	r3, r0
 8013892:	69e0      	ldr	r0, [r4, #28]
 8013894:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8013896:	487a      	ldr	r0, [pc, #488]	; (8013a80 <UART_SetConfig+0x200>)
 8013898:	4002      	ands	r2, r0
 801389a:	4313      	orrs	r3, r2
 801389c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801389e:	6822      	ldr	r2, [r4, #0]
 80138a0:	6853      	ldr	r3, [r2, #4]
 80138a2:	4978      	ldr	r1, [pc, #480]	; (8013a84 <UART_SetConfig+0x204>)
 80138a4:	400b      	ands	r3, r1
 80138a6:	68e1      	ldr	r1, [r4, #12]
 80138a8:	430b      	orrs	r3, r1
 80138aa:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80138ac:	6821      	ldr	r1, [r4, #0]
 80138ae:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80138b0:	69a3      	ldr	r3, [r4, #24]
 80138b2:	6a20      	ldr	r0, [r4, #32]
 80138b4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80138b6:	4874      	ldr	r0, [pc, #464]	; (8013a88 <UART_SetConfig+0x208>)
 80138b8:	4002      	ands	r2, r0
 80138ba:	4313      	orrs	r3, r2
 80138bc:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80138be:	6825      	ldr	r5, [r4, #0]
 80138c0:	4b72      	ldr	r3, [pc, #456]	; (8013a8c <UART_SetConfig+0x20c>)
 80138c2:	429d      	cmp	r5, r3
 80138c4:	d021      	beq.n	801390a <UART_SetConfig+0x8a>
 80138c6:	4b72      	ldr	r3, [pc, #456]	; (8013a90 <UART_SetConfig+0x210>)
 80138c8:	429d      	cmp	r5, r3
 80138ca:	d03a      	beq.n	8013942 <UART_SetConfig+0xc2>
 80138cc:	4b71      	ldr	r3, [pc, #452]	; (8013a94 <UART_SetConfig+0x214>)
 80138ce:	429d      	cmp	r5, r3
 80138d0:	d061      	beq.n	8013996 <UART_SetConfig+0x116>
 80138d2:	4b71      	ldr	r3, [pc, #452]	; (8013a98 <UART_SetConfig+0x218>)
 80138d4:	429d      	cmp	r5, r3
 80138d6:	d100      	bne.n	80138da <UART_SetConfig+0x5a>
 80138d8:	e0a8      	b.n	8013a2c <UART_SetConfig+0x1ac>
 80138da:	4b70      	ldr	r3, [pc, #448]	; (8013a9c <UART_SetConfig+0x21c>)
 80138dc:	429d      	cmp	r5, r3
 80138de:	d100      	bne.n	80138e2 <UART_SetConfig+0x62>
 80138e0:	e0a4      	b.n	8013a2c <UART_SetConfig+0x1ac>
 80138e2:	4b6f      	ldr	r3, [pc, #444]	; (8013aa0 <UART_SetConfig+0x220>)
 80138e4:	429d      	cmp	r5, r3
 80138e6:	d100      	bne.n	80138ea <UART_SetConfig+0x6a>
 80138e8:	e0a0      	b.n	8013a2c <UART_SetConfig+0x1ac>
 80138ea:	4b6e      	ldr	r3, [pc, #440]	; (8013aa4 <UART_SetConfig+0x224>)
 80138ec:	429d      	cmp	r5, r3
 80138ee:	d100      	bne.n	80138f2 <UART_SetConfig+0x72>
 80138f0:	e09c      	b.n	8013a2c <UART_SetConfig+0x1ac>
 80138f2:	4b6d      	ldr	r3, [pc, #436]	; (8013aa8 <UART_SetConfig+0x228>)
 80138f4:	429d      	cmp	r5, r3
 80138f6:	d100      	bne.n	80138fa <UART_SetConfig+0x7a>
 80138f8:	e098      	b.n	8013a2c <UART_SetConfig+0x1ac>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80138fa:	2380      	movs	r3, #128	; 0x80
 80138fc:	021b      	lsls	r3, r3, #8
 80138fe:	69e2      	ldr	r2, [r4, #28]
 8013900:	429a      	cmp	r2, r3
 8013902:	d100      	bne.n	8013906 <UART_SetConfig+0x86>
 8013904:	e08c      	b.n	8013a20 <UART_SetConfig+0x1a0>
 8013906:	2001      	movs	r0, #1
 8013908:	e089      	b.n	8013a1e <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801390a:	4b68      	ldr	r3, [pc, #416]	; (8013aac <UART_SetConfig+0x22c>)
 801390c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801390e:	2303      	movs	r3, #3
 8013910:	4013      	ands	r3, r2
 8013912:	2b02      	cmp	r3, #2
 8013914:	d100      	bne.n	8013918 <UART_SetConfig+0x98>
 8013916:	e0a6      	b.n	8013a66 <UART_SetConfig+0x1e6>
 8013918:	d82f      	bhi.n	801397a <UART_SetConfig+0xfa>
 801391a:	2b00      	cmp	r3, #0
 801391c:	d069      	beq.n	80139f2 <UART_SetConfig+0x172>
 801391e:	2b01      	cmp	r3, #1
 8013920:	d120      	bne.n	8013964 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013922:	2380      	movs	r3, #128	; 0x80
 8013924:	021b      	lsls	r3, r3, #8
 8013926:	69e2      	ldr	r2, [r4, #28]
 8013928:	429a      	cmp	r2, r3
 801392a:	d049      	beq.n	80139c0 <UART_SetConfig+0x140>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 801392c:	f7ff fa34 	bl	8012d98 <HAL_RCC_GetSysClockFreq>
 8013930:	6825      	ldr	r5, [r4, #0]
 8013932:	6861      	ldr	r1, [r4, #4]
 8013934:	f7ec fc0c 	bl	8000150 <__udivsi3>
 8013938:	0400      	lsls	r0, r0, #16
 801393a:	0c00      	lsrs	r0, r0, #16
 801393c:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 801393e:	2000      	movs	r0, #0
        break;
 8013940:	e06d      	b.n	8013a1e <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013942:	4b5a      	ldr	r3, [pc, #360]	; (8013aac <UART_SetConfig+0x22c>)
 8013944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013946:	22c0      	movs	r2, #192	; 0xc0
 8013948:	0292      	lsls	r2, r2, #10
 801394a:	4013      	ands	r3, r2
 801394c:	2280      	movs	r2, #128	; 0x80
 801394e:	0292      	lsls	r2, r2, #10
 8013950:	4293      	cmp	r3, r2
 8013952:	d100      	bne.n	8013956 <UART_SetConfig+0xd6>
 8013954:	e087      	b.n	8013a66 <UART_SetConfig+0x1e6>
 8013956:	d80c      	bhi.n	8013972 <UART_SetConfig+0xf2>
 8013958:	2b00      	cmp	r3, #0
 801395a:	d04a      	beq.n	80139f2 <UART_SetConfig+0x172>
 801395c:	2280      	movs	r2, #128	; 0x80
 801395e:	0252      	lsls	r2, r2, #9
 8013960:	4293      	cmp	r3, r2
 8013962:	d0de      	beq.n	8013922 <UART_SetConfig+0xa2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013964:	2380      	movs	r3, #128	; 0x80
 8013966:	021b      	lsls	r3, r3, #8
 8013968:	69e2      	ldr	r2, [r4, #28]
 801396a:	429a      	cmp	r2, r3
 801396c:	d05b      	beq.n	8013a26 <UART_SetConfig+0x1a6>
        ret = HAL_ERROR;
 801396e:	2001      	movs	r0, #1
 8013970:	e055      	b.n	8013a1e <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013972:	22c0      	movs	r2, #192	; 0xc0
 8013974:	0292      	lsls	r2, r2, #10
 8013976:	4293      	cmp	r3, r2
 8013978:	d1f4      	bne.n	8013964 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801397a:	2380      	movs	r3, #128	; 0x80
 801397c:	021b      	lsls	r3, r3, #8
 801397e:	69e2      	ldr	r2, [r4, #28]
 8013980:	429a      	cmp	r2, r3
 8013982:	d02f      	beq.n	80139e4 <UART_SetConfig+0x164>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8013984:	6861      	ldr	r1, [r4, #4]
 8013986:	484a      	ldr	r0, [pc, #296]	; (8013ab0 <UART_SetConfig+0x230>)
 8013988:	f7ec fbe2 	bl	8000150 <__udivsi3>
 801398c:	0400      	lsls	r0, r0, #16
 801398e:	0c00      	lsrs	r0, r0, #16
 8013990:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013992:	2000      	movs	r0, #0
        break;
 8013994:	e043      	b.n	8013a1e <UART_SetConfig+0x19e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013996:	4b45      	ldr	r3, [pc, #276]	; (8013aac <UART_SetConfig+0x22c>)
 8013998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801399a:	22c0      	movs	r2, #192	; 0xc0
 801399c:	0312      	lsls	r2, r2, #12
 801399e:	4013      	ands	r3, r2
 80139a0:	2280      	movs	r2, #128	; 0x80
 80139a2:	0312      	lsls	r2, r2, #12
 80139a4:	4293      	cmp	r3, r2
 80139a6:	d051      	beq.n	8013a4c <UART_SetConfig+0x1cc>
 80139a8:	d813      	bhi.n	80139d2 <UART_SetConfig+0x152>
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d021      	beq.n	80139f2 <UART_SetConfig+0x172>
 80139ae:	2280      	movs	r2, #128	; 0x80
 80139b0:	02d2      	lsls	r2, r2, #11
 80139b2:	4293      	cmp	r3, r2
 80139b4:	d1d6      	bne.n	8013964 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80139b6:	2380      	movs	r3, #128	; 0x80
 80139b8:	021b      	lsls	r3, r3, #8
 80139ba:	69e2      	ldr	r2, [r4, #28]
 80139bc:	429a      	cmp	r2, r3
 80139be:	d1b5      	bne.n	801392c <UART_SetConfig+0xac>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80139c0:	f7ff f9ea 	bl	8012d98 <HAL_RCC_GetSysClockFreq>
 80139c4:	0040      	lsls	r0, r0, #1
 80139c6:	6861      	ldr	r1, [r4, #4]
 80139c8:	f7ec fbc2 	bl	8000150 <__udivsi3>
 80139cc:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80139ce:	2000      	movs	r0, #0
        break;
 80139d0:	e01c      	b.n	8013a0c <UART_SetConfig+0x18c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80139d2:	22c0      	movs	r2, #192	; 0xc0
 80139d4:	0312      	lsls	r2, r2, #12
 80139d6:	4293      	cmp	r3, r2
 80139d8:	d1c4      	bne.n	8013964 <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80139da:	2380      	movs	r3, #128	; 0x80
 80139dc:	021b      	lsls	r3, r3, #8
 80139de:	69e2      	ldr	r2, [r4, #28]
 80139e0:	429a      	cmp	r2, r3
 80139e2:	d1cf      	bne.n	8013984 <UART_SetConfig+0x104>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80139e4:	6861      	ldr	r1, [r4, #4]
 80139e6:	4833      	ldr	r0, [pc, #204]	; (8013ab4 <UART_SetConfig+0x234>)
 80139e8:	f7ec fbb2 	bl	8000150 <__udivsi3>
 80139ec:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80139ee:	2000      	movs	r0, #0
        break;
 80139f0:	e00c      	b.n	8013a0c <UART_SetConfig+0x18c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80139f2:	2380      	movs	r3, #128	; 0x80
 80139f4:	021b      	lsls	r3, r3, #8
 80139f6:	69e2      	ldr	r2, [r4, #28]
 80139f8:	429a      	cmp	r2, r3
 80139fa:	d11c      	bne.n	8013a36 <UART_SetConfig+0x1b6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80139fc:	f7ff fa30 	bl	8012e60 <HAL_RCC_GetPCLK1Freq>
 8013a00:	0040      	lsls	r0, r0, #1
 8013a02:	6861      	ldr	r1, [r4, #4]
 8013a04:	f7ec fba4 	bl	8000150 <__udivsi3>
 8013a08:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013a0a:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0;
 8013a0c:	220f      	movs	r2, #15
 8013a0e:	0019      	movs	r1, r3
 8013a10:	4391      	bics	r1, r2
 8013a12:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 8013a14:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8013a16:	071b      	lsls	r3, r3, #28
 8013a18:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8013a1a:	4313      	orrs	r3, r2
 8013a1c:	60cb      	str	r3, [r1, #12]
}
 8013a1e:	bd70      	pop	{r4, r5, r6, pc}
        ret = HAL_ERROR;
 8013a20:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000;
 8013a22:	2300      	movs	r3, #0
 8013a24:	e7f2      	b.n	8013a0c <UART_SetConfig+0x18c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013a26:	2001      	movs	r0, #1
 8013a28:	2300      	movs	r3, #0
 8013a2a:	e7ef      	b.n	8013a0c <UART_SetConfig+0x18c>
 8013a2c:	2380      	movs	r3, #128	; 0x80
 8013a2e:	021b      	lsls	r3, r3, #8
 8013a30:	69e2      	ldr	r2, [r4, #28]
 8013a32:	429a      	cmp	r2, r3
 8013a34:	d0e2      	beq.n	80139fc <UART_SetConfig+0x17c>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8013a36:	f7ff fa13 	bl	8012e60 <HAL_RCC_GetPCLK1Freq>
 8013a3a:	6825      	ldr	r5, [r4, #0]
 8013a3c:	6861      	ldr	r1, [r4, #4]
 8013a3e:	f7ec fb87 	bl	8000150 <__udivsi3>
 8013a42:	0400      	lsls	r0, r0, #16
 8013a44:	0c00      	lsrs	r0, r0, #16
 8013a46:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013a48:	2000      	movs	r0, #0
  return ret;
 8013a4a:	e7e8      	b.n	8013a1e <UART_SetConfig+0x19e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013a4c:	2380      	movs	r3, #128	; 0x80
 8013a4e:	021b      	lsls	r3, r3, #8
 8013a50:	69e2      	ldr	r2, [r4, #28]
 8013a52:	429a      	cmp	r2, r3
 8013a54:	d10c      	bne.n	8013a70 <UART_SetConfig+0x1f0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8013a56:	6861      	ldr	r1, [r4, #4]
 8013a58:	2080      	movs	r0, #128	; 0x80
 8013a5a:	0240      	lsls	r0, r0, #9
 8013a5c:	f7ec fb78 	bl	8000150 <__udivsi3>
 8013a60:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8013a62:	2000      	movs	r0, #0
        break;
 8013a64:	e7d2      	b.n	8013a0c <UART_SetConfig+0x18c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013a66:	2380      	movs	r3, #128	; 0x80
 8013a68:	021b      	lsls	r3, r3, #8
 8013a6a:	69e2      	ldr	r2, [r4, #28]
 8013a6c:	429a      	cmp	r2, r3
 8013a6e:	d0f2      	beq.n	8013a56 <UART_SetConfig+0x1d6>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8013a70:	6861      	ldr	r1, [r4, #4]
 8013a72:	2080      	movs	r0, #128	; 0x80
 8013a74:	0200      	lsls	r0, r0, #8
 8013a76:	f7ec fb6b 	bl	8000150 <__udivsi3>
 8013a7a:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8013a7c:	2000      	movs	r0, #0
        break;
 8013a7e:	e7ce      	b.n	8013a1e <UART_SetConfig+0x19e>
 8013a80:	efff69f3 	.word	0xefff69f3
 8013a84:	ffffcfff 	.word	0xffffcfff
 8013a88:	fffff4ff 	.word	0xfffff4ff
 8013a8c:	40013800 	.word	0x40013800
 8013a90:	40004400 	.word	0x40004400
 8013a94:	40004800 	.word	0x40004800
 8013a98:	40004c00 	.word	0x40004c00
 8013a9c:	40005000 	.word	0x40005000
 8013aa0:	40011400 	.word	0x40011400
 8013aa4:	40011800 	.word	0x40011800
 8013aa8:	40011c00 	.word	0x40011c00
 8013aac:	40021000 	.word	0x40021000
 8013ab0:	007a1200 	.word	0x007a1200
 8013ab4:	00f42400 	.word	0x00f42400

08013ab8 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013ab8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013aba:	07db      	lsls	r3, r3, #31
 8013abc:	d506      	bpl.n	8013acc <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013abe:	6802      	ldr	r2, [r0, #0]
 8013ac0:	6853      	ldr	r3, [r2, #4]
 8013ac2:	492c      	ldr	r1, [pc, #176]	; (8013b74 <UART_AdvFeatureConfig+0xbc>)
 8013ac4:	400b      	ands	r3, r1
 8013ac6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8013ac8:	430b      	orrs	r3, r1
 8013aca:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013acc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013ace:	079b      	lsls	r3, r3, #30
 8013ad0:	d506      	bpl.n	8013ae0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013ad2:	6802      	ldr	r2, [r0, #0]
 8013ad4:	6853      	ldr	r3, [r2, #4]
 8013ad6:	4928      	ldr	r1, [pc, #160]	; (8013b78 <UART_AdvFeatureConfig+0xc0>)
 8013ad8:	400b      	ands	r3, r1
 8013ada:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8013adc:	430b      	orrs	r3, r1
 8013ade:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013ae0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013ae2:	075b      	lsls	r3, r3, #29
 8013ae4:	d506      	bpl.n	8013af4 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013ae6:	6802      	ldr	r2, [r0, #0]
 8013ae8:	6853      	ldr	r3, [r2, #4]
 8013aea:	4924      	ldr	r1, [pc, #144]	; (8013b7c <UART_AdvFeatureConfig+0xc4>)
 8013aec:	400b      	ands	r3, r1
 8013aee:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8013af0:	430b      	orrs	r3, r1
 8013af2:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013af4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013af6:	071b      	lsls	r3, r3, #28
 8013af8:	d506      	bpl.n	8013b08 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013afa:	6802      	ldr	r2, [r0, #0]
 8013afc:	6853      	ldr	r3, [r2, #4]
 8013afe:	4920      	ldr	r1, [pc, #128]	; (8013b80 <UART_AdvFeatureConfig+0xc8>)
 8013b00:	400b      	ands	r3, r1
 8013b02:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8013b04:	430b      	orrs	r3, r1
 8013b06:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013b08:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013b0a:	06db      	lsls	r3, r3, #27
 8013b0c:	d506      	bpl.n	8013b1c <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013b0e:	6802      	ldr	r2, [r0, #0]
 8013b10:	6893      	ldr	r3, [r2, #8]
 8013b12:	491c      	ldr	r1, [pc, #112]	; (8013b84 <UART_AdvFeatureConfig+0xcc>)
 8013b14:	400b      	ands	r3, r1
 8013b16:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8013b18:	430b      	orrs	r3, r1
 8013b1a:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013b1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013b1e:	069b      	lsls	r3, r3, #26
 8013b20:	d506      	bpl.n	8013b30 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013b22:	6802      	ldr	r2, [r0, #0]
 8013b24:	6893      	ldr	r3, [r2, #8]
 8013b26:	4918      	ldr	r1, [pc, #96]	; (8013b88 <UART_AdvFeatureConfig+0xd0>)
 8013b28:	400b      	ands	r3, r1
 8013b2a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8013b2c:	430b      	orrs	r3, r1
 8013b2e:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013b30:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013b32:	065b      	lsls	r3, r3, #25
 8013b34:	d50b      	bpl.n	8013b4e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013b36:	6802      	ldr	r2, [r0, #0]
 8013b38:	6853      	ldr	r3, [r2, #4]
 8013b3a:	4914      	ldr	r1, [pc, #80]	; (8013b8c <UART_AdvFeatureConfig+0xd4>)
 8013b3c:	400b      	ands	r3, r1
 8013b3e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8013b40:	430b      	orrs	r3, r1
 8013b42:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013b44:	2380      	movs	r3, #128	; 0x80
 8013b46:	035b      	lsls	r3, r3, #13
 8013b48:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8013b4a:	429a      	cmp	r2, r3
 8013b4c:	d00a      	beq.n	8013b64 <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013b4e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013b50:	061b      	lsls	r3, r3, #24
 8013b52:	d506      	bpl.n	8013b62 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013b54:	6802      	ldr	r2, [r0, #0]
 8013b56:	6853      	ldr	r3, [r2, #4]
 8013b58:	490d      	ldr	r1, [pc, #52]	; (8013b90 <UART_AdvFeatureConfig+0xd8>)
 8013b5a:	400b      	ands	r3, r1
 8013b5c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8013b5e:	430b      	orrs	r3, r1
 8013b60:	6053      	str	r3, [r2, #4]
}
 8013b62:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013b64:	6802      	ldr	r2, [r0, #0]
 8013b66:	6853      	ldr	r3, [r2, #4]
 8013b68:	490a      	ldr	r1, [pc, #40]	; (8013b94 <UART_AdvFeatureConfig+0xdc>)
 8013b6a:	400b      	ands	r3, r1
 8013b6c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8013b6e:	430b      	orrs	r3, r1
 8013b70:	6053      	str	r3, [r2, #4]
 8013b72:	e7ec      	b.n	8013b4e <UART_AdvFeatureConfig+0x96>
 8013b74:	fffdffff 	.word	0xfffdffff
 8013b78:	fffeffff 	.word	0xfffeffff
 8013b7c:	fffbffff 	.word	0xfffbffff
 8013b80:	ffff7fff 	.word	0xffff7fff
 8013b84:	ffffefff 	.word	0xffffefff
 8013b88:	ffffdfff 	.word	0xffffdfff
 8013b8c:	ffefffff 	.word	0xffefffff
 8013b90:	fff7ffff 	.word	0xfff7ffff
 8013b94:	ff9fffff 	.word	0xff9fffff

08013b98 <UART_WaitOnFlagUntilTimeout>:
{
 8013b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013b9a:	46c6      	mov	lr, r8
 8013b9c:	b500      	push	{lr}
 8013b9e:	0007      	movs	r7, r0
 8013ba0:	000c      	movs	r4, r1
 8013ba2:	0016      	movs	r6, r2
 8013ba4:	001d      	movs	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8013ba6:	f7fd f817 	bl	8010bd8 <HAL_GetTick>
 8013baa:	4680      	mov	r8, r0
  if(Status == RESET)
 8013bac:	2e00      	cmp	r6, #0
 8013bae:	d029      	beq.n	8013c04 <UART_WaitOnFlagUntilTimeout+0x6c>
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 8013bb0:	683b      	ldr	r3, [r7, #0]
 8013bb2:	69da      	ldr	r2, [r3, #28]
 8013bb4:	4022      	ands	r2, r4
 8013bb6:	42a2      	cmp	r2, r4
 8013bb8:	d152      	bne.n	8013c60 <UART_WaitOnFlagUntilTimeout+0xc8>
      if(Timeout != HAL_MAX_DELAY)
 8013bba:	1c6a      	adds	r2, r5, #1
 8013bbc:	d0f9      	beq.n	8013bb2 <UART_WaitOnFlagUntilTimeout+0x1a>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8013bbe:	2d00      	cmp	r5, #0
 8013bc0:	d005      	beq.n	8013bce <UART_WaitOnFlagUntilTimeout+0x36>
 8013bc2:	f7fd f809 	bl	8010bd8 <HAL_GetTick>
 8013bc6:	4643      	mov	r3, r8
 8013bc8:	1ac0      	subs	r0, r0, r3
 8013bca:	42a8      	cmp	r0, r5
 8013bcc:	d9f0      	bls.n	8013bb0 <UART_WaitOnFlagUntilTimeout+0x18>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013bce:	683a      	ldr	r2, [r7, #0]
 8013bd0:	6813      	ldr	r3, [r2, #0]
 8013bd2:	2180      	movs	r1, #128	; 0x80
 8013bd4:	438b      	bics	r3, r1
 8013bd6:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013bd8:	683a      	ldr	r2, [r7, #0]
 8013bda:	6813      	ldr	r3, [r2, #0]
 8013bdc:	3960      	subs	r1, #96	; 0x60
 8013bde:	438b      	bics	r3, r1
 8013be0:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013be2:	683a      	ldr	r2, [r7, #0]
 8013be4:	6813      	ldr	r3, [r2, #0]
 8013be6:	491f      	ldr	r1, [pc, #124]	; (8013c64 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8013be8:	400b      	ands	r3, r1
 8013bea:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013bec:	6839      	ldr	r1, [r7, #0]
 8013bee:	688b      	ldr	r3, [r1, #8]
 8013bf0:	2201      	movs	r2, #1
 8013bf2:	4393      	bics	r3, r2
 8013bf4:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8013bf6:	2369      	movs	r3, #105	; 0x69
 8013bf8:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(huart);
 8013bfa:	3b01      	subs	r3, #1
 8013bfc:	2200      	movs	r2, #0
 8013bfe:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8013c00:	2003      	movs	r0, #3
 8013c02:	e02a      	b.n	8013c5a <UART_WaitOnFlagUntilTimeout+0xc2>
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 8013c04:	683b      	ldr	r3, [r7, #0]
 8013c06:	69d9      	ldr	r1, [r3, #28]
 8013c08:	4021      	ands	r1, r4
 8013c0a:	42a1      	cmp	r1, r4
 8013c0c:	d024      	beq.n	8013c58 <UART_WaitOnFlagUntilTimeout+0xc0>
      if(Timeout != HAL_MAX_DELAY)
 8013c0e:	1c6a      	adds	r2, r5, #1
 8013c10:	d0f9      	beq.n	8013c06 <UART_WaitOnFlagUntilTimeout+0x6e>
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8013c12:	2d00      	cmp	r5, #0
 8013c14:	d005      	beq.n	8013c22 <UART_WaitOnFlagUntilTimeout+0x8a>
 8013c16:	f7fc ffdf 	bl	8010bd8 <HAL_GetTick>
 8013c1a:	4643      	mov	r3, r8
 8013c1c:	1ac0      	subs	r0, r0, r3
 8013c1e:	42a8      	cmp	r0, r5
 8013c20:	d9f0      	bls.n	8013c04 <UART_WaitOnFlagUntilTimeout+0x6c>
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013c22:	683a      	ldr	r2, [r7, #0]
 8013c24:	6813      	ldr	r3, [r2, #0]
 8013c26:	2180      	movs	r1, #128	; 0x80
 8013c28:	438b      	bics	r3, r1
 8013c2a:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013c2c:	683a      	ldr	r2, [r7, #0]
 8013c2e:	6813      	ldr	r3, [r2, #0]
 8013c30:	3960      	subs	r1, #96	; 0x60
 8013c32:	438b      	bics	r3, r1
 8013c34:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013c36:	683a      	ldr	r2, [r7, #0]
 8013c38:	6813      	ldr	r3, [r2, #0]
 8013c3a:	490a      	ldr	r1, [pc, #40]	; (8013c64 <UART_WaitOnFlagUntilTimeout+0xcc>)
 8013c3c:	400b      	ands	r3, r1
 8013c3e:	6013      	str	r3, [r2, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013c40:	6839      	ldr	r1, [r7, #0]
 8013c42:	688b      	ldr	r3, [r1, #8]
 8013c44:	2201      	movs	r2, #1
 8013c46:	4393      	bics	r3, r2
 8013c48:	608b      	str	r3, [r1, #8]
          huart->State = HAL_UART_STATE_READY;
 8013c4a:	2369      	movs	r3, #105	; 0x69
 8013c4c:	54fa      	strb	r2, [r7, r3]
          __HAL_UNLOCK(huart);
 8013c4e:	3b01      	subs	r3, #1
 8013c50:	2200      	movs	r2, #0
 8013c52:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8013c54:	2003      	movs	r0, #3
 8013c56:	e000      	b.n	8013c5a <UART_WaitOnFlagUntilTimeout+0xc2>
  return HAL_OK;
 8013c58:	0030      	movs	r0, r6
}
 8013c5a:	bc80      	pop	{r7}
 8013c5c:	46b8      	mov	r8, r7
 8013c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  return HAL_OK;
 8013c60:	2000      	movs	r0, #0
 8013c62:	e7fa      	b.n	8013c5a <UART_WaitOnFlagUntilTimeout+0xc2>
 8013c64:	fffffeff 	.word	0xfffffeff

08013c68 <HAL_UART_Transmit>:
{
 8013c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c6a:	46c6      	mov	lr, r8
 8013c6c:	b500      	push	{lr}
 8013c6e:	0004      	movs	r4, r0
 8013c70:	000d      	movs	r5, r1
 8013c72:	001f      	movs	r7, r3
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8013c74:	2369      	movs	r3, #105	; 0x69
 8013c76:	5cc3      	ldrb	r3, [r0, r3]
 8013c78:	2b01      	cmp	r3, #1
 8013c7a:	d003      	beq.n	8013c84 <HAL_UART_Transmit+0x1c>
 8013c7c:	2369      	movs	r3, #105	; 0x69
 8013c7e:	5cc3      	ldrb	r3, [r0, r3]
 8013c80:	2b22      	cmp	r3, #34	; 0x22
 8013c82:	d152      	bne.n	8013d2a <HAL_UART_Transmit+0xc2>
    if((pData == NULL ) || (Size == 0))
 8013c84:	2d00      	cmp	r5, #0
 8013c86:	d054      	beq.n	8013d32 <HAL_UART_Transmit+0xca>
 8013c88:	2a00      	cmp	r2, #0
 8013c8a:	d054      	beq.n	8013d36 <HAL_UART_Transmit+0xce>
    __HAL_LOCK(huart);
 8013c8c:	2368      	movs	r3, #104	; 0x68
 8013c8e:	5ce3      	ldrb	r3, [r4, r3]
 8013c90:	2b01      	cmp	r3, #1
 8013c92:	d052      	beq.n	8013d3a <HAL_UART_Transmit+0xd2>
 8013c94:	2368      	movs	r3, #104	; 0x68
 8013c96:	2101      	movs	r1, #1
 8013c98:	54e1      	strb	r1, [r4, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	66e3      	str	r3, [r4, #108]	; 0x6c
    if(huart->State == HAL_UART_STATE_BUSY_RX)
 8013c9e:	3369      	adds	r3, #105	; 0x69
 8013ca0:	5ce3      	ldrb	r3, [r4, r3]
 8013ca2:	2b22      	cmp	r3, #34	; 0x22
 8013ca4:	d009      	beq.n	8013cba <HAL_UART_Transmit+0x52>
      huart->State = HAL_UART_STATE_BUSY_TX;
 8013ca6:	2369      	movs	r3, #105	; 0x69
 8013ca8:	2112      	movs	r1, #18
 8013caa:	54e1      	strb	r1, [r4, r3]
    huart->TxXferSize = Size;
 8013cac:	2350      	movs	r3, #80	; 0x50
 8013cae:	52e2      	strh	r2, [r4, r3]
      huart->TxXferCount--;
 8013cb0:	2652      	movs	r6, #82	; 0x52
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013cb2:	2380      	movs	r3, #128	; 0x80
 8013cb4:	015b      	lsls	r3, r3, #5
 8013cb6:	4698      	mov	r8, r3
 8013cb8:	e00a      	b.n	8013cd0 <HAL_UART_Transmit+0x68>
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8013cba:	3347      	adds	r3, #71	; 0x47
 8013cbc:	3131      	adds	r1, #49	; 0x31
 8013cbe:	54e1      	strb	r1, [r4, r3]
 8013cc0:	e7f4      	b.n	8013cac <HAL_UART_Transmit+0x44>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8013cc2:	782b      	ldrb	r3, [r5, #0]
 8013cc4:	6822      	ldr	r2, [r4, #0]
 8013cc6:	8513      	strh	r3, [r2, #40]	; 0x28
 8013cc8:	3501      	adds	r5, #1
    while(huart->TxXferCount > 0)
 8013cca:	5ba2      	ldrh	r2, [r4, r6]
 8013ccc:	2a00      	cmp	r2, #0
 8013cce:	d016      	beq.n	8013cfe <HAL_UART_Transmit+0x96>
      huart->TxXferCount--;
 8013cd0:	3a01      	subs	r2, #1
 8013cd2:	53a2      	strh	r2, [r4, r6]
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8013cd4:	003b      	movs	r3, r7
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	2180      	movs	r1, #128	; 0x80
 8013cda:	0020      	movs	r0, r4
 8013cdc:	f7ff ff5c 	bl	8013b98 <UART_WaitOnFlagUntilTimeout>
 8013ce0:	2800      	cmp	r0, #0
 8013ce2:	d12c      	bne.n	8013d3e <HAL_UART_Transmit+0xd6>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013ce4:	68a3      	ldr	r3, [r4, #8]
 8013ce6:	4543      	cmp	r3, r8
 8013ce8:	d1eb      	bne.n	8013cc2 <HAL_UART_Transmit+0x5a>
 8013cea:	6923      	ldr	r3, [r4, #16]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d1e8      	bne.n	8013cc2 <HAL_UART_Transmit+0x5a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8013cf0:	882b      	ldrh	r3, [r5, #0]
 8013cf2:	05db      	lsls	r3, r3, #23
 8013cf4:	0ddb      	lsrs	r3, r3, #23
 8013cf6:	6822      	ldr	r2, [r4, #0]
 8013cf8:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2;
 8013cfa:	3502      	adds	r5, #2
 8013cfc:	e7e5      	b.n	8013cca <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 8013cfe:	003b      	movs	r3, r7
 8013d00:	2140      	movs	r1, #64	; 0x40
 8013d02:	0020      	movs	r0, r4
 8013d04:	f7ff ff48 	bl	8013b98 <UART_WaitOnFlagUntilTimeout>
 8013d08:	2800      	cmp	r0, #0
 8013d0a:	d11a      	bne.n	8013d42 <HAL_UART_Transmit+0xda>
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013d0c:	2369      	movs	r3, #105	; 0x69
 8013d0e:	5ce3      	ldrb	r3, [r4, r3]
 8013d10:	2b32      	cmp	r3, #50	; 0x32
 8013d12:	d006      	beq.n	8013d22 <HAL_UART_Transmit+0xba>
      huart->State = HAL_UART_STATE_READY;
 8013d14:	2369      	movs	r3, #105	; 0x69
 8013d16:	2201      	movs	r2, #1
 8013d18:	54e2      	strb	r2, [r4, r3]
    __HAL_UNLOCK(huart);
 8013d1a:	2368      	movs	r3, #104	; 0x68
 8013d1c:	2200      	movs	r2, #0
 8013d1e:	54e2      	strb	r2, [r4, r3]
    return HAL_OK;
 8013d20:	e004      	b.n	8013d2c <HAL_UART_Transmit+0xc4>
      huart->State = HAL_UART_STATE_BUSY_RX;
 8013d22:	3337      	adds	r3, #55	; 0x37
 8013d24:	2222      	movs	r2, #34	; 0x22
 8013d26:	54e2      	strb	r2, [r4, r3]
 8013d28:	e7f7      	b.n	8013d1a <HAL_UART_Transmit+0xb2>
    return HAL_BUSY;
 8013d2a:	2002      	movs	r0, #2
}
 8013d2c:	bc80      	pop	{r7}
 8013d2e:	46b8      	mov	r8, r7
 8013d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8013d32:	2001      	movs	r0, #1
 8013d34:	e7fa      	b.n	8013d2c <HAL_UART_Transmit+0xc4>
 8013d36:	2001      	movs	r0, #1
 8013d38:	e7f8      	b.n	8013d2c <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8013d3a:	2002      	movs	r0, #2
 8013d3c:	e7f6      	b.n	8013d2c <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 8013d3e:	2003      	movs	r0, #3
 8013d40:	e7f4      	b.n	8013d2c <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 8013d42:	2003      	movs	r0, #3
 8013d44:	e7f2      	b.n	8013d2c <HAL_UART_Transmit+0xc4>
	...

08013d48 <UART_CheckIdleState>:
{
 8013d48:	b510      	push	{r4, lr}
 8013d4a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	66c3      	str	r3, [r0, #108]	; 0x6c
  if (IS_UART_WAKEUP_INSTANCE(huart->Instance))
 8013d50:	6803      	ldr	r3, [r0, #0]
 8013d52:	4a18      	ldr	r2, [pc, #96]	; (8013db4 <UART_CheckIdleState+0x6c>)
 8013d54:	4293      	cmp	r3, r2
 8013d56:	d005      	beq.n	8013d64 <UART_CheckIdleState+0x1c>
 8013d58:	4a17      	ldr	r2, [pc, #92]	; (8013db8 <UART_CheckIdleState+0x70>)
 8013d5a:	4293      	cmp	r3, r2
 8013d5c:	d002      	beq.n	8013d64 <UART_CheckIdleState+0x1c>
 8013d5e:	4a17      	ldr	r2, [pc, #92]	; (8013dbc <UART_CheckIdleState+0x74>)
 8013d60:	4293      	cmp	r3, r2
 8013d62:	d106      	bne.n	8013d72 <UART_CheckIdleState+0x2a>
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	071b      	lsls	r3, r3, #28
 8013d68:	d40b      	bmi.n	8013d82 <UART_CheckIdleState+0x3a>
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013d6a:	6823      	ldr	r3, [r4, #0]
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	075b      	lsls	r3, r3, #29
 8013d70:	d413      	bmi.n	8013d9a <UART_CheckIdleState+0x52>
  huart->State= HAL_UART_STATE_READY;
 8013d72:	2369      	movs	r3, #105	; 0x69
 8013d74:	2201      	movs	r2, #1
 8013d76:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(huart);
 8013d78:	3b01      	subs	r3, #1
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8013d7e:	2000      	movs	r0, #0
}
 8013d80:	bd10      	pop	{r4, pc}
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8013d82:	23fa      	movs	r3, #250	; 0xfa
 8013d84:	2180      	movs	r1, #128	; 0x80
 8013d86:	009b      	lsls	r3, r3, #2
 8013d88:	2200      	movs	r2, #0
 8013d8a:	0389      	lsls	r1, r1, #14
 8013d8c:	0020      	movs	r0, r4
 8013d8e:	f7ff ff03 	bl	8013b98 <UART_WaitOnFlagUntilTimeout>
 8013d92:	2800      	cmp	r0, #0
 8013d94:	d0e9      	beq.n	8013d6a <UART_CheckIdleState+0x22>
        return HAL_TIMEOUT;
 8013d96:	2003      	movs	r0, #3
 8013d98:	e7f2      	b.n	8013d80 <UART_CheckIdleState+0x38>
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  UART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8013d9a:	23fa      	movs	r3, #250	; 0xfa
 8013d9c:	2180      	movs	r1, #128	; 0x80
 8013d9e:	009b      	lsls	r3, r3, #2
 8013da0:	2200      	movs	r2, #0
 8013da2:	03c9      	lsls	r1, r1, #15
 8013da4:	0020      	movs	r0, r4
 8013da6:	f7ff fef7 	bl	8013b98 <UART_WaitOnFlagUntilTimeout>
 8013daa:	2800      	cmp	r0, #0
 8013dac:	d0e1      	beq.n	8013d72 <UART_CheckIdleState+0x2a>
        return HAL_TIMEOUT;
 8013dae:	2003      	movs	r0, #3
 8013db0:	e7e6      	b.n	8013d80 <UART_CheckIdleState+0x38>
 8013db2:	46c0      	nop			; (mov r8, r8)
 8013db4:	40013800 	.word	0x40013800
 8013db8:	40004400 	.word	0x40004400
 8013dbc:	40004800 	.word	0x40004800

08013dc0 <HAL_UART_Init>:
{
 8013dc0:	b510      	push	{r4, lr}
 8013dc2:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 8013dc4:	d030      	beq.n	8013e28 <HAL_UART_Init+0x68>
  if(huart->State == HAL_UART_STATE_RESET)
 8013dc6:	2369      	movs	r3, #105	; 0x69
 8013dc8:	5cc3      	ldrb	r3, [r0, r3]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d022      	beq.n	8013e14 <HAL_UART_Init+0x54>
  huart->State = HAL_UART_STATE_BUSY;
 8013dce:	2369      	movs	r3, #105	; 0x69
 8013dd0:	2202      	movs	r2, #2
 8013dd2:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8013dd4:	6822      	ldr	r2, [r4, #0]
 8013dd6:	6813      	ldr	r3, [r2, #0]
 8013dd8:	2101      	movs	r1, #1
 8013dda:	438b      	bics	r3, r1
 8013ddc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013dde:	0020      	movs	r0, r4
 8013de0:	f7ff fd4e 	bl	8013880 <UART_SetConfig>
 8013de4:	2801      	cmp	r0, #1
 8013de6:	d014      	beq.n	8013e12 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013de8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d118      	bne.n	8013e20 <HAL_UART_Init+0x60>
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8013dee:	6822      	ldr	r2, [r4, #0]
 8013df0:	6853      	ldr	r3, [r2, #4]
 8013df2:	490e      	ldr	r1, [pc, #56]	; (8013e2c <HAL_UART_Init+0x6c>)
 8013df4:	400b      	ands	r3, r1
 8013df6:	6053      	str	r3, [r2, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8013df8:	6822      	ldr	r2, [r4, #0]
 8013dfa:	6893      	ldr	r3, [r2, #8]
 8013dfc:	212a      	movs	r1, #42	; 0x2a
 8013dfe:	438b      	bics	r3, r1
 8013e00:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8013e02:	6822      	ldr	r2, [r4, #0]
 8013e04:	6813      	ldr	r3, [r2, #0]
 8013e06:	3929      	subs	r1, #41	; 0x29
 8013e08:	430b      	orrs	r3, r1
 8013e0a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8013e0c:	0020      	movs	r0, r4
 8013e0e:	f7ff ff9b 	bl	8013d48 <UART_CheckIdleState>
}
 8013e12:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8013e14:	3368      	adds	r3, #104	; 0x68
 8013e16:	2200      	movs	r2, #0
 8013e18:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8013e1a:	f7f9 ffdf 	bl	800dddc <HAL_UART_MspInit>
 8013e1e:	e7d6      	b.n	8013dce <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8013e20:	0020      	movs	r0, r4
 8013e22:	f7ff fe49 	bl	8013ab8 <UART_AdvFeatureConfig>
 8013e26:	e7e2      	b.n	8013dee <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8013e28:	2001      	movs	r0, #1
 8013e2a:	e7f2      	b.n	8013e12 <HAL_UART_Init+0x52>
 8013e2c:	ffffb7ff 	.word	0xffffb7ff

08013e30 <UART_Transmit_IT>:
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013e30:	2369      	movs	r3, #105	; 0x69
 8013e32:	5cc3      	ldrb	r3, [r0, r3]
 8013e34:	2b12      	cmp	r3, #18
 8013e36:	d003      	beq.n	8013e40 <UART_Transmit_IT+0x10>
 8013e38:	2369      	movs	r3, #105	; 0x69
 8013e3a:	5cc3      	ldrb	r3, [r0, r3]
 8013e3c:	2b32      	cmp	r3, #50	; 0x32
 8013e3e:	d12d      	bne.n	8013e9c <UART_Transmit_IT+0x6c>
  {

    if(huart->TxXferCount == 0)
 8013e40:	2352      	movs	r3, #82	; 0x52
 8013e42:	5ac3      	ldrh	r3, [r0, r3]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d10b      	bne.n	8013e60 <UART_Transmit_IT+0x30>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8013e48:	6802      	ldr	r2, [r0, #0]
 8013e4a:	6813      	ldr	r3, [r2, #0]
 8013e4c:	2180      	movs	r1, #128	; 0x80
 8013e4e:	438b      	bics	r3, r1
 8013e50:	6013      	str	r3, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8013e52:	6802      	ldr	r2, [r0, #0]
 8013e54:	6813      	ldr	r3, [r2, #0]
 8013e56:	3940      	subs	r1, #64	; 0x40
 8013e58:	430b      	orrs	r3, r1
 8013e5a:	6013      	str	r3, [r2, #0]

      return HAL_OK;
 8013e5c:	2000      	movs	r0, #0
 8013e5e:	e00f      	b.n	8013e80 <UART_Transmit_IT+0x50>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013e60:	2380      	movs	r3, #128	; 0x80
 8013e62:	015b      	lsls	r3, r3, #5
 8013e64:	6882      	ldr	r2, [r0, #8]
 8013e66:	429a      	cmp	r2, r3
 8013e68:	d00b      	beq.n	8013e82 <UART_Transmit_IT+0x52>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
        huart->pTxBuffPtr += 2;
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8013e6a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013e6c:	1c5a      	adds	r2, r3, #1
 8013e6e:	64c2      	str	r2, [r0, #76]	; 0x4c
 8013e70:	781b      	ldrb	r3, [r3, #0]
 8013e72:	6802      	ldr	r2, [r0, #0]
 8013e74:	8513      	strh	r3, [r2, #40]	; 0x28
      }

      huart->TxXferCount--;
 8013e76:	2252      	movs	r2, #82	; 0x52
 8013e78:	5a83      	ldrh	r3, [r0, r2]
 8013e7a:	3b01      	subs	r3, #1
 8013e7c:	5283      	strh	r3, [r0, r2]

      return HAL_OK;
 8013e7e:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8013e80:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013e82:	6903      	ldr	r3, [r0, #16]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d1f0      	bne.n	8013e6a <UART_Transmit_IT+0x3a>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8013e88:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013e8a:	881b      	ldrh	r3, [r3, #0]
 8013e8c:	05db      	lsls	r3, r3, #23
 8013e8e:	0ddb      	lsrs	r3, r3, #23
 8013e90:	6802      	ldr	r2, [r0, #0]
 8013e92:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8013e94:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8013e96:	3302      	adds	r3, #2
 8013e98:	64c3      	str	r3, [r0, #76]	; 0x4c
 8013e9a:	e7ec      	b.n	8013e76 <UART_Transmit_IT+0x46>
    return HAL_BUSY;
 8013e9c:	2002      	movs	r0, #2
 8013e9e:	e7ef      	b.n	8013e80 <UART_Transmit_IT+0x50>

08013ea0 <UART_EndTransmit_IT>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8013ea0:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8013ea2:	6802      	ldr	r2, [r0, #0]
 8013ea4:	6813      	ldr	r3, [r2, #0]
 8013ea6:	2140      	movs	r1, #64	; 0x40
 8013ea8:	438b      	bics	r3, r1
 8013eaa:	6013      	str	r3, [r2, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013eac:	2369      	movs	r3, #105	; 0x69
 8013eae:	5cc3      	ldrb	r3, [r0, r3]
 8013eb0:	2b32      	cmp	r3, #50	; 0x32
 8013eb2:	d00a      	beq.n	8013eca <UART_EndTransmit_IT+0x2a>
    huart->State = HAL_UART_STATE_BUSY_RX;
  }
  else
  {
    /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013eb4:	6801      	ldr	r1, [r0, #0]
 8013eb6:	688b      	ldr	r3, [r1, #8]
 8013eb8:	2201      	movs	r2, #1
 8013eba:	4393      	bics	r3, r2
 8013ebc:	608b      	str	r3, [r1, #8]

    huart->State = HAL_UART_STATE_READY;
 8013ebe:	2369      	movs	r3, #105	; 0x69
 8013ec0:	54c2      	strb	r2, [r0, r3]
  }

  HAL_UART_TxCpltCallback(huart);
 8013ec2:	f7f9 fca5 	bl	800d810 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8013ec6:	2000      	movs	r0, #0
 8013ec8:	bd10      	pop	{r4, pc}
    huart->State = HAL_UART_STATE_BUSY_RX;
 8013eca:	3337      	adds	r3, #55	; 0x37
 8013ecc:	2222      	movs	r2, #34	; 0x22
 8013ece:	54c2      	strb	r2, [r0, r3]
 8013ed0:	e7f7      	b.n	8013ec2 <UART_EndTransmit_IT+0x22>
	...

08013ed4 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8013ed4:	b510      	push	{r4, lr}
 8013ed6:	0003      	movs	r3, r0
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8013ed8:	2269      	movs	r2, #105	; 0x69
 8013eda:	5c82      	ldrb	r2, [r0, r2]
 8013edc:	2a22      	cmp	r2, #34	; 0x22
 8013ede:	d003      	beq.n	8013ee8 <UART_Receive_IT+0x14>
 8013ee0:	2269      	movs	r2, #105	; 0x69
 8013ee2:	5c82      	ldrb	r2, [r0, r2]
 8013ee4:	2a32      	cmp	r2, #50	; 0x32
 8013ee6:	d13f      	bne.n	8013f68 <UART_Receive_IT+0x94>
  uint16_t uhMask = huart->Mask;
 8013ee8:	225c      	movs	r2, #92	; 0x5c
 8013eea:	5a98      	ldrh	r0, [r3, r2]
  {

    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013eec:	2180      	movs	r1, #128	; 0x80
 8013eee:	0149      	lsls	r1, r1, #5
 8013ef0:	689a      	ldr	r2, [r3, #8]
 8013ef2:	428a      	cmp	r2, r1
 8013ef4:	d028      	beq.n	8013f48 <UART_Receive_IT+0x74>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
      huart->pRxBuffPtr +=2;
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8013ef6:	681a      	ldr	r2, [r3, #0]
 8013ef8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8013efa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013efc:	1c4c      	adds	r4, r1, #1
 8013efe:	655c      	str	r4, [r3, #84]	; 0x54
 8013f00:	4002      	ands	r2, r0
 8013f02:	700a      	strb	r2, [r1, #0]
    }

    if(--huart->RxXferCount == 0)
 8013f04:	215a      	movs	r1, #90	; 0x5a
 8013f06:	5a5a      	ldrh	r2, [r3, r1]
 8013f08:	3a01      	subs	r2, #1
 8013f0a:	b292      	uxth	r2, r2
 8013f0c:	525a      	strh	r2, [r3, r1]
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 8013f0e:	2000      	movs	r0, #0
    if(--huart->RxXferCount == 0)
 8013f10:	2a00      	cmp	r2, #0
 8013f12:	d118      	bne.n	8013f46 <UART_Receive_IT+0x72>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8013f14:	6819      	ldr	r1, [r3, #0]
 8013f16:	680a      	ldr	r2, [r1, #0]
 8013f18:	3020      	adds	r0, #32
 8013f1a:	4382      	bics	r2, r0
 8013f1c:	600a      	str	r2, [r1, #0]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8013f1e:	2269      	movs	r2, #105	; 0x69
 8013f20:	5c9a      	ldrb	r2, [r3, r2]
 8013f22:	2a32      	cmp	r2, #50	; 0x32
 8013f24:	d01c      	beq.n	8013f60 <UART_Receive_IT+0x8c>
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8013f26:	6819      	ldr	r1, [r3, #0]
 8013f28:	680a      	ldr	r2, [r1, #0]
 8013f2a:	4810      	ldr	r0, [pc, #64]	; (8013f6c <UART_Receive_IT+0x98>)
 8013f2c:	4002      	ands	r2, r0
 8013f2e:	600a      	str	r2, [r1, #0]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8013f30:	6818      	ldr	r0, [r3, #0]
 8013f32:	6882      	ldr	r2, [r0, #8]
 8013f34:	2101      	movs	r1, #1
 8013f36:	438a      	bics	r2, r1
 8013f38:	6082      	str	r2, [r0, #8]
        huart->State = HAL_UART_STATE_READY;
 8013f3a:	2269      	movs	r2, #105	; 0x69
 8013f3c:	5499      	strb	r1, [r3, r2]
      HAL_UART_RxCpltCallback(huart);
 8013f3e:	0018      	movs	r0, r3
 8013f40:	f7f9 fca4 	bl	800d88c <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8013f44:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8013f46:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013f48:	691a      	ldr	r2, [r3, #16]
 8013f4a:	2a00      	cmp	r2, #0
 8013f4c:	d1d3      	bne.n	8013ef6 <UART_Receive_IT+0x22>
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8013f4e:	681a      	ldr	r2, [r3, #0]
 8013f50:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8013f52:	4002      	ands	r2, r0
 8013f54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013f56:	800a      	strh	r2, [r1, #0]
      huart->pRxBuffPtr +=2;
 8013f58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013f5a:	3202      	adds	r2, #2
 8013f5c:	655a      	str	r2, [r3, #84]	; 0x54
 8013f5e:	e7d1      	b.n	8013f04 <UART_Receive_IT+0x30>
        huart->State = HAL_UART_STATE_BUSY_TX;
 8013f60:	3237      	adds	r2, #55	; 0x37
 8013f62:	2112      	movs	r1, #18
 8013f64:	5499      	strb	r1, [r3, r2]
 8013f66:	e7ea      	b.n	8013f3e <UART_Receive_IT+0x6a>
    return HAL_BUSY;
 8013f68:	2002      	movs	r0, #2
 8013f6a:	e7ec      	b.n	8013f46 <UART_Receive_IT+0x72>
 8013f6c:	fffffeff 	.word	0xfffffeff

08013f70 <HAL_UARTEx_WakeupCallback>:
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file
   */ 
}
 8013f70:	4770      	bx	lr

08013f72 <HAL_UART_IRQHandler>:
{
 8013f72:	b510      	push	{r4, lr}
 8013f74:	0004      	movs	r4, r0
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 8013f76:	6803      	ldr	r3, [r0, #0]
 8013f78:	69da      	ldr	r2, [r3, #28]
 8013f7a:	07d2      	lsls	r2, r2, #31
 8013f7c:	d509      	bpl.n	8013f92 <HAL_UART_IRQHandler+0x20>
 8013f7e:	681a      	ldr	r2, [r3, #0]
 8013f80:	05d2      	lsls	r2, r2, #23
 8013f82:	d506      	bpl.n	8013f92 <HAL_UART_IRQHandler+0x20>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8013f84:	2201      	movs	r2, #1
 8013f86:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013f88:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8013f8a:	4313      	orrs	r3, r2
 8013f8c:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013f8e:	2369      	movs	r3, #105	; 0x69
 8013f90:	54c2      	strb	r2, [r0, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013f92:	6823      	ldr	r3, [r4, #0]
 8013f94:	69da      	ldr	r2, [r3, #28]
 8013f96:	0792      	lsls	r2, r2, #30
 8013f98:	d50b      	bpl.n	8013fb2 <HAL_UART_IRQHandler+0x40>
 8013f9a:	689a      	ldr	r2, [r3, #8]
 8013f9c:	07d2      	lsls	r2, r2, #31
 8013f9e:	d508      	bpl.n	8013fb2 <HAL_UART_IRQHandler+0x40>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8013fa0:	2202      	movs	r2, #2
 8013fa2:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013fa4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013fa6:	3202      	adds	r2, #2
 8013fa8:	4313      	orrs	r3, r2
 8013faa:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013fac:	2369      	movs	r3, #105	; 0x69
 8013fae:	3a03      	subs	r2, #3
 8013fb0:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013fb2:	6823      	ldr	r3, [r4, #0]
 8013fb4:	69da      	ldr	r2, [r3, #28]
 8013fb6:	0752      	lsls	r2, r2, #29
 8013fb8:	d50b      	bpl.n	8013fd2 <HAL_UART_IRQHandler+0x60>
 8013fba:	689a      	ldr	r2, [r3, #8]
 8013fbc:	07d2      	lsls	r2, r2, #31
 8013fbe:	d508      	bpl.n	8013fd2 <HAL_UART_IRQHandler+0x60>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8013fc0:	2204      	movs	r2, #4
 8013fc2:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013fc4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013fc6:	3a02      	subs	r2, #2
 8013fc8:	4313      	orrs	r3, r2
 8013fca:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013fcc:	2369      	movs	r3, #105	; 0x69
 8013fce:	3a01      	subs	r2, #1
 8013fd0:	54e2      	strb	r2, [r4, r3]
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8013fd2:	6823      	ldr	r3, [r4, #0]
 8013fd4:	69da      	ldr	r2, [r3, #28]
 8013fd6:	0712      	lsls	r2, r2, #28
 8013fd8:	d50a      	bpl.n	8013ff0 <HAL_UART_IRQHandler+0x7e>
 8013fda:	689a      	ldr	r2, [r3, #8]
 8013fdc:	07d2      	lsls	r2, r2, #31
 8013fde:	d507      	bpl.n	8013ff0 <HAL_UART_IRQHandler+0x7e>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8013fe0:	2208      	movs	r2, #8
 8013fe2:	621a      	str	r2, [r3, #32]
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013fe4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013fe6:	4313      	orrs	r3, r2
 8013fe8:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->State = HAL_UART_STATE_READY;
 8013fea:	2369      	movs	r3, #105	; 0x69
 8013fec:	3a07      	subs	r2, #7
 8013fee:	54e2      	strb	r2, [r4, r3]
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013ff0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d11c      	bne.n	8014030 <HAL_UART_IRQHandler+0xbe>
  if((__HAL_UART_GET_IT(huart, UART_IT_WUF) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_WUF) != RESET))
 8013ff6:	6823      	ldr	r3, [r4, #0]
 8013ff8:	69da      	ldr	r2, [r3, #28]
 8013ffa:	02d2      	lsls	r2, r2, #11
 8013ffc:	d502      	bpl.n	8014004 <HAL_UART_IRQHandler+0x92>
 8013ffe:	689a      	ldr	r2, [r3, #8]
 8014000:	0252      	lsls	r2, r2, #9
 8014002:	d419      	bmi.n	8014038 <HAL_UART_IRQHandler+0xc6>
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8014004:	6823      	ldr	r3, [r4, #0]
 8014006:	69da      	ldr	r2, [r3, #28]
 8014008:	0692      	lsls	r2, r2, #26
 801400a:	d502      	bpl.n	8014012 <HAL_UART_IRQHandler+0xa0>
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	069b      	lsls	r3, r3, #26
 8014010:	d41c      	bmi.n	801404c <HAL_UART_IRQHandler+0xda>
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8014012:	6823      	ldr	r3, [r4, #0]
 8014014:	69da      	ldr	r2, [r3, #28]
 8014016:	0612      	lsls	r2, r2, #24
 8014018:	d502      	bpl.n	8014020 <HAL_UART_IRQHandler+0xae>
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	061b      	lsls	r3, r3, #24
 801401e:	d41e      	bmi.n	801405e <HAL_UART_IRQHandler+0xec>
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8014020:	6823      	ldr	r3, [r4, #0]
 8014022:	69da      	ldr	r2, [r3, #28]
 8014024:	0652      	lsls	r2, r2, #25
 8014026:	d502      	bpl.n	801402e <HAL_UART_IRQHandler+0xbc>
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	065b      	lsls	r3, r3, #25
 801402c:	d41b      	bmi.n	8014066 <HAL_UART_IRQHandler+0xf4>
}
 801402e:	bd10      	pop	{r4, pc}
    HAL_UART_ErrorCallback(huart);
 8014030:	0020      	movs	r0, r4
 8014032:	f7f9 fc05 	bl	800d840 <HAL_UART_ErrorCallback>
 8014036:	e7de      	b.n	8013ff6 <HAL_UART_IRQHandler+0x84>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8014038:	2280      	movs	r2, #128	; 0x80
 801403a:	0352      	lsls	r2, r2, #13
 801403c:	621a      	str	r2, [r3, #32]
    huart->State = HAL_UART_STATE_READY;
 801403e:	2369      	movs	r3, #105	; 0x69
 8014040:	2201      	movs	r2, #1
 8014042:	54e2      	strb	r2, [r4, r3]
    HAL_UARTEx_WakeupCallback(huart);
 8014044:	0020      	movs	r0, r4
 8014046:	f7ff ff93 	bl	8013f70 <HAL_UARTEx_WakeupCallback>
 801404a:	e7db      	b.n	8014004 <HAL_UART_IRQHandler+0x92>
    UART_Receive_IT(huart);
 801404c:	0020      	movs	r0, r4
 801404e:	f7ff ff41 	bl	8013ed4 <UART_Receive_IT>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8014052:	6822      	ldr	r2, [r4, #0]
 8014054:	6993      	ldr	r3, [r2, #24]
 8014056:	2108      	movs	r1, #8
 8014058:	430b      	orrs	r3, r1
 801405a:	6193      	str	r3, [r2, #24]
 801405c:	e7d9      	b.n	8014012 <HAL_UART_IRQHandler+0xa0>
    UART_Transmit_IT(huart);
 801405e:	0020      	movs	r0, r4
 8014060:	f7ff fee6 	bl	8013e30 <UART_Transmit_IT>
 8014064:	e7dc      	b.n	8014020 <HAL_UART_IRQHandler+0xae>
    UART_EndTransmit_IT(huart);
 8014066:	0020      	movs	r0, r4
 8014068:	f7ff ff1a 	bl	8013ea0 <UART_EndTransmit_IT>
}
 801406c:	e7df      	b.n	801402e <HAL_UART_IRQHandler+0xbc>

0801406e <main>:


/* Main functions ------------------------------------------------------------*/

int main(void)
{
 801406e:	b510      	push	{r4, lr}


  /* MCU Configuration----------------------------------------------------------*/

  /* Reset all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8014070:	f7fc fd9a 	bl	8010ba8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8014074:	f7f7 fa50 	bl	800b518 <SystemClock_Config>

  /* Initialize all user peripherals */

	/* Initialize BitzOS */
	BOS_Init();
 8014078:	f7ef fe22 	bl	8003cc0 <BOS_Init>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 801407c:	f7f4 f866 	bl	800814c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8014080:	f7fa fd38 	bl	800eaf4 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  while (1)
 8014084:	e7fe      	b.n	8014084 <main+0x16>

08014086 <UserTask>:
/* User Task */
void UserTask(void * argument)
{

  /* Infinite loop */
  for(;;)
 8014086:	e7fe      	b.n	8014086 <UserTask>

08014088 <atof>:
 8014088:	b510      	push	{r4, lr}
 801408a:	2100      	movs	r1, #0
 801408c:	f001 fb3e 	bl	801570c <strtod>
 8014090:	bd10      	pop	{r4, pc}

08014092 <atoi>:
 8014092:	b510      	push	{r4, lr}
 8014094:	220a      	movs	r2, #10
 8014096:	2100      	movs	r1, #0
 8014098:	f001 fc0e 	bl	80158b8 <strtol>
 801409c:	bd10      	pop	{r4, pc}

0801409e <atol>:
 801409e:	b510      	push	{r4, lr}
 80140a0:	220a      	movs	r2, #10
 80140a2:	2100      	movs	r1, #0
 80140a4:	f001 fc08 	bl	80158b8 <strtol>
 80140a8:	bd10      	pop	{r4, pc}
	...

080140ac <__libc_init_array>:
 80140ac:	b570      	push	{r4, r5, r6, lr}
 80140ae:	2600      	movs	r6, #0
 80140b0:	4d0c      	ldr	r5, [pc, #48]	; (80140e4 <__libc_init_array+0x38>)
 80140b2:	4c0d      	ldr	r4, [pc, #52]	; (80140e8 <__libc_init_array+0x3c>)
 80140b4:	1b64      	subs	r4, r4, r5
 80140b6:	10a4      	asrs	r4, r4, #2
 80140b8:	42a6      	cmp	r6, r4
 80140ba:	d109      	bne.n	80140d0 <__libc_init_array+0x24>
 80140bc:	2600      	movs	r6, #0
 80140be:	f006 fb6f 	bl	801a7a0 <_init>
 80140c2:	4d0a      	ldr	r5, [pc, #40]	; (80140ec <__libc_init_array+0x40>)
 80140c4:	4c0a      	ldr	r4, [pc, #40]	; (80140f0 <__libc_init_array+0x44>)
 80140c6:	1b64      	subs	r4, r4, r5
 80140c8:	10a4      	asrs	r4, r4, #2
 80140ca:	42a6      	cmp	r6, r4
 80140cc:	d105      	bne.n	80140da <__libc_init_array+0x2e>
 80140ce:	bd70      	pop	{r4, r5, r6, pc}
 80140d0:	00b3      	lsls	r3, r6, #2
 80140d2:	58eb      	ldr	r3, [r5, r3]
 80140d4:	4798      	blx	r3
 80140d6:	3601      	adds	r6, #1
 80140d8:	e7ee      	b.n	80140b8 <__libc_init_array+0xc>
 80140da:	00b3      	lsls	r3, r6, #2
 80140dc:	58eb      	ldr	r3, [r5, r3]
 80140de:	4798      	blx	r3
 80140e0:	3601      	adds	r6, #1
 80140e2:	e7f2      	b.n	80140ca <__libc_init_array+0x1e>
 80140e4:	0801daf8 	.word	0x0801daf8
 80140e8:	0801daf8 	.word	0x0801daf8
 80140ec:	0801daf8 	.word	0x0801daf8
 80140f0:	0801db00 	.word	0x0801db00

080140f4 <malloc>:
 80140f4:	b510      	push	{r4, lr}
 80140f6:	4b03      	ldr	r3, [pc, #12]	; (8014104 <malloc+0x10>)
 80140f8:	0001      	movs	r1, r0
 80140fa:	6818      	ldr	r0, [r3, #0]
 80140fc:	f000 f80e 	bl	801411c <_malloc_r>
 8014100:	bd10      	pop	{r4, pc}
 8014102:	46c0      	nop			; (mov r8, r8)
 8014104:	20000190 	.word	0x20000190

08014108 <free>:
 8014108:	b510      	push	{r4, lr}
 801410a:	4b03      	ldr	r3, [pc, #12]	; (8014118 <free+0x10>)
 801410c:	0001      	movs	r1, r0
 801410e:	6818      	ldr	r0, [r3, #0]
 8014110:	f003 fd62 	bl	8017bd8 <_free_r>
 8014114:	bd10      	pop	{r4, pc}
 8014116:	46c0      	nop			; (mov r8, r8)
 8014118:	20000190 	.word	0x20000190

0801411c <_malloc_r>:
 801411c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801411e:	000d      	movs	r5, r1
 8014120:	b087      	sub	sp, #28
 8014122:	350b      	adds	r5, #11
 8014124:	9001      	str	r0, [sp, #4]
 8014126:	2d16      	cmp	r5, #22
 8014128:	d908      	bls.n	801413c <_malloc_r+0x20>
 801412a:	2207      	movs	r2, #7
 801412c:	4395      	bics	r5, r2
 801412e:	d506      	bpl.n	801413e <_malloc_r+0x22>
 8014130:	230c      	movs	r3, #12
 8014132:	9a01      	ldr	r2, [sp, #4]
 8014134:	6013      	str	r3, [r2, #0]
 8014136:	2000      	movs	r0, #0
 8014138:	b007      	add	sp, #28
 801413a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801413c:	2510      	movs	r5, #16
 801413e:	42a9      	cmp	r1, r5
 8014140:	d8f6      	bhi.n	8014130 <_malloc_r+0x14>
 8014142:	9801      	ldr	r0, [sp, #4]
 8014144:	f000 fa1e 	bl	8014584 <__malloc_lock>
 8014148:	23fc      	movs	r3, #252	; 0xfc
 801414a:	48bd      	ldr	r0, [pc, #756]	; (8014440 <_malloc_r+0x324>)
 801414c:	005b      	lsls	r3, r3, #1
 801414e:	429d      	cmp	r5, r3
 8014150:	d21a      	bcs.n	8014188 <_malloc_r+0x6c>
 8014152:	002a      	movs	r2, r5
 8014154:	3208      	adds	r2, #8
 8014156:	1882      	adds	r2, r0, r2
 8014158:	0011      	movs	r1, r2
 801415a:	6854      	ldr	r4, [r2, #4]
 801415c:	3908      	subs	r1, #8
 801415e:	08eb      	lsrs	r3, r5, #3
 8014160:	428c      	cmp	r4, r1
 8014162:	d103      	bne.n	801416c <_malloc_r+0x50>
 8014164:	68d4      	ldr	r4, [r2, #12]
 8014166:	3302      	adds	r3, #2
 8014168:	42a2      	cmp	r2, r4
 801416a:	d023      	beq.n	80141b4 <_malloc_r+0x98>
 801416c:	2303      	movs	r3, #3
 801416e:	6862      	ldr	r2, [r4, #4]
 8014170:	68a1      	ldr	r1, [r4, #8]
 8014172:	439a      	bics	r2, r3
 8014174:	0013      	movs	r3, r2
 8014176:	68e2      	ldr	r2, [r4, #12]
 8014178:	18e3      	adds	r3, r4, r3
 801417a:	60ca      	str	r2, [r1, #12]
 801417c:	6091      	str	r1, [r2, #8]
 801417e:	2201      	movs	r2, #1
 8014180:	6859      	ldr	r1, [r3, #4]
 8014182:	430a      	orrs	r2, r1
 8014184:	605a      	str	r2, [r3, #4]
 8014186:	e02b      	b.n	80141e0 <_malloc_r+0xc4>
 8014188:	233f      	movs	r3, #63	; 0x3f
 801418a:	0a6a      	lsrs	r2, r5, #9
 801418c:	d003      	beq.n	8014196 <_malloc_r+0x7a>
 801418e:	2a04      	cmp	r2, #4
 8014190:	d82c      	bhi.n	80141ec <_malloc_r+0xd0>
 8014192:	09ab      	lsrs	r3, r5, #6
 8014194:	3338      	adds	r3, #56	; 0x38
 8014196:	2203      	movs	r2, #3
 8014198:	4694      	mov	ip, r2
 801419a:	00d9      	lsls	r1, r3, #3
 801419c:	1809      	adds	r1, r1, r0
 801419e:	68cc      	ldr	r4, [r1, #12]
 80141a0:	428c      	cmp	r4, r1
 80141a2:	d006      	beq.n	80141b2 <_malloc_r+0x96>
 80141a4:	4666      	mov	r6, ip
 80141a6:	6862      	ldr	r2, [r4, #4]
 80141a8:	43b2      	bics	r2, r6
 80141aa:	1b57      	subs	r7, r2, r5
 80141ac:	2f0f      	cmp	r7, #15
 80141ae:	dd35      	ble.n	801421c <_malloc_r+0x100>
 80141b0:	3b01      	subs	r3, #1
 80141b2:	3301      	adds	r3, #1
 80141b4:	6904      	ldr	r4, [r0, #16]
 80141b6:	49a3      	ldr	r1, [pc, #652]	; (8014444 <_malloc_r+0x328>)
 80141b8:	428c      	cmp	r4, r1
 80141ba:	d056      	beq.n	801426a <_malloc_r+0x14e>
 80141bc:	2203      	movs	r2, #3
 80141be:	6866      	ldr	r6, [r4, #4]
 80141c0:	4396      	bics	r6, r2
 80141c2:	0032      	movs	r2, r6
 80141c4:	1b76      	subs	r6, r6, r5
 80141c6:	2e0f      	cmp	r6, #15
 80141c8:	dd36      	ble.n	8014238 <_malloc_r+0x11c>
 80141ca:	2701      	movs	r7, #1
 80141cc:	1963      	adds	r3, r4, r5
 80141ce:	433d      	orrs	r5, r7
 80141d0:	4337      	orrs	r7, r6
 80141d2:	6065      	str	r5, [r4, #4]
 80141d4:	6143      	str	r3, [r0, #20]
 80141d6:	6103      	str	r3, [r0, #16]
 80141d8:	60d9      	str	r1, [r3, #12]
 80141da:	6099      	str	r1, [r3, #8]
 80141dc:	605f      	str	r7, [r3, #4]
 80141de:	50a6      	str	r6, [r4, r2]
 80141e0:	9801      	ldr	r0, [sp, #4]
 80141e2:	f000 f9d7 	bl	8014594 <__malloc_unlock>
 80141e6:	0020      	movs	r0, r4
 80141e8:	3008      	adds	r0, #8
 80141ea:	e7a5      	b.n	8014138 <_malloc_r+0x1c>
 80141ec:	2a14      	cmp	r2, #20
 80141ee:	d802      	bhi.n	80141f6 <_malloc_r+0xda>
 80141f0:	0013      	movs	r3, r2
 80141f2:	335b      	adds	r3, #91	; 0x5b
 80141f4:	e7cf      	b.n	8014196 <_malloc_r+0x7a>
 80141f6:	2a54      	cmp	r2, #84	; 0x54
 80141f8:	d802      	bhi.n	8014200 <_malloc_r+0xe4>
 80141fa:	0b2b      	lsrs	r3, r5, #12
 80141fc:	336e      	adds	r3, #110	; 0x6e
 80141fe:	e7ca      	b.n	8014196 <_malloc_r+0x7a>
 8014200:	23aa      	movs	r3, #170	; 0xaa
 8014202:	005b      	lsls	r3, r3, #1
 8014204:	429a      	cmp	r2, r3
 8014206:	d802      	bhi.n	801420e <_malloc_r+0xf2>
 8014208:	0beb      	lsrs	r3, r5, #15
 801420a:	3377      	adds	r3, #119	; 0x77
 801420c:	e7c3      	b.n	8014196 <_malloc_r+0x7a>
 801420e:	498e      	ldr	r1, [pc, #568]	; (8014448 <_malloc_r+0x32c>)
 8014210:	237e      	movs	r3, #126	; 0x7e
 8014212:	428a      	cmp	r2, r1
 8014214:	d8bf      	bhi.n	8014196 <_malloc_r+0x7a>
 8014216:	0cab      	lsrs	r3, r5, #18
 8014218:	337c      	adds	r3, #124	; 0x7c
 801421a:	e7bc      	b.n	8014196 <_malloc_r+0x7a>
 801421c:	68e6      	ldr	r6, [r4, #12]
 801421e:	2f00      	cmp	r7, #0
 8014220:	db08      	blt.n	8014234 <_malloc_r+0x118>
 8014222:	68a3      	ldr	r3, [r4, #8]
 8014224:	60de      	str	r6, [r3, #12]
 8014226:	60b3      	str	r3, [r6, #8]
 8014228:	2301      	movs	r3, #1
 801422a:	18a2      	adds	r2, r4, r2
 801422c:	6851      	ldr	r1, [r2, #4]
 801422e:	430b      	orrs	r3, r1
 8014230:	6053      	str	r3, [r2, #4]
 8014232:	e7d5      	b.n	80141e0 <_malloc_r+0xc4>
 8014234:	0034      	movs	r4, r6
 8014236:	e7b3      	b.n	80141a0 <_malloc_r+0x84>
 8014238:	6141      	str	r1, [r0, #20]
 801423a:	6101      	str	r1, [r0, #16]
 801423c:	2e00      	cmp	r6, #0
 801423e:	daf3      	bge.n	8014228 <_malloc_r+0x10c>
 8014240:	6841      	ldr	r1, [r0, #4]
 8014242:	468c      	mov	ip, r1
 8014244:	2180      	movs	r1, #128	; 0x80
 8014246:	0089      	lsls	r1, r1, #2
 8014248:	428a      	cmp	r2, r1
 801424a:	d300      	bcc.n	801424e <_malloc_r+0x132>
 801424c:	e089      	b.n	8014362 <_malloc_r+0x246>
 801424e:	0956      	lsrs	r6, r2, #5
 8014250:	08d1      	lsrs	r1, r2, #3
 8014252:	2201      	movs	r2, #1
 8014254:	40b2      	lsls	r2, r6
 8014256:	4666      	mov	r6, ip
 8014258:	00c9      	lsls	r1, r1, #3
 801425a:	4332      	orrs	r2, r6
 801425c:	6042      	str	r2, [r0, #4]
 801425e:	1808      	adds	r0, r1, r0
 8014260:	6882      	ldr	r2, [r0, #8]
 8014262:	60e0      	str	r0, [r4, #12]
 8014264:	60a2      	str	r2, [r4, #8]
 8014266:	6084      	str	r4, [r0, #8]
 8014268:	60d4      	str	r4, [r2, #12]
 801426a:	2201      	movs	r2, #1
 801426c:	4874      	ldr	r0, [pc, #464]	; (8014440 <_malloc_r+0x324>)
 801426e:	1099      	asrs	r1, r3, #2
 8014270:	408a      	lsls	r2, r1
 8014272:	6841      	ldr	r1, [r0, #4]
 8014274:	4291      	cmp	r1, r2
 8014276:	d325      	bcc.n	80142c4 <_malloc_r+0x1a8>
 8014278:	420a      	tst	r2, r1
 801427a:	d105      	bne.n	8014288 <_malloc_r+0x16c>
 801427c:	2403      	movs	r4, #3
 801427e:	43a3      	bics	r3, r4
 8014280:	0052      	lsls	r2, r2, #1
 8014282:	3304      	adds	r3, #4
 8014284:	420a      	tst	r2, r1
 8014286:	d0fb      	beq.n	8014280 <_malloc_r+0x164>
 8014288:	00d9      	lsls	r1, r3, #3
 801428a:	1841      	adds	r1, r0, r1
 801428c:	468c      	mov	ip, r1
 801428e:	9302      	str	r3, [sp, #8]
 8014290:	68cc      	ldr	r4, [r1, #12]
 8014292:	428c      	cmp	r4, r1
 8014294:	d000      	beq.n	8014298 <_malloc_r+0x17c>
 8014296:	e09b      	b.n	80143d0 <_malloc_r+0x2b4>
 8014298:	2603      	movs	r6, #3
 801429a:	9c02      	ldr	r4, [sp, #8]
 801429c:	3108      	adds	r1, #8
 801429e:	3401      	adds	r4, #1
 80142a0:	9402      	str	r4, [sp, #8]
 80142a2:	4234      	tst	r4, r6
 80142a4:	d1f4      	bne.n	8014290 <_malloc_r+0x174>
 80142a6:	2103      	movs	r1, #3
 80142a8:	420b      	tst	r3, r1
 80142aa:	d000      	beq.n	80142ae <_malloc_r+0x192>
 80142ac:	e0b7      	b.n	801441e <_malloc_r+0x302>
 80142ae:	6843      	ldr	r3, [r0, #4]
 80142b0:	4393      	bics	r3, r2
 80142b2:	6043      	str	r3, [r0, #4]
 80142b4:	4b62      	ldr	r3, [pc, #392]	; (8014440 <_malloc_r+0x324>)
 80142b6:	0052      	lsls	r2, r2, #1
 80142b8:	6859      	ldr	r1, [r3, #4]
 80142ba:	4291      	cmp	r1, r2
 80142bc:	d302      	bcc.n	80142c4 <_malloc_r+0x1a8>
 80142be:	2a00      	cmp	r2, #0
 80142c0:	d000      	beq.n	80142c4 <_malloc_r+0x1a8>
 80142c2:	e0bb      	b.n	801443c <_malloc_r+0x320>
 80142c4:	2303      	movs	r3, #3
 80142c6:	6886      	ldr	r6, [r0, #8]
 80142c8:	6872      	ldr	r2, [r6, #4]
 80142ca:	439a      	bics	r2, r3
 80142cc:	9202      	str	r2, [sp, #8]
 80142ce:	42aa      	cmp	r2, r5
 80142d0:	d303      	bcc.n	80142da <_malloc_r+0x1be>
 80142d2:	1b51      	subs	r1, r2, r5
 80142d4:	290f      	cmp	r1, #15
 80142d6:	dd00      	ble.n	80142da <_malloc_r+0x1be>
 80142d8:	e125      	b.n	8014526 <_malloc_r+0x40a>
 80142da:	9b02      	ldr	r3, [sp, #8]
 80142dc:	2008      	movs	r0, #8
 80142de:	18f3      	adds	r3, r6, r3
 80142e0:	9303      	str	r3, [sp, #12]
 80142e2:	4b5a      	ldr	r3, [pc, #360]	; (801444c <_malloc_r+0x330>)
 80142e4:	681f      	ldr	r7, [r3, #0]
 80142e6:	f002 fd77 	bl	8016dd8 <sysconf>
 80142ea:	4b59      	ldr	r3, [pc, #356]	; (8014450 <_malloc_r+0x334>)
 80142ec:	3710      	adds	r7, #16
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	197f      	adds	r7, r7, r5
 80142f2:	9004      	str	r0, [sp, #16]
 80142f4:	3301      	adds	r3, #1
 80142f6:	d003      	beq.n	8014300 <_malloc_r+0x1e4>
 80142f8:	3f01      	subs	r7, #1
 80142fa:	183f      	adds	r7, r7, r0
 80142fc:	4243      	negs	r3, r0
 80142fe:	401f      	ands	r7, r3
 8014300:	0039      	movs	r1, r7
 8014302:	9801      	ldr	r0, [sp, #4]
 8014304:	f000 fb18 	bl	8014938 <_sbrk_r>
 8014308:	0004      	movs	r4, r0
 801430a:	1c43      	adds	r3, r0, #1
 801430c:	d100      	bne.n	8014310 <_malloc_r+0x1f4>
 801430e:	e0de      	b.n	80144ce <_malloc_r+0x3b2>
 8014310:	9b03      	ldr	r3, [sp, #12]
 8014312:	4283      	cmp	r3, r0
 8014314:	d903      	bls.n	801431e <_malloc_r+0x202>
 8014316:	4b4a      	ldr	r3, [pc, #296]	; (8014440 <_malloc_r+0x324>)
 8014318:	429e      	cmp	r6, r3
 801431a:	d000      	beq.n	801431e <_malloc_r+0x202>
 801431c:	e0d7      	b.n	80144ce <_malloc_r+0x3b2>
 801431e:	4b4d      	ldr	r3, [pc, #308]	; (8014454 <_malloc_r+0x338>)
 8014320:	9903      	ldr	r1, [sp, #12]
 8014322:	681a      	ldr	r2, [r3, #0]
 8014324:	18ba      	adds	r2, r7, r2
 8014326:	601a      	str	r2, [r3, #0]
 8014328:	9b04      	ldr	r3, [sp, #16]
 801432a:	3b01      	subs	r3, #1
 801432c:	42a1      	cmp	r1, r4
 801432e:	d000      	beq.n	8014332 <_malloc_r+0x216>
 8014330:	e096      	b.n	8014460 <_malloc_r+0x344>
 8014332:	4219      	tst	r1, r3
 8014334:	d000      	beq.n	8014338 <_malloc_r+0x21c>
 8014336:	e093      	b.n	8014460 <_malloc_r+0x344>
 8014338:	2601      	movs	r6, #1
 801433a:	4b41      	ldr	r3, [pc, #260]	; (8014440 <_malloc_r+0x324>)
 801433c:	9a02      	ldr	r2, [sp, #8]
 801433e:	689b      	ldr	r3, [r3, #8]
 8014340:	19d7      	adds	r7, r2, r7
 8014342:	433e      	orrs	r6, r7
 8014344:	605e      	str	r6, [r3, #4]
 8014346:	4b43      	ldr	r3, [pc, #268]	; (8014454 <_malloc_r+0x338>)
 8014348:	4a43      	ldr	r2, [pc, #268]	; (8014458 <_malloc_r+0x33c>)
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	6811      	ldr	r1, [r2, #0]
 801434e:	428b      	cmp	r3, r1
 8014350:	d900      	bls.n	8014354 <_malloc_r+0x238>
 8014352:	6013      	str	r3, [r2, #0]
 8014354:	4a41      	ldr	r2, [pc, #260]	; (801445c <_malloc_r+0x340>)
 8014356:	6811      	ldr	r1, [r2, #0]
 8014358:	428b      	cmp	r3, r1
 801435a:	d800      	bhi.n	801435e <_malloc_r+0x242>
 801435c:	e0b7      	b.n	80144ce <_malloc_r+0x3b2>
 801435e:	6013      	str	r3, [r2, #0]
 8014360:	e0b5      	b.n	80144ce <_malloc_r+0x3b2>
 8014362:	0a56      	lsrs	r6, r2, #9
 8014364:	2e04      	cmp	r6, #4
 8014366:	d811      	bhi.n	801438c <_malloc_r+0x270>
 8014368:	0991      	lsrs	r1, r2, #6
 801436a:	3138      	adds	r1, #56	; 0x38
 801436c:	00cf      	lsls	r7, r1, #3
 801436e:	183f      	adds	r7, r7, r0
 8014370:	68be      	ldr	r6, [r7, #8]
 8014372:	42b7      	cmp	r7, r6
 8014374:	d125      	bne.n	80143c2 <_malloc_r+0x2a6>
 8014376:	2201      	movs	r2, #1
 8014378:	1089      	asrs	r1, r1, #2
 801437a:	408a      	lsls	r2, r1
 801437c:	4661      	mov	r1, ip
 801437e:	430a      	orrs	r2, r1
 8014380:	6042      	str	r2, [r0, #4]
 8014382:	60e7      	str	r7, [r4, #12]
 8014384:	60a6      	str	r6, [r4, #8]
 8014386:	60bc      	str	r4, [r7, #8]
 8014388:	60f4      	str	r4, [r6, #12]
 801438a:	e76e      	b.n	801426a <_malloc_r+0x14e>
 801438c:	2e14      	cmp	r6, #20
 801438e:	d802      	bhi.n	8014396 <_malloc_r+0x27a>
 8014390:	0031      	movs	r1, r6
 8014392:	315b      	adds	r1, #91	; 0x5b
 8014394:	e7ea      	b.n	801436c <_malloc_r+0x250>
 8014396:	2e54      	cmp	r6, #84	; 0x54
 8014398:	d802      	bhi.n	80143a0 <_malloc_r+0x284>
 801439a:	0b11      	lsrs	r1, r2, #12
 801439c:	316e      	adds	r1, #110	; 0x6e
 801439e:	e7e5      	b.n	801436c <_malloc_r+0x250>
 80143a0:	21aa      	movs	r1, #170	; 0xaa
 80143a2:	0049      	lsls	r1, r1, #1
 80143a4:	428e      	cmp	r6, r1
 80143a6:	d802      	bhi.n	80143ae <_malloc_r+0x292>
 80143a8:	0bd1      	lsrs	r1, r2, #15
 80143aa:	3177      	adds	r1, #119	; 0x77
 80143ac:	e7de      	b.n	801436c <_malloc_r+0x250>
 80143ae:	4f26      	ldr	r7, [pc, #152]	; (8014448 <_malloc_r+0x32c>)
 80143b0:	217e      	movs	r1, #126	; 0x7e
 80143b2:	42be      	cmp	r6, r7
 80143b4:	d8da      	bhi.n	801436c <_malloc_r+0x250>
 80143b6:	0c91      	lsrs	r1, r2, #18
 80143b8:	317c      	adds	r1, #124	; 0x7c
 80143ba:	e7d7      	b.n	801436c <_malloc_r+0x250>
 80143bc:	68b6      	ldr	r6, [r6, #8]
 80143be:	42b7      	cmp	r7, r6
 80143c0:	d004      	beq.n	80143cc <_malloc_r+0x2b0>
 80143c2:	2003      	movs	r0, #3
 80143c4:	6871      	ldr	r1, [r6, #4]
 80143c6:	4381      	bics	r1, r0
 80143c8:	4291      	cmp	r1, r2
 80143ca:	d8f7      	bhi.n	80143bc <_malloc_r+0x2a0>
 80143cc:	68f7      	ldr	r7, [r6, #12]
 80143ce:	e7d8      	b.n	8014382 <_malloc_r+0x266>
 80143d0:	2703      	movs	r7, #3
 80143d2:	6866      	ldr	r6, [r4, #4]
 80143d4:	43be      	bics	r6, r7
 80143d6:	9603      	str	r6, [sp, #12]
 80143d8:	1b77      	subs	r7, r6, r5
 80143da:	68e6      	ldr	r6, [r4, #12]
 80143dc:	2f0f      	cmp	r7, #15
 80143de:	dd10      	ble.n	8014402 <_malloc_r+0x2e6>
 80143e0:	2201      	movs	r2, #1
 80143e2:	68a1      	ldr	r1, [r4, #8]
 80143e4:	1963      	adds	r3, r4, r5
 80143e6:	4315      	orrs	r5, r2
 80143e8:	6065      	str	r5, [r4, #4]
 80143ea:	60ce      	str	r6, [r1, #12]
 80143ec:	60b1      	str	r1, [r6, #8]
 80143ee:	6143      	str	r3, [r0, #20]
 80143f0:	6103      	str	r3, [r0, #16]
 80143f2:	4814      	ldr	r0, [pc, #80]	; (8014444 <_malloc_r+0x328>)
 80143f4:	433a      	orrs	r2, r7
 80143f6:	60d8      	str	r0, [r3, #12]
 80143f8:	6098      	str	r0, [r3, #8]
 80143fa:	605a      	str	r2, [r3, #4]
 80143fc:	9b03      	ldr	r3, [sp, #12]
 80143fe:	50e7      	str	r7, [r4, r3]
 8014400:	e6ee      	b.n	80141e0 <_malloc_r+0xc4>
 8014402:	2f00      	cmp	r7, #0
 8014404:	db09      	blt.n	801441a <_malloc_r+0x2fe>
 8014406:	9b03      	ldr	r3, [sp, #12]
 8014408:	18e1      	adds	r1, r4, r3
 801440a:	2301      	movs	r3, #1
 801440c:	684a      	ldr	r2, [r1, #4]
 801440e:	4313      	orrs	r3, r2
 8014410:	604b      	str	r3, [r1, #4]
 8014412:	68a3      	ldr	r3, [r4, #8]
 8014414:	60de      	str	r6, [r3, #12]
 8014416:	60b3      	str	r3, [r6, #8]
 8014418:	e6e2      	b.n	80141e0 <_malloc_r+0xc4>
 801441a:	0034      	movs	r4, r6
 801441c:	e739      	b.n	8014292 <_malloc_r+0x176>
 801441e:	2108      	movs	r1, #8
 8014420:	4249      	negs	r1, r1
 8014422:	448c      	add	ip, r1
 8014424:	4661      	mov	r1, ip
 8014426:	6889      	ldr	r1, [r1, #8]
 8014428:	3b01      	subs	r3, #1
 801442a:	4561      	cmp	r1, ip
 801442c:	d100      	bne.n	8014430 <_malloc_r+0x314>
 801442e:	e73a      	b.n	80142a6 <_malloc_r+0x18a>
 8014430:	e740      	b.n	80142b4 <_malloc_r+0x198>
 8014432:	3304      	adds	r3, #4
 8014434:	0052      	lsls	r2, r2, #1
 8014436:	420a      	tst	r2, r1
 8014438:	d0fb      	beq.n	8014432 <_malloc_r+0x316>
 801443a:	e725      	b.n	8014288 <_malloc_r+0x16c>
 801443c:	9b02      	ldr	r3, [sp, #8]
 801443e:	e7fa      	b.n	8014436 <_malloc_r+0x31a>
 8014440:	200005c0 	.word	0x200005c0
 8014444:	200005c8 	.word	0x200005c8
 8014448:	00000554 	.word	0x00000554
 801444c:	20006660 	.word	0x20006660
 8014450:	200009c8 	.word	0x200009c8
 8014454:	20006630 	.word	0x20006630
 8014458:	20006658 	.word	0x20006658
 801445c:	2000665c 	.word	0x2000665c
 8014460:	4935      	ldr	r1, [pc, #212]	; (8014538 <_malloc_r+0x41c>)
 8014462:	6808      	ldr	r0, [r1, #0]
 8014464:	3001      	adds	r0, #1
 8014466:	d140      	bne.n	80144ea <_malloc_r+0x3ce>
 8014468:	600c      	str	r4, [r1, #0]
 801446a:	2207      	movs	r2, #7
 801446c:	0021      	movs	r1, r4
 801446e:	4011      	ands	r1, r2
 8014470:	2000      	movs	r0, #0
 8014472:	9103      	str	r1, [sp, #12]
 8014474:	4214      	tst	r4, r2
 8014476:	d002      	beq.n	801447e <_malloc_r+0x362>
 8014478:	3008      	adds	r0, #8
 801447a:	1a40      	subs	r0, r0, r1
 801447c:	1824      	adds	r4, r4, r0
 801447e:	19e2      	adds	r2, r4, r7
 8014480:	9205      	str	r2, [sp, #20]
 8014482:	9f05      	ldr	r7, [sp, #20]
 8014484:	9a04      	ldr	r2, [sp, #16]
 8014486:	401f      	ands	r7, r3
 8014488:	1810      	adds	r0, r2, r0
 801448a:	1bc7      	subs	r7, r0, r7
 801448c:	401f      	ands	r7, r3
 801448e:	0039      	movs	r1, r7
 8014490:	9801      	ldr	r0, [sp, #4]
 8014492:	f000 fa51 	bl	8014938 <_sbrk_r>
 8014496:	1c43      	adds	r3, r0, #1
 8014498:	d107      	bne.n	80144aa <_malloc_r+0x38e>
 801449a:	9b03      	ldr	r3, [sp, #12]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d02a      	beq.n	80144f6 <_malloc_r+0x3da>
 80144a0:	0018      	movs	r0, r3
 80144a2:	2700      	movs	r7, #0
 80144a4:	9b05      	ldr	r3, [sp, #20]
 80144a6:	3808      	subs	r0, #8
 80144a8:	1818      	adds	r0, r3, r0
 80144aa:	4a24      	ldr	r2, [pc, #144]	; (801453c <_malloc_r+0x420>)
 80144ac:	1b00      	subs	r0, r0, r4
 80144ae:	6813      	ldr	r3, [r2, #0]
 80144b0:	19db      	adds	r3, r3, r7
 80144b2:	6013      	str	r3, [r2, #0]
 80144b4:	2201      	movs	r2, #1
 80144b6:	4b22      	ldr	r3, [pc, #136]	; (8014540 <_malloc_r+0x424>)
 80144b8:	19c7      	adds	r7, r0, r7
 80144ba:	4317      	orrs	r7, r2
 80144bc:	609c      	str	r4, [r3, #8]
 80144be:	6067      	str	r7, [r4, #4]
 80144c0:	429e      	cmp	r6, r3
 80144c2:	d100      	bne.n	80144c6 <_malloc_r+0x3aa>
 80144c4:	e73f      	b.n	8014346 <_malloc_r+0x22a>
 80144c6:	9b02      	ldr	r3, [sp, #8]
 80144c8:	2b0f      	cmp	r3, #15
 80144ca:	d817      	bhi.n	80144fc <_malloc_r+0x3e0>
 80144cc:	6062      	str	r2, [r4, #4]
 80144ce:	2203      	movs	r2, #3
 80144d0:	4b1b      	ldr	r3, [pc, #108]	; (8014540 <_malloc_r+0x424>)
 80144d2:	689b      	ldr	r3, [r3, #8]
 80144d4:	685b      	ldr	r3, [r3, #4]
 80144d6:	4393      	bics	r3, r2
 80144d8:	1b59      	subs	r1, r3, r5
 80144da:	42ab      	cmp	r3, r5
 80144dc:	d301      	bcc.n	80144e2 <_malloc_r+0x3c6>
 80144de:	290f      	cmp	r1, #15
 80144e0:	dc21      	bgt.n	8014526 <_malloc_r+0x40a>
 80144e2:	9801      	ldr	r0, [sp, #4]
 80144e4:	f000 f856 	bl	8014594 <__malloc_unlock>
 80144e8:	e625      	b.n	8014136 <_malloc_r+0x1a>
 80144ea:	9903      	ldr	r1, [sp, #12]
 80144ec:	1a61      	subs	r1, r4, r1
 80144ee:	1889      	adds	r1, r1, r2
 80144f0:	4a12      	ldr	r2, [pc, #72]	; (801453c <_malloc_r+0x420>)
 80144f2:	6011      	str	r1, [r2, #0]
 80144f4:	e7b9      	b.n	801446a <_malloc_r+0x34e>
 80144f6:	9805      	ldr	r0, [sp, #20]
 80144f8:	9f03      	ldr	r7, [sp, #12]
 80144fa:	e7d6      	b.n	80144aa <_malloc_r+0x38e>
 80144fc:	2307      	movs	r3, #7
 80144fe:	9f02      	ldr	r7, [sp, #8]
 8014500:	3f0c      	subs	r7, #12
 8014502:	439f      	bics	r7, r3
 8014504:	6873      	ldr	r3, [r6, #4]
 8014506:	401a      	ands	r2, r3
 8014508:	433a      	orrs	r2, r7
 801450a:	6072      	str	r2, [r6, #4]
 801450c:	2205      	movs	r2, #5
 801450e:	19f3      	adds	r3, r6, r7
 8014510:	605a      	str	r2, [r3, #4]
 8014512:	609a      	str	r2, [r3, #8]
 8014514:	2f0f      	cmp	r7, #15
 8014516:	d800      	bhi.n	801451a <_malloc_r+0x3fe>
 8014518:	e715      	b.n	8014346 <_malloc_r+0x22a>
 801451a:	0031      	movs	r1, r6
 801451c:	9801      	ldr	r0, [sp, #4]
 801451e:	3108      	adds	r1, #8
 8014520:	f003 fb5a 	bl	8017bd8 <_free_r>
 8014524:	e70f      	b.n	8014346 <_malloc_r+0x22a>
 8014526:	2201      	movs	r2, #1
 8014528:	0013      	movs	r3, r2
 801452a:	4805      	ldr	r0, [pc, #20]	; (8014540 <_malloc_r+0x424>)
 801452c:	432b      	orrs	r3, r5
 801452e:	6884      	ldr	r4, [r0, #8]
 8014530:	6063      	str	r3, [r4, #4]
 8014532:	1963      	adds	r3, r4, r5
 8014534:	6083      	str	r3, [r0, #8]
 8014536:	e624      	b.n	8014182 <_malloc_r+0x66>
 8014538:	200009c8 	.word	0x200009c8
 801453c:	20006630 	.word	0x20006630
 8014540:	200005c0 	.word	0x200005c0

08014544 <memcmp>:
 8014544:	b530      	push	{r4, r5, lr}
 8014546:	2400      	movs	r4, #0
 8014548:	3901      	subs	r1, #1
 801454a:	42a2      	cmp	r2, r4
 801454c:	d101      	bne.n	8014552 <memcmp+0xe>
 801454e:	2000      	movs	r0, #0
 8014550:	e005      	b.n	801455e <memcmp+0x1a>
 8014552:	5d03      	ldrb	r3, [r0, r4]
 8014554:	3401      	adds	r4, #1
 8014556:	5d0d      	ldrb	r5, [r1, r4]
 8014558:	42ab      	cmp	r3, r5
 801455a:	d0f6      	beq.n	801454a <memcmp+0x6>
 801455c:	1b58      	subs	r0, r3, r5
 801455e:	bd30      	pop	{r4, r5, pc}

08014560 <memcpy>:
 8014560:	2300      	movs	r3, #0
 8014562:	b510      	push	{r4, lr}
 8014564:	429a      	cmp	r2, r3
 8014566:	d100      	bne.n	801456a <memcpy+0xa>
 8014568:	bd10      	pop	{r4, pc}
 801456a:	5ccc      	ldrb	r4, [r1, r3]
 801456c:	54c4      	strb	r4, [r0, r3]
 801456e:	3301      	adds	r3, #1
 8014570:	e7f8      	b.n	8014564 <memcpy+0x4>

08014572 <memset>:
 8014572:	0003      	movs	r3, r0
 8014574:	1882      	adds	r2, r0, r2
 8014576:	4293      	cmp	r3, r2
 8014578:	d100      	bne.n	801457c <memset+0xa>
 801457a:	4770      	bx	lr
 801457c:	7019      	strb	r1, [r3, #0]
 801457e:	3301      	adds	r3, #1
 8014580:	e7f9      	b.n	8014576 <memset+0x4>
	...

08014584 <__malloc_lock>:
 8014584:	b510      	push	{r4, lr}
 8014586:	4802      	ldr	r0, [pc, #8]	; (8014590 <__malloc_lock+0xc>)
 8014588:	f003 ff58 	bl	801843c <__retarget_lock_acquire_recursive>
 801458c:	bd10      	pop	{r4, pc}
 801458e:	46c0      	nop			; (mov r8, r8)
 8014590:	20006ba4 	.word	0x20006ba4

08014594 <__malloc_unlock>:
 8014594:	b510      	push	{r4, lr}
 8014596:	4802      	ldr	r0, [pc, #8]	; (80145a0 <__malloc_unlock+0xc>)
 8014598:	f003 ff51 	bl	801843e <__retarget_lock_release_recursive>
 801459c:	bd10      	pop	{r4, pc}
 801459e:	46c0      	nop			; (mov r8, r8)
 80145a0:	20006ba4 	.word	0x20006ba4

080145a4 <rand>:
 80145a4:	4b09      	ldr	r3, [pc, #36]	; (80145cc <rand+0x28>)
 80145a6:	b510      	push	{r4, lr}
 80145a8:	681c      	ldr	r4, [r3, #0]
 80145aa:	4a09      	ldr	r2, [pc, #36]	; (80145d0 <rand+0x2c>)
 80145ac:	34a8      	adds	r4, #168	; 0xa8
 80145ae:	6820      	ldr	r0, [r4, #0]
 80145b0:	6861      	ldr	r1, [r4, #4]
 80145b2:	4b08      	ldr	r3, [pc, #32]	; (80145d4 <rand+0x30>)
 80145b4:	f7eb fffe 	bl	80005b4 <__aeabi_lmul>
 80145b8:	2201      	movs	r2, #1
 80145ba:	2300      	movs	r3, #0
 80145bc:	1880      	adds	r0, r0, r2
 80145be:	4159      	adcs	r1, r3
 80145c0:	6020      	str	r0, [r4, #0]
 80145c2:	6061      	str	r1, [r4, #4]
 80145c4:	0048      	lsls	r0, r1, #1
 80145c6:	0840      	lsrs	r0, r0, #1
 80145c8:	bd10      	pop	{r4, pc}
 80145ca:	46c0      	nop			; (mov r8, r8)
 80145cc:	20000190 	.word	0x20000190
 80145d0:	4c957f2d 	.word	0x4c957f2d
 80145d4:	5851f42d 	.word	0x5851f42d

080145d8 <realloc>:
 80145d8:	b510      	push	{r4, lr}
 80145da:	4b03      	ldr	r3, [pc, #12]	; (80145e8 <realloc+0x10>)
 80145dc:	000a      	movs	r2, r1
 80145de:	0001      	movs	r1, r0
 80145e0:	6818      	ldr	r0, [r3, #0]
 80145e2:	f000 f803 	bl	80145ec <_realloc_r>
 80145e6:	bd10      	pop	{r4, pc}
 80145e8:	20000190 	.word	0x20000190

080145ec <_realloc_r>:
 80145ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145ee:	b087      	sub	sp, #28
 80145f0:	1e0c      	subs	r4, r1, #0
 80145f2:	9002      	str	r0, [sp, #8]
 80145f4:	9205      	str	r2, [sp, #20]
 80145f6:	d106      	bne.n	8014606 <_realloc_r+0x1a>
 80145f8:	0011      	movs	r1, r2
 80145fa:	f7ff fd8f 	bl	801411c <_malloc_r>
 80145fe:	0007      	movs	r7, r0
 8014600:	0038      	movs	r0, r7
 8014602:	b007      	add	sp, #28
 8014604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014606:	9802      	ldr	r0, [sp, #8]
 8014608:	f7ff ffbc 	bl	8014584 <__malloc_lock>
 801460c:	9e05      	ldr	r6, [sp, #20]
 801460e:	360b      	adds	r6, #11
 8014610:	2e16      	cmp	r6, #22
 8014612:	d908      	bls.n	8014626 <_realloc_r+0x3a>
 8014614:	2307      	movs	r3, #7
 8014616:	439e      	bics	r6, r3
 8014618:	9601      	str	r6, [sp, #4]
 801461a:	d506      	bpl.n	801462a <_realloc_r+0x3e>
 801461c:	230c      	movs	r3, #12
 801461e:	9a02      	ldr	r2, [sp, #8]
 8014620:	2700      	movs	r7, #0
 8014622:	6013      	str	r3, [r2, #0]
 8014624:	e7ec      	b.n	8014600 <_realloc_r+0x14>
 8014626:	2310      	movs	r3, #16
 8014628:	9301      	str	r3, [sp, #4]
 801462a:	9b01      	ldr	r3, [sp, #4]
 801462c:	9a05      	ldr	r2, [sp, #20]
 801462e:	4293      	cmp	r3, r2
 8014630:	d3f4      	bcc.n	801461c <_realloc_r+0x30>
 8014632:	0023      	movs	r3, r4
 8014634:	3b08      	subs	r3, #8
 8014636:	685f      	ldr	r7, [r3, #4]
 8014638:	9304      	str	r3, [sp, #16]
 801463a:	003a      	movs	r2, r7
 801463c:	2303      	movs	r3, #3
 801463e:	439a      	bics	r2, r3
 8014640:	9b01      	ldr	r3, [sp, #4]
 8014642:	9203      	str	r2, [sp, #12]
 8014644:	4293      	cmp	r3, r2
 8014646:	dc00      	bgt.n	801464a <_realloc_r+0x5e>
 8014648:	e16b      	b.n	8014922 <_realloc_r+0x336>
 801464a:	9b04      	ldr	r3, [sp, #16]
 801464c:	48b9      	ldr	r0, [pc, #740]	; (8014934 <_realloc_r+0x348>)
 801464e:	189b      	adds	r3, r3, r2
 8014650:	6882      	ldr	r2, [r0, #8]
 8014652:	4694      	mov	ip, r2
 8014654:	685a      	ldr	r2, [r3, #4]
 8014656:	459c      	cmp	ip, r3
 8014658:	d006      	beq.n	8014668 <_realloc_r+0x7c>
 801465a:	2501      	movs	r5, #1
 801465c:	0011      	movs	r1, r2
 801465e:	43a9      	bics	r1, r5
 8014660:	1859      	adds	r1, r3, r1
 8014662:	6849      	ldr	r1, [r1, #4]
 8014664:	4229      	tst	r1, r5
 8014666:	d126      	bne.n	80146b6 <_realloc_r+0xca>
 8014668:	2103      	movs	r1, #3
 801466a:	438a      	bics	r2, r1
 801466c:	9903      	ldr	r1, [sp, #12]
 801466e:	188e      	adds	r6, r1, r2
 8014670:	9901      	ldr	r1, [sp, #4]
 8014672:	459c      	cmp	ip, r3
 8014674:	d117      	bne.n	80146a6 <_realloc_r+0xba>
 8014676:	3110      	adds	r1, #16
 8014678:	42b1      	cmp	r1, r6
 801467a:	dc1e      	bgt.n	80146ba <_realloc_r+0xce>
 801467c:	9901      	ldr	r1, [sp, #4]
 801467e:	9b04      	ldr	r3, [sp, #16]
 8014680:	468c      	mov	ip, r1
 8014682:	4463      	add	r3, ip
 8014684:	6083      	str	r3, [r0, #8]
 8014686:	001a      	movs	r2, r3
 8014688:	1a73      	subs	r3, r6, r1
 801468a:	2601      	movs	r6, #1
 801468c:	4333      	orrs	r3, r6
 801468e:	6053      	str	r3, [r2, #4]
 8014690:	0023      	movs	r3, r4
 8014692:	3b08      	subs	r3, #8
 8014694:	685a      	ldr	r2, [r3, #4]
 8014696:	9802      	ldr	r0, [sp, #8]
 8014698:	4016      	ands	r6, r2
 801469a:	430e      	orrs	r6, r1
 801469c:	605e      	str	r6, [r3, #4]
 801469e:	f7ff ff79 	bl	8014594 <__malloc_unlock>
 80146a2:	0027      	movs	r7, r4
 80146a4:	e7ac      	b.n	8014600 <_realloc_r+0x14>
 80146a6:	42b1      	cmp	r1, r6
 80146a8:	dc07      	bgt.n	80146ba <_realloc_r+0xce>
 80146aa:	68da      	ldr	r2, [r3, #12]
 80146ac:	689b      	ldr	r3, [r3, #8]
 80146ae:	60da      	str	r2, [r3, #12]
 80146b0:	6093      	str	r3, [r2, #8]
 80146b2:	9d04      	ldr	r5, [sp, #16]
 80146b4:	e07f      	b.n	80147b6 <_realloc_r+0x1ca>
 80146b6:	2200      	movs	r2, #0
 80146b8:	0013      	movs	r3, r2
 80146ba:	07f9      	lsls	r1, r7, #31
 80146bc:	d500      	bpl.n	80146c0 <_realloc_r+0xd4>
 80146be:	e0e2      	b.n	8014886 <_realloc_r+0x29a>
 80146c0:	0021      	movs	r1, r4
 80146c2:	3908      	subs	r1, #8
 80146c4:	680d      	ldr	r5, [r1, #0]
 80146c6:	9904      	ldr	r1, [sp, #16]
 80146c8:	1b4d      	subs	r5, r1, r5
 80146ca:	2103      	movs	r1, #3
 80146cc:	686f      	ldr	r7, [r5, #4]
 80146ce:	438f      	bics	r7, r1
 80146d0:	9903      	ldr	r1, [sp, #12]
 80146d2:	187f      	adds	r7, r7, r1
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d100      	bne.n	80146da <_realloc_r+0xee>
 80146d8:	e0a0      	b.n	801481c <_realloc_r+0x230>
 80146da:	19d6      	adds	r6, r2, r7
 80146dc:	459c      	cmp	ip, r3
 80146de:	d149      	bne.n	8014774 <_realloc_r+0x188>
 80146e0:	9b01      	ldr	r3, [sp, #4]
 80146e2:	3310      	adds	r3, #16
 80146e4:	42b3      	cmp	r3, r6
 80146e6:	dd00      	ble.n	80146ea <_realloc_r+0xfe>
 80146e8:	e098      	b.n	801481c <_realloc_r+0x230>
 80146ea:	68aa      	ldr	r2, [r5, #8]
 80146ec:	68eb      	ldr	r3, [r5, #12]
 80146ee:	002f      	movs	r7, r5
 80146f0:	60d3      	str	r3, [r2, #12]
 80146f2:	609a      	str	r2, [r3, #8]
 80146f4:	000a      	movs	r2, r1
 80146f6:	3a04      	subs	r2, #4
 80146f8:	3708      	adds	r7, #8
 80146fa:	2a24      	cmp	r2, #36	; 0x24
 80146fc:	d835      	bhi.n	801476a <_realloc_r+0x17e>
 80146fe:	003b      	movs	r3, r7
 8014700:	2a13      	cmp	r2, #19
 8014702:	d908      	bls.n	8014716 <_realloc_r+0x12a>
 8014704:	6823      	ldr	r3, [r4, #0]
 8014706:	60ab      	str	r3, [r5, #8]
 8014708:	6863      	ldr	r3, [r4, #4]
 801470a:	60eb      	str	r3, [r5, #12]
 801470c:	2a1b      	cmp	r2, #27
 801470e:	d81a      	bhi.n	8014746 <_realloc_r+0x15a>
 8014710:	002b      	movs	r3, r5
 8014712:	3408      	adds	r4, #8
 8014714:	3310      	adds	r3, #16
 8014716:	6822      	ldr	r2, [r4, #0]
 8014718:	601a      	str	r2, [r3, #0]
 801471a:	6862      	ldr	r2, [r4, #4]
 801471c:	605a      	str	r2, [r3, #4]
 801471e:	68a2      	ldr	r2, [r4, #8]
 8014720:	609a      	str	r2, [r3, #8]
 8014722:	9b01      	ldr	r3, [sp, #4]
 8014724:	18ea      	adds	r2, r5, r3
 8014726:	4b83      	ldr	r3, [pc, #524]	; (8014934 <_realloc_r+0x348>)
 8014728:	609a      	str	r2, [r3, #8]
 801472a:	9b01      	ldr	r3, [sp, #4]
 801472c:	1af3      	subs	r3, r6, r3
 801472e:	2601      	movs	r6, #1
 8014730:	4333      	orrs	r3, r6
 8014732:	6053      	str	r3, [r2, #4]
 8014734:	686b      	ldr	r3, [r5, #4]
 8014736:	401e      	ands	r6, r3
 8014738:	9b01      	ldr	r3, [sp, #4]
 801473a:	431e      	orrs	r6, r3
 801473c:	606e      	str	r6, [r5, #4]
 801473e:	9802      	ldr	r0, [sp, #8]
 8014740:	f7ff ff28 	bl	8014594 <__malloc_unlock>
 8014744:	e75c      	b.n	8014600 <_realloc_r+0x14>
 8014746:	68a3      	ldr	r3, [r4, #8]
 8014748:	612b      	str	r3, [r5, #16]
 801474a:	68e3      	ldr	r3, [r4, #12]
 801474c:	616b      	str	r3, [r5, #20]
 801474e:	2a24      	cmp	r2, #36	; 0x24
 8014750:	d003      	beq.n	801475a <_realloc_r+0x16e>
 8014752:	002b      	movs	r3, r5
 8014754:	3410      	adds	r4, #16
 8014756:	3318      	adds	r3, #24
 8014758:	e7dd      	b.n	8014716 <_realloc_r+0x12a>
 801475a:	6923      	ldr	r3, [r4, #16]
 801475c:	61ab      	str	r3, [r5, #24]
 801475e:	002b      	movs	r3, r5
 8014760:	6962      	ldr	r2, [r4, #20]
 8014762:	3320      	adds	r3, #32
 8014764:	61ea      	str	r2, [r5, #28]
 8014766:	3418      	adds	r4, #24
 8014768:	e7d5      	b.n	8014716 <_realloc_r+0x12a>
 801476a:	0021      	movs	r1, r4
 801476c:	0038      	movs	r0, r7
 801476e:	f003 fe84 	bl	801847a <memmove>
 8014772:	e7d6      	b.n	8014722 <_realloc_r+0x136>
 8014774:	9a01      	ldr	r2, [sp, #4]
 8014776:	42b2      	cmp	r2, r6
 8014778:	dc50      	bgt.n	801481c <_realloc_r+0x230>
 801477a:	0028      	movs	r0, r5
 801477c:	68da      	ldr	r2, [r3, #12]
 801477e:	689b      	ldr	r3, [r3, #8]
 8014780:	3008      	adds	r0, #8
 8014782:	60da      	str	r2, [r3, #12]
 8014784:	6093      	str	r3, [r2, #8]
 8014786:	68aa      	ldr	r2, [r5, #8]
 8014788:	68eb      	ldr	r3, [r5, #12]
 801478a:	60d3      	str	r3, [r2, #12]
 801478c:	609a      	str	r2, [r3, #8]
 801478e:	9a03      	ldr	r2, [sp, #12]
 8014790:	3a04      	subs	r2, #4
 8014792:	2a24      	cmp	r2, #36	; 0x24
 8014794:	d83e      	bhi.n	8014814 <_realloc_r+0x228>
 8014796:	2a13      	cmp	r2, #19
 8014798:	d907      	bls.n	80147aa <_realloc_r+0x1be>
 801479a:	6823      	ldr	r3, [r4, #0]
 801479c:	60ab      	str	r3, [r5, #8]
 801479e:	6863      	ldr	r3, [r4, #4]
 80147a0:	60eb      	str	r3, [r5, #12]
 80147a2:	2a1b      	cmp	r2, #27
 80147a4:	d824      	bhi.n	80147f0 <_realloc_r+0x204>
 80147a6:	3408      	adds	r4, #8
 80147a8:	3008      	adds	r0, #8
 80147aa:	6823      	ldr	r3, [r4, #0]
 80147ac:	6003      	str	r3, [r0, #0]
 80147ae:	6863      	ldr	r3, [r4, #4]
 80147b0:	6043      	str	r3, [r0, #4]
 80147b2:	68a3      	ldr	r3, [r4, #8]
 80147b4:	6083      	str	r3, [r0, #8]
 80147b6:	9b01      	ldr	r3, [sp, #4]
 80147b8:	6868      	ldr	r0, [r5, #4]
 80147ba:	1af4      	subs	r4, r6, r3
 80147bc:	2301      	movs	r3, #1
 80147be:	19aa      	adds	r2, r5, r6
 80147c0:	4018      	ands	r0, r3
 80147c2:	2c0f      	cmp	r4, #15
 80147c4:	d800      	bhi.n	80147c8 <_realloc_r+0x1dc>
 80147c6:	e0ae      	b.n	8014926 <_realloc_r+0x33a>
 80147c8:	9901      	ldr	r1, [sp, #4]
 80147ca:	9e01      	ldr	r6, [sp, #4]
 80147cc:	1869      	adds	r1, r5, r1
 80147ce:	4330      	orrs	r0, r6
 80147d0:	431c      	orrs	r4, r3
 80147d2:	6068      	str	r0, [r5, #4]
 80147d4:	604c      	str	r4, [r1, #4]
 80147d6:	6850      	ldr	r0, [r2, #4]
 80147d8:	3108      	adds	r1, #8
 80147da:	4303      	orrs	r3, r0
 80147dc:	6053      	str	r3, [r2, #4]
 80147de:	9802      	ldr	r0, [sp, #8]
 80147e0:	f003 f9fa 	bl	8017bd8 <_free_r>
 80147e4:	9802      	ldr	r0, [sp, #8]
 80147e6:	3508      	adds	r5, #8
 80147e8:	f7ff fed4 	bl	8014594 <__malloc_unlock>
 80147ec:	002f      	movs	r7, r5
 80147ee:	e707      	b.n	8014600 <_realloc_r+0x14>
 80147f0:	68a3      	ldr	r3, [r4, #8]
 80147f2:	612b      	str	r3, [r5, #16]
 80147f4:	68e3      	ldr	r3, [r4, #12]
 80147f6:	616b      	str	r3, [r5, #20]
 80147f8:	2a24      	cmp	r2, #36	; 0x24
 80147fa:	d003      	beq.n	8014804 <_realloc_r+0x218>
 80147fc:	0028      	movs	r0, r5
 80147fe:	3410      	adds	r4, #16
 8014800:	3018      	adds	r0, #24
 8014802:	e7d2      	b.n	80147aa <_realloc_r+0x1be>
 8014804:	0028      	movs	r0, r5
 8014806:	6923      	ldr	r3, [r4, #16]
 8014808:	3020      	adds	r0, #32
 801480a:	61ab      	str	r3, [r5, #24]
 801480c:	6963      	ldr	r3, [r4, #20]
 801480e:	3418      	adds	r4, #24
 8014810:	61eb      	str	r3, [r5, #28]
 8014812:	e7ca      	b.n	80147aa <_realloc_r+0x1be>
 8014814:	0021      	movs	r1, r4
 8014816:	f003 fe30 	bl	801847a <memmove>
 801481a:	e7cc      	b.n	80147b6 <_realloc_r+0x1ca>
 801481c:	9b01      	ldr	r3, [sp, #4]
 801481e:	42bb      	cmp	r3, r7
 8014820:	dc31      	bgt.n	8014886 <_realloc_r+0x29a>
 8014822:	0028      	movs	r0, r5
 8014824:	68aa      	ldr	r2, [r5, #8]
 8014826:	68eb      	ldr	r3, [r5, #12]
 8014828:	3008      	adds	r0, #8
 801482a:	60d3      	str	r3, [r2, #12]
 801482c:	609a      	str	r2, [r3, #8]
 801482e:	9a03      	ldr	r2, [sp, #12]
 8014830:	3a04      	subs	r2, #4
 8014832:	2a24      	cmp	r2, #36	; 0x24
 8014834:	d823      	bhi.n	801487e <_realloc_r+0x292>
 8014836:	2a13      	cmp	r2, #19
 8014838:	d907      	bls.n	801484a <_realloc_r+0x25e>
 801483a:	6823      	ldr	r3, [r4, #0]
 801483c:	60ab      	str	r3, [r5, #8]
 801483e:	6863      	ldr	r3, [r4, #4]
 8014840:	60eb      	str	r3, [r5, #12]
 8014842:	2a1b      	cmp	r2, #27
 8014844:	d809      	bhi.n	801485a <_realloc_r+0x26e>
 8014846:	3408      	adds	r4, #8
 8014848:	3008      	adds	r0, #8
 801484a:	6823      	ldr	r3, [r4, #0]
 801484c:	6003      	str	r3, [r0, #0]
 801484e:	6863      	ldr	r3, [r4, #4]
 8014850:	6043      	str	r3, [r0, #4]
 8014852:	68a3      	ldr	r3, [r4, #8]
 8014854:	6083      	str	r3, [r0, #8]
 8014856:	003e      	movs	r6, r7
 8014858:	e7ad      	b.n	80147b6 <_realloc_r+0x1ca>
 801485a:	68a3      	ldr	r3, [r4, #8]
 801485c:	612b      	str	r3, [r5, #16]
 801485e:	68e3      	ldr	r3, [r4, #12]
 8014860:	616b      	str	r3, [r5, #20]
 8014862:	2a24      	cmp	r2, #36	; 0x24
 8014864:	d003      	beq.n	801486e <_realloc_r+0x282>
 8014866:	0028      	movs	r0, r5
 8014868:	3410      	adds	r4, #16
 801486a:	3018      	adds	r0, #24
 801486c:	e7ed      	b.n	801484a <_realloc_r+0x25e>
 801486e:	0028      	movs	r0, r5
 8014870:	6923      	ldr	r3, [r4, #16]
 8014872:	3020      	adds	r0, #32
 8014874:	61ab      	str	r3, [r5, #24]
 8014876:	6963      	ldr	r3, [r4, #20]
 8014878:	3418      	adds	r4, #24
 801487a:	61eb      	str	r3, [r5, #28]
 801487c:	e7e5      	b.n	801484a <_realloc_r+0x25e>
 801487e:	0021      	movs	r1, r4
 8014880:	f003 fdfb 	bl	801847a <memmove>
 8014884:	e7e7      	b.n	8014856 <_realloc_r+0x26a>
 8014886:	9905      	ldr	r1, [sp, #20]
 8014888:	9802      	ldr	r0, [sp, #8]
 801488a:	f7ff fc47 	bl	801411c <_malloc_r>
 801488e:	1e07      	subs	r7, r0, #0
 8014890:	d100      	bne.n	8014894 <_realloc_r+0x2a8>
 8014892:	e754      	b.n	801473e <_realloc_r+0x152>
 8014894:	0023      	movs	r3, r4
 8014896:	2201      	movs	r2, #1
 8014898:	3b08      	subs	r3, #8
 801489a:	685b      	ldr	r3, [r3, #4]
 801489c:	4393      	bics	r3, r2
 801489e:	9a04      	ldr	r2, [sp, #16]
 80148a0:	18d3      	adds	r3, r2, r3
 80148a2:	0002      	movs	r2, r0
 80148a4:	3a08      	subs	r2, #8
 80148a6:	4293      	cmp	r3, r2
 80148a8:	d105      	bne.n	80148b6 <_realloc_r+0x2ca>
 80148aa:	685e      	ldr	r6, [r3, #4]
 80148ac:	2303      	movs	r3, #3
 80148ae:	439e      	bics	r6, r3
 80148b0:	9b03      	ldr	r3, [sp, #12]
 80148b2:	18f6      	adds	r6, r6, r3
 80148b4:	e6fd      	b.n	80146b2 <_realloc_r+0xc6>
 80148b6:	9a03      	ldr	r2, [sp, #12]
 80148b8:	3a04      	subs	r2, #4
 80148ba:	2a24      	cmp	r2, #36	; 0x24
 80148bc:	d82d      	bhi.n	801491a <_realloc_r+0x32e>
 80148be:	2a13      	cmp	r2, #19
 80148c0:	d928      	bls.n	8014914 <_realloc_r+0x328>
 80148c2:	6823      	ldr	r3, [r4, #0]
 80148c4:	6003      	str	r3, [r0, #0]
 80148c6:	6863      	ldr	r3, [r4, #4]
 80148c8:	6043      	str	r3, [r0, #4]
 80148ca:	2a1b      	cmp	r2, #27
 80148cc:	d80e      	bhi.n	80148ec <_realloc_r+0x300>
 80148ce:	0022      	movs	r2, r4
 80148d0:	0003      	movs	r3, r0
 80148d2:	3208      	adds	r2, #8
 80148d4:	3308      	adds	r3, #8
 80148d6:	6811      	ldr	r1, [r2, #0]
 80148d8:	6019      	str	r1, [r3, #0]
 80148da:	6851      	ldr	r1, [r2, #4]
 80148dc:	6059      	str	r1, [r3, #4]
 80148de:	6892      	ldr	r2, [r2, #8]
 80148e0:	609a      	str	r2, [r3, #8]
 80148e2:	0021      	movs	r1, r4
 80148e4:	9802      	ldr	r0, [sp, #8]
 80148e6:	f003 f977 	bl	8017bd8 <_free_r>
 80148ea:	e728      	b.n	801473e <_realloc_r+0x152>
 80148ec:	68a3      	ldr	r3, [r4, #8]
 80148ee:	6083      	str	r3, [r0, #8]
 80148f0:	68e3      	ldr	r3, [r4, #12]
 80148f2:	60c3      	str	r3, [r0, #12]
 80148f4:	2a24      	cmp	r2, #36	; 0x24
 80148f6:	d004      	beq.n	8014902 <_realloc_r+0x316>
 80148f8:	0022      	movs	r2, r4
 80148fa:	0003      	movs	r3, r0
 80148fc:	3210      	adds	r2, #16
 80148fe:	3310      	adds	r3, #16
 8014900:	e7e9      	b.n	80148d6 <_realloc_r+0x2ea>
 8014902:	6923      	ldr	r3, [r4, #16]
 8014904:	0022      	movs	r2, r4
 8014906:	6103      	str	r3, [r0, #16]
 8014908:	0003      	movs	r3, r0
 801490a:	6961      	ldr	r1, [r4, #20]
 801490c:	3218      	adds	r2, #24
 801490e:	3318      	adds	r3, #24
 8014910:	6141      	str	r1, [r0, #20]
 8014912:	e7e0      	b.n	80148d6 <_realloc_r+0x2ea>
 8014914:	0003      	movs	r3, r0
 8014916:	0022      	movs	r2, r4
 8014918:	e7dd      	b.n	80148d6 <_realloc_r+0x2ea>
 801491a:	0021      	movs	r1, r4
 801491c:	f003 fdad 	bl	801847a <memmove>
 8014920:	e7df      	b.n	80148e2 <_realloc_r+0x2f6>
 8014922:	9e03      	ldr	r6, [sp, #12]
 8014924:	e6c5      	b.n	80146b2 <_realloc_r+0xc6>
 8014926:	4306      	orrs	r6, r0
 8014928:	606e      	str	r6, [r5, #4]
 801492a:	6851      	ldr	r1, [r2, #4]
 801492c:	430b      	orrs	r3, r1
 801492e:	6053      	str	r3, [r2, #4]
 8014930:	e758      	b.n	80147e4 <_realloc_r+0x1f8>
 8014932:	46c0      	nop			; (mov r8, r8)
 8014934:	200005c0 	.word	0x200005c0

08014938 <_sbrk_r>:
 8014938:	2300      	movs	r3, #0
 801493a:	b570      	push	{r4, r5, r6, lr}
 801493c:	4d06      	ldr	r5, [pc, #24]	; (8014958 <_sbrk_r+0x20>)
 801493e:	0004      	movs	r4, r0
 8014940:	0008      	movs	r0, r1
 8014942:	602b      	str	r3, [r5, #0]
 8014944:	f005 ff12 	bl	801a76c <_sbrk>
 8014948:	1c43      	adds	r3, r0, #1
 801494a:	d103      	bne.n	8014954 <_sbrk_r+0x1c>
 801494c:	682b      	ldr	r3, [r5, #0]
 801494e:	2b00      	cmp	r3, #0
 8014950:	d000      	beq.n	8014954 <_sbrk_r+0x1c>
 8014952:	6023      	str	r3, [r4, #0]
 8014954:	bd70      	pop	{r4, r5, r6, pc}
 8014956:	46c0      	nop			; (mov r8, r8)
 8014958:	20006bac 	.word	0x20006bac

0801495c <snprintf>:
 801495c:	b40c      	push	{r2, r3}
 801495e:	b530      	push	{r4, r5, lr}
 8014960:	4b17      	ldr	r3, [pc, #92]	; (80149c0 <snprintf+0x64>)
 8014962:	000c      	movs	r4, r1
 8014964:	681d      	ldr	r5, [r3, #0]
 8014966:	b09d      	sub	sp, #116	; 0x74
 8014968:	2900      	cmp	r1, #0
 801496a:	da08      	bge.n	801497e <snprintf+0x22>
 801496c:	238b      	movs	r3, #139	; 0x8b
 801496e:	2001      	movs	r0, #1
 8014970:	602b      	str	r3, [r5, #0]
 8014972:	4240      	negs	r0, r0
 8014974:	b01d      	add	sp, #116	; 0x74
 8014976:	bc30      	pop	{r4, r5}
 8014978:	bc08      	pop	{r3}
 801497a:	b002      	add	sp, #8
 801497c:	4718      	bx	r3
 801497e:	2382      	movs	r3, #130	; 0x82
 8014980:	466a      	mov	r2, sp
 8014982:	009b      	lsls	r3, r3, #2
 8014984:	8293      	strh	r3, [r2, #20]
 8014986:	2300      	movs	r3, #0
 8014988:	9002      	str	r0, [sp, #8]
 801498a:	9006      	str	r0, [sp, #24]
 801498c:	4299      	cmp	r1, r3
 801498e:	d000      	beq.n	8014992 <snprintf+0x36>
 8014990:	1e4b      	subs	r3, r1, #1
 8014992:	9304      	str	r3, [sp, #16]
 8014994:	9307      	str	r3, [sp, #28]
 8014996:	2301      	movs	r3, #1
 8014998:	466a      	mov	r2, sp
 801499a:	425b      	negs	r3, r3
 801499c:	82d3      	strh	r3, [r2, #22]
 801499e:	0028      	movs	r0, r5
 80149a0:	ab21      	add	r3, sp, #132	; 0x84
 80149a2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80149a4:	a902      	add	r1, sp, #8
 80149a6:	9301      	str	r3, [sp, #4]
 80149a8:	f000 ff92 	bl	80158d0 <_svfprintf_r>
 80149ac:	1c43      	adds	r3, r0, #1
 80149ae:	da01      	bge.n	80149b4 <snprintf+0x58>
 80149b0:	238b      	movs	r3, #139	; 0x8b
 80149b2:	602b      	str	r3, [r5, #0]
 80149b4:	2c00      	cmp	r4, #0
 80149b6:	d0dd      	beq.n	8014974 <snprintf+0x18>
 80149b8:	2300      	movs	r3, #0
 80149ba:	9a02      	ldr	r2, [sp, #8]
 80149bc:	7013      	strb	r3, [r2, #0]
 80149be:	e7d9      	b.n	8014974 <snprintf+0x18>
 80149c0:	20000190 	.word	0x20000190

080149c4 <sprintf>:
 80149c4:	b40e      	push	{r1, r2, r3}
 80149c6:	b500      	push	{lr}
 80149c8:	490b      	ldr	r1, [pc, #44]	; (80149f8 <sprintf+0x34>)
 80149ca:	b09c      	sub	sp, #112	; 0x70
 80149cc:	ab1d      	add	r3, sp, #116	; 0x74
 80149ce:	9002      	str	r0, [sp, #8]
 80149d0:	9006      	str	r0, [sp, #24]
 80149d2:	9107      	str	r1, [sp, #28]
 80149d4:	9104      	str	r1, [sp, #16]
 80149d6:	4809      	ldr	r0, [pc, #36]	; (80149fc <sprintf+0x38>)
 80149d8:	4909      	ldr	r1, [pc, #36]	; (8014a00 <sprintf+0x3c>)
 80149da:	cb04      	ldmia	r3!, {r2}
 80149dc:	9105      	str	r1, [sp, #20]
 80149de:	6800      	ldr	r0, [r0, #0]
 80149e0:	a902      	add	r1, sp, #8
 80149e2:	9301      	str	r3, [sp, #4]
 80149e4:	f000 ff74 	bl	80158d0 <_svfprintf_r>
 80149e8:	2300      	movs	r3, #0
 80149ea:	9a02      	ldr	r2, [sp, #8]
 80149ec:	7013      	strb	r3, [r2, #0]
 80149ee:	b01c      	add	sp, #112	; 0x70
 80149f0:	bc08      	pop	{r3}
 80149f2:	b003      	add	sp, #12
 80149f4:	4718      	bx	r3
 80149f6:	46c0      	nop			; (mov r8, r8)
 80149f8:	7fffffff 	.word	0x7fffffff
 80149fc:	20000190 	.word	0x20000190
 8014a00:	ffff0208 	.word	0xffff0208

08014a04 <strcat>:
 8014a04:	0002      	movs	r2, r0
 8014a06:	b510      	push	{r4, lr}
 8014a08:	7813      	ldrb	r3, [r2, #0]
 8014a0a:	0014      	movs	r4, r2
 8014a0c:	3201      	adds	r2, #1
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d1fa      	bne.n	8014a08 <strcat+0x4>
 8014a12:	5cca      	ldrb	r2, [r1, r3]
 8014a14:	54e2      	strb	r2, [r4, r3]
 8014a16:	3301      	adds	r3, #1
 8014a18:	2a00      	cmp	r2, #0
 8014a1a:	d1fa      	bne.n	8014a12 <strcat+0xe>
 8014a1c:	bd10      	pop	{r4, pc}

08014a1e <strchr>:
 8014a1e:	b2c9      	uxtb	r1, r1
 8014a20:	7803      	ldrb	r3, [r0, #0]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d004      	beq.n	8014a30 <strchr+0x12>
 8014a26:	428b      	cmp	r3, r1
 8014a28:	d100      	bne.n	8014a2c <strchr+0xe>
 8014a2a:	4770      	bx	lr
 8014a2c:	3001      	adds	r0, #1
 8014a2e:	e7f7      	b.n	8014a20 <strchr+0x2>
 8014a30:	424b      	negs	r3, r1
 8014a32:	4159      	adcs	r1, r3
 8014a34:	4249      	negs	r1, r1
 8014a36:	4008      	ands	r0, r1
 8014a38:	e7f7      	b.n	8014a2a <strchr+0xc>

08014a3a <strcpy>:
 8014a3a:	0003      	movs	r3, r0
 8014a3c:	780a      	ldrb	r2, [r1, #0]
 8014a3e:	3101      	adds	r1, #1
 8014a40:	701a      	strb	r2, [r3, #0]
 8014a42:	3301      	adds	r3, #1
 8014a44:	2a00      	cmp	r2, #0
 8014a46:	d1f9      	bne.n	8014a3c <strcpy+0x2>
 8014a48:	4770      	bx	lr

08014a4a <strncmp>:
 8014a4a:	b530      	push	{r4, r5, lr}
 8014a4c:	0005      	movs	r5, r0
 8014a4e:	1e10      	subs	r0, r2, #0
 8014a50:	d00b      	beq.n	8014a6a <strncmp+0x20>
 8014a52:	2400      	movs	r4, #0
 8014a54:	3a01      	subs	r2, #1
 8014a56:	5d2b      	ldrb	r3, [r5, r4]
 8014a58:	5d08      	ldrb	r0, [r1, r4]
 8014a5a:	4283      	cmp	r3, r0
 8014a5c:	d104      	bne.n	8014a68 <strncmp+0x1e>
 8014a5e:	4294      	cmp	r4, r2
 8014a60:	d002      	beq.n	8014a68 <strncmp+0x1e>
 8014a62:	3401      	adds	r4, #1
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d1f6      	bne.n	8014a56 <strncmp+0xc>
 8014a68:	1a18      	subs	r0, r3, r0
 8014a6a:	bd30      	pop	{r4, r5, pc}

08014a6c <strncpy>:
 8014a6c:	0003      	movs	r3, r0
 8014a6e:	b530      	push	{r4, r5, lr}
 8014a70:	001d      	movs	r5, r3
 8014a72:	2a00      	cmp	r2, #0
 8014a74:	d006      	beq.n	8014a84 <strncpy+0x18>
 8014a76:	780c      	ldrb	r4, [r1, #0]
 8014a78:	3a01      	subs	r2, #1
 8014a7a:	3301      	adds	r3, #1
 8014a7c:	702c      	strb	r4, [r5, #0]
 8014a7e:	3101      	adds	r1, #1
 8014a80:	2c00      	cmp	r4, #0
 8014a82:	d1f5      	bne.n	8014a70 <strncpy+0x4>
 8014a84:	2100      	movs	r1, #0
 8014a86:	189a      	adds	r2, r3, r2
 8014a88:	4293      	cmp	r3, r2
 8014a8a:	d100      	bne.n	8014a8e <strncpy+0x22>
 8014a8c:	bd30      	pop	{r4, r5, pc}
 8014a8e:	7019      	strb	r1, [r3, #0]
 8014a90:	3301      	adds	r3, #1
 8014a92:	e7f9      	b.n	8014a88 <strncpy+0x1c>

08014a94 <sulp>:
 8014a94:	b570      	push	{r4, r5, r6, lr}
 8014a96:	0016      	movs	r6, r2
 8014a98:	000d      	movs	r5, r1
 8014a9a:	f004 f837 	bl	8018b0c <__ulp>
 8014a9e:	2e00      	cmp	r6, #0
 8014aa0:	d00d      	beq.n	8014abe <sulp+0x2a>
 8014aa2:	236b      	movs	r3, #107	; 0x6b
 8014aa4:	006a      	lsls	r2, r5, #1
 8014aa6:	0d52      	lsrs	r2, r2, #21
 8014aa8:	1a9b      	subs	r3, r3, r2
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	dd07      	ble.n	8014abe <sulp+0x2a>
 8014aae:	2400      	movs	r4, #0
 8014ab0:	4a03      	ldr	r2, [pc, #12]	; (8014ac0 <sulp+0x2c>)
 8014ab2:	051b      	lsls	r3, r3, #20
 8014ab4:	189d      	adds	r5, r3, r2
 8014ab6:	002b      	movs	r3, r5
 8014ab8:	0022      	movs	r2, r4
 8014aba:	f7ed fb53 	bl	8002164 <__aeabi_dmul>
 8014abe:	bd70      	pop	{r4, r5, r6, pc}
 8014ac0:	3ff00000 	.word	0x3ff00000

08014ac4 <_strtod_l>:
 8014ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ac6:	001d      	movs	r5, r3
 8014ac8:	2300      	movs	r3, #0
 8014aca:	b0a7      	sub	sp, #156	; 0x9c
 8014acc:	9322      	str	r3, [sp, #136]	; 0x88
 8014ace:	4bae      	ldr	r3, [pc, #696]	; (8014d88 <_strtod_l+0x2c4>)
 8014ad0:	9005      	str	r0, [sp, #20]
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	9108      	str	r1, [sp, #32]
 8014ad6:	0018      	movs	r0, r3
 8014ad8:	9307      	str	r3, [sp, #28]
 8014ada:	921d      	str	r2, [sp, #116]	; 0x74
 8014adc:	f7eb fb1c 	bl	8000118 <strlen>
 8014ae0:	2600      	movs	r6, #0
 8014ae2:	0004      	movs	r4, r0
 8014ae4:	2700      	movs	r7, #0
 8014ae6:	9b08      	ldr	r3, [sp, #32]
 8014ae8:	9321      	str	r3, [sp, #132]	; 0x84
 8014aea:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014aec:	7813      	ldrb	r3, [r2, #0]
 8014aee:	2b2b      	cmp	r3, #43	; 0x2b
 8014af0:	d058      	beq.n	8014ba4 <_strtod_l+0xe0>
 8014af2:	d844      	bhi.n	8014b7e <_strtod_l+0xba>
 8014af4:	2b0d      	cmp	r3, #13
 8014af6:	d83d      	bhi.n	8014b74 <_strtod_l+0xb0>
 8014af8:	2b08      	cmp	r3, #8
 8014afa:	d83d      	bhi.n	8014b78 <_strtod_l+0xb4>
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d047      	beq.n	8014b90 <_strtod_l+0xcc>
 8014b00:	2300      	movs	r3, #0
 8014b02:	9310      	str	r3, [sp, #64]	; 0x40
 8014b04:	2200      	movs	r2, #0
 8014b06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b08:	920a      	str	r2, [sp, #40]	; 0x28
 8014b0a:	9306      	str	r3, [sp, #24]
 8014b0c:	781b      	ldrb	r3, [r3, #0]
 8014b0e:	2b30      	cmp	r3, #48	; 0x30
 8014b10:	d000      	beq.n	8014b14 <_strtod_l+0x50>
 8014b12:	e083      	b.n	8014c1c <_strtod_l+0x158>
 8014b14:	9b06      	ldr	r3, [sp, #24]
 8014b16:	3220      	adds	r2, #32
 8014b18:	785b      	ldrb	r3, [r3, #1]
 8014b1a:	4393      	bics	r3, r2
 8014b1c:	2b58      	cmp	r3, #88	; 0x58
 8014b1e:	d000      	beq.n	8014b22 <_strtod_l+0x5e>
 8014b20:	e072      	b.n	8014c08 <_strtod_l+0x144>
 8014b22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014b24:	9502      	str	r5, [sp, #8]
 8014b26:	9301      	str	r3, [sp, #4]
 8014b28:	ab22      	add	r3, sp, #136	; 0x88
 8014b2a:	9300      	str	r3, [sp, #0]
 8014b2c:	4a97      	ldr	r2, [pc, #604]	; (8014d8c <_strtod_l+0x2c8>)
 8014b2e:	ab23      	add	r3, sp, #140	; 0x8c
 8014b30:	9805      	ldr	r0, [sp, #20]
 8014b32:	a921      	add	r1, sp, #132	; 0x84
 8014b34:	f003 f96c 	bl	8017e10 <__gethex>
 8014b38:	2307      	movs	r3, #7
 8014b3a:	0005      	movs	r5, r0
 8014b3c:	0004      	movs	r4, r0
 8014b3e:	401d      	ands	r5, r3
 8014b40:	4218      	tst	r0, r3
 8014b42:	d006      	beq.n	8014b52 <_strtod_l+0x8e>
 8014b44:	2d06      	cmp	r5, #6
 8014b46:	d12f      	bne.n	8014ba8 <_strtod_l+0xe4>
 8014b48:	9b06      	ldr	r3, [sp, #24]
 8014b4a:	3301      	adds	r3, #1
 8014b4c:	9321      	str	r3, [sp, #132]	; 0x84
 8014b4e:	2300      	movs	r3, #0
 8014b50:	9310      	str	r3, [sp, #64]	; 0x40
 8014b52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d002      	beq.n	8014b5e <_strtod_l+0x9a>
 8014b58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014b5a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014b5c:	601a      	str	r2, [r3, #0]
 8014b5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	d01c      	beq.n	8014b9e <_strtod_l+0xda>
 8014b64:	2380      	movs	r3, #128	; 0x80
 8014b66:	0032      	movs	r2, r6
 8014b68:	061b      	lsls	r3, r3, #24
 8014b6a:	18fb      	adds	r3, r7, r3
 8014b6c:	0010      	movs	r0, r2
 8014b6e:	0019      	movs	r1, r3
 8014b70:	b027      	add	sp, #156	; 0x9c
 8014b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b74:	2b20      	cmp	r3, #32
 8014b76:	d1c3      	bne.n	8014b00 <_strtod_l+0x3c>
 8014b78:	3201      	adds	r2, #1
 8014b7a:	9221      	str	r2, [sp, #132]	; 0x84
 8014b7c:	e7b5      	b.n	8014aea <_strtod_l+0x26>
 8014b7e:	2b2d      	cmp	r3, #45	; 0x2d
 8014b80:	d1be      	bne.n	8014b00 <_strtod_l+0x3c>
 8014b82:	3b2c      	subs	r3, #44	; 0x2c
 8014b84:	9310      	str	r3, [sp, #64]	; 0x40
 8014b86:	1c53      	adds	r3, r2, #1
 8014b88:	9321      	str	r3, [sp, #132]	; 0x84
 8014b8a:	7853      	ldrb	r3, [r2, #1]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d1b9      	bne.n	8014b04 <_strtod_l+0x40>
 8014b90:	9b08      	ldr	r3, [sp, #32]
 8014b92:	9321      	str	r3, [sp, #132]	; 0x84
 8014b94:	2300      	movs	r3, #0
 8014b96:	9310      	str	r3, [sp, #64]	; 0x40
 8014b98:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d1dc      	bne.n	8014b58 <_strtod_l+0x94>
 8014b9e:	0032      	movs	r2, r6
 8014ba0:	003b      	movs	r3, r7
 8014ba2:	e7e3      	b.n	8014b6c <_strtod_l+0xa8>
 8014ba4:	2300      	movs	r3, #0
 8014ba6:	e7ed      	b.n	8014b84 <_strtod_l+0xc0>
 8014ba8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8014baa:	2a00      	cmp	r2, #0
 8014bac:	d007      	beq.n	8014bbe <_strtod_l+0xfa>
 8014bae:	2135      	movs	r1, #53	; 0x35
 8014bb0:	a824      	add	r0, sp, #144	; 0x90
 8014bb2:	f004 f8aa 	bl	8018d0a <__copybits>
 8014bb6:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014bb8:	9805      	ldr	r0, [sp, #20]
 8014bba:	f003 fc99 	bl	80184f0 <_Bfree>
 8014bbe:	1e68      	subs	r0, r5, #1
 8014bc0:	2805      	cmp	r0, #5
 8014bc2:	d806      	bhi.n	8014bd2 <_strtod_l+0x10e>
 8014bc4:	f7eb fab0 	bl	8000128 <__gnu_thumb1_case_uqi>
 8014bc8:	1c190b0e 	.word	0x1c190b0e
 8014bcc:	030e      	.short	0x030e
 8014bce:	2700      	movs	r7, #0
 8014bd0:	003e      	movs	r6, r7
 8014bd2:	0723      	lsls	r3, r4, #28
 8014bd4:	d5bd      	bpl.n	8014b52 <_strtod_l+0x8e>
 8014bd6:	2380      	movs	r3, #128	; 0x80
 8014bd8:	061b      	lsls	r3, r3, #24
 8014bda:	431f      	orrs	r7, r3
 8014bdc:	e7b9      	b.n	8014b52 <_strtod_l+0x8e>
 8014bde:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014be0:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8014be2:	e7f6      	b.n	8014bd2 <_strtod_l+0x10e>
 8014be4:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014be6:	4a6a      	ldr	r2, [pc, #424]	; (8014d90 <_strtod_l+0x2cc>)
 8014be8:	496a      	ldr	r1, [pc, #424]	; (8014d94 <_strtod_l+0x2d0>)
 8014bea:	401a      	ands	r2, r3
 8014bec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8014bee:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014bf0:	185b      	adds	r3, r3, r1
 8014bf2:	051b      	lsls	r3, r3, #20
 8014bf4:	431a      	orrs	r2, r3
 8014bf6:	0017      	movs	r7, r2
 8014bf8:	e7eb      	b.n	8014bd2 <_strtod_l+0x10e>
 8014bfa:	2600      	movs	r6, #0
 8014bfc:	4f66      	ldr	r7, [pc, #408]	; (8014d98 <_strtod_l+0x2d4>)
 8014bfe:	e7e8      	b.n	8014bd2 <_strtod_l+0x10e>
 8014c00:	2601      	movs	r6, #1
 8014c02:	4f66      	ldr	r7, [pc, #408]	; (8014d9c <_strtod_l+0x2d8>)
 8014c04:	4276      	negs	r6, r6
 8014c06:	e7e4      	b.n	8014bd2 <_strtod_l+0x10e>
 8014c08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014c0a:	1c5a      	adds	r2, r3, #1
 8014c0c:	9221      	str	r2, [sp, #132]	; 0x84
 8014c0e:	785b      	ldrb	r3, [r3, #1]
 8014c10:	2b30      	cmp	r3, #48	; 0x30
 8014c12:	d0f9      	beq.n	8014c08 <_strtod_l+0x144>
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d09c      	beq.n	8014b52 <_strtod_l+0x8e>
 8014c18:	2301      	movs	r3, #1
 8014c1a:	930a      	str	r3, [sp, #40]	; 0x28
 8014c1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014c1e:	220a      	movs	r2, #10
 8014c20:	9311      	str	r3, [sp, #68]	; 0x44
 8014c22:	2300      	movs	r3, #0
 8014c24:	930e      	str	r3, [sp, #56]	; 0x38
 8014c26:	930b      	str	r3, [sp, #44]	; 0x2c
 8014c28:	9309      	str	r3, [sp, #36]	; 0x24
 8014c2a:	9821      	ldr	r0, [sp, #132]	; 0x84
 8014c2c:	7805      	ldrb	r5, [r0, #0]
 8014c2e:	002b      	movs	r3, r5
 8014c30:	3b30      	subs	r3, #48	; 0x30
 8014c32:	b2d9      	uxtb	r1, r3
 8014c34:	2909      	cmp	r1, #9
 8014c36:	d927      	bls.n	8014c88 <_strtod_l+0x1c4>
 8014c38:	0022      	movs	r2, r4
 8014c3a:	9907      	ldr	r1, [sp, #28]
 8014c3c:	f7ff ff05 	bl	8014a4a <strncmp>
 8014c40:	2800      	cmp	r0, #0
 8014c42:	d033      	beq.n	8014cac <_strtod_l+0x1e8>
 8014c44:	2000      	movs	r0, #0
 8014c46:	002b      	movs	r3, r5
 8014c48:	4684      	mov	ip, r0
 8014c4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014c4c:	900c      	str	r0, [sp, #48]	; 0x30
 8014c4e:	9206      	str	r2, [sp, #24]
 8014c50:	2220      	movs	r2, #32
 8014c52:	0019      	movs	r1, r3
 8014c54:	4391      	bics	r1, r2
 8014c56:	000a      	movs	r2, r1
 8014c58:	2100      	movs	r1, #0
 8014c5a:	9107      	str	r1, [sp, #28]
 8014c5c:	2a45      	cmp	r2, #69	; 0x45
 8014c5e:	d000      	beq.n	8014c62 <_strtod_l+0x19e>
 8014c60:	e0c5      	b.n	8014dee <_strtod_l+0x32a>
 8014c62:	9b06      	ldr	r3, [sp, #24]
 8014c64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014c66:	4303      	orrs	r3, r0
 8014c68:	4313      	orrs	r3, r2
 8014c6a:	428b      	cmp	r3, r1
 8014c6c:	d090      	beq.n	8014b90 <_strtod_l+0xcc>
 8014c6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014c70:	9308      	str	r3, [sp, #32]
 8014c72:	3301      	adds	r3, #1
 8014c74:	9321      	str	r3, [sp, #132]	; 0x84
 8014c76:	9b08      	ldr	r3, [sp, #32]
 8014c78:	785b      	ldrb	r3, [r3, #1]
 8014c7a:	2b2b      	cmp	r3, #43	; 0x2b
 8014c7c:	d075      	beq.n	8014d6a <_strtod_l+0x2a6>
 8014c7e:	000c      	movs	r4, r1
 8014c80:	2b2d      	cmp	r3, #45	; 0x2d
 8014c82:	d178      	bne.n	8014d76 <_strtod_l+0x2b2>
 8014c84:	2401      	movs	r4, #1
 8014c86:	e071      	b.n	8014d6c <_strtod_l+0x2a8>
 8014c88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014c8a:	2908      	cmp	r1, #8
 8014c8c:	dc09      	bgt.n	8014ca2 <_strtod_l+0x1de>
 8014c8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014c90:	4351      	muls	r1, r2
 8014c92:	185b      	adds	r3, r3, r1
 8014c94:	930b      	str	r3, [sp, #44]	; 0x2c
 8014c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c98:	3001      	adds	r0, #1
 8014c9a:	3301      	adds	r3, #1
 8014c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8014c9e:	9021      	str	r0, [sp, #132]	; 0x84
 8014ca0:	e7c3      	b.n	8014c2a <_strtod_l+0x166>
 8014ca2:	990e      	ldr	r1, [sp, #56]	; 0x38
 8014ca4:	4351      	muls	r1, r2
 8014ca6:	185b      	adds	r3, r3, r1
 8014ca8:	930e      	str	r3, [sp, #56]	; 0x38
 8014caa:	e7f4      	b.n	8014c96 <_strtod_l+0x1d2>
 8014cac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014cae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014cb0:	191c      	adds	r4, r3, r4
 8014cb2:	9421      	str	r4, [sp, #132]	; 0x84
 8014cb4:	7823      	ldrb	r3, [r4, #0]
 8014cb6:	2a00      	cmp	r2, #0
 8014cb8:	d039      	beq.n	8014d2e <_strtod_l+0x26a>
 8014cba:	900c      	str	r0, [sp, #48]	; 0x30
 8014cbc:	9206      	str	r2, [sp, #24]
 8014cbe:	001a      	movs	r2, r3
 8014cc0:	3a30      	subs	r2, #48	; 0x30
 8014cc2:	2a09      	cmp	r2, #9
 8014cc4:	d912      	bls.n	8014cec <_strtod_l+0x228>
 8014cc6:	2201      	movs	r2, #1
 8014cc8:	4694      	mov	ip, r2
 8014cca:	e7c1      	b.n	8014c50 <_strtod_l+0x18c>
 8014ccc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014cce:	3001      	adds	r0, #1
 8014cd0:	1c5a      	adds	r2, r3, #1
 8014cd2:	9221      	str	r2, [sp, #132]	; 0x84
 8014cd4:	785b      	ldrb	r3, [r3, #1]
 8014cd6:	2b30      	cmp	r3, #48	; 0x30
 8014cd8:	d0f8      	beq.n	8014ccc <_strtod_l+0x208>
 8014cda:	001a      	movs	r2, r3
 8014cdc:	3a31      	subs	r2, #49	; 0x31
 8014cde:	2a08      	cmp	r2, #8
 8014ce0:	d83e      	bhi.n	8014d60 <_strtod_l+0x29c>
 8014ce2:	900c      	str	r0, [sp, #48]	; 0x30
 8014ce4:	2000      	movs	r0, #0
 8014ce6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014ce8:	9006      	str	r0, [sp, #24]
 8014cea:	9211      	str	r2, [sp, #68]	; 0x44
 8014cec:	001a      	movs	r2, r3
 8014cee:	9906      	ldr	r1, [sp, #24]
 8014cf0:	1c44      	adds	r4, r0, #1
 8014cf2:	3a30      	subs	r2, #48	; 0x30
 8014cf4:	2b30      	cmp	r3, #48	; 0x30
 8014cf6:	d013      	beq.n	8014d20 <_strtod_l+0x25c>
 8014cf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014cfa:	191b      	adds	r3, r3, r4
 8014cfc:	930c      	str	r3, [sp, #48]	; 0x30
 8014cfe:	1844      	adds	r4, r0, r1
 8014d00:	000b      	movs	r3, r1
 8014d02:	210a      	movs	r1, #10
 8014d04:	429c      	cmp	r4, r3
 8014d06:	d114      	bne.n	8014d32 <_strtod_l+0x26e>
 8014d08:	9b06      	ldr	r3, [sp, #24]
 8014d0a:	1c59      	adds	r1, r3, #1
 8014d0c:	1809      	adds	r1, r1, r0
 8014d0e:	1818      	adds	r0, r3, r0
 8014d10:	2808      	cmp	r0, #8
 8014d12:	dc1c      	bgt.n	8014d4e <_strtod_l+0x28a>
 8014d14:	230a      	movs	r3, #10
 8014d16:	2400      	movs	r4, #0
 8014d18:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014d1a:	4343      	muls	r3, r0
 8014d1c:	18d3      	adds	r3, r2, r3
 8014d1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014d20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014d22:	0020      	movs	r0, r4
 8014d24:	1c5a      	adds	r2, r3, #1
 8014d26:	9221      	str	r2, [sp, #132]	; 0x84
 8014d28:	785b      	ldrb	r3, [r3, #1]
 8014d2a:	9106      	str	r1, [sp, #24]
 8014d2c:	e7c7      	b.n	8014cbe <_strtod_l+0x1fa>
 8014d2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014d30:	e7d1      	b.n	8014cd6 <_strtod_l+0x212>
 8014d32:	2b08      	cmp	r3, #8
 8014d34:	dc04      	bgt.n	8014d40 <_strtod_l+0x27c>
 8014d36:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8014d38:	434d      	muls	r5, r1
 8014d3a:	950b      	str	r5, [sp, #44]	; 0x2c
 8014d3c:	3301      	adds	r3, #1
 8014d3e:	e7e1      	b.n	8014d04 <_strtod_l+0x240>
 8014d40:	1c5d      	adds	r5, r3, #1
 8014d42:	2d10      	cmp	r5, #16
 8014d44:	dcfa      	bgt.n	8014d3c <_strtod_l+0x278>
 8014d46:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8014d48:	434d      	muls	r5, r1
 8014d4a:	950e      	str	r5, [sp, #56]	; 0x38
 8014d4c:	e7f6      	b.n	8014d3c <_strtod_l+0x278>
 8014d4e:	2400      	movs	r4, #0
 8014d50:	2910      	cmp	r1, #16
 8014d52:	dce5      	bgt.n	8014d20 <_strtod_l+0x25c>
 8014d54:	230a      	movs	r3, #10
 8014d56:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014d58:	4343      	muls	r3, r0
 8014d5a:	18d3      	adds	r3, r2, r3
 8014d5c:	930e      	str	r3, [sp, #56]	; 0x38
 8014d5e:	e7df      	b.n	8014d20 <_strtod_l+0x25c>
 8014d60:	2200      	movs	r2, #0
 8014d62:	920c      	str	r2, [sp, #48]	; 0x30
 8014d64:	9206      	str	r2, [sp, #24]
 8014d66:	3201      	adds	r2, #1
 8014d68:	e7ae      	b.n	8014cc8 <_strtod_l+0x204>
 8014d6a:	2400      	movs	r4, #0
 8014d6c:	9b08      	ldr	r3, [sp, #32]
 8014d6e:	3302      	adds	r3, #2
 8014d70:	9321      	str	r3, [sp, #132]	; 0x84
 8014d72:	9b08      	ldr	r3, [sp, #32]
 8014d74:	789b      	ldrb	r3, [r3, #2]
 8014d76:	001a      	movs	r2, r3
 8014d78:	3a30      	subs	r2, #48	; 0x30
 8014d7a:	2a09      	cmp	r2, #9
 8014d7c:	d914      	bls.n	8014da8 <_strtod_l+0x2e4>
 8014d7e:	9a08      	ldr	r2, [sp, #32]
 8014d80:	9221      	str	r2, [sp, #132]	; 0x84
 8014d82:	2200      	movs	r2, #0
 8014d84:	e032      	b.n	8014dec <_strtod_l+0x328>
 8014d86:	46c0      	nop			; (mov r8, r8)
 8014d88:	0801d924 	.word	0x0801d924
 8014d8c:	0801d798 	.word	0x0801d798
 8014d90:	ffefffff 	.word	0xffefffff
 8014d94:	00000433 	.word	0x00000433
 8014d98:	7ff00000 	.word	0x7ff00000
 8014d9c:	7fffffff 	.word	0x7fffffff
 8014da0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014da2:	1c5a      	adds	r2, r3, #1
 8014da4:	9221      	str	r2, [sp, #132]	; 0x84
 8014da6:	785b      	ldrb	r3, [r3, #1]
 8014da8:	2b30      	cmp	r3, #48	; 0x30
 8014daa:	d0f9      	beq.n	8014da0 <_strtod_l+0x2dc>
 8014dac:	2200      	movs	r2, #0
 8014dae:	9207      	str	r2, [sp, #28]
 8014db0:	001a      	movs	r2, r3
 8014db2:	3a31      	subs	r2, #49	; 0x31
 8014db4:	2a08      	cmp	r2, #8
 8014db6:	d81a      	bhi.n	8014dee <_strtod_l+0x32a>
 8014db8:	3b30      	subs	r3, #48	; 0x30
 8014dba:	001a      	movs	r2, r3
 8014dbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014dbe:	9307      	str	r3, [sp, #28]
 8014dc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014dc2:	1c59      	adds	r1, r3, #1
 8014dc4:	9121      	str	r1, [sp, #132]	; 0x84
 8014dc6:	785b      	ldrb	r3, [r3, #1]
 8014dc8:	001d      	movs	r5, r3
 8014dca:	3d30      	subs	r5, #48	; 0x30
 8014dcc:	2d09      	cmp	r5, #9
 8014dce:	d939      	bls.n	8014e44 <_strtod_l+0x380>
 8014dd0:	9d07      	ldr	r5, [sp, #28]
 8014dd2:	1b49      	subs	r1, r1, r5
 8014dd4:	4daf      	ldr	r5, [pc, #700]	; (8015094 <_strtod_l+0x5d0>)
 8014dd6:	9507      	str	r5, [sp, #28]
 8014dd8:	2908      	cmp	r1, #8
 8014dda:	dc03      	bgt.n	8014de4 <_strtod_l+0x320>
 8014ddc:	9207      	str	r2, [sp, #28]
 8014dde:	42aa      	cmp	r2, r5
 8014de0:	dd00      	ble.n	8014de4 <_strtod_l+0x320>
 8014de2:	9507      	str	r5, [sp, #28]
 8014de4:	2c00      	cmp	r4, #0
 8014de6:	d002      	beq.n	8014dee <_strtod_l+0x32a>
 8014de8:	9a07      	ldr	r2, [sp, #28]
 8014dea:	4252      	negs	r2, r2
 8014dec:	9207      	str	r2, [sp, #28]
 8014dee:	9a06      	ldr	r2, [sp, #24]
 8014df0:	2a00      	cmp	r2, #0
 8014df2:	d14b      	bne.n	8014e8c <_strtod_l+0x3c8>
 8014df4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014df6:	4310      	orrs	r0, r2
 8014df8:	d000      	beq.n	8014dfc <_strtod_l+0x338>
 8014dfa:	e6aa      	b.n	8014b52 <_strtod_l+0x8e>
 8014dfc:	4662      	mov	r2, ip
 8014dfe:	2a00      	cmp	r2, #0
 8014e00:	d000      	beq.n	8014e04 <_strtod_l+0x340>
 8014e02:	e6c5      	b.n	8014b90 <_strtod_l+0xcc>
 8014e04:	2b69      	cmp	r3, #105	; 0x69
 8014e06:	d025      	beq.n	8014e54 <_strtod_l+0x390>
 8014e08:	dc21      	bgt.n	8014e4e <_strtod_l+0x38a>
 8014e0a:	2b49      	cmp	r3, #73	; 0x49
 8014e0c:	d022      	beq.n	8014e54 <_strtod_l+0x390>
 8014e0e:	2b4e      	cmp	r3, #78	; 0x4e
 8014e10:	d000      	beq.n	8014e14 <_strtod_l+0x350>
 8014e12:	e6bd      	b.n	8014b90 <_strtod_l+0xcc>
 8014e14:	49a0      	ldr	r1, [pc, #640]	; (8015098 <_strtod_l+0x5d4>)
 8014e16:	a821      	add	r0, sp, #132	; 0x84
 8014e18:	f003 fa48 	bl	80182ac <__match>
 8014e1c:	2800      	cmp	r0, #0
 8014e1e:	d100      	bne.n	8014e22 <_strtod_l+0x35e>
 8014e20:	e6b6      	b.n	8014b90 <_strtod_l+0xcc>
 8014e22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e24:	781b      	ldrb	r3, [r3, #0]
 8014e26:	2b28      	cmp	r3, #40	; 0x28
 8014e28:	d12a      	bne.n	8014e80 <_strtod_l+0x3bc>
 8014e2a:	499c      	ldr	r1, [pc, #624]	; (801509c <_strtod_l+0x5d8>)
 8014e2c:	aa24      	add	r2, sp, #144	; 0x90
 8014e2e:	a821      	add	r0, sp, #132	; 0x84
 8014e30:	f003 fa50 	bl	80182d4 <__hexnan>
 8014e34:	2805      	cmp	r0, #5
 8014e36:	d123      	bne.n	8014e80 <_strtod_l+0x3bc>
 8014e38:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8014e3a:	4a99      	ldr	r2, [pc, #612]	; (80150a0 <_strtod_l+0x5dc>)
 8014e3c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8014e3e:	431a      	orrs	r2, r3
 8014e40:	0017      	movs	r7, r2
 8014e42:	e686      	b.n	8014b52 <_strtod_l+0x8e>
 8014e44:	210a      	movs	r1, #10
 8014e46:	434a      	muls	r2, r1
 8014e48:	18d2      	adds	r2, r2, r3
 8014e4a:	3a30      	subs	r2, #48	; 0x30
 8014e4c:	e7b8      	b.n	8014dc0 <_strtod_l+0x2fc>
 8014e4e:	2b6e      	cmp	r3, #110	; 0x6e
 8014e50:	d0e0      	beq.n	8014e14 <_strtod_l+0x350>
 8014e52:	e69d      	b.n	8014b90 <_strtod_l+0xcc>
 8014e54:	4993      	ldr	r1, [pc, #588]	; (80150a4 <_strtod_l+0x5e0>)
 8014e56:	a821      	add	r0, sp, #132	; 0x84
 8014e58:	f003 fa28 	bl	80182ac <__match>
 8014e5c:	2800      	cmp	r0, #0
 8014e5e:	d100      	bne.n	8014e62 <_strtod_l+0x39e>
 8014e60:	e696      	b.n	8014b90 <_strtod_l+0xcc>
 8014e62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e64:	4990      	ldr	r1, [pc, #576]	; (80150a8 <_strtod_l+0x5e4>)
 8014e66:	3b01      	subs	r3, #1
 8014e68:	a821      	add	r0, sp, #132	; 0x84
 8014e6a:	9321      	str	r3, [sp, #132]	; 0x84
 8014e6c:	f003 fa1e 	bl	80182ac <__match>
 8014e70:	2800      	cmp	r0, #0
 8014e72:	d102      	bne.n	8014e7a <_strtod_l+0x3b6>
 8014e74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014e76:	3301      	adds	r3, #1
 8014e78:	9321      	str	r3, [sp, #132]	; 0x84
 8014e7a:	2600      	movs	r6, #0
 8014e7c:	4f88      	ldr	r7, [pc, #544]	; (80150a0 <_strtod_l+0x5dc>)
 8014e7e:	e668      	b.n	8014b52 <_strtod_l+0x8e>
 8014e80:	488a      	ldr	r0, [pc, #552]	; (80150ac <_strtod_l+0x5e8>)
 8014e82:	f003 ffb9 	bl	8018df8 <nan>
 8014e86:	0006      	movs	r6, r0
 8014e88:	000f      	movs	r7, r1
 8014e8a:	e662      	b.n	8014b52 <_strtod_l+0x8e>
 8014e8c:	9b07      	ldr	r3, [sp, #28]
 8014e8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014e90:	1a9b      	subs	r3, r3, r2
 8014e92:	930a      	str	r3, [sp, #40]	; 0x28
 8014e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d101      	bne.n	8014e9e <_strtod_l+0x3da>
 8014e9a:	9b06      	ldr	r3, [sp, #24]
 8014e9c:	9309      	str	r3, [sp, #36]	; 0x24
 8014e9e:	9c06      	ldr	r4, [sp, #24]
 8014ea0:	2c10      	cmp	r4, #16
 8014ea2:	dd00      	ble.n	8014ea6 <_strtod_l+0x3e2>
 8014ea4:	2410      	movs	r4, #16
 8014ea6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014ea8:	f7ed ffde 	bl	8002e68 <__aeabi_ui2d>
 8014eac:	9b06      	ldr	r3, [sp, #24]
 8014eae:	0006      	movs	r6, r0
 8014eb0:	000f      	movs	r7, r1
 8014eb2:	2b09      	cmp	r3, #9
 8014eb4:	dd15      	ble.n	8014ee2 <_strtod_l+0x41e>
 8014eb6:	0022      	movs	r2, r4
 8014eb8:	4b7d      	ldr	r3, [pc, #500]	; (80150b0 <_strtod_l+0x5ec>)
 8014eba:	3a09      	subs	r2, #9
 8014ebc:	00d2      	lsls	r2, r2, #3
 8014ebe:	189b      	adds	r3, r3, r2
 8014ec0:	681a      	ldr	r2, [r3, #0]
 8014ec2:	685b      	ldr	r3, [r3, #4]
 8014ec4:	f7ed f94e 	bl	8002164 <__aeabi_dmul>
 8014ec8:	0006      	movs	r6, r0
 8014eca:	980e      	ldr	r0, [sp, #56]	; 0x38
 8014ecc:	000f      	movs	r7, r1
 8014ece:	f7ed ffcb 	bl	8002e68 <__aeabi_ui2d>
 8014ed2:	0002      	movs	r2, r0
 8014ed4:	000b      	movs	r3, r1
 8014ed6:	0030      	movs	r0, r6
 8014ed8:	0039      	movs	r1, r7
 8014eda:	f7ec f9d3 	bl	8001284 <__aeabi_dadd>
 8014ede:	0006      	movs	r6, r0
 8014ee0:	000f      	movs	r7, r1
 8014ee2:	9b06      	ldr	r3, [sp, #24]
 8014ee4:	2b0f      	cmp	r3, #15
 8014ee6:	dc39      	bgt.n	8014f5c <_strtod_l+0x498>
 8014ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014eea:	2b00      	cmp	r3, #0
 8014eec:	d100      	bne.n	8014ef0 <_strtod_l+0x42c>
 8014eee:	e630      	b.n	8014b52 <_strtod_l+0x8e>
 8014ef0:	dd24      	ble.n	8014f3c <_strtod_l+0x478>
 8014ef2:	2b16      	cmp	r3, #22
 8014ef4:	dc09      	bgt.n	8014f0a <_strtod_l+0x446>
 8014ef6:	00dd      	lsls	r5, r3, #3
 8014ef8:	0032      	movs	r2, r6
 8014efa:	003b      	movs	r3, r7
 8014efc:	4c6c      	ldr	r4, [pc, #432]	; (80150b0 <_strtod_l+0x5ec>)
 8014efe:	1964      	adds	r4, r4, r5
 8014f00:	6820      	ldr	r0, [r4, #0]
 8014f02:	6861      	ldr	r1, [r4, #4]
 8014f04:	f7ed f92e 	bl	8002164 <__aeabi_dmul>
 8014f08:	e7bd      	b.n	8014e86 <_strtod_l+0x3c2>
 8014f0a:	2325      	movs	r3, #37	; 0x25
 8014f0c:	9a06      	ldr	r2, [sp, #24]
 8014f0e:	1a9b      	subs	r3, r3, r2
 8014f10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014f12:	4293      	cmp	r3, r2
 8014f14:	db22      	blt.n	8014f5c <_strtod_l+0x498>
 8014f16:	240f      	movs	r4, #15
 8014f18:	9b06      	ldr	r3, [sp, #24]
 8014f1a:	4d65      	ldr	r5, [pc, #404]	; (80150b0 <_strtod_l+0x5ec>)
 8014f1c:	1ae4      	subs	r4, r4, r3
 8014f1e:	00e1      	lsls	r1, r4, #3
 8014f20:	1869      	adds	r1, r5, r1
 8014f22:	0032      	movs	r2, r6
 8014f24:	6808      	ldr	r0, [r1, #0]
 8014f26:	6849      	ldr	r1, [r1, #4]
 8014f28:	003b      	movs	r3, r7
 8014f2a:	f7ed f91b 	bl	8002164 <__aeabi_dmul>
 8014f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f30:	1b1c      	subs	r4, r3, r4
 8014f32:	00e4      	lsls	r4, r4, #3
 8014f34:	192c      	adds	r4, r5, r4
 8014f36:	6822      	ldr	r2, [r4, #0]
 8014f38:	6863      	ldr	r3, [r4, #4]
 8014f3a:	e7e3      	b.n	8014f04 <_strtod_l+0x440>
 8014f3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f3e:	3316      	adds	r3, #22
 8014f40:	db0c      	blt.n	8014f5c <_strtod_l+0x498>
 8014f42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014f44:	9a07      	ldr	r2, [sp, #28]
 8014f46:	0030      	movs	r0, r6
 8014f48:	1a9a      	subs	r2, r3, r2
 8014f4a:	4b59      	ldr	r3, [pc, #356]	; (80150b0 <_strtod_l+0x5ec>)
 8014f4c:	00d2      	lsls	r2, r2, #3
 8014f4e:	189b      	adds	r3, r3, r2
 8014f50:	0039      	movs	r1, r7
 8014f52:	681a      	ldr	r2, [r3, #0]
 8014f54:	685b      	ldr	r3, [r3, #4]
 8014f56:	f7ec fcff 	bl	8001958 <__aeabi_ddiv>
 8014f5a:	e794      	b.n	8014e86 <_strtod_l+0x3c2>
 8014f5c:	9b06      	ldr	r3, [sp, #24]
 8014f5e:	1b1c      	subs	r4, r3, r4
 8014f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f62:	18e4      	adds	r4, r4, r3
 8014f64:	2c00      	cmp	r4, #0
 8014f66:	dd70      	ble.n	801504a <_strtod_l+0x586>
 8014f68:	230f      	movs	r3, #15
 8014f6a:	0021      	movs	r1, r4
 8014f6c:	4019      	ands	r1, r3
 8014f6e:	421c      	tst	r4, r3
 8014f70:	d00a      	beq.n	8014f88 <_strtod_l+0x4c4>
 8014f72:	00cb      	lsls	r3, r1, #3
 8014f74:	494e      	ldr	r1, [pc, #312]	; (80150b0 <_strtod_l+0x5ec>)
 8014f76:	0032      	movs	r2, r6
 8014f78:	18c9      	adds	r1, r1, r3
 8014f7a:	6808      	ldr	r0, [r1, #0]
 8014f7c:	6849      	ldr	r1, [r1, #4]
 8014f7e:	003b      	movs	r3, r7
 8014f80:	f7ed f8f0 	bl	8002164 <__aeabi_dmul>
 8014f84:	0006      	movs	r6, r0
 8014f86:	000f      	movs	r7, r1
 8014f88:	230f      	movs	r3, #15
 8014f8a:	439c      	bics	r4, r3
 8014f8c:	d048      	beq.n	8015020 <_strtod_l+0x55c>
 8014f8e:	3326      	adds	r3, #38	; 0x26
 8014f90:	33ff      	adds	r3, #255	; 0xff
 8014f92:	429c      	cmp	r4, r3
 8014f94:	dd22      	ble.n	8014fdc <_strtod_l+0x518>
 8014f96:	2300      	movs	r3, #0
 8014f98:	9306      	str	r3, [sp, #24]
 8014f9a:	9307      	str	r3, [sp, #28]
 8014f9c:	930b      	str	r3, [sp, #44]	; 0x2c
 8014f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8014fa0:	2322      	movs	r3, #34	; 0x22
 8014fa2:	2600      	movs	r6, #0
 8014fa4:	9a05      	ldr	r2, [sp, #20]
 8014fa6:	4f3e      	ldr	r7, [pc, #248]	; (80150a0 <_strtod_l+0x5dc>)
 8014fa8:	6013      	str	r3, [r2, #0]
 8014faa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014fac:	42b3      	cmp	r3, r6
 8014fae:	d100      	bne.n	8014fb2 <_strtod_l+0x4ee>
 8014fb0:	e5cf      	b.n	8014b52 <_strtod_l+0x8e>
 8014fb2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8014fb4:	9805      	ldr	r0, [sp, #20]
 8014fb6:	f003 fa9b 	bl	80184f0 <_Bfree>
 8014fba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014fbc:	9805      	ldr	r0, [sp, #20]
 8014fbe:	f003 fa97 	bl	80184f0 <_Bfree>
 8014fc2:	9907      	ldr	r1, [sp, #28]
 8014fc4:	9805      	ldr	r0, [sp, #20]
 8014fc6:	f003 fa93 	bl	80184f0 <_Bfree>
 8014fca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014fcc:	9805      	ldr	r0, [sp, #20]
 8014fce:	f003 fa8f 	bl	80184f0 <_Bfree>
 8014fd2:	9906      	ldr	r1, [sp, #24]
 8014fd4:	9805      	ldr	r0, [sp, #20]
 8014fd6:	f003 fa8b 	bl	80184f0 <_Bfree>
 8014fda:	e5ba      	b.n	8014b52 <_strtod_l+0x8e>
 8014fdc:	2300      	movs	r3, #0
 8014fde:	0030      	movs	r0, r6
 8014fe0:	0039      	movs	r1, r7
 8014fe2:	001d      	movs	r5, r3
 8014fe4:	1124      	asrs	r4, r4, #4
 8014fe6:	2c01      	cmp	r4, #1
 8014fe8:	dc1d      	bgt.n	8015026 <_strtod_l+0x562>
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d001      	beq.n	8014ff2 <_strtod_l+0x52e>
 8014fee:	0006      	movs	r6, r0
 8014ff0:	000f      	movs	r7, r1
 8014ff2:	4b30      	ldr	r3, [pc, #192]	; (80150b4 <_strtod_l+0x5f0>)
 8014ff4:	00ed      	lsls	r5, r5, #3
 8014ff6:	18ff      	adds	r7, r7, r3
 8014ff8:	4b2f      	ldr	r3, [pc, #188]	; (80150b8 <_strtod_l+0x5f4>)
 8014ffa:	0032      	movs	r2, r6
 8014ffc:	195d      	adds	r5, r3, r5
 8014ffe:	6828      	ldr	r0, [r5, #0]
 8015000:	6869      	ldr	r1, [r5, #4]
 8015002:	003b      	movs	r3, r7
 8015004:	f7ed f8ae 	bl	8002164 <__aeabi_dmul>
 8015008:	4b25      	ldr	r3, [pc, #148]	; (80150a0 <_strtod_l+0x5dc>)
 801500a:	4a2c      	ldr	r2, [pc, #176]	; (80150bc <_strtod_l+0x5f8>)
 801500c:	0006      	movs	r6, r0
 801500e:	400b      	ands	r3, r1
 8015010:	4293      	cmp	r3, r2
 8015012:	d8c0      	bhi.n	8014f96 <_strtod_l+0x4d2>
 8015014:	4a2a      	ldr	r2, [pc, #168]	; (80150c0 <_strtod_l+0x5fc>)
 8015016:	4293      	cmp	r3, r2
 8015018:	d913      	bls.n	8015042 <_strtod_l+0x57e>
 801501a:	2601      	movs	r6, #1
 801501c:	4f29      	ldr	r7, [pc, #164]	; (80150c4 <_strtod_l+0x600>)
 801501e:	4276      	negs	r6, r6
 8015020:	2300      	movs	r3, #0
 8015022:	9308      	str	r3, [sp, #32]
 8015024:	e087      	b.n	8015136 <_strtod_l+0x672>
 8015026:	2201      	movs	r2, #1
 8015028:	4214      	tst	r4, r2
 801502a:	d007      	beq.n	801503c <_strtod_l+0x578>
 801502c:	4a22      	ldr	r2, [pc, #136]	; (80150b8 <_strtod_l+0x5f4>)
 801502e:	00eb      	lsls	r3, r5, #3
 8015030:	189b      	adds	r3, r3, r2
 8015032:	681a      	ldr	r2, [r3, #0]
 8015034:	685b      	ldr	r3, [r3, #4]
 8015036:	f7ed f895 	bl	8002164 <__aeabi_dmul>
 801503a:	2301      	movs	r3, #1
 801503c:	3501      	adds	r5, #1
 801503e:	1064      	asrs	r4, r4, #1
 8015040:	e7d1      	b.n	8014fe6 <_strtod_l+0x522>
 8015042:	23d4      	movs	r3, #212	; 0xd4
 8015044:	049b      	lsls	r3, r3, #18
 8015046:	18cf      	adds	r7, r1, r3
 8015048:	e7ea      	b.n	8015020 <_strtod_l+0x55c>
 801504a:	2c00      	cmp	r4, #0
 801504c:	d0e8      	beq.n	8015020 <_strtod_l+0x55c>
 801504e:	4264      	negs	r4, r4
 8015050:	220f      	movs	r2, #15
 8015052:	0023      	movs	r3, r4
 8015054:	4013      	ands	r3, r2
 8015056:	4214      	tst	r4, r2
 8015058:	d00a      	beq.n	8015070 <_strtod_l+0x5ac>
 801505a:	00da      	lsls	r2, r3, #3
 801505c:	4b14      	ldr	r3, [pc, #80]	; (80150b0 <_strtod_l+0x5ec>)
 801505e:	0030      	movs	r0, r6
 8015060:	189b      	adds	r3, r3, r2
 8015062:	0039      	movs	r1, r7
 8015064:	681a      	ldr	r2, [r3, #0]
 8015066:	685b      	ldr	r3, [r3, #4]
 8015068:	f7ec fc76 	bl	8001958 <__aeabi_ddiv>
 801506c:	0006      	movs	r6, r0
 801506e:	000f      	movs	r7, r1
 8015070:	1124      	asrs	r4, r4, #4
 8015072:	d0d5      	beq.n	8015020 <_strtod_l+0x55c>
 8015074:	2c1f      	cmp	r4, #31
 8015076:	dd27      	ble.n	80150c8 <_strtod_l+0x604>
 8015078:	2300      	movs	r3, #0
 801507a:	9306      	str	r3, [sp, #24]
 801507c:	9307      	str	r3, [sp, #28]
 801507e:	930b      	str	r3, [sp, #44]	; 0x2c
 8015080:	9309      	str	r3, [sp, #36]	; 0x24
 8015082:	2322      	movs	r3, #34	; 0x22
 8015084:	9a05      	ldr	r2, [sp, #20]
 8015086:	2600      	movs	r6, #0
 8015088:	6013      	str	r3, [r2, #0]
 801508a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801508c:	2700      	movs	r7, #0
 801508e:	2b00      	cmp	r3, #0
 8015090:	d18f      	bne.n	8014fb2 <_strtod_l+0x4ee>
 8015092:	e55e      	b.n	8014b52 <_strtod_l+0x8e>
 8015094:	00004e1f 	.word	0x00004e1f
 8015098:	0801d7f5 	.word	0x0801d7f5
 801509c:	0801d7ac 	.word	0x0801d7ac
 80150a0:	7ff00000 	.word	0x7ff00000
 80150a4:	0801d7ed 	.word	0x0801d7ed
 80150a8:	0801d843 	.word	0x0801d843
 80150ac:	0801dacf 	.word	0x0801dacf
 80150b0:	0801d9c0 	.word	0x0801d9c0
 80150b4:	fcb00000 	.word	0xfcb00000
 80150b8:	0801d998 	.word	0x0801d998
 80150bc:	7ca00000 	.word	0x7ca00000
 80150c0:	7c900000 	.word	0x7c900000
 80150c4:	7fefffff 	.word	0x7fefffff
 80150c8:	2310      	movs	r3, #16
 80150ca:	0022      	movs	r2, r4
 80150cc:	401a      	ands	r2, r3
 80150ce:	9208      	str	r2, [sp, #32]
 80150d0:	421c      	tst	r4, r3
 80150d2:	d001      	beq.n	80150d8 <_strtod_l+0x614>
 80150d4:	335a      	adds	r3, #90	; 0x5a
 80150d6:	9308      	str	r3, [sp, #32]
 80150d8:	0030      	movs	r0, r6
 80150da:	0039      	movs	r1, r7
 80150dc:	2300      	movs	r3, #0
 80150de:	4dca      	ldr	r5, [pc, #808]	; (8015408 <_strtod_l+0x944>)
 80150e0:	2201      	movs	r2, #1
 80150e2:	4214      	tst	r4, r2
 80150e4:	d004      	beq.n	80150f0 <_strtod_l+0x62c>
 80150e6:	682a      	ldr	r2, [r5, #0]
 80150e8:	686b      	ldr	r3, [r5, #4]
 80150ea:	f7ed f83b 	bl	8002164 <__aeabi_dmul>
 80150ee:	2301      	movs	r3, #1
 80150f0:	1064      	asrs	r4, r4, #1
 80150f2:	3508      	adds	r5, #8
 80150f4:	2c00      	cmp	r4, #0
 80150f6:	d1f3      	bne.n	80150e0 <_strtod_l+0x61c>
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d001      	beq.n	8015100 <_strtod_l+0x63c>
 80150fc:	0006      	movs	r6, r0
 80150fe:	000f      	movs	r7, r1
 8015100:	9b08      	ldr	r3, [sp, #32]
 8015102:	2b00      	cmp	r3, #0
 8015104:	d00f      	beq.n	8015126 <_strtod_l+0x662>
 8015106:	236b      	movs	r3, #107	; 0x6b
 8015108:	0079      	lsls	r1, r7, #1
 801510a:	0d49      	lsrs	r1, r1, #21
 801510c:	003a      	movs	r2, r7
 801510e:	1a5b      	subs	r3, r3, r1
 8015110:	2b00      	cmp	r3, #0
 8015112:	dd08      	ble.n	8015126 <_strtod_l+0x662>
 8015114:	2b1f      	cmp	r3, #31
 8015116:	dc00      	bgt.n	801511a <_strtod_l+0x656>
 8015118:	e126      	b.n	8015368 <_strtod_l+0x8a4>
 801511a:	2600      	movs	r6, #0
 801511c:	2b34      	cmp	r3, #52	; 0x34
 801511e:	dc00      	bgt.n	8015122 <_strtod_l+0x65e>
 8015120:	e11b      	b.n	801535a <_strtod_l+0x896>
 8015122:	27dc      	movs	r7, #220	; 0xdc
 8015124:	04bf      	lsls	r7, r7, #18
 8015126:	2200      	movs	r2, #0
 8015128:	2300      	movs	r3, #0
 801512a:	0030      	movs	r0, r6
 801512c:	0039      	movs	r1, r7
 801512e:	f7eb f995 	bl	800045c <__aeabi_dcmpeq>
 8015132:	2800      	cmp	r0, #0
 8015134:	d1a0      	bne.n	8015078 <_strtod_l+0x5b4>
 8015136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015138:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801513a:	9300      	str	r3, [sp, #0]
 801513c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801513e:	9b06      	ldr	r3, [sp, #24]
 8015140:	9805      	ldr	r0, [sp, #20]
 8015142:	f003 fa23 	bl	801858c <__s2b>
 8015146:	900b      	str	r0, [sp, #44]	; 0x2c
 8015148:	2800      	cmp	r0, #0
 801514a:	d100      	bne.n	801514e <_strtod_l+0x68a>
 801514c:	e723      	b.n	8014f96 <_strtod_l+0x4d2>
 801514e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015150:	9907      	ldr	r1, [sp, #28]
 8015152:	17da      	asrs	r2, r3, #31
 8015154:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015156:	1a5b      	subs	r3, r3, r1
 8015158:	401a      	ands	r2, r3
 801515a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801515c:	9215      	str	r2, [sp, #84]	; 0x54
 801515e:	43db      	mvns	r3, r3
 8015160:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015162:	17db      	asrs	r3, r3, #31
 8015164:	401a      	ands	r2, r3
 8015166:	2300      	movs	r3, #0
 8015168:	921c      	str	r2, [sp, #112]	; 0x70
 801516a:	9306      	str	r3, [sp, #24]
 801516c:	9307      	str	r3, [sp, #28]
 801516e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015170:	9805      	ldr	r0, [sp, #20]
 8015172:	6859      	ldr	r1, [r3, #4]
 8015174:	f003 f994 	bl	80184a0 <_Balloc>
 8015178:	9009      	str	r0, [sp, #36]	; 0x24
 801517a:	2800      	cmp	r0, #0
 801517c:	d100      	bne.n	8015180 <_strtod_l+0x6bc>
 801517e:	e70f      	b.n	8014fa0 <_strtod_l+0x4dc>
 8015180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015182:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015184:	691b      	ldr	r3, [r3, #16]
 8015186:	310c      	adds	r1, #12
 8015188:	1c9a      	adds	r2, r3, #2
 801518a:	0092      	lsls	r2, r2, #2
 801518c:	300c      	adds	r0, #12
 801518e:	930c      	str	r3, [sp, #48]	; 0x30
 8015190:	f7ff f9e6 	bl	8014560 <memcpy>
 8015194:	ab24      	add	r3, sp, #144	; 0x90
 8015196:	9301      	str	r3, [sp, #4]
 8015198:	ab23      	add	r3, sp, #140	; 0x8c
 801519a:	9300      	str	r3, [sp, #0]
 801519c:	0032      	movs	r2, r6
 801519e:	003b      	movs	r3, r7
 80151a0:	9805      	ldr	r0, [sp, #20]
 80151a2:	960e      	str	r6, [sp, #56]	; 0x38
 80151a4:	970f      	str	r7, [sp, #60]	; 0x3c
 80151a6:	f003 fd25 	bl	8018bf4 <__d2b>
 80151aa:	9022      	str	r0, [sp, #136]	; 0x88
 80151ac:	2800      	cmp	r0, #0
 80151ae:	d100      	bne.n	80151b2 <_strtod_l+0x6ee>
 80151b0:	e6f6      	b.n	8014fa0 <_strtod_l+0x4dc>
 80151b2:	2101      	movs	r1, #1
 80151b4:	9805      	ldr	r0, [sp, #20]
 80151b6:	f003 fa7d 	bl	80186b4 <__i2b>
 80151ba:	9007      	str	r0, [sp, #28]
 80151bc:	2800      	cmp	r0, #0
 80151be:	d100      	bne.n	80151c2 <_strtod_l+0x6fe>
 80151c0:	e6ee      	b.n	8014fa0 <_strtod_l+0x4dc>
 80151c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	da00      	bge.n	80151ca <_strtod_l+0x706>
 80151c8:	e0d3      	b.n	8015372 <_strtod_l+0x8ae>
 80151ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80151cc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80151ce:	189d      	adds	r5, r3, r2
 80151d0:	9908      	ldr	r1, [sp, #32]
 80151d2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80151d4:	1a5b      	subs	r3, r3, r1
 80151d6:	2136      	movs	r1, #54	; 0x36
 80151d8:	189b      	adds	r3, r3, r2
 80151da:	1a8a      	subs	r2, r1, r2
 80151dc:	498b      	ldr	r1, [pc, #556]	; (801540c <_strtod_l+0x948>)
 80151de:	3b01      	subs	r3, #1
 80151e0:	2001      	movs	r0, #1
 80151e2:	428b      	cmp	r3, r1
 80151e4:	db00      	blt.n	80151e8 <_strtod_l+0x724>
 80151e6:	e0cf      	b.n	8015388 <_strtod_l+0x8c4>
 80151e8:	1ac9      	subs	r1, r1, r3
 80151ea:	1a52      	subs	r2, r2, r1
 80151ec:	291f      	cmp	r1, #31
 80151ee:	dd00      	ble.n	80151f2 <_strtod_l+0x72e>
 80151f0:	e0c3      	b.n	801537a <_strtod_l+0x8b6>
 80151f2:	4088      	lsls	r0, r1
 80151f4:	2300      	movs	r3, #0
 80151f6:	9014      	str	r0, [sp, #80]	; 0x50
 80151f8:	9312      	str	r3, [sp, #72]	; 0x48
 80151fa:	18ab      	adds	r3, r5, r2
 80151fc:	930c      	str	r3, [sp, #48]	; 0x30
 80151fe:	18a4      	adds	r4, r4, r2
 8015200:	9b08      	ldr	r3, [sp, #32]
 8015202:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015204:	191c      	adds	r4, r3, r4
 8015206:	002b      	movs	r3, r5
 8015208:	4295      	cmp	r5, r2
 801520a:	dd00      	ble.n	801520e <_strtod_l+0x74a>
 801520c:	0013      	movs	r3, r2
 801520e:	42a3      	cmp	r3, r4
 8015210:	dd00      	ble.n	8015214 <_strtod_l+0x750>
 8015212:	0023      	movs	r3, r4
 8015214:	2b00      	cmp	r3, #0
 8015216:	dd04      	ble.n	8015222 <_strtod_l+0x75e>
 8015218:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801521a:	1ae4      	subs	r4, r4, r3
 801521c:	1ad2      	subs	r2, r2, r3
 801521e:	920c      	str	r2, [sp, #48]	; 0x30
 8015220:	1aed      	subs	r5, r5, r3
 8015222:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015224:	2b00      	cmp	r3, #0
 8015226:	dd17      	ble.n	8015258 <_strtod_l+0x794>
 8015228:	001a      	movs	r2, r3
 801522a:	9907      	ldr	r1, [sp, #28]
 801522c:	9805      	ldr	r0, [sp, #20]
 801522e:	f003 fb07 	bl	8018840 <__pow5mult>
 8015232:	9007      	str	r0, [sp, #28]
 8015234:	2800      	cmp	r0, #0
 8015236:	d100      	bne.n	801523a <_strtod_l+0x776>
 8015238:	e6b2      	b.n	8014fa0 <_strtod_l+0x4dc>
 801523a:	0001      	movs	r1, r0
 801523c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801523e:	9805      	ldr	r0, [sp, #20]
 8015240:	f003 fa4e 	bl	80186e0 <__multiply>
 8015244:	9011      	str	r0, [sp, #68]	; 0x44
 8015246:	2800      	cmp	r0, #0
 8015248:	d100      	bne.n	801524c <_strtod_l+0x788>
 801524a:	e6a9      	b.n	8014fa0 <_strtod_l+0x4dc>
 801524c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801524e:	9805      	ldr	r0, [sp, #20]
 8015250:	f003 f94e 	bl	80184f0 <_Bfree>
 8015254:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015256:	9322      	str	r3, [sp, #136]	; 0x88
 8015258:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801525a:	2b00      	cmp	r3, #0
 801525c:	dd00      	ble.n	8015260 <_strtod_l+0x79c>
 801525e:	e096      	b.n	801538e <_strtod_l+0x8ca>
 8015260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015262:	2b00      	cmp	r3, #0
 8015264:	dd08      	ble.n	8015278 <_strtod_l+0x7b4>
 8015266:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015268:	9909      	ldr	r1, [sp, #36]	; 0x24
 801526a:	9805      	ldr	r0, [sp, #20]
 801526c:	f003 fae8 	bl	8018840 <__pow5mult>
 8015270:	9009      	str	r0, [sp, #36]	; 0x24
 8015272:	2800      	cmp	r0, #0
 8015274:	d100      	bne.n	8015278 <_strtod_l+0x7b4>
 8015276:	e693      	b.n	8014fa0 <_strtod_l+0x4dc>
 8015278:	2c00      	cmp	r4, #0
 801527a:	dd08      	ble.n	801528e <_strtod_l+0x7ca>
 801527c:	0022      	movs	r2, r4
 801527e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015280:	9805      	ldr	r0, [sp, #20]
 8015282:	f003 fb1f 	bl	80188c4 <__lshift>
 8015286:	9009      	str	r0, [sp, #36]	; 0x24
 8015288:	2800      	cmp	r0, #0
 801528a:	d100      	bne.n	801528e <_strtod_l+0x7ca>
 801528c:	e688      	b.n	8014fa0 <_strtod_l+0x4dc>
 801528e:	2d00      	cmp	r5, #0
 8015290:	dd08      	ble.n	80152a4 <_strtod_l+0x7e0>
 8015292:	002a      	movs	r2, r5
 8015294:	9907      	ldr	r1, [sp, #28]
 8015296:	9805      	ldr	r0, [sp, #20]
 8015298:	f003 fb14 	bl	80188c4 <__lshift>
 801529c:	9007      	str	r0, [sp, #28]
 801529e:	2800      	cmp	r0, #0
 80152a0:	d100      	bne.n	80152a4 <_strtod_l+0x7e0>
 80152a2:	e67d      	b.n	8014fa0 <_strtod_l+0x4dc>
 80152a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80152a6:	9922      	ldr	r1, [sp, #136]	; 0x88
 80152a8:	9805      	ldr	r0, [sp, #20]
 80152aa:	f003 fb97 	bl	80189dc <__mdiff>
 80152ae:	9006      	str	r0, [sp, #24]
 80152b0:	2800      	cmp	r0, #0
 80152b2:	d100      	bne.n	80152b6 <_strtod_l+0x7f2>
 80152b4:	e674      	b.n	8014fa0 <_strtod_l+0x4dc>
 80152b6:	2200      	movs	r2, #0
 80152b8:	68c3      	ldr	r3, [r0, #12]
 80152ba:	9907      	ldr	r1, [sp, #28]
 80152bc:	60c2      	str	r2, [r0, #12]
 80152be:	9311      	str	r3, [sp, #68]	; 0x44
 80152c0:	f003 fb70 	bl	80189a4 <__mcmp>
 80152c4:	2800      	cmp	r0, #0
 80152c6:	da6c      	bge.n	80153a2 <_strtod_l+0x8de>
 80152c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80152ca:	4333      	orrs	r3, r6
 80152cc:	d000      	beq.n	80152d0 <_strtod_l+0x80c>
 80152ce:	e097      	b.n	8015400 <_strtod_l+0x93c>
 80152d0:	033b      	lsls	r3, r7, #12
 80152d2:	d000      	beq.n	80152d6 <_strtod_l+0x812>
 80152d4:	e094      	b.n	8015400 <_strtod_l+0x93c>
 80152d6:	22d6      	movs	r2, #214	; 0xd6
 80152d8:	4b4d      	ldr	r3, [pc, #308]	; (8015410 <_strtod_l+0x94c>)
 80152da:	04d2      	lsls	r2, r2, #19
 80152dc:	403b      	ands	r3, r7
 80152de:	4293      	cmp	r3, r2
 80152e0:	d800      	bhi.n	80152e4 <_strtod_l+0x820>
 80152e2:	e08d      	b.n	8015400 <_strtod_l+0x93c>
 80152e4:	9b06      	ldr	r3, [sp, #24]
 80152e6:	695b      	ldr	r3, [r3, #20]
 80152e8:	930a      	str	r3, [sp, #40]	; 0x28
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d105      	bne.n	80152fa <_strtod_l+0x836>
 80152ee:	9b06      	ldr	r3, [sp, #24]
 80152f0:	691b      	ldr	r3, [r3, #16]
 80152f2:	930a      	str	r3, [sp, #40]	; 0x28
 80152f4:	2b01      	cmp	r3, #1
 80152f6:	dc00      	bgt.n	80152fa <_strtod_l+0x836>
 80152f8:	e082      	b.n	8015400 <_strtod_l+0x93c>
 80152fa:	9906      	ldr	r1, [sp, #24]
 80152fc:	2201      	movs	r2, #1
 80152fe:	9805      	ldr	r0, [sp, #20]
 8015300:	f003 fae0 	bl	80188c4 <__lshift>
 8015304:	9907      	ldr	r1, [sp, #28]
 8015306:	9006      	str	r0, [sp, #24]
 8015308:	f003 fb4c 	bl	80189a4 <__mcmp>
 801530c:	2800      	cmp	r0, #0
 801530e:	dd77      	ble.n	8015400 <_strtod_l+0x93c>
 8015310:	9908      	ldr	r1, [sp, #32]
 8015312:	003b      	movs	r3, r7
 8015314:	4a3e      	ldr	r2, [pc, #248]	; (8015410 <_strtod_l+0x94c>)
 8015316:	2900      	cmp	r1, #0
 8015318:	d100      	bne.n	801531c <_strtod_l+0x858>
 801531a:	e09e      	b.n	801545a <_strtod_l+0x996>
 801531c:	0011      	movs	r1, r2
 801531e:	20d6      	movs	r0, #214	; 0xd6
 8015320:	4039      	ands	r1, r7
 8015322:	04c0      	lsls	r0, r0, #19
 8015324:	4281      	cmp	r1, r0
 8015326:	dd00      	ble.n	801532a <_strtod_l+0x866>
 8015328:	e097      	b.n	801545a <_strtod_l+0x996>
 801532a:	23dc      	movs	r3, #220	; 0xdc
 801532c:	049b      	lsls	r3, r3, #18
 801532e:	4299      	cmp	r1, r3
 8015330:	dc00      	bgt.n	8015334 <_strtod_l+0x870>
 8015332:	e6a6      	b.n	8015082 <_strtod_l+0x5be>
 8015334:	4b37      	ldr	r3, [pc, #220]	; (8015414 <_strtod_l+0x950>)
 8015336:	0030      	movs	r0, r6
 8015338:	931b      	str	r3, [sp, #108]	; 0x6c
 801533a:	2300      	movs	r3, #0
 801533c:	931a      	str	r3, [sp, #104]	; 0x68
 801533e:	0039      	movs	r1, r7
 8015340:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015342:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015344:	f7ec ff0e 	bl	8002164 <__aeabi_dmul>
 8015348:	0006      	movs	r6, r0
 801534a:	000f      	movs	r7, r1
 801534c:	4308      	orrs	r0, r1
 801534e:	d000      	beq.n	8015352 <_strtod_l+0x88e>
 8015350:	e62f      	b.n	8014fb2 <_strtod_l+0x4ee>
 8015352:	2322      	movs	r3, #34	; 0x22
 8015354:	9a05      	ldr	r2, [sp, #20]
 8015356:	6013      	str	r3, [r2, #0]
 8015358:	e62b      	b.n	8014fb2 <_strtod_l+0x4ee>
 801535a:	2101      	movs	r1, #1
 801535c:	3b20      	subs	r3, #32
 801535e:	4249      	negs	r1, r1
 8015360:	4099      	lsls	r1, r3
 8015362:	400a      	ands	r2, r1
 8015364:	0017      	movs	r7, r2
 8015366:	e6de      	b.n	8015126 <_strtod_l+0x662>
 8015368:	2201      	movs	r2, #1
 801536a:	4252      	negs	r2, r2
 801536c:	409a      	lsls	r2, r3
 801536e:	4016      	ands	r6, r2
 8015370:	e6d9      	b.n	8015126 <_strtod_l+0x662>
 8015372:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015374:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8015376:	1ad4      	subs	r4, r2, r3
 8015378:	e72a      	b.n	80151d0 <_strtod_l+0x70c>
 801537a:	4927      	ldr	r1, [pc, #156]	; (8015418 <_strtod_l+0x954>)
 801537c:	1acb      	subs	r3, r1, r3
 801537e:	0001      	movs	r1, r0
 8015380:	4099      	lsls	r1, r3
 8015382:	9112      	str	r1, [sp, #72]	; 0x48
 8015384:	9014      	str	r0, [sp, #80]	; 0x50
 8015386:	e738      	b.n	80151fa <_strtod_l+0x736>
 8015388:	2300      	movs	r3, #0
 801538a:	9312      	str	r3, [sp, #72]	; 0x48
 801538c:	e7fa      	b.n	8015384 <_strtod_l+0x8c0>
 801538e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015390:	9922      	ldr	r1, [sp, #136]	; 0x88
 8015392:	9805      	ldr	r0, [sp, #20]
 8015394:	f003 fa96 	bl	80188c4 <__lshift>
 8015398:	9022      	str	r0, [sp, #136]	; 0x88
 801539a:	2800      	cmp	r0, #0
 801539c:	d000      	beq.n	80153a0 <_strtod_l+0x8dc>
 801539e:	e75f      	b.n	8015260 <_strtod_l+0x79c>
 80153a0:	e5fe      	b.n	8014fa0 <_strtod_l+0x4dc>
 80153a2:	970c      	str	r7, [sp, #48]	; 0x30
 80153a4:	2800      	cmp	r0, #0
 80153a6:	d176      	bne.n	8015496 <_strtod_l+0x9d2>
 80153a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80153aa:	033b      	lsls	r3, r7, #12
 80153ac:	0b1b      	lsrs	r3, r3, #12
 80153ae:	2a00      	cmp	r2, #0
 80153b0:	d038      	beq.n	8015424 <_strtod_l+0x960>
 80153b2:	4a1a      	ldr	r2, [pc, #104]	; (801541c <_strtod_l+0x958>)
 80153b4:	4293      	cmp	r3, r2
 80153b6:	d138      	bne.n	801542a <_strtod_l+0x966>
 80153b8:	2201      	movs	r2, #1
 80153ba:	9b08      	ldr	r3, [sp, #32]
 80153bc:	4252      	negs	r2, r2
 80153be:	0031      	movs	r1, r6
 80153c0:	0010      	movs	r0, r2
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d00b      	beq.n	80153de <_strtod_l+0x91a>
 80153c6:	24d4      	movs	r4, #212	; 0xd4
 80153c8:	4b11      	ldr	r3, [pc, #68]	; (8015410 <_strtod_l+0x94c>)
 80153ca:	0010      	movs	r0, r2
 80153cc:	403b      	ands	r3, r7
 80153ce:	04e4      	lsls	r4, r4, #19
 80153d0:	42a3      	cmp	r3, r4
 80153d2:	d804      	bhi.n	80153de <_strtod_l+0x91a>
 80153d4:	306c      	adds	r0, #108	; 0x6c
 80153d6:	0d1b      	lsrs	r3, r3, #20
 80153d8:	1ac3      	subs	r3, r0, r3
 80153da:	409a      	lsls	r2, r3
 80153dc:	0010      	movs	r0, r2
 80153de:	4281      	cmp	r1, r0
 80153e0:	d123      	bne.n	801542a <_strtod_l+0x966>
 80153e2:	4b0f      	ldr	r3, [pc, #60]	; (8015420 <_strtod_l+0x95c>)
 80153e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80153e6:	429a      	cmp	r2, r3
 80153e8:	d102      	bne.n	80153f0 <_strtod_l+0x92c>
 80153ea:	1c4b      	adds	r3, r1, #1
 80153ec:	d100      	bne.n	80153f0 <_strtod_l+0x92c>
 80153ee:	e5d7      	b.n	8014fa0 <_strtod_l+0x4dc>
 80153f0:	4b07      	ldr	r3, [pc, #28]	; (8015410 <_strtod_l+0x94c>)
 80153f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80153f4:	2600      	movs	r6, #0
 80153f6:	401a      	ands	r2, r3
 80153f8:	0013      	movs	r3, r2
 80153fa:	2280      	movs	r2, #128	; 0x80
 80153fc:	0352      	lsls	r2, r2, #13
 80153fe:	189f      	adds	r7, r3, r2
 8015400:	9b08      	ldr	r3, [sp, #32]
 8015402:	2b00      	cmp	r3, #0
 8015404:	d196      	bne.n	8015334 <_strtod_l+0x870>
 8015406:	e5d4      	b.n	8014fb2 <_strtod_l+0x4ee>
 8015408:	0801d7c0 	.word	0x0801d7c0
 801540c:	fffffc02 	.word	0xfffffc02
 8015410:	7ff00000 	.word	0x7ff00000
 8015414:	39500000 	.word	0x39500000
 8015418:	fffffbe2 	.word	0xfffffbe2
 801541c:	000fffff 	.word	0x000fffff
 8015420:	7fefffff 	.word	0x7fefffff
 8015424:	4333      	orrs	r3, r6
 8015426:	d100      	bne.n	801542a <_strtod_l+0x966>
 8015428:	e772      	b.n	8015310 <_strtod_l+0x84c>
 801542a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801542c:	2b00      	cmp	r3, #0
 801542e:	d01d      	beq.n	801546c <_strtod_l+0x9a8>
 8015430:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015432:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015434:	4213      	tst	r3, r2
 8015436:	d0e3      	beq.n	8015400 <_strtod_l+0x93c>
 8015438:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801543a:	0030      	movs	r0, r6
 801543c:	0039      	movs	r1, r7
 801543e:	9a08      	ldr	r2, [sp, #32]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d017      	beq.n	8015474 <_strtod_l+0x9b0>
 8015444:	f7ff fb26 	bl	8014a94 <sulp>
 8015448:	0002      	movs	r2, r0
 801544a:	000b      	movs	r3, r1
 801544c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801544e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015450:	f7eb ff18 	bl	8001284 <__aeabi_dadd>
 8015454:	0006      	movs	r6, r0
 8015456:	000f      	movs	r7, r1
 8015458:	e7d2      	b.n	8015400 <_strtod_l+0x93c>
 801545a:	2601      	movs	r6, #1
 801545c:	4013      	ands	r3, r2
 801545e:	4a9b      	ldr	r2, [pc, #620]	; (80156cc <_strtod_l+0xc08>)
 8015460:	4276      	negs	r6, r6
 8015462:	189b      	adds	r3, r3, r2
 8015464:	4a9a      	ldr	r2, [pc, #616]	; (80156d0 <_strtod_l+0xc0c>)
 8015466:	431a      	orrs	r2, r3
 8015468:	0017      	movs	r7, r2
 801546a:	e7c9      	b.n	8015400 <_strtod_l+0x93c>
 801546c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801546e:	4233      	tst	r3, r6
 8015470:	d0c6      	beq.n	8015400 <_strtod_l+0x93c>
 8015472:	e7e1      	b.n	8015438 <_strtod_l+0x974>
 8015474:	f7ff fb0e 	bl	8014a94 <sulp>
 8015478:	0002      	movs	r2, r0
 801547a:	000b      	movs	r3, r1
 801547c:	980e      	ldr	r0, [sp, #56]	; 0x38
 801547e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015480:	f7ed f8dc 	bl	800263c <__aeabi_dsub>
 8015484:	2200      	movs	r2, #0
 8015486:	2300      	movs	r3, #0
 8015488:	0006      	movs	r6, r0
 801548a:	000f      	movs	r7, r1
 801548c:	f7ea ffe6 	bl	800045c <__aeabi_dcmpeq>
 8015490:	2800      	cmp	r0, #0
 8015492:	d0b5      	beq.n	8015400 <_strtod_l+0x93c>
 8015494:	e5f5      	b.n	8015082 <_strtod_l+0x5be>
 8015496:	9907      	ldr	r1, [sp, #28]
 8015498:	9806      	ldr	r0, [sp, #24]
 801549a:	f003 fc0f 	bl	8018cbc <__ratio>
 801549e:	2380      	movs	r3, #128	; 0x80
 80154a0:	2200      	movs	r2, #0
 80154a2:	05db      	lsls	r3, r3, #23
 80154a4:	0004      	movs	r4, r0
 80154a6:	000d      	movs	r5, r1
 80154a8:	f7ea ffe8 	bl	800047c <__aeabi_dcmple>
 80154ac:	2800      	cmp	r0, #0
 80154ae:	d079      	beq.n	80155a4 <_strtod_l+0xae0>
 80154b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d04b      	beq.n	801554e <_strtod_l+0xa8a>
 80154b6:	2300      	movs	r3, #0
 80154b8:	4c86      	ldr	r4, [pc, #536]	; (80156d4 <_strtod_l+0xc10>)
 80154ba:	2500      	movs	r5, #0
 80154bc:	9312      	str	r3, [sp, #72]	; 0x48
 80154be:	9413      	str	r4, [sp, #76]	; 0x4c
 80154c0:	4c84      	ldr	r4, [pc, #528]	; (80156d4 <_strtod_l+0xc10>)
 80154c2:	4a85      	ldr	r2, [pc, #532]	; (80156d8 <_strtod_l+0xc14>)
 80154c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80154c6:	4013      	ands	r3, r2
 80154c8:	9314      	str	r3, [sp, #80]	; 0x50
 80154ca:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80154cc:	4b83      	ldr	r3, [pc, #524]	; (80156dc <_strtod_l+0xc18>)
 80154ce:	429a      	cmp	r2, r3
 80154d0:	d000      	beq.n	80154d4 <_strtod_l+0xa10>
 80154d2:	e0b0      	b.n	8015636 <_strtod_l+0xb72>
 80154d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80154d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80154d8:	921a      	str	r2, [sp, #104]	; 0x68
 80154da:	931b      	str	r3, [sp, #108]	; 0x6c
 80154dc:	4a80      	ldr	r2, [pc, #512]	; (80156e0 <_strtod_l+0xc1c>)
 80154de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80154e0:	4694      	mov	ip, r2
 80154e2:	4463      	add	r3, ip
 80154e4:	001f      	movs	r7, r3
 80154e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80154e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80154ea:	0030      	movs	r0, r6
 80154ec:	0039      	movs	r1, r7
 80154ee:	920c      	str	r2, [sp, #48]	; 0x30
 80154f0:	930d      	str	r3, [sp, #52]	; 0x34
 80154f2:	f003 fb0b 	bl	8018b0c <__ulp>
 80154f6:	0002      	movs	r2, r0
 80154f8:	000b      	movs	r3, r1
 80154fa:	980c      	ldr	r0, [sp, #48]	; 0x30
 80154fc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80154fe:	f7ec fe31 	bl	8002164 <__aeabi_dmul>
 8015502:	0032      	movs	r2, r6
 8015504:	003b      	movs	r3, r7
 8015506:	f7eb febd 	bl	8001284 <__aeabi_dadd>
 801550a:	4a73      	ldr	r2, [pc, #460]	; (80156d8 <_strtod_l+0xc14>)
 801550c:	4b75      	ldr	r3, [pc, #468]	; (80156e4 <_strtod_l+0xc20>)
 801550e:	0006      	movs	r6, r0
 8015510:	400a      	ands	r2, r1
 8015512:	429a      	cmp	r2, r3
 8015514:	d95e      	bls.n	80155d4 <_strtod_l+0xb10>
 8015516:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015518:	4a73      	ldr	r2, [pc, #460]	; (80156e8 <_strtod_l+0xc24>)
 801551a:	4293      	cmp	r3, r2
 801551c:	d103      	bne.n	8015526 <_strtod_l+0xa62>
 801551e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015520:	3301      	adds	r3, #1
 8015522:	d100      	bne.n	8015526 <_strtod_l+0xa62>
 8015524:	e53c      	b.n	8014fa0 <_strtod_l+0x4dc>
 8015526:	2601      	movs	r6, #1
 8015528:	4f6f      	ldr	r7, [pc, #444]	; (80156e8 <_strtod_l+0xc24>)
 801552a:	4276      	negs	r6, r6
 801552c:	9922      	ldr	r1, [sp, #136]	; 0x88
 801552e:	9805      	ldr	r0, [sp, #20]
 8015530:	f002 ffde 	bl	80184f0 <_Bfree>
 8015534:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015536:	9805      	ldr	r0, [sp, #20]
 8015538:	f002 ffda 	bl	80184f0 <_Bfree>
 801553c:	9907      	ldr	r1, [sp, #28]
 801553e:	9805      	ldr	r0, [sp, #20]
 8015540:	f002 ffd6 	bl	80184f0 <_Bfree>
 8015544:	9906      	ldr	r1, [sp, #24]
 8015546:	9805      	ldr	r0, [sp, #20]
 8015548:	f002 ffd2 	bl	80184f0 <_Bfree>
 801554c:	e60f      	b.n	801516e <_strtod_l+0x6aa>
 801554e:	2e00      	cmp	r6, #0
 8015550:	d11c      	bne.n	801558c <_strtod_l+0xac8>
 8015552:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015554:	031b      	lsls	r3, r3, #12
 8015556:	d11f      	bne.n	8015598 <_strtod_l+0xad4>
 8015558:	2200      	movs	r2, #0
 801555a:	0020      	movs	r0, r4
 801555c:	0029      	movs	r1, r5
 801555e:	4b5d      	ldr	r3, [pc, #372]	; (80156d4 <_strtod_l+0xc10>)
 8015560:	f7ea ff82 	bl	8000468 <__aeabi_dcmplt>
 8015564:	2800      	cmp	r0, #0
 8015566:	d11a      	bne.n	801559e <_strtod_l+0xada>
 8015568:	0020      	movs	r0, r4
 801556a:	0029      	movs	r1, r5
 801556c:	2200      	movs	r2, #0
 801556e:	4b5f      	ldr	r3, [pc, #380]	; (80156ec <_strtod_l+0xc28>)
 8015570:	f7ec fdf8 	bl	8002164 <__aeabi_dmul>
 8015574:	0005      	movs	r5, r0
 8015576:	000c      	movs	r4, r1
 8015578:	2380      	movs	r3, #128	; 0x80
 801557a:	061b      	lsls	r3, r3, #24
 801557c:	18e3      	adds	r3, r4, r3
 801557e:	951e      	str	r5, [sp, #120]	; 0x78
 8015580:	931f      	str	r3, [sp, #124]	; 0x7c
 8015582:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015584:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015586:	9212      	str	r2, [sp, #72]	; 0x48
 8015588:	9313      	str	r3, [sp, #76]	; 0x4c
 801558a:	e79a      	b.n	80154c2 <_strtod_l+0x9fe>
 801558c:	2e01      	cmp	r6, #1
 801558e:	d103      	bne.n	8015598 <_strtod_l+0xad4>
 8015590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015592:	2b00      	cmp	r3, #0
 8015594:	d100      	bne.n	8015598 <_strtod_l+0xad4>
 8015596:	e574      	b.n	8015082 <_strtod_l+0x5be>
 8015598:	2300      	movs	r3, #0
 801559a:	4c55      	ldr	r4, [pc, #340]	; (80156f0 <_strtod_l+0xc2c>)
 801559c:	e78d      	b.n	80154ba <_strtod_l+0x9f6>
 801559e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80155a0:	4c52      	ldr	r4, [pc, #328]	; (80156ec <_strtod_l+0xc28>)
 80155a2:	e7e9      	b.n	8015578 <_strtod_l+0xab4>
 80155a4:	2200      	movs	r2, #0
 80155a6:	0020      	movs	r0, r4
 80155a8:	0029      	movs	r1, r5
 80155aa:	4b50      	ldr	r3, [pc, #320]	; (80156ec <_strtod_l+0xc28>)
 80155ac:	f7ec fdda 	bl	8002164 <__aeabi_dmul>
 80155b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80155b2:	0005      	movs	r5, r0
 80155b4:	000b      	movs	r3, r1
 80155b6:	000c      	movs	r4, r1
 80155b8:	2a00      	cmp	r2, #0
 80155ba:	d107      	bne.n	80155cc <_strtod_l+0xb08>
 80155bc:	2280      	movs	r2, #128	; 0x80
 80155be:	0612      	lsls	r2, r2, #24
 80155c0:	188b      	adds	r3, r1, r2
 80155c2:	9016      	str	r0, [sp, #88]	; 0x58
 80155c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80155c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80155c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80155ca:	e7dc      	b.n	8015586 <_strtod_l+0xac2>
 80155cc:	0002      	movs	r2, r0
 80155ce:	9216      	str	r2, [sp, #88]	; 0x58
 80155d0:	9317      	str	r3, [sp, #92]	; 0x5c
 80155d2:	e7f8      	b.n	80155c6 <_strtod_l+0xb02>
 80155d4:	23d4      	movs	r3, #212	; 0xd4
 80155d6:	049b      	lsls	r3, r3, #18
 80155d8:	18cf      	adds	r7, r1, r3
 80155da:	9b08      	ldr	r3, [sp, #32]
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d1a5      	bne.n	801552c <_strtod_l+0xa68>
 80155e0:	4b3d      	ldr	r3, [pc, #244]	; (80156d8 <_strtod_l+0xc14>)
 80155e2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80155e4:	403b      	ands	r3, r7
 80155e6:	429a      	cmp	r2, r3
 80155e8:	d1a0      	bne.n	801552c <_strtod_l+0xa68>
 80155ea:	0028      	movs	r0, r5
 80155ec:	0021      	movs	r1, r4
 80155ee:	f7eb f827 	bl	8000640 <__aeabi_d2lz>
 80155f2:	f7eb f861 	bl	80006b8 <__aeabi_l2d>
 80155f6:	0002      	movs	r2, r0
 80155f8:	000b      	movs	r3, r1
 80155fa:	0028      	movs	r0, r5
 80155fc:	0021      	movs	r1, r4
 80155fe:	f7ed f81d 	bl	800263c <__aeabi_dsub>
 8015602:	033b      	lsls	r3, r7, #12
 8015604:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015606:	0b1b      	lsrs	r3, r3, #12
 8015608:	4333      	orrs	r3, r6
 801560a:	4313      	orrs	r3, r2
 801560c:	0004      	movs	r4, r0
 801560e:	000d      	movs	r5, r1
 8015610:	4a38      	ldr	r2, [pc, #224]	; (80156f4 <_strtod_l+0xc30>)
 8015612:	2b00      	cmp	r3, #0
 8015614:	d055      	beq.n	80156c2 <_strtod_l+0xbfe>
 8015616:	4b38      	ldr	r3, [pc, #224]	; (80156f8 <_strtod_l+0xc34>)
 8015618:	f7ea ff26 	bl	8000468 <__aeabi_dcmplt>
 801561c:	2800      	cmp	r0, #0
 801561e:	d000      	beq.n	8015622 <_strtod_l+0xb5e>
 8015620:	e4c7      	b.n	8014fb2 <_strtod_l+0x4ee>
 8015622:	0020      	movs	r0, r4
 8015624:	0029      	movs	r1, r5
 8015626:	4a35      	ldr	r2, [pc, #212]	; (80156fc <_strtod_l+0xc38>)
 8015628:	4b30      	ldr	r3, [pc, #192]	; (80156ec <_strtod_l+0xc28>)
 801562a:	f7ea ff31 	bl	8000490 <__aeabi_dcmpgt>
 801562e:	2800      	cmp	r0, #0
 8015630:	d100      	bne.n	8015634 <_strtod_l+0xb70>
 8015632:	e77b      	b.n	801552c <_strtod_l+0xa68>
 8015634:	e4bd      	b.n	8014fb2 <_strtod_l+0x4ee>
 8015636:	9b08      	ldr	r3, [sp, #32]
 8015638:	2b00      	cmp	r3, #0
 801563a:	d02b      	beq.n	8015694 <_strtod_l+0xbd0>
 801563c:	23d4      	movs	r3, #212	; 0xd4
 801563e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015640:	04db      	lsls	r3, r3, #19
 8015642:	429a      	cmp	r2, r3
 8015644:	d826      	bhi.n	8015694 <_strtod_l+0xbd0>
 8015646:	0028      	movs	r0, r5
 8015648:	0021      	movs	r1, r4
 801564a:	4a2d      	ldr	r2, [pc, #180]	; (8015700 <_strtod_l+0xc3c>)
 801564c:	4b2d      	ldr	r3, [pc, #180]	; (8015704 <_strtod_l+0xc40>)
 801564e:	f7ea ff15 	bl	800047c <__aeabi_dcmple>
 8015652:	2800      	cmp	r0, #0
 8015654:	d017      	beq.n	8015686 <_strtod_l+0xbc2>
 8015656:	0028      	movs	r0, r5
 8015658:	0021      	movs	r1, r4
 801565a:	f7ea ffd3 	bl	8000604 <__aeabi_d2uiz>
 801565e:	2800      	cmp	r0, #0
 8015660:	d100      	bne.n	8015664 <_strtod_l+0xba0>
 8015662:	3001      	adds	r0, #1
 8015664:	f7ed fc00 	bl	8002e68 <__aeabi_ui2d>
 8015668:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801566a:	0005      	movs	r5, r0
 801566c:	000b      	movs	r3, r1
 801566e:	000c      	movs	r4, r1
 8015670:	2a00      	cmp	r2, #0
 8015672:	d122      	bne.n	80156ba <_strtod_l+0xbf6>
 8015674:	2280      	movs	r2, #128	; 0x80
 8015676:	0612      	lsls	r2, r2, #24
 8015678:	188b      	adds	r3, r1, r2
 801567a:	9018      	str	r0, [sp, #96]	; 0x60
 801567c:	9319      	str	r3, [sp, #100]	; 0x64
 801567e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015680:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015682:	9212      	str	r2, [sp, #72]	; 0x48
 8015684:	9313      	str	r3, [sp, #76]	; 0x4c
 8015686:	22d6      	movs	r2, #214	; 0xd6
 8015688:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801568a:	04d2      	lsls	r2, r2, #19
 801568c:	189b      	adds	r3, r3, r2
 801568e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015690:	1a9b      	subs	r3, r3, r2
 8015692:	9313      	str	r3, [sp, #76]	; 0x4c
 8015694:	980e      	ldr	r0, [sp, #56]	; 0x38
 8015696:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015698:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801569a:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 801569c:	f003 fa36 	bl	8018b0c <__ulp>
 80156a0:	0002      	movs	r2, r0
 80156a2:	000b      	movs	r3, r1
 80156a4:	0030      	movs	r0, r6
 80156a6:	0039      	movs	r1, r7
 80156a8:	f7ec fd5c 	bl	8002164 <__aeabi_dmul>
 80156ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80156ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80156b0:	f7eb fde8 	bl	8001284 <__aeabi_dadd>
 80156b4:	0006      	movs	r6, r0
 80156b6:	000f      	movs	r7, r1
 80156b8:	e78f      	b.n	80155da <_strtod_l+0xb16>
 80156ba:	0002      	movs	r2, r0
 80156bc:	9218      	str	r2, [sp, #96]	; 0x60
 80156be:	9319      	str	r3, [sp, #100]	; 0x64
 80156c0:	e7dd      	b.n	801567e <_strtod_l+0xbba>
 80156c2:	4b11      	ldr	r3, [pc, #68]	; (8015708 <_strtod_l+0xc44>)
 80156c4:	f7ea fed0 	bl	8000468 <__aeabi_dcmplt>
 80156c8:	e7b1      	b.n	801562e <_strtod_l+0xb6a>
 80156ca:	46c0      	nop			; (mov r8, r8)
 80156cc:	fff00000 	.word	0xfff00000
 80156d0:	000fffff 	.word	0x000fffff
 80156d4:	3ff00000 	.word	0x3ff00000
 80156d8:	7ff00000 	.word	0x7ff00000
 80156dc:	7fe00000 	.word	0x7fe00000
 80156e0:	fcb00000 	.word	0xfcb00000
 80156e4:	7c9fffff 	.word	0x7c9fffff
 80156e8:	7fefffff 	.word	0x7fefffff
 80156ec:	3fe00000 	.word	0x3fe00000
 80156f0:	bff00000 	.word	0xbff00000
 80156f4:	94a03595 	.word	0x94a03595
 80156f8:	3fdfffff 	.word	0x3fdfffff
 80156fc:	35afe535 	.word	0x35afe535
 8015700:	ffc00000 	.word	0xffc00000
 8015704:	41dfffff 	.word	0x41dfffff
 8015708:	3fcfffff 	.word	0x3fcfffff

0801570c <strtod>:
 801570c:	b510      	push	{r4, lr}
 801570e:	000a      	movs	r2, r1
 8015710:	0001      	movs	r1, r0
 8015712:	4803      	ldr	r0, [pc, #12]	; (8015720 <strtod+0x14>)
 8015714:	4b03      	ldr	r3, [pc, #12]	; (8015724 <strtod+0x18>)
 8015716:	6800      	ldr	r0, [r0, #0]
 8015718:	f7ff f9d4 	bl	8014ac4 <_strtod_l>
 801571c:	bd10      	pop	{r4, pc}
 801571e:	46c0      	nop			; (mov r8, r8)
 8015720:	20000190 	.word	0x20000190
 8015724:	200009d8 	.word	0x200009d8

08015728 <strtok>:
 8015728:	4b03      	ldr	r3, [pc, #12]	; (8015738 <strtok+0x10>)
 801572a:	b510      	push	{r4, lr}
 801572c:	681a      	ldr	r2, [r3, #0]
 801572e:	2301      	movs	r3, #1
 8015730:	325c      	adds	r2, #92	; 0x5c
 8015732:	f000 f803 	bl	801573c <__strtok_r>
 8015736:	bd10      	pop	{r4, pc}
 8015738:	20000190 	.word	0x20000190

0801573c <__strtok_r>:
 801573c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801573e:	2800      	cmp	r0, #0
 8015740:	d102      	bne.n	8015748 <__strtok_r+0xc>
 8015742:	6810      	ldr	r0, [r2, #0]
 8015744:	2800      	cmp	r0, #0
 8015746:	d013      	beq.n	8015770 <__strtok_r+0x34>
 8015748:	0004      	movs	r4, r0
 801574a:	0020      	movs	r0, r4
 801574c:	000e      	movs	r6, r1
 801574e:	7805      	ldrb	r5, [r0, #0]
 8015750:	3401      	adds	r4, #1
 8015752:	7837      	ldrb	r7, [r6, #0]
 8015754:	2f00      	cmp	r7, #0
 8015756:	d104      	bne.n	8015762 <__strtok_r+0x26>
 8015758:	2d00      	cmp	r5, #0
 801575a:	d10f      	bne.n	801577c <__strtok_r+0x40>
 801575c:	0028      	movs	r0, r5
 801575e:	6015      	str	r5, [r2, #0]
 8015760:	e006      	b.n	8015770 <__strtok_r+0x34>
 8015762:	3601      	adds	r6, #1
 8015764:	42bd      	cmp	r5, r7
 8015766:	d1f4      	bne.n	8015752 <__strtok_r+0x16>
 8015768:	2b00      	cmp	r3, #0
 801576a:	d1ee      	bne.n	801574a <__strtok_r+0xe>
 801576c:	6014      	str	r4, [r2, #0]
 801576e:	7003      	strb	r3, [r0, #0]
 8015770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015772:	002f      	movs	r7, r5
 8015774:	e00f      	b.n	8015796 <__strtok_r+0x5a>
 8015776:	3301      	adds	r3, #1
 8015778:	2e00      	cmp	r6, #0
 801577a:	d104      	bne.n	8015786 <__strtok_r+0x4a>
 801577c:	0023      	movs	r3, r4
 801577e:	3401      	adds	r4, #1
 8015780:	781d      	ldrb	r5, [r3, #0]
 8015782:	0027      	movs	r7, r4
 8015784:	000b      	movs	r3, r1
 8015786:	781e      	ldrb	r6, [r3, #0]
 8015788:	42b5      	cmp	r5, r6
 801578a:	d1f4      	bne.n	8015776 <__strtok_r+0x3a>
 801578c:	2d00      	cmp	r5, #0
 801578e:	d0f0      	beq.n	8015772 <__strtok_r+0x36>
 8015790:	2300      	movs	r3, #0
 8015792:	3c01      	subs	r4, #1
 8015794:	7023      	strb	r3, [r4, #0]
 8015796:	6017      	str	r7, [r2, #0]
 8015798:	e7ea      	b.n	8015770 <__strtok_r+0x34>
	...

0801579c <_strtol_l.isra.0>:
 801579c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801579e:	b087      	sub	sp, #28
 80157a0:	001e      	movs	r6, r3
 80157a2:	9005      	str	r0, [sp, #20]
 80157a4:	9101      	str	r1, [sp, #4]
 80157a6:	9202      	str	r2, [sp, #8]
 80157a8:	2b01      	cmp	r3, #1
 80157aa:	d045      	beq.n	8015838 <_strtol_l.isra.0+0x9c>
 80157ac:	0008      	movs	r0, r1
 80157ae:	2b24      	cmp	r3, #36	; 0x24
 80157b0:	d842      	bhi.n	8015838 <_strtol_l.isra.0+0x9c>
 80157b2:	4b3f      	ldr	r3, [pc, #252]	; (80158b0 <_strtol_l.isra.0+0x114>)
 80157b4:	2208      	movs	r2, #8
 80157b6:	469c      	mov	ip, r3
 80157b8:	0003      	movs	r3, r0
 80157ba:	4661      	mov	r1, ip
 80157bc:	781c      	ldrb	r4, [r3, #0]
 80157be:	1c45      	adds	r5, r0, #1
 80157c0:	5d09      	ldrb	r1, [r1, r4]
 80157c2:	0028      	movs	r0, r5
 80157c4:	000f      	movs	r7, r1
 80157c6:	4017      	ands	r7, r2
 80157c8:	4211      	tst	r1, r2
 80157ca:	d1f5      	bne.n	80157b8 <_strtol_l.isra.0+0x1c>
 80157cc:	2c2d      	cmp	r4, #45	; 0x2d
 80157ce:	d13a      	bne.n	8015846 <_strtol_l.isra.0+0xaa>
 80157d0:	2701      	movs	r7, #1
 80157d2:	782c      	ldrb	r4, [r5, #0]
 80157d4:	1c9d      	adds	r5, r3, #2
 80157d6:	2e00      	cmp	r6, #0
 80157d8:	d065      	beq.n	80158a6 <_strtol_l.isra.0+0x10a>
 80157da:	2e10      	cmp	r6, #16
 80157dc:	d109      	bne.n	80157f2 <_strtol_l.isra.0+0x56>
 80157de:	2c30      	cmp	r4, #48	; 0x30
 80157e0:	d107      	bne.n	80157f2 <_strtol_l.isra.0+0x56>
 80157e2:	2220      	movs	r2, #32
 80157e4:	782b      	ldrb	r3, [r5, #0]
 80157e6:	4393      	bics	r3, r2
 80157e8:	2b58      	cmp	r3, #88	; 0x58
 80157ea:	d157      	bne.n	801589c <_strtol_l.isra.0+0x100>
 80157ec:	2610      	movs	r6, #16
 80157ee:	786c      	ldrb	r4, [r5, #1]
 80157f0:	3502      	adds	r5, #2
 80157f2:	4b30      	ldr	r3, [pc, #192]	; (80158b4 <_strtol_l.isra.0+0x118>)
 80157f4:	0031      	movs	r1, r6
 80157f6:	18fb      	adds	r3, r7, r3
 80157f8:	0018      	movs	r0, r3
 80157fa:	9303      	str	r3, [sp, #12]
 80157fc:	f7ea fd2e 	bl	800025c <__aeabi_uidivmod>
 8015800:	2300      	movs	r3, #0
 8015802:	2201      	movs	r2, #1
 8015804:	4684      	mov	ip, r0
 8015806:	0018      	movs	r0, r3
 8015808:	9104      	str	r1, [sp, #16]
 801580a:	4252      	negs	r2, r2
 801580c:	0021      	movs	r1, r4
 801580e:	3930      	subs	r1, #48	; 0x30
 8015810:	2909      	cmp	r1, #9
 8015812:	d81d      	bhi.n	8015850 <_strtol_l.isra.0+0xb4>
 8015814:	000c      	movs	r4, r1
 8015816:	42a6      	cmp	r6, r4
 8015818:	dd28      	ble.n	801586c <_strtol_l.isra.0+0xd0>
 801581a:	2b00      	cmp	r3, #0
 801581c:	db24      	blt.n	8015868 <_strtol_l.isra.0+0xcc>
 801581e:	0013      	movs	r3, r2
 8015820:	4584      	cmp	ip, r0
 8015822:	d306      	bcc.n	8015832 <_strtol_l.isra.0+0x96>
 8015824:	d102      	bne.n	801582c <_strtol_l.isra.0+0x90>
 8015826:	9904      	ldr	r1, [sp, #16]
 8015828:	42a1      	cmp	r1, r4
 801582a:	db02      	blt.n	8015832 <_strtol_l.isra.0+0x96>
 801582c:	2301      	movs	r3, #1
 801582e:	4370      	muls	r0, r6
 8015830:	1820      	adds	r0, r4, r0
 8015832:	782c      	ldrb	r4, [r5, #0]
 8015834:	3501      	adds	r5, #1
 8015836:	e7e9      	b.n	801580c <_strtol_l.isra.0+0x70>
 8015838:	f002 f960 	bl	8017afc <__errno>
 801583c:	2316      	movs	r3, #22
 801583e:	6003      	str	r3, [r0, #0]
 8015840:	2000      	movs	r0, #0
 8015842:	b007      	add	sp, #28
 8015844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015846:	2c2b      	cmp	r4, #43	; 0x2b
 8015848:	d1c5      	bne.n	80157d6 <_strtol_l.isra.0+0x3a>
 801584a:	782c      	ldrb	r4, [r5, #0]
 801584c:	1c9d      	adds	r5, r3, #2
 801584e:	e7c2      	b.n	80157d6 <_strtol_l.isra.0+0x3a>
 8015850:	0021      	movs	r1, r4
 8015852:	3941      	subs	r1, #65	; 0x41
 8015854:	2919      	cmp	r1, #25
 8015856:	d801      	bhi.n	801585c <_strtol_l.isra.0+0xc0>
 8015858:	3c37      	subs	r4, #55	; 0x37
 801585a:	e7dc      	b.n	8015816 <_strtol_l.isra.0+0x7a>
 801585c:	0021      	movs	r1, r4
 801585e:	3961      	subs	r1, #97	; 0x61
 8015860:	2919      	cmp	r1, #25
 8015862:	d803      	bhi.n	801586c <_strtol_l.isra.0+0xd0>
 8015864:	3c57      	subs	r4, #87	; 0x57
 8015866:	e7d6      	b.n	8015816 <_strtol_l.isra.0+0x7a>
 8015868:	0013      	movs	r3, r2
 801586a:	e7e2      	b.n	8015832 <_strtol_l.isra.0+0x96>
 801586c:	2b00      	cmp	r3, #0
 801586e:	da09      	bge.n	8015884 <_strtol_l.isra.0+0xe8>
 8015870:	2322      	movs	r3, #34	; 0x22
 8015872:	9a05      	ldr	r2, [sp, #20]
 8015874:	9803      	ldr	r0, [sp, #12]
 8015876:	6013      	str	r3, [r2, #0]
 8015878:	9b02      	ldr	r3, [sp, #8]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d0e1      	beq.n	8015842 <_strtol_l.isra.0+0xa6>
 801587e:	1e6b      	subs	r3, r5, #1
 8015880:	9301      	str	r3, [sp, #4]
 8015882:	e007      	b.n	8015894 <_strtol_l.isra.0+0xf8>
 8015884:	2f00      	cmp	r7, #0
 8015886:	d000      	beq.n	801588a <_strtol_l.isra.0+0xee>
 8015888:	4240      	negs	r0, r0
 801588a:	9a02      	ldr	r2, [sp, #8]
 801588c:	2a00      	cmp	r2, #0
 801588e:	d0d8      	beq.n	8015842 <_strtol_l.isra.0+0xa6>
 8015890:	2b00      	cmp	r3, #0
 8015892:	d1f4      	bne.n	801587e <_strtol_l.isra.0+0xe2>
 8015894:	9b02      	ldr	r3, [sp, #8]
 8015896:	9a01      	ldr	r2, [sp, #4]
 8015898:	601a      	str	r2, [r3, #0]
 801589a:	e7d2      	b.n	8015842 <_strtol_l.isra.0+0xa6>
 801589c:	2430      	movs	r4, #48	; 0x30
 801589e:	2e00      	cmp	r6, #0
 80158a0:	d1a7      	bne.n	80157f2 <_strtol_l.isra.0+0x56>
 80158a2:	3608      	adds	r6, #8
 80158a4:	e7a5      	b.n	80157f2 <_strtol_l.isra.0+0x56>
 80158a6:	2c30      	cmp	r4, #48	; 0x30
 80158a8:	d09b      	beq.n	80157e2 <_strtol_l.isra.0+0x46>
 80158aa:	260a      	movs	r6, #10
 80158ac:	e7a1      	b.n	80157f2 <_strtol_l.isra.0+0x56>
 80158ae:	46c0      	nop			; (mov r8, r8)
 80158b0:	0801d691 	.word	0x0801d691
 80158b4:	7fffffff 	.word	0x7fffffff

080158b8 <strtol>:
 80158b8:	b510      	push	{r4, lr}
 80158ba:	0013      	movs	r3, r2
 80158bc:	000a      	movs	r2, r1
 80158be:	0001      	movs	r1, r0
 80158c0:	4802      	ldr	r0, [pc, #8]	; (80158cc <strtol+0x14>)
 80158c2:	6800      	ldr	r0, [r0, #0]
 80158c4:	f7ff ff6a 	bl	801579c <_strtol_l.isra.0>
 80158c8:	bd10      	pop	{r4, pc}
 80158ca:	46c0      	nop			; (mov r8, r8)
 80158cc:	20000190 	.word	0x20000190

080158d0 <_svfprintf_r>:
 80158d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158d2:	b0d9      	sub	sp, #356	; 0x164
 80158d4:	001c      	movs	r4, r3
 80158d6:	910b      	str	r1, [sp, #44]	; 0x2c
 80158d8:	9208      	str	r2, [sp, #32]
 80158da:	900a      	str	r0, [sp, #40]	; 0x28
 80158dc:	f002 fda8 	bl	8018430 <_localeconv_r>
 80158e0:	6803      	ldr	r3, [r0, #0]
 80158e2:	0018      	movs	r0, r3
 80158e4:	931c      	str	r3, [sp, #112]	; 0x70
 80158e6:	f7ea fc17 	bl	8000118 <strlen>
 80158ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80158ec:	9016      	str	r0, [sp, #88]	; 0x58
 80158ee:	899b      	ldrh	r3, [r3, #12]
 80158f0:	061b      	lsls	r3, r3, #24
 80158f2:	d518      	bpl.n	8015926 <_svfprintf_r+0x56>
 80158f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80158f6:	691b      	ldr	r3, [r3, #16]
 80158f8:	9309      	str	r3, [sp, #36]	; 0x24
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d113      	bne.n	8015926 <_svfprintf_r+0x56>
 80158fe:	2140      	movs	r1, #64	; 0x40
 8015900:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015902:	f7fe fc0b 	bl	801411c <_malloc_r>
 8015906:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015908:	6018      	str	r0, [r3, #0]
 801590a:	6118      	str	r0, [r3, #16]
 801590c:	2800      	cmp	r0, #0
 801590e:	d107      	bne.n	8015920 <_svfprintf_r+0x50>
 8015910:	230c      	movs	r3, #12
 8015912:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015914:	6013      	str	r3, [r2, #0]
 8015916:	3b0d      	subs	r3, #13
 8015918:	9317      	str	r3, [sp, #92]	; 0x5c
 801591a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801591c:	b059      	add	sp, #356	; 0x164
 801591e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015920:	2340      	movs	r3, #64	; 0x40
 8015922:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015924:	6153      	str	r3, [r2, #20]
 8015926:	2300      	movs	r3, #0
 8015928:	2200      	movs	r2, #0
 801592a:	932e      	str	r3, [sp, #184]	; 0xb8
 801592c:	932d      	str	r3, [sp, #180]	; 0xb4
 801592e:	930d      	str	r3, [sp, #52]	; 0x34
 8015930:	2300      	movs	r3, #0
 8015932:	9214      	str	r2, [sp, #80]	; 0x50
 8015934:	9315      	str	r3, [sp, #84]	; 0x54
 8015936:	2300      	movs	r3, #0
 8015938:	af2f      	add	r7, sp, #188	; 0xbc
 801593a:	972c      	str	r7, [sp, #176]	; 0xb0
 801593c:	931f      	str	r3, [sp, #124]	; 0x7c
 801593e:	931e      	str	r3, [sp, #120]	; 0x78
 8015940:	9312      	str	r3, [sp, #72]	; 0x48
 8015942:	931b      	str	r3, [sp, #108]	; 0x6c
 8015944:	931d      	str	r3, [sp, #116]	; 0x74
 8015946:	9317      	str	r3, [sp, #92]	; 0x5c
 8015948:	9d08      	ldr	r5, [sp, #32]
 801594a:	782b      	ldrb	r3, [r5, #0]
 801594c:	2b00      	cmp	r3, #0
 801594e:	d002      	beq.n	8015956 <_svfprintf_r+0x86>
 8015950:	2b25      	cmp	r3, #37	; 0x25
 8015952:	d000      	beq.n	8015956 <_svfprintf_r+0x86>
 8015954:	e092      	b.n	8015a7c <_svfprintf_r+0x1ac>
 8015956:	9b08      	ldr	r3, [sp, #32]
 8015958:	1aee      	subs	r6, r5, r3
 801595a:	429d      	cmp	r5, r3
 801595c:	d017      	beq.n	801598e <_svfprintf_r+0xbe>
 801595e:	603b      	str	r3, [r7, #0]
 8015960:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015962:	607e      	str	r6, [r7, #4]
 8015964:	199b      	adds	r3, r3, r6
 8015966:	932e      	str	r3, [sp, #184]	; 0xb8
 8015968:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801596a:	3708      	adds	r7, #8
 801596c:	9309      	str	r3, [sp, #36]	; 0x24
 801596e:	3301      	adds	r3, #1
 8015970:	932d      	str	r3, [sp, #180]	; 0xb4
 8015972:	2b07      	cmp	r3, #7
 8015974:	dd08      	ble.n	8015988 <_svfprintf_r+0xb8>
 8015976:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015978:	980a      	ldr	r0, [sp, #40]	; 0x28
 801597a:	aa2c      	add	r2, sp, #176	; 0xb0
 801597c:	f003 fa42 	bl	8018e04 <__ssprint_r>
 8015980:	2800      	cmp	r0, #0
 8015982:	d000      	beq.n	8015986 <_svfprintf_r+0xb6>
 8015984:	e2aa      	b.n	8015edc <_svfprintf_r+0x60c>
 8015986:	af2f      	add	r7, sp, #188	; 0xbc
 8015988:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801598a:	199b      	adds	r3, r3, r6
 801598c:	9317      	str	r3, [sp, #92]	; 0x5c
 801598e:	782b      	ldrb	r3, [r5, #0]
 8015990:	2b00      	cmp	r3, #0
 8015992:	d101      	bne.n	8015998 <_svfprintf_r+0xc8>
 8015994:	f001 f9d2 	bl	8016d3c <_svfprintf_r+0x146c>
 8015998:	221b      	movs	r2, #27
 801599a:	2300      	movs	r3, #0
 801599c:	a91e      	add	r1, sp, #120	; 0x78
 801599e:	1852      	adds	r2, r2, r1
 80159a0:	7013      	strb	r3, [r2, #0]
 80159a2:	2201      	movs	r2, #1
 80159a4:	001e      	movs	r6, r3
 80159a6:	4252      	negs	r2, r2
 80159a8:	3501      	adds	r5, #1
 80159aa:	9209      	str	r2, [sp, #36]	; 0x24
 80159ac:	9318      	str	r3, [sp, #96]	; 0x60
 80159ae:	1c6b      	adds	r3, r5, #1
 80159b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80159b2:	782b      	ldrb	r3, [r5, #0]
 80159b4:	930f      	str	r3, [sp, #60]	; 0x3c
 80159b6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80159b8:	3820      	subs	r0, #32
 80159ba:	285a      	cmp	r0, #90	; 0x5a
 80159bc:	d901      	bls.n	80159c2 <_svfprintf_r+0xf2>
 80159be:	f000 fe2e 	bl	801661e <_svfprintf_r+0xd4e>
 80159c2:	f7ea fbbb 	bl	800013c <__gnu_thumb1_case_uhi>
 80159c6:	0078      	.short	0x0078
 80159c8:	062c062c 	.word	0x062c062c
 80159cc:	062c0082 	.word	0x062c0082
 80159d0:	062c062c 	.word	0x062c062c
 80159d4:	062c005d 	.word	0x062c005d
 80159d8:	0084062c 	.word	0x0084062c
 80159dc:	062c008c 	.word	0x062c008c
 80159e0:	0091008a 	.word	0x0091008a
 80159e4:	00b2062c 	.word	0x00b2062c
 80159e8:	00b400b4 	.word	0x00b400b4
 80159ec:	00b400b4 	.word	0x00b400b4
 80159f0:	00b400b4 	.word	0x00b400b4
 80159f4:	00b400b4 	.word	0x00b400b4
 80159f8:	062c00b4 	.word	0x062c00b4
 80159fc:	062c062c 	.word	0x062c062c
 8015a00:	062c062c 	.word	0x062c062c
 8015a04:	062c062c 	.word	0x062c062c
 8015a08:	062c0216 	.word	0x062c0216
 8015a0c:	01cf00e0 	.word	0x01cf00e0
 8015a10:	02160216 	.word	0x02160216
 8015a14:	062c0216 	.word	0x062c0216
 8015a18:	062c062c 	.word	0x062c062c
 8015a1c:	00c7062c 	.word	0x00c7062c
 8015a20:	062c062c 	.word	0x062c062c
 8015a24:	062c04d6 	.word	0x062c04d6
 8015a28:	062c062c 	.word	0x062c062c
 8015a2c:	062c051d 	.word	0x062c051d
 8015a30:	062c053d 	.word	0x062c053d
 8015a34:	056e062c 	.word	0x056e062c
 8015a38:	062c062c 	.word	0x062c062c
 8015a3c:	062c062c 	.word	0x062c062c
 8015a40:	062c062c 	.word	0x062c062c
 8015a44:	062c062c 	.word	0x062c062c
 8015a48:	062c0216 	.word	0x062c0216
 8015a4c:	01d100e0 	.word	0x01d100e0
 8015a50:	02160216 	.word	0x02160216
 8015a54:	00c90216 	.word	0x00c90216
 8015a58:	00dc01d1 	.word	0x00dc01d1
 8015a5c:	00d5062c 	.word	0x00d5062c
 8015a60:	04b9062c 	.word	0x04b9062c
 8015a64:	050d04d8 	.word	0x050d04d8
 8015a68:	062c00dc 	.word	0x062c00dc
 8015a6c:	0080051d 	.word	0x0080051d
 8015a70:	062c053f 	.word	0x062c053f
 8015a74:	058e062c 	.word	0x058e062c
 8015a78:	0080062c 	.word	0x0080062c
 8015a7c:	3501      	adds	r5, #1
 8015a7e:	e764      	b.n	801594a <_svfprintf_r+0x7a>
 8015a80:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015a82:	f002 fcd5 	bl	8018430 <_localeconv_r>
 8015a86:	6843      	ldr	r3, [r0, #4]
 8015a88:	0018      	movs	r0, r3
 8015a8a:	931d      	str	r3, [sp, #116]	; 0x74
 8015a8c:	f7ea fb44 	bl	8000118 <strlen>
 8015a90:	901b      	str	r0, [sp, #108]	; 0x6c
 8015a92:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015a94:	f002 fccc 	bl	8018430 <_localeconv_r>
 8015a98:	6883      	ldr	r3, [r0, #8]
 8015a9a:	9312      	str	r3, [sp, #72]	; 0x48
 8015a9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d011      	beq.n	8015ac6 <_svfprintf_r+0x1f6>
 8015aa2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d00e      	beq.n	8015ac6 <_svfprintf_r+0x1f6>
 8015aa8:	781b      	ldrb	r3, [r3, #0]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d00b      	beq.n	8015ac6 <_svfprintf_r+0x1f6>
 8015aae:	2380      	movs	r3, #128	; 0x80
 8015ab0:	00db      	lsls	r3, r3, #3
 8015ab2:	431e      	orrs	r6, r3
 8015ab4:	e007      	b.n	8015ac6 <_svfprintf_r+0x1f6>
 8015ab6:	231b      	movs	r3, #27
 8015ab8:	aa1e      	add	r2, sp, #120	; 0x78
 8015aba:	189b      	adds	r3, r3, r2
 8015abc:	781a      	ldrb	r2, [r3, #0]
 8015abe:	2a00      	cmp	r2, #0
 8015ac0:	d101      	bne.n	8015ac6 <_svfprintf_r+0x1f6>
 8015ac2:	3220      	adds	r2, #32
 8015ac4:	701a      	strb	r2, [r3, #0]
 8015ac6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8015ac8:	e771      	b.n	80159ae <_svfprintf_r+0xde>
 8015aca:	2301      	movs	r3, #1
 8015acc:	e7f1      	b.n	8015ab2 <_svfprintf_r+0x1e2>
 8015ace:	cc08      	ldmia	r4!, {r3}
 8015ad0:	9318      	str	r3, [sp, #96]	; 0x60
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	daf7      	bge.n	8015ac6 <_svfprintf_r+0x1f6>
 8015ad6:	425b      	negs	r3, r3
 8015ad8:	9318      	str	r3, [sp, #96]	; 0x60
 8015ada:	2304      	movs	r3, #4
 8015adc:	e7e9      	b.n	8015ab2 <_svfprintf_r+0x1e2>
 8015ade:	231b      	movs	r3, #27
 8015ae0:	aa1e      	add	r2, sp, #120	; 0x78
 8015ae2:	189b      	adds	r3, r3, r2
 8015ae4:	222b      	movs	r2, #43	; 0x2b
 8015ae6:	e7ed      	b.n	8015ac4 <_svfprintf_r+0x1f4>
 8015ae8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015aea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015aec:	7812      	ldrb	r2, [r2, #0]
 8015aee:	3301      	adds	r3, #1
 8015af0:	920f      	str	r2, [sp, #60]	; 0x3c
 8015af2:	2a2a      	cmp	r2, #42	; 0x2a
 8015af4:	d010      	beq.n	8015b18 <_svfprintf_r+0x248>
 8015af6:	2200      	movs	r2, #0
 8015af8:	9209      	str	r2, [sp, #36]	; 0x24
 8015afa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015afc:	9313      	str	r3, [sp, #76]	; 0x4c
 8015afe:	3a30      	subs	r2, #48	; 0x30
 8015b00:	2a09      	cmp	r2, #9
 8015b02:	d900      	bls.n	8015b06 <_svfprintf_r+0x236>
 8015b04:	e757      	b.n	80159b6 <_svfprintf_r+0xe6>
 8015b06:	210a      	movs	r1, #10
 8015b08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015b0a:	4348      	muls	r0, r1
 8015b0c:	1882      	adds	r2, r0, r2
 8015b0e:	9209      	str	r2, [sp, #36]	; 0x24
 8015b10:	781a      	ldrb	r2, [r3, #0]
 8015b12:	3301      	adds	r3, #1
 8015b14:	920f      	str	r2, [sp, #60]	; 0x3c
 8015b16:	e7f0      	b.n	8015afa <_svfprintf_r+0x22a>
 8015b18:	cc04      	ldmia	r4!, {r2}
 8015b1a:	9209      	str	r2, [sp, #36]	; 0x24
 8015b1c:	2a00      	cmp	r2, #0
 8015b1e:	da02      	bge.n	8015b26 <_svfprintf_r+0x256>
 8015b20:	2201      	movs	r2, #1
 8015b22:	4252      	negs	r2, r2
 8015b24:	9209      	str	r2, [sp, #36]	; 0x24
 8015b26:	9313      	str	r3, [sp, #76]	; 0x4c
 8015b28:	e7cd      	b.n	8015ac6 <_svfprintf_r+0x1f6>
 8015b2a:	2380      	movs	r3, #128	; 0x80
 8015b2c:	e7c1      	b.n	8015ab2 <_svfprintf_r+0x1e2>
 8015b2e:	2200      	movs	r2, #0
 8015b30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015b32:	9218      	str	r2, [sp, #96]	; 0x60
 8015b34:	210a      	movs	r1, #10
 8015b36:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8015b38:	434a      	muls	r2, r1
 8015b3a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015b3c:	3930      	subs	r1, #48	; 0x30
 8015b3e:	188a      	adds	r2, r1, r2
 8015b40:	9218      	str	r2, [sp, #96]	; 0x60
 8015b42:	001a      	movs	r2, r3
 8015b44:	7812      	ldrb	r2, [r2, #0]
 8015b46:	3301      	adds	r3, #1
 8015b48:	920f      	str	r2, [sp, #60]	; 0x3c
 8015b4a:	3a30      	subs	r2, #48	; 0x30
 8015b4c:	9313      	str	r3, [sp, #76]	; 0x4c
 8015b4e:	2a09      	cmp	r2, #9
 8015b50:	d9f0      	bls.n	8015b34 <_svfprintf_r+0x264>
 8015b52:	e730      	b.n	80159b6 <_svfprintf_r+0xe6>
 8015b54:	2308      	movs	r3, #8
 8015b56:	e7ac      	b.n	8015ab2 <_svfprintf_r+0x1e2>
 8015b58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015b5a:	781b      	ldrb	r3, [r3, #0]
 8015b5c:	2b68      	cmp	r3, #104	; 0x68
 8015b5e:	d105      	bne.n	8015b6c <_svfprintf_r+0x29c>
 8015b60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015b62:	3301      	adds	r3, #1
 8015b64:	9313      	str	r3, [sp, #76]	; 0x4c
 8015b66:	2380      	movs	r3, #128	; 0x80
 8015b68:	009b      	lsls	r3, r3, #2
 8015b6a:	e7a2      	b.n	8015ab2 <_svfprintf_r+0x1e2>
 8015b6c:	2340      	movs	r3, #64	; 0x40
 8015b6e:	e7a0      	b.n	8015ab2 <_svfprintf_r+0x1e2>
 8015b70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015b72:	781b      	ldrb	r3, [r3, #0]
 8015b74:	2b6c      	cmp	r3, #108	; 0x6c
 8015b76:	d104      	bne.n	8015b82 <_svfprintf_r+0x2b2>
 8015b78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015b7a:	3301      	adds	r3, #1
 8015b7c:	9313      	str	r3, [sp, #76]	; 0x4c
 8015b7e:	2320      	movs	r3, #32
 8015b80:	e797      	b.n	8015ab2 <_svfprintf_r+0x1e2>
 8015b82:	2310      	movs	r3, #16
 8015b84:	e795      	b.n	8015ab2 <_svfprintf_r+0x1e2>
 8015b86:	0022      	movs	r2, r4
 8015b88:	ca08      	ldmia	r2!, {r3}
 8015b8a:	a83f      	add	r0, sp, #252	; 0xfc
 8015b8c:	920e      	str	r2, [sp, #56]	; 0x38
 8015b8e:	221b      	movs	r2, #27
 8015b90:	7003      	strb	r3, [r0, #0]
 8015b92:	2300      	movs	r3, #0
 8015b94:	a91e      	add	r1, sp, #120	; 0x78
 8015b96:	1852      	adds	r2, r2, r1
 8015b98:	7013      	strb	r3, [r2, #0]
 8015b9a:	930c      	str	r3, [sp, #48]	; 0x30
 8015b9c:	3301      	adds	r3, #1
 8015b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	001d      	movs	r5, r3
 8015ba4:	9319      	str	r3, [sp, #100]	; 0x64
 8015ba6:	9310      	str	r3, [sp, #64]	; 0x40
 8015ba8:	9311      	str	r3, [sp, #68]	; 0x44
 8015baa:	9008      	str	r0, [sp, #32]
 8015bac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015bae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015bb0:	931a      	str	r3, [sp, #104]	; 0x68
 8015bb2:	4293      	cmp	r3, r2
 8015bb4:	da00      	bge.n	8015bb8 <_svfprintf_r+0x2e8>
 8015bb6:	921a      	str	r2, [sp, #104]	; 0x68
 8015bb8:	231b      	movs	r3, #27
 8015bba:	aa1e      	add	r2, sp, #120	; 0x78
 8015bbc:	189b      	adds	r3, r3, r2
 8015bbe:	781b      	ldrb	r3, [r3, #0]
 8015bc0:	1e5a      	subs	r2, r3, #1
 8015bc2:	4193      	sbcs	r3, r2
 8015bc4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015bc6:	18d3      	adds	r3, r2, r3
 8015bc8:	931a      	str	r3, [sp, #104]	; 0x68
 8015bca:	0032      	movs	r2, r6
 8015bcc:	2302      	movs	r3, #2
 8015bce:	401a      	ands	r2, r3
 8015bd0:	9220      	str	r2, [sp, #128]	; 0x80
 8015bd2:	421e      	tst	r6, r3
 8015bd4:	d002      	beq.n	8015bdc <_svfprintf_r+0x30c>
 8015bd6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8015bd8:	3302      	adds	r3, #2
 8015bda:	931a      	str	r3, [sp, #104]	; 0x68
 8015bdc:	2384      	movs	r3, #132	; 0x84
 8015bde:	0032      	movs	r2, r6
 8015be0:	401a      	ands	r2, r3
 8015be2:	9221      	str	r2, [sp, #132]	; 0x84
 8015be4:	421e      	tst	r6, r3
 8015be6:	d121      	bne.n	8015c2c <_svfprintf_r+0x35c>
 8015be8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015bea:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015bec:	1a9c      	subs	r4, r3, r2
 8015bee:	2c00      	cmp	r4, #0
 8015bf0:	dd1c      	ble.n	8015c2c <_svfprintf_r+0x35c>
 8015bf2:	0039      	movs	r1, r7
 8015bf4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015bf6:	48c5      	ldr	r0, [pc, #788]	; (8015f0c <_svfprintf_r+0x63c>)
 8015bf8:	9322      	str	r3, [sp, #136]	; 0x88
 8015bfa:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015bfc:	3301      	adds	r3, #1
 8015bfe:	3108      	adds	r1, #8
 8015c00:	6038      	str	r0, [r7, #0]
 8015c02:	2c10      	cmp	r4, #16
 8015c04:	dd01      	ble.n	8015c0a <_svfprintf_r+0x33a>
 8015c06:	f000 fd1d 	bl	8016644 <_svfprintf_r+0xd74>
 8015c0a:	607c      	str	r4, [r7, #4]
 8015c0c:	18a4      	adds	r4, r4, r2
 8015c0e:	000f      	movs	r7, r1
 8015c10:	942e      	str	r4, [sp, #184]	; 0xb8
 8015c12:	932d      	str	r3, [sp, #180]	; 0xb4
 8015c14:	2b07      	cmp	r3, #7
 8015c16:	dd09      	ble.n	8015c2c <_svfprintf_r+0x35c>
 8015c18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015c1a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015c1c:	aa2c      	add	r2, sp, #176	; 0xb0
 8015c1e:	f003 f8f1 	bl	8018e04 <__ssprint_r>
 8015c22:	2800      	cmp	r0, #0
 8015c24:	d001      	beq.n	8015c2a <_svfprintf_r+0x35a>
 8015c26:	f001 f868 	bl	8016cfa <_svfprintf_r+0x142a>
 8015c2a:	af2f      	add	r7, sp, #188	; 0xbc
 8015c2c:	231b      	movs	r3, #27
 8015c2e:	aa1e      	add	r2, sp, #120	; 0x78
 8015c30:	189b      	adds	r3, r3, r2
 8015c32:	781a      	ldrb	r2, [r3, #0]
 8015c34:	2a00      	cmp	r2, #0
 8015c36:	d017      	beq.n	8015c68 <_svfprintf_r+0x398>
 8015c38:	603b      	str	r3, [r7, #0]
 8015c3a:	2301      	movs	r3, #1
 8015c3c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015c3e:	607b      	str	r3, [r7, #4]
 8015c40:	0013      	movs	r3, r2
 8015c42:	3301      	adds	r3, #1
 8015c44:	932e      	str	r3, [sp, #184]	; 0xb8
 8015c46:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015c48:	3708      	adds	r7, #8
 8015c4a:	9322      	str	r3, [sp, #136]	; 0x88
 8015c4c:	3301      	adds	r3, #1
 8015c4e:	932d      	str	r3, [sp, #180]	; 0xb4
 8015c50:	2b07      	cmp	r3, #7
 8015c52:	dd09      	ble.n	8015c68 <_svfprintf_r+0x398>
 8015c54:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015c56:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015c58:	aa2c      	add	r2, sp, #176	; 0xb0
 8015c5a:	f003 f8d3 	bl	8018e04 <__ssprint_r>
 8015c5e:	2800      	cmp	r0, #0
 8015c60:	d001      	beq.n	8015c66 <_svfprintf_r+0x396>
 8015c62:	f001 f84a 	bl	8016cfa <_svfprintf_r+0x142a>
 8015c66:	af2f      	add	r7, sp, #188	; 0xbc
 8015c68:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d019      	beq.n	8015ca2 <_svfprintf_r+0x3d2>
 8015c6e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015c70:	9320      	str	r3, [sp, #128]	; 0x80
 8015c72:	ab25      	add	r3, sp, #148	; 0x94
 8015c74:	603b      	str	r3, [r7, #0]
 8015c76:	2302      	movs	r3, #2
 8015c78:	607b      	str	r3, [r7, #4]
 8015c7a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8015c7c:	3708      	adds	r7, #8
 8015c7e:	3302      	adds	r3, #2
 8015c80:	932e      	str	r3, [sp, #184]	; 0xb8
 8015c82:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015c84:	9320      	str	r3, [sp, #128]	; 0x80
 8015c86:	3301      	adds	r3, #1
 8015c88:	932d      	str	r3, [sp, #180]	; 0xb4
 8015c8a:	2b07      	cmp	r3, #7
 8015c8c:	dd09      	ble.n	8015ca2 <_svfprintf_r+0x3d2>
 8015c8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015c90:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015c92:	aa2c      	add	r2, sp, #176	; 0xb0
 8015c94:	f003 f8b6 	bl	8018e04 <__ssprint_r>
 8015c98:	2800      	cmp	r0, #0
 8015c9a:	d001      	beq.n	8015ca0 <_svfprintf_r+0x3d0>
 8015c9c:	f001 f82d 	bl	8016cfa <_svfprintf_r+0x142a>
 8015ca0:	af2f      	add	r7, sp, #188	; 0xbc
 8015ca2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015ca4:	2b80      	cmp	r3, #128	; 0x80
 8015ca6:	d121      	bne.n	8015cec <_svfprintf_r+0x41c>
 8015ca8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8015caa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8015cac:	1a9c      	subs	r4, r3, r2
 8015cae:	2c00      	cmp	r4, #0
 8015cb0:	dd1c      	ble.n	8015cec <_svfprintf_r+0x41c>
 8015cb2:	0039      	movs	r1, r7
 8015cb4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015cb6:	4896      	ldr	r0, [pc, #600]	; (8015f10 <_svfprintf_r+0x640>)
 8015cb8:	9320      	str	r3, [sp, #128]	; 0x80
 8015cba:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015cbc:	3301      	adds	r3, #1
 8015cbe:	3108      	adds	r1, #8
 8015cc0:	6038      	str	r0, [r7, #0]
 8015cc2:	2c10      	cmp	r4, #16
 8015cc4:	dd01      	ble.n	8015cca <_svfprintf_r+0x3fa>
 8015cc6:	f000 fcd1 	bl	801666c <_svfprintf_r+0xd9c>
 8015cca:	607c      	str	r4, [r7, #4]
 8015ccc:	18a4      	adds	r4, r4, r2
 8015cce:	000f      	movs	r7, r1
 8015cd0:	942e      	str	r4, [sp, #184]	; 0xb8
 8015cd2:	932d      	str	r3, [sp, #180]	; 0xb4
 8015cd4:	2b07      	cmp	r3, #7
 8015cd6:	dd09      	ble.n	8015cec <_svfprintf_r+0x41c>
 8015cd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015cda:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015cdc:	aa2c      	add	r2, sp, #176	; 0xb0
 8015cde:	f003 f891 	bl	8018e04 <__ssprint_r>
 8015ce2:	2800      	cmp	r0, #0
 8015ce4:	d001      	beq.n	8015cea <_svfprintf_r+0x41a>
 8015ce6:	f001 f808 	bl	8016cfa <_svfprintf_r+0x142a>
 8015cea:	af2f      	add	r7, sp, #188	; 0xbc
 8015cec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015cee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015cf0:	1a9c      	subs	r4, r3, r2
 8015cf2:	2c00      	cmp	r4, #0
 8015cf4:	dd1c      	ble.n	8015d30 <_svfprintf_r+0x460>
 8015cf6:	0039      	movs	r1, r7
 8015cf8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015cfa:	4885      	ldr	r0, [pc, #532]	; (8015f10 <_svfprintf_r+0x640>)
 8015cfc:	9319      	str	r3, [sp, #100]	; 0x64
 8015cfe:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8015d00:	3301      	adds	r3, #1
 8015d02:	3108      	adds	r1, #8
 8015d04:	6038      	str	r0, [r7, #0]
 8015d06:	2c10      	cmp	r4, #16
 8015d08:	dd01      	ble.n	8015d0e <_svfprintf_r+0x43e>
 8015d0a:	f000 fcc3 	bl	8016694 <_svfprintf_r+0xdc4>
 8015d0e:	1912      	adds	r2, r2, r4
 8015d10:	607c      	str	r4, [r7, #4]
 8015d12:	922e      	str	r2, [sp, #184]	; 0xb8
 8015d14:	000f      	movs	r7, r1
 8015d16:	932d      	str	r3, [sp, #180]	; 0xb4
 8015d18:	2b07      	cmp	r3, #7
 8015d1a:	dd09      	ble.n	8015d30 <_svfprintf_r+0x460>
 8015d1c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015d1e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015d20:	aa2c      	add	r2, sp, #176	; 0xb0
 8015d22:	f003 f86f 	bl	8018e04 <__ssprint_r>
 8015d26:	2800      	cmp	r0, #0
 8015d28:	d001      	beq.n	8015d2e <_svfprintf_r+0x45e>
 8015d2a:	f000 ffe6 	bl	8016cfa <_svfprintf_r+0x142a>
 8015d2e:	af2f      	add	r7, sp, #188	; 0xbc
 8015d30:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8015d32:	9319      	str	r3, [sp, #100]	; 0x64
 8015d34:	05f3      	lsls	r3, r6, #23
 8015d36:	d501      	bpl.n	8015d3c <_svfprintf_r+0x46c>
 8015d38:	f000 fcc8 	bl	80166cc <_svfprintf_r+0xdfc>
 8015d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015d3e:	9b08      	ldr	r3, [sp, #32]
 8015d40:	4694      	mov	ip, r2
 8015d42:	603b      	str	r3, [r7, #0]
 8015d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d46:	607b      	str	r3, [r7, #4]
 8015d48:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015d4a:	4463      	add	r3, ip
 8015d4c:	932e      	str	r3, [sp, #184]	; 0xb8
 8015d4e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8015d50:	9308      	str	r3, [sp, #32]
 8015d52:	3301      	adds	r3, #1
 8015d54:	932d      	str	r3, [sp, #180]	; 0xb4
 8015d56:	2b07      	cmp	r3, #7
 8015d58:	dd01      	ble.n	8015d5e <_svfprintf_r+0x48e>
 8015d5a:	f000 fda8 	bl	80168ae <_svfprintf_r+0xfde>
 8015d5e:	3708      	adds	r7, #8
 8015d60:	f000 fcfb 	bl	801675a <_svfprintf_r+0xe8a>
 8015d64:	2310      	movs	r3, #16
 8015d66:	431e      	orrs	r6, r3
 8015d68:	06b3      	lsls	r3, r6, #26
 8015d6a:	d530      	bpl.n	8015dce <_svfprintf_r+0x4fe>
 8015d6c:	2307      	movs	r3, #7
 8015d6e:	3407      	adds	r4, #7
 8015d70:	439c      	bics	r4, r3
 8015d72:	0022      	movs	r2, r4
 8015d74:	ca18      	ldmia	r2!, {r3, r4}
 8015d76:	9306      	str	r3, [sp, #24]
 8015d78:	9407      	str	r4, [sp, #28]
 8015d7a:	920e      	str	r2, [sp, #56]	; 0x38
 8015d7c:	9a07      	ldr	r2, [sp, #28]
 8015d7e:	2301      	movs	r3, #1
 8015d80:	2a00      	cmp	r2, #0
 8015d82:	da0b      	bge.n	8015d9c <_svfprintf_r+0x4cc>
 8015d84:	9c06      	ldr	r4, [sp, #24]
 8015d86:	9d07      	ldr	r5, [sp, #28]
 8015d88:	2200      	movs	r2, #0
 8015d8a:	4261      	negs	r1, r4
 8015d8c:	41aa      	sbcs	r2, r5
 8015d8e:	9106      	str	r1, [sp, #24]
 8015d90:	9207      	str	r2, [sp, #28]
 8015d92:	221b      	movs	r2, #27
 8015d94:	a91e      	add	r1, sp, #120	; 0x78
 8015d96:	1852      	adds	r2, r2, r1
 8015d98:	212d      	movs	r1, #45	; 0x2d
 8015d9a:	7011      	strb	r1, [r2, #0]
 8015d9c:	9907      	ldr	r1, [sp, #28]
 8015d9e:	9a06      	ldr	r2, [sp, #24]
 8015da0:	430a      	orrs	r2, r1
 8015da2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015da4:	3101      	adds	r1, #1
 8015da6:	d101      	bne.n	8015dac <_svfprintf_r+0x4dc>
 8015da8:	f000 ffd5 	bl	8016d56 <_svfprintf_r+0x1486>
 8015dac:	2180      	movs	r1, #128	; 0x80
 8015dae:	0035      	movs	r5, r6
 8015db0:	438d      	bics	r5, r1
 8015db2:	2a00      	cmp	r2, #0
 8015db4:	d001      	beq.n	8015dba <_svfprintf_r+0x4ea>
 8015db6:	f000 ffd3 	bl	8016d60 <_svfprintf_r+0x1490>
 8015dba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015dbc:	2a00      	cmp	r2, #0
 8015dbe:	d101      	bne.n	8015dc4 <_svfprintf_r+0x4f4>
 8015dc0:	f000 fc20 	bl	8016604 <_svfprintf_r+0xd34>
 8015dc4:	2b01      	cmp	r3, #1
 8015dc6:	d001      	beq.n	8015dcc <_svfprintf_r+0x4fc>
 8015dc8:	f000 ffce 	bl	8016d68 <_svfprintf_r+0x1498>
 8015dcc:	e3b1      	b.n	8016532 <_svfprintf_r+0xc62>
 8015dce:	1d23      	adds	r3, r4, #4
 8015dd0:	930e      	str	r3, [sp, #56]	; 0x38
 8015dd2:	06f3      	lsls	r3, r6, #27
 8015dd4:	d504      	bpl.n	8015de0 <_svfprintf_r+0x510>
 8015dd6:	6823      	ldr	r3, [r4, #0]
 8015dd8:	9306      	str	r3, [sp, #24]
 8015dda:	17db      	asrs	r3, r3, #31
 8015ddc:	9307      	str	r3, [sp, #28]
 8015dde:	e7cd      	b.n	8015d7c <_svfprintf_r+0x4ac>
 8015de0:	6823      	ldr	r3, [r4, #0]
 8015de2:	0672      	lsls	r2, r6, #25
 8015de4:	d501      	bpl.n	8015dea <_svfprintf_r+0x51a>
 8015de6:	b21b      	sxth	r3, r3
 8015de8:	e7f6      	b.n	8015dd8 <_svfprintf_r+0x508>
 8015dea:	05b2      	lsls	r2, r6, #22
 8015dec:	d5f4      	bpl.n	8015dd8 <_svfprintf_r+0x508>
 8015dee:	b25b      	sxtb	r3, r3
 8015df0:	e7f2      	b.n	8015dd8 <_svfprintf_r+0x508>
 8015df2:	2307      	movs	r3, #7
 8015df4:	3407      	adds	r4, #7
 8015df6:	439c      	bics	r4, r3
 8015df8:	0022      	movs	r2, r4
 8015dfa:	ca18      	ldmia	r2!, {r3, r4}
 8015dfc:	920e      	str	r2, [sp, #56]	; 0x38
 8015dfe:	2201      	movs	r2, #1
 8015e00:	9314      	str	r3, [sp, #80]	; 0x50
 8015e02:	9415      	str	r4, [sp, #84]	; 0x54
 8015e04:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e06:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8015e08:	005c      	lsls	r4, r3, #1
 8015e0a:	0864      	lsrs	r4, r4, #1
 8015e0c:	0028      	movs	r0, r5
 8015e0e:	0021      	movs	r1, r4
 8015e10:	4b40      	ldr	r3, [pc, #256]	; (8015f14 <_svfprintf_r+0x644>)
 8015e12:	4252      	negs	r2, r2
 8015e14:	f7ec ffa4 	bl	8002d60 <__aeabi_dcmpun>
 8015e18:	2800      	cmp	r0, #0
 8015e1a:	d126      	bne.n	8015e6a <_svfprintf_r+0x59a>
 8015e1c:	2201      	movs	r2, #1
 8015e1e:	0028      	movs	r0, r5
 8015e20:	0021      	movs	r1, r4
 8015e22:	4b3c      	ldr	r3, [pc, #240]	; (8015f14 <_svfprintf_r+0x644>)
 8015e24:	4252      	negs	r2, r2
 8015e26:	f7ea fb29 	bl	800047c <__aeabi_dcmple>
 8015e2a:	2800      	cmp	r0, #0
 8015e2c:	d11d      	bne.n	8015e6a <_svfprintf_r+0x59a>
 8015e2e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8015e30:	9915      	ldr	r1, [sp, #84]	; 0x54
 8015e32:	2200      	movs	r2, #0
 8015e34:	2300      	movs	r3, #0
 8015e36:	f7ea fb17 	bl	8000468 <__aeabi_dcmplt>
 8015e3a:	2800      	cmp	r0, #0
 8015e3c:	d004      	beq.n	8015e48 <_svfprintf_r+0x578>
 8015e3e:	231b      	movs	r3, #27
 8015e40:	aa1e      	add	r2, sp, #120	; 0x78
 8015e42:	189b      	adds	r3, r3, r2
 8015e44:	222d      	movs	r2, #45	; 0x2d
 8015e46:	701a      	strb	r2, [r3, #0]
 8015e48:	4b33      	ldr	r3, [pc, #204]	; (8015f18 <_svfprintf_r+0x648>)
 8015e4a:	9308      	str	r3, [sp, #32]
 8015e4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e4e:	2b47      	cmp	r3, #71	; 0x47
 8015e50:	dd01      	ble.n	8015e56 <_svfprintf_r+0x586>
 8015e52:	4b32      	ldr	r3, [pc, #200]	; (8015f1c <_svfprintf_r+0x64c>)
 8015e54:	9308      	str	r3, [sp, #32]
 8015e56:	2380      	movs	r3, #128	; 0x80
 8015e58:	439e      	bics	r6, r3
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	930c      	str	r3, [sp, #48]	; 0x30
 8015e5e:	3303      	adds	r3, #3
 8015e60:	9309      	str	r3, [sp, #36]	; 0x24
 8015e62:	2300      	movs	r3, #0
 8015e64:	9319      	str	r3, [sp, #100]	; 0x64
 8015e66:	f000 ffae 	bl	8016dc6 <_svfprintf_r+0x14f6>
 8015e6a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015e6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e6e:	0010      	movs	r0, r2
 8015e70:	0019      	movs	r1, r3
 8015e72:	f7ec ff75 	bl	8002d60 <__aeabi_dcmpun>
 8015e76:	2800      	cmp	r0, #0
 8015e78:	d00e      	beq.n	8015e98 <_svfprintf_r+0x5c8>
 8015e7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	da04      	bge.n	8015e8a <_svfprintf_r+0x5ba>
 8015e80:	231b      	movs	r3, #27
 8015e82:	aa1e      	add	r2, sp, #120	; 0x78
 8015e84:	189b      	adds	r3, r3, r2
 8015e86:	222d      	movs	r2, #45	; 0x2d
 8015e88:	701a      	strb	r2, [r3, #0]
 8015e8a:	4b25      	ldr	r3, [pc, #148]	; (8015f20 <_svfprintf_r+0x650>)
 8015e8c:	9308      	str	r3, [sp, #32]
 8015e8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e90:	2b47      	cmp	r3, #71	; 0x47
 8015e92:	dde0      	ble.n	8015e56 <_svfprintf_r+0x586>
 8015e94:	4b23      	ldr	r3, [pc, #140]	; (8015f24 <_svfprintf_r+0x654>)
 8015e96:	e7dd      	b.n	8015e54 <_svfprintf_r+0x584>
 8015e98:	2320      	movs	r3, #32
 8015e9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015e9c:	439a      	bics	r2, r3
 8015e9e:	9210      	str	r2, [sp, #64]	; 0x40
 8015ea0:	2a41      	cmp	r2, #65	; 0x41
 8015ea2:	d123      	bne.n	8015eec <_svfprintf_r+0x61c>
 8015ea4:	2230      	movs	r2, #48	; 0x30
 8015ea6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8015ea8:	ab25      	add	r3, sp, #148	; 0x94
 8015eaa:	701a      	strb	r2, [r3, #0]
 8015eac:	3248      	adds	r2, #72	; 0x48
 8015eae:	2961      	cmp	r1, #97	; 0x61
 8015eb0:	d000      	beq.n	8015eb4 <_svfprintf_r+0x5e4>
 8015eb2:	3a20      	subs	r2, #32
 8015eb4:	705a      	strb	r2, [r3, #1]
 8015eb6:	2302      	movs	r3, #2
 8015eb8:	431e      	orrs	r6, r3
 8015eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ebc:	2b63      	cmp	r3, #99	; 0x63
 8015ebe:	dd33      	ble.n	8015f28 <_svfprintf_r+0x658>
 8015ec0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015ec2:	1c59      	adds	r1, r3, #1
 8015ec4:	f7fe f92a 	bl	801411c <_malloc_r>
 8015ec8:	9008      	str	r0, [sp, #32]
 8015eca:	2800      	cmp	r0, #0
 8015ecc:	d000      	beq.n	8015ed0 <_svfprintf_r+0x600>
 8015ece:	e141      	b.n	8016154 <_svfprintf_r+0x884>
 8015ed0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ed2:	899a      	ldrh	r2, [r3, #12]
 8015ed4:	2340      	movs	r3, #64	; 0x40
 8015ed6:	4313      	orrs	r3, r2
 8015ed8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015eda:	8193      	strh	r3, [r2, #12]
 8015edc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ede:	899b      	ldrh	r3, [r3, #12]
 8015ee0:	065b      	lsls	r3, r3, #25
 8015ee2:	d400      	bmi.n	8015ee6 <_svfprintf_r+0x616>
 8015ee4:	e519      	b.n	801591a <_svfprintf_r+0x4a>
 8015ee6:	2301      	movs	r3, #1
 8015ee8:	425b      	negs	r3, r3
 8015eea:	e515      	b.n	8015918 <_svfprintf_r+0x48>
 8015eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015eee:	900c      	str	r0, [sp, #48]	; 0x30
 8015ef0:	3301      	adds	r3, #1
 8015ef2:	d100      	bne.n	8015ef6 <_svfprintf_r+0x626>
 8015ef4:	e131      	b.n	801615a <_svfprintf_r+0x88a>
 8015ef6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015ef8:	2b47      	cmp	r3, #71	; 0x47
 8015efa:	d119      	bne.n	8015f30 <_svfprintf_r+0x660>
 8015efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d116      	bne.n	8015f30 <_svfprintf_r+0x660>
 8015f02:	930c      	str	r3, [sp, #48]	; 0x30
 8015f04:	3301      	adds	r3, #1
 8015f06:	9309      	str	r3, [sp, #36]	; 0x24
 8015f08:	e012      	b.n	8015f30 <_svfprintf_r+0x660>
 8015f0a:	46c0      	nop			; (mov r8, r8)
 8015f0c:	0801d81c 	.word	0x0801d81c
 8015f10:	0801d82c 	.word	0x0801d82c
 8015f14:	7fefffff 	.word	0x7fefffff
 8015f18:	0801d7e8 	.word	0x0801d7e8
 8015f1c:	0801d7ec 	.word	0x0801d7ec
 8015f20:	0801d7f0 	.word	0x0801d7f0
 8015f24:	0801d7f4 	.word	0x0801d7f4
 8015f28:	2300      	movs	r3, #0
 8015f2a:	930c      	str	r3, [sp, #48]	; 0x30
 8015f2c:	ab3f      	add	r3, sp, #252	; 0xfc
 8015f2e:	9308      	str	r3, [sp, #32]
 8015f30:	2380      	movs	r3, #128	; 0x80
 8015f32:	005b      	lsls	r3, r3, #1
 8015f34:	4333      	orrs	r3, r6
 8015f36:	9320      	str	r3, [sp, #128]	; 0x80
 8015f38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015f3a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8015f3c:	2b00      	cmp	r3, #0
 8015f3e:	db00      	blt.n	8015f42 <_svfprintf_r+0x672>
 8015f40:	e10d      	b.n	801615e <_svfprintf_r+0x88e>
 8015f42:	2280      	movs	r2, #128	; 0x80
 8015f44:	0612      	lsls	r2, r2, #24
 8015f46:	4694      	mov	ip, r2
 8015f48:	4463      	add	r3, ip
 8015f4a:	930d      	str	r3, [sp, #52]	; 0x34
 8015f4c:	232d      	movs	r3, #45	; 0x2d
 8015f4e:	9322      	str	r3, [sp, #136]	; 0x88
 8015f50:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015f52:	2b41      	cmp	r3, #65	; 0x41
 8015f54:	d000      	beq.n	8015f58 <_svfprintf_r+0x688>
 8015f56:	e11b      	b.n	8016190 <_svfprintf_r+0x8c0>
 8015f58:	0020      	movs	r0, r4
 8015f5a:	aa26      	add	r2, sp, #152	; 0x98
 8015f5c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8015f5e:	f002 ff19 	bl	8018d94 <frexp>
 8015f62:	23ff      	movs	r3, #255	; 0xff
 8015f64:	2200      	movs	r2, #0
 8015f66:	059b      	lsls	r3, r3, #22
 8015f68:	f7ec f8fc 	bl	8002164 <__aeabi_dmul>
 8015f6c:	2200      	movs	r2, #0
 8015f6e:	2300      	movs	r3, #0
 8015f70:	0004      	movs	r4, r0
 8015f72:	000d      	movs	r5, r1
 8015f74:	f7ea fa72 	bl	800045c <__aeabi_dcmpeq>
 8015f78:	2800      	cmp	r0, #0
 8015f7a:	d001      	beq.n	8015f80 <_svfprintf_r+0x6b0>
 8015f7c:	2301      	movs	r3, #1
 8015f7e:	9326      	str	r3, [sp, #152]	; 0x98
 8015f80:	4bc6      	ldr	r3, [pc, #792]	; (801629c <_svfprintf_r+0x9cc>)
 8015f82:	9319      	str	r3, [sp, #100]	; 0x64
 8015f84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015f86:	2b61      	cmp	r3, #97	; 0x61
 8015f88:	d001      	beq.n	8015f8e <_svfprintf_r+0x6be>
 8015f8a:	4bc5      	ldr	r3, [pc, #788]	; (80162a0 <_svfprintf_r+0x9d0>)
 8015f8c:	9319      	str	r3, [sp, #100]	; 0x64
 8015f8e:	9b08      	ldr	r3, [sp, #32]
 8015f90:	930d      	str	r3, [sp, #52]	; 0x34
 8015f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015f94:	3b01      	subs	r3, #1
 8015f96:	9311      	str	r3, [sp, #68]	; 0x44
 8015f98:	2200      	movs	r2, #0
 8015f9a:	4bc2      	ldr	r3, [pc, #776]	; (80162a4 <_svfprintf_r+0x9d4>)
 8015f9c:	0020      	movs	r0, r4
 8015f9e:	0029      	movs	r1, r5
 8015fa0:	f7ec f8e0 	bl	8002164 <__aeabi_dmul>
 8015fa4:	000d      	movs	r5, r1
 8015fa6:	0004      	movs	r4, r0
 8015fa8:	f7ec fef8 	bl	8002d9c <__aeabi_d2iz>
 8015fac:	9021      	str	r0, [sp, #132]	; 0x84
 8015fae:	f7ec ff2b 	bl	8002e08 <__aeabi_i2d>
 8015fb2:	0002      	movs	r2, r0
 8015fb4:	000b      	movs	r3, r1
 8015fb6:	0020      	movs	r0, r4
 8015fb8:	0029      	movs	r1, r5
 8015fba:	f7ec fb3f 	bl	800263c <__aeabi_dsub>
 8015fbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015fc0:	000d      	movs	r5, r1
 8015fc2:	001a      	movs	r2, r3
 8015fc4:	3201      	adds	r2, #1
 8015fc6:	9921      	ldr	r1, [sp, #132]	; 0x84
 8015fc8:	920d      	str	r2, [sp, #52]	; 0x34
 8015fca:	9223      	str	r2, [sp, #140]	; 0x8c
 8015fcc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015fce:	0004      	movs	r4, r0
 8015fd0:	5c52      	ldrb	r2, [r2, r1]
 8015fd2:	701a      	strb	r2, [r3, #0]
 8015fd4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015fd6:	931a      	str	r3, [sp, #104]	; 0x68
 8015fd8:	3301      	adds	r3, #1
 8015fda:	d00a      	beq.n	8015ff2 <_svfprintf_r+0x722>
 8015fdc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015fde:	2200      	movs	r2, #0
 8015fe0:	3b01      	subs	r3, #1
 8015fe2:	9311      	str	r3, [sp, #68]	; 0x44
 8015fe4:	0020      	movs	r0, r4
 8015fe6:	2300      	movs	r3, #0
 8015fe8:	0029      	movs	r1, r5
 8015fea:	f7ea fa37 	bl	800045c <__aeabi_dcmpeq>
 8015fee:	2800      	cmp	r0, #0
 8015ff0:	d0d2      	beq.n	8015f98 <_svfprintf_r+0x6c8>
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	0020      	movs	r0, r4
 8015ff6:	0029      	movs	r1, r5
 8015ff8:	4bab      	ldr	r3, [pc, #684]	; (80162a8 <_svfprintf_r+0x9d8>)
 8015ffa:	f7ea fa49 	bl	8000490 <__aeabi_dcmpgt>
 8015ffe:	2800      	cmp	r0, #0
 8016000:	d10c      	bne.n	801601c <_svfprintf_r+0x74c>
 8016002:	2200      	movs	r2, #0
 8016004:	0020      	movs	r0, r4
 8016006:	0029      	movs	r1, r5
 8016008:	4ba7      	ldr	r3, [pc, #668]	; (80162a8 <_svfprintf_r+0x9d8>)
 801600a:	f7ea fa27 	bl	800045c <__aeabi_dcmpeq>
 801600e:	2800      	cmp	r0, #0
 8016010:	d100      	bne.n	8016014 <_svfprintf_r+0x744>
 8016012:	e0b7      	b.n	8016184 <_svfprintf_r+0x8b4>
 8016014:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016016:	07db      	lsls	r3, r3, #31
 8016018:	d400      	bmi.n	801601c <_svfprintf_r+0x74c>
 801601a:	e0b3      	b.n	8016184 <_svfprintf_r+0x8b4>
 801601c:	2030      	movs	r0, #48	; 0x30
 801601e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016020:	932a      	str	r3, [sp, #168]	; 0xa8
 8016022:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016024:	7bdb      	ldrb	r3, [r3, #15]
 8016026:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8016028:	3a01      	subs	r2, #1
 801602a:	922a      	str	r2, [sp, #168]	; 0xa8
 801602c:	7811      	ldrb	r1, [r2, #0]
 801602e:	4299      	cmp	r1, r3
 8016030:	d100      	bne.n	8016034 <_svfprintf_r+0x764>
 8016032:	e097      	b.n	8016164 <_svfprintf_r+0x894>
 8016034:	1c4b      	adds	r3, r1, #1
 8016036:	b2db      	uxtb	r3, r3
 8016038:	2939      	cmp	r1, #57	; 0x39
 801603a:	d101      	bne.n	8016040 <_svfprintf_r+0x770>
 801603c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801603e:	7a9b      	ldrb	r3, [r3, #10]
 8016040:	7013      	strb	r3, [r2, #0]
 8016042:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8016044:	9a08      	ldr	r2, [sp, #32]
 8016046:	9d26      	ldr	r5, [sp, #152]	; 0x98
 8016048:	1a9b      	subs	r3, r3, r2
 801604a:	930d      	str	r3, [sp, #52]	; 0x34
 801604c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801604e:	2b47      	cmp	r3, #71	; 0x47
 8016050:	d000      	beq.n	8016054 <_svfprintf_r+0x784>
 8016052:	e0eb      	b.n	801622c <_svfprintf_r+0x95c>
 8016054:	1ceb      	adds	r3, r5, #3
 8016056:	db03      	blt.n	8016060 <_svfprintf_r+0x790>
 8016058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801605a:	42ab      	cmp	r3, r5
 801605c:	db00      	blt.n	8016060 <_svfprintf_r+0x790>
 801605e:	e113      	b.n	8016288 <_svfprintf_r+0x9b8>
 8016060:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016062:	3b02      	subs	r3, #2
 8016064:	930f      	str	r3, [sp, #60]	; 0x3c
 8016066:	223c      	movs	r2, #60	; 0x3c
 8016068:	466b      	mov	r3, sp
 801606a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801606c:	189b      	adds	r3, r3, r2
 801606e:	1e6c      	subs	r4, r5, #1
 8016070:	3a1c      	subs	r2, #28
 8016072:	2000      	movs	r0, #0
 8016074:	781b      	ldrb	r3, [r3, #0]
 8016076:	9426      	str	r4, [sp, #152]	; 0x98
 8016078:	4391      	bics	r1, r2
 801607a:	2941      	cmp	r1, #65	; 0x41
 801607c:	d102      	bne.n	8016084 <_svfprintf_r+0x7b4>
 801607e:	330f      	adds	r3, #15
 8016080:	b2db      	uxtb	r3, r3
 8016082:	3001      	adds	r0, #1
 8016084:	a928      	add	r1, sp, #160	; 0xa0
 8016086:	700b      	strb	r3, [r1, #0]
 8016088:	232b      	movs	r3, #43	; 0x2b
 801608a:	2c00      	cmp	r4, #0
 801608c:	da02      	bge.n	8016094 <_svfprintf_r+0x7c4>
 801608e:	2401      	movs	r4, #1
 8016090:	3302      	adds	r3, #2
 8016092:	1b64      	subs	r4, r4, r5
 8016094:	704b      	strb	r3, [r1, #1]
 8016096:	2c09      	cmp	r4, #9
 8016098:	dc00      	bgt.n	801609c <_svfprintf_r+0x7cc>
 801609a:	e0e1      	b.n	8016260 <_svfprintf_r+0x990>
 801609c:	2337      	movs	r3, #55	; 0x37
 801609e:	250a      	movs	r5, #10
 80160a0:	aa1e      	add	r2, sp, #120	; 0x78
 80160a2:	189b      	adds	r3, r3, r2
 80160a4:	9310      	str	r3, [sp, #64]	; 0x40
 80160a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80160a8:	0020      	movs	r0, r4
 80160aa:	9309      	str	r3, [sp, #36]	; 0x24
 80160ac:	0029      	movs	r1, r5
 80160ae:	3b01      	subs	r3, #1
 80160b0:	9310      	str	r3, [sp, #64]	; 0x40
 80160b2:	f7ea f9bd 	bl	8000430 <__aeabi_idivmod>
 80160b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80160b8:	3130      	adds	r1, #48	; 0x30
 80160ba:	7019      	strb	r1, [r3, #0]
 80160bc:	0020      	movs	r0, r4
 80160be:	0029      	movs	r1, r5
 80160c0:	9411      	str	r4, [sp, #68]	; 0x44
 80160c2:	f7ea f8cf 	bl	8000264 <__divsi3>
 80160c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80160c8:	0004      	movs	r4, r0
 80160ca:	2b63      	cmp	r3, #99	; 0x63
 80160cc:	dceb      	bgt.n	80160a6 <_svfprintf_r+0x7d6>
 80160ce:	222a      	movs	r2, #42	; 0x2a
 80160d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80160d2:	a81e      	add	r0, sp, #120	; 0x78
 80160d4:	1e99      	subs	r1, r3, #2
 80160d6:	1812      	adds	r2, r2, r0
 80160d8:	2037      	movs	r0, #55	; 0x37
 80160da:	000b      	movs	r3, r1
 80160dc:	3430      	adds	r4, #48	; 0x30
 80160de:	700c      	strb	r4, [r1, #0]
 80160e0:	ac1e      	add	r4, sp, #120	; 0x78
 80160e2:	1900      	adds	r0, r0, r4
 80160e4:	4283      	cmp	r3, r0
 80160e6:	d200      	bcs.n	80160ea <_svfprintf_r+0x81a>
 80160e8:	e0b5      	b.n	8016256 <_svfprintf_r+0x986>
 80160ea:	2300      	movs	r3, #0
 80160ec:	4281      	cmp	r1, r0
 80160ee:	d804      	bhi.n	80160fa <_svfprintf_r+0x82a>
 80160f0:	aa1e      	add	r2, sp, #120	; 0x78
 80160f2:	3339      	adds	r3, #57	; 0x39
 80160f4:	189b      	adds	r3, r3, r2
 80160f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80160f8:	1a9b      	subs	r3, r3, r2
 80160fa:	222a      	movs	r2, #42	; 0x2a
 80160fc:	a91e      	add	r1, sp, #120	; 0x78
 80160fe:	1852      	adds	r2, r2, r1
 8016100:	18d3      	adds	r3, r2, r3
 8016102:	aa28      	add	r2, sp, #160	; 0xa0
 8016104:	1a9b      	subs	r3, r3, r2
 8016106:	931e      	str	r3, [sp, #120]	; 0x78
 8016108:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801610a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801610c:	4694      	mov	ip, r2
 801610e:	4463      	add	r3, ip
 8016110:	9309      	str	r3, [sp, #36]	; 0x24
 8016112:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016114:	2b01      	cmp	r3, #1
 8016116:	dc01      	bgt.n	801611c <_svfprintf_r+0x84c>
 8016118:	07f3      	lsls	r3, r6, #31
 801611a:	d504      	bpl.n	8016126 <_svfprintf_r+0x856>
 801611c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801611e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016120:	4694      	mov	ip, r2
 8016122:	4463      	add	r3, ip
 8016124:	9309      	str	r3, [sp, #36]	; 0x24
 8016126:	2280      	movs	r2, #128	; 0x80
 8016128:	4b60      	ldr	r3, [pc, #384]	; (80162ac <_svfprintf_r+0x9dc>)
 801612a:	0052      	lsls	r2, r2, #1
 801612c:	4033      	ands	r3, r6
 801612e:	431a      	orrs	r2, r3
 8016130:	2300      	movs	r3, #0
 8016132:	001d      	movs	r5, r3
 8016134:	9220      	str	r2, [sp, #128]	; 0x80
 8016136:	9310      	str	r3, [sp, #64]	; 0x40
 8016138:	9311      	str	r3, [sp, #68]	; 0x44
 801613a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801613c:	2b00      	cmp	r3, #0
 801613e:	d100      	bne.n	8016142 <_svfprintf_r+0x872>
 8016140:	e27b      	b.n	801663a <_svfprintf_r+0xd6a>
 8016142:	231b      	movs	r3, #27
 8016144:	aa1e      	add	r2, sp, #120	; 0x78
 8016146:	189b      	adds	r3, r3, r2
 8016148:	222d      	movs	r2, #45	; 0x2d
 801614a:	701a      	strb	r2, [r3, #0]
 801614c:	2300      	movs	r3, #0
 801614e:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8016150:	9319      	str	r3, [sp, #100]	; 0x64
 8016152:	e52b      	b.n	8015bac <_svfprintf_r+0x2dc>
 8016154:	9b08      	ldr	r3, [sp, #32]
 8016156:	930c      	str	r3, [sp, #48]	; 0x30
 8016158:	e6ea      	b.n	8015f30 <_svfprintf_r+0x660>
 801615a:	2306      	movs	r3, #6
 801615c:	e6d3      	b.n	8015f06 <_svfprintf_r+0x636>
 801615e:	930d      	str	r3, [sp, #52]	; 0x34
 8016160:	2300      	movs	r3, #0
 8016162:	e6f4      	b.n	8015f4e <_svfprintf_r+0x67e>
 8016164:	7010      	strb	r0, [r2, #0]
 8016166:	e75e      	b.n	8016026 <_svfprintf_r+0x756>
 8016168:	7018      	strb	r0, [r3, #0]
 801616a:	3301      	adds	r3, #1
 801616c:	1aca      	subs	r2, r1, r3
 801616e:	d5fb      	bpl.n	8016168 <_svfprintf_r+0x898>
 8016170:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016172:	2300      	movs	r3, #0
 8016174:	3201      	adds	r2, #1
 8016176:	db01      	blt.n	801617c <_svfprintf_r+0x8ac>
 8016178:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801617a:	3301      	adds	r3, #1
 801617c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801617e:	18d3      	adds	r3, r2, r3
 8016180:	9323      	str	r3, [sp, #140]	; 0x8c
 8016182:	e75e      	b.n	8016042 <_svfprintf_r+0x772>
 8016184:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016186:	990d      	ldr	r1, [sp, #52]	; 0x34
 8016188:	2030      	movs	r0, #48	; 0x30
 801618a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801618c:	1851      	adds	r1, r2, r1
 801618e:	e7ed      	b.n	801616c <_svfprintf_r+0x89c>
 8016190:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016192:	2b46      	cmp	r3, #70	; 0x46
 8016194:	d006      	beq.n	80161a4 <_svfprintf_r+0x8d4>
 8016196:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8016198:	2b45      	cmp	r3, #69	; 0x45
 801619a:	d101      	bne.n	80161a0 <_svfprintf_r+0x8d0>
 801619c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801619e:	1c5d      	adds	r5, r3, #1
 80161a0:	2302      	movs	r3, #2
 80161a2:	e001      	b.n	80161a8 <_svfprintf_r+0x8d8>
 80161a4:	2303      	movs	r3, #3
 80161a6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80161a8:	aa2a      	add	r2, sp, #168	; 0xa8
 80161aa:	9204      	str	r2, [sp, #16]
 80161ac:	aa27      	add	r2, sp, #156	; 0x9c
 80161ae:	9203      	str	r2, [sp, #12]
 80161b0:	aa26      	add	r2, sp, #152	; 0x98
 80161b2:	9202      	str	r2, [sp, #8]
 80161b4:	9300      	str	r3, [sp, #0]
 80161b6:	0022      	movs	r2, r4
 80161b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80161ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80161bc:	9501      	str	r5, [sp, #4]
 80161be:	f000 feb7 	bl	8016f30 <_dtoa_r>
 80161c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80161c4:	9008      	str	r0, [sp, #32]
 80161c6:	2b47      	cmp	r3, #71	; 0x47
 80161c8:	d103      	bne.n	80161d2 <_svfprintf_r+0x902>
 80161ca:	07f3      	lsls	r3, r6, #31
 80161cc:	d401      	bmi.n	80161d2 <_svfprintf_r+0x902>
 80161ce:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80161d0:	e738      	b.n	8016044 <_svfprintf_r+0x774>
 80161d2:	9b08      	ldr	r3, [sp, #32]
 80161d4:	195b      	adds	r3, r3, r5
 80161d6:	9311      	str	r3, [sp, #68]	; 0x44
 80161d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80161da:	2b46      	cmp	r3, #70	; 0x46
 80161dc:	d113      	bne.n	8016206 <_svfprintf_r+0x936>
 80161de:	9b08      	ldr	r3, [sp, #32]
 80161e0:	781b      	ldrb	r3, [r3, #0]
 80161e2:	2b30      	cmp	r3, #48	; 0x30
 80161e4:	d10a      	bne.n	80161fc <_svfprintf_r+0x92c>
 80161e6:	2200      	movs	r2, #0
 80161e8:	2300      	movs	r3, #0
 80161ea:	0020      	movs	r0, r4
 80161ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 80161ee:	f7ea f935 	bl	800045c <__aeabi_dcmpeq>
 80161f2:	2800      	cmp	r0, #0
 80161f4:	d102      	bne.n	80161fc <_svfprintf_r+0x92c>
 80161f6:	2301      	movs	r3, #1
 80161f8:	1b5d      	subs	r5, r3, r5
 80161fa:	9526      	str	r5, [sp, #152]	; 0x98
 80161fc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80161fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016200:	4694      	mov	ip, r2
 8016202:	4463      	add	r3, ip
 8016204:	9311      	str	r3, [sp, #68]	; 0x44
 8016206:	2200      	movs	r2, #0
 8016208:	2300      	movs	r3, #0
 801620a:	0020      	movs	r0, r4
 801620c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801620e:	f7ea f925 	bl	800045c <__aeabi_dcmpeq>
 8016212:	2800      	cmp	r0, #0
 8016214:	d001      	beq.n	801621a <_svfprintf_r+0x94a>
 8016216:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016218:	932a      	str	r3, [sp, #168]	; 0xa8
 801621a:	2230      	movs	r2, #48	; 0x30
 801621c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801621e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016220:	4299      	cmp	r1, r3
 8016222:	d9d4      	bls.n	80161ce <_svfprintf_r+0x8fe>
 8016224:	1c59      	adds	r1, r3, #1
 8016226:	912a      	str	r1, [sp, #168]	; 0xa8
 8016228:	701a      	strb	r2, [r3, #0]
 801622a:	e7f7      	b.n	801621c <_svfprintf_r+0x94c>
 801622c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801622e:	2b46      	cmp	r3, #70	; 0x46
 8016230:	d000      	beq.n	8016234 <_svfprintf_r+0x964>
 8016232:	e718      	b.n	8016066 <_svfprintf_r+0x796>
 8016234:	2201      	movs	r2, #1
 8016236:	0033      	movs	r3, r6
 8016238:	9909      	ldr	r1, [sp, #36]	; 0x24
 801623a:	4013      	ands	r3, r2
 801623c:	430b      	orrs	r3, r1
 801623e:	2d00      	cmp	r5, #0
 8016240:	dd1c      	ble.n	801627c <_svfprintf_r+0x9ac>
 8016242:	2b00      	cmp	r3, #0
 8016244:	d04f      	beq.n	80162e6 <_svfprintf_r+0xa16>
 8016246:	000a      	movs	r2, r1
 8016248:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801624a:	18eb      	adds	r3, r5, r3
 801624c:	18d3      	adds	r3, r2, r3
 801624e:	9309      	str	r3, [sp, #36]	; 0x24
 8016250:	2366      	movs	r3, #102	; 0x66
 8016252:	930f      	str	r3, [sp, #60]	; 0x3c
 8016254:	e039      	b.n	80162ca <_svfprintf_r+0x9fa>
 8016256:	781c      	ldrb	r4, [r3, #0]
 8016258:	3301      	adds	r3, #1
 801625a:	7014      	strb	r4, [r2, #0]
 801625c:	3201      	adds	r2, #1
 801625e:	e741      	b.n	80160e4 <_svfprintf_r+0x814>
 8016260:	222a      	movs	r2, #42	; 0x2a
 8016262:	ab1e      	add	r3, sp, #120	; 0x78
 8016264:	18d2      	adds	r2, r2, r3
 8016266:	2800      	cmp	r0, #0
 8016268:	d104      	bne.n	8016274 <_svfprintf_r+0x9a4>
 801626a:	2330      	movs	r3, #48	; 0x30
 801626c:	222b      	movs	r2, #43	; 0x2b
 801626e:	708b      	strb	r3, [r1, #2]
 8016270:	ab1e      	add	r3, sp, #120	; 0x78
 8016272:	18d2      	adds	r2, r2, r3
 8016274:	3430      	adds	r4, #48	; 0x30
 8016276:	1c53      	adds	r3, r2, #1
 8016278:	7014      	strb	r4, [r2, #0]
 801627a:	e742      	b.n	8016102 <_svfprintf_r+0x832>
 801627c:	2b00      	cmp	r3, #0
 801627e:	d034      	beq.n	80162ea <_svfprintf_r+0xa1a>
 8016280:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016282:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016284:	3301      	adds	r3, #1
 8016286:	e7e1      	b.n	801624c <_svfprintf_r+0x97c>
 8016288:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801628a:	429d      	cmp	r5, r3
 801628c:	db10      	blt.n	80162b0 <_svfprintf_r+0x9e0>
 801628e:	07f3      	lsls	r3, r6, #31
 8016290:	d52f      	bpl.n	80162f2 <_svfprintf_r+0xa22>
 8016292:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016294:	18eb      	adds	r3, r5, r3
 8016296:	9309      	str	r3, [sp, #36]	; 0x24
 8016298:	2367      	movs	r3, #103	; 0x67
 801629a:	e7da      	b.n	8016252 <_svfprintf_r+0x982>
 801629c:	0801d7f8 	.word	0x0801d7f8
 80162a0:	0801d809 	.word	0x0801d809
 80162a4:	40300000 	.word	0x40300000
 80162a8:	3fe00000 	.word	0x3fe00000
 80162ac:	fffffbff 	.word	0xfffffbff
 80162b0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80162b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80162b4:	4694      	mov	ip, r2
 80162b6:	4463      	add	r3, ip
 80162b8:	9309      	str	r3, [sp, #36]	; 0x24
 80162ba:	2367      	movs	r3, #103	; 0x67
 80162bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80162be:	2d00      	cmp	r5, #0
 80162c0:	dc03      	bgt.n	80162ca <_svfprintf_r+0x9fa>
 80162c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162c4:	1b58      	subs	r0, r3, r5
 80162c6:	1c43      	adds	r3, r0, #1
 80162c8:	9309      	str	r3, [sp, #36]	; 0x24
 80162ca:	2380      	movs	r3, #128	; 0x80
 80162cc:	0032      	movs	r2, r6
 80162ce:	00db      	lsls	r3, r3, #3
 80162d0:	401a      	ands	r2, r3
 80162d2:	9211      	str	r2, [sp, #68]	; 0x44
 80162d4:	2200      	movs	r2, #0
 80162d6:	9210      	str	r2, [sp, #64]	; 0x40
 80162d8:	421e      	tst	r6, r3
 80162da:	d100      	bne.n	80162de <_svfprintf_r+0xa0e>
 80162dc:	e72d      	b.n	801613a <_svfprintf_r+0x86a>
 80162de:	4295      	cmp	r5, r2
 80162e0:	dc27      	bgt.n	8016332 <_svfprintf_r+0xa62>
 80162e2:	9211      	str	r2, [sp, #68]	; 0x44
 80162e4:	e729      	b.n	801613a <_svfprintf_r+0x86a>
 80162e6:	9509      	str	r5, [sp, #36]	; 0x24
 80162e8:	e7b2      	b.n	8016250 <_svfprintf_r+0x980>
 80162ea:	2366      	movs	r3, #102	; 0x66
 80162ec:	9209      	str	r2, [sp, #36]	; 0x24
 80162ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80162f0:	e7eb      	b.n	80162ca <_svfprintf_r+0x9fa>
 80162f2:	9509      	str	r5, [sp, #36]	; 0x24
 80162f4:	e7d0      	b.n	8016298 <_svfprintf_r+0x9c8>
 80162f6:	42ab      	cmp	r3, r5
 80162f8:	da0e      	bge.n	8016318 <_svfprintf_r+0xa48>
 80162fa:	1aed      	subs	r5, r5, r3
 80162fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80162fe:	785b      	ldrb	r3, [r3, #1]
 8016300:	2b00      	cmp	r3, #0
 8016302:	d012      	beq.n	801632a <_svfprintf_r+0xa5a>
 8016304:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016306:	3301      	adds	r3, #1
 8016308:	9311      	str	r3, [sp, #68]	; 0x44
 801630a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801630c:	3301      	adds	r3, #1
 801630e:	9312      	str	r3, [sp, #72]	; 0x48
 8016310:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016312:	781b      	ldrb	r3, [r3, #0]
 8016314:	2bff      	cmp	r3, #255	; 0xff
 8016316:	d1ee      	bne.n	80162f6 <_svfprintf_r+0xa26>
 8016318:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801631a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801631c:	189b      	adds	r3, r3, r2
 801631e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016320:	4353      	muls	r3, r2
 8016322:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016324:	189b      	adds	r3, r3, r2
 8016326:	9309      	str	r3, [sp, #36]	; 0x24
 8016328:	e707      	b.n	801613a <_svfprintf_r+0x86a>
 801632a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801632c:	3301      	adds	r3, #1
 801632e:	9310      	str	r3, [sp, #64]	; 0x40
 8016330:	e7ee      	b.n	8016310 <_svfprintf_r+0xa40>
 8016332:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016334:	9311      	str	r3, [sp, #68]	; 0x44
 8016336:	e7eb      	b.n	8016310 <_svfprintf_r+0xa40>
 8016338:	0022      	movs	r2, r4
 801633a:	ca08      	ldmia	r2!, {r3}
 801633c:	920e      	str	r2, [sp, #56]	; 0x38
 801633e:	06b2      	lsls	r2, r6, #26
 8016340:	d508      	bpl.n	8016354 <_svfprintf_r+0xa84>
 8016342:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016344:	601a      	str	r2, [r3, #0]
 8016346:	17d2      	asrs	r2, r2, #31
 8016348:	605a      	str	r2, [r3, #4]
 801634a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801634c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801634e:	9308      	str	r3, [sp, #32]
 8016350:	f7ff fafa 	bl	8015948 <_svfprintf_r+0x78>
 8016354:	06f2      	lsls	r2, r6, #27
 8016356:	d502      	bpl.n	801635e <_svfprintf_r+0xa8e>
 8016358:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801635a:	601a      	str	r2, [r3, #0]
 801635c:	e7f5      	b.n	801634a <_svfprintf_r+0xa7a>
 801635e:	0672      	lsls	r2, r6, #25
 8016360:	d502      	bpl.n	8016368 <_svfprintf_r+0xa98>
 8016362:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016364:	801a      	strh	r2, [r3, #0]
 8016366:	e7f0      	b.n	801634a <_svfprintf_r+0xa7a>
 8016368:	05b2      	lsls	r2, r6, #22
 801636a:	d5f5      	bpl.n	8016358 <_svfprintf_r+0xa88>
 801636c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801636e:	701a      	strb	r2, [r3, #0]
 8016370:	e7eb      	b.n	801634a <_svfprintf_r+0xa7a>
 8016372:	2310      	movs	r3, #16
 8016374:	431e      	orrs	r6, r3
 8016376:	2320      	movs	r3, #32
 8016378:	0031      	movs	r1, r6
 801637a:	4019      	ands	r1, r3
 801637c:	421e      	tst	r6, r3
 801637e:	d00f      	beq.n	80163a0 <_svfprintf_r+0xad0>
 8016380:	3b19      	subs	r3, #25
 8016382:	3407      	adds	r4, #7
 8016384:	439c      	bics	r4, r3
 8016386:	0022      	movs	r2, r4
 8016388:	ca18      	ldmia	r2!, {r3, r4}
 801638a:	9306      	str	r3, [sp, #24]
 801638c:	9407      	str	r4, [sp, #28]
 801638e:	920e      	str	r2, [sp, #56]	; 0x38
 8016390:	4bca      	ldr	r3, [pc, #808]	; (80166bc <_svfprintf_r+0xdec>)
 8016392:	401e      	ands	r6, r3
 8016394:	2300      	movs	r3, #0
 8016396:	221b      	movs	r2, #27
 8016398:	a91e      	add	r1, sp, #120	; 0x78
 801639a:	1852      	adds	r2, r2, r1
 801639c:	2100      	movs	r1, #0
 801639e:	e4fc      	b.n	8015d9a <_svfprintf_r+0x4ca>
 80163a0:	1d23      	adds	r3, r4, #4
 80163a2:	0032      	movs	r2, r6
 80163a4:	930e      	str	r3, [sp, #56]	; 0x38
 80163a6:	2310      	movs	r3, #16
 80163a8:	401a      	ands	r2, r3
 80163aa:	421e      	tst	r6, r3
 80163ac:	d003      	beq.n	80163b6 <_svfprintf_r+0xae6>
 80163ae:	6823      	ldr	r3, [r4, #0]
 80163b0:	9306      	str	r3, [sp, #24]
 80163b2:	9107      	str	r1, [sp, #28]
 80163b4:	e7ec      	b.n	8016390 <_svfprintf_r+0xac0>
 80163b6:	2340      	movs	r3, #64	; 0x40
 80163b8:	0031      	movs	r1, r6
 80163ba:	4019      	ands	r1, r3
 80163bc:	421e      	tst	r6, r3
 80163be:	d004      	beq.n	80163ca <_svfprintf_r+0xafa>
 80163c0:	6823      	ldr	r3, [r4, #0]
 80163c2:	b29b      	uxth	r3, r3
 80163c4:	9306      	str	r3, [sp, #24]
 80163c6:	9207      	str	r2, [sp, #28]
 80163c8:	e7e2      	b.n	8016390 <_svfprintf_r+0xac0>
 80163ca:	2380      	movs	r3, #128	; 0x80
 80163cc:	0032      	movs	r2, r6
 80163ce:	009b      	lsls	r3, r3, #2
 80163d0:	401a      	ands	r2, r3
 80163d2:	421e      	tst	r6, r3
 80163d4:	d002      	beq.n	80163dc <_svfprintf_r+0xb0c>
 80163d6:	6823      	ldr	r3, [r4, #0]
 80163d8:	b2db      	uxtb	r3, r3
 80163da:	e7e9      	b.n	80163b0 <_svfprintf_r+0xae0>
 80163dc:	6823      	ldr	r3, [r4, #0]
 80163de:	e7f1      	b.n	80163c4 <_svfprintf_r+0xaf4>
 80163e0:	0023      	movs	r3, r4
 80163e2:	cb04      	ldmia	r3!, {r2}
 80163e4:	49b6      	ldr	r1, [pc, #728]	; (80166c0 <_svfprintf_r+0xdf0>)
 80163e6:	9206      	str	r2, [sp, #24]
 80163e8:	aa25      	add	r2, sp, #148	; 0x94
 80163ea:	8011      	strh	r1, [r2, #0]
 80163ec:	4ab5      	ldr	r2, [pc, #724]	; (80166c4 <_svfprintf_r+0xdf4>)
 80163ee:	930e      	str	r3, [sp, #56]	; 0x38
 80163f0:	2300      	movs	r3, #0
 80163f2:	921f      	str	r2, [sp, #124]	; 0x7c
 80163f4:	2278      	movs	r2, #120	; 0x78
 80163f6:	9307      	str	r3, [sp, #28]
 80163f8:	3302      	adds	r3, #2
 80163fa:	431e      	orrs	r6, r3
 80163fc:	920f      	str	r2, [sp, #60]	; 0x3c
 80163fe:	e7ca      	b.n	8016396 <_svfprintf_r+0xac6>
 8016400:	0023      	movs	r3, r4
 8016402:	cb04      	ldmia	r3!, {r2}
 8016404:	2400      	movs	r4, #0
 8016406:	930e      	str	r3, [sp, #56]	; 0x38
 8016408:	231b      	movs	r3, #27
 801640a:	9208      	str	r2, [sp, #32]
 801640c:	aa1e      	add	r2, sp, #120	; 0x78
 801640e:	189b      	adds	r3, r3, r2
 8016410:	701c      	strb	r4, [r3, #0]
 8016412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016414:	3301      	adds	r3, #1
 8016416:	d00e      	beq.n	8016436 <_svfprintf_r+0xb66>
 8016418:	0021      	movs	r1, r4
 801641a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801641c:	9808      	ldr	r0, [sp, #32]
 801641e:	f002 f821 	bl	8018464 <memchr>
 8016422:	900c      	str	r0, [sp, #48]	; 0x30
 8016424:	42a0      	cmp	r0, r4
 8016426:	d100      	bne.n	801642a <_svfprintf_r+0xb5a>
 8016428:	e10a      	b.n	8016640 <_svfprintf_r+0xd70>
 801642a:	9a08      	ldr	r2, [sp, #32]
 801642c:	1a83      	subs	r3, r0, r2
 801642e:	9309      	str	r3, [sp, #36]	; 0x24
 8016430:	0023      	movs	r3, r4
 8016432:	940c      	str	r4, [sp, #48]	; 0x30
 8016434:	e516      	b.n	8015e64 <_svfprintf_r+0x594>
 8016436:	9808      	ldr	r0, [sp, #32]
 8016438:	f7e9 fe6e 	bl	8000118 <strlen>
 801643c:	9009      	str	r0, [sp, #36]	; 0x24
 801643e:	e7f7      	b.n	8016430 <_svfprintf_r+0xb60>
 8016440:	2310      	movs	r3, #16
 8016442:	431e      	orrs	r6, r3
 8016444:	2320      	movs	r3, #32
 8016446:	0031      	movs	r1, r6
 8016448:	4019      	ands	r1, r3
 801644a:	421e      	tst	r6, r3
 801644c:	d009      	beq.n	8016462 <_svfprintf_r+0xb92>
 801644e:	3b19      	subs	r3, #25
 8016450:	3407      	adds	r4, #7
 8016452:	439c      	bics	r4, r3
 8016454:	0022      	movs	r2, r4
 8016456:	ca18      	ldmia	r2!, {r3, r4}
 8016458:	9306      	str	r3, [sp, #24]
 801645a:	9407      	str	r4, [sp, #28]
 801645c:	920e      	str	r2, [sp, #56]	; 0x38
 801645e:	2301      	movs	r3, #1
 8016460:	e799      	b.n	8016396 <_svfprintf_r+0xac6>
 8016462:	1d23      	adds	r3, r4, #4
 8016464:	0032      	movs	r2, r6
 8016466:	930e      	str	r3, [sp, #56]	; 0x38
 8016468:	2310      	movs	r3, #16
 801646a:	401a      	ands	r2, r3
 801646c:	421e      	tst	r6, r3
 801646e:	d003      	beq.n	8016478 <_svfprintf_r+0xba8>
 8016470:	6823      	ldr	r3, [r4, #0]
 8016472:	9306      	str	r3, [sp, #24]
 8016474:	9107      	str	r1, [sp, #28]
 8016476:	e7f2      	b.n	801645e <_svfprintf_r+0xb8e>
 8016478:	2340      	movs	r3, #64	; 0x40
 801647a:	0031      	movs	r1, r6
 801647c:	4019      	ands	r1, r3
 801647e:	421e      	tst	r6, r3
 8016480:	d004      	beq.n	801648c <_svfprintf_r+0xbbc>
 8016482:	6823      	ldr	r3, [r4, #0]
 8016484:	b29b      	uxth	r3, r3
 8016486:	9306      	str	r3, [sp, #24]
 8016488:	9207      	str	r2, [sp, #28]
 801648a:	e7e8      	b.n	801645e <_svfprintf_r+0xb8e>
 801648c:	2380      	movs	r3, #128	; 0x80
 801648e:	0032      	movs	r2, r6
 8016490:	009b      	lsls	r3, r3, #2
 8016492:	401a      	ands	r2, r3
 8016494:	421e      	tst	r6, r3
 8016496:	d002      	beq.n	801649e <_svfprintf_r+0xbce>
 8016498:	6823      	ldr	r3, [r4, #0]
 801649a:	b2db      	uxtb	r3, r3
 801649c:	e7e9      	b.n	8016472 <_svfprintf_r+0xba2>
 801649e:	6823      	ldr	r3, [r4, #0]
 80164a0:	e7f1      	b.n	8016486 <_svfprintf_r+0xbb6>
 80164a2:	4b89      	ldr	r3, [pc, #548]	; (80166c8 <_svfprintf_r+0xdf8>)
 80164a4:	0031      	movs	r1, r6
 80164a6:	931f      	str	r3, [sp, #124]	; 0x7c
 80164a8:	2320      	movs	r3, #32
 80164aa:	4019      	ands	r1, r3
 80164ac:	421e      	tst	r6, r3
 80164ae:	d01a      	beq.n	80164e6 <_svfprintf_r+0xc16>
 80164b0:	3b19      	subs	r3, #25
 80164b2:	3407      	adds	r4, #7
 80164b4:	439c      	bics	r4, r3
 80164b6:	0022      	movs	r2, r4
 80164b8:	ca18      	ldmia	r2!, {r3, r4}
 80164ba:	9306      	str	r3, [sp, #24]
 80164bc:	9407      	str	r4, [sp, #28]
 80164be:	920e      	str	r2, [sp, #56]	; 0x38
 80164c0:	07f3      	lsls	r3, r6, #31
 80164c2:	d50a      	bpl.n	80164da <_svfprintf_r+0xc0a>
 80164c4:	9b06      	ldr	r3, [sp, #24]
 80164c6:	9a07      	ldr	r2, [sp, #28]
 80164c8:	4313      	orrs	r3, r2
 80164ca:	d006      	beq.n	80164da <_svfprintf_r+0xc0a>
 80164cc:	2230      	movs	r2, #48	; 0x30
 80164ce:	ab25      	add	r3, sp, #148	; 0x94
 80164d0:	701a      	strb	r2, [r3, #0]
 80164d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80164d4:	705a      	strb	r2, [r3, #1]
 80164d6:	2302      	movs	r3, #2
 80164d8:	431e      	orrs	r6, r3
 80164da:	4b78      	ldr	r3, [pc, #480]	; (80166bc <_svfprintf_r+0xdec>)
 80164dc:	401e      	ands	r6, r3
 80164de:	2302      	movs	r3, #2
 80164e0:	e759      	b.n	8016396 <_svfprintf_r+0xac6>
 80164e2:	4b78      	ldr	r3, [pc, #480]	; (80166c4 <_svfprintf_r+0xdf4>)
 80164e4:	e7de      	b.n	80164a4 <_svfprintf_r+0xbd4>
 80164e6:	1d23      	adds	r3, r4, #4
 80164e8:	0032      	movs	r2, r6
 80164ea:	930e      	str	r3, [sp, #56]	; 0x38
 80164ec:	2310      	movs	r3, #16
 80164ee:	401a      	ands	r2, r3
 80164f0:	421e      	tst	r6, r3
 80164f2:	d003      	beq.n	80164fc <_svfprintf_r+0xc2c>
 80164f4:	6823      	ldr	r3, [r4, #0]
 80164f6:	9306      	str	r3, [sp, #24]
 80164f8:	9107      	str	r1, [sp, #28]
 80164fa:	e7e1      	b.n	80164c0 <_svfprintf_r+0xbf0>
 80164fc:	2340      	movs	r3, #64	; 0x40
 80164fe:	0031      	movs	r1, r6
 8016500:	4019      	ands	r1, r3
 8016502:	421e      	tst	r6, r3
 8016504:	d004      	beq.n	8016510 <_svfprintf_r+0xc40>
 8016506:	6823      	ldr	r3, [r4, #0]
 8016508:	b29b      	uxth	r3, r3
 801650a:	9306      	str	r3, [sp, #24]
 801650c:	9207      	str	r2, [sp, #28]
 801650e:	e7d7      	b.n	80164c0 <_svfprintf_r+0xbf0>
 8016510:	2380      	movs	r3, #128	; 0x80
 8016512:	0032      	movs	r2, r6
 8016514:	009b      	lsls	r3, r3, #2
 8016516:	401a      	ands	r2, r3
 8016518:	421e      	tst	r6, r3
 801651a:	d002      	beq.n	8016522 <_svfprintf_r+0xc52>
 801651c:	6823      	ldr	r3, [r4, #0]
 801651e:	b2db      	uxtb	r3, r3
 8016520:	e7e9      	b.n	80164f6 <_svfprintf_r+0xc26>
 8016522:	6823      	ldr	r3, [r4, #0]
 8016524:	e7f1      	b.n	801650a <_svfprintf_r+0xc3a>
 8016526:	9b07      	ldr	r3, [sp, #28]
 8016528:	2b00      	cmp	r3, #0
 801652a:	d10b      	bne.n	8016544 <_svfprintf_r+0xc74>
 801652c:	9b06      	ldr	r3, [sp, #24]
 801652e:	2b09      	cmp	r3, #9
 8016530:	d808      	bhi.n	8016544 <_svfprintf_r+0xc74>
 8016532:	20e7      	movs	r0, #231	; 0xe7
 8016534:	ab1e      	add	r3, sp, #120	; 0x78
 8016536:	18c0      	adds	r0, r0, r3
 8016538:	9b06      	ldr	r3, [sp, #24]
 801653a:	3330      	adds	r3, #48	; 0x30
 801653c:	7003      	strb	r3, [r0, #0]
 801653e:	9008      	str	r0, [sp, #32]
 8016540:	f000 fc38 	bl	8016db4 <_svfprintf_r+0x14e4>
 8016544:	2480      	movs	r4, #128	; 0x80
 8016546:	2300      	movs	r3, #0
 8016548:	00e4      	lsls	r4, r4, #3
 801654a:	930d      	str	r3, [sp, #52]	; 0x34
 801654c:	a858      	add	r0, sp, #352	; 0x160
 801654e:	402c      	ands	r4, r5
 8016550:	1e43      	subs	r3, r0, #1
 8016552:	9308      	str	r3, [sp, #32]
 8016554:	220a      	movs	r2, #10
 8016556:	9806      	ldr	r0, [sp, #24]
 8016558:	9907      	ldr	r1, [sp, #28]
 801655a:	2300      	movs	r3, #0
 801655c:	f7ea f80a 	bl	8000574 <__aeabi_uldivmod>
 8016560:	9b08      	ldr	r3, [sp, #32]
 8016562:	3230      	adds	r2, #48	; 0x30
 8016564:	701a      	strb	r2, [r3, #0]
 8016566:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016568:	3301      	adds	r3, #1
 801656a:	930d      	str	r3, [sp, #52]	; 0x34
 801656c:	2c00      	cmp	r4, #0
 801656e:	d01d      	beq.n	80165ac <_svfprintf_r+0xcdc>
 8016570:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016572:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016574:	781b      	ldrb	r3, [r3, #0]
 8016576:	429a      	cmp	r2, r3
 8016578:	d118      	bne.n	80165ac <_svfprintf_r+0xcdc>
 801657a:	2aff      	cmp	r2, #255	; 0xff
 801657c:	d016      	beq.n	80165ac <_svfprintf_r+0xcdc>
 801657e:	9b07      	ldr	r3, [sp, #28]
 8016580:	2b00      	cmp	r3, #0
 8016582:	d102      	bne.n	801658a <_svfprintf_r+0xcba>
 8016584:	9b06      	ldr	r3, [sp, #24]
 8016586:	2b09      	cmp	r3, #9
 8016588:	d910      	bls.n	80165ac <_svfprintf_r+0xcdc>
 801658a:	9b08      	ldr	r3, [sp, #32]
 801658c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801658e:	991d      	ldr	r1, [sp, #116]	; 0x74
 8016590:	1a9b      	subs	r3, r3, r2
 8016592:	0018      	movs	r0, r3
 8016594:	9308      	str	r3, [sp, #32]
 8016596:	f7fe fa69 	bl	8014a6c <strncpy>
 801659a:	2200      	movs	r2, #0
 801659c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801659e:	920d      	str	r2, [sp, #52]	; 0x34
 80165a0:	785b      	ldrb	r3, [r3, #1]
 80165a2:	1e5a      	subs	r2, r3, #1
 80165a4:	4193      	sbcs	r3, r2
 80165a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80165a8:	18d3      	adds	r3, r2, r3
 80165aa:	9312      	str	r3, [sp, #72]	; 0x48
 80165ac:	2300      	movs	r3, #0
 80165ae:	9806      	ldr	r0, [sp, #24]
 80165b0:	9907      	ldr	r1, [sp, #28]
 80165b2:	220a      	movs	r2, #10
 80165b4:	f7e9 ffde 	bl	8000574 <__aeabi_uldivmod>
 80165b8:	9b07      	ldr	r3, [sp, #28]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d104      	bne.n	80165c8 <_svfprintf_r+0xcf8>
 80165be:	9b06      	ldr	r3, [sp, #24]
 80165c0:	2b09      	cmp	r3, #9
 80165c2:	d801      	bhi.n	80165c8 <_svfprintf_r+0xcf8>
 80165c4:	f000 fbf6 	bl	8016db4 <_svfprintf_r+0x14e4>
 80165c8:	9006      	str	r0, [sp, #24]
 80165ca:	9107      	str	r1, [sp, #28]
 80165cc:	9808      	ldr	r0, [sp, #32]
 80165ce:	e7bf      	b.n	8016550 <_svfprintf_r+0xc80>
 80165d0:	200f      	movs	r0, #15
 80165d2:	ab58      	add	r3, sp, #352	; 0x160
 80165d4:	9308      	str	r3, [sp, #32]
 80165d6:	9b08      	ldr	r3, [sp, #32]
 80165d8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80165da:	3b01      	subs	r3, #1
 80165dc:	9308      	str	r3, [sp, #32]
 80165de:	9b06      	ldr	r3, [sp, #24]
 80165e0:	4003      	ands	r3, r0
 80165e2:	5cd3      	ldrb	r3, [r2, r3]
 80165e4:	9a08      	ldr	r2, [sp, #32]
 80165e6:	7013      	strb	r3, [r2, #0]
 80165e8:	9b07      	ldr	r3, [sp, #28]
 80165ea:	0719      	lsls	r1, r3, #28
 80165ec:	9b06      	ldr	r3, [sp, #24]
 80165ee:	091a      	lsrs	r2, r3, #4
 80165f0:	9b07      	ldr	r3, [sp, #28]
 80165f2:	4311      	orrs	r1, r2
 80165f4:	091b      	lsrs	r3, r3, #4
 80165f6:	9307      	str	r3, [sp, #28]
 80165f8:	000b      	movs	r3, r1
 80165fa:	9a07      	ldr	r2, [sp, #28]
 80165fc:	9106      	str	r1, [sp, #24]
 80165fe:	4313      	orrs	r3, r2
 8016600:	d1e9      	bne.n	80165d6 <_svfprintf_r+0xd06>
 8016602:	e3d7      	b.n	8016db4 <_svfprintf_r+0x14e4>
 8016604:	aa58      	add	r2, sp, #352	; 0x160
 8016606:	9208      	str	r2, [sp, #32]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d000      	beq.n	801660e <_svfprintf_r+0xd3e>
 801660c:	e3d2      	b.n	8016db4 <_svfprintf_r+0x14e4>
 801660e:	07f3      	lsls	r3, r6, #31
 8016610:	d400      	bmi.n	8016614 <_svfprintf_r+0xd44>
 8016612:	e3cf      	b.n	8016db4 <_svfprintf_r+0x14e4>
 8016614:	20e7      	movs	r0, #231	; 0xe7
 8016616:	ab1e      	add	r3, sp, #120	; 0x78
 8016618:	18c0      	adds	r0, r0, r3
 801661a:	2330      	movs	r3, #48	; 0x30
 801661c:	e78e      	b.n	801653c <_svfprintf_r+0xc6c>
 801661e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016620:	2b00      	cmp	r3, #0
 8016622:	d100      	bne.n	8016626 <_svfprintf_r+0xd56>
 8016624:	e38a      	b.n	8016d3c <_svfprintf_r+0x146c>
 8016626:	221b      	movs	r2, #27
 8016628:	a83f      	add	r0, sp, #252	; 0xfc
 801662a:	7003      	strb	r3, [r0, #0]
 801662c:	2300      	movs	r3, #0
 801662e:	a91e      	add	r1, sp, #120	; 0x78
 8016630:	1852      	adds	r2, r2, r1
 8016632:	7013      	strb	r3, [r2, #0]
 8016634:	940e      	str	r4, [sp, #56]	; 0x38
 8016636:	f7ff fab0 	bl	8015b9a <_svfprintf_r+0x2ca>
 801663a:	9e20      	ldr	r6, [sp, #128]	; 0x80
 801663c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801663e:	e587      	b.n	8016150 <_svfprintf_r+0x880>
 8016640:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016642:	e40f      	b.n	8015e64 <_svfprintf_r+0x594>
 8016644:	2010      	movs	r0, #16
 8016646:	1812      	adds	r2, r2, r0
 8016648:	6078      	str	r0, [r7, #4]
 801664a:	922e      	str	r2, [sp, #184]	; 0xb8
 801664c:	932d      	str	r3, [sp, #180]	; 0xb4
 801664e:	2b07      	cmp	r3, #7
 8016650:	dd08      	ble.n	8016664 <_svfprintf_r+0xd94>
 8016652:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016654:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016656:	aa2c      	add	r2, sp, #176	; 0xb0
 8016658:	f002 fbd4 	bl	8018e04 <__ssprint_r>
 801665c:	2800      	cmp	r0, #0
 801665e:	d000      	beq.n	8016662 <_svfprintf_r+0xd92>
 8016660:	e34b      	b.n	8016cfa <_svfprintf_r+0x142a>
 8016662:	a92f      	add	r1, sp, #188	; 0xbc
 8016664:	000f      	movs	r7, r1
 8016666:	3c10      	subs	r4, #16
 8016668:	f7ff fac3 	bl	8015bf2 <_svfprintf_r+0x322>
 801666c:	2010      	movs	r0, #16
 801666e:	1812      	adds	r2, r2, r0
 8016670:	6078      	str	r0, [r7, #4]
 8016672:	922e      	str	r2, [sp, #184]	; 0xb8
 8016674:	932d      	str	r3, [sp, #180]	; 0xb4
 8016676:	2b07      	cmp	r3, #7
 8016678:	dd08      	ble.n	801668c <_svfprintf_r+0xdbc>
 801667a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801667c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801667e:	aa2c      	add	r2, sp, #176	; 0xb0
 8016680:	f002 fbc0 	bl	8018e04 <__ssprint_r>
 8016684:	2800      	cmp	r0, #0
 8016686:	d000      	beq.n	801668a <_svfprintf_r+0xdba>
 8016688:	e337      	b.n	8016cfa <_svfprintf_r+0x142a>
 801668a:	a92f      	add	r1, sp, #188	; 0xbc
 801668c:	000f      	movs	r7, r1
 801668e:	3c10      	subs	r4, #16
 8016690:	f7ff fb0f 	bl	8015cb2 <_svfprintf_r+0x3e2>
 8016694:	2010      	movs	r0, #16
 8016696:	1812      	adds	r2, r2, r0
 8016698:	6078      	str	r0, [r7, #4]
 801669a:	922e      	str	r2, [sp, #184]	; 0xb8
 801669c:	932d      	str	r3, [sp, #180]	; 0xb4
 801669e:	2b07      	cmp	r3, #7
 80166a0:	dd08      	ble.n	80166b4 <_svfprintf_r+0xde4>
 80166a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80166a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80166a6:	aa2c      	add	r2, sp, #176	; 0xb0
 80166a8:	f002 fbac 	bl	8018e04 <__ssprint_r>
 80166ac:	2800      	cmp	r0, #0
 80166ae:	d000      	beq.n	80166b2 <_svfprintf_r+0xde2>
 80166b0:	e323      	b.n	8016cfa <_svfprintf_r+0x142a>
 80166b2:	a92f      	add	r1, sp, #188	; 0xbc
 80166b4:	000f      	movs	r7, r1
 80166b6:	3c10      	subs	r4, #16
 80166b8:	f7ff fb1d 	bl	8015cf6 <_svfprintf_r+0x426>
 80166bc:	fffffbff 	.word	0xfffffbff
 80166c0:	00007830 	.word	0x00007830
 80166c4:	0801d7f8 	.word	0x0801d7f8
 80166c8:	0801d809 	.word	0x0801d809
 80166cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80166ce:	2b65      	cmp	r3, #101	; 0x65
 80166d0:	dc00      	bgt.n	80166d4 <_svfprintf_r+0xe04>
 80166d2:	e258      	b.n	8016b86 <_svfprintf_r+0x12b6>
 80166d4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80166d6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80166d8:	2200      	movs	r2, #0
 80166da:	2300      	movs	r3, #0
 80166dc:	f7e9 febe 	bl	800045c <__aeabi_dcmpeq>
 80166e0:	2800      	cmp	r0, #0
 80166e2:	d07c      	beq.n	80167de <_svfprintf_r+0xf0e>
 80166e4:	4b80      	ldr	r3, [pc, #512]	; (80168e8 <_svfprintf_r+0x1018>)
 80166e6:	603b      	str	r3, [r7, #0]
 80166e8:	2301      	movs	r3, #1
 80166ea:	607b      	str	r3, [r7, #4]
 80166ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80166ee:	3708      	adds	r7, #8
 80166f0:	3301      	adds	r3, #1
 80166f2:	932e      	str	r3, [sp, #184]	; 0xb8
 80166f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80166f6:	9308      	str	r3, [sp, #32]
 80166f8:	3301      	adds	r3, #1
 80166fa:	932d      	str	r3, [sp, #180]	; 0xb4
 80166fc:	2b07      	cmp	r3, #7
 80166fe:	dd08      	ble.n	8016712 <_svfprintf_r+0xe42>
 8016700:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016702:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016704:	aa2c      	add	r2, sp, #176	; 0xb0
 8016706:	f002 fb7d 	bl	8018e04 <__ssprint_r>
 801670a:	2800      	cmp	r0, #0
 801670c:	d000      	beq.n	8016710 <_svfprintf_r+0xe40>
 801670e:	e2f4      	b.n	8016cfa <_svfprintf_r+0x142a>
 8016710:	af2f      	add	r7, sp, #188	; 0xbc
 8016712:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016714:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016716:	4293      	cmp	r3, r2
 8016718:	db01      	blt.n	801671e <_svfprintf_r+0xe4e>
 801671a:	07f3      	lsls	r3, r6, #31
 801671c:	d51d      	bpl.n	801675a <_svfprintf_r+0xe8a>
 801671e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016720:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016722:	4694      	mov	ip, r2
 8016724:	603b      	str	r3, [r7, #0]
 8016726:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016728:	607b      	str	r3, [r7, #4]
 801672a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801672c:	3708      	adds	r7, #8
 801672e:	4463      	add	r3, ip
 8016730:	932e      	str	r3, [sp, #184]	; 0xb8
 8016732:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016734:	9308      	str	r3, [sp, #32]
 8016736:	3301      	adds	r3, #1
 8016738:	932d      	str	r3, [sp, #180]	; 0xb4
 801673a:	2b07      	cmp	r3, #7
 801673c:	dd08      	ble.n	8016750 <_svfprintf_r+0xe80>
 801673e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016740:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016742:	aa2c      	add	r2, sp, #176	; 0xb0
 8016744:	f002 fb5e 	bl	8018e04 <__ssprint_r>
 8016748:	2800      	cmp	r0, #0
 801674a:	d000      	beq.n	801674e <_svfprintf_r+0xe7e>
 801674c:	e2d5      	b.n	8016cfa <_svfprintf_r+0x142a>
 801674e:	af2f      	add	r7, sp, #188	; 0xbc
 8016750:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016752:	2510      	movs	r5, #16
 8016754:	1e5c      	subs	r4, r3, #1
 8016756:	2c00      	cmp	r4, #0
 8016758:	dc2f      	bgt.n	80167ba <_svfprintf_r+0xeea>
 801675a:	0773      	lsls	r3, r6, #29
 801675c:	d500      	bpl.n	8016760 <_svfprintf_r+0xe90>
 801675e:	e2ae      	b.n	8016cbe <_svfprintf_r+0x13ee>
 8016760:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016762:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016764:	4293      	cmp	r3, r2
 8016766:	da00      	bge.n	801676a <_svfprintf_r+0xe9a>
 8016768:	0013      	movs	r3, r2
 801676a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801676c:	18d3      	adds	r3, r2, r3
 801676e:	9317      	str	r3, [sp, #92]	; 0x5c
 8016770:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016772:	9308      	str	r3, [sp, #32]
 8016774:	2b00      	cmp	r3, #0
 8016776:	d007      	beq.n	8016788 <_svfprintf_r+0xeb8>
 8016778:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801677a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801677c:	aa2c      	add	r2, sp, #176	; 0xb0
 801677e:	f002 fb41 	bl	8018e04 <__ssprint_r>
 8016782:	2800      	cmp	r0, #0
 8016784:	d000      	beq.n	8016788 <_svfprintf_r+0xeb8>
 8016786:	e2b8      	b.n	8016cfa <_svfprintf_r+0x142a>
 8016788:	2300      	movs	r3, #0
 801678a:	932d      	str	r3, [sp, #180]	; 0xb4
 801678c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801678e:	2b00      	cmp	r3, #0
 8016790:	d000      	beq.n	8016794 <_svfprintf_r+0xec4>
 8016792:	e2ce      	b.n	8016d32 <_svfprintf_r+0x1462>
 8016794:	af2f      	add	r7, sp, #188	; 0xbc
 8016796:	e5d8      	b.n	801634a <_svfprintf_r+0xa7a>
 8016798:	3210      	adds	r2, #16
 801679a:	607d      	str	r5, [r7, #4]
 801679c:	922e      	str	r2, [sp, #184]	; 0xb8
 801679e:	932d      	str	r3, [sp, #180]	; 0xb4
 80167a0:	2b07      	cmp	r3, #7
 80167a2:	dd08      	ble.n	80167b6 <_svfprintf_r+0xee6>
 80167a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80167a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80167a8:	aa2c      	add	r2, sp, #176	; 0xb0
 80167aa:	f002 fb2b 	bl	8018e04 <__ssprint_r>
 80167ae:	2800      	cmp	r0, #0
 80167b0:	d000      	beq.n	80167b4 <_svfprintf_r+0xee4>
 80167b2:	e2a2      	b.n	8016cfa <_svfprintf_r+0x142a>
 80167b4:	a92f      	add	r1, sp, #188	; 0xbc
 80167b6:	000f      	movs	r7, r1
 80167b8:	3c10      	subs	r4, #16
 80167ba:	0039      	movs	r1, r7
 80167bc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80167be:	484b      	ldr	r0, [pc, #300]	; (80168ec <_svfprintf_r+0x101c>)
 80167c0:	9308      	str	r3, [sp, #32]
 80167c2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80167c4:	3301      	adds	r3, #1
 80167c6:	3108      	adds	r1, #8
 80167c8:	6038      	str	r0, [r7, #0]
 80167ca:	2c10      	cmp	r4, #16
 80167cc:	dce4      	bgt.n	8016798 <_svfprintf_r+0xec8>
 80167ce:	607c      	str	r4, [r7, #4]
 80167d0:	18a4      	adds	r4, r4, r2
 80167d2:	000f      	movs	r7, r1
 80167d4:	942e      	str	r4, [sp, #184]	; 0xb8
 80167d6:	932d      	str	r3, [sp, #180]	; 0xb4
 80167d8:	2b07      	cmp	r3, #7
 80167da:	ddbe      	ble.n	801675a <_svfprintf_r+0xe8a>
 80167dc:	e067      	b.n	80168ae <_svfprintf_r+0xfde>
 80167de:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	dd00      	ble.n	80167e6 <_svfprintf_r+0xf16>
 80167e4:	e084      	b.n	80168f0 <_svfprintf_r+0x1020>
 80167e6:	4b40      	ldr	r3, [pc, #256]	; (80168e8 <_svfprintf_r+0x1018>)
 80167e8:	603b      	str	r3, [r7, #0]
 80167ea:	2301      	movs	r3, #1
 80167ec:	607b      	str	r3, [r7, #4]
 80167ee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80167f0:	3708      	adds	r7, #8
 80167f2:	3301      	adds	r3, #1
 80167f4:	932e      	str	r3, [sp, #184]	; 0xb8
 80167f6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80167f8:	9309      	str	r3, [sp, #36]	; 0x24
 80167fa:	3301      	adds	r3, #1
 80167fc:	932d      	str	r3, [sp, #180]	; 0xb4
 80167fe:	2b07      	cmp	r3, #7
 8016800:	dd08      	ble.n	8016814 <_svfprintf_r+0xf44>
 8016802:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016804:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016806:	aa2c      	add	r2, sp, #176	; 0xb0
 8016808:	f002 fafc 	bl	8018e04 <__ssprint_r>
 801680c:	2800      	cmp	r0, #0
 801680e:	d000      	beq.n	8016812 <_svfprintf_r+0xf42>
 8016810:	e273      	b.n	8016cfa <_svfprintf_r+0x142a>
 8016812:	af2f      	add	r7, sp, #188	; 0xbc
 8016814:	9926      	ldr	r1, [sp, #152]	; 0x98
 8016816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016818:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801681a:	430b      	orrs	r3, r1
 801681c:	2101      	movs	r1, #1
 801681e:	4031      	ands	r1, r6
 8016820:	430b      	orrs	r3, r1
 8016822:	d09a      	beq.n	801675a <_svfprintf_r+0xe8a>
 8016824:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016826:	603b      	str	r3, [r7, #0]
 8016828:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801682a:	607b      	str	r3, [r7, #4]
 801682c:	189a      	adds	r2, r3, r2
 801682e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016830:	922e      	str	r2, [sp, #184]	; 0xb8
 8016832:	9309      	str	r3, [sp, #36]	; 0x24
 8016834:	3301      	adds	r3, #1
 8016836:	932d      	str	r3, [sp, #180]	; 0xb4
 8016838:	3708      	adds	r7, #8
 801683a:	2b07      	cmp	r3, #7
 801683c:	dd08      	ble.n	8016850 <_svfprintf_r+0xf80>
 801683e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016840:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016842:	aa2c      	add	r2, sp, #176	; 0xb0
 8016844:	f002 fade 	bl	8018e04 <__ssprint_r>
 8016848:	2800      	cmp	r0, #0
 801684a:	d000      	beq.n	801684e <_svfprintf_r+0xf7e>
 801684c:	e255      	b.n	8016cfa <_svfprintf_r+0x142a>
 801684e:	af2f      	add	r7, sp, #188	; 0xbc
 8016850:	9c26      	ldr	r4, [sp, #152]	; 0x98
 8016852:	2c00      	cmp	r4, #0
 8016854:	da1a      	bge.n	801688c <_svfprintf_r+0xfbc>
 8016856:	0039      	movs	r1, r7
 8016858:	2510      	movs	r5, #16
 801685a:	4264      	negs	r4, r4
 801685c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801685e:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8016860:	9309      	str	r3, [sp, #36]	; 0x24
 8016862:	1c5a      	adds	r2, r3, #1
 8016864:	4b21      	ldr	r3, [pc, #132]	; (80168ec <_svfprintf_r+0x101c>)
 8016866:	3708      	adds	r7, #8
 8016868:	600b      	str	r3, [r1, #0]
 801686a:	2c10      	cmp	r4, #16
 801686c:	dc29      	bgt.n	80168c2 <_svfprintf_r+0xff2>
 801686e:	604c      	str	r4, [r1, #4]
 8016870:	1824      	adds	r4, r4, r0
 8016872:	942e      	str	r4, [sp, #184]	; 0xb8
 8016874:	922d      	str	r2, [sp, #180]	; 0xb4
 8016876:	2a07      	cmp	r2, #7
 8016878:	dd08      	ble.n	801688c <_svfprintf_r+0xfbc>
 801687a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801687c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801687e:	aa2c      	add	r2, sp, #176	; 0xb0
 8016880:	f002 fac0 	bl	8018e04 <__ssprint_r>
 8016884:	2800      	cmp	r0, #0
 8016886:	d000      	beq.n	801688a <_svfprintf_r+0xfba>
 8016888:	e237      	b.n	8016cfa <_svfprintf_r+0x142a>
 801688a:	af2f      	add	r7, sp, #188	; 0xbc
 801688c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801688e:	9b08      	ldr	r3, [sp, #32]
 8016890:	468c      	mov	ip, r1
 8016892:	603b      	str	r3, [r7, #0]
 8016894:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016896:	607b      	str	r3, [r7, #4]
 8016898:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801689a:	4463      	add	r3, ip
 801689c:	932e      	str	r3, [sp, #184]	; 0xb8
 801689e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80168a0:	1c5a      	adds	r2, r3, #1
 80168a2:	9308      	str	r3, [sp, #32]
 80168a4:	922d      	str	r2, [sp, #180]	; 0xb4
 80168a6:	2a07      	cmp	r2, #7
 80168a8:	dc01      	bgt.n	80168ae <_svfprintf_r+0xfde>
 80168aa:	f7ff fa58 	bl	8015d5e <_svfprintf_r+0x48e>
 80168ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80168b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80168b2:	aa2c      	add	r2, sp, #176	; 0xb0
 80168b4:	f002 faa6 	bl	8018e04 <__ssprint_r>
 80168b8:	2800      	cmp	r0, #0
 80168ba:	d000      	beq.n	80168be <_svfprintf_r+0xfee>
 80168bc:	e21d      	b.n	8016cfa <_svfprintf_r+0x142a>
 80168be:	af2f      	add	r7, sp, #188	; 0xbc
 80168c0:	e74b      	b.n	801675a <_svfprintf_r+0xe8a>
 80168c2:	3010      	adds	r0, #16
 80168c4:	604d      	str	r5, [r1, #4]
 80168c6:	902e      	str	r0, [sp, #184]	; 0xb8
 80168c8:	922d      	str	r2, [sp, #180]	; 0xb4
 80168ca:	2a07      	cmp	r2, #7
 80168cc:	dd08      	ble.n	80168e0 <_svfprintf_r+0x1010>
 80168ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80168d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80168d2:	aa2c      	add	r2, sp, #176	; 0xb0
 80168d4:	f002 fa96 	bl	8018e04 <__ssprint_r>
 80168d8:	2800      	cmp	r0, #0
 80168da:	d000      	beq.n	80168de <_svfprintf_r+0x100e>
 80168dc:	e20d      	b.n	8016cfa <_svfprintf_r+0x142a>
 80168de:	af2f      	add	r7, sp, #188	; 0xbc
 80168e0:	0039      	movs	r1, r7
 80168e2:	3c10      	subs	r4, #16
 80168e4:	e7ba      	b.n	801685c <_svfprintf_r+0xf8c>
 80168e6:	46c0      	nop			; (mov r8, r8)
 80168e8:	0801d81a 	.word	0x0801d81a
 80168ec:	0801d82c 	.word	0x0801d82c
 80168f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80168f2:	002c      	movs	r4, r5
 80168f4:	429d      	cmp	r5, r3
 80168f6:	dd00      	ble.n	80168fa <_svfprintf_r+0x102a>
 80168f8:	001c      	movs	r4, r3
 80168fa:	2c00      	cmp	r4, #0
 80168fc:	dd15      	ble.n	801692a <_svfprintf_r+0x105a>
 80168fe:	9b08      	ldr	r3, [sp, #32]
 8016900:	607c      	str	r4, [r7, #4]
 8016902:	603b      	str	r3, [r7, #0]
 8016904:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8016906:	3708      	adds	r7, #8
 8016908:	18e3      	adds	r3, r4, r3
 801690a:	932e      	str	r3, [sp, #184]	; 0xb8
 801690c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801690e:	9309      	str	r3, [sp, #36]	; 0x24
 8016910:	3301      	adds	r3, #1
 8016912:	932d      	str	r3, [sp, #180]	; 0xb4
 8016914:	2b07      	cmp	r3, #7
 8016916:	dd08      	ble.n	801692a <_svfprintf_r+0x105a>
 8016918:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801691a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801691c:	aa2c      	add	r2, sp, #176	; 0xb0
 801691e:	f002 fa71 	bl	8018e04 <__ssprint_r>
 8016922:	2800      	cmp	r0, #0
 8016924:	d000      	beq.n	8016928 <_svfprintf_r+0x1058>
 8016926:	e1e8      	b.n	8016cfa <_svfprintf_r+0x142a>
 8016928:	af2f      	add	r7, sp, #188	; 0xbc
 801692a:	43e3      	mvns	r3, r4
 801692c:	17db      	asrs	r3, r3, #31
 801692e:	401c      	ands	r4, r3
 8016930:	1b2c      	subs	r4, r5, r4
 8016932:	2c00      	cmp	r4, #0
 8016934:	dd1a      	ble.n	801696c <_svfprintf_r+0x109c>
 8016936:	0039      	movs	r1, r7
 8016938:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801693a:	48ca      	ldr	r0, [pc, #808]	; (8016c64 <_svfprintf_r+0x1394>)
 801693c:	9309      	str	r3, [sp, #36]	; 0x24
 801693e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016940:	3301      	adds	r3, #1
 8016942:	3108      	adds	r1, #8
 8016944:	6038      	str	r0, [r7, #0]
 8016946:	2c10      	cmp	r4, #16
 8016948:	dd00      	ble.n	801694c <_svfprintf_r+0x107c>
 801694a:	e08a      	b.n	8016a62 <_svfprintf_r+0x1192>
 801694c:	607c      	str	r4, [r7, #4]
 801694e:	18a4      	adds	r4, r4, r2
 8016950:	000f      	movs	r7, r1
 8016952:	942e      	str	r4, [sp, #184]	; 0xb8
 8016954:	932d      	str	r3, [sp, #180]	; 0xb4
 8016956:	2b07      	cmp	r3, #7
 8016958:	dd08      	ble.n	801696c <_svfprintf_r+0x109c>
 801695a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801695c:	980a      	ldr	r0, [sp, #40]	; 0x28
 801695e:	aa2c      	add	r2, sp, #176	; 0xb0
 8016960:	f002 fa50 	bl	8018e04 <__ssprint_r>
 8016964:	2800      	cmp	r0, #0
 8016966:	d000      	beq.n	801696a <_svfprintf_r+0x109a>
 8016968:	e1c7      	b.n	8016cfa <_svfprintf_r+0x142a>
 801696a:	af2f      	add	r7, sp, #188	; 0xbc
 801696c:	9b08      	ldr	r3, [sp, #32]
 801696e:	195d      	adds	r5, r3, r5
 8016970:	0573      	lsls	r3, r6, #21
 8016972:	d50d      	bpl.n	8016990 <_svfprintf_r+0x10c0>
 8016974:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016976:	2b00      	cmp	r3, #0
 8016978:	d000      	beq.n	801697c <_svfprintf_r+0x10ac>
 801697a:	e085      	b.n	8016a88 <_svfprintf_r+0x11b8>
 801697c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801697e:	2b00      	cmp	r3, #0
 8016980:	d000      	beq.n	8016984 <_svfprintf_r+0x10b4>
 8016982:	e084      	b.n	8016a8e <_svfprintf_r+0x11be>
 8016984:	9b08      	ldr	r3, [sp, #32]
 8016986:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016988:	189b      	adds	r3, r3, r2
 801698a:	429d      	cmp	r5, r3
 801698c:	d900      	bls.n	8016990 <_svfprintf_r+0x10c0>
 801698e:	001d      	movs	r5, r3
 8016990:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016992:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016994:	4293      	cmp	r3, r2
 8016996:	db01      	blt.n	801699c <_svfprintf_r+0x10cc>
 8016998:	07f3      	lsls	r3, r6, #31
 801699a:	d518      	bpl.n	80169ce <_svfprintf_r+0x10fe>
 801699c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801699e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80169a0:	4694      	mov	ip, r2
 80169a2:	603b      	str	r3, [r7, #0]
 80169a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80169a6:	607b      	str	r3, [r7, #4]
 80169a8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80169aa:	3708      	adds	r7, #8
 80169ac:	4463      	add	r3, ip
 80169ae:	932e      	str	r3, [sp, #184]	; 0xb8
 80169b0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80169b2:	9309      	str	r3, [sp, #36]	; 0x24
 80169b4:	3301      	adds	r3, #1
 80169b6:	932d      	str	r3, [sp, #180]	; 0xb4
 80169b8:	2b07      	cmp	r3, #7
 80169ba:	dd08      	ble.n	80169ce <_svfprintf_r+0x10fe>
 80169bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80169be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80169c0:	aa2c      	add	r2, sp, #176	; 0xb0
 80169c2:	f002 fa1f 	bl	8018e04 <__ssprint_r>
 80169c6:	2800      	cmp	r0, #0
 80169c8:	d000      	beq.n	80169cc <_svfprintf_r+0x10fc>
 80169ca:	e196      	b.n	8016cfa <_svfprintf_r+0x142a>
 80169cc:	af2f      	add	r7, sp, #188	; 0xbc
 80169ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80169d0:	9b08      	ldr	r3, [sp, #32]
 80169d2:	4694      	mov	ip, r2
 80169d4:	4463      	add	r3, ip
 80169d6:	1b58      	subs	r0, r3, r5
 80169d8:	0013      	movs	r3, r2
 80169da:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80169dc:	1a9c      	subs	r4, r3, r2
 80169de:	4284      	cmp	r4, r0
 80169e0:	dd00      	ble.n	80169e4 <_svfprintf_r+0x1114>
 80169e2:	0004      	movs	r4, r0
 80169e4:	2c00      	cmp	r4, #0
 80169e6:	dd14      	ble.n	8016a12 <_svfprintf_r+0x1142>
 80169e8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80169ea:	603d      	str	r5, [r7, #0]
 80169ec:	18e3      	adds	r3, r4, r3
 80169ee:	932e      	str	r3, [sp, #184]	; 0xb8
 80169f0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80169f2:	607c      	str	r4, [r7, #4]
 80169f4:	9308      	str	r3, [sp, #32]
 80169f6:	3301      	adds	r3, #1
 80169f8:	932d      	str	r3, [sp, #180]	; 0xb4
 80169fa:	3708      	adds	r7, #8
 80169fc:	2b07      	cmp	r3, #7
 80169fe:	dd08      	ble.n	8016a12 <_svfprintf_r+0x1142>
 8016a00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016a02:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016a04:	aa2c      	add	r2, sp, #176	; 0xb0
 8016a06:	f002 f9fd 	bl	8018e04 <__ssprint_r>
 8016a0a:	2800      	cmp	r0, #0
 8016a0c:	d000      	beq.n	8016a10 <_svfprintf_r+0x1140>
 8016a0e:	e174      	b.n	8016cfa <_svfprintf_r+0x142a>
 8016a10:	af2f      	add	r7, sp, #188	; 0xbc
 8016a12:	43e3      	mvns	r3, r4
 8016a14:	17db      	asrs	r3, r3, #31
 8016a16:	401c      	ands	r4, r3
 8016a18:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016a1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016a1c:	2510      	movs	r5, #16
 8016a1e:	1a9b      	subs	r3, r3, r2
 8016a20:	1b1c      	subs	r4, r3, r4
 8016a22:	2c00      	cmp	r4, #0
 8016a24:	dc00      	bgt.n	8016a28 <_svfprintf_r+0x1158>
 8016a26:	e698      	b.n	801675a <_svfprintf_r+0xe8a>
 8016a28:	0039      	movs	r1, r7
 8016a2a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016a2c:	488d      	ldr	r0, [pc, #564]	; (8016c64 <_svfprintf_r+0x1394>)
 8016a2e:	9308      	str	r3, [sp, #32]
 8016a30:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016a32:	3301      	adds	r3, #1
 8016a34:	3108      	adds	r1, #8
 8016a36:	6038      	str	r0, [r7, #0]
 8016a38:	2c10      	cmp	r4, #16
 8016a3a:	dc00      	bgt.n	8016a3e <_svfprintf_r+0x116e>
 8016a3c:	e6c7      	b.n	80167ce <_svfprintf_r+0xefe>
 8016a3e:	3210      	adds	r2, #16
 8016a40:	607d      	str	r5, [r7, #4]
 8016a42:	922e      	str	r2, [sp, #184]	; 0xb8
 8016a44:	932d      	str	r3, [sp, #180]	; 0xb4
 8016a46:	2b07      	cmp	r3, #7
 8016a48:	dd08      	ble.n	8016a5c <_svfprintf_r+0x118c>
 8016a4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016a4c:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016a4e:	aa2c      	add	r2, sp, #176	; 0xb0
 8016a50:	f002 f9d8 	bl	8018e04 <__ssprint_r>
 8016a54:	2800      	cmp	r0, #0
 8016a56:	d000      	beq.n	8016a5a <_svfprintf_r+0x118a>
 8016a58:	e14f      	b.n	8016cfa <_svfprintf_r+0x142a>
 8016a5a:	a92f      	add	r1, sp, #188	; 0xbc
 8016a5c:	000f      	movs	r7, r1
 8016a5e:	3c10      	subs	r4, #16
 8016a60:	e7e2      	b.n	8016a28 <_svfprintf_r+0x1158>
 8016a62:	2010      	movs	r0, #16
 8016a64:	1812      	adds	r2, r2, r0
 8016a66:	6078      	str	r0, [r7, #4]
 8016a68:	922e      	str	r2, [sp, #184]	; 0xb8
 8016a6a:	932d      	str	r3, [sp, #180]	; 0xb4
 8016a6c:	2b07      	cmp	r3, #7
 8016a6e:	dd08      	ble.n	8016a82 <_svfprintf_r+0x11b2>
 8016a70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016a72:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016a74:	aa2c      	add	r2, sp, #176	; 0xb0
 8016a76:	f002 f9c5 	bl	8018e04 <__ssprint_r>
 8016a7a:	2800      	cmp	r0, #0
 8016a7c:	d000      	beq.n	8016a80 <_svfprintf_r+0x11b0>
 8016a7e:	e13c      	b.n	8016cfa <_svfprintf_r+0x142a>
 8016a80:	a92f      	add	r1, sp, #188	; 0xbc
 8016a82:	000f      	movs	r7, r1
 8016a84:	3c10      	subs	r4, #16
 8016a86:	e756      	b.n	8016936 <_svfprintf_r+0x1066>
 8016a88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d061      	beq.n	8016b52 <_svfprintf_r+0x1282>
 8016a8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016a90:	3b01      	subs	r3, #1
 8016a92:	9310      	str	r3, [sp, #64]	; 0x40
 8016a94:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016a96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8016a98:	4694      	mov	ip, r2
 8016a9a:	603b      	str	r3, [r7, #0]
 8016a9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016a9e:	607b      	str	r3, [r7, #4]
 8016aa0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016aa2:	3708      	adds	r7, #8
 8016aa4:	4463      	add	r3, ip
 8016aa6:	932e      	str	r3, [sp, #184]	; 0xb8
 8016aa8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016aaa:	9309      	str	r3, [sp, #36]	; 0x24
 8016aac:	3301      	adds	r3, #1
 8016aae:	932d      	str	r3, [sp, #180]	; 0xb4
 8016ab0:	2b07      	cmp	r3, #7
 8016ab2:	dd08      	ble.n	8016ac6 <_svfprintf_r+0x11f6>
 8016ab4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016ab6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016ab8:	aa2c      	add	r2, sp, #176	; 0xb0
 8016aba:	f002 f9a3 	bl	8018e04 <__ssprint_r>
 8016abe:	2800      	cmp	r0, #0
 8016ac0:	d000      	beq.n	8016ac4 <_svfprintf_r+0x11f4>
 8016ac2:	e11a      	b.n	8016cfa <_svfprintf_r+0x142a>
 8016ac4:	af2f      	add	r7, sp, #188	; 0xbc
 8016ac6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016ac8:	9b08      	ldr	r3, [sp, #32]
 8016aca:	189b      	adds	r3, r3, r2
 8016acc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016ace:	1b5b      	subs	r3, r3, r5
 8016ad0:	7814      	ldrb	r4, [r2, #0]
 8016ad2:	429c      	cmp	r4, r3
 8016ad4:	dd00      	ble.n	8016ad8 <_svfprintf_r+0x1208>
 8016ad6:	001c      	movs	r4, r3
 8016ad8:	2c00      	cmp	r4, #0
 8016ada:	dd14      	ble.n	8016b06 <_svfprintf_r+0x1236>
 8016adc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016ade:	603d      	str	r5, [r7, #0]
 8016ae0:	18e3      	adds	r3, r4, r3
 8016ae2:	932e      	str	r3, [sp, #184]	; 0xb8
 8016ae4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016ae6:	607c      	str	r4, [r7, #4]
 8016ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8016aea:	3301      	adds	r3, #1
 8016aec:	932d      	str	r3, [sp, #180]	; 0xb4
 8016aee:	3708      	adds	r7, #8
 8016af0:	2b07      	cmp	r3, #7
 8016af2:	dd08      	ble.n	8016b06 <_svfprintf_r+0x1236>
 8016af4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016af6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016af8:	aa2c      	add	r2, sp, #176	; 0xb0
 8016afa:	f002 f983 	bl	8018e04 <__ssprint_r>
 8016afe:	2800      	cmp	r0, #0
 8016b00:	d000      	beq.n	8016b04 <_svfprintf_r+0x1234>
 8016b02:	e0fa      	b.n	8016cfa <_svfprintf_r+0x142a>
 8016b04:	af2f      	add	r7, sp, #188	; 0xbc
 8016b06:	43e3      	mvns	r3, r4
 8016b08:	17db      	asrs	r3, r3, #31
 8016b0a:	401c      	ands	r4, r3
 8016b0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016b0e:	781b      	ldrb	r3, [r3, #0]
 8016b10:	1b1c      	subs	r4, r3, r4
 8016b12:	2c00      	cmp	r4, #0
 8016b14:	dd19      	ble.n	8016b4a <_svfprintf_r+0x127a>
 8016b16:	0039      	movs	r1, r7
 8016b18:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016b1a:	4852      	ldr	r0, [pc, #328]	; (8016c64 <_svfprintf_r+0x1394>)
 8016b1c:	9309      	str	r3, [sp, #36]	; 0x24
 8016b1e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016b20:	3301      	adds	r3, #1
 8016b22:	3108      	adds	r1, #8
 8016b24:	6038      	str	r0, [r7, #0]
 8016b26:	2c10      	cmp	r4, #16
 8016b28:	dc1a      	bgt.n	8016b60 <_svfprintf_r+0x1290>
 8016b2a:	607c      	str	r4, [r7, #4]
 8016b2c:	18a4      	adds	r4, r4, r2
 8016b2e:	000f      	movs	r7, r1
 8016b30:	942e      	str	r4, [sp, #184]	; 0xb8
 8016b32:	932d      	str	r3, [sp, #180]	; 0xb4
 8016b34:	2b07      	cmp	r3, #7
 8016b36:	dd08      	ble.n	8016b4a <_svfprintf_r+0x127a>
 8016b38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016b3a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016b3c:	aa2c      	add	r2, sp, #176	; 0xb0
 8016b3e:	f002 f961 	bl	8018e04 <__ssprint_r>
 8016b42:	2800      	cmp	r0, #0
 8016b44:	d000      	beq.n	8016b48 <_svfprintf_r+0x1278>
 8016b46:	e0d8      	b.n	8016cfa <_svfprintf_r+0x142a>
 8016b48:	af2f      	add	r7, sp, #188	; 0xbc
 8016b4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016b4c:	781b      	ldrb	r3, [r3, #0]
 8016b4e:	18ed      	adds	r5, r5, r3
 8016b50:	e710      	b.n	8016974 <_svfprintf_r+0x10a4>
 8016b52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016b54:	3b01      	subs	r3, #1
 8016b56:	9312      	str	r3, [sp, #72]	; 0x48
 8016b58:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016b5a:	3b01      	subs	r3, #1
 8016b5c:	9311      	str	r3, [sp, #68]	; 0x44
 8016b5e:	e799      	b.n	8016a94 <_svfprintf_r+0x11c4>
 8016b60:	2010      	movs	r0, #16
 8016b62:	1812      	adds	r2, r2, r0
 8016b64:	6078      	str	r0, [r7, #4]
 8016b66:	922e      	str	r2, [sp, #184]	; 0xb8
 8016b68:	932d      	str	r3, [sp, #180]	; 0xb4
 8016b6a:	2b07      	cmp	r3, #7
 8016b6c:	dd08      	ble.n	8016b80 <_svfprintf_r+0x12b0>
 8016b6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016b70:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016b72:	aa2c      	add	r2, sp, #176	; 0xb0
 8016b74:	f002 f946 	bl	8018e04 <__ssprint_r>
 8016b78:	2800      	cmp	r0, #0
 8016b7a:	d000      	beq.n	8016b7e <_svfprintf_r+0x12ae>
 8016b7c:	e0bd      	b.n	8016cfa <_svfprintf_r+0x142a>
 8016b7e:	a92f      	add	r1, sp, #188	; 0xbc
 8016b80:	000f      	movs	r7, r1
 8016b82:	3c10      	subs	r4, #16
 8016b84:	e7c7      	b.n	8016b16 <_svfprintf_r+0x1246>
 8016b86:	003c      	movs	r4, r7
 8016b88:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016b8a:	9919      	ldr	r1, [sp, #100]	; 0x64
 8016b8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8016b90:	3101      	adds	r1, #1
 8016b92:	3301      	adds	r3, #1
 8016b94:	3408      	adds	r4, #8
 8016b96:	2a01      	cmp	r2, #1
 8016b98:	dc03      	bgt.n	8016ba2 <_svfprintf_r+0x12d2>
 8016b9a:	2201      	movs	r2, #1
 8016b9c:	4216      	tst	r6, r2
 8016b9e:	d100      	bne.n	8016ba2 <_svfprintf_r+0x12d2>
 8016ba0:	e088      	b.n	8016cb4 <_svfprintf_r+0x13e4>
 8016ba2:	9a08      	ldr	r2, [sp, #32]
 8016ba4:	912e      	str	r1, [sp, #184]	; 0xb8
 8016ba6:	603a      	str	r2, [r7, #0]
 8016ba8:	2201      	movs	r2, #1
 8016baa:	932d      	str	r3, [sp, #180]	; 0xb4
 8016bac:	607a      	str	r2, [r7, #4]
 8016bae:	2b07      	cmp	r3, #7
 8016bb0:	dd08      	ble.n	8016bc4 <_svfprintf_r+0x12f4>
 8016bb2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016bb4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016bb6:	aa2c      	add	r2, sp, #176	; 0xb0
 8016bb8:	f002 f924 	bl	8018e04 <__ssprint_r>
 8016bbc:	2800      	cmp	r0, #0
 8016bbe:	d000      	beq.n	8016bc2 <_svfprintf_r+0x12f2>
 8016bc0:	e09b      	b.n	8016cfa <_svfprintf_r+0x142a>
 8016bc2:	ac2f      	add	r4, sp, #188	; 0xbc
 8016bc4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016bc6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8016bc8:	4694      	mov	ip, r2
 8016bca:	6023      	str	r3, [r4, #0]
 8016bcc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8016bce:	6063      	str	r3, [r4, #4]
 8016bd0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016bd2:	3408      	adds	r4, #8
 8016bd4:	4463      	add	r3, ip
 8016bd6:	932e      	str	r3, [sp, #184]	; 0xb8
 8016bd8:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016bda:	9309      	str	r3, [sp, #36]	; 0x24
 8016bdc:	3301      	adds	r3, #1
 8016bde:	932d      	str	r3, [sp, #180]	; 0xb4
 8016be0:	2b07      	cmp	r3, #7
 8016be2:	dd08      	ble.n	8016bf6 <_svfprintf_r+0x1326>
 8016be4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016be6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016be8:	aa2c      	add	r2, sp, #176	; 0xb0
 8016bea:	f002 f90b 	bl	8018e04 <__ssprint_r>
 8016bee:	2800      	cmp	r0, #0
 8016bf0:	d000      	beq.n	8016bf4 <_svfprintf_r+0x1324>
 8016bf2:	e082      	b.n	8016cfa <_svfprintf_r+0x142a>
 8016bf4:	ac2f      	add	r4, sp, #188	; 0xbc
 8016bf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016bfc:	9915      	ldr	r1, [sp, #84]	; 0x54
 8016bfe:	1e5d      	subs	r5, r3, #1
 8016c00:	2300      	movs	r3, #0
 8016c02:	f7e9 fc2b 	bl	800045c <__aeabi_dcmpeq>
 8016c06:	2800      	cmp	r0, #0
 8016c08:	d12e      	bne.n	8016c68 <_svfprintf_r+0x1398>
 8016c0a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016c0c:	9808      	ldr	r0, [sp, #32]
 8016c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8016c10:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016c12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016c14:	1c59      	adds	r1, r3, #1
 8016c16:	930f      	str	r3, [sp, #60]	; 0x3c
 8016c18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c1a:	3001      	adds	r0, #1
 8016c1c:	3b01      	subs	r3, #1
 8016c1e:	189b      	adds	r3, r3, r2
 8016c20:	6020      	str	r0, [r4, #0]
 8016c22:	6065      	str	r5, [r4, #4]
 8016c24:	932e      	str	r3, [sp, #184]	; 0xb8
 8016c26:	912d      	str	r1, [sp, #180]	; 0xb4
 8016c28:	3408      	adds	r4, #8
 8016c2a:	2907      	cmp	r1, #7
 8016c2c:	dd07      	ble.n	8016c3e <_svfprintf_r+0x136e>
 8016c2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016c30:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016c32:	aa2c      	add	r2, sp, #176	; 0xb0
 8016c34:	f002 f8e6 	bl	8018e04 <__ssprint_r>
 8016c38:	2800      	cmp	r0, #0
 8016c3a:	d15e      	bne.n	8016cfa <_svfprintf_r+0x142a>
 8016c3c:	ac2f      	add	r4, sp, #188	; 0xbc
 8016c3e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016c40:	ab28      	add	r3, sp, #160	; 0xa0
 8016c42:	4694      	mov	ip, r2
 8016c44:	6023      	str	r3, [r4, #0]
 8016c46:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8016c48:	6063      	str	r3, [r4, #4]
 8016c4a:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016c4c:	4463      	add	r3, ip
 8016c4e:	932e      	str	r3, [sp, #184]	; 0xb8
 8016c50:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016c52:	9308      	str	r3, [sp, #32]
 8016c54:	3301      	adds	r3, #1
 8016c56:	932d      	str	r3, [sp, #180]	; 0xb4
 8016c58:	2b07      	cmp	r3, #7
 8016c5a:	dd00      	ble.n	8016c5e <_svfprintf_r+0x138e>
 8016c5c:	e627      	b.n	80168ae <_svfprintf_r+0xfde>
 8016c5e:	3408      	adds	r4, #8
 8016c60:	0027      	movs	r7, r4
 8016c62:	e57a      	b.n	801675a <_svfprintf_r+0xe8a>
 8016c64:	0801d82c 	.word	0x0801d82c
 8016c68:	2710      	movs	r7, #16
 8016c6a:	2d00      	cmp	r5, #0
 8016c6c:	dde7      	ble.n	8016c3e <_svfprintf_r+0x136e>
 8016c6e:	0021      	movs	r1, r4
 8016c70:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016c72:	4857      	ldr	r0, [pc, #348]	; (8016dd0 <_svfprintf_r+0x1500>)
 8016c74:	9308      	str	r3, [sp, #32]
 8016c76:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016c78:	3301      	adds	r3, #1
 8016c7a:	3108      	adds	r1, #8
 8016c7c:	6020      	str	r0, [r4, #0]
 8016c7e:	2d10      	cmp	r5, #16
 8016c80:	dc07      	bgt.n	8016c92 <_svfprintf_r+0x13c2>
 8016c82:	6065      	str	r5, [r4, #4]
 8016c84:	000c      	movs	r4, r1
 8016c86:	18ad      	adds	r5, r5, r2
 8016c88:	952e      	str	r5, [sp, #184]	; 0xb8
 8016c8a:	932d      	str	r3, [sp, #180]	; 0xb4
 8016c8c:	2b07      	cmp	r3, #7
 8016c8e:	ddd6      	ble.n	8016c3e <_svfprintf_r+0x136e>
 8016c90:	e7cd      	b.n	8016c2e <_svfprintf_r+0x135e>
 8016c92:	3210      	adds	r2, #16
 8016c94:	6067      	str	r7, [r4, #4]
 8016c96:	922e      	str	r2, [sp, #184]	; 0xb8
 8016c98:	932d      	str	r3, [sp, #180]	; 0xb4
 8016c9a:	2b07      	cmp	r3, #7
 8016c9c:	dd07      	ble.n	8016cae <_svfprintf_r+0x13de>
 8016c9e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016ca0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016ca2:	aa2c      	add	r2, sp, #176	; 0xb0
 8016ca4:	f002 f8ae 	bl	8018e04 <__ssprint_r>
 8016ca8:	2800      	cmp	r0, #0
 8016caa:	d126      	bne.n	8016cfa <_svfprintf_r+0x142a>
 8016cac:	a92f      	add	r1, sp, #188	; 0xbc
 8016cae:	000c      	movs	r4, r1
 8016cb0:	3d10      	subs	r5, #16
 8016cb2:	e7dc      	b.n	8016c6e <_svfprintf_r+0x139e>
 8016cb4:	9808      	ldr	r0, [sp, #32]
 8016cb6:	912e      	str	r1, [sp, #184]	; 0xb8
 8016cb8:	c705      	stmia	r7!, {r0, r2}
 8016cba:	932d      	str	r3, [sp, #180]	; 0xb4
 8016cbc:	e7e6      	b.n	8016c8c <_svfprintf_r+0x13bc>
 8016cbe:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8016cc0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8016cc2:	2510      	movs	r5, #16
 8016cc4:	1a9c      	subs	r4, r3, r2
 8016cc6:	2c00      	cmp	r4, #0
 8016cc8:	dc00      	bgt.n	8016ccc <_svfprintf_r+0x13fc>
 8016cca:	e549      	b.n	8016760 <_svfprintf_r+0xe90>
 8016ccc:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8016cce:	4941      	ldr	r1, [pc, #260]	; (8016dd4 <_svfprintf_r+0x1504>)
 8016cd0:	9308      	str	r3, [sp, #32]
 8016cd2:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8016cd4:	3301      	adds	r3, #1
 8016cd6:	6039      	str	r1, [r7, #0]
 8016cd8:	2c10      	cmp	r4, #16
 8016cda:	dc19      	bgt.n	8016d10 <_svfprintf_r+0x1440>
 8016cdc:	607c      	str	r4, [r7, #4]
 8016cde:	1914      	adds	r4, r2, r4
 8016ce0:	942e      	str	r4, [sp, #184]	; 0xb8
 8016ce2:	932d      	str	r3, [sp, #180]	; 0xb4
 8016ce4:	2b07      	cmp	r3, #7
 8016ce6:	dc00      	bgt.n	8016cea <_svfprintf_r+0x141a>
 8016ce8:	e53a      	b.n	8016760 <_svfprintf_r+0xe90>
 8016cea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016cec:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016cee:	aa2c      	add	r2, sp, #176	; 0xb0
 8016cf0:	f002 f888 	bl	8018e04 <__ssprint_r>
 8016cf4:	2800      	cmp	r0, #0
 8016cf6:	d100      	bne.n	8016cfa <_svfprintf_r+0x142a>
 8016cf8:	e532      	b.n	8016760 <_svfprintf_r+0xe90>
 8016cfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d101      	bne.n	8016d04 <_svfprintf_r+0x1434>
 8016d00:	f7ff f8ec 	bl	8015edc <_svfprintf_r+0x60c>
 8016d04:	0019      	movs	r1, r3
 8016d06:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016d08:	f000 ff66 	bl	8017bd8 <_free_r>
 8016d0c:	f7ff f8e6 	bl	8015edc <_svfprintf_r+0x60c>
 8016d10:	3210      	adds	r2, #16
 8016d12:	607d      	str	r5, [r7, #4]
 8016d14:	922e      	str	r2, [sp, #184]	; 0xb8
 8016d16:	932d      	str	r3, [sp, #180]	; 0xb4
 8016d18:	3708      	adds	r7, #8
 8016d1a:	2b07      	cmp	r3, #7
 8016d1c:	dd07      	ble.n	8016d2e <_svfprintf_r+0x145e>
 8016d1e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016d20:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016d22:	aa2c      	add	r2, sp, #176	; 0xb0
 8016d24:	f002 f86e 	bl	8018e04 <__ssprint_r>
 8016d28:	2800      	cmp	r0, #0
 8016d2a:	d1e6      	bne.n	8016cfa <_svfprintf_r+0x142a>
 8016d2c:	af2f      	add	r7, sp, #188	; 0xbc
 8016d2e:	3c10      	subs	r4, #16
 8016d30:	e7cc      	b.n	8016ccc <_svfprintf_r+0x13fc>
 8016d32:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016d34:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016d36:	f000 ff4f 	bl	8017bd8 <_free_r>
 8016d3a:	e52b      	b.n	8016794 <_svfprintf_r+0xec4>
 8016d3c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8016d3e:	9306      	str	r3, [sp, #24]
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d101      	bne.n	8016d48 <_svfprintf_r+0x1478>
 8016d44:	f7ff f8ca 	bl	8015edc <_svfprintf_r+0x60c>
 8016d48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016d4a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016d4c:	aa2c      	add	r2, sp, #176	; 0xb0
 8016d4e:	f002 f859 	bl	8018e04 <__ssprint_r>
 8016d52:	f7ff f8c3 	bl	8015edc <_svfprintf_r+0x60c>
 8016d56:	0035      	movs	r5, r6
 8016d58:	2a00      	cmp	r2, #0
 8016d5a:	d101      	bne.n	8016d60 <_svfprintf_r+0x1490>
 8016d5c:	f7ff f832 	bl	8015dc4 <_svfprintf_r+0x4f4>
 8016d60:	2b01      	cmp	r3, #1
 8016d62:	d101      	bne.n	8016d68 <_svfprintf_r+0x1498>
 8016d64:	f7ff fbdf 	bl	8016526 <_svfprintf_r+0xc56>
 8016d68:	2b02      	cmp	r3, #2
 8016d6a:	d100      	bne.n	8016d6e <_svfprintf_r+0x149e>
 8016d6c:	e430      	b.n	80165d0 <_svfprintf_r+0xd00>
 8016d6e:	2607      	movs	r6, #7
 8016d70:	ab58      	add	r3, sp, #352	; 0x160
 8016d72:	9308      	str	r3, [sp, #32]
 8016d74:	9908      	ldr	r1, [sp, #32]
 8016d76:	000b      	movs	r3, r1
 8016d78:	3b01      	subs	r3, #1
 8016d7a:	9308      	str	r3, [sp, #32]
 8016d7c:	9b06      	ldr	r3, [sp, #24]
 8016d7e:	9a08      	ldr	r2, [sp, #32]
 8016d80:	4033      	ands	r3, r6
 8016d82:	3330      	adds	r3, #48	; 0x30
 8016d84:	7013      	strb	r3, [r2, #0]
 8016d86:	9a07      	ldr	r2, [sp, #28]
 8016d88:	0754      	lsls	r4, r2, #29
 8016d8a:	9a06      	ldr	r2, [sp, #24]
 8016d8c:	08d0      	lsrs	r0, r2, #3
 8016d8e:	9a07      	ldr	r2, [sp, #28]
 8016d90:	4304      	orrs	r4, r0
 8016d92:	08d2      	lsrs	r2, r2, #3
 8016d94:	9207      	str	r2, [sp, #28]
 8016d96:	0022      	movs	r2, r4
 8016d98:	9807      	ldr	r0, [sp, #28]
 8016d9a:	9406      	str	r4, [sp, #24]
 8016d9c:	4302      	orrs	r2, r0
 8016d9e:	d1e9      	bne.n	8016d74 <_svfprintf_r+0x14a4>
 8016da0:	07ea      	lsls	r2, r5, #31
 8016da2:	d507      	bpl.n	8016db4 <_svfprintf_r+0x14e4>
 8016da4:	2b30      	cmp	r3, #48	; 0x30
 8016da6:	d005      	beq.n	8016db4 <_svfprintf_r+0x14e4>
 8016da8:	2330      	movs	r3, #48	; 0x30
 8016daa:	9808      	ldr	r0, [sp, #32]
 8016dac:	3801      	subs	r0, #1
 8016dae:	7003      	strb	r3, [r0, #0]
 8016db0:	1e8b      	subs	r3, r1, #2
 8016db2:	9308      	str	r3, [sp, #32]
 8016db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016db6:	9a08      	ldr	r2, [sp, #32]
 8016db8:	9319      	str	r3, [sp, #100]	; 0x64
 8016dba:	ab58      	add	r3, sp, #352	; 0x160
 8016dbc:	1a9b      	subs	r3, r3, r2
 8016dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8016dc0:	2300      	movs	r3, #0
 8016dc2:	002e      	movs	r6, r5
 8016dc4:	930c      	str	r3, [sp, #48]	; 0x30
 8016dc6:	001d      	movs	r5, r3
 8016dc8:	9310      	str	r3, [sp, #64]	; 0x40
 8016dca:	9311      	str	r3, [sp, #68]	; 0x44
 8016dcc:	f7fe feee 	bl	8015bac <_svfprintf_r+0x2dc>
 8016dd0:	0801d82c 	.word	0x0801d82c
 8016dd4:	0801d81c 	.word	0x0801d81c

08016dd8 <sysconf>:
 8016dd8:	2380      	movs	r3, #128	; 0x80
 8016dda:	b510      	push	{r4, lr}
 8016ddc:	015b      	lsls	r3, r3, #5
 8016dde:	2808      	cmp	r0, #8
 8016de0:	d004      	beq.n	8016dec <sysconf+0x14>
 8016de2:	f000 fe8b 	bl	8017afc <__errno>
 8016de6:	2316      	movs	r3, #22
 8016de8:	6003      	str	r3, [r0, #0]
 8016dea:	3b17      	subs	r3, #23
 8016dec:	0018      	movs	r0, r3
 8016dee:	bd10      	pop	{r4, pc}

08016df0 <register_fini>:
 8016df0:	4b03      	ldr	r3, [pc, #12]	; (8016e00 <register_fini+0x10>)
 8016df2:	b510      	push	{r4, lr}
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d002      	beq.n	8016dfe <register_fini+0xe>
 8016df8:	4802      	ldr	r0, [pc, #8]	; (8016e04 <register_fini+0x14>)
 8016dfa:	f000 f805 	bl	8016e08 <atexit>
 8016dfe:	bd10      	pop	{r4, pc}
 8016e00:	00000000 	.word	0x00000000
 8016e04:	08017b09 	.word	0x08017b09

08016e08 <atexit>:
 8016e08:	2300      	movs	r3, #0
 8016e0a:	b510      	push	{r4, lr}
 8016e0c:	0001      	movs	r1, r0
 8016e0e:	001a      	movs	r2, r3
 8016e10:	0018      	movs	r0, r3
 8016e12:	f002 f885 	bl	8018f20 <__register_exitproc>
 8016e16:	bd10      	pop	{r4, pc}

08016e18 <quorem>:
 8016e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e1a:	0006      	movs	r6, r0
 8016e1c:	690d      	ldr	r5, [r1, #16]
 8016e1e:	6933      	ldr	r3, [r6, #16]
 8016e20:	b087      	sub	sp, #28
 8016e22:	2000      	movs	r0, #0
 8016e24:	9102      	str	r1, [sp, #8]
 8016e26:	42ab      	cmp	r3, r5
 8016e28:	db6b      	blt.n	8016f02 <quorem+0xea>
 8016e2a:	000b      	movs	r3, r1
 8016e2c:	3d01      	subs	r5, #1
 8016e2e:	00ac      	lsls	r4, r5, #2
 8016e30:	3314      	adds	r3, #20
 8016e32:	9305      	str	r3, [sp, #20]
 8016e34:	191b      	adds	r3, r3, r4
 8016e36:	9303      	str	r3, [sp, #12]
 8016e38:	0033      	movs	r3, r6
 8016e3a:	3314      	adds	r3, #20
 8016e3c:	9301      	str	r3, [sp, #4]
 8016e3e:	191c      	adds	r4, r3, r4
 8016e40:	9b03      	ldr	r3, [sp, #12]
 8016e42:	6827      	ldr	r7, [r4, #0]
 8016e44:	681b      	ldr	r3, [r3, #0]
 8016e46:	0038      	movs	r0, r7
 8016e48:	9300      	str	r3, [sp, #0]
 8016e4a:	3301      	adds	r3, #1
 8016e4c:	0019      	movs	r1, r3
 8016e4e:	9304      	str	r3, [sp, #16]
 8016e50:	f7e9 f97e 	bl	8000150 <__udivsi3>
 8016e54:	9b04      	ldr	r3, [sp, #16]
 8016e56:	9000      	str	r0, [sp, #0]
 8016e58:	429f      	cmp	r7, r3
 8016e5a:	d329      	bcc.n	8016eb0 <quorem+0x98>
 8016e5c:	2300      	movs	r3, #0
 8016e5e:	469c      	mov	ip, r3
 8016e60:	9801      	ldr	r0, [sp, #4]
 8016e62:	9f05      	ldr	r7, [sp, #20]
 8016e64:	9304      	str	r3, [sp, #16]
 8016e66:	cf08      	ldmia	r7!, {r3}
 8016e68:	9a00      	ldr	r2, [sp, #0]
 8016e6a:	b299      	uxth	r1, r3
 8016e6c:	4351      	muls	r1, r2
 8016e6e:	0c1b      	lsrs	r3, r3, #16
 8016e70:	4353      	muls	r3, r2
 8016e72:	4461      	add	r1, ip
 8016e74:	0c0a      	lsrs	r2, r1, #16
 8016e76:	189b      	adds	r3, r3, r2
 8016e78:	0c1a      	lsrs	r2, r3, #16
 8016e7a:	9305      	str	r3, [sp, #20]
 8016e7c:	6803      	ldr	r3, [r0, #0]
 8016e7e:	4694      	mov	ip, r2
 8016e80:	b29a      	uxth	r2, r3
 8016e82:	9b04      	ldr	r3, [sp, #16]
 8016e84:	b289      	uxth	r1, r1
 8016e86:	18d2      	adds	r2, r2, r3
 8016e88:	6803      	ldr	r3, [r0, #0]
 8016e8a:	1a52      	subs	r2, r2, r1
 8016e8c:	0c19      	lsrs	r1, r3, #16
 8016e8e:	466b      	mov	r3, sp
 8016e90:	8a9b      	ldrh	r3, [r3, #20]
 8016e92:	1acb      	subs	r3, r1, r3
 8016e94:	1411      	asrs	r1, r2, #16
 8016e96:	185b      	adds	r3, r3, r1
 8016e98:	1419      	asrs	r1, r3, #16
 8016e9a:	b292      	uxth	r2, r2
 8016e9c:	041b      	lsls	r3, r3, #16
 8016e9e:	431a      	orrs	r2, r3
 8016ea0:	9b03      	ldr	r3, [sp, #12]
 8016ea2:	9104      	str	r1, [sp, #16]
 8016ea4:	c004      	stmia	r0!, {r2}
 8016ea6:	42bb      	cmp	r3, r7
 8016ea8:	d2dd      	bcs.n	8016e66 <quorem+0x4e>
 8016eaa:	6823      	ldr	r3, [r4, #0]
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d02e      	beq.n	8016f0e <quorem+0xf6>
 8016eb0:	0030      	movs	r0, r6
 8016eb2:	9902      	ldr	r1, [sp, #8]
 8016eb4:	f001 fd76 	bl	80189a4 <__mcmp>
 8016eb8:	2800      	cmp	r0, #0
 8016eba:	db21      	blt.n	8016f00 <quorem+0xe8>
 8016ebc:	0030      	movs	r0, r6
 8016ebe:	2400      	movs	r4, #0
 8016ec0:	9b00      	ldr	r3, [sp, #0]
 8016ec2:	9902      	ldr	r1, [sp, #8]
 8016ec4:	3301      	adds	r3, #1
 8016ec6:	9300      	str	r3, [sp, #0]
 8016ec8:	3014      	adds	r0, #20
 8016eca:	3114      	adds	r1, #20
 8016ecc:	6802      	ldr	r2, [r0, #0]
 8016ece:	c908      	ldmia	r1!, {r3}
 8016ed0:	b292      	uxth	r2, r2
 8016ed2:	1914      	adds	r4, r2, r4
 8016ed4:	b29a      	uxth	r2, r3
 8016ed6:	1aa2      	subs	r2, r4, r2
 8016ed8:	6804      	ldr	r4, [r0, #0]
 8016eda:	0c1b      	lsrs	r3, r3, #16
 8016edc:	0c24      	lsrs	r4, r4, #16
 8016ede:	1ae3      	subs	r3, r4, r3
 8016ee0:	1414      	asrs	r4, r2, #16
 8016ee2:	191b      	adds	r3, r3, r4
 8016ee4:	141c      	asrs	r4, r3, #16
 8016ee6:	b292      	uxth	r2, r2
 8016ee8:	041b      	lsls	r3, r3, #16
 8016eea:	4313      	orrs	r3, r2
 8016eec:	c008      	stmia	r0!, {r3}
 8016eee:	9b03      	ldr	r3, [sp, #12]
 8016ef0:	428b      	cmp	r3, r1
 8016ef2:	d2eb      	bcs.n	8016ecc <quorem+0xb4>
 8016ef4:	9a01      	ldr	r2, [sp, #4]
 8016ef6:	00ab      	lsls	r3, r5, #2
 8016ef8:	18d3      	adds	r3, r2, r3
 8016efa:	681a      	ldr	r2, [r3, #0]
 8016efc:	2a00      	cmp	r2, #0
 8016efe:	d010      	beq.n	8016f22 <quorem+0x10a>
 8016f00:	9800      	ldr	r0, [sp, #0]
 8016f02:	b007      	add	sp, #28
 8016f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f06:	6823      	ldr	r3, [r4, #0]
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d104      	bne.n	8016f16 <quorem+0xfe>
 8016f0c:	3d01      	subs	r5, #1
 8016f0e:	9b01      	ldr	r3, [sp, #4]
 8016f10:	3c04      	subs	r4, #4
 8016f12:	42a3      	cmp	r3, r4
 8016f14:	d3f7      	bcc.n	8016f06 <quorem+0xee>
 8016f16:	6135      	str	r5, [r6, #16]
 8016f18:	e7ca      	b.n	8016eb0 <quorem+0x98>
 8016f1a:	681a      	ldr	r2, [r3, #0]
 8016f1c:	2a00      	cmp	r2, #0
 8016f1e:	d104      	bne.n	8016f2a <quorem+0x112>
 8016f20:	3d01      	subs	r5, #1
 8016f22:	9a01      	ldr	r2, [sp, #4]
 8016f24:	3b04      	subs	r3, #4
 8016f26:	429a      	cmp	r2, r3
 8016f28:	d3f7      	bcc.n	8016f1a <quorem+0x102>
 8016f2a:	6135      	str	r5, [r6, #16]
 8016f2c:	e7e8      	b.n	8016f00 <quorem+0xe8>
	...

08016f30 <_dtoa_r>:
 8016f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f32:	0014      	movs	r4, r2
 8016f34:	001d      	movs	r5, r3
 8016f36:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8016f38:	b09d      	sub	sp, #116	; 0x74
 8016f3a:	940a      	str	r4, [sp, #40]	; 0x28
 8016f3c:	950b      	str	r5, [sp, #44]	; 0x2c
 8016f3e:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8016f40:	9003      	str	r0, [sp, #12]
 8016f42:	2900      	cmp	r1, #0
 8016f44:	d009      	beq.n	8016f5a <_dtoa_r+0x2a>
 8016f46:	2301      	movs	r3, #1
 8016f48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016f4a:	4093      	lsls	r3, r2
 8016f4c:	604a      	str	r2, [r1, #4]
 8016f4e:	608b      	str	r3, [r1, #8]
 8016f50:	f001 face 	bl	80184f0 <_Bfree>
 8016f54:	2300      	movs	r3, #0
 8016f56:	9a03      	ldr	r2, [sp, #12]
 8016f58:	6413      	str	r3, [r2, #64]	; 0x40
 8016f5a:	2d00      	cmp	r5, #0
 8016f5c:	da1f      	bge.n	8016f9e <_dtoa_r+0x6e>
 8016f5e:	2301      	movs	r3, #1
 8016f60:	6033      	str	r3, [r6, #0]
 8016f62:	006b      	lsls	r3, r5, #1
 8016f64:	085b      	lsrs	r3, r3, #1
 8016f66:	930b      	str	r3, [sp, #44]	; 0x2c
 8016f68:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8016f6a:	4bb9      	ldr	r3, [pc, #740]	; (8017250 <_dtoa_r+0x320>)
 8016f6c:	003a      	movs	r2, r7
 8016f6e:	9318      	str	r3, [sp, #96]	; 0x60
 8016f70:	401a      	ands	r2, r3
 8016f72:	429a      	cmp	r2, r3
 8016f74:	d116      	bne.n	8016fa4 <_dtoa_r+0x74>
 8016f76:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016f78:	4bb6      	ldr	r3, [pc, #728]	; (8017254 <_dtoa_r+0x324>)
 8016f7a:	6013      	str	r3, [r2, #0]
 8016f7c:	033a      	lsls	r2, r7, #12
 8016f7e:	0b12      	lsrs	r2, r2, #12
 8016f80:	4314      	orrs	r4, r2
 8016f82:	d101      	bne.n	8016f88 <_dtoa_r+0x58>
 8016f84:	f000 fda4 	bl	8017ad0 <_dtoa_r+0xba0>
 8016f88:	48b3      	ldr	r0, [pc, #716]	; (8017258 <_dtoa_r+0x328>)
 8016f8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8016f8c:	9005      	str	r0, [sp, #20]
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d002      	beq.n	8016f98 <_dtoa_r+0x68>
 8016f92:	4bb2      	ldr	r3, [pc, #712]	; (801725c <_dtoa_r+0x32c>)
 8016f94:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016f96:	6013      	str	r3, [r2, #0]
 8016f98:	9805      	ldr	r0, [sp, #20]
 8016f9a:	b01d      	add	sp, #116	; 0x74
 8016f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016f9e:	2300      	movs	r3, #0
 8016fa0:	6033      	str	r3, [r6, #0]
 8016fa2:	e7e1      	b.n	8016f68 <_dtoa_r+0x38>
 8016fa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016fa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016fa8:	9210      	str	r2, [sp, #64]	; 0x40
 8016faa:	9311      	str	r3, [sp, #68]	; 0x44
 8016fac:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016fae:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016fb0:	2200      	movs	r2, #0
 8016fb2:	2300      	movs	r3, #0
 8016fb4:	f7e9 fa52 	bl	800045c <__aeabi_dcmpeq>
 8016fb8:	1e06      	subs	r6, r0, #0
 8016fba:	d00b      	beq.n	8016fd4 <_dtoa_r+0xa4>
 8016fbc:	2301      	movs	r3, #1
 8016fbe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8016fc0:	6013      	str	r3, [r2, #0]
 8016fc2:	4ba7      	ldr	r3, [pc, #668]	; (8017260 <_dtoa_r+0x330>)
 8016fc4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8016fc6:	9305      	str	r3, [sp, #20]
 8016fc8:	2a00      	cmp	r2, #0
 8016fca:	d0e5      	beq.n	8016f98 <_dtoa_r+0x68>
 8016fcc:	4aa5      	ldr	r2, [pc, #660]	; (8017264 <_dtoa_r+0x334>)
 8016fce:	9926      	ldr	r1, [sp, #152]	; 0x98
 8016fd0:	600a      	str	r2, [r1, #0]
 8016fd2:	e7e1      	b.n	8016f98 <_dtoa_r+0x68>
 8016fd4:	ab1a      	add	r3, sp, #104	; 0x68
 8016fd6:	9301      	str	r3, [sp, #4]
 8016fd8:	ab1b      	add	r3, sp, #108	; 0x6c
 8016fda:	9300      	str	r3, [sp, #0]
 8016fdc:	9803      	ldr	r0, [sp, #12]
 8016fde:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016fe0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016fe2:	f001 fe07 	bl	8018bf4 <__d2b>
 8016fe6:	007b      	lsls	r3, r7, #1
 8016fe8:	9004      	str	r0, [sp, #16]
 8016fea:	0d5b      	lsrs	r3, r3, #21
 8016fec:	d100      	bne.n	8016ff0 <_dtoa_r+0xc0>
 8016fee:	e07c      	b.n	80170ea <_dtoa_r+0x1ba>
 8016ff0:	9810      	ldr	r0, [sp, #64]	; 0x40
 8016ff2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8016ff4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016ff6:	4c9c      	ldr	r4, [pc, #624]	; (8017268 <_dtoa_r+0x338>)
 8016ff8:	0312      	lsls	r2, r2, #12
 8016ffa:	0b12      	lsrs	r2, r2, #12
 8016ffc:	4314      	orrs	r4, r2
 8016ffe:	0021      	movs	r1, r4
 8017000:	4a9a      	ldr	r2, [pc, #616]	; (801726c <_dtoa_r+0x33c>)
 8017002:	9616      	str	r6, [sp, #88]	; 0x58
 8017004:	189f      	adds	r7, r3, r2
 8017006:	2200      	movs	r2, #0
 8017008:	4b99      	ldr	r3, [pc, #612]	; (8017270 <_dtoa_r+0x340>)
 801700a:	f7eb fb17 	bl	800263c <__aeabi_dsub>
 801700e:	4a99      	ldr	r2, [pc, #612]	; (8017274 <_dtoa_r+0x344>)
 8017010:	4b99      	ldr	r3, [pc, #612]	; (8017278 <_dtoa_r+0x348>)
 8017012:	f7eb f8a7 	bl	8002164 <__aeabi_dmul>
 8017016:	4a99      	ldr	r2, [pc, #612]	; (801727c <_dtoa_r+0x34c>)
 8017018:	4b99      	ldr	r3, [pc, #612]	; (8017280 <_dtoa_r+0x350>)
 801701a:	f7ea f933 	bl	8001284 <__aeabi_dadd>
 801701e:	0004      	movs	r4, r0
 8017020:	0038      	movs	r0, r7
 8017022:	000d      	movs	r5, r1
 8017024:	f7eb fef0 	bl	8002e08 <__aeabi_i2d>
 8017028:	4a96      	ldr	r2, [pc, #600]	; (8017284 <_dtoa_r+0x354>)
 801702a:	4b97      	ldr	r3, [pc, #604]	; (8017288 <_dtoa_r+0x358>)
 801702c:	f7eb f89a 	bl	8002164 <__aeabi_dmul>
 8017030:	0002      	movs	r2, r0
 8017032:	000b      	movs	r3, r1
 8017034:	0020      	movs	r0, r4
 8017036:	0029      	movs	r1, r5
 8017038:	f7ea f924 	bl	8001284 <__aeabi_dadd>
 801703c:	0004      	movs	r4, r0
 801703e:	000d      	movs	r5, r1
 8017040:	f7eb feac 	bl	8002d9c <__aeabi_d2iz>
 8017044:	2200      	movs	r2, #0
 8017046:	9002      	str	r0, [sp, #8]
 8017048:	2300      	movs	r3, #0
 801704a:	0020      	movs	r0, r4
 801704c:	0029      	movs	r1, r5
 801704e:	f7e9 fa0b 	bl	8000468 <__aeabi_dcmplt>
 8017052:	2800      	cmp	r0, #0
 8017054:	d00b      	beq.n	801706e <_dtoa_r+0x13e>
 8017056:	9802      	ldr	r0, [sp, #8]
 8017058:	f7eb fed6 	bl	8002e08 <__aeabi_i2d>
 801705c:	002b      	movs	r3, r5
 801705e:	0022      	movs	r2, r4
 8017060:	f7e9 f9fc 	bl	800045c <__aeabi_dcmpeq>
 8017064:	4243      	negs	r3, r0
 8017066:	4158      	adcs	r0, r3
 8017068:	9b02      	ldr	r3, [sp, #8]
 801706a:	1a1b      	subs	r3, r3, r0
 801706c:	9302      	str	r3, [sp, #8]
 801706e:	2301      	movs	r3, #1
 8017070:	9314      	str	r3, [sp, #80]	; 0x50
 8017072:	9b02      	ldr	r3, [sp, #8]
 8017074:	2b16      	cmp	r3, #22
 8017076:	d80f      	bhi.n	8017098 <_dtoa_r+0x168>
 8017078:	9810      	ldr	r0, [sp, #64]	; 0x40
 801707a:	9911      	ldr	r1, [sp, #68]	; 0x44
 801707c:	00da      	lsls	r2, r3, #3
 801707e:	4b83      	ldr	r3, [pc, #524]	; (801728c <_dtoa_r+0x35c>)
 8017080:	189b      	adds	r3, r3, r2
 8017082:	681a      	ldr	r2, [r3, #0]
 8017084:	685b      	ldr	r3, [r3, #4]
 8017086:	f7e9 f9ef 	bl	8000468 <__aeabi_dcmplt>
 801708a:	2800      	cmp	r0, #0
 801708c:	d049      	beq.n	8017122 <_dtoa_r+0x1f2>
 801708e:	9b02      	ldr	r3, [sp, #8]
 8017090:	3b01      	subs	r3, #1
 8017092:	9302      	str	r3, [sp, #8]
 8017094:	2300      	movs	r3, #0
 8017096:	9314      	str	r3, [sp, #80]	; 0x50
 8017098:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801709a:	1bdf      	subs	r7, r3, r7
 801709c:	2300      	movs	r3, #0
 801709e:	9309      	str	r3, [sp, #36]	; 0x24
 80170a0:	003b      	movs	r3, r7
 80170a2:	3b01      	subs	r3, #1
 80170a4:	930d      	str	r3, [sp, #52]	; 0x34
 80170a6:	d504      	bpl.n	80170b2 <_dtoa_r+0x182>
 80170a8:	2301      	movs	r3, #1
 80170aa:	1bdb      	subs	r3, r3, r7
 80170ac:	9309      	str	r3, [sp, #36]	; 0x24
 80170ae:	2300      	movs	r3, #0
 80170b0:	930d      	str	r3, [sp, #52]	; 0x34
 80170b2:	9b02      	ldr	r3, [sp, #8]
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	db36      	blt.n	8017126 <_dtoa_r+0x1f6>
 80170b8:	9a02      	ldr	r2, [sp, #8]
 80170ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80170bc:	4694      	mov	ip, r2
 80170be:	4463      	add	r3, ip
 80170c0:	930d      	str	r3, [sp, #52]	; 0x34
 80170c2:	2300      	movs	r3, #0
 80170c4:	9213      	str	r2, [sp, #76]	; 0x4c
 80170c6:	930e      	str	r3, [sp, #56]	; 0x38
 80170c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80170ca:	2401      	movs	r4, #1
 80170cc:	2b09      	cmp	r3, #9
 80170ce:	d865      	bhi.n	801719c <_dtoa_r+0x26c>
 80170d0:	2b05      	cmp	r3, #5
 80170d2:	dd02      	ble.n	80170da <_dtoa_r+0x1aa>
 80170d4:	2400      	movs	r4, #0
 80170d6:	3b04      	subs	r3, #4
 80170d8:	9322      	str	r3, [sp, #136]	; 0x88
 80170da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80170dc:	1e98      	subs	r0, r3, #2
 80170de:	2803      	cmp	r0, #3
 80170e0:	d865      	bhi.n	80171ae <_dtoa_r+0x27e>
 80170e2:	f7e9 f821 	bl	8000128 <__gnu_thumb1_case_uqi>
 80170e6:	3629      	.short	0x3629
 80170e8:	5934      	.short	0x5934
 80170ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80170ec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80170ee:	189e      	adds	r6, r3, r2
 80170f0:	4b67      	ldr	r3, [pc, #412]	; (8017290 <_dtoa_r+0x360>)
 80170f2:	18f2      	adds	r2, r6, r3
 80170f4:	2a20      	cmp	r2, #32
 80170f6:	dd0f      	ble.n	8017118 <_dtoa_r+0x1e8>
 80170f8:	2340      	movs	r3, #64	; 0x40
 80170fa:	0038      	movs	r0, r7
 80170fc:	1a9b      	subs	r3, r3, r2
 80170fe:	4098      	lsls	r0, r3
 8017100:	4b64      	ldr	r3, [pc, #400]	; (8017294 <_dtoa_r+0x364>)
 8017102:	18f3      	adds	r3, r6, r3
 8017104:	40dc      	lsrs	r4, r3
 8017106:	4320      	orrs	r0, r4
 8017108:	f7eb feae 	bl	8002e68 <__aeabi_ui2d>
 801710c:	2301      	movs	r3, #1
 801710e:	4c62      	ldr	r4, [pc, #392]	; (8017298 <_dtoa_r+0x368>)
 8017110:	1e77      	subs	r7, r6, #1
 8017112:	1909      	adds	r1, r1, r4
 8017114:	9316      	str	r3, [sp, #88]	; 0x58
 8017116:	e776      	b.n	8017006 <_dtoa_r+0xd6>
 8017118:	2320      	movs	r3, #32
 801711a:	0020      	movs	r0, r4
 801711c:	1a9b      	subs	r3, r3, r2
 801711e:	4098      	lsls	r0, r3
 8017120:	e7f2      	b.n	8017108 <_dtoa_r+0x1d8>
 8017122:	9014      	str	r0, [sp, #80]	; 0x50
 8017124:	e7b8      	b.n	8017098 <_dtoa_r+0x168>
 8017126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017128:	9a02      	ldr	r2, [sp, #8]
 801712a:	1a9b      	subs	r3, r3, r2
 801712c:	9309      	str	r3, [sp, #36]	; 0x24
 801712e:	4253      	negs	r3, r2
 8017130:	930e      	str	r3, [sp, #56]	; 0x38
 8017132:	2300      	movs	r3, #0
 8017134:	9313      	str	r3, [sp, #76]	; 0x4c
 8017136:	e7c7      	b.n	80170c8 <_dtoa_r+0x198>
 8017138:	2300      	movs	r3, #0
 801713a:	9312      	str	r3, [sp, #72]	; 0x48
 801713c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801713e:	2b00      	cmp	r3, #0
 8017140:	dc39      	bgt.n	80171b6 <_dtoa_r+0x286>
 8017142:	2301      	movs	r3, #1
 8017144:	001a      	movs	r2, r3
 8017146:	930c      	str	r3, [sp, #48]	; 0x30
 8017148:	9308      	str	r3, [sp, #32]
 801714a:	9223      	str	r2, [sp, #140]	; 0x8c
 801714c:	e00d      	b.n	801716a <_dtoa_r+0x23a>
 801714e:	2301      	movs	r3, #1
 8017150:	e7f3      	b.n	801713a <_dtoa_r+0x20a>
 8017152:	2300      	movs	r3, #0
 8017154:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8017156:	9312      	str	r3, [sp, #72]	; 0x48
 8017158:	4694      	mov	ip, r2
 801715a:	9b02      	ldr	r3, [sp, #8]
 801715c:	4463      	add	r3, ip
 801715e:	930c      	str	r3, [sp, #48]	; 0x30
 8017160:	3301      	adds	r3, #1
 8017162:	9308      	str	r3, [sp, #32]
 8017164:	2b00      	cmp	r3, #0
 8017166:	dc00      	bgt.n	801716a <_dtoa_r+0x23a>
 8017168:	2301      	movs	r3, #1
 801716a:	2200      	movs	r2, #0
 801716c:	9903      	ldr	r1, [sp, #12]
 801716e:	644a      	str	r2, [r1, #68]	; 0x44
 8017170:	3204      	adds	r2, #4
 8017172:	0010      	movs	r0, r2
 8017174:	9903      	ldr	r1, [sp, #12]
 8017176:	3014      	adds	r0, #20
 8017178:	6c49      	ldr	r1, [r1, #68]	; 0x44
 801717a:	4298      	cmp	r0, r3
 801717c:	d91f      	bls.n	80171be <_dtoa_r+0x28e>
 801717e:	9803      	ldr	r0, [sp, #12]
 8017180:	f001 f98e 	bl	80184a0 <_Balloc>
 8017184:	9005      	str	r0, [sp, #20]
 8017186:	2800      	cmp	r0, #0
 8017188:	d11e      	bne.n	80171c8 <_dtoa_r+0x298>
 801718a:	21d5      	movs	r1, #213	; 0xd5
 801718c:	0002      	movs	r2, r0
 801718e:	4b43      	ldr	r3, [pc, #268]	; (801729c <_dtoa_r+0x36c>)
 8017190:	0049      	lsls	r1, r1, #1
 8017192:	4843      	ldr	r0, [pc, #268]	; (80172a0 <_dtoa_r+0x370>)
 8017194:	f001 ff06 	bl	8018fa4 <__assert_func>
 8017198:	2301      	movs	r3, #1
 801719a:	e7db      	b.n	8017154 <_dtoa_r+0x224>
 801719c:	2300      	movs	r3, #0
 801719e:	9412      	str	r4, [sp, #72]	; 0x48
 80171a0:	9322      	str	r3, [sp, #136]	; 0x88
 80171a2:	3b01      	subs	r3, #1
 80171a4:	930c      	str	r3, [sp, #48]	; 0x30
 80171a6:	9308      	str	r3, [sp, #32]
 80171a8:	2200      	movs	r2, #0
 80171aa:	3313      	adds	r3, #19
 80171ac:	e7cd      	b.n	801714a <_dtoa_r+0x21a>
 80171ae:	2301      	movs	r3, #1
 80171b0:	9312      	str	r3, [sp, #72]	; 0x48
 80171b2:	3b02      	subs	r3, #2
 80171b4:	e7f6      	b.n	80171a4 <_dtoa_r+0x274>
 80171b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80171b8:	930c      	str	r3, [sp, #48]	; 0x30
 80171ba:	9308      	str	r3, [sp, #32]
 80171bc:	e7d5      	b.n	801716a <_dtoa_r+0x23a>
 80171be:	9803      	ldr	r0, [sp, #12]
 80171c0:	3101      	adds	r1, #1
 80171c2:	6441      	str	r1, [r0, #68]	; 0x44
 80171c4:	0052      	lsls	r2, r2, #1
 80171c6:	e7d4      	b.n	8017172 <_dtoa_r+0x242>
 80171c8:	9b03      	ldr	r3, [sp, #12]
 80171ca:	9a05      	ldr	r2, [sp, #20]
 80171cc:	641a      	str	r2, [r3, #64]	; 0x40
 80171ce:	9b08      	ldr	r3, [sp, #32]
 80171d0:	2b0e      	cmp	r3, #14
 80171d2:	d900      	bls.n	80171d6 <_dtoa_r+0x2a6>
 80171d4:	e0df      	b.n	8017396 <_dtoa_r+0x466>
 80171d6:	2c00      	cmp	r4, #0
 80171d8:	d100      	bne.n	80171dc <_dtoa_r+0x2ac>
 80171da:	e0dc      	b.n	8017396 <_dtoa_r+0x466>
 80171dc:	9b02      	ldr	r3, [sp, #8]
 80171de:	2b00      	cmp	r3, #0
 80171e0:	dd62      	ble.n	80172a8 <_dtoa_r+0x378>
 80171e2:	001a      	movs	r2, r3
 80171e4:	210f      	movs	r1, #15
 80171e6:	4b29      	ldr	r3, [pc, #164]	; (801728c <_dtoa_r+0x35c>)
 80171e8:	400a      	ands	r2, r1
 80171ea:	00d2      	lsls	r2, r2, #3
 80171ec:	189b      	adds	r3, r3, r2
 80171ee:	681d      	ldr	r5, [r3, #0]
 80171f0:	685e      	ldr	r6, [r3, #4]
 80171f2:	9b02      	ldr	r3, [sp, #8]
 80171f4:	2702      	movs	r7, #2
 80171f6:	111c      	asrs	r4, r3, #4
 80171f8:	05db      	lsls	r3, r3, #23
 80171fa:	d50a      	bpl.n	8017212 <_dtoa_r+0x2e2>
 80171fc:	4b29      	ldr	r3, [pc, #164]	; (80172a4 <_dtoa_r+0x374>)
 80171fe:	400c      	ands	r4, r1
 8017200:	6a1a      	ldr	r2, [r3, #32]
 8017202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017204:	9810      	ldr	r0, [sp, #64]	; 0x40
 8017206:	9911      	ldr	r1, [sp, #68]	; 0x44
 8017208:	f7ea fba6 	bl	8001958 <__aeabi_ddiv>
 801720c:	900a      	str	r0, [sp, #40]	; 0x28
 801720e:	910b      	str	r1, [sp, #44]	; 0x2c
 8017210:	3701      	adds	r7, #1
 8017212:	4b24      	ldr	r3, [pc, #144]	; (80172a4 <_dtoa_r+0x374>)
 8017214:	9306      	str	r3, [sp, #24]
 8017216:	2c00      	cmp	r4, #0
 8017218:	d108      	bne.n	801722c <_dtoa_r+0x2fc>
 801721a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801721c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801721e:	002a      	movs	r2, r5
 8017220:	0033      	movs	r3, r6
 8017222:	f7ea fb99 	bl	8001958 <__aeabi_ddiv>
 8017226:	900a      	str	r0, [sp, #40]	; 0x28
 8017228:	910b      	str	r1, [sp, #44]	; 0x2c
 801722a:	e058      	b.n	80172de <_dtoa_r+0x3ae>
 801722c:	2301      	movs	r3, #1
 801722e:	421c      	tst	r4, r3
 8017230:	d009      	beq.n	8017246 <_dtoa_r+0x316>
 8017232:	18ff      	adds	r7, r7, r3
 8017234:	9b06      	ldr	r3, [sp, #24]
 8017236:	0028      	movs	r0, r5
 8017238:	681a      	ldr	r2, [r3, #0]
 801723a:	685b      	ldr	r3, [r3, #4]
 801723c:	0031      	movs	r1, r6
 801723e:	f7ea ff91 	bl	8002164 <__aeabi_dmul>
 8017242:	0005      	movs	r5, r0
 8017244:	000e      	movs	r6, r1
 8017246:	9b06      	ldr	r3, [sp, #24]
 8017248:	1064      	asrs	r4, r4, #1
 801724a:	3308      	adds	r3, #8
 801724c:	e7e2      	b.n	8017214 <_dtoa_r+0x2e4>
 801724e:	46c0      	nop			; (mov r8, r8)
 8017250:	7ff00000 	.word	0x7ff00000
 8017254:	0000270f 	.word	0x0000270f
 8017258:	0801d83c 	.word	0x0801d83c
 801725c:	0801d83f 	.word	0x0801d83f
 8017260:	0801d81a 	.word	0x0801d81a
 8017264:	0801d81b 	.word	0x0801d81b
 8017268:	3ff00000 	.word	0x3ff00000
 801726c:	fffffc01 	.word	0xfffffc01
 8017270:	3ff80000 	.word	0x3ff80000
 8017274:	636f4361 	.word	0x636f4361
 8017278:	3fd287a7 	.word	0x3fd287a7
 801727c:	8b60c8b3 	.word	0x8b60c8b3
 8017280:	3fc68a28 	.word	0x3fc68a28
 8017284:	509f79fb 	.word	0x509f79fb
 8017288:	3fd34413 	.word	0x3fd34413
 801728c:	0801d9c0 	.word	0x0801d9c0
 8017290:	00000432 	.word	0x00000432
 8017294:	00000412 	.word	0x00000412
 8017298:	fe100000 	.word	0xfe100000
 801729c:	0801d849 	.word	0x0801d849
 80172a0:	0801d85a 	.word	0x0801d85a
 80172a4:	0801d998 	.word	0x0801d998
 80172a8:	9b02      	ldr	r3, [sp, #8]
 80172aa:	2702      	movs	r7, #2
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d016      	beq.n	80172de <_dtoa_r+0x3ae>
 80172b0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80172b2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80172b4:	425c      	negs	r4, r3
 80172b6:	230f      	movs	r3, #15
 80172b8:	4ad4      	ldr	r2, [pc, #848]	; (801760c <_dtoa_r+0x6dc>)
 80172ba:	4023      	ands	r3, r4
 80172bc:	00db      	lsls	r3, r3, #3
 80172be:	18d3      	adds	r3, r2, r3
 80172c0:	681a      	ldr	r2, [r3, #0]
 80172c2:	685b      	ldr	r3, [r3, #4]
 80172c4:	f7ea ff4e 	bl	8002164 <__aeabi_dmul>
 80172c8:	2601      	movs	r6, #1
 80172ca:	2300      	movs	r3, #0
 80172cc:	900a      	str	r0, [sp, #40]	; 0x28
 80172ce:	910b      	str	r1, [sp, #44]	; 0x2c
 80172d0:	4dcf      	ldr	r5, [pc, #828]	; (8017610 <_dtoa_r+0x6e0>)
 80172d2:	1124      	asrs	r4, r4, #4
 80172d4:	2c00      	cmp	r4, #0
 80172d6:	d000      	beq.n	80172da <_dtoa_r+0x3aa>
 80172d8:	e08d      	b.n	80173f6 <_dtoa_r+0x4c6>
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d1a3      	bne.n	8017226 <_dtoa_r+0x2f6>
 80172de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d100      	bne.n	80172e6 <_dtoa_r+0x3b6>
 80172e4:	e092      	b.n	801740c <_dtoa_r+0x4dc>
 80172e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80172e8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80172ea:	2200      	movs	r2, #0
 80172ec:	0020      	movs	r0, r4
 80172ee:	0029      	movs	r1, r5
 80172f0:	4bc8      	ldr	r3, [pc, #800]	; (8017614 <_dtoa_r+0x6e4>)
 80172f2:	f7e9 f8b9 	bl	8000468 <__aeabi_dcmplt>
 80172f6:	2800      	cmp	r0, #0
 80172f8:	d100      	bne.n	80172fc <_dtoa_r+0x3cc>
 80172fa:	e087      	b.n	801740c <_dtoa_r+0x4dc>
 80172fc:	9b08      	ldr	r3, [sp, #32]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d100      	bne.n	8017304 <_dtoa_r+0x3d4>
 8017302:	e083      	b.n	801740c <_dtoa_r+0x4dc>
 8017304:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017306:	2b00      	cmp	r3, #0
 8017308:	dd41      	ble.n	801738e <_dtoa_r+0x45e>
 801730a:	9b02      	ldr	r3, [sp, #8]
 801730c:	2200      	movs	r2, #0
 801730e:	3b01      	subs	r3, #1
 8017310:	930f      	str	r3, [sp, #60]	; 0x3c
 8017312:	0020      	movs	r0, r4
 8017314:	0029      	movs	r1, r5
 8017316:	4bc0      	ldr	r3, [pc, #768]	; (8017618 <_dtoa_r+0x6e8>)
 8017318:	f7ea ff24 	bl	8002164 <__aeabi_dmul>
 801731c:	900a      	str	r0, [sp, #40]	; 0x28
 801731e:	910b      	str	r1, [sp, #44]	; 0x2c
 8017320:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8017322:	3701      	adds	r7, #1
 8017324:	0038      	movs	r0, r7
 8017326:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017328:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801732a:	f7eb fd6d 	bl	8002e08 <__aeabi_i2d>
 801732e:	0022      	movs	r2, r4
 8017330:	002b      	movs	r3, r5
 8017332:	f7ea ff17 	bl	8002164 <__aeabi_dmul>
 8017336:	2200      	movs	r2, #0
 8017338:	4bb8      	ldr	r3, [pc, #736]	; (801761c <_dtoa_r+0x6ec>)
 801733a:	f7e9 ffa3 	bl	8001284 <__aeabi_dadd>
 801733e:	900a      	str	r0, [sp, #40]	; 0x28
 8017340:	910b      	str	r1, [sp, #44]	; 0x2c
 8017342:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017346:	9206      	str	r2, [sp, #24]
 8017348:	9307      	str	r3, [sp, #28]
 801734a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801734c:	4ab4      	ldr	r2, [pc, #720]	; (8017620 <_dtoa_r+0x6f0>)
 801734e:	189f      	adds	r7, r3, r2
 8017350:	9707      	str	r7, [sp, #28]
 8017352:	2e00      	cmp	r6, #0
 8017354:	d15e      	bne.n	8017414 <_dtoa_r+0x4e4>
 8017356:	2200      	movs	r2, #0
 8017358:	0020      	movs	r0, r4
 801735a:	0029      	movs	r1, r5
 801735c:	4bb1      	ldr	r3, [pc, #708]	; (8017624 <_dtoa_r+0x6f4>)
 801735e:	f7eb f96d 	bl	800263c <__aeabi_dsub>
 8017362:	003b      	movs	r3, r7
 8017364:	9a06      	ldr	r2, [sp, #24]
 8017366:	0004      	movs	r4, r0
 8017368:	000d      	movs	r5, r1
 801736a:	f7e9 f891 	bl	8000490 <__aeabi_dcmpgt>
 801736e:	2800      	cmp	r0, #0
 8017370:	d000      	beq.n	8017374 <_dtoa_r+0x444>
 8017372:	e2aa      	b.n	80178ca <_dtoa_r+0x99a>
 8017374:	48ac      	ldr	r0, [pc, #688]	; (8017628 <_dtoa_r+0x6f8>)
 8017376:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017378:	4684      	mov	ip, r0
 801737a:	4461      	add	r1, ip
 801737c:	000b      	movs	r3, r1
 801737e:	0020      	movs	r0, r4
 8017380:	0029      	movs	r1, r5
 8017382:	9a06      	ldr	r2, [sp, #24]
 8017384:	f7e9 f870 	bl	8000468 <__aeabi_dcmplt>
 8017388:	2800      	cmp	r0, #0
 801738a:	d000      	beq.n	801738e <_dtoa_r+0x45e>
 801738c:	e29b      	b.n	80178c6 <_dtoa_r+0x996>
 801738e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017390:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017392:	930a      	str	r3, [sp, #40]	; 0x28
 8017394:	940b      	str	r4, [sp, #44]	; 0x2c
 8017396:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8017398:	2b00      	cmp	r3, #0
 801739a:	da00      	bge.n	801739e <_dtoa_r+0x46e>
 801739c:	e16a      	b.n	8017674 <_dtoa_r+0x744>
 801739e:	9a02      	ldr	r2, [sp, #8]
 80173a0:	2a0e      	cmp	r2, #14
 80173a2:	dd00      	ble.n	80173a6 <_dtoa_r+0x476>
 80173a4:	e166      	b.n	8017674 <_dtoa_r+0x744>
 80173a6:	4b99      	ldr	r3, [pc, #612]	; (801760c <_dtoa_r+0x6dc>)
 80173a8:	00d2      	lsls	r2, r2, #3
 80173aa:	189b      	adds	r3, r3, r2
 80173ac:	681e      	ldr	r6, [r3, #0]
 80173ae:	685f      	ldr	r7, [r3, #4]
 80173b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	db00      	blt.n	80173b8 <_dtoa_r+0x488>
 80173b6:	e0d7      	b.n	8017568 <_dtoa_r+0x638>
 80173b8:	9b08      	ldr	r3, [sp, #32]
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	dd00      	ble.n	80173c0 <_dtoa_r+0x490>
 80173be:	e0d3      	b.n	8017568 <_dtoa_r+0x638>
 80173c0:	d000      	beq.n	80173c4 <_dtoa_r+0x494>
 80173c2:	e27f      	b.n	80178c4 <_dtoa_r+0x994>
 80173c4:	2200      	movs	r2, #0
 80173c6:	0030      	movs	r0, r6
 80173c8:	0039      	movs	r1, r7
 80173ca:	4b96      	ldr	r3, [pc, #600]	; (8017624 <_dtoa_r+0x6f4>)
 80173cc:	f7ea feca 	bl	8002164 <__aeabi_dmul>
 80173d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80173d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80173d4:	f7e9 f866 	bl	80004a4 <__aeabi_dcmpge>
 80173d8:	9e08      	ldr	r6, [sp, #32]
 80173da:	0037      	movs	r7, r6
 80173dc:	2800      	cmp	r0, #0
 80173de:	d000      	beq.n	80173e2 <_dtoa_r+0x4b2>
 80173e0:	e256      	b.n	8017890 <_dtoa_r+0x960>
 80173e2:	9b05      	ldr	r3, [sp, #20]
 80173e4:	9a05      	ldr	r2, [sp, #20]
 80173e6:	3301      	adds	r3, #1
 80173e8:	9306      	str	r3, [sp, #24]
 80173ea:	2331      	movs	r3, #49	; 0x31
 80173ec:	7013      	strb	r3, [r2, #0]
 80173ee:	9b02      	ldr	r3, [sp, #8]
 80173f0:	3301      	adds	r3, #1
 80173f2:	9302      	str	r3, [sp, #8]
 80173f4:	e251      	b.n	801789a <_dtoa_r+0x96a>
 80173f6:	4234      	tst	r4, r6
 80173f8:	d005      	beq.n	8017406 <_dtoa_r+0x4d6>
 80173fa:	682a      	ldr	r2, [r5, #0]
 80173fc:	686b      	ldr	r3, [r5, #4]
 80173fe:	f7ea feb1 	bl	8002164 <__aeabi_dmul>
 8017402:	0033      	movs	r3, r6
 8017404:	3701      	adds	r7, #1
 8017406:	1064      	asrs	r4, r4, #1
 8017408:	3508      	adds	r5, #8
 801740a:	e763      	b.n	80172d4 <_dtoa_r+0x3a4>
 801740c:	9b02      	ldr	r3, [sp, #8]
 801740e:	9e08      	ldr	r6, [sp, #32]
 8017410:	930f      	str	r3, [sp, #60]	; 0x3c
 8017412:	e787      	b.n	8017324 <_dtoa_r+0x3f4>
 8017414:	4b7d      	ldr	r3, [pc, #500]	; (801760c <_dtoa_r+0x6dc>)
 8017416:	1e72      	subs	r2, r6, #1
 8017418:	00d2      	lsls	r2, r2, #3
 801741a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801741c:	189b      	adds	r3, r3, r2
 801741e:	681a      	ldr	r2, [r3, #0]
 8017420:	685b      	ldr	r3, [r3, #4]
 8017422:	2900      	cmp	r1, #0
 8017424:	d04e      	beq.n	80174c4 <_dtoa_r+0x594>
 8017426:	2000      	movs	r0, #0
 8017428:	4980      	ldr	r1, [pc, #512]	; (801762c <_dtoa_r+0x6fc>)
 801742a:	f7ea fa95 	bl	8001958 <__aeabi_ddiv>
 801742e:	9a06      	ldr	r2, [sp, #24]
 8017430:	9b07      	ldr	r3, [sp, #28]
 8017432:	f7eb f903 	bl	800263c <__aeabi_dsub>
 8017436:	9b05      	ldr	r3, [sp, #20]
 8017438:	900a      	str	r0, [sp, #40]	; 0x28
 801743a:	910b      	str	r1, [sp, #44]	; 0x2c
 801743c:	9315      	str	r3, [sp, #84]	; 0x54
 801743e:	18f3      	adds	r3, r6, r3
 8017440:	9319      	str	r3, [sp, #100]	; 0x64
 8017442:	0020      	movs	r0, r4
 8017444:	0029      	movs	r1, r5
 8017446:	f7eb fca9 	bl	8002d9c <__aeabi_d2iz>
 801744a:	9017      	str	r0, [sp, #92]	; 0x5c
 801744c:	f7eb fcdc 	bl	8002e08 <__aeabi_i2d>
 8017450:	0002      	movs	r2, r0
 8017452:	000b      	movs	r3, r1
 8017454:	0020      	movs	r0, r4
 8017456:	0029      	movs	r1, r5
 8017458:	f7eb f8f0 	bl	800263c <__aeabi_dsub>
 801745c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801745e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8017460:	3301      	adds	r3, #1
 8017462:	9306      	str	r3, [sp, #24]
 8017464:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017466:	3430      	adds	r4, #48	; 0x30
 8017468:	701c      	strb	r4, [r3, #0]
 801746a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801746c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801746e:	0006      	movs	r6, r0
 8017470:	000f      	movs	r7, r1
 8017472:	f7e8 fff9 	bl	8000468 <__aeabi_dcmplt>
 8017476:	2800      	cmp	r0, #0
 8017478:	d16c      	bne.n	8017554 <_dtoa_r+0x624>
 801747a:	0032      	movs	r2, r6
 801747c:	003b      	movs	r3, r7
 801747e:	2000      	movs	r0, #0
 8017480:	4964      	ldr	r1, [pc, #400]	; (8017614 <_dtoa_r+0x6e4>)
 8017482:	f7eb f8db 	bl	800263c <__aeabi_dsub>
 8017486:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801748a:	f7e8 ffed 	bl	8000468 <__aeabi_dcmplt>
 801748e:	2800      	cmp	r0, #0
 8017490:	d000      	beq.n	8017494 <_dtoa_r+0x564>
 8017492:	e0cf      	b.n	8017634 <_dtoa_r+0x704>
 8017494:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8017496:	9a06      	ldr	r2, [sp, #24]
 8017498:	4293      	cmp	r3, r2
 801749a:	d100      	bne.n	801749e <_dtoa_r+0x56e>
 801749c:	e777      	b.n	801738e <_dtoa_r+0x45e>
 801749e:	980a      	ldr	r0, [sp, #40]	; 0x28
 80174a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80174a2:	2200      	movs	r2, #0
 80174a4:	4b5c      	ldr	r3, [pc, #368]	; (8017618 <_dtoa_r+0x6e8>)
 80174a6:	f7ea fe5d 	bl	8002164 <__aeabi_dmul>
 80174aa:	4b5b      	ldr	r3, [pc, #364]	; (8017618 <_dtoa_r+0x6e8>)
 80174ac:	900a      	str	r0, [sp, #40]	; 0x28
 80174ae:	910b      	str	r1, [sp, #44]	; 0x2c
 80174b0:	2200      	movs	r2, #0
 80174b2:	0030      	movs	r0, r6
 80174b4:	0039      	movs	r1, r7
 80174b6:	f7ea fe55 	bl	8002164 <__aeabi_dmul>
 80174ba:	9b06      	ldr	r3, [sp, #24]
 80174bc:	0004      	movs	r4, r0
 80174be:	000d      	movs	r5, r1
 80174c0:	9315      	str	r3, [sp, #84]	; 0x54
 80174c2:	e7be      	b.n	8017442 <_dtoa_r+0x512>
 80174c4:	9806      	ldr	r0, [sp, #24]
 80174c6:	9907      	ldr	r1, [sp, #28]
 80174c8:	f7ea fe4c 	bl	8002164 <__aeabi_dmul>
 80174cc:	9f05      	ldr	r7, [sp, #20]
 80174ce:	900a      	str	r0, [sp, #40]	; 0x28
 80174d0:	910b      	str	r1, [sp, #44]	; 0x2c
 80174d2:	19bb      	adds	r3, r7, r6
 80174d4:	9315      	str	r3, [sp, #84]	; 0x54
 80174d6:	0029      	movs	r1, r5
 80174d8:	0020      	movs	r0, r4
 80174da:	f7eb fc5f 	bl	8002d9c <__aeabi_d2iz>
 80174de:	9006      	str	r0, [sp, #24]
 80174e0:	f7eb fc92 	bl	8002e08 <__aeabi_i2d>
 80174e4:	000b      	movs	r3, r1
 80174e6:	0002      	movs	r2, r0
 80174e8:	0029      	movs	r1, r5
 80174ea:	0020      	movs	r0, r4
 80174ec:	f7eb f8a6 	bl	800263c <__aeabi_dsub>
 80174f0:	9b06      	ldr	r3, [sp, #24]
 80174f2:	0004      	movs	r4, r0
 80174f4:	3330      	adds	r3, #48	; 0x30
 80174f6:	703b      	strb	r3, [r7, #0]
 80174f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80174fa:	3701      	adds	r7, #1
 80174fc:	000d      	movs	r5, r1
 80174fe:	429f      	cmp	r7, r3
 8017500:	d12b      	bne.n	801755a <_dtoa_r+0x62a>
 8017502:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017504:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017506:	9b05      	ldr	r3, [sp, #20]
 8017508:	2200      	movs	r2, #0
 801750a:	199b      	adds	r3, r3, r6
 801750c:	9306      	str	r3, [sp, #24]
 801750e:	4b47      	ldr	r3, [pc, #284]	; (801762c <_dtoa_r+0x6fc>)
 8017510:	f7e9 feb8 	bl	8001284 <__aeabi_dadd>
 8017514:	0002      	movs	r2, r0
 8017516:	000b      	movs	r3, r1
 8017518:	0020      	movs	r0, r4
 801751a:	0029      	movs	r1, r5
 801751c:	f7e8 ffb8 	bl	8000490 <__aeabi_dcmpgt>
 8017520:	2800      	cmp	r0, #0
 8017522:	d000      	beq.n	8017526 <_dtoa_r+0x5f6>
 8017524:	e086      	b.n	8017634 <_dtoa_r+0x704>
 8017526:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017528:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801752a:	2000      	movs	r0, #0
 801752c:	493f      	ldr	r1, [pc, #252]	; (801762c <_dtoa_r+0x6fc>)
 801752e:	f7eb f885 	bl	800263c <__aeabi_dsub>
 8017532:	0002      	movs	r2, r0
 8017534:	000b      	movs	r3, r1
 8017536:	0020      	movs	r0, r4
 8017538:	0029      	movs	r1, r5
 801753a:	f7e8 ff95 	bl	8000468 <__aeabi_dcmplt>
 801753e:	2800      	cmp	r0, #0
 8017540:	d100      	bne.n	8017544 <_dtoa_r+0x614>
 8017542:	e724      	b.n	801738e <_dtoa_r+0x45e>
 8017544:	9b06      	ldr	r3, [sp, #24]
 8017546:	001a      	movs	r2, r3
 8017548:	3a01      	subs	r2, #1
 801754a:	9206      	str	r2, [sp, #24]
 801754c:	7812      	ldrb	r2, [r2, #0]
 801754e:	2a30      	cmp	r2, #48	; 0x30
 8017550:	d0f8      	beq.n	8017544 <_dtoa_r+0x614>
 8017552:	9306      	str	r3, [sp, #24]
 8017554:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017556:	9302      	str	r3, [sp, #8]
 8017558:	e046      	b.n	80175e8 <_dtoa_r+0x6b8>
 801755a:	2200      	movs	r2, #0
 801755c:	4b2e      	ldr	r3, [pc, #184]	; (8017618 <_dtoa_r+0x6e8>)
 801755e:	f7ea fe01 	bl	8002164 <__aeabi_dmul>
 8017562:	0004      	movs	r4, r0
 8017564:	000d      	movs	r5, r1
 8017566:	e7b6      	b.n	80174d6 <_dtoa_r+0x5a6>
 8017568:	9b05      	ldr	r3, [sp, #20]
 801756a:	9a05      	ldr	r2, [sp, #20]
 801756c:	9309      	str	r3, [sp, #36]	; 0x24
 801756e:	9b08      	ldr	r3, [sp, #32]
 8017570:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8017572:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8017574:	3b01      	subs	r3, #1
 8017576:	189b      	adds	r3, r3, r2
 8017578:	930a      	str	r3, [sp, #40]	; 0x28
 801757a:	0032      	movs	r2, r6
 801757c:	003b      	movs	r3, r7
 801757e:	0020      	movs	r0, r4
 8017580:	0029      	movs	r1, r5
 8017582:	f7ea f9e9 	bl	8001958 <__aeabi_ddiv>
 8017586:	f7eb fc09 	bl	8002d9c <__aeabi_d2iz>
 801758a:	9008      	str	r0, [sp, #32]
 801758c:	f7eb fc3c 	bl	8002e08 <__aeabi_i2d>
 8017590:	0032      	movs	r2, r6
 8017592:	003b      	movs	r3, r7
 8017594:	f7ea fde6 	bl	8002164 <__aeabi_dmul>
 8017598:	0002      	movs	r2, r0
 801759a:	000b      	movs	r3, r1
 801759c:	0020      	movs	r0, r4
 801759e:	0029      	movs	r1, r5
 80175a0:	f7eb f84c 	bl	800263c <__aeabi_dsub>
 80175a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175a6:	001a      	movs	r2, r3
 80175a8:	3201      	adds	r2, #1
 80175aa:	9209      	str	r2, [sp, #36]	; 0x24
 80175ac:	9206      	str	r2, [sp, #24]
 80175ae:	9a08      	ldr	r2, [sp, #32]
 80175b0:	3230      	adds	r2, #48	; 0x30
 80175b2:	701a      	strb	r2, [r3, #0]
 80175b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80175b6:	429a      	cmp	r2, r3
 80175b8:	d14f      	bne.n	801765a <_dtoa_r+0x72a>
 80175ba:	0002      	movs	r2, r0
 80175bc:	000b      	movs	r3, r1
 80175be:	f7e9 fe61 	bl	8001284 <__aeabi_dadd>
 80175c2:	0032      	movs	r2, r6
 80175c4:	003b      	movs	r3, r7
 80175c6:	0004      	movs	r4, r0
 80175c8:	000d      	movs	r5, r1
 80175ca:	f7e8 ff61 	bl	8000490 <__aeabi_dcmpgt>
 80175ce:	2800      	cmp	r0, #0
 80175d0:	d12e      	bne.n	8017630 <_dtoa_r+0x700>
 80175d2:	0032      	movs	r2, r6
 80175d4:	003b      	movs	r3, r7
 80175d6:	0020      	movs	r0, r4
 80175d8:	0029      	movs	r1, r5
 80175da:	f7e8 ff3f 	bl	800045c <__aeabi_dcmpeq>
 80175de:	2800      	cmp	r0, #0
 80175e0:	d002      	beq.n	80175e8 <_dtoa_r+0x6b8>
 80175e2:	9b08      	ldr	r3, [sp, #32]
 80175e4:	07db      	lsls	r3, r3, #31
 80175e6:	d423      	bmi.n	8017630 <_dtoa_r+0x700>
 80175e8:	9803      	ldr	r0, [sp, #12]
 80175ea:	9904      	ldr	r1, [sp, #16]
 80175ec:	f000 ff80 	bl	80184f0 <_Bfree>
 80175f0:	2300      	movs	r3, #0
 80175f2:	9a06      	ldr	r2, [sp, #24]
 80175f4:	9802      	ldr	r0, [sp, #8]
 80175f6:	7013      	strb	r3, [r2, #0]
 80175f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80175fa:	3001      	adds	r0, #1
 80175fc:	6018      	str	r0, [r3, #0]
 80175fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8017600:	2b00      	cmp	r3, #0
 8017602:	d100      	bne.n	8017606 <_dtoa_r+0x6d6>
 8017604:	e4c8      	b.n	8016f98 <_dtoa_r+0x68>
 8017606:	601a      	str	r2, [r3, #0]
 8017608:	e4c6      	b.n	8016f98 <_dtoa_r+0x68>
 801760a:	46c0      	nop			; (mov r8, r8)
 801760c:	0801d9c0 	.word	0x0801d9c0
 8017610:	0801d998 	.word	0x0801d998
 8017614:	3ff00000 	.word	0x3ff00000
 8017618:	40240000 	.word	0x40240000
 801761c:	401c0000 	.word	0x401c0000
 8017620:	fcc00000 	.word	0xfcc00000
 8017624:	40140000 	.word	0x40140000
 8017628:	7cc00000 	.word	0x7cc00000
 801762c:	3fe00000 	.word	0x3fe00000
 8017630:	9b02      	ldr	r3, [sp, #8]
 8017632:	930f      	str	r3, [sp, #60]	; 0x3c
 8017634:	9b06      	ldr	r3, [sp, #24]
 8017636:	9306      	str	r3, [sp, #24]
 8017638:	3b01      	subs	r3, #1
 801763a:	781a      	ldrb	r2, [r3, #0]
 801763c:	2a39      	cmp	r2, #57	; 0x39
 801763e:	d108      	bne.n	8017652 <_dtoa_r+0x722>
 8017640:	9a05      	ldr	r2, [sp, #20]
 8017642:	429a      	cmp	r2, r3
 8017644:	d1f7      	bne.n	8017636 <_dtoa_r+0x706>
 8017646:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017648:	9905      	ldr	r1, [sp, #20]
 801764a:	3201      	adds	r2, #1
 801764c:	920f      	str	r2, [sp, #60]	; 0x3c
 801764e:	2230      	movs	r2, #48	; 0x30
 8017650:	700a      	strb	r2, [r1, #0]
 8017652:	781a      	ldrb	r2, [r3, #0]
 8017654:	3201      	adds	r2, #1
 8017656:	701a      	strb	r2, [r3, #0]
 8017658:	e77c      	b.n	8017554 <_dtoa_r+0x624>
 801765a:	2200      	movs	r2, #0
 801765c:	4baa      	ldr	r3, [pc, #680]	; (8017908 <_dtoa_r+0x9d8>)
 801765e:	f7ea fd81 	bl	8002164 <__aeabi_dmul>
 8017662:	2200      	movs	r2, #0
 8017664:	2300      	movs	r3, #0
 8017666:	0004      	movs	r4, r0
 8017668:	000d      	movs	r5, r1
 801766a:	f7e8 fef7 	bl	800045c <__aeabi_dcmpeq>
 801766e:	2800      	cmp	r0, #0
 8017670:	d083      	beq.n	801757a <_dtoa_r+0x64a>
 8017672:	e7b9      	b.n	80175e8 <_dtoa_r+0x6b8>
 8017674:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017676:	2a00      	cmp	r2, #0
 8017678:	d100      	bne.n	801767c <_dtoa_r+0x74c>
 801767a:	e08a      	b.n	8017792 <_dtoa_r+0x862>
 801767c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801767e:	2a01      	cmp	r2, #1
 8017680:	dc6e      	bgt.n	8017760 <_dtoa_r+0x830>
 8017682:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8017684:	2a00      	cmp	r2, #0
 8017686:	d067      	beq.n	8017758 <_dtoa_r+0x828>
 8017688:	4aa0      	ldr	r2, [pc, #640]	; (801790c <_dtoa_r+0x9dc>)
 801768a:	189b      	adds	r3, r3, r2
 801768c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801768e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8017690:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017692:	2101      	movs	r1, #1
 8017694:	18d2      	adds	r2, r2, r3
 8017696:	9209      	str	r2, [sp, #36]	; 0x24
 8017698:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801769a:	9803      	ldr	r0, [sp, #12]
 801769c:	18d3      	adds	r3, r2, r3
 801769e:	930d      	str	r3, [sp, #52]	; 0x34
 80176a0:	f001 f808 	bl	80186b4 <__i2b>
 80176a4:	0007      	movs	r7, r0
 80176a6:	2c00      	cmp	r4, #0
 80176a8:	dd0e      	ble.n	80176c8 <_dtoa_r+0x798>
 80176aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	dd0b      	ble.n	80176c8 <_dtoa_r+0x798>
 80176b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80176b2:	0023      	movs	r3, r4
 80176b4:	4294      	cmp	r4, r2
 80176b6:	dd00      	ble.n	80176ba <_dtoa_r+0x78a>
 80176b8:	0013      	movs	r3, r2
 80176ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80176bc:	1ae4      	subs	r4, r4, r3
 80176be:	1ad2      	subs	r2, r2, r3
 80176c0:	9209      	str	r2, [sp, #36]	; 0x24
 80176c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80176c4:	1ad3      	subs	r3, r2, r3
 80176c6:	930d      	str	r3, [sp, #52]	; 0x34
 80176c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d01e      	beq.n	801770c <_dtoa_r+0x7dc>
 80176ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d062      	beq.n	801779a <_dtoa_r+0x86a>
 80176d4:	2d00      	cmp	r5, #0
 80176d6:	dd10      	ble.n	80176fa <_dtoa_r+0x7ca>
 80176d8:	0039      	movs	r1, r7
 80176da:	002a      	movs	r2, r5
 80176dc:	9803      	ldr	r0, [sp, #12]
 80176de:	f001 f8af 	bl	8018840 <__pow5mult>
 80176e2:	9a04      	ldr	r2, [sp, #16]
 80176e4:	0001      	movs	r1, r0
 80176e6:	0007      	movs	r7, r0
 80176e8:	9803      	ldr	r0, [sp, #12]
 80176ea:	f000 fff9 	bl	80186e0 <__multiply>
 80176ee:	0006      	movs	r6, r0
 80176f0:	9904      	ldr	r1, [sp, #16]
 80176f2:	9803      	ldr	r0, [sp, #12]
 80176f4:	f000 fefc 	bl	80184f0 <_Bfree>
 80176f8:	9604      	str	r6, [sp, #16]
 80176fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80176fc:	1b5a      	subs	r2, r3, r5
 80176fe:	42ab      	cmp	r3, r5
 8017700:	d004      	beq.n	801770c <_dtoa_r+0x7dc>
 8017702:	9904      	ldr	r1, [sp, #16]
 8017704:	9803      	ldr	r0, [sp, #12]
 8017706:	f001 f89b 	bl	8018840 <__pow5mult>
 801770a:	9004      	str	r0, [sp, #16]
 801770c:	2101      	movs	r1, #1
 801770e:	9803      	ldr	r0, [sp, #12]
 8017710:	f000 ffd0 	bl	80186b4 <__i2b>
 8017714:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017716:	0006      	movs	r6, r0
 8017718:	2b00      	cmp	r3, #0
 801771a:	dd40      	ble.n	801779e <_dtoa_r+0x86e>
 801771c:	001a      	movs	r2, r3
 801771e:	0001      	movs	r1, r0
 8017720:	9803      	ldr	r0, [sp, #12]
 8017722:	f001 f88d 	bl	8018840 <__pow5mult>
 8017726:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017728:	0006      	movs	r6, r0
 801772a:	2500      	movs	r5, #0
 801772c:	2b01      	cmp	r3, #1
 801772e:	dc3e      	bgt.n	80177ae <_dtoa_r+0x87e>
 8017730:	2500      	movs	r5, #0
 8017732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017734:	42ab      	cmp	r3, r5
 8017736:	d136      	bne.n	80177a6 <_dtoa_r+0x876>
 8017738:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801773a:	031b      	lsls	r3, r3, #12
 801773c:	42ab      	cmp	r3, r5
 801773e:	d132      	bne.n	80177a6 <_dtoa_r+0x876>
 8017740:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8017742:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017744:	4213      	tst	r3, r2
 8017746:	d02e      	beq.n	80177a6 <_dtoa_r+0x876>
 8017748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801774a:	3501      	adds	r5, #1
 801774c:	3301      	adds	r3, #1
 801774e:	9309      	str	r3, [sp, #36]	; 0x24
 8017750:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017752:	3301      	adds	r3, #1
 8017754:	930d      	str	r3, [sp, #52]	; 0x34
 8017756:	e026      	b.n	80177a6 <_dtoa_r+0x876>
 8017758:	2336      	movs	r3, #54	; 0x36
 801775a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801775c:	1a9b      	subs	r3, r3, r2
 801775e:	e795      	b.n	801768c <_dtoa_r+0x75c>
 8017760:	9b08      	ldr	r3, [sp, #32]
 8017762:	1e5d      	subs	r5, r3, #1
 8017764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017766:	42ab      	cmp	r3, r5
 8017768:	db08      	blt.n	801777c <_dtoa_r+0x84c>
 801776a:	1b5d      	subs	r5, r3, r5
 801776c:	9b08      	ldr	r3, [sp, #32]
 801776e:	2b00      	cmp	r3, #0
 8017770:	da0c      	bge.n	801778c <_dtoa_r+0x85c>
 8017772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017774:	9a08      	ldr	r2, [sp, #32]
 8017776:	1a9c      	subs	r4, r3, r2
 8017778:	2300      	movs	r3, #0
 801777a:	e789      	b.n	8017690 <_dtoa_r+0x760>
 801777c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801777e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017780:	1aeb      	subs	r3, r5, r3
 8017782:	18d3      	adds	r3, r2, r3
 8017784:	950e      	str	r5, [sp, #56]	; 0x38
 8017786:	9313      	str	r3, [sp, #76]	; 0x4c
 8017788:	2500      	movs	r5, #0
 801778a:	e7ef      	b.n	801776c <_dtoa_r+0x83c>
 801778c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801778e:	9b08      	ldr	r3, [sp, #32]
 8017790:	e77e      	b.n	8017690 <_dtoa_r+0x760>
 8017792:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8017794:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8017796:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8017798:	e785      	b.n	80176a6 <_dtoa_r+0x776>
 801779a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801779c:	e7b1      	b.n	8017702 <_dtoa_r+0x7d2>
 801779e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80177a0:	2500      	movs	r5, #0
 80177a2:	2b01      	cmp	r3, #1
 80177a4:	ddc4      	ble.n	8017730 <_dtoa_r+0x800>
 80177a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80177a8:	2001      	movs	r0, #1
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d008      	beq.n	80177c0 <_dtoa_r+0x890>
 80177ae:	6933      	ldr	r3, [r6, #16]
 80177b0:	3303      	adds	r3, #3
 80177b2:	009b      	lsls	r3, r3, #2
 80177b4:	18f3      	adds	r3, r6, r3
 80177b6:	6858      	ldr	r0, [r3, #4]
 80177b8:	f000 ff34 	bl	8018624 <__hi0bits>
 80177bc:	2320      	movs	r3, #32
 80177be:	1a18      	subs	r0, r3, r0
 80177c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80177c2:	221f      	movs	r2, #31
 80177c4:	1818      	adds	r0, r3, r0
 80177c6:	0003      	movs	r3, r0
 80177c8:	4013      	ands	r3, r2
 80177ca:	4210      	tst	r0, r2
 80177cc:	d046      	beq.n	801785c <_dtoa_r+0x92c>
 80177ce:	3201      	adds	r2, #1
 80177d0:	1ad2      	subs	r2, r2, r3
 80177d2:	2a04      	cmp	r2, #4
 80177d4:	dd3f      	ble.n	8017856 <_dtoa_r+0x926>
 80177d6:	221c      	movs	r2, #28
 80177d8:	1ad3      	subs	r3, r2, r3
 80177da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80177dc:	18e4      	adds	r4, r4, r3
 80177de:	18d2      	adds	r2, r2, r3
 80177e0:	9209      	str	r2, [sp, #36]	; 0x24
 80177e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80177e4:	18d3      	adds	r3, r2, r3
 80177e6:	930d      	str	r3, [sp, #52]	; 0x34
 80177e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	dd05      	ble.n	80177fa <_dtoa_r+0x8ca>
 80177ee:	001a      	movs	r2, r3
 80177f0:	9904      	ldr	r1, [sp, #16]
 80177f2:	9803      	ldr	r0, [sp, #12]
 80177f4:	f001 f866 	bl	80188c4 <__lshift>
 80177f8:	9004      	str	r0, [sp, #16]
 80177fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	dd05      	ble.n	801780c <_dtoa_r+0x8dc>
 8017800:	0031      	movs	r1, r6
 8017802:	001a      	movs	r2, r3
 8017804:	9803      	ldr	r0, [sp, #12]
 8017806:	f001 f85d 	bl	80188c4 <__lshift>
 801780a:	0006      	movs	r6, r0
 801780c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801780e:	2b00      	cmp	r3, #0
 8017810:	d026      	beq.n	8017860 <_dtoa_r+0x930>
 8017812:	0031      	movs	r1, r6
 8017814:	9804      	ldr	r0, [sp, #16]
 8017816:	f001 f8c5 	bl	80189a4 <__mcmp>
 801781a:	2800      	cmp	r0, #0
 801781c:	da20      	bge.n	8017860 <_dtoa_r+0x930>
 801781e:	9b02      	ldr	r3, [sp, #8]
 8017820:	220a      	movs	r2, #10
 8017822:	3b01      	subs	r3, #1
 8017824:	9302      	str	r3, [sp, #8]
 8017826:	9904      	ldr	r1, [sp, #16]
 8017828:	2300      	movs	r3, #0
 801782a:	9803      	ldr	r0, [sp, #12]
 801782c:	f000 fe6a 	bl	8018504 <__multadd>
 8017830:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017832:	9004      	str	r0, [sp, #16]
 8017834:	2b00      	cmp	r3, #0
 8017836:	d100      	bne.n	801783a <_dtoa_r+0x90a>
 8017838:	e154      	b.n	8017ae4 <_dtoa_r+0xbb4>
 801783a:	2300      	movs	r3, #0
 801783c:	0039      	movs	r1, r7
 801783e:	220a      	movs	r2, #10
 8017840:	9803      	ldr	r0, [sp, #12]
 8017842:	f000 fe5f 	bl	8018504 <__multadd>
 8017846:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017848:	0007      	movs	r7, r0
 801784a:	2b00      	cmp	r3, #0
 801784c:	dc47      	bgt.n	80178de <_dtoa_r+0x9ae>
 801784e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017850:	2b02      	cmp	r3, #2
 8017852:	dc0d      	bgt.n	8017870 <_dtoa_r+0x940>
 8017854:	e043      	b.n	80178de <_dtoa_r+0x9ae>
 8017856:	2a04      	cmp	r2, #4
 8017858:	d0c6      	beq.n	80177e8 <_dtoa_r+0x8b8>
 801785a:	0013      	movs	r3, r2
 801785c:	331c      	adds	r3, #28
 801785e:	e7bc      	b.n	80177da <_dtoa_r+0x8aa>
 8017860:	9b08      	ldr	r3, [sp, #32]
 8017862:	2b00      	cmp	r3, #0
 8017864:	dc35      	bgt.n	80178d2 <_dtoa_r+0x9a2>
 8017866:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017868:	2b02      	cmp	r3, #2
 801786a:	dd32      	ble.n	80178d2 <_dtoa_r+0x9a2>
 801786c:	9b08      	ldr	r3, [sp, #32]
 801786e:	930c      	str	r3, [sp, #48]	; 0x30
 8017870:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017872:	2b00      	cmp	r3, #0
 8017874:	d10c      	bne.n	8017890 <_dtoa_r+0x960>
 8017876:	0031      	movs	r1, r6
 8017878:	2205      	movs	r2, #5
 801787a:	9803      	ldr	r0, [sp, #12]
 801787c:	f000 fe42 	bl	8018504 <__multadd>
 8017880:	0006      	movs	r6, r0
 8017882:	0001      	movs	r1, r0
 8017884:	9804      	ldr	r0, [sp, #16]
 8017886:	f001 f88d 	bl	80189a4 <__mcmp>
 801788a:	2800      	cmp	r0, #0
 801788c:	dd00      	ble.n	8017890 <_dtoa_r+0x960>
 801788e:	e5a8      	b.n	80173e2 <_dtoa_r+0x4b2>
 8017890:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8017892:	43db      	mvns	r3, r3
 8017894:	9302      	str	r3, [sp, #8]
 8017896:	9b05      	ldr	r3, [sp, #20]
 8017898:	9306      	str	r3, [sp, #24]
 801789a:	2500      	movs	r5, #0
 801789c:	0031      	movs	r1, r6
 801789e:	9803      	ldr	r0, [sp, #12]
 80178a0:	f000 fe26 	bl	80184f0 <_Bfree>
 80178a4:	2f00      	cmp	r7, #0
 80178a6:	d100      	bne.n	80178aa <_dtoa_r+0x97a>
 80178a8:	e69e      	b.n	80175e8 <_dtoa_r+0x6b8>
 80178aa:	2d00      	cmp	r5, #0
 80178ac:	d005      	beq.n	80178ba <_dtoa_r+0x98a>
 80178ae:	42bd      	cmp	r5, r7
 80178b0:	d003      	beq.n	80178ba <_dtoa_r+0x98a>
 80178b2:	0029      	movs	r1, r5
 80178b4:	9803      	ldr	r0, [sp, #12]
 80178b6:	f000 fe1b 	bl	80184f0 <_Bfree>
 80178ba:	0039      	movs	r1, r7
 80178bc:	9803      	ldr	r0, [sp, #12]
 80178be:	f000 fe17 	bl	80184f0 <_Bfree>
 80178c2:	e691      	b.n	80175e8 <_dtoa_r+0x6b8>
 80178c4:	2600      	movs	r6, #0
 80178c6:	0037      	movs	r7, r6
 80178c8:	e7e2      	b.n	8017890 <_dtoa_r+0x960>
 80178ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80178cc:	0037      	movs	r7, r6
 80178ce:	9302      	str	r3, [sp, #8]
 80178d0:	e587      	b.n	80173e2 <_dtoa_r+0x4b2>
 80178d2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d100      	bne.n	80178da <_dtoa_r+0x9aa>
 80178d8:	e0bc      	b.n	8017a54 <_dtoa_r+0xb24>
 80178da:	9b08      	ldr	r3, [sp, #32]
 80178dc:	930c      	str	r3, [sp, #48]	; 0x30
 80178de:	2c00      	cmp	r4, #0
 80178e0:	dd05      	ble.n	80178ee <_dtoa_r+0x9be>
 80178e2:	0039      	movs	r1, r7
 80178e4:	0022      	movs	r2, r4
 80178e6:	9803      	ldr	r0, [sp, #12]
 80178e8:	f000 ffec 	bl	80188c4 <__lshift>
 80178ec:	0007      	movs	r7, r0
 80178ee:	0038      	movs	r0, r7
 80178f0:	2d00      	cmp	r5, #0
 80178f2:	d01e      	beq.n	8017932 <_dtoa_r+0xa02>
 80178f4:	6879      	ldr	r1, [r7, #4]
 80178f6:	9803      	ldr	r0, [sp, #12]
 80178f8:	f000 fdd2 	bl	80184a0 <_Balloc>
 80178fc:	1e04      	subs	r4, r0, #0
 80178fe:	d10b      	bne.n	8017918 <_dtoa_r+0x9e8>
 8017900:	0002      	movs	r2, r0
 8017902:	4b03      	ldr	r3, [pc, #12]	; (8017910 <_dtoa_r+0x9e0>)
 8017904:	4903      	ldr	r1, [pc, #12]	; (8017914 <_dtoa_r+0x9e4>)
 8017906:	e444      	b.n	8017192 <_dtoa_r+0x262>
 8017908:	40240000 	.word	0x40240000
 801790c:	00000433 	.word	0x00000433
 8017910:	0801d849 	.word	0x0801d849
 8017914:	000002ea 	.word	0x000002ea
 8017918:	0039      	movs	r1, r7
 801791a:	693b      	ldr	r3, [r7, #16]
 801791c:	310c      	adds	r1, #12
 801791e:	1c9a      	adds	r2, r3, #2
 8017920:	0092      	lsls	r2, r2, #2
 8017922:	300c      	adds	r0, #12
 8017924:	f7fc fe1c 	bl	8014560 <memcpy>
 8017928:	2201      	movs	r2, #1
 801792a:	0021      	movs	r1, r4
 801792c:	9803      	ldr	r0, [sp, #12]
 801792e:	f000 ffc9 	bl	80188c4 <__lshift>
 8017932:	003d      	movs	r5, r7
 8017934:	0007      	movs	r7, r0
 8017936:	9b05      	ldr	r3, [sp, #20]
 8017938:	9308      	str	r3, [sp, #32]
 801793a:	0031      	movs	r1, r6
 801793c:	9804      	ldr	r0, [sp, #16]
 801793e:	f7ff fa6b 	bl	8016e18 <quorem>
 8017942:	0029      	movs	r1, r5
 8017944:	0004      	movs	r4, r0
 8017946:	900d      	str	r0, [sp, #52]	; 0x34
 8017948:	9804      	ldr	r0, [sp, #16]
 801794a:	f001 f82b 	bl	80189a4 <__mcmp>
 801794e:	003a      	movs	r2, r7
 8017950:	900e      	str	r0, [sp, #56]	; 0x38
 8017952:	0031      	movs	r1, r6
 8017954:	9803      	ldr	r0, [sp, #12]
 8017956:	f001 f841 	bl	80189dc <__mdiff>
 801795a:	68c3      	ldr	r3, [r0, #12]
 801795c:	3430      	adds	r4, #48	; 0x30
 801795e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017960:	2301      	movs	r3, #1
 8017962:	9309      	str	r3, [sp, #36]	; 0x24
 8017964:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017966:	9006      	str	r0, [sp, #24]
 8017968:	2b00      	cmp	r3, #0
 801796a:	d104      	bne.n	8017976 <_dtoa_r+0xa46>
 801796c:	0001      	movs	r1, r0
 801796e:	9804      	ldr	r0, [sp, #16]
 8017970:	f001 f818 	bl	80189a4 <__mcmp>
 8017974:	9009      	str	r0, [sp, #36]	; 0x24
 8017976:	9803      	ldr	r0, [sp, #12]
 8017978:	9906      	ldr	r1, [sp, #24]
 801797a:	f000 fdb9 	bl	80184f0 <_Bfree>
 801797e:	2301      	movs	r3, #1
 8017980:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017982:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017984:	4018      	ands	r0, r3
 8017986:	9b08      	ldr	r3, [sp, #32]
 8017988:	3301      	adds	r3, #1
 801798a:	9306      	str	r3, [sp, #24]
 801798c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801798e:	4313      	orrs	r3, r2
 8017990:	4303      	orrs	r3, r0
 8017992:	d109      	bne.n	80179a8 <_dtoa_r+0xa78>
 8017994:	2c39      	cmp	r4, #57	; 0x39
 8017996:	d021      	beq.n	80179dc <_dtoa_r+0xaac>
 8017998:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801799a:	2b00      	cmp	r3, #0
 801799c:	dd01      	ble.n	80179a2 <_dtoa_r+0xa72>
 801799e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80179a0:	3431      	adds	r4, #49	; 0x31
 80179a2:	9b08      	ldr	r3, [sp, #32]
 80179a4:	701c      	strb	r4, [r3, #0]
 80179a6:	e779      	b.n	801789c <_dtoa_r+0x96c>
 80179a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	db03      	blt.n	80179b6 <_dtoa_r+0xa86>
 80179ae:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80179b0:	4313      	orrs	r3, r2
 80179b2:	4303      	orrs	r3, r0
 80179b4:	d11e      	bne.n	80179f4 <_dtoa_r+0xac4>
 80179b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	ddf2      	ble.n	80179a2 <_dtoa_r+0xa72>
 80179bc:	9904      	ldr	r1, [sp, #16]
 80179be:	2201      	movs	r2, #1
 80179c0:	9803      	ldr	r0, [sp, #12]
 80179c2:	f000 ff7f 	bl	80188c4 <__lshift>
 80179c6:	0031      	movs	r1, r6
 80179c8:	9004      	str	r0, [sp, #16]
 80179ca:	f000 ffeb 	bl	80189a4 <__mcmp>
 80179ce:	2800      	cmp	r0, #0
 80179d0:	dc02      	bgt.n	80179d8 <_dtoa_r+0xaa8>
 80179d2:	d1e6      	bne.n	80179a2 <_dtoa_r+0xa72>
 80179d4:	07e3      	lsls	r3, r4, #31
 80179d6:	d5e4      	bpl.n	80179a2 <_dtoa_r+0xa72>
 80179d8:	2c39      	cmp	r4, #57	; 0x39
 80179da:	d1e0      	bne.n	801799e <_dtoa_r+0xa6e>
 80179dc:	2339      	movs	r3, #57	; 0x39
 80179de:	9a08      	ldr	r2, [sp, #32]
 80179e0:	7013      	strb	r3, [r2, #0]
 80179e2:	9b06      	ldr	r3, [sp, #24]
 80179e4:	9306      	str	r3, [sp, #24]
 80179e6:	3b01      	subs	r3, #1
 80179e8:	781a      	ldrb	r2, [r3, #0]
 80179ea:	2a39      	cmp	r2, #57	; 0x39
 80179ec:	d067      	beq.n	8017abe <_dtoa_r+0xb8e>
 80179ee:	3201      	adds	r2, #1
 80179f0:	701a      	strb	r2, [r3, #0]
 80179f2:	e753      	b.n	801789c <_dtoa_r+0x96c>
 80179f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	dd03      	ble.n	8017a02 <_dtoa_r+0xad2>
 80179fa:	2c39      	cmp	r4, #57	; 0x39
 80179fc:	d0ee      	beq.n	80179dc <_dtoa_r+0xaac>
 80179fe:	3401      	adds	r4, #1
 8017a00:	e7cf      	b.n	80179a2 <_dtoa_r+0xa72>
 8017a02:	9b08      	ldr	r3, [sp, #32]
 8017a04:	9a05      	ldr	r2, [sp, #20]
 8017a06:	701c      	strb	r4, [r3, #0]
 8017a08:	2301      	movs	r3, #1
 8017a0a:	1a9b      	subs	r3, r3, r2
 8017a0c:	9a08      	ldr	r2, [sp, #32]
 8017a0e:	189b      	adds	r3, r3, r2
 8017a10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017a12:	429a      	cmp	r2, r3
 8017a14:	d03e      	beq.n	8017a94 <_dtoa_r+0xb64>
 8017a16:	2300      	movs	r3, #0
 8017a18:	220a      	movs	r2, #10
 8017a1a:	9904      	ldr	r1, [sp, #16]
 8017a1c:	9803      	ldr	r0, [sp, #12]
 8017a1e:	f000 fd71 	bl	8018504 <__multadd>
 8017a22:	2300      	movs	r3, #0
 8017a24:	9004      	str	r0, [sp, #16]
 8017a26:	220a      	movs	r2, #10
 8017a28:	0029      	movs	r1, r5
 8017a2a:	9803      	ldr	r0, [sp, #12]
 8017a2c:	42bd      	cmp	r5, r7
 8017a2e:	d106      	bne.n	8017a3e <_dtoa_r+0xb0e>
 8017a30:	f000 fd68 	bl	8018504 <__multadd>
 8017a34:	0005      	movs	r5, r0
 8017a36:	0007      	movs	r7, r0
 8017a38:	9b06      	ldr	r3, [sp, #24]
 8017a3a:	9308      	str	r3, [sp, #32]
 8017a3c:	e77d      	b.n	801793a <_dtoa_r+0xa0a>
 8017a3e:	f000 fd61 	bl	8018504 <__multadd>
 8017a42:	0039      	movs	r1, r7
 8017a44:	0005      	movs	r5, r0
 8017a46:	2300      	movs	r3, #0
 8017a48:	220a      	movs	r2, #10
 8017a4a:	9803      	ldr	r0, [sp, #12]
 8017a4c:	f000 fd5a 	bl	8018504 <__multadd>
 8017a50:	0007      	movs	r7, r0
 8017a52:	e7f1      	b.n	8017a38 <_dtoa_r+0xb08>
 8017a54:	9b08      	ldr	r3, [sp, #32]
 8017a56:	930c      	str	r3, [sp, #48]	; 0x30
 8017a58:	2500      	movs	r5, #0
 8017a5a:	0031      	movs	r1, r6
 8017a5c:	9804      	ldr	r0, [sp, #16]
 8017a5e:	f7ff f9db 	bl	8016e18 <quorem>
 8017a62:	9b05      	ldr	r3, [sp, #20]
 8017a64:	3030      	adds	r0, #48	; 0x30
 8017a66:	5558      	strb	r0, [r3, r5]
 8017a68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017a6a:	3501      	adds	r5, #1
 8017a6c:	0004      	movs	r4, r0
 8017a6e:	42ab      	cmp	r3, r5
 8017a70:	dd07      	ble.n	8017a82 <_dtoa_r+0xb52>
 8017a72:	2300      	movs	r3, #0
 8017a74:	220a      	movs	r2, #10
 8017a76:	9904      	ldr	r1, [sp, #16]
 8017a78:	9803      	ldr	r0, [sp, #12]
 8017a7a:	f000 fd43 	bl	8018504 <__multadd>
 8017a7e:	9004      	str	r0, [sp, #16]
 8017a80:	e7eb      	b.n	8017a5a <_dtoa_r+0xb2a>
 8017a82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017a84:	2001      	movs	r0, #1
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	dd00      	ble.n	8017a8c <_dtoa_r+0xb5c>
 8017a8a:	0018      	movs	r0, r3
 8017a8c:	2500      	movs	r5, #0
 8017a8e:	9b05      	ldr	r3, [sp, #20]
 8017a90:	181b      	adds	r3, r3, r0
 8017a92:	9306      	str	r3, [sp, #24]
 8017a94:	9904      	ldr	r1, [sp, #16]
 8017a96:	2201      	movs	r2, #1
 8017a98:	9803      	ldr	r0, [sp, #12]
 8017a9a:	f000 ff13 	bl	80188c4 <__lshift>
 8017a9e:	0031      	movs	r1, r6
 8017aa0:	9004      	str	r0, [sp, #16]
 8017aa2:	f000 ff7f 	bl	80189a4 <__mcmp>
 8017aa6:	2800      	cmp	r0, #0
 8017aa8:	dc9b      	bgt.n	80179e2 <_dtoa_r+0xab2>
 8017aaa:	d101      	bne.n	8017ab0 <_dtoa_r+0xb80>
 8017aac:	07e3      	lsls	r3, r4, #31
 8017aae:	d498      	bmi.n	80179e2 <_dtoa_r+0xab2>
 8017ab0:	9b06      	ldr	r3, [sp, #24]
 8017ab2:	9306      	str	r3, [sp, #24]
 8017ab4:	3b01      	subs	r3, #1
 8017ab6:	781a      	ldrb	r2, [r3, #0]
 8017ab8:	2a30      	cmp	r2, #48	; 0x30
 8017aba:	d0fa      	beq.n	8017ab2 <_dtoa_r+0xb82>
 8017abc:	e6ee      	b.n	801789c <_dtoa_r+0x96c>
 8017abe:	9a05      	ldr	r2, [sp, #20]
 8017ac0:	429a      	cmp	r2, r3
 8017ac2:	d18f      	bne.n	80179e4 <_dtoa_r+0xab4>
 8017ac4:	9b02      	ldr	r3, [sp, #8]
 8017ac6:	3301      	adds	r3, #1
 8017ac8:	9302      	str	r3, [sp, #8]
 8017aca:	2331      	movs	r3, #49	; 0x31
 8017acc:	7013      	strb	r3, [r2, #0]
 8017ace:	e6e5      	b.n	801789c <_dtoa_r+0x96c>
 8017ad0:	4b08      	ldr	r3, [pc, #32]	; (8017af4 <_dtoa_r+0xbc4>)
 8017ad2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8017ad4:	9305      	str	r3, [sp, #20]
 8017ad6:	4b08      	ldr	r3, [pc, #32]	; (8017af8 <_dtoa_r+0xbc8>)
 8017ad8:	2a00      	cmp	r2, #0
 8017ada:	d001      	beq.n	8017ae0 <_dtoa_r+0xbb0>
 8017adc:	f7ff fa5a 	bl	8016f94 <_dtoa_r+0x64>
 8017ae0:	f7ff fa5a 	bl	8016f98 <_dtoa_r+0x68>
 8017ae4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	dcb6      	bgt.n	8017a58 <_dtoa_r+0xb28>
 8017aea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8017aec:	2b02      	cmp	r3, #2
 8017aee:	dd00      	ble.n	8017af2 <_dtoa_r+0xbc2>
 8017af0:	e6be      	b.n	8017870 <_dtoa_r+0x940>
 8017af2:	e7b1      	b.n	8017a58 <_dtoa_r+0xb28>
 8017af4:	0801d840 	.word	0x0801d840
 8017af8:	0801d848 	.word	0x0801d848

08017afc <__errno>:
 8017afc:	4b01      	ldr	r3, [pc, #4]	; (8017b04 <__errno+0x8>)
 8017afe:	6818      	ldr	r0, [r3, #0]
 8017b00:	4770      	bx	lr
 8017b02:	46c0      	nop			; (mov r8, r8)
 8017b04:	20000190 	.word	0x20000190

08017b08 <__libc_fini_array>:
 8017b08:	b570      	push	{r4, r5, r6, lr}
 8017b0a:	4d07      	ldr	r5, [pc, #28]	; (8017b28 <__libc_fini_array+0x20>)
 8017b0c:	4c07      	ldr	r4, [pc, #28]	; (8017b2c <__libc_fini_array+0x24>)
 8017b0e:	1b64      	subs	r4, r4, r5
 8017b10:	10a4      	asrs	r4, r4, #2
 8017b12:	2c00      	cmp	r4, #0
 8017b14:	d102      	bne.n	8017b1c <__libc_fini_array+0x14>
 8017b16:	f002 fe49 	bl	801a7ac <_fini>
 8017b1a:	bd70      	pop	{r4, r5, r6, pc}
 8017b1c:	3c01      	subs	r4, #1
 8017b1e:	00a3      	lsls	r3, r4, #2
 8017b20:	58eb      	ldr	r3, [r5, r3]
 8017b22:	4798      	blx	r3
 8017b24:	e7f5      	b.n	8017b12 <__libc_fini_array+0xa>
 8017b26:	46c0      	nop			; (mov r8, r8)
 8017b28:	0801db00 	.word	0x0801db00
 8017b2c:	0801db04 	.word	0x0801db04

08017b30 <_malloc_trim_r>:
 8017b30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017b32:	0004      	movs	r4, r0
 8017b34:	2008      	movs	r0, #8
 8017b36:	000d      	movs	r5, r1
 8017b38:	f7ff f94e 	bl	8016dd8 <sysconf>
 8017b3c:	0006      	movs	r6, r0
 8017b3e:	0020      	movs	r0, r4
 8017b40:	f7fc fd20 	bl	8014584 <__malloc_lock>
 8017b44:	2203      	movs	r2, #3
 8017b46:	4f21      	ldr	r7, [pc, #132]	; (8017bcc <_malloc_trim_r+0x9c>)
 8017b48:	0031      	movs	r1, r6
 8017b4a:	68bb      	ldr	r3, [r7, #8]
 8017b4c:	685b      	ldr	r3, [r3, #4]
 8017b4e:	4393      	bics	r3, r2
 8017b50:	1b58      	subs	r0, r3, r5
 8017b52:	3811      	subs	r0, #17
 8017b54:	1980      	adds	r0, r0, r6
 8017b56:	9301      	str	r3, [sp, #4]
 8017b58:	f7e8 fafa 	bl	8000150 <__udivsi3>
 8017b5c:	1e45      	subs	r5, r0, #1
 8017b5e:	4375      	muls	r5, r6
 8017b60:	42ae      	cmp	r6, r5
 8017b62:	dd04      	ble.n	8017b6e <_malloc_trim_r+0x3e>
 8017b64:	0020      	movs	r0, r4
 8017b66:	f7fc fd15 	bl	8014594 <__malloc_unlock>
 8017b6a:	2000      	movs	r0, #0
 8017b6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017b6e:	2100      	movs	r1, #0
 8017b70:	0020      	movs	r0, r4
 8017b72:	f7fc fee1 	bl	8014938 <_sbrk_r>
 8017b76:	68bb      	ldr	r3, [r7, #8]
 8017b78:	9a01      	ldr	r2, [sp, #4]
 8017b7a:	189b      	adds	r3, r3, r2
 8017b7c:	4298      	cmp	r0, r3
 8017b7e:	d1f1      	bne.n	8017b64 <_malloc_trim_r+0x34>
 8017b80:	0020      	movs	r0, r4
 8017b82:	4269      	negs	r1, r5
 8017b84:	f7fc fed8 	bl	8014938 <_sbrk_r>
 8017b88:	1c43      	adds	r3, r0, #1
 8017b8a:	d110      	bne.n	8017bae <_malloc_trim_r+0x7e>
 8017b8c:	2100      	movs	r1, #0
 8017b8e:	0020      	movs	r0, r4
 8017b90:	f7fc fed2 	bl	8014938 <_sbrk_r>
 8017b94:	68ba      	ldr	r2, [r7, #8]
 8017b96:	1a81      	subs	r1, r0, r2
 8017b98:	290f      	cmp	r1, #15
 8017b9a:	dde3      	ble.n	8017b64 <_malloc_trim_r+0x34>
 8017b9c:	4b0c      	ldr	r3, [pc, #48]	; (8017bd0 <_malloc_trim_r+0xa0>)
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	1ac0      	subs	r0, r0, r3
 8017ba2:	4b0c      	ldr	r3, [pc, #48]	; (8017bd4 <_malloc_trim_r+0xa4>)
 8017ba4:	6018      	str	r0, [r3, #0]
 8017ba6:	2301      	movs	r3, #1
 8017ba8:	430b      	orrs	r3, r1
 8017baa:	6053      	str	r3, [r2, #4]
 8017bac:	e7da      	b.n	8017b64 <_malloc_trim_r+0x34>
 8017bae:	2601      	movs	r6, #1
 8017bb0:	9b01      	ldr	r3, [sp, #4]
 8017bb2:	68ba      	ldr	r2, [r7, #8]
 8017bb4:	1b5b      	subs	r3, r3, r5
 8017bb6:	4333      	orrs	r3, r6
 8017bb8:	6053      	str	r3, [r2, #4]
 8017bba:	4b06      	ldr	r3, [pc, #24]	; (8017bd4 <_malloc_trim_r+0xa4>)
 8017bbc:	0020      	movs	r0, r4
 8017bbe:	681a      	ldr	r2, [r3, #0]
 8017bc0:	1b55      	subs	r5, r2, r5
 8017bc2:	601d      	str	r5, [r3, #0]
 8017bc4:	f7fc fce6 	bl	8014594 <__malloc_unlock>
 8017bc8:	0030      	movs	r0, r6
 8017bca:	e7cf      	b.n	8017b6c <_malloc_trim_r+0x3c>
 8017bcc:	200005c0 	.word	0x200005c0
 8017bd0:	200009c8 	.word	0x200009c8
 8017bd4:	20006630 	.word	0x20006630

08017bd8 <_free_r>:
 8017bd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017bda:	1e0d      	subs	r5, r1, #0
 8017bdc:	9001      	str	r0, [sp, #4]
 8017bde:	d02d      	beq.n	8017c3c <_free_r+0x64>
 8017be0:	f7fc fcd0 	bl	8014584 <__malloc_lock>
 8017be4:	2301      	movs	r3, #1
 8017be6:	0029      	movs	r1, r5
 8017be8:	469c      	mov	ip, r3
 8017bea:	3908      	subs	r1, #8
 8017bec:	684f      	ldr	r7, [r1, #4]
 8017bee:	4662      	mov	r2, ip
 8017bf0:	003b      	movs	r3, r7
 8017bf2:	4666      	mov	r6, ip
 8017bf4:	4393      	bics	r3, r2
 8017bf6:	18c8      	adds	r0, r1, r3
 8017bf8:	6845      	ldr	r5, [r0, #4]
 8017bfa:	3202      	adds	r2, #2
 8017bfc:	4395      	bics	r5, r2
 8017bfe:	4a4a      	ldr	r2, [pc, #296]	; (8017d28 <_free_r+0x150>)
 8017c00:	4037      	ands	r7, r6
 8017c02:	6896      	ldr	r6, [r2, #8]
 8017c04:	4286      	cmp	r6, r0
 8017c06:	d11a      	bne.n	8017c3e <_free_r+0x66>
 8017c08:	195b      	adds	r3, r3, r5
 8017c0a:	2f00      	cmp	r7, #0
 8017c0c:	d106      	bne.n	8017c1c <_free_r+0x44>
 8017c0e:	6808      	ldr	r0, [r1, #0]
 8017c10:	1a09      	subs	r1, r1, r0
 8017c12:	688d      	ldr	r5, [r1, #8]
 8017c14:	181b      	adds	r3, r3, r0
 8017c16:	68c8      	ldr	r0, [r1, #12]
 8017c18:	60e8      	str	r0, [r5, #12]
 8017c1a:	6085      	str	r5, [r0, #8]
 8017c1c:	2001      	movs	r0, #1
 8017c1e:	4318      	orrs	r0, r3
 8017c20:	6048      	str	r0, [r1, #4]
 8017c22:	6091      	str	r1, [r2, #8]
 8017c24:	4a41      	ldr	r2, [pc, #260]	; (8017d2c <_free_r+0x154>)
 8017c26:	6812      	ldr	r2, [r2, #0]
 8017c28:	429a      	cmp	r2, r3
 8017c2a:	d804      	bhi.n	8017c36 <_free_r+0x5e>
 8017c2c:	4b40      	ldr	r3, [pc, #256]	; (8017d30 <_free_r+0x158>)
 8017c2e:	9801      	ldr	r0, [sp, #4]
 8017c30:	6819      	ldr	r1, [r3, #0]
 8017c32:	f7ff ff7d 	bl	8017b30 <_malloc_trim_r>
 8017c36:	9801      	ldr	r0, [sp, #4]
 8017c38:	f7fc fcac 	bl	8014594 <__malloc_unlock>
 8017c3c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8017c3e:	2600      	movs	r6, #0
 8017c40:	6045      	str	r5, [r0, #4]
 8017c42:	42b7      	cmp	r7, r6
 8017c44:	d109      	bne.n	8017c5a <_free_r+0x82>
 8017c46:	680f      	ldr	r7, [r1, #0]
 8017c48:	4c3a      	ldr	r4, [pc, #232]	; (8017d34 <_free_r+0x15c>)
 8017c4a:	1bc9      	subs	r1, r1, r7
 8017c4c:	19db      	adds	r3, r3, r7
 8017c4e:	688f      	ldr	r7, [r1, #8]
 8017c50:	42a7      	cmp	r7, r4
 8017c52:	d02c      	beq.n	8017cae <_free_r+0xd6>
 8017c54:	68cc      	ldr	r4, [r1, #12]
 8017c56:	60fc      	str	r4, [r7, #12]
 8017c58:	60a7      	str	r7, [r4, #8]
 8017c5a:	1947      	adds	r7, r0, r5
 8017c5c:	687c      	ldr	r4, [r7, #4]
 8017c5e:	2701      	movs	r7, #1
 8017c60:	423c      	tst	r4, r7
 8017c62:	d10b      	bne.n	8017c7c <_free_r+0xa4>
 8017c64:	195b      	adds	r3, r3, r5
 8017c66:	6885      	ldr	r5, [r0, #8]
 8017c68:	2e00      	cmp	r6, #0
 8017c6a:	d122      	bne.n	8017cb2 <_free_r+0xda>
 8017c6c:	4c31      	ldr	r4, [pc, #196]	; (8017d34 <_free_r+0x15c>)
 8017c6e:	42a5      	cmp	r5, r4
 8017c70:	d11f      	bne.n	8017cb2 <_free_r+0xda>
 8017c72:	003e      	movs	r6, r7
 8017c74:	6151      	str	r1, [r2, #20]
 8017c76:	6111      	str	r1, [r2, #16]
 8017c78:	60cd      	str	r5, [r1, #12]
 8017c7a:	608d      	str	r5, [r1, #8]
 8017c7c:	2501      	movs	r5, #1
 8017c7e:	0028      	movs	r0, r5
 8017c80:	4318      	orrs	r0, r3
 8017c82:	6048      	str	r0, [r1, #4]
 8017c84:	50cb      	str	r3, [r1, r3]
 8017c86:	2e00      	cmp	r6, #0
 8017c88:	d1d5      	bne.n	8017c36 <_free_r+0x5e>
 8017c8a:	2080      	movs	r0, #128	; 0x80
 8017c8c:	0080      	lsls	r0, r0, #2
 8017c8e:	4283      	cmp	r3, r0
 8017c90:	d213      	bcs.n	8017cba <_free_r+0xe2>
 8017c92:	08d8      	lsrs	r0, r3, #3
 8017c94:	095b      	lsrs	r3, r3, #5
 8017c96:	409d      	lsls	r5, r3
 8017c98:	6853      	ldr	r3, [r2, #4]
 8017c9a:	00c0      	lsls	r0, r0, #3
 8017c9c:	431d      	orrs	r5, r3
 8017c9e:	6055      	str	r5, [r2, #4]
 8017ca0:	1882      	adds	r2, r0, r2
 8017ca2:	6893      	ldr	r3, [r2, #8]
 8017ca4:	60ca      	str	r2, [r1, #12]
 8017ca6:	608b      	str	r3, [r1, #8]
 8017ca8:	6091      	str	r1, [r2, #8]
 8017caa:	60d9      	str	r1, [r3, #12]
 8017cac:	e7c3      	b.n	8017c36 <_free_r+0x5e>
 8017cae:	4666      	mov	r6, ip
 8017cb0:	e7d3      	b.n	8017c5a <_free_r+0x82>
 8017cb2:	68c0      	ldr	r0, [r0, #12]
 8017cb4:	60e8      	str	r0, [r5, #12]
 8017cb6:	6085      	str	r5, [r0, #8]
 8017cb8:	e7e0      	b.n	8017c7c <_free_r+0xa4>
 8017cba:	0a5d      	lsrs	r5, r3, #9
 8017cbc:	2d04      	cmp	r5, #4
 8017cbe:	d812      	bhi.n	8017ce6 <_free_r+0x10e>
 8017cc0:	0998      	lsrs	r0, r3, #6
 8017cc2:	3038      	adds	r0, #56	; 0x38
 8017cc4:	00c6      	lsls	r6, r0, #3
 8017cc6:	18b6      	adds	r6, r6, r2
 8017cc8:	68b5      	ldr	r5, [r6, #8]
 8017cca:	2703      	movs	r7, #3
 8017ccc:	42ae      	cmp	r6, r5
 8017cce:	d125      	bne.n	8017d1c <_free_r+0x144>
 8017cd0:	2301      	movs	r3, #1
 8017cd2:	1080      	asrs	r0, r0, #2
 8017cd4:	4083      	lsls	r3, r0
 8017cd6:	6850      	ldr	r0, [r2, #4]
 8017cd8:	4303      	orrs	r3, r0
 8017cda:	6053      	str	r3, [r2, #4]
 8017cdc:	60ce      	str	r6, [r1, #12]
 8017cde:	608d      	str	r5, [r1, #8]
 8017ce0:	60b1      	str	r1, [r6, #8]
 8017ce2:	60e9      	str	r1, [r5, #12]
 8017ce4:	e7a7      	b.n	8017c36 <_free_r+0x5e>
 8017ce6:	2d14      	cmp	r5, #20
 8017ce8:	d802      	bhi.n	8017cf0 <_free_r+0x118>
 8017cea:	0028      	movs	r0, r5
 8017cec:	305b      	adds	r0, #91	; 0x5b
 8017cee:	e7e9      	b.n	8017cc4 <_free_r+0xec>
 8017cf0:	2d54      	cmp	r5, #84	; 0x54
 8017cf2:	d802      	bhi.n	8017cfa <_free_r+0x122>
 8017cf4:	0b18      	lsrs	r0, r3, #12
 8017cf6:	306e      	adds	r0, #110	; 0x6e
 8017cf8:	e7e4      	b.n	8017cc4 <_free_r+0xec>
 8017cfa:	20aa      	movs	r0, #170	; 0xaa
 8017cfc:	0040      	lsls	r0, r0, #1
 8017cfe:	4285      	cmp	r5, r0
 8017d00:	d802      	bhi.n	8017d08 <_free_r+0x130>
 8017d02:	0bd8      	lsrs	r0, r3, #15
 8017d04:	3077      	adds	r0, #119	; 0x77
 8017d06:	e7dd      	b.n	8017cc4 <_free_r+0xec>
 8017d08:	4e0b      	ldr	r6, [pc, #44]	; (8017d38 <_free_r+0x160>)
 8017d0a:	207e      	movs	r0, #126	; 0x7e
 8017d0c:	42b5      	cmp	r5, r6
 8017d0e:	d8d9      	bhi.n	8017cc4 <_free_r+0xec>
 8017d10:	0c98      	lsrs	r0, r3, #18
 8017d12:	307c      	adds	r0, #124	; 0x7c
 8017d14:	e7d6      	b.n	8017cc4 <_free_r+0xec>
 8017d16:	68ad      	ldr	r5, [r5, #8]
 8017d18:	42ae      	cmp	r6, r5
 8017d1a:	d003      	beq.n	8017d24 <_free_r+0x14c>
 8017d1c:	686a      	ldr	r2, [r5, #4]
 8017d1e:	43ba      	bics	r2, r7
 8017d20:	429a      	cmp	r2, r3
 8017d22:	d8f8      	bhi.n	8017d16 <_free_r+0x13e>
 8017d24:	68ee      	ldr	r6, [r5, #12]
 8017d26:	e7d9      	b.n	8017cdc <_free_r+0x104>
 8017d28:	200005c0 	.word	0x200005c0
 8017d2c:	200009cc 	.word	0x200009cc
 8017d30:	20006660 	.word	0x20006660
 8017d34:	200005c8 	.word	0x200005c8
 8017d38:	00000554 	.word	0x00000554

08017d3c <rshift>:
 8017d3c:	0002      	movs	r2, r0
 8017d3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d40:	6907      	ldr	r7, [r0, #16]
 8017d42:	3214      	adds	r2, #20
 8017d44:	0013      	movs	r3, r2
 8017d46:	b085      	sub	sp, #20
 8017d48:	114e      	asrs	r6, r1, #5
 8017d4a:	42b7      	cmp	r7, r6
 8017d4c:	dd31      	ble.n	8017db2 <rshift+0x76>
 8017d4e:	00b3      	lsls	r3, r6, #2
 8017d50:	18d3      	adds	r3, r2, r3
 8017d52:	251f      	movs	r5, #31
 8017d54:	9301      	str	r3, [sp, #4]
 8017d56:	000b      	movs	r3, r1
 8017d58:	00bc      	lsls	r4, r7, #2
 8017d5a:	402b      	ands	r3, r5
 8017d5c:	1914      	adds	r4, r2, r4
 8017d5e:	9302      	str	r3, [sp, #8]
 8017d60:	4229      	tst	r1, r5
 8017d62:	d10c      	bne.n	8017d7e <rshift+0x42>
 8017d64:	0015      	movs	r5, r2
 8017d66:	9901      	ldr	r1, [sp, #4]
 8017d68:	428c      	cmp	r4, r1
 8017d6a:	d838      	bhi.n	8017dde <rshift+0xa2>
 8017d6c:	9901      	ldr	r1, [sp, #4]
 8017d6e:	2300      	movs	r3, #0
 8017d70:	3903      	subs	r1, #3
 8017d72:	428c      	cmp	r4, r1
 8017d74:	d301      	bcc.n	8017d7a <rshift+0x3e>
 8017d76:	1bbb      	subs	r3, r7, r6
 8017d78:	009b      	lsls	r3, r3, #2
 8017d7a:	18d3      	adds	r3, r2, r3
 8017d7c:	e019      	b.n	8017db2 <rshift+0x76>
 8017d7e:	2120      	movs	r1, #32
 8017d80:	9b02      	ldr	r3, [sp, #8]
 8017d82:	9d01      	ldr	r5, [sp, #4]
 8017d84:	1acb      	subs	r3, r1, r3
 8017d86:	9303      	str	r3, [sp, #12]
 8017d88:	cd02      	ldmia	r5!, {r1}
 8017d8a:	9b02      	ldr	r3, [sp, #8]
 8017d8c:	4694      	mov	ip, r2
 8017d8e:	40d9      	lsrs	r1, r3
 8017d90:	9100      	str	r1, [sp, #0]
 8017d92:	42ac      	cmp	r4, r5
 8017d94:	d816      	bhi.n	8017dc4 <rshift+0x88>
 8017d96:	9d01      	ldr	r5, [sp, #4]
 8017d98:	2300      	movs	r3, #0
 8017d9a:	3501      	adds	r5, #1
 8017d9c:	42ac      	cmp	r4, r5
 8017d9e:	d302      	bcc.n	8017da6 <rshift+0x6a>
 8017da0:	1bbb      	subs	r3, r7, r6
 8017da2:	009b      	lsls	r3, r3, #2
 8017da4:	3b04      	subs	r3, #4
 8017da6:	9900      	ldr	r1, [sp, #0]
 8017da8:	18d3      	adds	r3, r2, r3
 8017daa:	6019      	str	r1, [r3, #0]
 8017dac:	2900      	cmp	r1, #0
 8017dae:	d000      	beq.n	8017db2 <rshift+0x76>
 8017db0:	3304      	adds	r3, #4
 8017db2:	1a99      	subs	r1, r3, r2
 8017db4:	1089      	asrs	r1, r1, #2
 8017db6:	6101      	str	r1, [r0, #16]
 8017db8:	4293      	cmp	r3, r2
 8017dba:	d101      	bne.n	8017dc0 <rshift+0x84>
 8017dbc:	2300      	movs	r3, #0
 8017dbe:	6143      	str	r3, [r0, #20]
 8017dc0:	b005      	add	sp, #20
 8017dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017dc4:	682b      	ldr	r3, [r5, #0]
 8017dc6:	9903      	ldr	r1, [sp, #12]
 8017dc8:	408b      	lsls	r3, r1
 8017dca:	9900      	ldr	r1, [sp, #0]
 8017dcc:	4319      	orrs	r1, r3
 8017dce:	4663      	mov	r3, ip
 8017dd0:	c302      	stmia	r3!, {r1}
 8017dd2:	469c      	mov	ip, r3
 8017dd4:	cd02      	ldmia	r5!, {r1}
 8017dd6:	9b02      	ldr	r3, [sp, #8]
 8017dd8:	40d9      	lsrs	r1, r3
 8017dda:	9100      	str	r1, [sp, #0]
 8017ddc:	e7d9      	b.n	8017d92 <rshift+0x56>
 8017dde:	c908      	ldmia	r1!, {r3}
 8017de0:	c508      	stmia	r5!, {r3}
 8017de2:	e7c1      	b.n	8017d68 <rshift+0x2c>

08017de4 <__hexdig_fun>:
 8017de4:	0002      	movs	r2, r0
 8017de6:	3a30      	subs	r2, #48	; 0x30
 8017de8:	0003      	movs	r3, r0
 8017dea:	2a09      	cmp	r2, #9
 8017dec:	d802      	bhi.n	8017df4 <__hexdig_fun+0x10>
 8017dee:	3b20      	subs	r3, #32
 8017df0:	b2d8      	uxtb	r0, r3
 8017df2:	4770      	bx	lr
 8017df4:	0002      	movs	r2, r0
 8017df6:	3a61      	subs	r2, #97	; 0x61
 8017df8:	2a05      	cmp	r2, #5
 8017dfa:	d801      	bhi.n	8017e00 <__hexdig_fun+0x1c>
 8017dfc:	3b47      	subs	r3, #71	; 0x47
 8017dfe:	e7f7      	b.n	8017df0 <__hexdig_fun+0xc>
 8017e00:	001a      	movs	r2, r3
 8017e02:	3a41      	subs	r2, #65	; 0x41
 8017e04:	2000      	movs	r0, #0
 8017e06:	2a05      	cmp	r2, #5
 8017e08:	d8f3      	bhi.n	8017df2 <__hexdig_fun+0xe>
 8017e0a:	3b27      	subs	r3, #39	; 0x27
 8017e0c:	e7f0      	b.n	8017df0 <__hexdig_fun+0xc>
	...

08017e10 <__gethex>:
 8017e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017e12:	b08d      	sub	sp, #52	; 0x34
 8017e14:	930a      	str	r3, [sp, #40]	; 0x28
 8017e16:	4bbd      	ldr	r3, [pc, #756]	; (801810c <__gethex+0x2fc>)
 8017e18:	9005      	str	r0, [sp, #20]
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	9109      	str	r1, [sp, #36]	; 0x24
 8017e1e:	0018      	movs	r0, r3
 8017e20:	9202      	str	r2, [sp, #8]
 8017e22:	9307      	str	r3, [sp, #28]
 8017e24:	f7e8 f978 	bl	8000118 <strlen>
 8017e28:	2202      	movs	r2, #2
 8017e2a:	9b07      	ldr	r3, [sp, #28]
 8017e2c:	4252      	negs	r2, r2
 8017e2e:	181b      	adds	r3, r3, r0
 8017e30:	3b01      	subs	r3, #1
 8017e32:	781b      	ldrb	r3, [r3, #0]
 8017e34:	9003      	str	r0, [sp, #12]
 8017e36:	930b      	str	r3, [sp, #44]	; 0x2c
 8017e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e3a:	6819      	ldr	r1, [r3, #0]
 8017e3c:	1c8b      	adds	r3, r1, #2
 8017e3e:	1a52      	subs	r2, r2, r1
 8017e40:	18d1      	adds	r1, r2, r3
 8017e42:	9301      	str	r3, [sp, #4]
 8017e44:	9108      	str	r1, [sp, #32]
 8017e46:	9901      	ldr	r1, [sp, #4]
 8017e48:	3301      	adds	r3, #1
 8017e4a:	7808      	ldrb	r0, [r1, #0]
 8017e4c:	2830      	cmp	r0, #48	; 0x30
 8017e4e:	d0f7      	beq.n	8017e40 <__gethex+0x30>
 8017e50:	f7ff ffc8 	bl	8017de4 <__hexdig_fun>
 8017e54:	1e04      	subs	r4, r0, #0
 8017e56:	d13e      	bne.n	8017ed6 <__gethex+0xc6>
 8017e58:	9a03      	ldr	r2, [sp, #12]
 8017e5a:	9907      	ldr	r1, [sp, #28]
 8017e5c:	9801      	ldr	r0, [sp, #4]
 8017e5e:	f7fc fdf4 	bl	8014a4a <strncmp>
 8017e62:	1e07      	subs	r7, r0, #0
 8017e64:	d000      	beq.n	8017e68 <__gethex+0x58>
 8017e66:	e06f      	b.n	8017f48 <__gethex+0x138>
 8017e68:	9b01      	ldr	r3, [sp, #4]
 8017e6a:	9a03      	ldr	r2, [sp, #12]
 8017e6c:	5c98      	ldrb	r0, [r3, r2]
 8017e6e:	189d      	adds	r5, r3, r2
 8017e70:	f7ff ffb8 	bl	8017de4 <__hexdig_fun>
 8017e74:	2301      	movs	r3, #1
 8017e76:	9304      	str	r3, [sp, #16]
 8017e78:	2800      	cmp	r0, #0
 8017e7a:	d034      	beq.n	8017ee6 <__gethex+0xd6>
 8017e7c:	9501      	str	r5, [sp, #4]
 8017e7e:	9b01      	ldr	r3, [sp, #4]
 8017e80:	7818      	ldrb	r0, [r3, #0]
 8017e82:	2830      	cmp	r0, #48	; 0x30
 8017e84:	d009      	beq.n	8017e9a <__gethex+0x8a>
 8017e86:	f7ff ffad 	bl	8017de4 <__hexdig_fun>
 8017e8a:	4243      	negs	r3, r0
 8017e8c:	4143      	adcs	r3, r0
 8017e8e:	9304      	str	r3, [sp, #16]
 8017e90:	2301      	movs	r3, #1
 8017e92:	002c      	movs	r4, r5
 8017e94:	9308      	str	r3, [sp, #32]
 8017e96:	9d01      	ldr	r5, [sp, #4]
 8017e98:	e004      	b.n	8017ea4 <__gethex+0x94>
 8017e9a:	9b01      	ldr	r3, [sp, #4]
 8017e9c:	3301      	adds	r3, #1
 8017e9e:	9301      	str	r3, [sp, #4]
 8017ea0:	e7ed      	b.n	8017e7e <__gethex+0x6e>
 8017ea2:	3501      	adds	r5, #1
 8017ea4:	7828      	ldrb	r0, [r5, #0]
 8017ea6:	f7ff ff9d 	bl	8017de4 <__hexdig_fun>
 8017eaa:	1e07      	subs	r7, r0, #0
 8017eac:	d1f9      	bne.n	8017ea2 <__gethex+0x92>
 8017eae:	0028      	movs	r0, r5
 8017eb0:	9a03      	ldr	r2, [sp, #12]
 8017eb2:	9907      	ldr	r1, [sp, #28]
 8017eb4:	f7fc fdc9 	bl	8014a4a <strncmp>
 8017eb8:	2800      	cmp	r0, #0
 8017eba:	d112      	bne.n	8017ee2 <__gethex+0xd2>
 8017ebc:	2c00      	cmp	r4, #0
 8017ebe:	d107      	bne.n	8017ed0 <__gethex+0xc0>
 8017ec0:	9b03      	ldr	r3, [sp, #12]
 8017ec2:	18ed      	adds	r5, r5, r3
 8017ec4:	002c      	movs	r4, r5
 8017ec6:	7828      	ldrb	r0, [r5, #0]
 8017ec8:	f7ff ff8c 	bl	8017de4 <__hexdig_fun>
 8017ecc:	2800      	cmp	r0, #0
 8017ece:	d106      	bne.n	8017ede <__gethex+0xce>
 8017ed0:	1b67      	subs	r7, r4, r5
 8017ed2:	00bf      	lsls	r7, r7, #2
 8017ed4:	e007      	b.n	8017ee6 <__gethex+0xd6>
 8017ed6:	2300      	movs	r3, #0
 8017ed8:	001c      	movs	r4, r3
 8017eda:	9304      	str	r3, [sp, #16]
 8017edc:	e7db      	b.n	8017e96 <__gethex+0x86>
 8017ede:	3501      	adds	r5, #1
 8017ee0:	e7f1      	b.n	8017ec6 <__gethex+0xb6>
 8017ee2:	2c00      	cmp	r4, #0
 8017ee4:	d1f4      	bne.n	8017ed0 <__gethex+0xc0>
 8017ee6:	2220      	movs	r2, #32
 8017ee8:	782b      	ldrb	r3, [r5, #0]
 8017eea:	002e      	movs	r6, r5
 8017eec:	4393      	bics	r3, r2
 8017eee:	2b50      	cmp	r3, #80	; 0x50
 8017ef0:	d11d      	bne.n	8017f2e <__gethex+0x11e>
 8017ef2:	786b      	ldrb	r3, [r5, #1]
 8017ef4:	2b2b      	cmp	r3, #43	; 0x2b
 8017ef6:	d02c      	beq.n	8017f52 <__gethex+0x142>
 8017ef8:	2b2d      	cmp	r3, #45	; 0x2d
 8017efa:	d02e      	beq.n	8017f5a <__gethex+0x14a>
 8017efc:	2300      	movs	r3, #0
 8017efe:	1c6e      	adds	r6, r5, #1
 8017f00:	9306      	str	r3, [sp, #24]
 8017f02:	7830      	ldrb	r0, [r6, #0]
 8017f04:	f7ff ff6e 	bl	8017de4 <__hexdig_fun>
 8017f08:	1e43      	subs	r3, r0, #1
 8017f0a:	b2db      	uxtb	r3, r3
 8017f0c:	2b18      	cmp	r3, #24
 8017f0e:	d82b      	bhi.n	8017f68 <__gethex+0x158>
 8017f10:	3810      	subs	r0, #16
 8017f12:	0004      	movs	r4, r0
 8017f14:	7870      	ldrb	r0, [r6, #1]
 8017f16:	f7ff ff65 	bl	8017de4 <__hexdig_fun>
 8017f1a:	1e43      	subs	r3, r0, #1
 8017f1c:	b2db      	uxtb	r3, r3
 8017f1e:	3601      	adds	r6, #1
 8017f20:	2b18      	cmp	r3, #24
 8017f22:	d91c      	bls.n	8017f5e <__gethex+0x14e>
 8017f24:	9b06      	ldr	r3, [sp, #24]
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d000      	beq.n	8017f2c <__gethex+0x11c>
 8017f2a:	4264      	negs	r4, r4
 8017f2c:	193f      	adds	r7, r7, r4
 8017f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017f30:	601e      	str	r6, [r3, #0]
 8017f32:	9b04      	ldr	r3, [sp, #16]
 8017f34:	2b00      	cmp	r3, #0
 8017f36:	d019      	beq.n	8017f6c <__gethex+0x15c>
 8017f38:	2600      	movs	r6, #0
 8017f3a:	9b08      	ldr	r3, [sp, #32]
 8017f3c:	42b3      	cmp	r3, r6
 8017f3e:	d100      	bne.n	8017f42 <__gethex+0x132>
 8017f40:	3606      	adds	r6, #6
 8017f42:	0030      	movs	r0, r6
 8017f44:	b00d      	add	sp, #52	; 0x34
 8017f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017f48:	2301      	movs	r3, #1
 8017f4a:	0027      	movs	r7, r4
 8017f4c:	9d01      	ldr	r5, [sp, #4]
 8017f4e:	9304      	str	r3, [sp, #16]
 8017f50:	e7c9      	b.n	8017ee6 <__gethex+0xd6>
 8017f52:	2300      	movs	r3, #0
 8017f54:	9306      	str	r3, [sp, #24]
 8017f56:	1cae      	adds	r6, r5, #2
 8017f58:	e7d3      	b.n	8017f02 <__gethex+0xf2>
 8017f5a:	2301      	movs	r3, #1
 8017f5c:	e7fa      	b.n	8017f54 <__gethex+0x144>
 8017f5e:	230a      	movs	r3, #10
 8017f60:	435c      	muls	r4, r3
 8017f62:	1824      	adds	r4, r4, r0
 8017f64:	3c10      	subs	r4, #16
 8017f66:	e7d5      	b.n	8017f14 <__gethex+0x104>
 8017f68:	002e      	movs	r6, r5
 8017f6a:	e7e0      	b.n	8017f2e <__gethex+0x11e>
 8017f6c:	9b01      	ldr	r3, [sp, #4]
 8017f6e:	9904      	ldr	r1, [sp, #16]
 8017f70:	1aeb      	subs	r3, r5, r3
 8017f72:	3b01      	subs	r3, #1
 8017f74:	2b07      	cmp	r3, #7
 8017f76:	dc0a      	bgt.n	8017f8e <__gethex+0x17e>
 8017f78:	9805      	ldr	r0, [sp, #20]
 8017f7a:	f000 fa91 	bl	80184a0 <_Balloc>
 8017f7e:	1e04      	subs	r4, r0, #0
 8017f80:	d108      	bne.n	8017f94 <__gethex+0x184>
 8017f82:	0002      	movs	r2, r0
 8017f84:	21de      	movs	r1, #222	; 0xde
 8017f86:	4b62      	ldr	r3, [pc, #392]	; (8018110 <__gethex+0x300>)
 8017f88:	4862      	ldr	r0, [pc, #392]	; (8018114 <__gethex+0x304>)
 8017f8a:	f001 f80b 	bl	8018fa4 <__assert_func>
 8017f8e:	3101      	adds	r1, #1
 8017f90:	105b      	asrs	r3, r3, #1
 8017f92:	e7ef      	b.n	8017f74 <__gethex+0x164>
 8017f94:	0003      	movs	r3, r0
 8017f96:	3314      	adds	r3, #20
 8017f98:	9304      	str	r3, [sp, #16]
 8017f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8017f9c:	2300      	movs	r3, #0
 8017f9e:	001e      	movs	r6, r3
 8017fa0:	9306      	str	r3, [sp, #24]
 8017fa2:	9b01      	ldr	r3, [sp, #4]
 8017fa4:	42ab      	cmp	r3, r5
 8017fa6:	d340      	bcc.n	801802a <__gethex+0x21a>
 8017fa8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8017faa:	9b04      	ldr	r3, [sp, #16]
 8017fac:	c540      	stmia	r5!, {r6}
 8017fae:	1aed      	subs	r5, r5, r3
 8017fb0:	10ad      	asrs	r5, r5, #2
 8017fb2:	0030      	movs	r0, r6
 8017fb4:	6125      	str	r5, [r4, #16]
 8017fb6:	f000 fb35 	bl	8018624 <__hi0bits>
 8017fba:	9b02      	ldr	r3, [sp, #8]
 8017fbc:	016d      	lsls	r5, r5, #5
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	1a2e      	subs	r6, r5, r0
 8017fc2:	9301      	str	r3, [sp, #4]
 8017fc4:	429e      	cmp	r6, r3
 8017fc6:	dd5a      	ble.n	801807e <__gethex+0x26e>
 8017fc8:	1af6      	subs	r6, r6, r3
 8017fca:	0031      	movs	r1, r6
 8017fcc:	0020      	movs	r0, r4
 8017fce:	f000 febe 	bl	8018d4e <__any_on>
 8017fd2:	1e05      	subs	r5, r0, #0
 8017fd4:	d016      	beq.n	8018004 <__gethex+0x1f4>
 8017fd6:	2501      	movs	r5, #1
 8017fd8:	211f      	movs	r1, #31
 8017fda:	0028      	movs	r0, r5
 8017fdc:	1e73      	subs	r3, r6, #1
 8017fde:	4019      	ands	r1, r3
 8017fe0:	4088      	lsls	r0, r1
 8017fe2:	0001      	movs	r1, r0
 8017fe4:	115a      	asrs	r2, r3, #5
 8017fe6:	9804      	ldr	r0, [sp, #16]
 8017fe8:	0092      	lsls	r2, r2, #2
 8017fea:	5812      	ldr	r2, [r2, r0]
 8017fec:	420a      	tst	r2, r1
 8017fee:	d009      	beq.n	8018004 <__gethex+0x1f4>
 8017ff0:	42ab      	cmp	r3, r5
 8017ff2:	dd06      	ble.n	8018002 <__gethex+0x1f2>
 8017ff4:	0020      	movs	r0, r4
 8017ff6:	1eb1      	subs	r1, r6, #2
 8017ff8:	f000 fea9 	bl	8018d4e <__any_on>
 8017ffc:	3502      	adds	r5, #2
 8017ffe:	2800      	cmp	r0, #0
 8018000:	d100      	bne.n	8018004 <__gethex+0x1f4>
 8018002:	2502      	movs	r5, #2
 8018004:	0031      	movs	r1, r6
 8018006:	0020      	movs	r0, r4
 8018008:	f7ff fe98 	bl	8017d3c <rshift>
 801800c:	19bf      	adds	r7, r7, r6
 801800e:	9b02      	ldr	r3, [sp, #8]
 8018010:	689b      	ldr	r3, [r3, #8]
 8018012:	9303      	str	r3, [sp, #12]
 8018014:	42bb      	cmp	r3, r7
 8018016:	da42      	bge.n	801809e <__gethex+0x28e>
 8018018:	0021      	movs	r1, r4
 801801a:	9805      	ldr	r0, [sp, #20]
 801801c:	f000 fa68 	bl	80184f0 <_Bfree>
 8018020:	2300      	movs	r3, #0
 8018022:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018024:	26a3      	movs	r6, #163	; 0xa3
 8018026:	6013      	str	r3, [r2, #0]
 8018028:	e78b      	b.n	8017f42 <__gethex+0x132>
 801802a:	1e6b      	subs	r3, r5, #1
 801802c:	9308      	str	r3, [sp, #32]
 801802e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018030:	781b      	ldrb	r3, [r3, #0]
 8018032:	4293      	cmp	r3, r2
 8018034:	d014      	beq.n	8018060 <__gethex+0x250>
 8018036:	9b06      	ldr	r3, [sp, #24]
 8018038:	2b20      	cmp	r3, #32
 801803a:	d104      	bne.n	8018046 <__gethex+0x236>
 801803c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801803e:	c340      	stmia	r3!, {r6}
 8018040:	2600      	movs	r6, #0
 8018042:	9309      	str	r3, [sp, #36]	; 0x24
 8018044:	9606      	str	r6, [sp, #24]
 8018046:	9b08      	ldr	r3, [sp, #32]
 8018048:	7818      	ldrb	r0, [r3, #0]
 801804a:	f7ff fecb 	bl	8017de4 <__hexdig_fun>
 801804e:	230f      	movs	r3, #15
 8018050:	4018      	ands	r0, r3
 8018052:	9b06      	ldr	r3, [sp, #24]
 8018054:	9d08      	ldr	r5, [sp, #32]
 8018056:	4098      	lsls	r0, r3
 8018058:	3304      	adds	r3, #4
 801805a:	4306      	orrs	r6, r0
 801805c:	9306      	str	r3, [sp, #24]
 801805e:	e7a0      	b.n	8017fa2 <__gethex+0x192>
 8018060:	2301      	movs	r3, #1
 8018062:	9a03      	ldr	r2, [sp, #12]
 8018064:	1a9d      	subs	r5, r3, r2
 8018066:	9b08      	ldr	r3, [sp, #32]
 8018068:	195d      	adds	r5, r3, r5
 801806a:	9b01      	ldr	r3, [sp, #4]
 801806c:	429d      	cmp	r5, r3
 801806e:	d3e2      	bcc.n	8018036 <__gethex+0x226>
 8018070:	0028      	movs	r0, r5
 8018072:	9907      	ldr	r1, [sp, #28]
 8018074:	f7fc fce9 	bl	8014a4a <strncmp>
 8018078:	2800      	cmp	r0, #0
 801807a:	d1dc      	bne.n	8018036 <__gethex+0x226>
 801807c:	e791      	b.n	8017fa2 <__gethex+0x192>
 801807e:	9b01      	ldr	r3, [sp, #4]
 8018080:	2500      	movs	r5, #0
 8018082:	429e      	cmp	r6, r3
 8018084:	dac3      	bge.n	801800e <__gethex+0x1fe>
 8018086:	1b9e      	subs	r6, r3, r6
 8018088:	0021      	movs	r1, r4
 801808a:	0032      	movs	r2, r6
 801808c:	9805      	ldr	r0, [sp, #20]
 801808e:	f000 fc19 	bl	80188c4 <__lshift>
 8018092:	0003      	movs	r3, r0
 8018094:	3314      	adds	r3, #20
 8018096:	0004      	movs	r4, r0
 8018098:	1bbf      	subs	r7, r7, r6
 801809a:	9304      	str	r3, [sp, #16]
 801809c:	e7b7      	b.n	801800e <__gethex+0x1fe>
 801809e:	9b02      	ldr	r3, [sp, #8]
 80180a0:	685e      	ldr	r6, [r3, #4]
 80180a2:	42be      	cmp	r6, r7
 80180a4:	dd71      	ble.n	801818a <__gethex+0x37a>
 80180a6:	9b01      	ldr	r3, [sp, #4]
 80180a8:	1bf6      	subs	r6, r6, r7
 80180aa:	42b3      	cmp	r3, r6
 80180ac:	dc38      	bgt.n	8018120 <__gethex+0x310>
 80180ae:	9b02      	ldr	r3, [sp, #8]
 80180b0:	68db      	ldr	r3, [r3, #12]
 80180b2:	2b02      	cmp	r3, #2
 80180b4:	d026      	beq.n	8018104 <__gethex+0x2f4>
 80180b6:	2b03      	cmp	r3, #3
 80180b8:	d02e      	beq.n	8018118 <__gethex+0x308>
 80180ba:	2b01      	cmp	r3, #1
 80180bc:	d119      	bne.n	80180f2 <__gethex+0x2e2>
 80180be:	9b01      	ldr	r3, [sp, #4]
 80180c0:	42b3      	cmp	r3, r6
 80180c2:	d116      	bne.n	80180f2 <__gethex+0x2e2>
 80180c4:	2b01      	cmp	r3, #1
 80180c6:	d10d      	bne.n	80180e4 <__gethex+0x2d4>
 80180c8:	9b02      	ldr	r3, [sp, #8]
 80180ca:	2662      	movs	r6, #98	; 0x62
 80180cc:	685b      	ldr	r3, [r3, #4]
 80180ce:	9301      	str	r3, [sp, #4]
 80180d0:	9a01      	ldr	r2, [sp, #4]
 80180d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80180d4:	601a      	str	r2, [r3, #0]
 80180d6:	2301      	movs	r3, #1
 80180d8:	9a04      	ldr	r2, [sp, #16]
 80180da:	6123      	str	r3, [r4, #16]
 80180dc:	6013      	str	r3, [r2, #0]
 80180de:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80180e0:	601c      	str	r4, [r3, #0]
 80180e2:	e72e      	b.n	8017f42 <__gethex+0x132>
 80180e4:	9901      	ldr	r1, [sp, #4]
 80180e6:	0020      	movs	r0, r4
 80180e8:	3901      	subs	r1, #1
 80180ea:	f000 fe30 	bl	8018d4e <__any_on>
 80180ee:	2800      	cmp	r0, #0
 80180f0:	d1ea      	bne.n	80180c8 <__gethex+0x2b8>
 80180f2:	0021      	movs	r1, r4
 80180f4:	9805      	ldr	r0, [sp, #20]
 80180f6:	f000 f9fb 	bl	80184f0 <_Bfree>
 80180fa:	2300      	movs	r3, #0
 80180fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80180fe:	2650      	movs	r6, #80	; 0x50
 8018100:	6013      	str	r3, [r2, #0]
 8018102:	e71e      	b.n	8017f42 <__gethex+0x132>
 8018104:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018106:	2b00      	cmp	r3, #0
 8018108:	d1f3      	bne.n	80180f2 <__gethex+0x2e2>
 801810a:	e7dd      	b.n	80180c8 <__gethex+0x2b8>
 801810c:	0801d924 	.word	0x0801d924
 8018110:	0801d849 	.word	0x0801d849
 8018114:	0801d8b9 	.word	0x0801d8b9
 8018118:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801811a:	2b00      	cmp	r3, #0
 801811c:	d1d4      	bne.n	80180c8 <__gethex+0x2b8>
 801811e:	e7e8      	b.n	80180f2 <__gethex+0x2e2>
 8018120:	1e77      	subs	r7, r6, #1
 8018122:	2d00      	cmp	r5, #0
 8018124:	d12f      	bne.n	8018186 <__gethex+0x376>
 8018126:	2f00      	cmp	r7, #0
 8018128:	d004      	beq.n	8018134 <__gethex+0x324>
 801812a:	0039      	movs	r1, r7
 801812c:	0020      	movs	r0, r4
 801812e:	f000 fe0e 	bl	8018d4e <__any_on>
 8018132:	0005      	movs	r5, r0
 8018134:	231f      	movs	r3, #31
 8018136:	117a      	asrs	r2, r7, #5
 8018138:	401f      	ands	r7, r3
 801813a:	3b1e      	subs	r3, #30
 801813c:	40bb      	lsls	r3, r7
 801813e:	9904      	ldr	r1, [sp, #16]
 8018140:	0092      	lsls	r2, r2, #2
 8018142:	5852      	ldr	r2, [r2, r1]
 8018144:	421a      	tst	r2, r3
 8018146:	d001      	beq.n	801814c <__gethex+0x33c>
 8018148:	2302      	movs	r3, #2
 801814a:	431d      	orrs	r5, r3
 801814c:	9b01      	ldr	r3, [sp, #4]
 801814e:	0031      	movs	r1, r6
 8018150:	1b9b      	subs	r3, r3, r6
 8018152:	2602      	movs	r6, #2
 8018154:	0020      	movs	r0, r4
 8018156:	9301      	str	r3, [sp, #4]
 8018158:	f7ff fdf0 	bl	8017d3c <rshift>
 801815c:	9b02      	ldr	r3, [sp, #8]
 801815e:	685f      	ldr	r7, [r3, #4]
 8018160:	2d00      	cmp	r5, #0
 8018162:	d041      	beq.n	80181e8 <__gethex+0x3d8>
 8018164:	9b02      	ldr	r3, [sp, #8]
 8018166:	68db      	ldr	r3, [r3, #12]
 8018168:	2b02      	cmp	r3, #2
 801816a:	d010      	beq.n	801818e <__gethex+0x37e>
 801816c:	2b03      	cmp	r3, #3
 801816e:	d012      	beq.n	8018196 <__gethex+0x386>
 8018170:	2b01      	cmp	r3, #1
 8018172:	d106      	bne.n	8018182 <__gethex+0x372>
 8018174:	07aa      	lsls	r2, r5, #30
 8018176:	d504      	bpl.n	8018182 <__gethex+0x372>
 8018178:	9a04      	ldr	r2, [sp, #16]
 801817a:	6810      	ldr	r0, [r2, #0]
 801817c:	4305      	orrs	r5, r0
 801817e:	421d      	tst	r5, r3
 8018180:	d10c      	bne.n	801819c <__gethex+0x38c>
 8018182:	2310      	movs	r3, #16
 8018184:	e02f      	b.n	80181e6 <__gethex+0x3d6>
 8018186:	2501      	movs	r5, #1
 8018188:	e7d4      	b.n	8018134 <__gethex+0x324>
 801818a:	2601      	movs	r6, #1
 801818c:	e7e8      	b.n	8018160 <__gethex+0x350>
 801818e:	2301      	movs	r3, #1
 8018190:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018192:	1a9b      	subs	r3, r3, r2
 8018194:	9313      	str	r3, [sp, #76]	; 0x4c
 8018196:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018198:	2b00      	cmp	r3, #0
 801819a:	d0f2      	beq.n	8018182 <__gethex+0x372>
 801819c:	6923      	ldr	r3, [r4, #16]
 801819e:	2000      	movs	r0, #0
 80181a0:	9303      	str	r3, [sp, #12]
 80181a2:	009b      	lsls	r3, r3, #2
 80181a4:	9304      	str	r3, [sp, #16]
 80181a6:	0023      	movs	r3, r4
 80181a8:	9a04      	ldr	r2, [sp, #16]
 80181aa:	3314      	adds	r3, #20
 80181ac:	1899      	adds	r1, r3, r2
 80181ae:	681a      	ldr	r2, [r3, #0]
 80181b0:	1c55      	adds	r5, r2, #1
 80181b2:	d01e      	beq.n	80181f2 <__gethex+0x3e2>
 80181b4:	3201      	adds	r2, #1
 80181b6:	601a      	str	r2, [r3, #0]
 80181b8:	0023      	movs	r3, r4
 80181ba:	3314      	adds	r3, #20
 80181bc:	2e02      	cmp	r6, #2
 80181be:	d140      	bne.n	8018242 <__gethex+0x432>
 80181c0:	9a02      	ldr	r2, [sp, #8]
 80181c2:	9901      	ldr	r1, [sp, #4]
 80181c4:	6812      	ldr	r2, [r2, #0]
 80181c6:	3a01      	subs	r2, #1
 80181c8:	428a      	cmp	r2, r1
 80181ca:	d10b      	bne.n	80181e4 <__gethex+0x3d4>
 80181cc:	114a      	asrs	r2, r1, #5
 80181ce:	211f      	movs	r1, #31
 80181d0:	9801      	ldr	r0, [sp, #4]
 80181d2:	0092      	lsls	r2, r2, #2
 80181d4:	4001      	ands	r1, r0
 80181d6:	2001      	movs	r0, #1
 80181d8:	0005      	movs	r5, r0
 80181da:	408d      	lsls	r5, r1
 80181dc:	58d3      	ldr	r3, [r2, r3]
 80181de:	422b      	tst	r3, r5
 80181e0:	d000      	beq.n	80181e4 <__gethex+0x3d4>
 80181e2:	2601      	movs	r6, #1
 80181e4:	2320      	movs	r3, #32
 80181e6:	431e      	orrs	r6, r3
 80181e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80181ea:	601c      	str	r4, [r3, #0]
 80181ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80181ee:	601f      	str	r7, [r3, #0]
 80181f0:	e6a7      	b.n	8017f42 <__gethex+0x132>
 80181f2:	c301      	stmia	r3!, {r0}
 80181f4:	4299      	cmp	r1, r3
 80181f6:	d8da      	bhi.n	80181ae <__gethex+0x39e>
 80181f8:	9b03      	ldr	r3, [sp, #12]
 80181fa:	68a2      	ldr	r2, [r4, #8]
 80181fc:	4293      	cmp	r3, r2
 80181fe:	db17      	blt.n	8018230 <__gethex+0x420>
 8018200:	6863      	ldr	r3, [r4, #4]
 8018202:	9805      	ldr	r0, [sp, #20]
 8018204:	1c59      	adds	r1, r3, #1
 8018206:	f000 f94b 	bl	80184a0 <_Balloc>
 801820a:	1e05      	subs	r5, r0, #0
 801820c:	d103      	bne.n	8018216 <__gethex+0x406>
 801820e:	0002      	movs	r2, r0
 8018210:	2184      	movs	r1, #132	; 0x84
 8018212:	4b1c      	ldr	r3, [pc, #112]	; (8018284 <__gethex+0x474>)
 8018214:	e6b8      	b.n	8017f88 <__gethex+0x178>
 8018216:	0021      	movs	r1, r4
 8018218:	6923      	ldr	r3, [r4, #16]
 801821a:	310c      	adds	r1, #12
 801821c:	1c9a      	adds	r2, r3, #2
 801821e:	0092      	lsls	r2, r2, #2
 8018220:	300c      	adds	r0, #12
 8018222:	f7fc f99d 	bl	8014560 <memcpy>
 8018226:	0021      	movs	r1, r4
 8018228:	9805      	ldr	r0, [sp, #20]
 801822a:	f000 f961 	bl	80184f0 <_Bfree>
 801822e:	002c      	movs	r4, r5
 8018230:	6923      	ldr	r3, [r4, #16]
 8018232:	1c5a      	adds	r2, r3, #1
 8018234:	6122      	str	r2, [r4, #16]
 8018236:	2201      	movs	r2, #1
 8018238:	3304      	adds	r3, #4
 801823a:	009b      	lsls	r3, r3, #2
 801823c:	18e3      	adds	r3, r4, r3
 801823e:	605a      	str	r2, [r3, #4]
 8018240:	e7ba      	b.n	80181b8 <__gethex+0x3a8>
 8018242:	6922      	ldr	r2, [r4, #16]
 8018244:	9903      	ldr	r1, [sp, #12]
 8018246:	428a      	cmp	r2, r1
 8018248:	dd09      	ble.n	801825e <__gethex+0x44e>
 801824a:	2101      	movs	r1, #1
 801824c:	0020      	movs	r0, r4
 801824e:	f7ff fd75 	bl	8017d3c <rshift>
 8018252:	9b02      	ldr	r3, [sp, #8]
 8018254:	3701      	adds	r7, #1
 8018256:	689b      	ldr	r3, [r3, #8]
 8018258:	42bb      	cmp	r3, r7
 801825a:	dac2      	bge.n	80181e2 <__gethex+0x3d2>
 801825c:	e6dc      	b.n	8018018 <__gethex+0x208>
 801825e:	221f      	movs	r2, #31
 8018260:	9d01      	ldr	r5, [sp, #4]
 8018262:	9901      	ldr	r1, [sp, #4]
 8018264:	2601      	movs	r6, #1
 8018266:	4015      	ands	r5, r2
 8018268:	4211      	tst	r1, r2
 801826a:	d0bb      	beq.n	80181e4 <__gethex+0x3d4>
 801826c:	9a04      	ldr	r2, [sp, #16]
 801826e:	189b      	adds	r3, r3, r2
 8018270:	3b04      	subs	r3, #4
 8018272:	6818      	ldr	r0, [r3, #0]
 8018274:	f000 f9d6 	bl	8018624 <__hi0bits>
 8018278:	2320      	movs	r3, #32
 801827a:	1b5d      	subs	r5, r3, r5
 801827c:	42a8      	cmp	r0, r5
 801827e:	dbe4      	blt.n	801824a <__gethex+0x43a>
 8018280:	e7b0      	b.n	80181e4 <__gethex+0x3d4>
 8018282:	46c0      	nop			; (mov r8, r8)
 8018284:	0801d849 	.word	0x0801d849

08018288 <L_shift>:
 8018288:	2308      	movs	r3, #8
 801828a:	b570      	push	{r4, r5, r6, lr}
 801828c:	2520      	movs	r5, #32
 801828e:	1a9a      	subs	r2, r3, r2
 8018290:	0092      	lsls	r2, r2, #2
 8018292:	1aad      	subs	r5, r5, r2
 8018294:	6843      	ldr	r3, [r0, #4]
 8018296:	6806      	ldr	r6, [r0, #0]
 8018298:	001c      	movs	r4, r3
 801829a:	40ac      	lsls	r4, r5
 801829c:	40d3      	lsrs	r3, r2
 801829e:	4334      	orrs	r4, r6
 80182a0:	6004      	str	r4, [r0, #0]
 80182a2:	6043      	str	r3, [r0, #4]
 80182a4:	3004      	adds	r0, #4
 80182a6:	4288      	cmp	r0, r1
 80182a8:	d3f4      	bcc.n	8018294 <L_shift+0xc>
 80182aa:	bd70      	pop	{r4, r5, r6, pc}

080182ac <__match>:
 80182ac:	b530      	push	{r4, r5, lr}
 80182ae:	6803      	ldr	r3, [r0, #0]
 80182b0:	780c      	ldrb	r4, [r1, #0]
 80182b2:	3301      	adds	r3, #1
 80182b4:	2c00      	cmp	r4, #0
 80182b6:	d102      	bne.n	80182be <__match+0x12>
 80182b8:	6003      	str	r3, [r0, #0]
 80182ba:	2001      	movs	r0, #1
 80182bc:	bd30      	pop	{r4, r5, pc}
 80182be:	781a      	ldrb	r2, [r3, #0]
 80182c0:	0015      	movs	r5, r2
 80182c2:	3d41      	subs	r5, #65	; 0x41
 80182c4:	2d19      	cmp	r5, #25
 80182c6:	d800      	bhi.n	80182ca <__match+0x1e>
 80182c8:	3220      	adds	r2, #32
 80182ca:	3101      	adds	r1, #1
 80182cc:	42a2      	cmp	r2, r4
 80182ce:	d0ef      	beq.n	80182b0 <__match+0x4>
 80182d0:	2000      	movs	r0, #0
 80182d2:	e7f3      	b.n	80182bc <__match+0x10>

080182d4 <__hexnan>:
 80182d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182d6:	680b      	ldr	r3, [r1, #0]
 80182d8:	b08b      	sub	sp, #44	; 0x2c
 80182da:	115c      	asrs	r4, r3, #5
 80182dc:	00a4      	lsls	r4, r4, #2
 80182de:	9201      	str	r2, [sp, #4]
 80182e0:	1912      	adds	r2, r2, r4
 80182e2:	0019      	movs	r1, r3
 80182e4:	9202      	str	r2, [sp, #8]
 80182e6:	221f      	movs	r2, #31
 80182e8:	4011      	ands	r1, r2
 80182ea:	9008      	str	r0, [sp, #32]
 80182ec:	9106      	str	r1, [sp, #24]
 80182ee:	4213      	tst	r3, r2
 80182f0:	d002      	beq.n	80182f8 <__hexnan+0x24>
 80182f2:	9b02      	ldr	r3, [sp, #8]
 80182f4:	3304      	adds	r3, #4
 80182f6:	9302      	str	r3, [sp, #8]
 80182f8:	9b02      	ldr	r3, [sp, #8]
 80182fa:	2500      	movs	r5, #0
 80182fc:	1f1e      	subs	r6, r3, #4
 80182fe:	0037      	movs	r7, r6
 8018300:	0034      	movs	r4, r6
 8018302:	9b08      	ldr	r3, [sp, #32]
 8018304:	6035      	str	r5, [r6, #0]
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	9507      	str	r5, [sp, #28]
 801830a:	9305      	str	r3, [sp, #20]
 801830c:	9503      	str	r5, [sp, #12]
 801830e:	9b05      	ldr	r3, [sp, #20]
 8018310:	3301      	adds	r3, #1
 8018312:	9309      	str	r3, [sp, #36]	; 0x24
 8018314:	9b05      	ldr	r3, [sp, #20]
 8018316:	785b      	ldrb	r3, [r3, #1]
 8018318:	9304      	str	r3, [sp, #16]
 801831a:	2b00      	cmp	r3, #0
 801831c:	d028      	beq.n	8018370 <__hexnan+0x9c>
 801831e:	9804      	ldr	r0, [sp, #16]
 8018320:	f7ff fd60 	bl	8017de4 <__hexdig_fun>
 8018324:	2800      	cmp	r0, #0
 8018326:	d154      	bne.n	80183d2 <__hexnan+0xfe>
 8018328:	9b04      	ldr	r3, [sp, #16]
 801832a:	2b20      	cmp	r3, #32
 801832c:	d819      	bhi.n	8018362 <__hexnan+0x8e>
 801832e:	9b03      	ldr	r3, [sp, #12]
 8018330:	9a07      	ldr	r2, [sp, #28]
 8018332:	4293      	cmp	r3, r2
 8018334:	dd12      	ble.n	801835c <__hexnan+0x88>
 8018336:	42bc      	cmp	r4, r7
 8018338:	d206      	bcs.n	8018348 <__hexnan+0x74>
 801833a:	2d07      	cmp	r5, #7
 801833c:	dc04      	bgt.n	8018348 <__hexnan+0x74>
 801833e:	002a      	movs	r2, r5
 8018340:	0039      	movs	r1, r7
 8018342:	0020      	movs	r0, r4
 8018344:	f7ff ffa0 	bl	8018288 <L_shift>
 8018348:	9b01      	ldr	r3, [sp, #4]
 801834a:	2508      	movs	r5, #8
 801834c:	429c      	cmp	r4, r3
 801834e:	d905      	bls.n	801835c <__hexnan+0x88>
 8018350:	1f27      	subs	r7, r4, #4
 8018352:	2500      	movs	r5, #0
 8018354:	003c      	movs	r4, r7
 8018356:	9b03      	ldr	r3, [sp, #12]
 8018358:	603d      	str	r5, [r7, #0]
 801835a:	9307      	str	r3, [sp, #28]
 801835c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801835e:	9305      	str	r3, [sp, #20]
 8018360:	e7d5      	b.n	801830e <__hexnan+0x3a>
 8018362:	9b04      	ldr	r3, [sp, #16]
 8018364:	2b29      	cmp	r3, #41	; 0x29
 8018366:	d158      	bne.n	801841a <__hexnan+0x146>
 8018368:	9b05      	ldr	r3, [sp, #20]
 801836a:	9a08      	ldr	r2, [sp, #32]
 801836c:	3302      	adds	r3, #2
 801836e:	6013      	str	r3, [r2, #0]
 8018370:	9b03      	ldr	r3, [sp, #12]
 8018372:	2b00      	cmp	r3, #0
 8018374:	d051      	beq.n	801841a <__hexnan+0x146>
 8018376:	42bc      	cmp	r4, r7
 8018378:	d206      	bcs.n	8018388 <__hexnan+0xb4>
 801837a:	2d07      	cmp	r5, #7
 801837c:	dc04      	bgt.n	8018388 <__hexnan+0xb4>
 801837e:	002a      	movs	r2, r5
 8018380:	0039      	movs	r1, r7
 8018382:	0020      	movs	r0, r4
 8018384:	f7ff ff80 	bl	8018288 <L_shift>
 8018388:	9b01      	ldr	r3, [sp, #4]
 801838a:	429c      	cmp	r4, r3
 801838c:	d935      	bls.n	80183fa <__hexnan+0x126>
 801838e:	001a      	movs	r2, r3
 8018390:	0023      	movs	r3, r4
 8018392:	cb02      	ldmia	r3!, {r1}
 8018394:	c202      	stmia	r2!, {r1}
 8018396:	429e      	cmp	r6, r3
 8018398:	d2fb      	bcs.n	8018392 <__hexnan+0xbe>
 801839a:	9b02      	ldr	r3, [sp, #8]
 801839c:	1c61      	adds	r1, r4, #1
 801839e:	1eda      	subs	r2, r3, #3
 80183a0:	2304      	movs	r3, #4
 80183a2:	4291      	cmp	r1, r2
 80183a4:	d805      	bhi.n	80183b2 <__hexnan+0xde>
 80183a6:	9b02      	ldr	r3, [sp, #8]
 80183a8:	3b04      	subs	r3, #4
 80183aa:	1b1c      	subs	r4, r3, r4
 80183ac:	08a4      	lsrs	r4, r4, #2
 80183ae:	3401      	adds	r4, #1
 80183b0:	00a3      	lsls	r3, r4, #2
 80183b2:	9a01      	ldr	r2, [sp, #4]
 80183b4:	18d4      	adds	r4, r2, r3
 80183b6:	2300      	movs	r3, #0
 80183b8:	c408      	stmia	r4!, {r3}
 80183ba:	42a6      	cmp	r6, r4
 80183bc:	d2fc      	bcs.n	80183b8 <__hexnan+0xe4>
 80183be:	6833      	ldr	r3, [r6, #0]
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d104      	bne.n	80183ce <__hexnan+0xfa>
 80183c4:	9b01      	ldr	r3, [sp, #4]
 80183c6:	429e      	cmp	r6, r3
 80183c8:	d125      	bne.n	8018416 <__hexnan+0x142>
 80183ca:	2301      	movs	r3, #1
 80183cc:	6033      	str	r3, [r6, #0]
 80183ce:	2005      	movs	r0, #5
 80183d0:	e024      	b.n	801841c <__hexnan+0x148>
 80183d2:	9b03      	ldr	r3, [sp, #12]
 80183d4:	3501      	adds	r5, #1
 80183d6:	3301      	adds	r3, #1
 80183d8:	9303      	str	r3, [sp, #12]
 80183da:	2d08      	cmp	r5, #8
 80183dc:	dd06      	ble.n	80183ec <__hexnan+0x118>
 80183de:	9b01      	ldr	r3, [sp, #4]
 80183e0:	429c      	cmp	r4, r3
 80183e2:	d9bb      	bls.n	801835c <__hexnan+0x88>
 80183e4:	2300      	movs	r3, #0
 80183e6:	2501      	movs	r5, #1
 80183e8:	3c04      	subs	r4, #4
 80183ea:	6023      	str	r3, [r4, #0]
 80183ec:	220f      	movs	r2, #15
 80183ee:	6823      	ldr	r3, [r4, #0]
 80183f0:	4010      	ands	r0, r2
 80183f2:	011b      	lsls	r3, r3, #4
 80183f4:	4318      	orrs	r0, r3
 80183f6:	6020      	str	r0, [r4, #0]
 80183f8:	e7b0      	b.n	801835c <__hexnan+0x88>
 80183fa:	9b06      	ldr	r3, [sp, #24]
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d0de      	beq.n	80183be <__hexnan+0xea>
 8018400:	2220      	movs	r2, #32
 8018402:	1ad2      	subs	r2, r2, r3
 8018404:	2301      	movs	r3, #1
 8018406:	425b      	negs	r3, r3
 8018408:	40d3      	lsrs	r3, r2
 801840a:	9c02      	ldr	r4, [sp, #8]
 801840c:	3c04      	subs	r4, #4
 801840e:	6822      	ldr	r2, [r4, #0]
 8018410:	4013      	ands	r3, r2
 8018412:	6023      	str	r3, [r4, #0]
 8018414:	e7d3      	b.n	80183be <__hexnan+0xea>
 8018416:	3e04      	subs	r6, #4
 8018418:	e7d1      	b.n	80183be <__hexnan+0xea>
 801841a:	2004      	movs	r0, #4
 801841c:	b00b      	add	sp, #44	; 0x2c
 801841e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018420 <__locale_mb_cur_max>:
 8018420:	2394      	movs	r3, #148	; 0x94
 8018422:	4a02      	ldr	r2, [pc, #8]	; (801842c <__locale_mb_cur_max+0xc>)
 8018424:	005b      	lsls	r3, r3, #1
 8018426:	5cd0      	ldrb	r0, [r2, r3]
 8018428:	4770      	bx	lr
 801842a:	46c0      	nop			; (mov r8, r8)
 801842c:	200009d8 	.word	0x200009d8

08018430 <_localeconv_r>:
 8018430:	4800      	ldr	r0, [pc, #0]	; (8018434 <_localeconv_r+0x4>)
 8018432:	4770      	bx	lr
 8018434:	20000ac8 	.word	0x20000ac8

08018438 <__retarget_lock_init_recursive>:
 8018438:	4770      	bx	lr

0801843a <__retarget_lock_close_recursive>:
 801843a:	4770      	bx	lr

0801843c <__retarget_lock_acquire_recursive>:
 801843c:	4770      	bx	lr

0801843e <__retarget_lock_release_recursive>:
 801843e:	4770      	bx	lr

08018440 <__ascii_mbtowc>:
 8018440:	b082      	sub	sp, #8
 8018442:	2900      	cmp	r1, #0
 8018444:	d100      	bne.n	8018448 <__ascii_mbtowc+0x8>
 8018446:	a901      	add	r1, sp, #4
 8018448:	1e10      	subs	r0, r2, #0
 801844a:	d006      	beq.n	801845a <__ascii_mbtowc+0x1a>
 801844c:	2b00      	cmp	r3, #0
 801844e:	d006      	beq.n	801845e <__ascii_mbtowc+0x1e>
 8018450:	7813      	ldrb	r3, [r2, #0]
 8018452:	600b      	str	r3, [r1, #0]
 8018454:	7810      	ldrb	r0, [r2, #0]
 8018456:	1e43      	subs	r3, r0, #1
 8018458:	4198      	sbcs	r0, r3
 801845a:	b002      	add	sp, #8
 801845c:	4770      	bx	lr
 801845e:	2002      	movs	r0, #2
 8018460:	4240      	negs	r0, r0
 8018462:	e7fa      	b.n	801845a <__ascii_mbtowc+0x1a>

08018464 <memchr>:
 8018464:	b2c9      	uxtb	r1, r1
 8018466:	1882      	adds	r2, r0, r2
 8018468:	4290      	cmp	r0, r2
 801846a:	d101      	bne.n	8018470 <memchr+0xc>
 801846c:	2000      	movs	r0, #0
 801846e:	4770      	bx	lr
 8018470:	7803      	ldrb	r3, [r0, #0]
 8018472:	428b      	cmp	r3, r1
 8018474:	d0fb      	beq.n	801846e <memchr+0xa>
 8018476:	3001      	adds	r0, #1
 8018478:	e7f6      	b.n	8018468 <memchr+0x4>

0801847a <memmove>:
 801847a:	b510      	push	{r4, lr}
 801847c:	4288      	cmp	r0, r1
 801847e:	d902      	bls.n	8018486 <memmove+0xc>
 8018480:	188b      	adds	r3, r1, r2
 8018482:	4298      	cmp	r0, r3
 8018484:	d303      	bcc.n	801848e <memmove+0x14>
 8018486:	2300      	movs	r3, #0
 8018488:	e007      	b.n	801849a <memmove+0x20>
 801848a:	5c8b      	ldrb	r3, [r1, r2]
 801848c:	5483      	strb	r3, [r0, r2]
 801848e:	3a01      	subs	r2, #1
 8018490:	d2fb      	bcs.n	801848a <memmove+0x10>
 8018492:	bd10      	pop	{r4, pc}
 8018494:	5ccc      	ldrb	r4, [r1, r3]
 8018496:	54c4      	strb	r4, [r0, r3]
 8018498:	3301      	adds	r3, #1
 801849a:	429a      	cmp	r2, r3
 801849c:	d1fa      	bne.n	8018494 <memmove+0x1a>
 801849e:	e7f8      	b.n	8018492 <memmove+0x18>

080184a0 <_Balloc>:
 80184a0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80184a2:	b570      	push	{r4, r5, r6, lr}
 80184a4:	0006      	movs	r6, r0
 80184a6:	000c      	movs	r4, r1
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d012      	beq.n	80184d2 <_Balloc+0x32>
 80184ac:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 80184ae:	00a3      	lsls	r3, r4, #2
 80184b0:	18d3      	adds	r3, r2, r3
 80184b2:	6818      	ldr	r0, [r3, #0]
 80184b4:	2800      	cmp	r0, #0
 80184b6:	d115      	bne.n	80184e4 <_Balloc+0x44>
 80184b8:	2101      	movs	r1, #1
 80184ba:	000d      	movs	r5, r1
 80184bc:	40a5      	lsls	r5, r4
 80184be:	1d6a      	adds	r2, r5, #5
 80184c0:	0030      	movs	r0, r6
 80184c2:	0092      	lsls	r2, r2, #2
 80184c4:	f000 fd8c 	bl	8018fe0 <_calloc_r>
 80184c8:	2800      	cmp	r0, #0
 80184ca:	d009      	beq.n	80184e0 <_Balloc+0x40>
 80184cc:	6044      	str	r4, [r0, #4]
 80184ce:	6085      	str	r5, [r0, #8]
 80184d0:	e00a      	b.n	80184e8 <_Balloc+0x48>
 80184d2:	2221      	movs	r2, #33	; 0x21
 80184d4:	2104      	movs	r1, #4
 80184d6:	f000 fd83 	bl	8018fe0 <_calloc_r>
 80184da:	64f0      	str	r0, [r6, #76]	; 0x4c
 80184dc:	2800      	cmp	r0, #0
 80184de:	d1e5      	bne.n	80184ac <_Balloc+0xc>
 80184e0:	2000      	movs	r0, #0
 80184e2:	bd70      	pop	{r4, r5, r6, pc}
 80184e4:	6802      	ldr	r2, [r0, #0]
 80184e6:	601a      	str	r2, [r3, #0]
 80184e8:	2300      	movs	r3, #0
 80184ea:	6103      	str	r3, [r0, #16]
 80184ec:	60c3      	str	r3, [r0, #12]
 80184ee:	e7f8      	b.n	80184e2 <_Balloc+0x42>

080184f0 <_Bfree>:
 80184f0:	2900      	cmp	r1, #0
 80184f2:	d006      	beq.n	8018502 <_Bfree+0x12>
 80184f4:	684b      	ldr	r3, [r1, #4]
 80184f6:	009a      	lsls	r2, r3, #2
 80184f8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80184fa:	189b      	adds	r3, r3, r2
 80184fc:	681a      	ldr	r2, [r3, #0]
 80184fe:	600a      	str	r2, [r1, #0]
 8018500:	6019      	str	r1, [r3, #0]
 8018502:	4770      	bx	lr

08018504 <__multadd>:
 8018504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018506:	000e      	movs	r6, r1
 8018508:	9001      	str	r0, [sp, #4]
 801850a:	000c      	movs	r4, r1
 801850c:	001d      	movs	r5, r3
 801850e:	2000      	movs	r0, #0
 8018510:	690f      	ldr	r7, [r1, #16]
 8018512:	3614      	adds	r6, #20
 8018514:	6833      	ldr	r3, [r6, #0]
 8018516:	3001      	adds	r0, #1
 8018518:	b299      	uxth	r1, r3
 801851a:	4351      	muls	r1, r2
 801851c:	0c1b      	lsrs	r3, r3, #16
 801851e:	4353      	muls	r3, r2
 8018520:	1949      	adds	r1, r1, r5
 8018522:	0c0d      	lsrs	r5, r1, #16
 8018524:	195b      	adds	r3, r3, r5
 8018526:	0c1d      	lsrs	r5, r3, #16
 8018528:	b289      	uxth	r1, r1
 801852a:	041b      	lsls	r3, r3, #16
 801852c:	185b      	adds	r3, r3, r1
 801852e:	c608      	stmia	r6!, {r3}
 8018530:	4287      	cmp	r7, r0
 8018532:	dcef      	bgt.n	8018514 <__multadd+0x10>
 8018534:	2d00      	cmp	r5, #0
 8018536:	d022      	beq.n	801857e <__multadd+0x7a>
 8018538:	68a3      	ldr	r3, [r4, #8]
 801853a:	42bb      	cmp	r3, r7
 801853c:	dc19      	bgt.n	8018572 <__multadd+0x6e>
 801853e:	6863      	ldr	r3, [r4, #4]
 8018540:	9801      	ldr	r0, [sp, #4]
 8018542:	1c59      	adds	r1, r3, #1
 8018544:	f7ff ffac 	bl	80184a0 <_Balloc>
 8018548:	1e06      	subs	r6, r0, #0
 801854a:	d105      	bne.n	8018558 <__multadd+0x54>
 801854c:	0002      	movs	r2, r0
 801854e:	21b5      	movs	r1, #181	; 0xb5
 8018550:	4b0c      	ldr	r3, [pc, #48]	; (8018584 <__multadd+0x80>)
 8018552:	480d      	ldr	r0, [pc, #52]	; (8018588 <__multadd+0x84>)
 8018554:	f000 fd26 	bl	8018fa4 <__assert_func>
 8018558:	0021      	movs	r1, r4
 801855a:	6923      	ldr	r3, [r4, #16]
 801855c:	310c      	adds	r1, #12
 801855e:	1c9a      	adds	r2, r3, #2
 8018560:	0092      	lsls	r2, r2, #2
 8018562:	300c      	adds	r0, #12
 8018564:	f7fb fffc 	bl	8014560 <memcpy>
 8018568:	0021      	movs	r1, r4
 801856a:	9801      	ldr	r0, [sp, #4]
 801856c:	f7ff ffc0 	bl	80184f0 <_Bfree>
 8018570:	0034      	movs	r4, r6
 8018572:	1d3b      	adds	r3, r7, #4
 8018574:	009b      	lsls	r3, r3, #2
 8018576:	18e3      	adds	r3, r4, r3
 8018578:	605d      	str	r5, [r3, #4]
 801857a:	1c7b      	adds	r3, r7, #1
 801857c:	6123      	str	r3, [r4, #16]
 801857e:	0020      	movs	r0, r4
 8018580:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018582:	46c0      	nop			; (mov r8, r8)
 8018584:	0801d849 	.word	0x0801d849
 8018588:	0801d938 	.word	0x0801d938

0801858c <__s2b>:
 801858c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801858e:	0006      	movs	r6, r0
 8018590:	0018      	movs	r0, r3
 8018592:	000c      	movs	r4, r1
 8018594:	3008      	adds	r0, #8
 8018596:	2109      	movs	r1, #9
 8018598:	9301      	str	r3, [sp, #4]
 801859a:	0015      	movs	r5, r2
 801859c:	f7e7 fe62 	bl	8000264 <__divsi3>
 80185a0:	2301      	movs	r3, #1
 80185a2:	2100      	movs	r1, #0
 80185a4:	4283      	cmp	r3, r0
 80185a6:	db0a      	blt.n	80185be <__s2b+0x32>
 80185a8:	0030      	movs	r0, r6
 80185aa:	f7ff ff79 	bl	80184a0 <_Balloc>
 80185ae:	1e01      	subs	r1, r0, #0
 80185b0:	d108      	bne.n	80185c4 <__s2b+0x38>
 80185b2:	0002      	movs	r2, r0
 80185b4:	4b19      	ldr	r3, [pc, #100]	; (801861c <__s2b+0x90>)
 80185b6:	481a      	ldr	r0, [pc, #104]	; (8018620 <__s2b+0x94>)
 80185b8:	31ce      	adds	r1, #206	; 0xce
 80185ba:	f000 fcf3 	bl	8018fa4 <__assert_func>
 80185be:	005b      	lsls	r3, r3, #1
 80185c0:	3101      	adds	r1, #1
 80185c2:	e7ef      	b.n	80185a4 <__s2b+0x18>
 80185c4:	9b08      	ldr	r3, [sp, #32]
 80185c6:	6143      	str	r3, [r0, #20]
 80185c8:	2301      	movs	r3, #1
 80185ca:	6103      	str	r3, [r0, #16]
 80185cc:	2d09      	cmp	r5, #9
 80185ce:	dd18      	ble.n	8018602 <__s2b+0x76>
 80185d0:	0023      	movs	r3, r4
 80185d2:	3309      	adds	r3, #9
 80185d4:	001f      	movs	r7, r3
 80185d6:	9300      	str	r3, [sp, #0]
 80185d8:	1964      	adds	r4, r4, r5
 80185da:	783b      	ldrb	r3, [r7, #0]
 80185dc:	220a      	movs	r2, #10
 80185de:	0030      	movs	r0, r6
 80185e0:	3b30      	subs	r3, #48	; 0x30
 80185e2:	f7ff ff8f 	bl	8018504 <__multadd>
 80185e6:	3701      	adds	r7, #1
 80185e8:	0001      	movs	r1, r0
 80185ea:	42a7      	cmp	r7, r4
 80185ec:	d1f5      	bne.n	80185da <__s2b+0x4e>
 80185ee:	002c      	movs	r4, r5
 80185f0:	9b00      	ldr	r3, [sp, #0]
 80185f2:	3c08      	subs	r4, #8
 80185f4:	191c      	adds	r4, r3, r4
 80185f6:	002f      	movs	r7, r5
 80185f8:	9b01      	ldr	r3, [sp, #4]
 80185fa:	429f      	cmp	r7, r3
 80185fc:	db04      	blt.n	8018608 <__s2b+0x7c>
 80185fe:	0008      	movs	r0, r1
 8018600:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018602:	2509      	movs	r5, #9
 8018604:	340a      	adds	r4, #10
 8018606:	e7f6      	b.n	80185f6 <__s2b+0x6a>
 8018608:	1b63      	subs	r3, r4, r5
 801860a:	5ddb      	ldrb	r3, [r3, r7]
 801860c:	220a      	movs	r2, #10
 801860e:	0030      	movs	r0, r6
 8018610:	3b30      	subs	r3, #48	; 0x30
 8018612:	f7ff ff77 	bl	8018504 <__multadd>
 8018616:	3701      	adds	r7, #1
 8018618:	0001      	movs	r1, r0
 801861a:	e7ed      	b.n	80185f8 <__s2b+0x6c>
 801861c:	0801d849 	.word	0x0801d849
 8018620:	0801d938 	.word	0x0801d938

08018624 <__hi0bits>:
 8018624:	0003      	movs	r3, r0
 8018626:	0c02      	lsrs	r2, r0, #16
 8018628:	2000      	movs	r0, #0
 801862a:	4282      	cmp	r2, r0
 801862c:	d101      	bne.n	8018632 <__hi0bits+0xe>
 801862e:	041b      	lsls	r3, r3, #16
 8018630:	3010      	adds	r0, #16
 8018632:	0e1a      	lsrs	r2, r3, #24
 8018634:	d101      	bne.n	801863a <__hi0bits+0x16>
 8018636:	3008      	adds	r0, #8
 8018638:	021b      	lsls	r3, r3, #8
 801863a:	0f1a      	lsrs	r2, r3, #28
 801863c:	d101      	bne.n	8018642 <__hi0bits+0x1e>
 801863e:	3004      	adds	r0, #4
 8018640:	011b      	lsls	r3, r3, #4
 8018642:	0f9a      	lsrs	r2, r3, #30
 8018644:	d101      	bne.n	801864a <__hi0bits+0x26>
 8018646:	3002      	adds	r0, #2
 8018648:	009b      	lsls	r3, r3, #2
 801864a:	2b00      	cmp	r3, #0
 801864c:	db03      	blt.n	8018656 <__hi0bits+0x32>
 801864e:	3001      	adds	r0, #1
 8018650:	005b      	lsls	r3, r3, #1
 8018652:	d400      	bmi.n	8018656 <__hi0bits+0x32>
 8018654:	2020      	movs	r0, #32
 8018656:	4770      	bx	lr

08018658 <__lo0bits>:
 8018658:	6803      	ldr	r3, [r0, #0]
 801865a:	0002      	movs	r2, r0
 801865c:	2107      	movs	r1, #7
 801865e:	0018      	movs	r0, r3
 8018660:	4008      	ands	r0, r1
 8018662:	420b      	tst	r3, r1
 8018664:	d00d      	beq.n	8018682 <__lo0bits+0x2a>
 8018666:	3906      	subs	r1, #6
 8018668:	2000      	movs	r0, #0
 801866a:	420b      	tst	r3, r1
 801866c:	d105      	bne.n	801867a <__lo0bits+0x22>
 801866e:	3002      	adds	r0, #2
 8018670:	4203      	tst	r3, r0
 8018672:	d003      	beq.n	801867c <__lo0bits+0x24>
 8018674:	40cb      	lsrs	r3, r1
 8018676:	0008      	movs	r0, r1
 8018678:	6013      	str	r3, [r2, #0]
 801867a:	4770      	bx	lr
 801867c:	089b      	lsrs	r3, r3, #2
 801867e:	6013      	str	r3, [r2, #0]
 8018680:	e7fb      	b.n	801867a <__lo0bits+0x22>
 8018682:	b299      	uxth	r1, r3
 8018684:	2900      	cmp	r1, #0
 8018686:	d101      	bne.n	801868c <__lo0bits+0x34>
 8018688:	2010      	movs	r0, #16
 801868a:	0c1b      	lsrs	r3, r3, #16
 801868c:	b2d9      	uxtb	r1, r3
 801868e:	2900      	cmp	r1, #0
 8018690:	d101      	bne.n	8018696 <__lo0bits+0x3e>
 8018692:	3008      	adds	r0, #8
 8018694:	0a1b      	lsrs	r3, r3, #8
 8018696:	0719      	lsls	r1, r3, #28
 8018698:	d101      	bne.n	801869e <__lo0bits+0x46>
 801869a:	3004      	adds	r0, #4
 801869c:	091b      	lsrs	r3, r3, #4
 801869e:	0799      	lsls	r1, r3, #30
 80186a0:	d101      	bne.n	80186a6 <__lo0bits+0x4e>
 80186a2:	3002      	adds	r0, #2
 80186a4:	089b      	lsrs	r3, r3, #2
 80186a6:	07d9      	lsls	r1, r3, #31
 80186a8:	d4e9      	bmi.n	801867e <__lo0bits+0x26>
 80186aa:	3001      	adds	r0, #1
 80186ac:	085b      	lsrs	r3, r3, #1
 80186ae:	d1e6      	bne.n	801867e <__lo0bits+0x26>
 80186b0:	2020      	movs	r0, #32
 80186b2:	e7e2      	b.n	801867a <__lo0bits+0x22>

080186b4 <__i2b>:
 80186b4:	b510      	push	{r4, lr}
 80186b6:	000c      	movs	r4, r1
 80186b8:	2101      	movs	r1, #1
 80186ba:	f7ff fef1 	bl	80184a0 <_Balloc>
 80186be:	2800      	cmp	r0, #0
 80186c0:	d106      	bne.n	80186d0 <__i2b+0x1c>
 80186c2:	21a0      	movs	r1, #160	; 0xa0
 80186c4:	0002      	movs	r2, r0
 80186c6:	4b04      	ldr	r3, [pc, #16]	; (80186d8 <__i2b+0x24>)
 80186c8:	4804      	ldr	r0, [pc, #16]	; (80186dc <__i2b+0x28>)
 80186ca:	0049      	lsls	r1, r1, #1
 80186cc:	f000 fc6a 	bl	8018fa4 <__assert_func>
 80186d0:	2301      	movs	r3, #1
 80186d2:	6144      	str	r4, [r0, #20]
 80186d4:	6103      	str	r3, [r0, #16]
 80186d6:	bd10      	pop	{r4, pc}
 80186d8:	0801d849 	.word	0x0801d849
 80186dc:	0801d938 	.word	0x0801d938

080186e0 <__multiply>:
 80186e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80186e2:	690b      	ldr	r3, [r1, #16]
 80186e4:	0014      	movs	r4, r2
 80186e6:	6912      	ldr	r2, [r2, #16]
 80186e8:	000d      	movs	r5, r1
 80186ea:	b089      	sub	sp, #36	; 0x24
 80186ec:	4293      	cmp	r3, r2
 80186ee:	da01      	bge.n	80186f4 <__multiply+0x14>
 80186f0:	0025      	movs	r5, r4
 80186f2:	000c      	movs	r4, r1
 80186f4:	692f      	ldr	r7, [r5, #16]
 80186f6:	6926      	ldr	r6, [r4, #16]
 80186f8:	6869      	ldr	r1, [r5, #4]
 80186fa:	19bb      	adds	r3, r7, r6
 80186fc:	9302      	str	r3, [sp, #8]
 80186fe:	68ab      	ldr	r3, [r5, #8]
 8018700:	19ba      	adds	r2, r7, r6
 8018702:	4293      	cmp	r3, r2
 8018704:	da00      	bge.n	8018708 <__multiply+0x28>
 8018706:	3101      	adds	r1, #1
 8018708:	f7ff feca 	bl	80184a0 <_Balloc>
 801870c:	9001      	str	r0, [sp, #4]
 801870e:	2800      	cmp	r0, #0
 8018710:	d106      	bne.n	8018720 <__multiply+0x40>
 8018712:	215e      	movs	r1, #94	; 0x5e
 8018714:	0002      	movs	r2, r0
 8018716:	4b48      	ldr	r3, [pc, #288]	; (8018838 <__multiply+0x158>)
 8018718:	4848      	ldr	r0, [pc, #288]	; (801883c <__multiply+0x15c>)
 801871a:	31ff      	adds	r1, #255	; 0xff
 801871c:	f000 fc42 	bl	8018fa4 <__assert_func>
 8018720:	9b01      	ldr	r3, [sp, #4]
 8018722:	2200      	movs	r2, #0
 8018724:	3314      	adds	r3, #20
 8018726:	469c      	mov	ip, r3
 8018728:	19bb      	adds	r3, r7, r6
 801872a:	009b      	lsls	r3, r3, #2
 801872c:	4463      	add	r3, ip
 801872e:	9303      	str	r3, [sp, #12]
 8018730:	4663      	mov	r3, ip
 8018732:	9903      	ldr	r1, [sp, #12]
 8018734:	428b      	cmp	r3, r1
 8018736:	d32c      	bcc.n	8018792 <__multiply+0xb2>
 8018738:	002b      	movs	r3, r5
 801873a:	0022      	movs	r2, r4
 801873c:	3314      	adds	r3, #20
 801873e:	00bf      	lsls	r7, r7, #2
 8018740:	3214      	adds	r2, #20
 8018742:	9306      	str	r3, [sp, #24]
 8018744:	00b6      	lsls	r6, r6, #2
 8018746:	19db      	adds	r3, r3, r7
 8018748:	9304      	str	r3, [sp, #16]
 801874a:	1993      	adds	r3, r2, r6
 801874c:	9307      	str	r3, [sp, #28]
 801874e:	2304      	movs	r3, #4
 8018750:	9305      	str	r3, [sp, #20]
 8018752:	002b      	movs	r3, r5
 8018754:	9904      	ldr	r1, [sp, #16]
 8018756:	3315      	adds	r3, #21
 8018758:	9200      	str	r2, [sp, #0]
 801875a:	4299      	cmp	r1, r3
 801875c:	d305      	bcc.n	801876a <__multiply+0x8a>
 801875e:	1b4b      	subs	r3, r1, r5
 8018760:	3b15      	subs	r3, #21
 8018762:	089b      	lsrs	r3, r3, #2
 8018764:	3301      	adds	r3, #1
 8018766:	009b      	lsls	r3, r3, #2
 8018768:	9305      	str	r3, [sp, #20]
 801876a:	9b07      	ldr	r3, [sp, #28]
 801876c:	9a00      	ldr	r2, [sp, #0]
 801876e:	429a      	cmp	r2, r3
 8018770:	d311      	bcc.n	8018796 <__multiply+0xb6>
 8018772:	9b02      	ldr	r3, [sp, #8]
 8018774:	2b00      	cmp	r3, #0
 8018776:	dd06      	ble.n	8018786 <__multiply+0xa6>
 8018778:	9b03      	ldr	r3, [sp, #12]
 801877a:	3b04      	subs	r3, #4
 801877c:	9303      	str	r3, [sp, #12]
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	9300      	str	r3, [sp, #0]
 8018782:	2b00      	cmp	r3, #0
 8018784:	d054      	beq.n	8018830 <__multiply+0x150>
 8018786:	9b01      	ldr	r3, [sp, #4]
 8018788:	9a02      	ldr	r2, [sp, #8]
 801878a:	0018      	movs	r0, r3
 801878c:	611a      	str	r2, [r3, #16]
 801878e:	b009      	add	sp, #36	; 0x24
 8018790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018792:	c304      	stmia	r3!, {r2}
 8018794:	e7cd      	b.n	8018732 <__multiply+0x52>
 8018796:	9b00      	ldr	r3, [sp, #0]
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	b298      	uxth	r0, r3
 801879c:	2800      	cmp	r0, #0
 801879e:	d01c      	beq.n	80187da <__multiply+0xfa>
 80187a0:	4667      	mov	r7, ip
 80187a2:	2400      	movs	r4, #0
 80187a4:	9e06      	ldr	r6, [sp, #24]
 80187a6:	ce02      	ldmia	r6!, {r1}
 80187a8:	683a      	ldr	r2, [r7, #0]
 80187aa:	b28b      	uxth	r3, r1
 80187ac:	4343      	muls	r3, r0
 80187ae:	0c09      	lsrs	r1, r1, #16
 80187b0:	4341      	muls	r1, r0
 80187b2:	b292      	uxth	r2, r2
 80187b4:	189b      	adds	r3, r3, r2
 80187b6:	191b      	adds	r3, r3, r4
 80187b8:	000c      	movs	r4, r1
 80187ba:	683a      	ldr	r2, [r7, #0]
 80187bc:	0c11      	lsrs	r1, r2, #16
 80187be:	1861      	adds	r1, r4, r1
 80187c0:	0c1c      	lsrs	r4, r3, #16
 80187c2:	1909      	adds	r1, r1, r4
 80187c4:	0c0c      	lsrs	r4, r1, #16
 80187c6:	b29b      	uxth	r3, r3
 80187c8:	0409      	lsls	r1, r1, #16
 80187ca:	430b      	orrs	r3, r1
 80187cc:	c708      	stmia	r7!, {r3}
 80187ce:	9b04      	ldr	r3, [sp, #16]
 80187d0:	42b3      	cmp	r3, r6
 80187d2:	d8e8      	bhi.n	80187a6 <__multiply+0xc6>
 80187d4:	4663      	mov	r3, ip
 80187d6:	9a05      	ldr	r2, [sp, #20]
 80187d8:	509c      	str	r4, [r3, r2]
 80187da:	9b00      	ldr	r3, [sp, #0]
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	0c1e      	lsrs	r6, r3, #16
 80187e0:	d020      	beq.n	8018824 <__multiply+0x144>
 80187e2:	4663      	mov	r3, ip
 80187e4:	002c      	movs	r4, r5
 80187e6:	4660      	mov	r0, ip
 80187e8:	2700      	movs	r7, #0
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	3414      	adds	r4, #20
 80187ee:	6822      	ldr	r2, [r4, #0]
 80187f0:	b29b      	uxth	r3, r3
 80187f2:	b291      	uxth	r1, r2
 80187f4:	4371      	muls	r1, r6
 80187f6:	6802      	ldr	r2, [r0, #0]
 80187f8:	0c12      	lsrs	r2, r2, #16
 80187fa:	1889      	adds	r1, r1, r2
 80187fc:	19cf      	adds	r7, r1, r7
 80187fe:	0439      	lsls	r1, r7, #16
 8018800:	430b      	orrs	r3, r1
 8018802:	6003      	str	r3, [r0, #0]
 8018804:	cc02      	ldmia	r4!, {r1}
 8018806:	6843      	ldr	r3, [r0, #4]
 8018808:	0c09      	lsrs	r1, r1, #16
 801880a:	4371      	muls	r1, r6
 801880c:	b29b      	uxth	r3, r3
 801880e:	0c3f      	lsrs	r7, r7, #16
 8018810:	18cb      	adds	r3, r1, r3
 8018812:	9a04      	ldr	r2, [sp, #16]
 8018814:	19db      	adds	r3, r3, r7
 8018816:	0c1f      	lsrs	r7, r3, #16
 8018818:	3004      	adds	r0, #4
 801881a:	42a2      	cmp	r2, r4
 801881c:	d8e7      	bhi.n	80187ee <__multiply+0x10e>
 801881e:	4662      	mov	r2, ip
 8018820:	9905      	ldr	r1, [sp, #20]
 8018822:	5053      	str	r3, [r2, r1]
 8018824:	9b00      	ldr	r3, [sp, #0]
 8018826:	3304      	adds	r3, #4
 8018828:	9300      	str	r3, [sp, #0]
 801882a:	2304      	movs	r3, #4
 801882c:	449c      	add	ip, r3
 801882e:	e79c      	b.n	801876a <__multiply+0x8a>
 8018830:	9b02      	ldr	r3, [sp, #8]
 8018832:	3b01      	subs	r3, #1
 8018834:	9302      	str	r3, [sp, #8]
 8018836:	e79c      	b.n	8018772 <__multiply+0x92>
 8018838:	0801d849 	.word	0x0801d849
 801883c:	0801d938 	.word	0x0801d938

08018840 <__pow5mult>:
 8018840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018842:	2303      	movs	r3, #3
 8018844:	0015      	movs	r5, r2
 8018846:	0007      	movs	r7, r0
 8018848:	000e      	movs	r6, r1
 801884a:	401a      	ands	r2, r3
 801884c:	421d      	tst	r5, r3
 801884e:	d008      	beq.n	8018862 <__pow5mult+0x22>
 8018850:	491a      	ldr	r1, [pc, #104]	; (80188bc <__pow5mult+0x7c>)
 8018852:	3a01      	subs	r2, #1
 8018854:	0092      	lsls	r2, r2, #2
 8018856:	5852      	ldr	r2, [r2, r1]
 8018858:	2300      	movs	r3, #0
 801885a:	0031      	movs	r1, r6
 801885c:	f7ff fe52 	bl	8018504 <__multadd>
 8018860:	0006      	movs	r6, r0
 8018862:	10ad      	asrs	r5, r5, #2
 8018864:	d027      	beq.n	80188b6 <__pow5mult+0x76>
 8018866:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8018868:	2c00      	cmp	r4, #0
 801886a:	d107      	bne.n	801887c <__pow5mult+0x3c>
 801886c:	0038      	movs	r0, r7
 801886e:	4914      	ldr	r1, [pc, #80]	; (80188c0 <__pow5mult+0x80>)
 8018870:	f7ff ff20 	bl	80186b4 <__i2b>
 8018874:	2300      	movs	r3, #0
 8018876:	0004      	movs	r4, r0
 8018878:	64b8      	str	r0, [r7, #72]	; 0x48
 801887a:	6003      	str	r3, [r0, #0]
 801887c:	2301      	movs	r3, #1
 801887e:	421d      	tst	r5, r3
 8018880:	d00a      	beq.n	8018898 <__pow5mult+0x58>
 8018882:	0031      	movs	r1, r6
 8018884:	0022      	movs	r2, r4
 8018886:	0038      	movs	r0, r7
 8018888:	f7ff ff2a 	bl	80186e0 <__multiply>
 801888c:	0031      	movs	r1, r6
 801888e:	9001      	str	r0, [sp, #4]
 8018890:	0038      	movs	r0, r7
 8018892:	f7ff fe2d 	bl	80184f0 <_Bfree>
 8018896:	9e01      	ldr	r6, [sp, #4]
 8018898:	106d      	asrs	r5, r5, #1
 801889a:	d00c      	beq.n	80188b6 <__pow5mult+0x76>
 801889c:	6820      	ldr	r0, [r4, #0]
 801889e:	2800      	cmp	r0, #0
 80188a0:	d107      	bne.n	80188b2 <__pow5mult+0x72>
 80188a2:	0022      	movs	r2, r4
 80188a4:	0021      	movs	r1, r4
 80188a6:	0038      	movs	r0, r7
 80188a8:	f7ff ff1a 	bl	80186e0 <__multiply>
 80188ac:	2300      	movs	r3, #0
 80188ae:	6020      	str	r0, [r4, #0]
 80188b0:	6003      	str	r3, [r0, #0]
 80188b2:	0004      	movs	r4, r0
 80188b4:	e7e2      	b.n	801887c <__pow5mult+0x3c>
 80188b6:	0030      	movs	r0, r6
 80188b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80188ba:	46c0      	nop			; (mov r8, r8)
 80188bc:	0801da88 	.word	0x0801da88
 80188c0:	00000271 	.word	0x00000271

080188c4 <__lshift>:
 80188c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80188c6:	000c      	movs	r4, r1
 80188c8:	0017      	movs	r7, r2
 80188ca:	6923      	ldr	r3, [r4, #16]
 80188cc:	1155      	asrs	r5, r2, #5
 80188ce:	b087      	sub	sp, #28
 80188d0:	18eb      	adds	r3, r5, r3
 80188d2:	9302      	str	r3, [sp, #8]
 80188d4:	3301      	adds	r3, #1
 80188d6:	9301      	str	r3, [sp, #4]
 80188d8:	6849      	ldr	r1, [r1, #4]
 80188da:	68a3      	ldr	r3, [r4, #8]
 80188dc:	9004      	str	r0, [sp, #16]
 80188de:	9a01      	ldr	r2, [sp, #4]
 80188e0:	4293      	cmp	r3, r2
 80188e2:	db11      	blt.n	8018908 <__lshift+0x44>
 80188e4:	9804      	ldr	r0, [sp, #16]
 80188e6:	f7ff fddb 	bl	80184a0 <_Balloc>
 80188ea:	0002      	movs	r2, r0
 80188ec:	2300      	movs	r3, #0
 80188ee:	3214      	adds	r2, #20
 80188f0:	0006      	movs	r6, r0
 80188f2:	0011      	movs	r1, r2
 80188f4:	9203      	str	r2, [sp, #12]
 80188f6:	4298      	cmp	r0, r3
 80188f8:	d10d      	bne.n	8018916 <__lshift+0x52>
 80188fa:	21da      	movs	r1, #218	; 0xda
 80188fc:	0002      	movs	r2, r0
 80188fe:	4b27      	ldr	r3, [pc, #156]	; (801899c <__lshift+0xd8>)
 8018900:	4827      	ldr	r0, [pc, #156]	; (80189a0 <__lshift+0xdc>)
 8018902:	31ff      	adds	r1, #255	; 0xff
 8018904:	f000 fb4e 	bl	8018fa4 <__assert_func>
 8018908:	3101      	adds	r1, #1
 801890a:	005b      	lsls	r3, r3, #1
 801890c:	e7e7      	b.n	80188de <__lshift+0x1a>
 801890e:	2200      	movs	r2, #0
 8018910:	0098      	lsls	r0, r3, #2
 8018912:	500a      	str	r2, [r1, r0]
 8018914:	3301      	adds	r3, #1
 8018916:	42ab      	cmp	r3, r5
 8018918:	dbf9      	blt.n	801890e <__lshift+0x4a>
 801891a:	43eb      	mvns	r3, r5
 801891c:	17db      	asrs	r3, r3, #31
 801891e:	401d      	ands	r5, r3
 8018920:	9b03      	ldr	r3, [sp, #12]
 8018922:	00ad      	lsls	r5, r5, #2
 8018924:	211f      	movs	r1, #31
 8018926:	0038      	movs	r0, r7
 8018928:	195d      	adds	r5, r3, r5
 801892a:	0023      	movs	r3, r4
 801892c:	6922      	ldr	r2, [r4, #16]
 801892e:	3314      	adds	r3, #20
 8018930:	0092      	lsls	r2, r2, #2
 8018932:	4008      	ands	r0, r1
 8018934:	4684      	mov	ip, r0
 8018936:	189a      	adds	r2, r3, r2
 8018938:	420f      	tst	r7, r1
 801893a:	d02a      	beq.n	8018992 <__lshift+0xce>
 801893c:	3101      	adds	r1, #1
 801893e:	1a09      	subs	r1, r1, r0
 8018940:	9105      	str	r1, [sp, #20]
 8018942:	2100      	movs	r1, #0
 8018944:	9503      	str	r5, [sp, #12]
 8018946:	4667      	mov	r7, ip
 8018948:	6818      	ldr	r0, [r3, #0]
 801894a:	40b8      	lsls	r0, r7
 801894c:	4301      	orrs	r1, r0
 801894e:	9803      	ldr	r0, [sp, #12]
 8018950:	c002      	stmia	r0!, {r1}
 8018952:	cb02      	ldmia	r3!, {r1}
 8018954:	9003      	str	r0, [sp, #12]
 8018956:	9805      	ldr	r0, [sp, #20]
 8018958:	40c1      	lsrs	r1, r0
 801895a:	429a      	cmp	r2, r3
 801895c:	d8f3      	bhi.n	8018946 <__lshift+0x82>
 801895e:	0020      	movs	r0, r4
 8018960:	3015      	adds	r0, #21
 8018962:	2304      	movs	r3, #4
 8018964:	4282      	cmp	r2, r0
 8018966:	d304      	bcc.n	8018972 <__lshift+0xae>
 8018968:	1b13      	subs	r3, r2, r4
 801896a:	3b15      	subs	r3, #21
 801896c:	089b      	lsrs	r3, r3, #2
 801896e:	3301      	adds	r3, #1
 8018970:	009b      	lsls	r3, r3, #2
 8018972:	50e9      	str	r1, [r5, r3]
 8018974:	2900      	cmp	r1, #0
 8018976:	d002      	beq.n	801897e <__lshift+0xba>
 8018978:	9b02      	ldr	r3, [sp, #8]
 801897a:	3302      	adds	r3, #2
 801897c:	9301      	str	r3, [sp, #4]
 801897e:	9b01      	ldr	r3, [sp, #4]
 8018980:	9804      	ldr	r0, [sp, #16]
 8018982:	3b01      	subs	r3, #1
 8018984:	0021      	movs	r1, r4
 8018986:	6133      	str	r3, [r6, #16]
 8018988:	f7ff fdb2 	bl	80184f0 <_Bfree>
 801898c:	0030      	movs	r0, r6
 801898e:	b007      	add	sp, #28
 8018990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018992:	cb02      	ldmia	r3!, {r1}
 8018994:	c502      	stmia	r5!, {r1}
 8018996:	429a      	cmp	r2, r3
 8018998:	d8fb      	bhi.n	8018992 <__lshift+0xce>
 801899a:	e7f0      	b.n	801897e <__lshift+0xba>
 801899c:	0801d849 	.word	0x0801d849
 80189a0:	0801d938 	.word	0x0801d938

080189a4 <__mcmp>:
 80189a4:	6902      	ldr	r2, [r0, #16]
 80189a6:	690b      	ldr	r3, [r1, #16]
 80189a8:	b530      	push	{r4, r5, lr}
 80189aa:	0004      	movs	r4, r0
 80189ac:	1ad0      	subs	r0, r2, r3
 80189ae:	429a      	cmp	r2, r3
 80189b0:	d10d      	bne.n	80189ce <__mcmp+0x2a>
 80189b2:	009b      	lsls	r3, r3, #2
 80189b4:	3414      	adds	r4, #20
 80189b6:	3114      	adds	r1, #20
 80189b8:	18e2      	adds	r2, r4, r3
 80189ba:	18c9      	adds	r1, r1, r3
 80189bc:	3a04      	subs	r2, #4
 80189be:	3904      	subs	r1, #4
 80189c0:	6815      	ldr	r5, [r2, #0]
 80189c2:	680b      	ldr	r3, [r1, #0]
 80189c4:	429d      	cmp	r5, r3
 80189c6:	d003      	beq.n	80189d0 <__mcmp+0x2c>
 80189c8:	2001      	movs	r0, #1
 80189ca:	429d      	cmp	r5, r3
 80189cc:	d303      	bcc.n	80189d6 <__mcmp+0x32>
 80189ce:	bd30      	pop	{r4, r5, pc}
 80189d0:	4294      	cmp	r4, r2
 80189d2:	d3f3      	bcc.n	80189bc <__mcmp+0x18>
 80189d4:	e7fb      	b.n	80189ce <__mcmp+0x2a>
 80189d6:	4240      	negs	r0, r0
 80189d8:	e7f9      	b.n	80189ce <__mcmp+0x2a>
	...

080189dc <__mdiff>:
 80189dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80189de:	000e      	movs	r6, r1
 80189e0:	0007      	movs	r7, r0
 80189e2:	0011      	movs	r1, r2
 80189e4:	0030      	movs	r0, r6
 80189e6:	b087      	sub	sp, #28
 80189e8:	0014      	movs	r4, r2
 80189ea:	f7ff ffdb 	bl	80189a4 <__mcmp>
 80189ee:	1e05      	subs	r5, r0, #0
 80189f0:	d110      	bne.n	8018a14 <__mdiff+0x38>
 80189f2:	0001      	movs	r1, r0
 80189f4:	0038      	movs	r0, r7
 80189f6:	f7ff fd53 	bl	80184a0 <_Balloc>
 80189fa:	1e02      	subs	r2, r0, #0
 80189fc:	d104      	bne.n	8018a08 <__mdiff+0x2c>
 80189fe:	4b40      	ldr	r3, [pc, #256]	; (8018b00 <__mdiff+0x124>)
 8018a00:	4940      	ldr	r1, [pc, #256]	; (8018b04 <__mdiff+0x128>)
 8018a02:	4841      	ldr	r0, [pc, #260]	; (8018b08 <__mdiff+0x12c>)
 8018a04:	f000 face 	bl	8018fa4 <__assert_func>
 8018a08:	2301      	movs	r3, #1
 8018a0a:	6145      	str	r5, [r0, #20]
 8018a0c:	6103      	str	r3, [r0, #16]
 8018a0e:	0010      	movs	r0, r2
 8018a10:	b007      	add	sp, #28
 8018a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a14:	2301      	movs	r3, #1
 8018a16:	9301      	str	r3, [sp, #4]
 8018a18:	2800      	cmp	r0, #0
 8018a1a:	db04      	blt.n	8018a26 <__mdiff+0x4a>
 8018a1c:	0023      	movs	r3, r4
 8018a1e:	0034      	movs	r4, r6
 8018a20:	001e      	movs	r6, r3
 8018a22:	2300      	movs	r3, #0
 8018a24:	9301      	str	r3, [sp, #4]
 8018a26:	0038      	movs	r0, r7
 8018a28:	6861      	ldr	r1, [r4, #4]
 8018a2a:	f7ff fd39 	bl	80184a0 <_Balloc>
 8018a2e:	1e02      	subs	r2, r0, #0
 8018a30:	d103      	bne.n	8018a3a <__mdiff+0x5e>
 8018a32:	2190      	movs	r1, #144	; 0x90
 8018a34:	4b32      	ldr	r3, [pc, #200]	; (8018b00 <__mdiff+0x124>)
 8018a36:	0089      	lsls	r1, r1, #2
 8018a38:	e7e3      	b.n	8018a02 <__mdiff+0x26>
 8018a3a:	9b01      	ldr	r3, [sp, #4]
 8018a3c:	2700      	movs	r7, #0
 8018a3e:	60c3      	str	r3, [r0, #12]
 8018a40:	6920      	ldr	r0, [r4, #16]
 8018a42:	3414      	adds	r4, #20
 8018a44:	9401      	str	r4, [sp, #4]
 8018a46:	9b01      	ldr	r3, [sp, #4]
 8018a48:	0084      	lsls	r4, r0, #2
 8018a4a:	191b      	adds	r3, r3, r4
 8018a4c:	0034      	movs	r4, r6
 8018a4e:	9302      	str	r3, [sp, #8]
 8018a50:	6933      	ldr	r3, [r6, #16]
 8018a52:	3414      	adds	r4, #20
 8018a54:	0099      	lsls	r1, r3, #2
 8018a56:	1863      	adds	r3, r4, r1
 8018a58:	9303      	str	r3, [sp, #12]
 8018a5a:	0013      	movs	r3, r2
 8018a5c:	3314      	adds	r3, #20
 8018a5e:	469c      	mov	ip, r3
 8018a60:	9305      	str	r3, [sp, #20]
 8018a62:	9b01      	ldr	r3, [sp, #4]
 8018a64:	9304      	str	r3, [sp, #16]
 8018a66:	9b04      	ldr	r3, [sp, #16]
 8018a68:	cc02      	ldmia	r4!, {r1}
 8018a6a:	cb20      	ldmia	r3!, {r5}
 8018a6c:	9304      	str	r3, [sp, #16]
 8018a6e:	b2ab      	uxth	r3, r5
 8018a70:	19df      	adds	r7, r3, r7
 8018a72:	b28b      	uxth	r3, r1
 8018a74:	1afb      	subs	r3, r7, r3
 8018a76:	0c2d      	lsrs	r5, r5, #16
 8018a78:	0c09      	lsrs	r1, r1, #16
 8018a7a:	1a69      	subs	r1, r5, r1
 8018a7c:	141d      	asrs	r5, r3, #16
 8018a7e:	1949      	adds	r1, r1, r5
 8018a80:	140f      	asrs	r7, r1, #16
 8018a82:	b29b      	uxth	r3, r3
 8018a84:	0409      	lsls	r1, r1, #16
 8018a86:	430b      	orrs	r3, r1
 8018a88:	4661      	mov	r1, ip
 8018a8a:	c108      	stmia	r1!, {r3}
 8018a8c:	9b03      	ldr	r3, [sp, #12]
 8018a8e:	468c      	mov	ip, r1
 8018a90:	42a3      	cmp	r3, r4
 8018a92:	d8e8      	bhi.n	8018a66 <__mdiff+0x8a>
 8018a94:	0031      	movs	r1, r6
 8018a96:	9c03      	ldr	r4, [sp, #12]
 8018a98:	3115      	adds	r1, #21
 8018a9a:	2304      	movs	r3, #4
 8018a9c:	428c      	cmp	r4, r1
 8018a9e:	d304      	bcc.n	8018aaa <__mdiff+0xce>
 8018aa0:	1ba3      	subs	r3, r4, r6
 8018aa2:	3b15      	subs	r3, #21
 8018aa4:	089b      	lsrs	r3, r3, #2
 8018aa6:	3301      	adds	r3, #1
 8018aa8:	009b      	lsls	r3, r3, #2
 8018aaa:	9901      	ldr	r1, [sp, #4]
 8018aac:	18cc      	adds	r4, r1, r3
 8018aae:	9905      	ldr	r1, [sp, #20]
 8018ab0:	0026      	movs	r6, r4
 8018ab2:	18cb      	adds	r3, r1, r3
 8018ab4:	469c      	mov	ip, r3
 8018ab6:	9902      	ldr	r1, [sp, #8]
 8018ab8:	428e      	cmp	r6, r1
 8018aba:	d310      	bcc.n	8018ade <__mdiff+0x102>
 8018abc:	9e02      	ldr	r6, [sp, #8]
 8018abe:	1ee5      	subs	r5, r4, #3
 8018ac0:	2100      	movs	r1, #0
 8018ac2:	42ae      	cmp	r6, r5
 8018ac4:	d304      	bcc.n	8018ad0 <__mdiff+0xf4>
 8018ac6:	0031      	movs	r1, r6
 8018ac8:	3103      	adds	r1, #3
 8018aca:	1b09      	subs	r1, r1, r4
 8018acc:	0889      	lsrs	r1, r1, #2
 8018ace:	0089      	lsls	r1, r1, #2
 8018ad0:	185b      	adds	r3, r3, r1
 8018ad2:	3b04      	subs	r3, #4
 8018ad4:	6819      	ldr	r1, [r3, #0]
 8018ad6:	2900      	cmp	r1, #0
 8018ad8:	d00f      	beq.n	8018afa <__mdiff+0x11e>
 8018ada:	6110      	str	r0, [r2, #16]
 8018adc:	e797      	b.n	8018a0e <__mdiff+0x32>
 8018ade:	ce02      	ldmia	r6!, {r1}
 8018ae0:	b28d      	uxth	r5, r1
 8018ae2:	19ed      	adds	r5, r5, r7
 8018ae4:	0c0f      	lsrs	r7, r1, #16
 8018ae6:	1429      	asrs	r1, r5, #16
 8018ae8:	1879      	adds	r1, r7, r1
 8018aea:	140f      	asrs	r7, r1, #16
 8018aec:	b2ad      	uxth	r5, r5
 8018aee:	0409      	lsls	r1, r1, #16
 8018af0:	430d      	orrs	r5, r1
 8018af2:	4661      	mov	r1, ip
 8018af4:	c120      	stmia	r1!, {r5}
 8018af6:	468c      	mov	ip, r1
 8018af8:	e7dd      	b.n	8018ab6 <__mdiff+0xda>
 8018afa:	3801      	subs	r0, #1
 8018afc:	e7e9      	b.n	8018ad2 <__mdiff+0xf6>
 8018afe:	46c0      	nop			; (mov r8, r8)
 8018b00:	0801d849 	.word	0x0801d849
 8018b04:	00000232 	.word	0x00000232
 8018b08:	0801d938 	.word	0x0801d938

08018b0c <__ulp>:
 8018b0c:	4b0f      	ldr	r3, [pc, #60]	; (8018b4c <__ulp+0x40>)
 8018b0e:	4019      	ands	r1, r3
 8018b10:	4b0f      	ldr	r3, [pc, #60]	; (8018b50 <__ulp+0x44>)
 8018b12:	18c9      	adds	r1, r1, r3
 8018b14:	2900      	cmp	r1, #0
 8018b16:	dd04      	ble.n	8018b22 <__ulp+0x16>
 8018b18:	2200      	movs	r2, #0
 8018b1a:	000b      	movs	r3, r1
 8018b1c:	0010      	movs	r0, r2
 8018b1e:	0019      	movs	r1, r3
 8018b20:	4770      	bx	lr
 8018b22:	4249      	negs	r1, r1
 8018b24:	2200      	movs	r2, #0
 8018b26:	2300      	movs	r3, #0
 8018b28:	1509      	asrs	r1, r1, #20
 8018b2a:	2913      	cmp	r1, #19
 8018b2c:	dc04      	bgt.n	8018b38 <__ulp+0x2c>
 8018b2e:	2080      	movs	r0, #128	; 0x80
 8018b30:	0300      	lsls	r0, r0, #12
 8018b32:	4108      	asrs	r0, r1
 8018b34:	0003      	movs	r3, r0
 8018b36:	e7f1      	b.n	8018b1c <__ulp+0x10>
 8018b38:	3914      	subs	r1, #20
 8018b3a:	2001      	movs	r0, #1
 8018b3c:	291e      	cmp	r1, #30
 8018b3e:	dc02      	bgt.n	8018b46 <__ulp+0x3a>
 8018b40:	2080      	movs	r0, #128	; 0x80
 8018b42:	0600      	lsls	r0, r0, #24
 8018b44:	40c8      	lsrs	r0, r1
 8018b46:	0002      	movs	r2, r0
 8018b48:	e7e8      	b.n	8018b1c <__ulp+0x10>
 8018b4a:	46c0      	nop			; (mov r8, r8)
 8018b4c:	7ff00000 	.word	0x7ff00000
 8018b50:	fcc00000 	.word	0xfcc00000

08018b54 <__b2d>:
 8018b54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018b56:	0006      	movs	r6, r0
 8018b58:	6903      	ldr	r3, [r0, #16]
 8018b5a:	3614      	adds	r6, #20
 8018b5c:	009b      	lsls	r3, r3, #2
 8018b5e:	18f3      	adds	r3, r6, r3
 8018b60:	1f1d      	subs	r5, r3, #4
 8018b62:	682c      	ldr	r4, [r5, #0]
 8018b64:	000f      	movs	r7, r1
 8018b66:	0020      	movs	r0, r4
 8018b68:	9301      	str	r3, [sp, #4]
 8018b6a:	f7ff fd5b 	bl	8018624 <__hi0bits>
 8018b6e:	2320      	movs	r3, #32
 8018b70:	1a1b      	subs	r3, r3, r0
 8018b72:	491f      	ldr	r1, [pc, #124]	; (8018bf0 <__b2d+0x9c>)
 8018b74:	603b      	str	r3, [r7, #0]
 8018b76:	280a      	cmp	r0, #10
 8018b78:	dc16      	bgt.n	8018ba8 <__b2d+0x54>
 8018b7a:	230b      	movs	r3, #11
 8018b7c:	0027      	movs	r7, r4
 8018b7e:	1a1b      	subs	r3, r3, r0
 8018b80:	40df      	lsrs	r7, r3
 8018b82:	4339      	orrs	r1, r7
 8018b84:	469c      	mov	ip, r3
 8018b86:	000b      	movs	r3, r1
 8018b88:	2100      	movs	r1, #0
 8018b8a:	42ae      	cmp	r6, r5
 8018b8c:	d202      	bcs.n	8018b94 <__b2d+0x40>
 8018b8e:	9901      	ldr	r1, [sp, #4]
 8018b90:	3908      	subs	r1, #8
 8018b92:	6809      	ldr	r1, [r1, #0]
 8018b94:	3015      	adds	r0, #21
 8018b96:	4084      	lsls	r4, r0
 8018b98:	4660      	mov	r0, ip
 8018b9a:	40c1      	lsrs	r1, r0
 8018b9c:	430c      	orrs	r4, r1
 8018b9e:	0022      	movs	r2, r4
 8018ba0:	0010      	movs	r0, r2
 8018ba2:	0019      	movs	r1, r3
 8018ba4:	b003      	add	sp, #12
 8018ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ba8:	2700      	movs	r7, #0
 8018baa:	42ae      	cmp	r6, r5
 8018bac:	d202      	bcs.n	8018bb4 <__b2d+0x60>
 8018bae:	9d01      	ldr	r5, [sp, #4]
 8018bb0:	3d08      	subs	r5, #8
 8018bb2:	682f      	ldr	r7, [r5, #0]
 8018bb4:	230b      	movs	r3, #11
 8018bb6:	425b      	negs	r3, r3
 8018bb8:	469c      	mov	ip, r3
 8018bba:	4484      	add	ip, r0
 8018bbc:	280b      	cmp	r0, #11
 8018bbe:	d013      	beq.n	8018be8 <__b2d+0x94>
 8018bc0:	4663      	mov	r3, ip
 8018bc2:	2020      	movs	r0, #32
 8018bc4:	409c      	lsls	r4, r3
 8018bc6:	1ac0      	subs	r0, r0, r3
 8018bc8:	003b      	movs	r3, r7
 8018bca:	40c3      	lsrs	r3, r0
 8018bcc:	431c      	orrs	r4, r3
 8018bce:	4321      	orrs	r1, r4
 8018bd0:	000b      	movs	r3, r1
 8018bd2:	2100      	movs	r1, #0
 8018bd4:	42b5      	cmp	r5, r6
 8018bd6:	d901      	bls.n	8018bdc <__b2d+0x88>
 8018bd8:	3d04      	subs	r5, #4
 8018bda:	6829      	ldr	r1, [r5, #0]
 8018bdc:	4664      	mov	r4, ip
 8018bde:	40c1      	lsrs	r1, r0
 8018be0:	40a7      	lsls	r7, r4
 8018be2:	430f      	orrs	r7, r1
 8018be4:	003a      	movs	r2, r7
 8018be6:	e7db      	b.n	8018ba0 <__b2d+0x4c>
 8018be8:	4321      	orrs	r1, r4
 8018bea:	000b      	movs	r3, r1
 8018bec:	e7fa      	b.n	8018be4 <__b2d+0x90>
 8018bee:	46c0      	nop			; (mov r8, r8)
 8018bf0:	3ff00000 	.word	0x3ff00000

08018bf4 <__d2b>:
 8018bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018bf6:	2101      	movs	r1, #1
 8018bf8:	0014      	movs	r4, r2
 8018bfa:	001e      	movs	r6, r3
 8018bfc:	9f08      	ldr	r7, [sp, #32]
 8018bfe:	f7ff fc4f 	bl	80184a0 <_Balloc>
 8018c02:	1e05      	subs	r5, r0, #0
 8018c04:	d105      	bne.n	8018c12 <__d2b+0x1e>
 8018c06:	0002      	movs	r2, r0
 8018c08:	4b26      	ldr	r3, [pc, #152]	; (8018ca4 <__d2b+0xb0>)
 8018c0a:	4927      	ldr	r1, [pc, #156]	; (8018ca8 <__d2b+0xb4>)
 8018c0c:	4827      	ldr	r0, [pc, #156]	; (8018cac <__d2b+0xb8>)
 8018c0e:	f000 f9c9 	bl	8018fa4 <__assert_func>
 8018c12:	0333      	lsls	r3, r6, #12
 8018c14:	0076      	lsls	r6, r6, #1
 8018c16:	0b1b      	lsrs	r3, r3, #12
 8018c18:	0d76      	lsrs	r6, r6, #21
 8018c1a:	d124      	bne.n	8018c66 <__d2b+0x72>
 8018c1c:	9301      	str	r3, [sp, #4]
 8018c1e:	2c00      	cmp	r4, #0
 8018c20:	d027      	beq.n	8018c72 <__d2b+0x7e>
 8018c22:	4668      	mov	r0, sp
 8018c24:	9400      	str	r4, [sp, #0]
 8018c26:	f7ff fd17 	bl	8018658 <__lo0bits>
 8018c2a:	9c00      	ldr	r4, [sp, #0]
 8018c2c:	2800      	cmp	r0, #0
 8018c2e:	d01e      	beq.n	8018c6e <__d2b+0x7a>
 8018c30:	9b01      	ldr	r3, [sp, #4]
 8018c32:	2120      	movs	r1, #32
 8018c34:	001a      	movs	r2, r3
 8018c36:	1a09      	subs	r1, r1, r0
 8018c38:	408a      	lsls	r2, r1
 8018c3a:	40c3      	lsrs	r3, r0
 8018c3c:	4322      	orrs	r2, r4
 8018c3e:	616a      	str	r2, [r5, #20]
 8018c40:	9301      	str	r3, [sp, #4]
 8018c42:	9c01      	ldr	r4, [sp, #4]
 8018c44:	61ac      	str	r4, [r5, #24]
 8018c46:	1e63      	subs	r3, r4, #1
 8018c48:	419c      	sbcs	r4, r3
 8018c4a:	3401      	adds	r4, #1
 8018c4c:	612c      	str	r4, [r5, #16]
 8018c4e:	2e00      	cmp	r6, #0
 8018c50:	d018      	beq.n	8018c84 <__d2b+0x90>
 8018c52:	4b17      	ldr	r3, [pc, #92]	; (8018cb0 <__d2b+0xbc>)
 8018c54:	18f6      	adds	r6, r6, r3
 8018c56:	2335      	movs	r3, #53	; 0x35
 8018c58:	1836      	adds	r6, r6, r0
 8018c5a:	1a18      	subs	r0, r3, r0
 8018c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c5e:	603e      	str	r6, [r7, #0]
 8018c60:	6018      	str	r0, [r3, #0]
 8018c62:	0028      	movs	r0, r5
 8018c64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018c66:	2280      	movs	r2, #128	; 0x80
 8018c68:	0352      	lsls	r2, r2, #13
 8018c6a:	4313      	orrs	r3, r2
 8018c6c:	e7d6      	b.n	8018c1c <__d2b+0x28>
 8018c6e:	616c      	str	r4, [r5, #20]
 8018c70:	e7e7      	b.n	8018c42 <__d2b+0x4e>
 8018c72:	a801      	add	r0, sp, #4
 8018c74:	f7ff fcf0 	bl	8018658 <__lo0bits>
 8018c78:	2401      	movs	r4, #1
 8018c7a:	9b01      	ldr	r3, [sp, #4]
 8018c7c:	612c      	str	r4, [r5, #16]
 8018c7e:	616b      	str	r3, [r5, #20]
 8018c80:	3020      	adds	r0, #32
 8018c82:	e7e4      	b.n	8018c4e <__d2b+0x5a>
 8018c84:	4b0b      	ldr	r3, [pc, #44]	; (8018cb4 <__d2b+0xc0>)
 8018c86:	18c0      	adds	r0, r0, r3
 8018c88:	4b0b      	ldr	r3, [pc, #44]	; (8018cb8 <__d2b+0xc4>)
 8018c8a:	6038      	str	r0, [r7, #0]
 8018c8c:	18e3      	adds	r3, r4, r3
 8018c8e:	009b      	lsls	r3, r3, #2
 8018c90:	18eb      	adds	r3, r5, r3
 8018c92:	6958      	ldr	r0, [r3, #20]
 8018c94:	f7ff fcc6 	bl	8018624 <__hi0bits>
 8018c98:	0164      	lsls	r4, r4, #5
 8018c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c9c:	1a24      	subs	r4, r4, r0
 8018c9e:	601c      	str	r4, [r3, #0]
 8018ca0:	e7df      	b.n	8018c62 <__d2b+0x6e>
 8018ca2:	46c0      	nop			; (mov r8, r8)
 8018ca4:	0801d849 	.word	0x0801d849
 8018ca8:	0000030a 	.word	0x0000030a
 8018cac:	0801d938 	.word	0x0801d938
 8018cb0:	fffffbcd 	.word	0xfffffbcd
 8018cb4:	fffffbce 	.word	0xfffffbce
 8018cb8:	3fffffff 	.word	0x3fffffff

08018cbc <__ratio>:
 8018cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018cbe:	b085      	sub	sp, #20
 8018cc0:	000d      	movs	r5, r1
 8018cc2:	a902      	add	r1, sp, #8
 8018cc4:	0004      	movs	r4, r0
 8018cc6:	f7ff ff45 	bl	8018b54 <__b2d>
 8018cca:	9000      	str	r0, [sp, #0]
 8018ccc:	9101      	str	r1, [sp, #4]
 8018cce:	9e00      	ldr	r6, [sp, #0]
 8018cd0:	9f01      	ldr	r7, [sp, #4]
 8018cd2:	0028      	movs	r0, r5
 8018cd4:	a903      	add	r1, sp, #12
 8018cd6:	f7ff ff3d 	bl	8018b54 <__b2d>
 8018cda:	6924      	ldr	r4, [r4, #16]
 8018cdc:	692d      	ldr	r5, [r5, #16]
 8018cde:	0002      	movs	r2, r0
 8018ce0:	1b65      	subs	r5, r4, r5
 8018ce2:	016c      	lsls	r4, r5, #5
 8018ce4:	46a4      	mov	ip, r4
 8018ce6:	9d03      	ldr	r5, [sp, #12]
 8018ce8:	9c02      	ldr	r4, [sp, #8]
 8018cea:	000b      	movs	r3, r1
 8018cec:	1b64      	subs	r4, r4, r5
 8018cee:	4464      	add	r4, ip
 8018cf0:	0525      	lsls	r5, r4, #20
 8018cf2:	2c00      	cmp	r4, #0
 8018cf4:	dd07      	ble.n	8018d06 <__ratio+0x4a>
 8018cf6:	9901      	ldr	r1, [sp, #4]
 8018cf8:	186f      	adds	r7, r5, r1
 8018cfa:	0030      	movs	r0, r6
 8018cfc:	0039      	movs	r1, r7
 8018cfe:	f7e8 fe2b 	bl	8001958 <__aeabi_ddiv>
 8018d02:	b005      	add	sp, #20
 8018d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018d06:	1b4b      	subs	r3, r1, r5
 8018d08:	e7f7      	b.n	8018cfa <__ratio+0x3e>

08018d0a <__copybits>:
 8018d0a:	b570      	push	{r4, r5, r6, lr}
 8018d0c:	0015      	movs	r5, r2
 8018d0e:	6913      	ldr	r3, [r2, #16]
 8018d10:	3514      	adds	r5, #20
 8018d12:	009c      	lsls	r4, r3, #2
 8018d14:	0006      	movs	r6, r0
 8018d16:	002b      	movs	r3, r5
 8018d18:	3901      	subs	r1, #1
 8018d1a:	1149      	asrs	r1, r1, #5
 8018d1c:	3101      	adds	r1, #1
 8018d1e:	0089      	lsls	r1, r1, #2
 8018d20:	1841      	adds	r1, r0, r1
 8018d22:	192c      	adds	r4, r5, r4
 8018d24:	429c      	cmp	r4, r3
 8018d26:	d80d      	bhi.n	8018d44 <__copybits+0x3a>
 8018d28:	0015      	movs	r5, r2
 8018d2a:	3511      	adds	r5, #17
 8018d2c:	2300      	movs	r3, #0
 8018d2e:	42a5      	cmp	r5, r4
 8018d30:	d803      	bhi.n	8018d3a <__copybits+0x30>
 8018d32:	1aa3      	subs	r3, r4, r2
 8018d34:	3b11      	subs	r3, #17
 8018d36:	089b      	lsrs	r3, r3, #2
 8018d38:	009b      	lsls	r3, r3, #2
 8018d3a:	18c0      	adds	r0, r0, r3
 8018d3c:	2300      	movs	r3, #0
 8018d3e:	4281      	cmp	r1, r0
 8018d40:	d803      	bhi.n	8018d4a <__copybits+0x40>
 8018d42:	bd70      	pop	{r4, r5, r6, pc}
 8018d44:	cb20      	ldmia	r3!, {r5}
 8018d46:	c620      	stmia	r6!, {r5}
 8018d48:	e7ec      	b.n	8018d24 <__copybits+0x1a>
 8018d4a:	c008      	stmia	r0!, {r3}
 8018d4c:	e7f7      	b.n	8018d3e <__copybits+0x34>

08018d4e <__any_on>:
 8018d4e:	0002      	movs	r2, r0
 8018d50:	6900      	ldr	r0, [r0, #16]
 8018d52:	b510      	push	{r4, lr}
 8018d54:	3214      	adds	r2, #20
 8018d56:	114b      	asrs	r3, r1, #5
 8018d58:	4298      	cmp	r0, r3
 8018d5a:	db13      	blt.n	8018d84 <__any_on+0x36>
 8018d5c:	dd0c      	ble.n	8018d78 <__any_on+0x2a>
 8018d5e:	241f      	movs	r4, #31
 8018d60:	0008      	movs	r0, r1
 8018d62:	4020      	ands	r0, r4
 8018d64:	4221      	tst	r1, r4
 8018d66:	d007      	beq.n	8018d78 <__any_on+0x2a>
 8018d68:	0099      	lsls	r1, r3, #2
 8018d6a:	588c      	ldr	r4, [r1, r2]
 8018d6c:	0021      	movs	r1, r4
 8018d6e:	40c1      	lsrs	r1, r0
 8018d70:	4081      	lsls	r1, r0
 8018d72:	2001      	movs	r0, #1
 8018d74:	428c      	cmp	r4, r1
 8018d76:	d104      	bne.n	8018d82 <__any_on+0x34>
 8018d78:	009b      	lsls	r3, r3, #2
 8018d7a:	18d3      	adds	r3, r2, r3
 8018d7c:	4293      	cmp	r3, r2
 8018d7e:	d803      	bhi.n	8018d88 <__any_on+0x3a>
 8018d80:	2000      	movs	r0, #0
 8018d82:	bd10      	pop	{r4, pc}
 8018d84:	0003      	movs	r3, r0
 8018d86:	e7f7      	b.n	8018d78 <__any_on+0x2a>
 8018d88:	3b04      	subs	r3, #4
 8018d8a:	6819      	ldr	r1, [r3, #0]
 8018d8c:	2900      	cmp	r1, #0
 8018d8e:	d0f5      	beq.n	8018d7c <__any_on+0x2e>
 8018d90:	2001      	movs	r0, #1
 8018d92:	e7f6      	b.n	8018d82 <__any_on+0x34>

08018d94 <frexp>:
 8018d94:	b570      	push	{r4, r5, r6, lr}
 8018d96:	0014      	movs	r4, r2
 8018d98:	2500      	movs	r5, #0
 8018d9a:	6025      	str	r5, [r4, #0]
 8018d9c:	4d10      	ldr	r5, [pc, #64]	; (8018de0 <frexp+0x4c>)
 8018d9e:	004b      	lsls	r3, r1, #1
 8018da0:	000a      	movs	r2, r1
 8018da2:	085b      	lsrs	r3, r3, #1
 8018da4:	42ab      	cmp	r3, r5
 8018da6:	dc1a      	bgt.n	8018dde <frexp+0x4a>
 8018da8:	001d      	movs	r5, r3
 8018daa:	4305      	orrs	r5, r0
 8018dac:	d017      	beq.n	8018dde <frexp+0x4a>
 8018dae:	4d0d      	ldr	r5, [pc, #52]	; (8018de4 <frexp+0x50>)
 8018db0:	4229      	tst	r1, r5
 8018db2:	d109      	bne.n	8018dc8 <frexp+0x34>
 8018db4:	2200      	movs	r2, #0
 8018db6:	4b0c      	ldr	r3, [pc, #48]	; (8018de8 <frexp+0x54>)
 8018db8:	f7e9 f9d4 	bl	8002164 <__aeabi_dmul>
 8018dbc:	2536      	movs	r5, #54	; 0x36
 8018dbe:	000a      	movs	r2, r1
 8018dc0:	004b      	lsls	r3, r1, #1
 8018dc2:	426d      	negs	r5, r5
 8018dc4:	085b      	lsrs	r3, r3, #1
 8018dc6:	6025      	str	r5, [r4, #0]
 8018dc8:	4d08      	ldr	r5, [pc, #32]	; (8018dec <frexp+0x58>)
 8018dca:	151b      	asrs	r3, r3, #20
 8018dcc:	195b      	adds	r3, r3, r5
 8018dce:	6825      	ldr	r5, [r4, #0]
 8018dd0:	18eb      	adds	r3, r5, r3
 8018dd2:	6023      	str	r3, [r4, #0]
 8018dd4:	4b06      	ldr	r3, [pc, #24]	; (8018df0 <frexp+0x5c>)
 8018dd6:	401a      	ands	r2, r3
 8018dd8:	4b06      	ldr	r3, [pc, #24]	; (8018df4 <frexp+0x60>)
 8018dda:	4313      	orrs	r3, r2
 8018ddc:	0019      	movs	r1, r3
 8018dde:	bd70      	pop	{r4, r5, r6, pc}
 8018de0:	7fefffff 	.word	0x7fefffff
 8018de4:	7ff00000 	.word	0x7ff00000
 8018de8:	43500000 	.word	0x43500000
 8018dec:	fffffc02 	.word	0xfffffc02
 8018df0:	800fffff 	.word	0x800fffff
 8018df4:	3fe00000 	.word	0x3fe00000

08018df8 <nan>:
 8018df8:	2000      	movs	r0, #0
 8018dfa:	4901      	ldr	r1, [pc, #4]	; (8018e00 <nan+0x8>)
 8018dfc:	4770      	bx	lr
 8018dfe:	46c0      	nop			; (mov r8, r8)
 8018e00:	7ff80000 	.word	0x7ff80000

08018e04 <__ssprint_r>:
 8018e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018e06:	6893      	ldr	r3, [r2, #8]
 8018e08:	b087      	sub	sp, #28
 8018e0a:	000c      	movs	r4, r1
 8018e0c:	0017      	movs	r7, r2
 8018e0e:	9002      	str	r0, [sp, #8]
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d065      	beq.n	8018ee0 <__ssprint_r+0xdc>
 8018e14:	6813      	ldr	r3, [r2, #0]
 8018e16:	9303      	str	r3, [sp, #12]
 8018e18:	2300      	movs	r3, #0
 8018e1a:	9305      	str	r3, [sp, #20]
 8018e1c:	9301      	str	r3, [sp, #4]
 8018e1e:	9b01      	ldr	r3, [sp, #4]
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d02d      	beq.n	8018e80 <__ssprint_r+0x7c>
 8018e24:	68a6      	ldr	r6, [r4, #8]
 8018e26:	42b3      	cmp	r3, r6
 8018e28:	d346      	bcc.n	8018eb8 <__ssprint_r+0xb4>
 8018e2a:	2390      	movs	r3, #144	; 0x90
 8018e2c:	89a2      	ldrh	r2, [r4, #12]
 8018e2e:	00db      	lsls	r3, r3, #3
 8018e30:	421a      	tst	r2, r3
 8018e32:	d041      	beq.n	8018eb8 <__ssprint_r+0xb4>
 8018e34:	6921      	ldr	r1, [r4, #16]
 8018e36:	6823      	ldr	r3, [r4, #0]
 8018e38:	6965      	ldr	r5, [r4, #20]
 8018e3a:	1a5b      	subs	r3, r3, r1
 8018e3c:	9304      	str	r3, [sp, #16]
 8018e3e:	2303      	movs	r3, #3
 8018e40:	435d      	muls	r5, r3
 8018e42:	0feb      	lsrs	r3, r5, #31
 8018e44:	195d      	adds	r5, r3, r5
 8018e46:	9b04      	ldr	r3, [sp, #16]
 8018e48:	9801      	ldr	r0, [sp, #4]
 8018e4a:	3301      	adds	r3, #1
 8018e4c:	181b      	adds	r3, r3, r0
 8018e4e:	106d      	asrs	r5, r5, #1
 8018e50:	42ab      	cmp	r3, r5
 8018e52:	d900      	bls.n	8018e56 <__ssprint_r+0x52>
 8018e54:	001d      	movs	r5, r3
 8018e56:	0553      	lsls	r3, r2, #21
 8018e58:	d546      	bpl.n	8018ee8 <__ssprint_r+0xe4>
 8018e5a:	0029      	movs	r1, r5
 8018e5c:	9802      	ldr	r0, [sp, #8]
 8018e5e:	f7fb f95d 	bl	801411c <_malloc_r>
 8018e62:	1e06      	subs	r6, r0, #0
 8018e64:	d116      	bne.n	8018e94 <__ssprint_r+0x90>
 8018e66:	230c      	movs	r3, #12
 8018e68:	9a02      	ldr	r2, [sp, #8]
 8018e6a:	2001      	movs	r0, #1
 8018e6c:	6013      	str	r3, [r2, #0]
 8018e6e:	2340      	movs	r3, #64	; 0x40
 8018e70:	89a2      	ldrh	r2, [r4, #12]
 8018e72:	4240      	negs	r0, r0
 8018e74:	4313      	orrs	r3, r2
 8018e76:	81a3      	strh	r3, [r4, #12]
 8018e78:	2300      	movs	r3, #0
 8018e7a:	60bb      	str	r3, [r7, #8]
 8018e7c:	607b      	str	r3, [r7, #4]
 8018e7e:	e031      	b.n	8018ee4 <__ssprint_r+0xe0>
 8018e80:	9b03      	ldr	r3, [sp, #12]
 8018e82:	681b      	ldr	r3, [r3, #0]
 8018e84:	9305      	str	r3, [sp, #20]
 8018e86:	9b03      	ldr	r3, [sp, #12]
 8018e88:	685b      	ldr	r3, [r3, #4]
 8018e8a:	9301      	str	r3, [sp, #4]
 8018e8c:	9b03      	ldr	r3, [sp, #12]
 8018e8e:	3308      	adds	r3, #8
 8018e90:	9303      	str	r3, [sp, #12]
 8018e92:	e7c4      	b.n	8018e1e <__ssprint_r+0x1a>
 8018e94:	9a04      	ldr	r2, [sp, #16]
 8018e96:	6921      	ldr	r1, [r4, #16]
 8018e98:	f7fb fb62 	bl	8014560 <memcpy>
 8018e9c:	89a3      	ldrh	r3, [r4, #12]
 8018e9e:	4a18      	ldr	r2, [pc, #96]	; (8018f00 <__ssprint_r+0xfc>)
 8018ea0:	401a      	ands	r2, r3
 8018ea2:	2380      	movs	r3, #128	; 0x80
 8018ea4:	4313      	orrs	r3, r2
 8018ea6:	81a3      	strh	r3, [r4, #12]
 8018ea8:	9b04      	ldr	r3, [sp, #16]
 8018eaa:	6126      	str	r6, [r4, #16]
 8018eac:	18f6      	adds	r6, r6, r3
 8018eae:	6026      	str	r6, [r4, #0]
 8018eb0:	6165      	str	r5, [r4, #20]
 8018eb2:	9e01      	ldr	r6, [sp, #4]
 8018eb4:	1aed      	subs	r5, r5, r3
 8018eb6:	60a5      	str	r5, [r4, #8]
 8018eb8:	9b01      	ldr	r3, [sp, #4]
 8018eba:	429e      	cmp	r6, r3
 8018ebc:	d900      	bls.n	8018ec0 <__ssprint_r+0xbc>
 8018ebe:	001e      	movs	r6, r3
 8018ec0:	0032      	movs	r2, r6
 8018ec2:	9905      	ldr	r1, [sp, #20]
 8018ec4:	6820      	ldr	r0, [r4, #0]
 8018ec6:	f7ff fad8 	bl	801847a <memmove>
 8018eca:	68a3      	ldr	r3, [r4, #8]
 8018ecc:	9a01      	ldr	r2, [sp, #4]
 8018ece:	1b9b      	subs	r3, r3, r6
 8018ed0:	60a3      	str	r3, [r4, #8]
 8018ed2:	6823      	ldr	r3, [r4, #0]
 8018ed4:	199e      	adds	r6, r3, r6
 8018ed6:	68bb      	ldr	r3, [r7, #8]
 8018ed8:	6026      	str	r6, [r4, #0]
 8018eda:	1a9b      	subs	r3, r3, r2
 8018edc:	60bb      	str	r3, [r7, #8]
 8018ede:	d1cf      	bne.n	8018e80 <__ssprint_r+0x7c>
 8018ee0:	2000      	movs	r0, #0
 8018ee2:	6078      	str	r0, [r7, #4]
 8018ee4:	b007      	add	sp, #28
 8018ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018ee8:	002a      	movs	r2, r5
 8018eea:	9802      	ldr	r0, [sp, #8]
 8018eec:	f7fb fb7e 	bl	80145ec <_realloc_r>
 8018ef0:	1e06      	subs	r6, r0, #0
 8018ef2:	d1d9      	bne.n	8018ea8 <__ssprint_r+0xa4>
 8018ef4:	6921      	ldr	r1, [r4, #16]
 8018ef6:	9802      	ldr	r0, [sp, #8]
 8018ef8:	f7fe fe6e 	bl	8017bd8 <_free_r>
 8018efc:	e7b3      	b.n	8018e66 <__ssprint_r+0x62>
 8018efe:	46c0      	nop			; (mov r8, r8)
 8018f00:	fffffb7f 	.word	0xfffffb7f

08018f04 <__ascii_wctomb>:
 8018f04:	0003      	movs	r3, r0
 8018f06:	1e08      	subs	r0, r1, #0
 8018f08:	d005      	beq.n	8018f16 <__ascii_wctomb+0x12>
 8018f0a:	2aff      	cmp	r2, #255	; 0xff
 8018f0c:	d904      	bls.n	8018f18 <__ascii_wctomb+0x14>
 8018f0e:	228a      	movs	r2, #138	; 0x8a
 8018f10:	2001      	movs	r0, #1
 8018f12:	601a      	str	r2, [r3, #0]
 8018f14:	4240      	negs	r0, r0
 8018f16:	4770      	bx	lr
 8018f18:	2001      	movs	r0, #1
 8018f1a:	700a      	strb	r2, [r1, #0]
 8018f1c:	e7fb      	b.n	8018f16 <__ascii_wctomb+0x12>
	...

08018f20 <__register_exitproc>:
 8018f20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018f22:	4f1e      	ldr	r7, [pc, #120]	; (8018f9c <__register_exitproc+0x7c>)
 8018f24:	0004      	movs	r4, r0
 8018f26:	6838      	ldr	r0, [r7, #0]
 8018f28:	0016      	movs	r6, r2
 8018f2a:	9100      	str	r1, [sp, #0]
 8018f2c:	9301      	str	r3, [sp, #4]
 8018f2e:	f7ff fa85 	bl	801843c <__retarget_lock_acquire_recursive>
 8018f32:	4b1b      	ldr	r3, [pc, #108]	; (8018fa0 <__register_exitproc+0x80>)
 8018f34:	6819      	ldr	r1, [r3, #0]
 8018f36:	000b      	movs	r3, r1
 8018f38:	33fc      	adds	r3, #252	; 0xfc
 8018f3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018f3c:	2a00      	cmp	r2, #0
 8018f3e:	d103      	bne.n	8018f48 <__register_exitproc+0x28>
 8018f40:	000a      	movs	r2, r1
 8018f42:	324d      	adds	r2, #77	; 0x4d
 8018f44:	32ff      	adds	r2, #255	; 0xff
 8018f46:	64da      	str	r2, [r3, #76]	; 0x4c
 8018f48:	6853      	ldr	r3, [r2, #4]
 8018f4a:	6838      	ldr	r0, [r7, #0]
 8018f4c:	2b1f      	cmp	r3, #31
 8018f4e:	dd04      	ble.n	8018f5a <__register_exitproc+0x3a>
 8018f50:	f7ff fa75 	bl	801843e <__retarget_lock_release_recursive>
 8018f54:	2001      	movs	r0, #1
 8018f56:	4240      	negs	r0, r0
 8018f58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018f5a:	2c00      	cmp	r4, #0
 8018f5c:	d014      	beq.n	8018f88 <__register_exitproc+0x68>
 8018f5e:	0099      	lsls	r1, r3, #2
 8018f60:	1851      	adds	r1, r2, r1
 8018f62:	000f      	movs	r7, r1
 8018f64:	3788      	adds	r7, #136	; 0x88
 8018f66:	603e      	str	r6, [r7, #0]
 8018f68:	2701      	movs	r7, #1
 8018f6a:	0016      	movs	r6, r2
 8018f6c:	409f      	lsls	r7, r3
 8018f6e:	3685      	adds	r6, #133	; 0x85
 8018f70:	36ff      	adds	r6, #255	; 0xff
 8018f72:	6875      	ldr	r5, [r6, #4]
 8018f74:	31fc      	adds	r1, #252	; 0xfc
 8018f76:	433d      	orrs	r5, r7
 8018f78:	6075      	str	r5, [r6, #4]
 8018f7a:	9d01      	ldr	r5, [sp, #4]
 8018f7c:	60cd      	str	r5, [r1, #12]
 8018f7e:	2c02      	cmp	r4, #2
 8018f80:	d102      	bne.n	8018f88 <__register_exitproc+0x68>
 8018f82:	68b1      	ldr	r1, [r6, #8]
 8018f84:	430f      	orrs	r7, r1
 8018f86:	60b7      	str	r7, [r6, #8]
 8018f88:	1c59      	adds	r1, r3, #1
 8018f8a:	6051      	str	r1, [r2, #4]
 8018f8c:	3302      	adds	r3, #2
 8018f8e:	9900      	ldr	r1, [sp, #0]
 8018f90:	009b      	lsls	r3, r3, #2
 8018f92:	5099      	str	r1, [r3, r2]
 8018f94:	f7ff fa53 	bl	801843e <__retarget_lock_release_recursive>
 8018f98:	2000      	movs	r0, #0
 8018f9a:	e7dd      	b.n	8018f58 <__register_exitproc+0x38>
 8018f9c:	200009d0 	.word	0x200009d0
 8018fa0:	0801d794 	.word	0x0801d794

08018fa4 <__assert_func>:
 8018fa4:	b530      	push	{r4, r5, lr}
 8018fa6:	0014      	movs	r4, r2
 8018fa8:	001a      	movs	r2, r3
 8018faa:	4b09      	ldr	r3, [pc, #36]	; (8018fd0 <__assert_func+0x2c>)
 8018fac:	0005      	movs	r5, r0
 8018fae:	681b      	ldr	r3, [r3, #0]
 8018fb0:	b085      	sub	sp, #20
 8018fb2:	68d8      	ldr	r0, [r3, #12]
 8018fb4:	4b07      	ldr	r3, [pc, #28]	; (8018fd4 <__assert_func+0x30>)
 8018fb6:	2c00      	cmp	r4, #0
 8018fb8:	d101      	bne.n	8018fbe <__assert_func+0x1a>
 8018fba:	4b07      	ldr	r3, [pc, #28]	; (8018fd8 <__assert_func+0x34>)
 8018fbc:	001c      	movs	r4, r3
 8018fbe:	9301      	str	r3, [sp, #4]
 8018fc0:	9100      	str	r1, [sp, #0]
 8018fc2:	002b      	movs	r3, r5
 8018fc4:	4905      	ldr	r1, [pc, #20]	; (8018fdc <__assert_func+0x38>)
 8018fc6:	9402      	str	r4, [sp, #8]
 8018fc8:	f000 f836 	bl	8019038 <fiprintf>
 8018fcc:	f000 fe1e 	bl	8019c0c <abort>
 8018fd0:	20000190 	.word	0x20000190
 8018fd4:	0801da94 	.word	0x0801da94
 8018fd8:	0801dacf 	.word	0x0801dacf
 8018fdc:	0801daa1 	.word	0x0801daa1

08018fe0 <_calloc_r>:
 8018fe0:	b510      	push	{r4, lr}
 8018fe2:	4351      	muls	r1, r2
 8018fe4:	f7fb f89a 	bl	801411c <_malloc_r>
 8018fe8:	1e04      	subs	r4, r0, #0
 8018fea:	d01a      	beq.n	8019022 <_calloc_r+0x42>
 8018fec:	0003      	movs	r3, r0
 8018fee:	3b08      	subs	r3, #8
 8018ff0:	685a      	ldr	r2, [r3, #4]
 8018ff2:	2303      	movs	r3, #3
 8018ff4:	439a      	bics	r2, r3
 8018ff6:	3a04      	subs	r2, #4
 8018ff8:	2a24      	cmp	r2, #36	; 0x24
 8018ffa:	d819      	bhi.n	8019030 <_calloc_r+0x50>
 8018ffc:	0003      	movs	r3, r0
 8018ffe:	2a13      	cmp	r2, #19
 8019000:	d90b      	bls.n	801901a <_calloc_r+0x3a>
 8019002:	2100      	movs	r1, #0
 8019004:	3308      	adds	r3, #8
 8019006:	6001      	str	r1, [r0, #0]
 8019008:	6041      	str	r1, [r0, #4]
 801900a:	2a1b      	cmp	r2, #27
 801900c:	d905      	bls.n	801901a <_calloc_r+0x3a>
 801900e:	6081      	str	r1, [r0, #8]
 8019010:	60c1      	str	r1, [r0, #12]
 8019012:	2a24      	cmp	r2, #36	; 0x24
 8019014:	d007      	beq.n	8019026 <_calloc_r+0x46>
 8019016:	0003      	movs	r3, r0
 8019018:	3310      	adds	r3, #16
 801901a:	2200      	movs	r2, #0
 801901c:	601a      	str	r2, [r3, #0]
 801901e:	605a      	str	r2, [r3, #4]
 8019020:	609a      	str	r2, [r3, #8]
 8019022:	0020      	movs	r0, r4
 8019024:	bd10      	pop	{r4, pc}
 8019026:	0003      	movs	r3, r0
 8019028:	6101      	str	r1, [r0, #16]
 801902a:	3318      	adds	r3, #24
 801902c:	6141      	str	r1, [r0, #20]
 801902e:	e7f4      	b.n	801901a <_calloc_r+0x3a>
 8019030:	2100      	movs	r1, #0
 8019032:	f7fb fa9e 	bl	8014572 <memset>
 8019036:	e7f4      	b.n	8019022 <_calloc_r+0x42>

08019038 <fiprintf>:
 8019038:	b40e      	push	{r1, r2, r3}
 801903a:	b503      	push	{r0, r1, lr}
 801903c:	0001      	movs	r1, r0
 801903e:	ab03      	add	r3, sp, #12
 8019040:	4804      	ldr	r0, [pc, #16]	; (8019054 <fiprintf+0x1c>)
 8019042:	cb04      	ldmia	r3!, {r2}
 8019044:	6800      	ldr	r0, [r0, #0]
 8019046:	9301      	str	r3, [sp, #4]
 8019048:	f000 f83a 	bl	80190c0 <_vfiprintf_r>
 801904c:	b002      	add	sp, #8
 801904e:	bc08      	pop	{r3}
 8019050:	b003      	add	sp, #12
 8019052:	4718      	bx	r3
 8019054:	20000190 	.word	0x20000190

08019058 <__sprint_r>:
 8019058:	b5f0      	push	{r4, r5, r6, r7, lr}
 801905a:	b085      	sub	sp, #20
 801905c:	9001      	str	r0, [sp, #4]
 801905e:	6890      	ldr	r0, [r2, #8]
 8019060:	000d      	movs	r5, r1
 8019062:	0014      	movs	r4, r2
 8019064:	2800      	cmp	r0, #0
 8019066:	d102      	bne.n	801906e <__sprint_r+0x16>
 8019068:	6050      	str	r0, [r2, #4]
 801906a:	b005      	add	sp, #20
 801906c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801906e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8019070:	049b      	lsls	r3, r3, #18
 8019072:	d521      	bpl.n	80190b8 <__sprint_r+0x60>
 8019074:	6817      	ldr	r7, [r2, #0]
 8019076:	2600      	movs	r6, #0
 8019078:	683b      	ldr	r3, [r7, #0]
 801907a:	9302      	str	r3, [sp, #8]
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	9300      	str	r3, [sp, #0]
 8019080:	089b      	lsrs	r3, r3, #2
 8019082:	9303      	str	r3, [sp, #12]
 8019084:	9b03      	ldr	r3, [sp, #12]
 8019086:	42b3      	cmp	r3, r6
 8019088:	dc0b      	bgt.n	80190a2 <__sprint_r+0x4a>
 801908a:	2303      	movs	r3, #3
 801908c:	9800      	ldr	r0, [sp, #0]
 801908e:	3708      	adds	r7, #8
 8019090:	4398      	bics	r0, r3
 8019092:	68a3      	ldr	r3, [r4, #8]
 8019094:	1a18      	subs	r0, r3, r0
 8019096:	60a0      	str	r0, [r4, #8]
 8019098:	d1ed      	bne.n	8019076 <__sprint_r+0x1e>
 801909a:	2300      	movs	r3, #0
 801909c:	60a3      	str	r3, [r4, #8]
 801909e:	6063      	str	r3, [r4, #4]
 80190a0:	e7e3      	b.n	801906a <__sprint_r+0x12>
 80190a2:	9902      	ldr	r1, [sp, #8]
 80190a4:	00b3      	lsls	r3, r6, #2
 80190a6:	58c9      	ldr	r1, [r1, r3]
 80190a8:	002a      	movs	r2, r5
 80190aa:	9801      	ldr	r0, [sp, #4]
 80190ac:	f000 ff2c 	bl	8019f08 <_fputwc_r>
 80190b0:	1c43      	adds	r3, r0, #1
 80190b2:	d0f2      	beq.n	801909a <__sprint_r+0x42>
 80190b4:	3601      	adds	r6, #1
 80190b6:	e7e5      	b.n	8019084 <__sprint_r+0x2c>
 80190b8:	9801      	ldr	r0, [sp, #4]
 80190ba:	f000 ff4f 	bl	8019f5c <__sfvwrite_r>
 80190be:	e7ec      	b.n	801909a <__sprint_r+0x42>

080190c0 <_vfiprintf_r>:
 80190c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80190c2:	b0c3      	sub	sp, #268	; 0x10c
 80190c4:	001c      	movs	r4, r3
 80190c6:	001d      	movs	r5, r3
 80190c8:	9006      	str	r0, [sp, #24]
 80190ca:	9103      	str	r1, [sp, #12]
 80190cc:	9207      	str	r2, [sp, #28]
 80190ce:	2800      	cmp	r0, #0
 80190d0:	d005      	beq.n	80190de <_vfiprintf_r+0x1e>
 80190d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80190d4:	9304      	str	r3, [sp, #16]
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	d101      	bne.n	80190de <_vfiprintf_r+0x1e>
 80190da:	f000 fead 	bl	8019e38 <__sinit>
 80190de:	9b03      	ldr	r3, [sp, #12]
 80190e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80190e2:	07db      	lsls	r3, r3, #31
 80190e4:	d407      	bmi.n	80190f6 <_vfiprintf_r+0x36>
 80190e6:	9b03      	ldr	r3, [sp, #12]
 80190e8:	899b      	ldrh	r3, [r3, #12]
 80190ea:	059b      	lsls	r3, r3, #22
 80190ec:	d403      	bmi.n	80190f6 <_vfiprintf_r+0x36>
 80190ee:	9b03      	ldr	r3, [sp, #12]
 80190f0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80190f2:	f7ff f9a3 	bl	801843c <__retarget_lock_acquire_recursive>
 80190f6:	9b03      	ldr	r3, [sp, #12]
 80190f8:	220c      	movs	r2, #12
 80190fa:	5e9a      	ldrsh	r2, [r3, r2]
 80190fc:	2380      	movs	r3, #128	; 0x80
 80190fe:	019b      	lsls	r3, r3, #6
 8019100:	421a      	tst	r2, r3
 8019102:	d107      	bne.n	8019114 <_vfiprintf_r+0x54>
 8019104:	4313      	orrs	r3, r2
 8019106:	9a03      	ldr	r2, [sp, #12]
 8019108:	8193      	strh	r3, [r2, #12]
 801910a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 801910c:	4ba7      	ldr	r3, [pc, #668]	; (80193ac <_vfiprintf_r+0x2ec>)
 801910e:	4013      	ands	r3, r2
 8019110:	9a03      	ldr	r2, [sp, #12]
 8019112:	6653      	str	r3, [r2, #100]	; 0x64
 8019114:	9b03      	ldr	r3, [sp, #12]
 8019116:	899b      	ldrh	r3, [r3, #12]
 8019118:	071b      	lsls	r3, r3, #28
 801911a:	d503      	bpl.n	8019124 <_vfiprintf_r+0x64>
 801911c:	9b03      	ldr	r3, [sp, #12]
 801911e:	691b      	ldr	r3, [r3, #16]
 8019120:	2b00      	cmp	r3, #0
 8019122:	d118      	bne.n	8019156 <_vfiprintf_r+0x96>
 8019124:	9903      	ldr	r1, [sp, #12]
 8019126:	9806      	ldr	r0, [sp, #24]
 8019128:	f000 fd0c 	bl	8019b44 <__swsetup_r>
 801912c:	2800      	cmp	r0, #0
 801912e:	d012      	beq.n	8019156 <_vfiprintf_r+0x96>
 8019130:	9b03      	ldr	r3, [sp, #12]
 8019132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019134:	07db      	lsls	r3, r3, #31
 8019136:	d505      	bpl.n	8019144 <_vfiprintf_r+0x84>
 8019138:	2301      	movs	r3, #1
 801913a:	425b      	negs	r3, r3
 801913c:	9308      	str	r3, [sp, #32]
 801913e:	9808      	ldr	r0, [sp, #32]
 8019140:	b043      	add	sp, #268	; 0x10c
 8019142:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019144:	9b03      	ldr	r3, [sp, #12]
 8019146:	899b      	ldrh	r3, [r3, #12]
 8019148:	059b      	lsls	r3, r3, #22
 801914a:	d4f5      	bmi.n	8019138 <_vfiprintf_r+0x78>
 801914c:	9b03      	ldr	r3, [sp, #12]
 801914e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8019150:	f7ff f975 	bl	801843e <__retarget_lock_release_recursive>
 8019154:	e7f0      	b.n	8019138 <_vfiprintf_r+0x78>
 8019156:	9b03      	ldr	r3, [sp, #12]
 8019158:	899a      	ldrh	r2, [r3, #12]
 801915a:	231a      	movs	r3, #26
 801915c:	4013      	ands	r3, r2
 801915e:	2b0a      	cmp	r3, #10
 8019160:	d116      	bne.n	8019190 <_vfiprintf_r+0xd0>
 8019162:	9b03      	ldr	r3, [sp, #12]
 8019164:	210e      	movs	r1, #14
 8019166:	5e5b      	ldrsh	r3, [r3, r1]
 8019168:	2b00      	cmp	r3, #0
 801916a:	db11      	blt.n	8019190 <_vfiprintf_r+0xd0>
 801916c:	9b03      	ldr	r3, [sp, #12]
 801916e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019170:	07db      	lsls	r3, r3, #31
 8019172:	d405      	bmi.n	8019180 <_vfiprintf_r+0xc0>
 8019174:	0593      	lsls	r3, r2, #22
 8019176:	d403      	bmi.n	8019180 <_vfiprintf_r+0xc0>
 8019178:	9b03      	ldr	r3, [sp, #12]
 801917a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 801917c:	f7ff f95f 	bl	801843e <__retarget_lock_release_recursive>
 8019180:	0023      	movs	r3, r4
 8019182:	9a07      	ldr	r2, [sp, #28]
 8019184:	9903      	ldr	r1, [sp, #12]
 8019186:	9806      	ldr	r0, [sp, #24]
 8019188:	f000 fc98 	bl	8019abc <__sbprintf>
 801918c:	9008      	str	r0, [sp, #32]
 801918e:	e7d6      	b.n	801913e <_vfiprintf_r+0x7e>
 8019190:	2300      	movs	r3, #0
 8019192:	af19      	add	r7, sp, #100	; 0x64
 8019194:	9716      	str	r7, [sp, #88]	; 0x58
 8019196:	9318      	str	r3, [sp, #96]	; 0x60
 8019198:	9317      	str	r3, [sp, #92]	; 0x5c
 801919a:	930c      	str	r3, [sp, #48]	; 0x30
 801919c:	930d      	str	r3, [sp, #52]	; 0x34
 801919e:	930e      	str	r3, [sp, #56]	; 0x38
 80191a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80191a2:	9308      	str	r3, [sp, #32]
 80191a4:	9c07      	ldr	r4, [sp, #28]
 80191a6:	7823      	ldrb	r3, [r4, #0]
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	d002      	beq.n	80191b2 <_vfiprintf_r+0xf2>
 80191ac:	2b25      	cmp	r3, #37	; 0x25
 80191ae:	d000      	beq.n	80191b2 <_vfiprintf_r+0xf2>
 80191b0:	e093      	b.n	80192da <_vfiprintf_r+0x21a>
 80191b2:	9b07      	ldr	r3, [sp, #28]
 80191b4:	1ae3      	subs	r3, r4, r3
 80191b6:	001e      	movs	r6, r3
 80191b8:	9b07      	ldr	r3, [sp, #28]
 80191ba:	429c      	cmp	r4, r3
 80191bc:	d01a      	beq.n	80191f4 <_vfiprintf_r+0x134>
 80191be:	46b4      	mov	ip, r6
 80191c0:	603b      	str	r3, [r7, #0]
 80191c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80191c4:	607e      	str	r6, [r7, #4]
 80191c6:	4463      	add	r3, ip
 80191c8:	9318      	str	r3, [sp, #96]	; 0x60
 80191ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80191cc:	3708      	adds	r7, #8
 80191ce:	9304      	str	r3, [sp, #16]
 80191d0:	3301      	adds	r3, #1
 80191d2:	9317      	str	r3, [sp, #92]	; 0x5c
 80191d4:	2b07      	cmp	r3, #7
 80191d6:	dd09      	ble.n	80191ec <_vfiprintf_r+0x12c>
 80191d8:	9903      	ldr	r1, [sp, #12]
 80191da:	9806      	ldr	r0, [sp, #24]
 80191dc:	aa16      	add	r2, sp, #88	; 0x58
 80191de:	f7ff ff3b 	bl	8019058 <__sprint_r>
 80191e2:	2800      	cmp	r0, #0
 80191e4:	d001      	beq.n	80191ea <_vfiprintf_r+0x12a>
 80191e6:	f000 fc00 	bl	80199ea <_vfiprintf_r+0x92a>
 80191ea:	af19      	add	r7, sp, #100	; 0x64
 80191ec:	46b4      	mov	ip, r6
 80191ee:	9b08      	ldr	r3, [sp, #32]
 80191f0:	4463      	add	r3, ip
 80191f2:	9308      	str	r3, [sp, #32]
 80191f4:	7823      	ldrb	r3, [r4, #0]
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	d101      	bne.n	80191fe <_vfiprintf_r+0x13e>
 80191fa:	f000 fc1b 	bl	8019a34 <_vfiprintf_r+0x974>
 80191fe:	2200      	movs	r2, #0
 8019200:	a914      	add	r1, sp, #80	; 0x50
 8019202:	70ca      	strb	r2, [r1, #3]
 8019204:	2101      	movs	r1, #1
 8019206:	1c63      	adds	r3, r4, #1
 8019208:	0014      	movs	r4, r2
 801920a:	4249      	negs	r1, r1
 801920c:	9105      	str	r1, [sp, #20]
 801920e:	9209      	str	r2, [sp, #36]	; 0x24
 8019210:	1c5a      	adds	r2, r3, #1
 8019212:	781b      	ldrb	r3, [r3, #0]
 8019214:	9207      	str	r2, [sp, #28]
 8019216:	0018      	movs	r0, r3
 8019218:	3820      	subs	r0, #32
 801921a:	285a      	cmp	r0, #90	; 0x5a
 801921c:	d900      	bls.n	8019220 <_vfiprintf_r+0x160>
 801921e:	e37c      	b.n	801991a <_vfiprintf_r+0x85a>
 8019220:	f7e6 ff8c 	bl	800013c <__gnu_thumb1_case_uhi>
 8019224:	037b0098 	.word	0x037b0098
 8019228:	00a1037b 	.word	0x00a1037b
 801922c:	037b037b 	.word	0x037b037b
 8019230:	007d037b 	.word	0x007d037b
 8019234:	037b037b 	.word	0x037b037b
 8019238:	00ab00a3 	.word	0x00ab00a3
 801923c:	00a9037b 	.word	0x00a9037b
 8019240:	037b00af 	.word	0x037b00af
 8019244:	00d500d3 	.word	0x00d500d3
 8019248:	00d500d5 	.word	0x00d500d5
 801924c:	00d500d5 	.word	0x00d500d5
 8019250:	00d500d5 	.word	0x00d500d5
 8019254:	00d500d5 	.word	0x00d500d5
 8019258:	037b037b 	.word	0x037b037b
 801925c:	037b037b 	.word	0x037b037b
 8019260:	037b037b 	.word	0x037b037b
 8019264:	037b037b 	.word	0x037b037b
 8019268:	00fe037b 	.word	0x00fe037b
 801926c:	037b01f9 	.word	0x037b01f9
 8019270:	037b037b 	.word	0x037b037b
 8019274:	037b037b 	.word	0x037b037b
 8019278:	037b037b 	.word	0x037b037b
 801927c:	037b037b 	.word	0x037b037b
 8019280:	0252037b 	.word	0x0252037b
 8019284:	037b037b 	.word	0x037b037b
 8019288:	0295037b 	.word	0x0295037b
 801928c:	02b1037b 	.word	0x02b1037b
 8019290:	037b037b 	.word	0x037b037b
 8019294:	037b02ec 	.word	0x037b02ec
 8019298:	037b037b 	.word	0x037b037b
 801929c:	037b037b 	.word	0x037b037b
 80192a0:	037b037b 	.word	0x037b037b
 80192a4:	037b037b 	.word	0x037b037b
 80192a8:	00fe037b 	.word	0x00fe037b
 80192ac:	037b01fb 	.word	0x037b01fb
 80192b0:	037b037b 	.word	0x037b037b
 80192b4:	01fb00e7 	.word	0x01fb00e7
 80192b8:	037b00fa 	.word	0x037b00fa
 80192bc:	037b00f3 	.word	0x037b00f3
 80192c0:	0254023b 	.word	0x0254023b
 80192c4:	00fa0287 	.word	0x00fa0287
 80192c8:	0295037b 	.word	0x0295037b
 80192cc:	02b3009f 	.word	0x02b3009f
 80192d0:	037b037b 	.word	0x037b037b
 80192d4:	037b005d 	.word	0x037b005d
 80192d8:	009f      	.short	0x009f
 80192da:	3401      	adds	r4, #1
 80192dc:	e763      	b.n	80191a6 <_vfiprintf_r+0xe6>
 80192de:	4a34      	ldr	r2, [pc, #208]	; (80193b0 <_vfiprintf_r+0x2f0>)
 80192e0:	0020      	movs	r0, r4
 80192e2:	920c      	str	r2, [sp, #48]	; 0x30
 80192e4:	2220      	movs	r2, #32
 80192e6:	4010      	ands	r0, r2
 80192e8:	4214      	tst	r4, r2
 80192ea:	d100      	bne.n	80192ee <_vfiprintf_r+0x22e>
 80192ec:	e288      	b.n	8019800 <_vfiprintf_r+0x740>
 80192ee:	3a19      	subs	r2, #25
 80192f0:	3507      	adds	r5, #7
 80192f2:	4395      	bics	r5, r2
 80192f4:	0028      	movs	r0, r5
 80192f6:	c806      	ldmia	r0!, {r1, r2}
 80192f8:	9100      	str	r1, [sp, #0]
 80192fa:	9201      	str	r2, [sp, #4]
 80192fc:	9004      	str	r0, [sp, #16]
 80192fe:	07e2      	lsls	r2, r4, #31
 8019300:	d509      	bpl.n	8019316 <_vfiprintf_r+0x256>
 8019302:	9a00      	ldr	r2, [sp, #0]
 8019304:	9901      	ldr	r1, [sp, #4]
 8019306:	430a      	orrs	r2, r1
 8019308:	d005      	beq.n	8019316 <_vfiprintf_r+0x256>
 801930a:	aa15      	add	r2, sp, #84	; 0x54
 801930c:	2130      	movs	r1, #48	; 0x30
 801930e:	7053      	strb	r3, [r2, #1]
 8019310:	2302      	movs	r3, #2
 8019312:	7011      	strb	r1, [r2, #0]
 8019314:	431c      	orrs	r4, r3
 8019316:	4b27      	ldr	r3, [pc, #156]	; (80193b4 <_vfiprintf_r+0x2f4>)
 8019318:	401c      	ands	r4, r3
 801931a:	2302      	movs	r3, #2
 801931c:	e1e6      	b.n	80196ec <_vfiprintf_r+0x62c>
 801931e:	9806      	ldr	r0, [sp, #24]
 8019320:	f7ff f886 	bl	8018430 <_localeconv_r>
 8019324:	6843      	ldr	r3, [r0, #4]
 8019326:	0018      	movs	r0, r3
 8019328:	930f      	str	r3, [sp, #60]	; 0x3c
 801932a:	f7e6 fef5 	bl	8000118 <strlen>
 801932e:	900e      	str	r0, [sp, #56]	; 0x38
 8019330:	9806      	ldr	r0, [sp, #24]
 8019332:	f7ff f87d 	bl	8018430 <_localeconv_r>
 8019336:	6883      	ldr	r3, [r0, #8]
 8019338:	930d      	str	r3, [sp, #52]	; 0x34
 801933a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801933c:	2b00      	cmp	r3, #0
 801933e:	d010      	beq.n	8019362 <_vfiprintf_r+0x2a2>
 8019340:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019342:	2b00      	cmp	r3, #0
 8019344:	d00d      	beq.n	8019362 <_vfiprintf_r+0x2a2>
 8019346:	781b      	ldrb	r3, [r3, #0]
 8019348:	2b00      	cmp	r3, #0
 801934a:	d00a      	beq.n	8019362 <_vfiprintf_r+0x2a2>
 801934c:	2380      	movs	r3, #128	; 0x80
 801934e:	00db      	lsls	r3, r3, #3
 8019350:	431c      	orrs	r4, r3
 8019352:	e006      	b.n	8019362 <_vfiprintf_r+0x2a2>
 8019354:	ab14      	add	r3, sp, #80	; 0x50
 8019356:	78da      	ldrb	r2, [r3, #3]
 8019358:	3303      	adds	r3, #3
 801935a:	2a00      	cmp	r2, #0
 801935c:	d101      	bne.n	8019362 <_vfiprintf_r+0x2a2>
 801935e:	3220      	adds	r2, #32
 8019360:	701a      	strb	r2, [r3, #0]
 8019362:	9b07      	ldr	r3, [sp, #28]
 8019364:	e754      	b.n	8019210 <_vfiprintf_r+0x150>
 8019366:	2301      	movs	r3, #1
 8019368:	e7f2      	b.n	8019350 <_vfiprintf_r+0x290>
 801936a:	cd08      	ldmia	r5!, {r3}
 801936c:	9309      	str	r3, [sp, #36]	; 0x24
 801936e:	2b00      	cmp	r3, #0
 8019370:	daf7      	bge.n	8019362 <_vfiprintf_r+0x2a2>
 8019372:	425b      	negs	r3, r3
 8019374:	9309      	str	r3, [sp, #36]	; 0x24
 8019376:	2304      	movs	r3, #4
 8019378:	e7ea      	b.n	8019350 <_vfiprintf_r+0x290>
 801937a:	222b      	movs	r2, #43	; 0x2b
 801937c:	ab14      	add	r3, sp, #80	; 0x50
 801937e:	70da      	strb	r2, [r3, #3]
 8019380:	e7ef      	b.n	8019362 <_vfiprintf_r+0x2a2>
 8019382:	9b07      	ldr	r3, [sp, #28]
 8019384:	1c5a      	adds	r2, r3, #1
 8019386:	781b      	ldrb	r3, [r3, #0]
 8019388:	2b2a      	cmp	r3, #42	; 0x2a
 801938a:	d015      	beq.n	80193b8 <_vfiprintf_r+0x2f8>
 801938c:	2100      	movs	r1, #0
 801938e:	9105      	str	r1, [sp, #20]
 8019390:	0019      	movs	r1, r3
 8019392:	3930      	subs	r1, #48	; 0x30
 8019394:	9207      	str	r2, [sp, #28]
 8019396:	2909      	cmp	r1, #9
 8019398:	d900      	bls.n	801939c <_vfiprintf_r+0x2dc>
 801939a:	e73c      	b.n	8019216 <_vfiprintf_r+0x156>
 801939c:	230a      	movs	r3, #10
 801939e:	9805      	ldr	r0, [sp, #20]
 80193a0:	4358      	muls	r0, r3
 80193a2:	1843      	adds	r3, r0, r1
 80193a4:	9305      	str	r3, [sp, #20]
 80193a6:	7813      	ldrb	r3, [r2, #0]
 80193a8:	3201      	adds	r2, #1
 80193aa:	e7f1      	b.n	8019390 <_vfiprintf_r+0x2d0>
 80193ac:	ffffdfff 	.word	0xffffdfff
 80193b0:	0801d7f8 	.word	0x0801d7f8
 80193b4:	fffffbff 	.word	0xfffffbff
 80193b8:	cd08      	ldmia	r5!, {r3}
 80193ba:	9305      	str	r3, [sp, #20]
 80193bc:	2b00      	cmp	r3, #0
 80193be:	da02      	bge.n	80193c6 <_vfiprintf_r+0x306>
 80193c0:	2301      	movs	r3, #1
 80193c2:	425b      	negs	r3, r3
 80193c4:	9305      	str	r3, [sp, #20]
 80193c6:	9207      	str	r2, [sp, #28]
 80193c8:	e7cb      	b.n	8019362 <_vfiprintf_r+0x2a2>
 80193ca:	2380      	movs	r3, #128	; 0x80
 80193cc:	e7c0      	b.n	8019350 <_vfiprintf_r+0x290>
 80193ce:	2100      	movs	r1, #0
 80193d0:	9a07      	ldr	r2, [sp, #28]
 80193d2:	9109      	str	r1, [sp, #36]	; 0x24
 80193d4:	200a      	movs	r0, #10
 80193d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80193d8:	3b30      	subs	r3, #48	; 0x30
 80193da:	4341      	muls	r1, r0
 80193dc:	185b      	adds	r3, r3, r1
 80193de:	9309      	str	r3, [sp, #36]	; 0x24
 80193e0:	0013      	movs	r3, r2
 80193e2:	781b      	ldrb	r3, [r3, #0]
 80193e4:	3201      	adds	r2, #1
 80193e6:	0019      	movs	r1, r3
 80193e8:	3930      	subs	r1, #48	; 0x30
 80193ea:	9207      	str	r2, [sp, #28]
 80193ec:	2909      	cmp	r1, #9
 80193ee:	d9f1      	bls.n	80193d4 <_vfiprintf_r+0x314>
 80193f0:	e711      	b.n	8019216 <_vfiprintf_r+0x156>
 80193f2:	9b07      	ldr	r3, [sp, #28]
 80193f4:	781b      	ldrb	r3, [r3, #0]
 80193f6:	2b68      	cmp	r3, #104	; 0x68
 80193f8:	d105      	bne.n	8019406 <_vfiprintf_r+0x346>
 80193fa:	9b07      	ldr	r3, [sp, #28]
 80193fc:	3301      	adds	r3, #1
 80193fe:	9307      	str	r3, [sp, #28]
 8019400:	2380      	movs	r3, #128	; 0x80
 8019402:	009b      	lsls	r3, r3, #2
 8019404:	e7a4      	b.n	8019350 <_vfiprintf_r+0x290>
 8019406:	2340      	movs	r3, #64	; 0x40
 8019408:	e7a2      	b.n	8019350 <_vfiprintf_r+0x290>
 801940a:	9b07      	ldr	r3, [sp, #28]
 801940c:	781b      	ldrb	r3, [r3, #0]
 801940e:	2b6c      	cmp	r3, #108	; 0x6c
 8019410:	d104      	bne.n	801941c <_vfiprintf_r+0x35c>
 8019412:	9b07      	ldr	r3, [sp, #28]
 8019414:	3301      	adds	r3, #1
 8019416:	9307      	str	r3, [sp, #28]
 8019418:	2320      	movs	r3, #32
 801941a:	e799      	b.n	8019350 <_vfiprintf_r+0x290>
 801941c:	2310      	movs	r3, #16
 801941e:	e797      	b.n	8019350 <_vfiprintf_r+0x290>
 8019420:	9504      	str	r5, [sp, #16]
 8019422:	9a04      	ldr	r2, [sp, #16]
 8019424:	ad29      	add	r5, sp, #164	; 0xa4
 8019426:	ca08      	ldmia	r2!, {r3}
 8019428:	9204      	str	r2, [sp, #16]
 801942a:	2200      	movs	r2, #0
 801942c:	702b      	strb	r3, [r5, #0]
 801942e:	ab14      	add	r3, sp, #80	; 0x50
 8019430:	70da      	strb	r2, [r3, #3]
 8019432:	2301      	movs	r3, #1
 8019434:	920b      	str	r2, [sp, #44]	; 0x2c
 8019436:	9305      	str	r3, [sp, #20]
 8019438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801943a:	9a05      	ldr	r2, [sp, #20]
 801943c:	930a      	str	r3, [sp, #40]	; 0x28
 801943e:	4293      	cmp	r3, r2
 8019440:	da00      	bge.n	8019444 <_vfiprintf_r+0x384>
 8019442:	920a      	str	r2, [sp, #40]	; 0x28
 8019444:	ab14      	add	r3, sp, #80	; 0x50
 8019446:	3303      	adds	r3, #3
 8019448:	781b      	ldrb	r3, [r3, #0]
 801944a:	1e5a      	subs	r2, r3, #1
 801944c:	4193      	sbcs	r3, r2
 801944e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019450:	18d3      	adds	r3, r2, r3
 8019452:	930a      	str	r3, [sp, #40]	; 0x28
 8019454:	0022      	movs	r2, r4
 8019456:	2302      	movs	r3, #2
 8019458:	401a      	ands	r2, r3
 801945a:	9210      	str	r2, [sp, #64]	; 0x40
 801945c:	421c      	tst	r4, r3
 801945e:	d002      	beq.n	8019466 <_vfiprintf_r+0x3a6>
 8019460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019462:	3302      	adds	r3, #2
 8019464:	930a      	str	r3, [sp, #40]	; 0x28
 8019466:	2384      	movs	r3, #132	; 0x84
 8019468:	0022      	movs	r2, r4
 801946a:	401a      	ands	r2, r3
 801946c:	9211      	str	r2, [sp, #68]	; 0x44
 801946e:	421c      	tst	r4, r3
 8019470:	d11f      	bne.n	80194b2 <_vfiprintf_r+0x3f2>
 8019472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019474:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019476:	1a9b      	subs	r3, r3, r2
 8019478:	1e1e      	subs	r6, r3, #0
 801947a:	dd1a      	ble.n	80194b2 <_vfiprintf_r+0x3f2>
 801947c:	0039      	movs	r1, r7
 801947e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019480:	48c9      	ldr	r0, [pc, #804]	; (80197a8 <_vfiprintf_r+0x6e8>)
 8019482:	9312      	str	r3, [sp, #72]	; 0x48
 8019484:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8019486:	3301      	adds	r3, #1
 8019488:	3108      	adds	r1, #8
 801948a:	6038      	str	r0, [r7, #0]
 801948c:	2e10      	cmp	r6, #16
 801948e:	dd00      	ble.n	8019492 <_vfiprintf_r+0x3d2>
 8019490:	e251      	b.n	8019936 <_vfiprintf_r+0x876>
 8019492:	18b2      	adds	r2, r6, r2
 8019494:	607e      	str	r6, [r7, #4]
 8019496:	9218      	str	r2, [sp, #96]	; 0x60
 8019498:	000f      	movs	r7, r1
 801949a:	9317      	str	r3, [sp, #92]	; 0x5c
 801949c:	2b07      	cmp	r3, #7
 801949e:	dd08      	ble.n	80194b2 <_vfiprintf_r+0x3f2>
 80194a0:	9903      	ldr	r1, [sp, #12]
 80194a2:	9806      	ldr	r0, [sp, #24]
 80194a4:	aa16      	add	r2, sp, #88	; 0x58
 80194a6:	f7ff fdd7 	bl	8019058 <__sprint_r>
 80194aa:	2800      	cmp	r0, #0
 80194ac:	d000      	beq.n	80194b0 <_vfiprintf_r+0x3f0>
 80194ae:	e29c      	b.n	80199ea <_vfiprintf_r+0x92a>
 80194b0:	af19      	add	r7, sp, #100	; 0x64
 80194b2:	ab14      	add	r3, sp, #80	; 0x50
 80194b4:	1cda      	adds	r2, r3, #3
 80194b6:	78db      	ldrb	r3, [r3, #3]
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d017      	beq.n	80194ec <_vfiprintf_r+0x42c>
 80194bc:	603a      	str	r2, [r7, #0]
 80194be:	2201      	movs	r2, #1
 80194c0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80194c2:	607a      	str	r2, [r7, #4]
 80194c4:	9312      	str	r3, [sp, #72]	; 0x48
 80194c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80194c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80194ca:	3201      	adds	r2, #1
 80194cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80194ce:	3301      	adds	r3, #1
 80194d0:	9218      	str	r2, [sp, #96]	; 0x60
 80194d2:	9317      	str	r3, [sp, #92]	; 0x5c
 80194d4:	3708      	adds	r7, #8
 80194d6:	2b07      	cmp	r3, #7
 80194d8:	dd08      	ble.n	80194ec <_vfiprintf_r+0x42c>
 80194da:	9903      	ldr	r1, [sp, #12]
 80194dc:	9806      	ldr	r0, [sp, #24]
 80194de:	aa16      	add	r2, sp, #88	; 0x58
 80194e0:	f7ff fdba 	bl	8019058 <__sprint_r>
 80194e4:	2800      	cmp	r0, #0
 80194e6:	d000      	beq.n	80194ea <_vfiprintf_r+0x42a>
 80194e8:	e27f      	b.n	80199ea <_vfiprintf_r+0x92a>
 80194ea:	af19      	add	r7, sp, #100	; 0x64
 80194ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	d018      	beq.n	8019524 <_vfiprintf_r+0x464>
 80194f2:	aa15      	add	r2, sp, #84	; 0x54
 80194f4:	603a      	str	r2, [r7, #0]
 80194f6:	2202      	movs	r2, #2
 80194f8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80194fa:	607a      	str	r2, [r7, #4]
 80194fc:	9310      	str	r3, [sp, #64]	; 0x40
 80194fe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019500:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019502:	3202      	adds	r2, #2
 8019504:	9312      	str	r3, [sp, #72]	; 0x48
 8019506:	3301      	adds	r3, #1
 8019508:	9218      	str	r2, [sp, #96]	; 0x60
 801950a:	9317      	str	r3, [sp, #92]	; 0x5c
 801950c:	3708      	adds	r7, #8
 801950e:	2b07      	cmp	r3, #7
 8019510:	dd08      	ble.n	8019524 <_vfiprintf_r+0x464>
 8019512:	9903      	ldr	r1, [sp, #12]
 8019514:	9806      	ldr	r0, [sp, #24]
 8019516:	aa16      	add	r2, sp, #88	; 0x58
 8019518:	f7ff fd9e 	bl	8019058 <__sprint_r>
 801951c:	2800      	cmp	r0, #0
 801951e:	d000      	beq.n	8019522 <_vfiprintf_r+0x462>
 8019520:	e263      	b.n	80199ea <_vfiprintf_r+0x92a>
 8019522:	af19      	add	r7, sp, #100	; 0x64
 8019524:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019526:	2b80      	cmp	r3, #128	; 0x80
 8019528:	d11f      	bne.n	801956a <_vfiprintf_r+0x4aa>
 801952a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801952c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801952e:	1a9b      	subs	r3, r3, r2
 8019530:	1e1e      	subs	r6, r3, #0
 8019532:	dd1a      	ble.n	801956a <_vfiprintf_r+0x4aa>
 8019534:	0039      	movs	r1, r7
 8019536:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019538:	489c      	ldr	r0, [pc, #624]	; (80197ac <_vfiprintf_r+0x6ec>)
 801953a:	9310      	str	r3, [sp, #64]	; 0x40
 801953c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801953e:	3301      	adds	r3, #1
 8019540:	3108      	adds	r1, #8
 8019542:	6038      	str	r0, [r7, #0]
 8019544:	2e10      	cmp	r6, #16
 8019546:	dd00      	ble.n	801954a <_vfiprintf_r+0x48a>
 8019548:	e209      	b.n	801995e <_vfiprintf_r+0x89e>
 801954a:	18b2      	adds	r2, r6, r2
 801954c:	607e      	str	r6, [r7, #4]
 801954e:	9218      	str	r2, [sp, #96]	; 0x60
 8019550:	000f      	movs	r7, r1
 8019552:	9317      	str	r3, [sp, #92]	; 0x5c
 8019554:	2b07      	cmp	r3, #7
 8019556:	dd08      	ble.n	801956a <_vfiprintf_r+0x4aa>
 8019558:	9903      	ldr	r1, [sp, #12]
 801955a:	9806      	ldr	r0, [sp, #24]
 801955c:	aa16      	add	r2, sp, #88	; 0x58
 801955e:	f7ff fd7b 	bl	8019058 <__sprint_r>
 8019562:	2800      	cmp	r0, #0
 8019564:	d000      	beq.n	8019568 <_vfiprintf_r+0x4a8>
 8019566:	e240      	b.n	80199ea <_vfiprintf_r+0x92a>
 8019568:	af19      	add	r7, sp, #100	; 0x64
 801956a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801956c:	9a05      	ldr	r2, [sp, #20]
 801956e:	1a9b      	subs	r3, r3, r2
 8019570:	1e1e      	subs	r6, r3, #0
 8019572:	dd1a      	ble.n	80195aa <_vfiprintf_r+0x4ea>
 8019574:	0039      	movs	r1, r7
 8019576:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019578:	488c      	ldr	r0, [pc, #560]	; (80197ac <_vfiprintf_r+0x6ec>)
 801957a:	930b      	str	r3, [sp, #44]	; 0x2c
 801957c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801957e:	3301      	adds	r3, #1
 8019580:	3108      	adds	r1, #8
 8019582:	6038      	str	r0, [r7, #0]
 8019584:	2e10      	cmp	r6, #16
 8019586:	dd00      	ble.n	801958a <_vfiprintf_r+0x4ca>
 8019588:	e1fd      	b.n	8019986 <_vfiprintf_r+0x8c6>
 801958a:	18b2      	adds	r2, r6, r2
 801958c:	607e      	str	r6, [r7, #4]
 801958e:	9218      	str	r2, [sp, #96]	; 0x60
 8019590:	000f      	movs	r7, r1
 8019592:	9317      	str	r3, [sp, #92]	; 0x5c
 8019594:	2b07      	cmp	r3, #7
 8019596:	dd08      	ble.n	80195aa <_vfiprintf_r+0x4ea>
 8019598:	9903      	ldr	r1, [sp, #12]
 801959a:	9806      	ldr	r0, [sp, #24]
 801959c:	aa16      	add	r2, sp, #88	; 0x58
 801959e:	f7ff fd5b 	bl	8019058 <__sprint_r>
 80195a2:	2800      	cmp	r0, #0
 80195a4:	d000      	beq.n	80195a8 <_vfiprintf_r+0x4e8>
 80195a6:	e220      	b.n	80199ea <_vfiprintf_r+0x92a>
 80195a8:	af19      	add	r7, sp, #100	; 0x64
 80195aa:	9b05      	ldr	r3, [sp, #20]
 80195ac:	603d      	str	r5, [r7, #0]
 80195ae:	607b      	str	r3, [r7, #4]
 80195b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80195b2:	3708      	adds	r7, #8
 80195b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80195b6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80195b8:	9b05      	ldr	r3, [sp, #20]
 80195ba:	4694      	mov	ip, r2
 80195bc:	4463      	add	r3, ip
 80195be:	9318      	str	r3, [sp, #96]	; 0x60
 80195c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80195c2:	9305      	str	r3, [sp, #20]
 80195c4:	3301      	adds	r3, #1
 80195c6:	9317      	str	r3, [sp, #92]	; 0x5c
 80195c8:	2b07      	cmp	r3, #7
 80195ca:	dd08      	ble.n	80195de <_vfiprintf_r+0x51e>
 80195cc:	9903      	ldr	r1, [sp, #12]
 80195ce:	9806      	ldr	r0, [sp, #24]
 80195d0:	aa16      	add	r2, sp, #88	; 0x58
 80195d2:	f7ff fd41 	bl	8019058 <__sprint_r>
 80195d6:	2800      	cmp	r0, #0
 80195d8:	d000      	beq.n	80195dc <_vfiprintf_r+0x51c>
 80195da:	e206      	b.n	80199ea <_vfiprintf_r+0x92a>
 80195dc:	af19      	add	r7, sp, #100	; 0x64
 80195de:	0763      	lsls	r3, r4, #29
 80195e0:	d500      	bpl.n	80195e4 <_vfiprintf_r+0x524>
 80195e2:	e1e4      	b.n	80199ae <_vfiprintf_r+0x8ee>
 80195e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80195e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80195e8:	4293      	cmp	r3, r2
 80195ea:	da00      	bge.n	80195ee <_vfiprintf_r+0x52e>
 80195ec:	0013      	movs	r3, r2
 80195ee:	9a08      	ldr	r2, [sp, #32]
 80195f0:	18d3      	adds	r3, r2, r3
 80195f2:	9308      	str	r3, [sp, #32]
 80195f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80195f6:	9305      	str	r3, [sp, #20]
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d007      	beq.n	801960c <_vfiprintf_r+0x54c>
 80195fc:	9903      	ldr	r1, [sp, #12]
 80195fe:	9806      	ldr	r0, [sp, #24]
 8019600:	aa16      	add	r2, sp, #88	; 0x58
 8019602:	f7ff fd29 	bl	8019058 <__sprint_r>
 8019606:	2800      	cmp	r0, #0
 8019608:	d000      	beq.n	801960c <_vfiprintf_r+0x54c>
 801960a:	e1ee      	b.n	80199ea <_vfiprintf_r+0x92a>
 801960c:	2300      	movs	r3, #0
 801960e:	9d04      	ldr	r5, [sp, #16]
 8019610:	9317      	str	r3, [sp, #92]	; 0x5c
 8019612:	af19      	add	r7, sp, #100	; 0x64
 8019614:	e5c6      	b.n	80191a4 <_vfiprintf_r+0xe4>
 8019616:	2310      	movs	r3, #16
 8019618:	431c      	orrs	r4, r3
 801961a:	06a3      	lsls	r3, r4, #26
 801961c:	d52b      	bpl.n	8019676 <_vfiprintf_r+0x5b6>
 801961e:	2307      	movs	r3, #7
 8019620:	3507      	adds	r5, #7
 8019622:	439d      	bics	r5, r3
 8019624:	0029      	movs	r1, r5
 8019626:	c90c      	ldmia	r1!, {r2, r3}
 8019628:	9200      	str	r2, [sp, #0]
 801962a:	9301      	str	r3, [sp, #4]
 801962c:	9104      	str	r1, [sp, #16]
 801962e:	9a01      	ldr	r2, [sp, #4]
 8019630:	2301      	movs	r3, #1
 8019632:	2a00      	cmp	r2, #0
 8019634:	da09      	bge.n	801964a <_vfiprintf_r+0x58a>
 8019636:	9d00      	ldr	r5, [sp, #0]
 8019638:	9e01      	ldr	r6, [sp, #4]
 801963a:	2200      	movs	r2, #0
 801963c:	4269      	negs	r1, r5
 801963e:	41b2      	sbcs	r2, r6
 8019640:	9100      	str	r1, [sp, #0]
 8019642:	9201      	str	r2, [sp, #4]
 8019644:	212d      	movs	r1, #45	; 0x2d
 8019646:	aa14      	add	r2, sp, #80	; 0x50
 8019648:	70d1      	strb	r1, [r2, #3]
 801964a:	9901      	ldr	r1, [sp, #4]
 801964c:	9a00      	ldr	r2, [sp, #0]
 801964e:	430a      	orrs	r2, r1
 8019650:	9905      	ldr	r1, [sp, #20]
 8019652:	3101      	adds	r1, #1
 8019654:	d100      	bne.n	8019658 <_vfiprintf_r+0x598>
 8019656:	e1fc      	b.n	8019a52 <_vfiprintf_r+0x992>
 8019658:	2180      	movs	r1, #128	; 0x80
 801965a:	0020      	movs	r0, r4
 801965c:	4388      	bics	r0, r1
 801965e:	0006      	movs	r6, r0
 8019660:	2a00      	cmp	r2, #0
 8019662:	d000      	beq.n	8019666 <_vfiprintf_r+0x5a6>
 8019664:	e1f9      	b.n	8019a5a <_vfiprintf_r+0x99a>
 8019666:	9a05      	ldr	r2, [sp, #20]
 8019668:	2a00      	cmp	r2, #0
 801966a:	d100      	bne.n	801966e <_vfiprintf_r+0x5ae>
 801966c:	e149      	b.n	8019902 <_vfiprintf_r+0x842>
 801966e:	2b01      	cmp	r3, #1
 8019670:	d000      	beq.n	8019674 <_vfiprintf_r+0x5b4>
 8019672:	e1f5      	b.n	8019a60 <_vfiprintf_r+0x9a0>
 8019674:	e0ea      	b.n	801984c <_vfiprintf_r+0x78c>
 8019676:	1d2b      	adds	r3, r5, #4
 8019678:	9304      	str	r3, [sp, #16]
 801967a:	06e3      	lsls	r3, r4, #27
 801967c:	d504      	bpl.n	8019688 <_vfiprintf_r+0x5c8>
 801967e:	682b      	ldr	r3, [r5, #0]
 8019680:	9300      	str	r3, [sp, #0]
 8019682:	17db      	asrs	r3, r3, #31
 8019684:	9301      	str	r3, [sp, #4]
 8019686:	e7d2      	b.n	801962e <_vfiprintf_r+0x56e>
 8019688:	682b      	ldr	r3, [r5, #0]
 801968a:	0662      	lsls	r2, r4, #25
 801968c:	d501      	bpl.n	8019692 <_vfiprintf_r+0x5d2>
 801968e:	b21b      	sxth	r3, r3
 8019690:	e7f6      	b.n	8019680 <_vfiprintf_r+0x5c0>
 8019692:	05a2      	lsls	r2, r4, #22
 8019694:	d5f4      	bpl.n	8019680 <_vfiprintf_r+0x5c0>
 8019696:	b25b      	sxtb	r3, r3
 8019698:	e7f2      	b.n	8019680 <_vfiprintf_r+0x5c0>
 801969a:	cd08      	ldmia	r5!, {r3}
 801969c:	06a2      	lsls	r2, r4, #26
 801969e:	d504      	bpl.n	80196aa <_vfiprintf_r+0x5ea>
 80196a0:	9a08      	ldr	r2, [sp, #32]
 80196a2:	601a      	str	r2, [r3, #0]
 80196a4:	17d2      	asrs	r2, r2, #31
 80196a6:	605a      	str	r2, [r3, #4]
 80196a8:	e57c      	b.n	80191a4 <_vfiprintf_r+0xe4>
 80196aa:	06e2      	lsls	r2, r4, #27
 80196ac:	d502      	bpl.n	80196b4 <_vfiprintf_r+0x5f4>
 80196ae:	9a08      	ldr	r2, [sp, #32]
 80196b0:	601a      	str	r2, [r3, #0]
 80196b2:	e577      	b.n	80191a4 <_vfiprintf_r+0xe4>
 80196b4:	0662      	lsls	r2, r4, #25
 80196b6:	d502      	bpl.n	80196be <_vfiprintf_r+0x5fe>
 80196b8:	9a08      	ldr	r2, [sp, #32]
 80196ba:	801a      	strh	r2, [r3, #0]
 80196bc:	e572      	b.n	80191a4 <_vfiprintf_r+0xe4>
 80196be:	05a2      	lsls	r2, r4, #22
 80196c0:	d5f5      	bpl.n	80196ae <_vfiprintf_r+0x5ee>
 80196c2:	9a08      	ldr	r2, [sp, #32]
 80196c4:	701a      	strb	r2, [r3, #0]
 80196c6:	e56d      	b.n	80191a4 <_vfiprintf_r+0xe4>
 80196c8:	2310      	movs	r3, #16
 80196ca:	431c      	orrs	r4, r3
 80196cc:	2320      	movs	r3, #32
 80196ce:	0021      	movs	r1, r4
 80196d0:	4019      	ands	r1, r3
 80196d2:	421c      	tst	r4, r3
 80196d4:	d00d      	beq.n	80196f2 <_vfiprintf_r+0x632>
 80196d6:	3b19      	subs	r3, #25
 80196d8:	3507      	adds	r5, #7
 80196da:	439d      	bics	r5, r3
 80196dc:	0029      	movs	r1, r5
 80196de:	c90c      	ldmia	r1!, {r2, r3}
 80196e0:	9200      	str	r2, [sp, #0]
 80196e2:	9301      	str	r3, [sp, #4]
 80196e4:	9104      	str	r1, [sp, #16]
 80196e6:	4b32      	ldr	r3, [pc, #200]	; (80197b0 <_vfiprintf_r+0x6f0>)
 80196e8:	401c      	ands	r4, r3
 80196ea:	2300      	movs	r3, #0
 80196ec:	2100      	movs	r1, #0
 80196ee:	aa14      	add	r2, sp, #80	; 0x50
 80196f0:	e7aa      	b.n	8019648 <_vfiprintf_r+0x588>
 80196f2:	1d2b      	adds	r3, r5, #4
 80196f4:	0022      	movs	r2, r4
 80196f6:	9304      	str	r3, [sp, #16]
 80196f8:	2310      	movs	r3, #16
 80196fa:	401a      	ands	r2, r3
 80196fc:	421c      	tst	r4, r3
 80196fe:	d003      	beq.n	8019708 <_vfiprintf_r+0x648>
 8019700:	682b      	ldr	r3, [r5, #0]
 8019702:	9300      	str	r3, [sp, #0]
 8019704:	9101      	str	r1, [sp, #4]
 8019706:	e7ee      	b.n	80196e6 <_vfiprintf_r+0x626>
 8019708:	2340      	movs	r3, #64	; 0x40
 801970a:	0021      	movs	r1, r4
 801970c:	4019      	ands	r1, r3
 801970e:	421c      	tst	r4, r3
 8019710:	d004      	beq.n	801971c <_vfiprintf_r+0x65c>
 8019712:	682b      	ldr	r3, [r5, #0]
 8019714:	b29b      	uxth	r3, r3
 8019716:	9300      	str	r3, [sp, #0]
 8019718:	9201      	str	r2, [sp, #4]
 801971a:	e7e4      	b.n	80196e6 <_vfiprintf_r+0x626>
 801971c:	2380      	movs	r3, #128	; 0x80
 801971e:	0022      	movs	r2, r4
 8019720:	009b      	lsls	r3, r3, #2
 8019722:	401a      	ands	r2, r3
 8019724:	421c      	tst	r4, r3
 8019726:	d002      	beq.n	801972e <_vfiprintf_r+0x66e>
 8019728:	682b      	ldr	r3, [r5, #0]
 801972a:	b2db      	uxtb	r3, r3
 801972c:	e7e9      	b.n	8019702 <_vfiprintf_r+0x642>
 801972e:	682b      	ldr	r3, [r5, #0]
 8019730:	e7f1      	b.n	8019716 <_vfiprintf_r+0x656>
 8019732:	002b      	movs	r3, r5
 8019734:	cb04      	ldmia	r3!, {r2}
 8019736:	491f      	ldr	r1, [pc, #124]	; (80197b4 <_vfiprintf_r+0x6f4>)
 8019738:	9304      	str	r3, [sp, #16]
 801973a:	2300      	movs	r3, #0
 801973c:	9200      	str	r2, [sp, #0]
 801973e:	aa15      	add	r2, sp, #84	; 0x54
 8019740:	8011      	strh	r1, [r2, #0]
 8019742:	4a1d      	ldr	r2, [pc, #116]	; (80197b8 <_vfiprintf_r+0x6f8>)
 8019744:	9301      	str	r3, [sp, #4]
 8019746:	3302      	adds	r3, #2
 8019748:	431c      	orrs	r4, r3
 801974a:	920c      	str	r2, [sp, #48]	; 0x30
 801974c:	e7ce      	b.n	80196ec <_vfiprintf_r+0x62c>
 801974e:	002b      	movs	r3, r5
 8019750:	2200      	movs	r2, #0
 8019752:	cb20      	ldmia	r3!, {r5}
 8019754:	9304      	str	r3, [sp, #16]
 8019756:	ab14      	add	r3, sp, #80	; 0x50
 8019758:	70da      	strb	r2, [r3, #3]
 801975a:	9b05      	ldr	r3, [sp, #20]
 801975c:	3301      	adds	r3, #1
 801975e:	d00d      	beq.n	801977c <_vfiprintf_r+0x6bc>
 8019760:	2100      	movs	r1, #0
 8019762:	0028      	movs	r0, r5
 8019764:	9a05      	ldr	r2, [sp, #20]
 8019766:	f7fe fe7d 	bl	8018464 <memchr>
 801976a:	900b      	str	r0, [sp, #44]	; 0x2c
 801976c:	2800      	cmp	r0, #0
 801976e:	d100      	bne.n	8019772 <_vfiprintf_r+0x6b2>
 8019770:	e662      	b.n	8019438 <_vfiprintf_r+0x378>
 8019772:	1b43      	subs	r3, r0, r5
 8019774:	9305      	str	r3, [sp, #20]
 8019776:	2300      	movs	r3, #0
 8019778:	930b      	str	r3, [sp, #44]	; 0x2c
 801977a:	e65d      	b.n	8019438 <_vfiprintf_r+0x378>
 801977c:	0028      	movs	r0, r5
 801977e:	f7e6 fccb 	bl	8000118 <strlen>
 8019782:	9005      	str	r0, [sp, #20]
 8019784:	e7f7      	b.n	8019776 <_vfiprintf_r+0x6b6>
 8019786:	2310      	movs	r3, #16
 8019788:	431c      	orrs	r4, r3
 801978a:	2320      	movs	r3, #32
 801978c:	0021      	movs	r1, r4
 801978e:	4019      	ands	r1, r3
 8019790:	421c      	tst	r4, r3
 8019792:	d013      	beq.n	80197bc <_vfiprintf_r+0x6fc>
 8019794:	3b19      	subs	r3, #25
 8019796:	3507      	adds	r5, #7
 8019798:	439d      	bics	r5, r3
 801979a:	0029      	movs	r1, r5
 801979c:	c90c      	ldmia	r1!, {r2, r3}
 801979e:	9200      	str	r2, [sp, #0]
 80197a0:	9301      	str	r3, [sp, #4]
 80197a2:	9104      	str	r1, [sp, #16]
 80197a4:	2301      	movs	r3, #1
 80197a6:	e7a1      	b.n	80196ec <_vfiprintf_r+0x62c>
 80197a8:	0801dad0 	.word	0x0801dad0
 80197ac:	0801dae0 	.word	0x0801dae0
 80197b0:	fffffbff 	.word	0xfffffbff
 80197b4:	00007830 	.word	0x00007830
 80197b8:	0801d7f8 	.word	0x0801d7f8
 80197bc:	1d2b      	adds	r3, r5, #4
 80197be:	0022      	movs	r2, r4
 80197c0:	9304      	str	r3, [sp, #16]
 80197c2:	2310      	movs	r3, #16
 80197c4:	401a      	ands	r2, r3
 80197c6:	421c      	tst	r4, r3
 80197c8:	d003      	beq.n	80197d2 <_vfiprintf_r+0x712>
 80197ca:	682b      	ldr	r3, [r5, #0]
 80197cc:	9300      	str	r3, [sp, #0]
 80197ce:	9101      	str	r1, [sp, #4]
 80197d0:	e7e8      	b.n	80197a4 <_vfiprintf_r+0x6e4>
 80197d2:	2340      	movs	r3, #64	; 0x40
 80197d4:	0021      	movs	r1, r4
 80197d6:	4019      	ands	r1, r3
 80197d8:	421c      	tst	r4, r3
 80197da:	d004      	beq.n	80197e6 <_vfiprintf_r+0x726>
 80197dc:	682b      	ldr	r3, [r5, #0]
 80197de:	b29b      	uxth	r3, r3
 80197e0:	9300      	str	r3, [sp, #0]
 80197e2:	9201      	str	r2, [sp, #4]
 80197e4:	e7de      	b.n	80197a4 <_vfiprintf_r+0x6e4>
 80197e6:	2380      	movs	r3, #128	; 0x80
 80197e8:	0022      	movs	r2, r4
 80197ea:	009b      	lsls	r3, r3, #2
 80197ec:	401a      	ands	r2, r3
 80197ee:	421c      	tst	r4, r3
 80197f0:	d002      	beq.n	80197f8 <_vfiprintf_r+0x738>
 80197f2:	682b      	ldr	r3, [r5, #0]
 80197f4:	b2db      	uxtb	r3, r3
 80197f6:	e7e9      	b.n	80197cc <_vfiprintf_r+0x70c>
 80197f8:	682b      	ldr	r3, [r5, #0]
 80197fa:	e7f1      	b.n	80197e0 <_vfiprintf_r+0x720>
 80197fc:	4aad      	ldr	r2, [pc, #692]	; (8019ab4 <_vfiprintf_r+0x9f4>)
 80197fe:	e56f      	b.n	80192e0 <_vfiprintf_r+0x220>
 8019800:	1d2a      	adds	r2, r5, #4
 8019802:	0021      	movs	r1, r4
 8019804:	9204      	str	r2, [sp, #16]
 8019806:	2210      	movs	r2, #16
 8019808:	4011      	ands	r1, r2
 801980a:	4214      	tst	r4, r2
 801980c:	d003      	beq.n	8019816 <_vfiprintf_r+0x756>
 801980e:	682a      	ldr	r2, [r5, #0]
 8019810:	9200      	str	r2, [sp, #0]
 8019812:	9001      	str	r0, [sp, #4]
 8019814:	e573      	b.n	80192fe <_vfiprintf_r+0x23e>
 8019816:	2240      	movs	r2, #64	; 0x40
 8019818:	0020      	movs	r0, r4
 801981a:	4010      	ands	r0, r2
 801981c:	4214      	tst	r4, r2
 801981e:	d004      	beq.n	801982a <_vfiprintf_r+0x76a>
 8019820:	682a      	ldr	r2, [r5, #0]
 8019822:	b292      	uxth	r2, r2
 8019824:	9200      	str	r2, [sp, #0]
 8019826:	9101      	str	r1, [sp, #4]
 8019828:	e569      	b.n	80192fe <_vfiprintf_r+0x23e>
 801982a:	2280      	movs	r2, #128	; 0x80
 801982c:	0021      	movs	r1, r4
 801982e:	0092      	lsls	r2, r2, #2
 8019830:	4011      	ands	r1, r2
 8019832:	4214      	tst	r4, r2
 8019834:	d002      	beq.n	801983c <_vfiprintf_r+0x77c>
 8019836:	682a      	ldr	r2, [r5, #0]
 8019838:	b2d2      	uxtb	r2, r2
 801983a:	e7e9      	b.n	8019810 <_vfiprintf_r+0x750>
 801983c:	682a      	ldr	r2, [r5, #0]
 801983e:	e7f1      	b.n	8019824 <_vfiprintf_r+0x764>
 8019840:	9b01      	ldr	r3, [sp, #4]
 8019842:	2b00      	cmp	r3, #0
 8019844:	d109      	bne.n	801985a <_vfiprintf_r+0x79a>
 8019846:	9b00      	ldr	r3, [sp, #0]
 8019848:	2b09      	cmp	r3, #9
 801984a:	d806      	bhi.n	801985a <_vfiprintf_r+0x79a>
 801984c:	25b7      	movs	r5, #183	; 0xb7
 801984e:	ab14      	add	r3, sp, #80	; 0x50
 8019850:	18ed      	adds	r5, r5, r3
 8019852:	9b00      	ldr	r3, [sp, #0]
 8019854:	3330      	adds	r3, #48	; 0x30
 8019856:	702b      	strb	r3, [r5, #0]
 8019858:	e125      	b.n	8019aa6 <_vfiprintf_r+0x9e6>
 801985a:	2380      	movs	r3, #128	; 0x80
 801985c:	0032      	movs	r2, r6
 801985e:	2400      	movs	r4, #0
 8019860:	00db      	lsls	r3, r3, #3
 8019862:	401a      	ands	r2, r3
 8019864:	ad42      	add	r5, sp, #264	; 0x108
 8019866:	920a      	str	r2, [sp, #40]	; 0x28
 8019868:	220a      	movs	r2, #10
 801986a:	9800      	ldr	r0, [sp, #0]
 801986c:	9901      	ldr	r1, [sp, #4]
 801986e:	2300      	movs	r3, #0
 8019870:	f7e6 fe80 	bl	8000574 <__aeabi_uldivmod>
 8019874:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019876:	3d01      	subs	r5, #1
 8019878:	3230      	adds	r2, #48	; 0x30
 801987a:	702a      	strb	r2, [r5, #0]
 801987c:	3401      	adds	r4, #1
 801987e:	2b00      	cmp	r3, #0
 8019880:	d01a      	beq.n	80198b8 <_vfiprintf_r+0x7f8>
 8019882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019884:	781b      	ldrb	r3, [r3, #0]
 8019886:	42a3      	cmp	r3, r4
 8019888:	d116      	bne.n	80198b8 <_vfiprintf_r+0x7f8>
 801988a:	2cff      	cmp	r4, #255	; 0xff
 801988c:	d014      	beq.n	80198b8 <_vfiprintf_r+0x7f8>
 801988e:	9b01      	ldr	r3, [sp, #4]
 8019890:	2b00      	cmp	r3, #0
 8019892:	d102      	bne.n	801989a <_vfiprintf_r+0x7da>
 8019894:	9b00      	ldr	r3, [sp, #0]
 8019896:	2b09      	cmp	r3, #9
 8019898:	d90e      	bls.n	80198b8 <_vfiprintf_r+0x7f8>
 801989a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801989c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801989e:	1aed      	subs	r5, r5, r3
 80198a0:	001a      	movs	r2, r3
 80198a2:	0028      	movs	r0, r5
 80198a4:	f7fb f8e2 	bl	8014a6c <strncpy>
 80198a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80198aa:	2400      	movs	r4, #0
 80198ac:	785b      	ldrb	r3, [r3, #1]
 80198ae:	1e5a      	subs	r2, r3, #1
 80198b0:	4193      	sbcs	r3, r2
 80198b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80198b4:	18d3      	adds	r3, r2, r3
 80198b6:	930d      	str	r3, [sp, #52]	; 0x34
 80198b8:	2300      	movs	r3, #0
 80198ba:	9800      	ldr	r0, [sp, #0]
 80198bc:	9901      	ldr	r1, [sp, #4]
 80198be:	220a      	movs	r2, #10
 80198c0:	f7e6 fe58 	bl	8000574 <__aeabi_uldivmod>
 80198c4:	9b01      	ldr	r3, [sp, #4]
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d103      	bne.n	80198d2 <_vfiprintf_r+0x812>
 80198ca:	9b00      	ldr	r3, [sp, #0]
 80198cc:	2b09      	cmp	r3, #9
 80198ce:	d800      	bhi.n	80198d2 <_vfiprintf_r+0x812>
 80198d0:	e0e9      	b.n	8019aa6 <_vfiprintf_r+0x9e6>
 80198d2:	9000      	str	r0, [sp, #0]
 80198d4:	9101      	str	r1, [sp, #4]
 80198d6:	e7c7      	b.n	8019868 <_vfiprintf_r+0x7a8>
 80198d8:	200f      	movs	r0, #15
 80198da:	9b00      	ldr	r3, [sp, #0]
 80198dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80198de:	4003      	ands	r3, r0
 80198e0:	5cd3      	ldrb	r3, [r2, r3]
 80198e2:	3d01      	subs	r5, #1
 80198e4:	702b      	strb	r3, [r5, #0]
 80198e6:	9b01      	ldr	r3, [sp, #4]
 80198e8:	0719      	lsls	r1, r3, #28
 80198ea:	9b00      	ldr	r3, [sp, #0]
 80198ec:	091a      	lsrs	r2, r3, #4
 80198ee:	9b01      	ldr	r3, [sp, #4]
 80198f0:	4311      	orrs	r1, r2
 80198f2:	091b      	lsrs	r3, r3, #4
 80198f4:	9301      	str	r3, [sp, #4]
 80198f6:	000b      	movs	r3, r1
 80198f8:	9a01      	ldr	r2, [sp, #4]
 80198fa:	9100      	str	r1, [sp, #0]
 80198fc:	4313      	orrs	r3, r2
 80198fe:	d1ec      	bne.n	80198da <_vfiprintf_r+0x81a>
 8019900:	e0d1      	b.n	8019aa6 <_vfiprintf_r+0x9e6>
 8019902:	ad42      	add	r5, sp, #264	; 0x108
 8019904:	2b00      	cmp	r3, #0
 8019906:	d000      	beq.n	801990a <_vfiprintf_r+0x84a>
 8019908:	e0cd      	b.n	8019aa6 <_vfiprintf_r+0x9e6>
 801990a:	07e3      	lsls	r3, r4, #31
 801990c:	d400      	bmi.n	8019910 <_vfiprintf_r+0x850>
 801990e:	e0ca      	b.n	8019aa6 <_vfiprintf_r+0x9e6>
 8019910:	25b7      	movs	r5, #183	; 0xb7
 8019912:	ab14      	add	r3, sp, #80	; 0x50
 8019914:	18ed      	adds	r5, r5, r3
 8019916:	2330      	movs	r3, #48	; 0x30
 8019918:	e79d      	b.n	8019856 <_vfiprintf_r+0x796>
 801991a:	2b00      	cmp	r3, #0
 801991c:	d100      	bne.n	8019920 <_vfiprintf_r+0x860>
 801991e:	e089      	b.n	8019a34 <_vfiprintf_r+0x974>
 8019920:	2100      	movs	r1, #0
 8019922:	aa29      	add	r2, sp, #164	; 0xa4
 8019924:	7013      	strb	r3, [r2, #0]
 8019926:	ab14      	add	r3, sp, #80	; 0x50
 8019928:	70d9      	strb	r1, [r3, #3]
 801992a:	2301      	movs	r3, #1
 801992c:	9504      	str	r5, [sp, #16]
 801992e:	9305      	str	r3, [sp, #20]
 8019930:	0015      	movs	r5, r2
 8019932:	910b      	str	r1, [sp, #44]	; 0x2c
 8019934:	e580      	b.n	8019438 <_vfiprintf_r+0x378>
 8019936:	2010      	movs	r0, #16
 8019938:	1812      	adds	r2, r2, r0
 801993a:	6078      	str	r0, [r7, #4]
 801993c:	9218      	str	r2, [sp, #96]	; 0x60
 801993e:	9317      	str	r3, [sp, #92]	; 0x5c
 8019940:	2b07      	cmp	r3, #7
 8019942:	dd07      	ble.n	8019954 <_vfiprintf_r+0x894>
 8019944:	9903      	ldr	r1, [sp, #12]
 8019946:	9806      	ldr	r0, [sp, #24]
 8019948:	aa16      	add	r2, sp, #88	; 0x58
 801994a:	f7ff fb85 	bl	8019058 <__sprint_r>
 801994e:	2800      	cmp	r0, #0
 8019950:	d14b      	bne.n	80199ea <_vfiprintf_r+0x92a>
 8019952:	a919      	add	r1, sp, #100	; 0x64
 8019954:	0033      	movs	r3, r6
 8019956:	3b10      	subs	r3, #16
 8019958:	001e      	movs	r6, r3
 801995a:	000f      	movs	r7, r1
 801995c:	e58e      	b.n	801947c <_vfiprintf_r+0x3bc>
 801995e:	2010      	movs	r0, #16
 8019960:	1812      	adds	r2, r2, r0
 8019962:	6078      	str	r0, [r7, #4]
 8019964:	9218      	str	r2, [sp, #96]	; 0x60
 8019966:	9317      	str	r3, [sp, #92]	; 0x5c
 8019968:	2b07      	cmp	r3, #7
 801996a:	dd07      	ble.n	801997c <_vfiprintf_r+0x8bc>
 801996c:	9903      	ldr	r1, [sp, #12]
 801996e:	9806      	ldr	r0, [sp, #24]
 8019970:	aa16      	add	r2, sp, #88	; 0x58
 8019972:	f7ff fb71 	bl	8019058 <__sprint_r>
 8019976:	2800      	cmp	r0, #0
 8019978:	d137      	bne.n	80199ea <_vfiprintf_r+0x92a>
 801997a:	a919      	add	r1, sp, #100	; 0x64
 801997c:	0033      	movs	r3, r6
 801997e:	3b10      	subs	r3, #16
 8019980:	001e      	movs	r6, r3
 8019982:	000f      	movs	r7, r1
 8019984:	e5d6      	b.n	8019534 <_vfiprintf_r+0x474>
 8019986:	2010      	movs	r0, #16
 8019988:	1812      	adds	r2, r2, r0
 801998a:	6078      	str	r0, [r7, #4]
 801998c:	9218      	str	r2, [sp, #96]	; 0x60
 801998e:	9317      	str	r3, [sp, #92]	; 0x5c
 8019990:	2b07      	cmp	r3, #7
 8019992:	dd07      	ble.n	80199a4 <_vfiprintf_r+0x8e4>
 8019994:	9903      	ldr	r1, [sp, #12]
 8019996:	9806      	ldr	r0, [sp, #24]
 8019998:	aa16      	add	r2, sp, #88	; 0x58
 801999a:	f7ff fb5d 	bl	8019058 <__sprint_r>
 801999e:	2800      	cmp	r0, #0
 80199a0:	d123      	bne.n	80199ea <_vfiprintf_r+0x92a>
 80199a2:	a919      	add	r1, sp, #100	; 0x64
 80199a4:	0033      	movs	r3, r6
 80199a6:	3b10      	subs	r3, #16
 80199a8:	001e      	movs	r6, r3
 80199aa:	000f      	movs	r7, r1
 80199ac:	e5e2      	b.n	8019574 <_vfiprintf_r+0x4b4>
 80199ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80199b2:	2510      	movs	r5, #16
 80199b4:	1a9c      	subs	r4, r3, r2
 80199b6:	2c00      	cmp	r4, #0
 80199b8:	dc00      	bgt.n	80199bc <_vfiprintf_r+0x8fc>
 80199ba:	e613      	b.n	80195e4 <_vfiprintf_r+0x524>
 80199bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80199be:	483e      	ldr	r0, [pc, #248]	; (8019ab8 <_vfiprintf_r+0x9f8>)
 80199c0:	9918      	ldr	r1, [sp, #96]	; 0x60
 80199c2:	9305      	str	r3, [sp, #20]
 80199c4:	1c5a      	adds	r2, r3, #1
 80199c6:	6038      	str	r0, [r7, #0]
 80199c8:	2c10      	cmp	r4, #16
 80199ca:	dc22      	bgt.n	8019a12 <_vfiprintf_r+0x952>
 80199cc:	607c      	str	r4, [r7, #4]
 80199ce:	190c      	adds	r4, r1, r4
 80199d0:	9418      	str	r4, [sp, #96]	; 0x60
 80199d2:	9217      	str	r2, [sp, #92]	; 0x5c
 80199d4:	2a07      	cmp	r2, #7
 80199d6:	dc00      	bgt.n	80199da <_vfiprintf_r+0x91a>
 80199d8:	e604      	b.n	80195e4 <_vfiprintf_r+0x524>
 80199da:	9903      	ldr	r1, [sp, #12]
 80199dc:	9806      	ldr	r0, [sp, #24]
 80199de:	aa16      	add	r2, sp, #88	; 0x58
 80199e0:	f7ff fb3a 	bl	8019058 <__sprint_r>
 80199e4:	2800      	cmp	r0, #0
 80199e6:	d100      	bne.n	80199ea <_vfiprintf_r+0x92a>
 80199e8:	e5fc      	b.n	80195e4 <_vfiprintf_r+0x524>
 80199ea:	9b03      	ldr	r3, [sp, #12]
 80199ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80199ee:	07db      	lsls	r3, r3, #31
 80199f0:	d407      	bmi.n	8019a02 <_vfiprintf_r+0x942>
 80199f2:	9b03      	ldr	r3, [sp, #12]
 80199f4:	899b      	ldrh	r3, [r3, #12]
 80199f6:	059b      	lsls	r3, r3, #22
 80199f8:	d403      	bmi.n	8019a02 <_vfiprintf_r+0x942>
 80199fa:	9b03      	ldr	r3, [sp, #12]
 80199fc:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80199fe:	f7fe fd1e 	bl	801843e <__retarget_lock_release_recursive>
 8019a02:	9b03      	ldr	r3, [sp, #12]
 8019a04:	899b      	ldrh	r3, [r3, #12]
 8019a06:	065b      	lsls	r3, r3, #25
 8019a08:	d401      	bmi.n	8019a0e <_vfiprintf_r+0x94e>
 8019a0a:	f7ff fb98 	bl	801913e <_vfiprintf_r+0x7e>
 8019a0e:	f7ff fb93 	bl	8019138 <_vfiprintf_r+0x78>
 8019a12:	3110      	adds	r1, #16
 8019a14:	607d      	str	r5, [r7, #4]
 8019a16:	9118      	str	r1, [sp, #96]	; 0x60
 8019a18:	9217      	str	r2, [sp, #92]	; 0x5c
 8019a1a:	3708      	adds	r7, #8
 8019a1c:	2a07      	cmp	r2, #7
 8019a1e:	dd07      	ble.n	8019a30 <_vfiprintf_r+0x970>
 8019a20:	9903      	ldr	r1, [sp, #12]
 8019a22:	9806      	ldr	r0, [sp, #24]
 8019a24:	aa16      	add	r2, sp, #88	; 0x58
 8019a26:	f7ff fb17 	bl	8019058 <__sprint_r>
 8019a2a:	2800      	cmp	r0, #0
 8019a2c:	d1dd      	bne.n	80199ea <_vfiprintf_r+0x92a>
 8019a2e:	af19      	add	r7, sp, #100	; 0x64
 8019a30:	3c10      	subs	r4, #16
 8019a32:	e7c3      	b.n	80199bc <_vfiprintf_r+0x8fc>
 8019a34:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8019a36:	9300      	str	r3, [sp, #0]
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d102      	bne.n	8019a42 <_vfiprintf_r+0x982>
 8019a3c:	2300      	movs	r3, #0
 8019a3e:	9317      	str	r3, [sp, #92]	; 0x5c
 8019a40:	e7d3      	b.n	80199ea <_vfiprintf_r+0x92a>
 8019a42:	9903      	ldr	r1, [sp, #12]
 8019a44:	9806      	ldr	r0, [sp, #24]
 8019a46:	aa16      	add	r2, sp, #88	; 0x58
 8019a48:	f7ff fb06 	bl	8019058 <__sprint_r>
 8019a4c:	2800      	cmp	r0, #0
 8019a4e:	d0f5      	beq.n	8019a3c <_vfiprintf_r+0x97c>
 8019a50:	e7cb      	b.n	80199ea <_vfiprintf_r+0x92a>
 8019a52:	0026      	movs	r6, r4
 8019a54:	2a00      	cmp	r2, #0
 8019a56:	d100      	bne.n	8019a5a <_vfiprintf_r+0x99a>
 8019a58:	e609      	b.n	801966e <_vfiprintf_r+0x5ae>
 8019a5a:	2b01      	cmp	r3, #1
 8019a5c:	d100      	bne.n	8019a60 <_vfiprintf_r+0x9a0>
 8019a5e:	e6ef      	b.n	8019840 <_vfiprintf_r+0x780>
 8019a60:	ad42      	add	r5, sp, #264	; 0x108
 8019a62:	2b02      	cmp	r3, #2
 8019a64:	d100      	bne.n	8019a68 <_vfiprintf_r+0x9a8>
 8019a66:	e737      	b.n	80198d8 <_vfiprintf_r+0x818>
 8019a68:	2307      	movs	r3, #7
 8019a6a:	469c      	mov	ip, r3
 8019a6c:	4663      	mov	r3, ip
 8019a6e:	9900      	ldr	r1, [sp, #0]
 8019a70:	002a      	movs	r2, r5
 8019a72:	400b      	ands	r3, r1
 8019a74:	9901      	ldr	r1, [sp, #4]
 8019a76:	3d01      	subs	r5, #1
 8019a78:	074c      	lsls	r4, r1, #29
 8019a7a:	9900      	ldr	r1, [sp, #0]
 8019a7c:	3330      	adds	r3, #48	; 0x30
 8019a7e:	08c8      	lsrs	r0, r1, #3
 8019a80:	9901      	ldr	r1, [sp, #4]
 8019a82:	4304      	orrs	r4, r0
 8019a84:	08c9      	lsrs	r1, r1, #3
 8019a86:	9101      	str	r1, [sp, #4]
 8019a88:	0021      	movs	r1, r4
 8019a8a:	9801      	ldr	r0, [sp, #4]
 8019a8c:	702b      	strb	r3, [r5, #0]
 8019a8e:	9400      	str	r4, [sp, #0]
 8019a90:	4301      	orrs	r1, r0
 8019a92:	d1eb      	bne.n	8019a6c <_vfiprintf_r+0x9ac>
 8019a94:	0031      	movs	r1, r6
 8019a96:	07c9      	lsls	r1, r1, #31
 8019a98:	d505      	bpl.n	8019aa6 <_vfiprintf_r+0x9e6>
 8019a9a:	2b30      	cmp	r3, #48	; 0x30
 8019a9c:	d003      	beq.n	8019aa6 <_vfiprintf_r+0x9e6>
 8019a9e:	2330      	movs	r3, #48	; 0x30
 8019aa0:	3d01      	subs	r5, #1
 8019aa2:	702b      	strb	r3, [r5, #0]
 8019aa4:	1e95      	subs	r5, r2, #2
 8019aa6:	9b05      	ldr	r3, [sp, #20]
 8019aa8:	0034      	movs	r4, r6
 8019aaa:	930b      	str	r3, [sp, #44]	; 0x2c
 8019aac:	ab42      	add	r3, sp, #264	; 0x108
 8019aae:	1b5b      	subs	r3, r3, r5
 8019ab0:	9305      	str	r3, [sp, #20]
 8019ab2:	e4c1      	b.n	8019438 <_vfiprintf_r+0x378>
 8019ab4:	0801d809 	.word	0x0801d809
 8019ab8:	0801dad0 	.word	0x0801dad0

08019abc <__sbprintf>:
 8019abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019abe:	0015      	movs	r5, r2
 8019ac0:	2202      	movs	r2, #2
 8019ac2:	4c1e      	ldr	r4, [pc, #120]	; (8019b3c <__sbprintf+0x80>)
 8019ac4:	001f      	movs	r7, r3
 8019ac6:	898b      	ldrh	r3, [r1, #12]
 8019ac8:	44a5      	add	sp, r4
 8019aca:	4393      	bics	r3, r2
 8019acc:	466a      	mov	r2, sp
 8019ace:	8193      	strh	r3, [r2, #12]
 8019ad0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8019ad2:	0006      	movs	r6, r0
 8019ad4:	9319      	str	r3, [sp, #100]	; 0x64
 8019ad6:	89cb      	ldrh	r3, [r1, #14]
 8019ad8:	a816      	add	r0, sp, #88	; 0x58
 8019ada:	81d3      	strh	r3, [r2, #14]
 8019adc:	69cb      	ldr	r3, [r1, #28]
 8019ade:	000c      	movs	r4, r1
 8019ae0:	9307      	str	r3, [sp, #28]
 8019ae2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8019ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8019ae6:	ab1a      	add	r3, sp, #104	; 0x68
 8019ae8:	9300      	str	r3, [sp, #0]
 8019aea:	9304      	str	r3, [sp, #16]
 8019aec:	2380      	movs	r3, #128	; 0x80
 8019aee:	00db      	lsls	r3, r3, #3
 8019af0:	9302      	str	r3, [sp, #8]
 8019af2:	9305      	str	r3, [sp, #20]
 8019af4:	2300      	movs	r3, #0
 8019af6:	9306      	str	r3, [sp, #24]
 8019af8:	f7fe fc9e 	bl	8018438 <__retarget_lock_init_recursive>
 8019afc:	002a      	movs	r2, r5
 8019afe:	003b      	movs	r3, r7
 8019b00:	4669      	mov	r1, sp
 8019b02:	0030      	movs	r0, r6
 8019b04:	f7ff fadc 	bl	80190c0 <_vfiprintf_r>
 8019b08:	1e05      	subs	r5, r0, #0
 8019b0a:	db07      	blt.n	8019b1c <__sbprintf+0x60>
 8019b0c:	4669      	mov	r1, sp
 8019b0e:	0030      	movs	r0, r6
 8019b10:	f000 f91c 	bl	8019d4c <_fflush_r>
 8019b14:	2800      	cmp	r0, #0
 8019b16:	d001      	beq.n	8019b1c <__sbprintf+0x60>
 8019b18:	2501      	movs	r5, #1
 8019b1a:	426d      	negs	r5, r5
 8019b1c:	466b      	mov	r3, sp
 8019b1e:	899a      	ldrh	r2, [r3, #12]
 8019b20:	2340      	movs	r3, #64	; 0x40
 8019b22:	421a      	tst	r2, r3
 8019b24:	d002      	beq.n	8019b2c <__sbprintf+0x70>
 8019b26:	89a2      	ldrh	r2, [r4, #12]
 8019b28:	4313      	orrs	r3, r2
 8019b2a:	81a3      	strh	r3, [r4, #12]
 8019b2c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8019b2e:	f7fe fc84 	bl	801843a <__retarget_lock_close_recursive>
 8019b32:	0028      	movs	r0, r5
 8019b34:	4b02      	ldr	r3, [pc, #8]	; (8019b40 <__sbprintf+0x84>)
 8019b36:	449d      	add	sp, r3
 8019b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b3a:	46c0      	nop			; (mov r8, r8)
 8019b3c:	fffffb94 	.word	0xfffffb94
 8019b40:	0000046c 	.word	0x0000046c

08019b44 <__swsetup_r>:
 8019b44:	4b30      	ldr	r3, [pc, #192]	; (8019c08 <__swsetup_r+0xc4>)
 8019b46:	b570      	push	{r4, r5, r6, lr}
 8019b48:	0005      	movs	r5, r0
 8019b4a:	6818      	ldr	r0, [r3, #0]
 8019b4c:	000c      	movs	r4, r1
 8019b4e:	2800      	cmp	r0, #0
 8019b50:	d004      	beq.n	8019b5c <__swsetup_r+0x18>
 8019b52:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	d101      	bne.n	8019b5c <__swsetup_r+0x18>
 8019b58:	f000 f96e 	bl	8019e38 <__sinit>
 8019b5c:	230c      	movs	r3, #12
 8019b5e:	5ee2      	ldrsh	r2, [r4, r3]
 8019b60:	b293      	uxth	r3, r2
 8019b62:	0711      	lsls	r1, r2, #28
 8019b64:	d423      	bmi.n	8019bae <__swsetup_r+0x6a>
 8019b66:	06d9      	lsls	r1, r3, #27
 8019b68:	d407      	bmi.n	8019b7a <__swsetup_r+0x36>
 8019b6a:	2309      	movs	r3, #9
 8019b6c:	2001      	movs	r0, #1
 8019b6e:	602b      	str	r3, [r5, #0]
 8019b70:	3337      	adds	r3, #55	; 0x37
 8019b72:	4313      	orrs	r3, r2
 8019b74:	81a3      	strh	r3, [r4, #12]
 8019b76:	4240      	negs	r0, r0
 8019b78:	bd70      	pop	{r4, r5, r6, pc}
 8019b7a:	075b      	lsls	r3, r3, #29
 8019b7c:	d513      	bpl.n	8019ba6 <__swsetup_r+0x62>
 8019b7e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019b80:	2900      	cmp	r1, #0
 8019b82:	d008      	beq.n	8019b96 <__swsetup_r+0x52>
 8019b84:	0023      	movs	r3, r4
 8019b86:	3340      	adds	r3, #64	; 0x40
 8019b88:	4299      	cmp	r1, r3
 8019b8a:	d002      	beq.n	8019b92 <__swsetup_r+0x4e>
 8019b8c:	0028      	movs	r0, r5
 8019b8e:	f7fe f823 	bl	8017bd8 <_free_r>
 8019b92:	2300      	movs	r3, #0
 8019b94:	6323      	str	r3, [r4, #48]	; 0x30
 8019b96:	2224      	movs	r2, #36	; 0x24
 8019b98:	89a3      	ldrh	r3, [r4, #12]
 8019b9a:	4393      	bics	r3, r2
 8019b9c:	81a3      	strh	r3, [r4, #12]
 8019b9e:	2300      	movs	r3, #0
 8019ba0:	6063      	str	r3, [r4, #4]
 8019ba2:	6923      	ldr	r3, [r4, #16]
 8019ba4:	6023      	str	r3, [r4, #0]
 8019ba6:	2308      	movs	r3, #8
 8019ba8:	89a2      	ldrh	r2, [r4, #12]
 8019baa:	4313      	orrs	r3, r2
 8019bac:	81a3      	strh	r3, [r4, #12]
 8019bae:	6923      	ldr	r3, [r4, #16]
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	d10b      	bne.n	8019bcc <__swsetup_r+0x88>
 8019bb4:	21a0      	movs	r1, #160	; 0xa0
 8019bb6:	2280      	movs	r2, #128	; 0x80
 8019bb8:	89a3      	ldrh	r3, [r4, #12]
 8019bba:	0089      	lsls	r1, r1, #2
 8019bbc:	0092      	lsls	r2, r2, #2
 8019bbe:	400b      	ands	r3, r1
 8019bc0:	4293      	cmp	r3, r2
 8019bc2:	d003      	beq.n	8019bcc <__swsetup_r+0x88>
 8019bc4:	0021      	movs	r1, r4
 8019bc6:	0028      	movs	r0, r5
 8019bc8:	f000 fb80 	bl	801a2cc <__smakebuf_r>
 8019bcc:	220c      	movs	r2, #12
 8019bce:	5ea3      	ldrsh	r3, [r4, r2]
 8019bd0:	2001      	movs	r0, #1
 8019bd2:	001a      	movs	r2, r3
 8019bd4:	b299      	uxth	r1, r3
 8019bd6:	4002      	ands	r2, r0
 8019bd8:	4203      	tst	r3, r0
 8019bda:	d00f      	beq.n	8019bfc <__swsetup_r+0xb8>
 8019bdc:	2200      	movs	r2, #0
 8019bde:	60a2      	str	r2, [r4, #8]
 8019be0:	6962      	ldr	r2, [r4, #20]
 8019be2:	4252      	negs	r2, r2
 8019be4:	61a2      	str	r2, [r4, #24]
 8019be6:	2000      	movs	r0, #0
 8019be8:	6922      	ldr	r2, [r4, #16]
 8019bea:	4282      	cmp	r2, r0
 8019bec:	d1c4      	bne.n	8019b78 <__swsetup_r+0x34>
 8019bee:	060a      	lsls	r2, r1, #24
 8019bf0:	d5c2      	bpl.n	8019b78 <__swsetup_r+0x34>
 8019bf2:	2240      	movs	r2, #64	; 0x40
 8019bf4:	4313      	orrs	r3, r2
 8019bf6:	81a3      	strh	r3, [r4, #12]
 8019bf8:	3801      	subs	r0, #1
 8019bfa:	e7bd      	b.n	8019b78 <__swsetup_r+0x34>
 8019bfc:	0788      	lsls	r0, r1, #30
 8019bfe:	d400      	bmi.n	8019c02 <__swsetup_r+0xbe>
 8019c00:	6962      	ldr	r2, [r4, #20]
 8019c02:	60a2      	str	r2, [r4, #8]
 8019c04:	e7ef      	b.n	8019be6 <__swsetup_r+0xa2>
 8019c06:	46c0      	nop			; (mov r8, r8)
 8019c08:	20000190 	.word	0x20000190

08019c0c <abort>:
 8019c0c:	2006      	movs	r0, #6
 8019c0e:	b510      	push	{r4, lr}
 8019c10:	f000 fbcc 	bl	801a3ac <raise>
 8019c14:	2001      	movs	r0, #1
 8019c16:	f000 fdc1 	bl	801a79c <_exit>
	...

08019c1c <__sflush_r>:
 8019c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019c1e:	230c      	movs	r3, #12
 8019c20:	5eca      	ldrsh	r2, [r1, r3]
 8019c22:	000c      	movs	r4, r1
 8019c24:	0005      	movs	r5, r0
 8019c26:	b291      	uxth	r1, r2
 8019c28:	0713      	lsls	r3, r2, #28
 8019c2a:	d467      	bmi.n	8019cfc <__sflush_r+0xe0>
 8019c2c:	2380      	movs	r3, #128	; 0x80
 8019c2e:	011b      	lsls	r3, r3, #4
 8019c30:	4313      	orrs	r3, r2
 8019c32:	6862      	ldr	r2, [r4, #4]
 8019c34:	81a3      	strh	r3, [r4, #12]
 8019c36:	2a00      	cmp	r2, #0
 8019c38:	dc04      	bgt.n	8019c44 <__sflush_r+0x28>
 8019c3a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8019c3c:	2a00      	cmp	r2, #0
 8019c3e:	dc01      	bgt.n	8019c44 <__sflush_r+0x28>
 8019c40:	2000      	movs	r0, #0
 8019c42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019c44:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8019c46:	2f00      	cmp	r7, #0
 8019c48:	d0fa      	beq.n	8019c40 <__sflush_r+0x24>
 8019c4a:	2200      	movs	r2, #0
 8019c4c:	2180      	movs	r1, #128	; 0x80
 8019c4e:	682e      	ldr	r6, [r5, #0]
 8019c50:	602a      	str	r2, [r5, #0]
 8019c52:	001a      	movs	r2, r3
 8019c54:	0149      	lsls	r1, r1, #5
 8019c56:	400a      	ands	r2, r1
 8019c58:	420b      	tst	r3, r1
 8019c5a:	d038      	beq.n	8019cce <__sflush_r+0xb2>
 8019c5c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8019c5e:	89a3      	ldrh	r3, [r4, #12]
 8019c60:	075b      	lsls	r3, r3, #29
 8019c62:	d506      	bpl.n	8019c72 <__sflush_r+0x56>
 8019c64:	6863      	ldr	r3, [r4, #4]
 8019c66:	1ac0      	subs	r0, r0, r3
 8019c68:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8019c6a:	2b00      	cmp	r3, #0
 8019c6c:	d001      	beq.n	8019c72 <__sflush_r+0x56>
 8019c6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8019c70:	1ac0      	subs	r0, r0, r3
 8019c72:	0002      	movs	r2, r0
 8019c74:	69e1      	ldr	r1, [r4, #28]
 8019c76:	2300      	movs	r3, #0
 8019c78:	0028      	movs	r0, r5
 8019c7a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8019c7c:	47b8      	blx	r7
 8019c7e:	89a1      	ldrh	r1, [r4, #12]
 8019c80:	1c43      	adds	r3, r0, #1
 8019c82:	d106      	bne.n	8019c92 <__sflush_r+0x76>
 8019c84:	682b      	ldr	r3, [r5, #0]
 8019c86:	2b1d      	cmp	r3, #29
 8019c88:	d835      	bhi.n	8019cf6 <__sflush_r+0xda>
 8019c8a:	4a2e      	ldr	r2, [pc, #184]	; (8019d44 <__sflush_r+0x128>)
 8019c8c:	40da      	lsrs	r2, r3
 8019c8e:	07d3      	lsls	r3, r2, #31
 8019c90:	d531      	bpl.n	8019cf6 <__sflush_r+0xda>
 8019c92:	2200      	movs	r2, #0
 8019c94:	4b2c      	ldr	r3, [pc, #176]	; (8019d48 <__sflush_r+0x12c>)
 8019c96:	6062      	str	r2, [r4, #4]
 8019c98:	400b      	ands	r3, r1
 8019c9a:	6922      	ldr	r2, [r4, #16]
 8019c9c:	b21b      	sxth	r3, r3
 8019c9e:	81a3      	strh	r3, [r4, #12]
 8019ca0:	6022      	str	r2, [r4, #0]
 8019ca2:	04db      	lsls	r3, r3, #19
 8019ca4:	d505      	bpl.n	8019cb2 <__sflush_r+0x96>
 8019ca6:	1c43      	adds	r3, r0, #1
 8019ca8:	d102      	bne.n	8019cb0 <__sflush_r+0x94>
 8019caa:	682b      	ldr	r3, [r5, #0]
 8019cac:	2b00      	cmp	r3, #0
 8019cae:	d100      	bne.n	8019cb2 <__sflush_r+0x96>
 8019cb0:	6520      	str	r0, [r4, #80]	; 0x50
 8019cb2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019cb4:	602e      	str	r6, [r5, #0]
 8019cb6:	2900      	cmp	r1, #0
 8019cb8:	d0c2      	beq.n	8019c40 <__sflush_r+0x24>
 8019cba:	0023      	movs	r3, r4
 8019cbc:	3340      	adds	r3, #64	; 0x40
 8019cbe:	4299      	cmp	r1, r3
 8019cc0:	d002      	beq.n	8019cc8 <__sflush_r+0xac>
 8019cc2:	0028      	movs	r0, r5
 8019cc4:	f7fd ff88 	bl	8017bd8 <_free_r>
 8019cc8:	2000      	movs	r0, #0
 8019cca:	6320      	str	r0, [r4, #48]	; 0x30
 8019ccc:	e7b9      	b.n	8019c42 <__sflush_r+0x26>
 8019cce:	2301      	movs	r3, #1
 8019cd0:	0028      	movs	r0, r5
 8019cd2:	69e1      	ldr	r1, [r4, #28]
 8019cd4:	47b8      	blx	r7
 8019cd6:	1c43      	adds	r3, r0, #1
 8019cd8:	d1c1      	bne.n	8019c5e <__sflush_r+0x42>
 8019cda:	682b      	ldr	r3, [r5, #0]
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d0be      	beq.n	8019c5e <__sflush_r+0x42>
 8019ce0:	2b1d      	cmp	r3, #29
 8019ce2:	d001      	beq.n	8019ce8 <__sflush_r+0xcc>
 8019ce4:	2b16      	cmp	r3, #22
 8019ce6:	d101      	bne.n	8019cec <__sflush_r+0xd0>
 8019ce8:	602e      	str	r6, [r5, #0]
 8019cea:	e7a9      	b.n	8019c40 <__sflush_r+0x24>
 8019cec:	2340      	movs	r3, #64	; 0x40
 8019cee:	89a2      	ldrh	r2, [r4, #12]
 8019cf0:	4313      	orrs	r3, r2
 8019cf2:	81a3      	strh	r3, [r4, #12]
 8019cf4:	e7a5      	b.n	8019c42 <__sflush_r+0x26>
 8019cf6:	2340      	movs	r3, #64	; 0x40
 8019cf8:	430b      	orrs	r3, r1
 8019cfa:	e7fa      	b.n	8019cf2 <__sflush_r+0xd6>
 8019cfc:	6927      	ldr	r7, [r4, #16]
 8019cfe:	2f00      	cmp	r7, #0
 8019d00:	d09e      	beq.n	8019c40 <__sflush_r+0x24>
 8019d02:	6823      	ldr	r3, [r4, #0]
 8019d04:	6027      	str	r7, [r4, #0]
 8019d06:	1bdb      	subs	r3, r3, r7
 8019d08:	9301      	str	r3, [sp, #4]
 8019d0a:	2300      	movs	r3, #0
 8019d0c:	078a      	lsls	r2, r1, #30
 8019d0e:	d100      	bne.n	8019d12 <__sflush_r+0xf6>
 8019d10:	6963      	ldr	r3, [r4, #20]
 8019d12:	60a3      	str	r3, [r4, #8]
 8019d14:	9b01      	ldr	r3, [sp, #4]
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	dc00      	bgt.n	8019d1c <__sflush_r+0x100>
 8019d1a:	e791      	b.n	8019c40 <__sflush_r+0x24>
 8019d1c:	003a      	movs	r2, r7
 8019d1e:	0028      	movs	r0, r5
 8019d20:	9b01      	ldr	r3, [sp, #4]
 8019d22:	69e1      	ldr	r1, [r4, #28]
 8019d24:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019d26:	47b0      	blx	r6
 8019d28:	2800      	cmp	r0, #0
 8019d2a:	dc06      	bgt.n	8019d3a <__sflush_r+0x11e>
 8019d2c:	2340      	movs	r3, #64	; 0x40
 8019d2e:	2001      	movs	r0, #1
 8019d30:	89a2      	ldrh	r2, [r4, #12]
 8019d32:	4240      	negs	r0, r0
 8019d34:	4313      	orrs	r3, r2
 8019d36:	81a3      	strh	r3, [r4, #12]
 8019d38:	e783      	b.n	8019c42 <__sflush_r+0x26>
 8019d3a:	9b01      	ldr	r3, [sp, #4]
 8019d3c:	183f      	adds	r7, r7, r0
 8019d3e:	1a1b      	subs	r3, r3, r0
 8019d40:	9301      	str	r3, [sp, #4]
 8019d42:	e7e7      	b.n	8019d14 <__sflush_r+0xf8>
 8019d44:	20400001 	.word	0x20400001
 8019d48:	fffff7ff 	.word	0xfffff7ff

08019d4c <_fflush_r>:
 8019d4c:	b570      	push	{r4, r5, r6, lr}
 8019d4e:	0005      	movs	r5, r0
 8019d50:	000c      	movs	r4, r1
 8019d52:	2800      	cmp	r0, #0
 8019d54:	d004      	beq.n	8019d60 <_fflush_r+0x14>
 8019d56:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d101      	bne.n	8019d60 <_fflush_r+0x14>
 8019d5c:	f000 f86c 	bl	8019e38 <__sinit>
 8019d60:	220c      	movs	r2, #12
 8019d62:	5ea3      	ldrsh	r3, [r4, r2]
 8019d64:	1e1e      	subs	r6, r3, #0
 8019d66:	d015      	beq.n	8019d94 <_fflush_r+0x48>
 8019d68:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019d6a:	07d2      	lsls	r2, r2, #31
 8019d6c:	d404      	bmi.n	8019d78 <_fflush_r+0x2c>
 8019d6e:	059b      	lsls	r3, r3, #22
 8019d70:	d402      	bmi.n	8019d78 <_fflush_r+0x2c>
 8019d72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019d74:	f7fe fb62 	bl	801843c <__retarget_lock_acquire_recursive>
 8019d78:	0021      	movs	r1, r4
 8019d7a:	0028      	movs	r0, r5
 8019d7c:	f7ff ff4e 	bl	8019c1c <__sflush_r>
 8019d80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019d82:	0006      	movs	r6, r0
 8019d84:	07db      	lsls	r3, r3, #31
 8019d86:	d405      	bmi.n	8019d94 <_fflush_r+0x48>
 8019d88:	89a3      	ldrh	r3, [r4, #12]
 8019d8a:	059b      	lsls	r3, r3, #22
 8019d8c:	d402      	bmi.n	8019d94 <_fflush_r+0x48>
 8019d8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019d90:	f7fe fb55 	bl	801843e <__retarget_lock_release_recursive>
 8019d94:	0030      	movs	r0, r6
 8019d96:	bd70      	pop	{r4, r5, r6, pc}

08019d98 <std>:
 8019d98:	2300      	movs	r3, #0
 8019d9a:	b510      	push	{r4, lr}
 8019d9c:	0004      	movs	r4, r0
 8019d9e:	6003      	str	r3, [r0, #0]
 8019da0:	6043      	str	r3, [r0, #4]
 8019da2:	6083      	str	r3, [r0, #8]
 8019da4:	8181      	strh	r1, [r0, #12]
 8019da6:	6643      	str	r3, [r0, #100]	; 0x64
 8019da8:	0019      	movs	r1, r3
 8019daa:	81c2      	strh	r2, [r0, #14]
 8019dac:	6103      	str	r3, [r0, #16]
 8019dae:	2208      	movs	r2, #8
 8019db0:	6143      	str	r3, [r0, #20]
 8019db2:	6183      	str	r3, [r0, #24]
 8019db4:	305c      	adds	r0, #92	; 0x5c
 8019db6:	f7fa fbdc 	bl	8014572 <memset>
 8019dba:	0020      	movs	r0, r4
 8019dbc:	4b06      	ldr	r3, [pc, #24]	; (8019dd8 <std+0x40>)
 8019dbe:	61e4      	str	r4, [r4, #28]
 8019dc0:	6223      	str	r3, [r4, #32]
 8019dc2:	4b06      	ldr	r3, [pc, #24]	; (8019ddc <std+0x44>)
 8019dc4:	3058      	adds	r0, #88	; 0x58
 8019dc6:	6263      	str	r3, [r4, #36]	; 0x24
 8019dc8:	4b05      	ldr	r3, [pc, #20]	; (8019de0 <std+0x48>)
 8019dca:	62a3      	str	r3, [r4, #40]	; 0x28
 8019dcc:	4b05      	ldr	r3, [pc, #20]	; (8019de4 <std+0x4c>)
 8019dce:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019dd0:	f7fe fb32 	bl	8018438 <__retarget_lock_init_recursive>
 8019dd4:	bd10      	pop	{r4, pc}
 8019dd6:	46c0      	nop			; (mov r8, r8)
 8019dd8:	0801a3ed 	.word	0x0801a3ed
 8019ddc:	0801a415 	.word	0x0801a415
 8019de0:	0801a44d 	.word	0x0801a44d
 8019de4:	0801a479 	.word	0x0801a479

08019de8 <_cleanup_r>:
 8019de8:	b510      	push	{r4, lr}
 8019dea:	4902      	ldr	r1, [pc, #8]	; (8019df4 <_cleanup_r+0xc>)
 8019dec:	f000 fa1c 	bl	801a228 <_fwalk_reent>
 8019df0:	bd10      	pop	{r4, pc}
 8019df2:	46c0      	nop			; (mov r8, r8)
 8019df4:	0801a5a5 	.word	0x0801a5a5

08019df8 <__sfp_lock_acquire>:
 8019df8:	b510      	push	{r4, lr}
 8019dfa:	4802      	ldr	r0, [pc, #8]	; (8019e04 <__sfp_lock_acquire+0xc>)
 8019dfc:	f7fe fb1e 	bl	801843c <__retarget_lock_acquire_recursive>
 8019e00:	bd10      	pop	{r4, pc}
 8019e02:	46c0      	nop			; (mov r8, r8)
 8019e04:	20006ba8 	.word	0x20006ba8

08019e08 <__sfp_lock_release>:
 8019e08:	b510      	push	{r4, lr}
 8019e0a:	4802      	ldr	r0, [pc, #8]	; (8019e14 <__sfp_lock_release+0xc>)
 8019e0c:	f7fe fb17 	bl	801843e <__retarget_lock_release_recursive>
 8019e10:	bd10      	pop	{r4, pc}
 8019e12:	46c0      	nop			; (mov r8, r8)
 8019e14:	20006ba8 	.word	0x20006ba8

08019e18 <__sinit_lock_acquire>:
 8019e18:	b510      	push	{r4, lr}
 8019e1a:	4802      	ldr	r0, [pc, #8]	; (8019e24 <__sinit_lock_acquire+0xc>)
 8019e1c:	f7fe fb0e 	bl	801843c <__retarget_lock_acquire_recursive>
 8019e20:	bd10      	pop	{r4, pc}
 8019e22:	46c0      	nop			; (mov r8, r8)
 8019e24:	20006ba3 	.word	0x20006ba3

08019e28 <__sinit_lock_release>:
 8019e28:	b510      	push	{r4, lr}
 8019e2a:	4802      	ldr	r0, [pc, #8]	; (8019e34 <__sinit_lock_release+0xc>)
 8019e2c:	f7fe fb07 	bl	801843e <__retarget_lock_release_recursive>
 8019e30:	bd10      	pop	{r4, pc}
 8019e32:	46c0      	nop			; (mov r8, r8)
 8019e34:	20006ba3 	.word	0x20006ba3

08019e38 <__sinit>:
 8019e38:	b510      	push	{r4, lr}
 8019e3a:	0004      	movs	r4, r0
 8019e3c:	f7ff ffec 	bl	8019e18 <__sinit_lock_acquire>
 8019e40:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8019e42:	2a00      	cmp	r2, #0
 8019e44:	d002      	beq.n	8019e4c <__sinit+0x14>
 8019e46:	f7ff ffef 	bl	8019e28 <__sinit_lock_release>
 8019e4a:	bd10      	pop	{r4, pc}
 8019e4c:	4b0e      	ldr	r3, [pc, #56]	; (8019e88 <__sinit+0x50>)
 8019e4e:	2103      	movs	r1, #3
 8019e50:	63e3      	str	r3, [r4, #60]	; 0x3c
 8019e52:	23b8      	movs	r3, #184	; 0xb8
 8019e54:	009b      	lsls	r3, r3, #2
 8019e56:	50e2      	str	r2, [r4, r3]
 8019e58:	3304      	adds	r3, #4
 8019e5a:	50e1      	str	r1, [r4, r3]
 8019e5c:	3308      	adds	r3, #8
 8019e5e:	18e1      	adds	r1, r4, r3
 8019e60:	3b04      	subs	r3, #4
 8019e62:	50e1      	str	r1, [r4, r3]
 8019e64:	6860      	ldr	r0, [r4, #4]
 8019e66:	2104      	movs	r1, #4
 8019e68:	f7ff ff96 	bl	8019d98 <std>
 8019e6c:	2201      	movs	r2, #1
 8019e6e:	2109      	movs	r1, #9
 8019e70:	68a0      	ldr	r0, [r4, #8]
 8019e72:	f7ff ff91 	bl	8019d98 <std>
 8019e76:	2202      	movs	r2, #2
 8019e78:	2112      	movs	r1, #18
 8019e7a:	68e0      	ldr	r0, [r4, #12]
 8019e7c:	f7ff ff8c 	bl	8019d98 <std>
 8019e80:	2301      	movs	r3, #1
 8019e82:	63a3      	str	r3, [r4, #56]	; 0x38
 8019e84:	e7df      	b.n	8019e46 <__sinit+0xe>
 8019e86:	46c0      	nop			; (mov r8, r8)
 8019e88:	08019de9 	.word	0x08019de9

08019e8c <__fputwc>:
 8019e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019e8e:	b085      	sub	sp, #20
 8019e90:	000e      	movs	r6, r1
 8019e92:	0015      	movs	r5, r2
 8019e94:	9001      	str	r0, [sp, #4]
 8019e96:	f7fe fac3 	bl	8018420 <__locale_mb_cur_max>
 8019e9a:	0004      	movs	r4, r0
 8019e9c:	2801      	cmp	r0, #1
 8019e9e:	d119      	bne.n	8019ed4 <__fputwc+0x48>
 8019ea0:	1e73      	subs	r3, r6, #1
 8019ea2:	2bfe      	cmp	r3, #254	; 0xfe
 8019ea4:	d816      	bhi.n	8019ed4 <__fputwc+0x48>
 8019ea6:	ab02      	add	r3, sp, #8
 8019ea8:	711e      	strb	r6, [r3, #4]
 8019eaa:	2700      	movs	r7, #0
 8019eac:	42a7      	cmp	r7, r4
 8019eae:	d020      	beq.n	8019ef2 <__fputwc+0x66>
 8019eb0:	ab03      	add	r3, sp, #12
 8019eb2:	5dd9      	ldrb	r1, [r3, r7]
 8019eb4:	68ab      	ldr	r3, [r5, #8]
 8019eb6:	3b01      	subs	r3, #1
 8019eb8:	60ab      	str	r3, [r5, #8]
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	da04      	bge.n	8019ec8 <__fputwc+0x3c>
 8019ebe:	69aa      	ldr	r2, [r5, #24]
 8019ec0:	4293      	cmp	r3, r2
 8019ec2:	db19      	blt.n	8019ef8 <__fputwc+0x6c>
 8019ec4:	290a      	cmp	r1, #10
 8019ec6:	d017      	beq.n	8019ef8 <__fputwc+0x6c>
 8019ec8:	682b      	ldr	r3, [r5, #0]
 8019eca:	1c5a      	adds	r2, r3, #1
 8019ecc:	602a      	str	r2, [r5, #0]
 8019ece:	7019      	strb	r1, [r3, #0]
 8019ed0:	3701      	adds	r7, #1
 8019ed2:	e7eb      	b.n	8019eac <__fputwc+0x20>
 8019ed4:	002b      	movs	r3, r5
 8019ed6:	0032      	movs	r2, r6
 8019ed8:	9801      	ldr	r0, [sp, #4]
 8019eda:	335c      	adds	r3, #92	; 0x5c
 8019edc:	a903      	add	r1, sp, #12
 8019ede:	f000 fb23 	bl	801a528 <_wcrtomb_r>
 8019ee2:	0004      	movs	r4, r0
 8019ee4:	1c43      	adds	r3, r0, #1
 8019ee6:	d1e0      	bne.n	8019eaa <__fputwc+0x1e>
 8019ee8:	2340      	movs	r3, #64	; 0x40
 8019eea:	0006      	movs	r6, r0
 8019eec:	89aa      	ldrh	r2, [r5, #12]
 8019eee:	4313      	orrs	r3, r2
 8019ef0:	81ab      	strh	r3, [r5, #12]
 8019ef2:	0030      	movs	r0, r6
 8019ef4:	b005      	add	sp, #20
 8019ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019ef8:	002a      	movs	r2, r5
 8019efa:	9801      	ldr	r0, [sp, #4]
 8019efc:	f000 fac2 	bl	801a484 <__swbuf_r>
 8019f00:	1c43      	adds	r3, r0, #1
 8019f02:	d1e5      	bne.n	8019ed0 <__fputwc+0x44>
 8019f04:	0006      	movs	r6, r0
 8019f06:	e7f4      	b.n	8019ef2 <__fputwc+0x66>

08019f08 <_fputwc_r>:
 8019f08:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8019f0a:	b570      	push	{r4, r5, r6, lr}
 8019f0c:	0005      	movs	r5, r0
 8019f0e:	000e      	movs	r6, r1
 8019f10:	0014      	movs	r4, r2
 8019f12:	07db      	lsls	r3, r3, #31
 8019f14:	d405      	bmi.n	8019f22 <_fputwc_r+0x1a>
 8019f16:	8993      	ldrh	r3, [r2, #12]
 8019f18:	059b      	lsls	r3, r3, #22
 8019f1a:	d402      	bmi.n	8019f22 <_fputwc_r+0x1a>
 8019f1c:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8019f1e:	f7fe fa8d 	bl	801843c <__retarget_lock_acquire_recursive>
 8019f22:	230c      	movs	r3, #12
 8019f24:	5ee2      	ldrsh	r2, [r4, r3]
 8019f26:	2380      	movs	r3, #128	; 0x80
 8019f28:	019b      	lsls	r3, r3, #6
 8019f2a:	421a      	tst	r2, r3
 8019f2c:	d104      	bne.n	8019f38 <_fputwc_r+0x30>
 8019f2e:	431a      	orrs	r2, r3
 8019f30:	81a2      	strh	r2, [r4, #12]
 8019f32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019f34:	4313      	orrs	r3, r2
 8019f36:	6663      	str	r3, [r4, #100]	; 0x64
 8019f38:	0028      	movs	r0, r5
 8019f3a:	0022      	movs	r2, r4
 8019f3c:	0031      	movs	r1, r6
 8019f3e:	f7ff ffa5 	bl	8019e8c <__fputwc>
 8019f42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019f44:	0005      	movs	r5, r0
 8019f46:	07db      	lsls	r3, r3, #31
 8019f48:	d405      	bmi.n	8019f56 <_fputwc_r+0x4e>
 8019f4a:	89a3      	ldrh	r3, [r4, #12]
 8019f4c:	059b      	lsls	r3, r3, #22
 8019f4e:	d402      	bmi.n	8019f56 <_fputwc_r+0x4e>
 8019f50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019f52:	f7fe fa74 	bl	801843e <__retarget_lock_release_recursive>
 8019f56:	0028      	movs	r0, r5
 8019f58:	bd70      	pop	{r4, r5, r6, pc}
	...

08019f5c <__sfvwrite_r>:
 8019f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f5e:	6893      	ldr	r3, [r2, #8]
 8019f60:	b087      	sub	sp, #28
 8019f62:	000c      	movs	r4, r1
 8019f64:	9002      	str	r0, [sp, #8]
 8019f66:	9203      	str	r2, [sp, #12]
 8019f68:	9300      	str	r3, [sp, #0]
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	d102      	bne.n	8019f74 <__sfvwrite_r+0x18>
 8019f6e:	2000      	movs	r0, #0
 8019f70:	b007      	add	sp, #28
 8019f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f74:	898b      	ldrh	r3, [r1, #12]
 8019f76:	071b      	lsls	r3, r3, #28
 8019f78:	d559      	bpl.n	801a02e <__sfvwrite_r+0xd2>
 8019f7a:	690b      	ldr	r3, [r1, #16]
 8019f7c:	2b00      	cmp	r3, #0
 8019f7e:	d056      	beq.n	801a02e <__sfvwrite_r+0xd2>
 8019f80:	9b03      	ldr	r3, [sp, #12]
 8019f82:	2202      	movs	r2, #2
 8019f84:	681b      	ldr	r3, [r3, #0]
 8019f86:	9301      	str	r3, [sp, #4]
 8019f88:	89a3      	ldrh	r3, [r4, #12]
 8019f8a:	001f      	movs	r7, r3
 8019f8c:	4017      	ands	r7, r2
 8019f8e:	4213      	tst	r3, r2
 8019f90:	d173      	bne.n	801a07a <__sfvwrite_r+0x11e>
 8019f92:	2201      	movs	r2, #1
 8019f94:	0019      	movs	r1, r3
 8019f96:	4011      	ands	r1, r2
 8019f98:	4213      	tst	r3, r2
 8019f9a:	d100      	bne.n	8019f9e <__sfvwrite_r+0x42>
 8019f9c:	e0a8      	b.n	801a0f0 <__sfvwrite_r+0x194>
 8019f9e:	0038      	movs	r0, r7
 8019fa0:	003e      	movs	r6, r7
 8019fa2:	9700      	str	r7, [sp, #0]
 8019fa4:	9205      	str	r2, [sp, #20]
 8019fa6:	9b00      	ldr	r3, [sp, #0]
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	d100      	bne.n	8019fae <__sfvwrite_r+0x52>
 8019fac:	e112      	b.n	801a1d4 <__sfvwrite_r+0x278>
 8019fae:	2800      	cmp	r0, #0
 8019fb0:	d10a      	bne.n	8019fc8 <__sfvwrite_r+0x6c>
 8019fb2:	001a      	movs	r2, r3
 8019fb4:	210a      	movs	r1, #10
 8019fb6:	0030      	movs	r0, r6
 8019fb8:	f7fe fa54 	bl	8018464 <memchr>
 8019fbc:	9b00      	ldr	r3, [sp, #0]
 8019fbe:	1c5f      	adds	r7, r3, #1
 8019fc0:	2800      	cmp	r0, #0
 8019fc2:	d001      	beq.n	8019fc8 <__sfvwrite_r+0x6c>
 8019fc4:	3001      	adds	r0, #1
 8019fc6:	1b87      	subs	r7, r0, r6
 8019fc8:	9b00      	ldr	r3, [sp, #0]
 8019fca:	9704      	str	r7, [sp, #16]
 8019fcc:	429f      	cmp	r7, r3
 8019fce:	d900      	bls.n	8019fd2 <__sfvwrite_r+0x76>
 8019fd0:	9304      	str	r3, [sp, #16]
 8019fd2:	6820      	ldr	r0, [r4, #0]
 8019fd4:	6922      	ldr	r2, [r4, #16]
 8019fd6:	6963      	ldr	r3, [r4, #20]
 8019fd8:	4290      	cmp	r0, r2
 8019fda:	d800      	bhi.n	8019fde <__sfvwrite_r+0x82>
 8019fdc:	e103      	b.n	801a1e6 <__sfvwrite_r+0x28a>
 8019fde:	68a2      	ldr	r2, [r4, #8]
 8019fe0:	189d      	adds	r5, r3, r2
 8019fe2:	9a04      	ldr	r2, [sp, #16]
 8019fe4:	42aa      	cmp	r2, r5
 8019fe6:	dc00      	bgt.n	8019fea <__sfvwrite_r+0x8e>
 8019fe8:	e0fd      	b.n	801a1e6 <__sfvwrite_r+0x28a>
 8019fea:	0031      	movs	r1, r6
 8019fec:	002a      	movs	r2, r5
 8019fee:	f7fe fa44 	bl	801847a <memmove>
 8019ff2:	6823      	ldr	r3, [r4, #0]
 8019ff4:	0021      	movs	r1, r4
 8019ff6:	195b      	adds	r3, r3, r5
 8019ff8:	9802      	ldr	r0, [sp, #8]
 8019ffa:	6023      	str	r3, [r4, #0]
 8019ffc:	f7ff fea6 	bl	8019d4c <_fflush_r>
 801a000:	2800      	cmp	r0, #0
 801a002:	d170      	bne.n	801a0e6 <__sfvwrite_r+0x18a>
 801a004:	9805      	ldr	r0, [sp, #20]
 801a006:	1b7f      	subs	r7, r7, r5
 801a008:	d105      	bne.n	801a016 <__sfvwrite_r+0xba>
 801a00a:	0021      	movs	r1, r4
 801a00c:	9802      	ldr	r0, [sp, #8]
 801a00e:	f7ff fe9d 	bl	8019d4c <_fflush_r>
 801a012:	2800      	cmp	r0, #0
 801a014:	d167      	bne.n	801a0e6 <__sfvwrite_r+0x18a>
 801a016:	9b00      	ldr	r3, [sp, #0]
 801a018:	1976      	adds	r6, r6, r5
 801a01a:	1b5b      	subs	r3, r3, r5
 801a01c:	9300      	str	r3, [sp, #0]
 801a01e:	9b03      	ldr	r3, [sp, #12]
 801a020:	689b      	ldr	r3, [r3, #8]
 801a022:	1b5d      	subs	r5, r3, r5
 801a024:	9304      	str	r3, [sp, #16]
 801a026:	9b03      	ldr	r3, [sp, #12]
 801a028:	609d      	str	r5, [r3, #8]
 801a02a:	d1bc      	bne.n	8019fa6 <__sfvwrite_r+0x4a>
 801a02c:	e79f      	b.n	8019f6e <__sfvwrite_r+0x12>
 801a02e:	0021      	movs	r1, r4
 801a030:	9802      	ldr	r0, [sp, #8]
 801a032:	f7ff fd87 	bl	8019b44 <__swsetup_r>
 801a036:	2800      	cmp	r0, #0
 801a038:	d0a2      	beq.n	8019f80 <__sfvwrite_r+0x24>
 801a03a:	2001      	movs	r0, #1
 801a03c:	4240      	negs	r0, r0
 801a03e:	e797      	b.n	8019f70 <__sfvwrite_r+0x14>
 801a040:	9b01      	ldr	r3, [sp, #4]
 801a042:	681e      	ldr	r6, [r3, #0]
 801a044:	685d      	ldr	r5, [r3, #4]
 801a046:	3308      	adds	r3, #8
 801a048:	9301      	str	r3, [sp, #4]
 801a04a:	2d00      	cmp	r5, #0
 801a04c:	d0f8      	beq.n	801a040 <__sfvwrite_r+0xe4>
 801a04e:	4a72      	ldr	r2, [pc, #456]	; (801a218 <__sfvwrite_r+0x2bc>)
 801a050:	002b      	movs	r3, r5
 801a052:	4295      	cmp	r5, r2
 801a054:	d900      	bls.n	801a058 <__sfvwrite_r+0xfc>
 801a056:	0013      	movs	r3, r2
 801a058:	0032      	movs	r2, r6
 801a05a:	69e1      	ldr	r1, [r4, #28]
 801a05c:	9802      	ldr	r0, [sp, #8]
 801a05e:	6a67      	ldr	r7, [r4, #36]	; 0x24
 801a060:	47b8      	blx	r7
 801a062:	2800      	cmp	r0, #0
 801a064:	dd3f      	ble.n	801a0e6 <__sfvwrite_r+0x18a>
 801a066:	9b03      	ldr	r3, [sp, #12]
 801a068:	1836      	adds	r6, r6, r0
 801a06a:	689b      	ldr	r3, [r3, #8]
 801a06c:	1a2d      	subs	r5, r5, r0
 801a06e:	9300      	str	r3, [sp, #0]
 801a070:	1a18      	subs	r0, r3, r0
 801a072:	9b03      	ldr	r3, [sp, #12]
 801a074:	6098      	str	r0, [r3, #8]
 801a076:	d1e8      	bne.n	801a04a <__sfvwrite_r+0xee>
 801a078:	e779      	b.n	8019f6e <__sfvwrite_r+0x12>
 801a07a:	2600      	movs	r6, #0
 801a07c:	0035      	movs	r5, r6
 801a07e:	e7e4      	b.n	801a04a <__sfvwrite_r+0xee>
 801a080:	9b01      	ldr	r3, [sp, #4]
 801a082:	681b      	ldr	r3, [r3, #0]
 801a084:	9304      	str	r3, [sp, #16]
 801a086:	9b01      	ldr	r3, [sp, #4]
 801a088:	685b      	ldr	r3, [r3, #4]
 801a08a:	9300      	str	r3, [sp, #0]
 801a08c:	9b01      	ldr	r3, [sp, #4]
 801a08e:	3308      	adds	r3, #8
 801a090:	9301      	str	r3, [sp, #4]
 801a092:	9b00      	ldr	r3, [sp, #0]
 801a094:	2b00      	cmp	r3, #0
 801a096:	d0f3      	beq.n	801a080 <__sfvwrite_r+0x124>
 801a098:	2380      	movs	r3, #128	; 0x80
 801a09a:	89a2      	ldrh	r2, [r4, #12]
 801a09c:	009b      	lsls	r3, r3, #2
 801a09e:	68a5      	ldr	r5, [r4, #8]
 801a0a0:	6820      	ldr	r0, [r4, #0]
 801a0a2:	421a      	tst	r2, r3
 801a0a4:	d064      	beq.n	801a170 <__sfvwrite_r+0x214>
 801a0a6:	9b00      	ldr	r3, [sp, #0]
 801a0a8:	429d      	cmp	r5, r3
 801a0aa:	d835      	bhi.n	801a118 <__sfvwrite_r+0x1bc>
 801a0ac:	2390      	movs	r3, #144	; 0x90
 801a0ae:	00db      	lsls	r3, r3, #3
 801a0b0:	421a      	tst	r2, r3
 801a0b2:	d031      	beq.n	801a118 <__sfvwrite_r+0x1bc>
 801a0b4:	2603      	movs	r6, #3
 801a0b6:	6963      	ldr	r3, [r4, #20]
 801a0b8:	6921      	ldr	r1, [r4, #16]
 801a0ba:	435e      	muls	r6, r3
 801a0bc:	1a47      	subs	r7, r0, r1
 801a0be:	0ff0      	lsrs	r0, r6, #31
 801a0c0:	1986      	adds	r6, r0, r6
 801a0c2:	9800      	ldr	r0, [sp, #0]
 801a0c4:	1c7b      	adds	r3, r7, #1
 801a0c6:	181b      	adds	r3, r3, r0
 801a0c8:	1076      	asrs	r6, r6, #1
 801a0ca:	42b3      	cmp	r3, r6
 801a0cc:	d900      	bls.n	801a0d0 <__sfvwrite_r+0x174>
 801a0ce:	001e      	movs	r6, r3
 801a0d0:	0553      	lsls	r3, r2, #21
 801a0d2:	d53e      	bpl.n	801a152 <__sfvwrite_r+0x1f6>
 801a0d4:	0031      	movs	r1, r6
 801a0d6:	9802      	ldr	r0, [sp, #8]
 801a0d8:	f7fa f820 	bl	801411c <_malloc_r>
 801a0dc:	1e05      	subs	r5, r0, #0
 801a0de:	d10a      	bne.n	801a0f6 <__sfvwrite_r+0x19a>
 801a0e0:	230c      	movs	r3, #12
 801a0e2:	9a02      	ldr	r2, [sp, #8]
 801a0e4:	6013      	str	r3, [r2, #0]
 801a0e6:	2340      	movs	r3, #64	; 0x40
 801a0e8:	89a2      	ldrh	r2, [r4, #12]
 801a0ea:	4313      	orrs	r3, r2
 801a0ec:	81a3      	strh	r3, [r4, #12]
 801a0ee:	e7a4      	b.n	801a03a <__sfvwrite_r+0xde>
 801a0f0:	9104      	str	r1, [sp, #16]
 801a0f2:	9100      	str	r1, [sp, #0]
 801a0f4:	e7cd      	b.n	801a092 <__sfvwrite_r+0x136>
 801a0f6:	003a      	movs	r2, r7
 801a0f8:	6921      	ldr	r1, [r4, #16]
 801a0fa:	f7fa fa31 	bl	8014560 <memcpy>
 801a0fe:	89a3      	ldrh	r3, [r4, #12]
 801a100:	4a46      	ldr	r2, [pc, #280]	; (801a21c <__sfvwrite_r+0x2c0>)
 801a102:	401a      	ands	r2, r3
 801a104:	2380      	movs	r3, #128	; 0x80
 801a106:	4313      	orrs	r3, r2
 801a108:	81a3      	strh	r3, [r4, #12]
 801a10a:	6125      	str	r5, [r4, #16]
 801a10c:	19ed      	adds	r5, r5, r7
 801a10e:	6025      	str	r5, [r4, #0]
 801a110:	6166      	str	r6, [r4, #20]
 801a112:	9d00      	ldr	r5, [sp, #0]
 801a114:	1bf6      	subs	r6, r6, r7
 801a116:	60a6      	str	r6, [r4, #8]
 801a118:	9f00      	ldr	r7, [sp, #0]
 801a11a:	42bd      	cmp	r5, r7
 801a11c:	d900      	bls.n	801a120 <__sfvwrite_r+0x1c4>
 801a11e:	003d      	movs	r5, r7
 801a120:	002a      	movs	r2, r5
 801a122:	9904      	ldr	r1, [sp, #16]
 801a124:	6820      	ldr	r0, [r4, #0]
 801a126:	f7fe f9a8 	bl	801847a <memmove>
 801a12a:	68a3      	ldr	r3, [r4, #8]
 801a12c:	1b5b      	subs	r3, r3, r5
 801a12e:	60a3      	str	r3, [r4, #8]
 801a130:	6823      	ldr	r3, [r4, #0]
 801a132:	195d      	adds	r5, r3, r5
 801a134:	6025      	str	r5, [r4, #0]
 801a136:	9b04      	ldr	r3, [sp, #16]
 801a138:	19db      	adds	r3, r3, r7
 801a13a:	9304      	str	r3, [sp, #16]
 801a13c:	9b00      	ldr	r3, [sp, #0]
 801a13e:	1bdb      	subs	r3, r3, r7
 801a140:	9300      	str	r3, [sp, #0]
 801a142:	9b03      	ldr	r3, [sp, #12]
 801a144:	689b      	ldr	r3, [r3, #8]
 801a146:	1bdf      	subs	r7, r3, r7
 801a148:	9305      	str	r3, [sp, #20]
 801a14a:	9b03      	ldr	r3, [sp, #12]
 801a14c:	609f      	str	r7, [r3, #8]
 801a14e:	d1a0      	bne.n	801a092 <__sfvwrite_r+0x136>
 801a150:	e70d      	b.n	8019f6e <__sfvwrite_r+0x12>
 801a152:	0032      	movs	r2, r6
 801a154:	9802      	ldr	r0, [sp, #8]
 801a156:	f7fa fa49 	bl	80145ec <_realloc_r>
 801a15a:	1e05      	subs	r5, r0, #0
 801a15c:	d1d5      	bne.n	801a10a <__sfvwrite_r+0x1ae>
 801a15e:	6921      	ldr	r1, [r4, #16]
 801a160:	9802      	ldr	r0, [sp, #8]
 801a162:	f7fd fd39 	bl	8017bd8 <_free_r>
 801a166:	2280      	movs	r2, #128	; 0x80
 801a168:	89a3      	ldrh	r3, [r4, #12]
 801a16a:	4393      	bics	r3, r2
 801a16c:	81a3      	strh	r3, [r4, #12]
 801a16e:	e7b7      	b.n	801a0e0 <__sfvwrite_r+0x184>
 801a170:	6923      	ldr	r3, [r4, #16]
 801a172:	4283      	cmp	r3, r0
 801a174:	d303      	bcc.n	801a17e <__sfvwrite_r+0x222>
 801a176:	6967      	ldr	r7, [r4, #20]
 801a178:	9b00      	ldr	r3, [sp, #0]
 801a17a:	429f      	cmp	r7, r3
 801a17c:	d917      	bls.n	801a1ae <__sfvwrite_r+0x252>
 801a17e:	9b00      	ldr	r3, [sp, #0]
 801a180:	429d      	cmp	r5, r3
 801a182:	d900      	bls.n	801a186 <__sfvwrite_r+0x22a>
 801a184:	001d      	movs	r5, r3
 801a186:	002a      	movs	r2, r5
 801a188:	9904      	ldr	r1, [sp, #16]
 801a18a:	f7fe f976 	bl	801847a <memmove>
 801a18e:	68a3      	ldr	r3, [r4, #8]
 801a190:	6822      	ldr	r2, [r4, #0]
 801a192:	1b5b      	subs	r3, r3, r5
 801a194:	1952      	adds	r2, r2, r5
 801a196:	002f      	movs	r7, r5
 801a198:	60a3      	str	r3, [r4, #8]
 801a19a:	6022      	str	r2, [r4, #0]
 801a19c:	2b00      	cmp	r3, #0
 801a19e:	d1ca      	bne.n	801a136 <__sfvwrite_r+0x1da>
 801a1a0:	0021      	movs	r1, r4
 801a1a2:	9802      	ldr	r0, [sp, #8]
 801a1a4:	f7ff fdd2 	bl	8019d4c <_fflush_r>
 801a1a8:	2800      	cmp	r0, #0
 801a1aa:	d0c4      	beq.n	801a136 <__sfvwrite_r+0x1da>
 801a1ac:	e79b      	b.n	801a0e6 <__sfvwrite_r+0x18a>
 801a1ae:	9a00      	ldr	r2, [sp, #0]
 801a1b0:	4b1b      	ldr	r3, [pc, #108]	; (801a220 <__sfvwrite_r+0x2c4>)
 801a1b2:	0010      	movs	r0, r2
 801a1b4:	429a      	cmp	r2, r3
 801a1b6:	d900      	bls.n	801a1ba <__sfvwrite_r+0x25e>
 801a1b8:	481a      	ldr	r0, [pc, #104]	; (801a224 <__sfvwrite_r+0x2c8>)
 801a1ba:	0039      	movs	r1, r7
 801a1bc:	f7e6 f852 	bl	8000264 <__divsi3>
 801a1c0:	003b      	movs	r3, r7
 801a1c2:	9a04      	ldr	r2, [sp, #16]
 801a1c4:	4343      	muls	r3, r0
 801a1c6:	69e1      	ldr	r1, [r4, #28]
 801a1c8:	9802      	ldr	r0, [sp, #8]
 801a1ca:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801a1cc:	47a8      	blx	r5
 801a1ce:	1e07      	subs	r7, r0, #0
 801a1d0:	dcb1      	bgt.n	801a136 <__sfvwrite_r+0x1da>
 801a1d2:	e788      	b.n	801a0e6 <__sfvwrite_r+0x18a>
 801a1d4:	9b01      	ldr	r3, [sp, #4]
 801a1d6:	2000      	movs	r0, #0
 801a1d8:	681e      	ldr	r6, [r3, #0]
 801a1da:	685b      	ldr	r3, [r3, #4]
 801a1dc:	9300      	str	r3, [sp, #0]
 801a1de:	9b01      	ldr	r3, [sp, #4]
 801a1e0:	3308      	adds	r3, #8
 801a1e2:	9301      	str	r3, [sp, #4]
 801a1e4:	e6df      	b.n	8019fa6 <__sfvwrite_r+0x4a>
 801a1e6:	9a04      	ldr	r2, [sp, #16]
 801a1e8:	4293      	cmp	r3, r2
 801a1ea:	dc08      	bgt.n	801a1fe <__sfvwrite_r+0x2a2>
 801a1ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801a1ee:	0032      	movs	r2, r6
 801a1f0:	69e1      	ldr	r1, [r4, #28]
 801a1f2:	9802      	ldr	r0, [sp, #8]
 801a1f4:	47a8      	blx	r5
 801a1f6:	1e05      	subs	r5, r0, #0
 801a1f8:	dd00      	ble.n	801a1fc <__sfvwrite_r+0x2a0>
 801a1fa:	e703      	b.n	801a004 <__sfvwrite_r+0xa8>
 801a1fc:	e773      	b.n	801a0e6 <__sfvwrite_r+0x18a>
 801a1fe:	9a04      	ldr	r2, [sp, #16]
 801a200:	0031      	movs	r1, r6
 801a202:	f7fe f93a 	bl	801847a <memmove>
 801a206:	9a04      	ldr	r2, [sp, #16]
 801a208:	68a3      	ldr	r3, [r4, #8]
 801a20a:	0015      	movs	r5, r2
 801a20c:	1a9b      	subs	r3, r3, r2
 801a20e:	60a3      	str	r3, [r4, #8]
 801a210:	6823      	ldr	r3, [r4, #0]
 801a212:	189b      	adds	r3, r3, r2
 801a214:	6023      	str	r3, [r4, #0]
 801a216:	e6f5      	b.n	801a004 <__sfvwrite_r+0xa8>
 801a218:	7ffffc00 	.word	0x7ffffc00
 801a21c:	fffffb7f 	.word	0xfffffb7f
 801a220:	7ffffffe 	.word	0x7ffffffe
 801a224:	7fffffff 	.word	0x7fffffff

0801a228 <_fwalk_reent>:
 801a228:	23b8      	movs	r3, #184	; 0xb8
 801a22a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a22c:	0006      	movs	r6, r0
 801a22e:	2700      	movs	r7, #0
 801a230:	009b      	lsls	r3, r3, #2
 801a232:	9101      	str	r1, [sp, #4]
 801a234:	18c4      	adds	r4, r0, r3
 801a236:	6863      	ldr	r3, [r4, #4]
 801a238:	68a5      	ldr	r5, [r4, #8]
 801a23a:	9300      	str	r3, [sp, #0]
 801a23c:	9b00      	ldr	r3, [sp, #0]
 801a23e:	3b01      	subs	r3, #1
 801a240:	9300      	str	r3, [sp, #0]
 801a242:	d504      	bpl.n	801a24e <_fwalk_reent+0x26>
 801a244:	6824      	ldr	r4, [r4, #0]
 801a246:	2c00      	cmp	r4, #0
 801a248:	d1f5      	bne.n	801a236 <_fwalk_reent+0xe>
 801a24a:	0038      	movs	r0, r7
 801a24c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a24e:	89ab      	ldrh	r3, [r5, #12]
 801a250:	2b01      	cmp	r3, #1
 801a252:	d908      	bls.n	801a266 <_fwalk_reent+0x3e>
 801a254:	220e      	movs	r2, #14
 801a256:	5eab      	ldrsh	r3, [r5, r2]
 801a258:	3301      	adds	r3, #1
 801a25a:	d004      	beq.n	801a266 <_fwalk_reent+0x3e>
 801a25c:	0029      	movs	r1, r5
 801a25e:	0030      	movs	r0, r6
 801a260:	9b01      	ldr	r3, [sp, #4]
 801a262:	4798      	blx	r3
 801a264:	4307      	orrs	r7, r0
 801a266:	3568      	adds	r5, #104	; 0x68
 801a268:	e7e8      	b.n	801a23c <_fwalk_reent+0x14>
	...

0801a26c <__swhatbuf_r>:
 801a26c:	b570      	push	{r4, r5, r6, lr}
 801a26e:	000e      	movs	r6, r1
 801a270:	001d      	movs	r5, r3
 801a272:	230e      	movs	r3, #14
 801a274:	5ec9      	ldrsh	r1, [r1, r3]
 801a276:	0014      	movs	r4, r2
 801a278:	b096      	sub	sp, #88	; 0x58
 801a27a:	2900      	cmp	r1, #0
 801a27c:	da0b      	bge.n	801a296 <__swhatbuf_r+0x2a>
 801a27e:	2300      	movs	r3, #0
 801a280:	602b      	str	r3, [r5, #0]
 801a282:	89b1      	ldrh	r1, [r6, #12]
 801a284:	2280      	movs	r2, #128	; 0x80
 801a286:	0008      	movs	r0, r1
 801a288:	4010      	ands	r0, r2
 801a28a:	4211      	tst	r1, r2
 801a28c:	d117      	bne.n	801a2be <__swhatbuf_r+0x52>
 801a28e:	2380      	movs	r3, #128	; 0x80
 801a290:	00db      	lsls	r3, r3, #3
 801a292:	6023      	str	r3, [r4, #0]
 801a294:	e016      	b.n	801a2c4 <__swhatbuf_r+0x58>
 801a296:	466a      	mov	r2, sp
 801a298:	f000 f9e4 	bl	801a664 <_fstat_r>
 801a29c:	2800      	cmp	r0, #0
 801a29e:	dbee      	blt.n	801a27e <__swhatbuf_r+0x12>
 801a2a0:	23f0      	movs	r3, #240	; 0xf0
 801a2a2:	9901      	ldr	r1, [sp, #4]
 801a2a4:	021b      	lsls	r3, r3, #8
 801a2a6:	4019      	ands	r1, r3
 801a2a8:	4b07      	ldr	r3, [pc, #28]	; (801a2c8 <__swhatbuf_r+0x5c>)
 801a2aa:	2080      	movs	r0, #128	; 0x80
 801a2ac:	18c9      	adds	r1, r1, r3
 801a2ae:	424b      	negs	r3, r1
 801a2b0:	4159      	adcs	r1, r3
 801a2b2:	2380      	movs	r3, #128	; 0x80
 801a2b4:	00db      	lsls	r3, r3, #3
 801a2b6:	6029      	str	r1, [r5, #0]
 801a2b8:	0100      	lsls	r0, r0, #4
 801a2ba:	6023      	str	r3, [r4, #0]
 801a2bc:	e002      	b.n	801a2c4 <__swhatbuf_r+0x58>
 801a2be:	2240      	movs	r2, #64	; 0x40
 801a2c0:	0018      	movs	r0, r3
 801a2c2:	6022      	str	r2, [r4, #0]
 801a2c4:	b016      	add	sp, #88	; 0x58
 801a2c6:	bd70      	pop	{r4, r5, r6, pc}
 801a2c8:	ffffe000 	.word	0xffffe000

0801a2cc <__smakebuf_r>:
 801a2cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a2ce:	2602      	movs	r6, #2
 801a2d0:	898b      	ldrh	r3, [r1, #12]
 801a2d2:	0005      	movs	r5, r0
 801a2d4:	000c      	movs	r4, r1
 801a2d6:	4233      	tst	r3, r6
 801a2d8:	d006      	beq.n	801a2e8 <__smakebuf_r+0x1c>
 801a2da:	0023      	movs	r3, r4
 801a2dc:	3343      	adds	r3, #67	; 0x43
 801a2de:	6023      	str	r3, [r4, #0]
 801a2e0:	6123      	str	r3, [r4, #16]
 801a2e2:	2301      	movs	r3, #1
 801a2e4:	6163      	str	r3, [r4, #20]
 801a2e6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 801a2e8:	466a      	mov	r2, sp
 801a2ea:	ab01      	add	r3, sp, #4
 801a2ec:	f7ff ffbe 	bl	801a26c <__swhatbuf_r>
 801a2f0:	9900      	ldr	r1, [sp, #0]
 801a2f2:	0007      	movs	r7, r0
 801a2f4:	0028      	movs	r0, r5
 801a2f6:	f7f9 ff11 	bl	801411c <_malloc_r>
 801a2fa:	2800      	cmp	r0, #0
 801a2fc:	d108      	bne.n	801a310 <__smakebuf_r+0x44>
 801a2fe:	220c      	movs	r2, #12
 801a300:	5ea3      	ldrsh	r3, [r4, r2]
 801a302:	059a      	lsls	r2, r3, #22
 801a304:	d4ef      	bmi.n	801a2e6 <__smakebuf_r+0x1a>
 801a306:	2203      	movs	r2, #3
 801a308:	4393      	bics	r3, r2
 801a30a:	431e      	orrs	r6, r3
 801a30c:	81a6      	strh	r6, [r4, #12]
 801a30e:	e7e4      	b.n	801a2da <__smakebuf_r+0xe>
 801a310:	4b0f      	ldr	r3, [pc, #60]	; (801a350 <__smakebuf_r+0x84>)
 801a312:	63eb      	str	r3, [r5, #60]	; 0x3c
 801a314:	2380      	movs	r3, #128	; 0x80
 801a316:	89a2      	ldrh	r2, [r4, #12]
 801a318:	6020      	str	r0, [r4, #0]
 801a31a:	4313      	orrs	r3, r2
 801a31c:	81a3      	strh	r3, [r4, #12]
 801a31e:	9b00      	ldr	r3, [sp, #0]
 801a320:	6120      	str	r0, [r4, #16]
 801a322:	6163      	str	r3, [r4, #20]
 801a324:	9b01      	ldr	r3, [sp, #4]
 801a326:	2b00      	cmp	r3, #0
 801a328:	d00d      	beq.n	801a346 <__smakebuf_r+0x7a>
 801a32a:	0028      	movs	r0, r5
 801a32c:	230e      	movs	r3, #14
 801a32e:	5ee1      	ldrsh	r1, [r4, r3]
 801a330:	f000 f9aa 	bl	801a688 <_isatty_r>
 801a334:	2800      	cmp	r0, #0
 801a336:	d006      	beq.n	801a346 <__smakebuf_r+0x7a>
 801a338:	2203      	movs	r2, #3
 801a33a:	89a3      	ldrh	r3, [r4, #12]
 801a33c:	4393      	bics	r3, r2
 801a33e:	001a      	movs	r2, r3
 801a340:	2301      	movs	r3, #1
 801a342:	4313      	orrs	r3, r2
 801a344:	81a3      	strh	r3, [r4, #12]
 801a346:	89a0      	ldrh	r0, [r4, #12]
 801a348:	4307      	orrs	r7, r0
 801a34a:	81a7      	strh	r7, [r4, #12]
 801a34c:	e7cb      	b.n	801a2e6 <__smakebuf_r+0x1a>
 801a34e:	46c0      	nop			; (mov r8, r8)
 801a350:	08019de9 	.word	0x08019de9

0801a354 <_raise_r>:
 801a354:	b570      	push	{r4, r5, r6, lr}
 801a356:	0004      	movs	r4, r0
 801a358:	000d      	movs	r5, r1
 801a35a:	291f      	cmp	r1, #31
 801a35c:	d904      	bls.n	801a368 <_raise_r+0x14>
 801a35e:	2316      	movs	r3, #22
 801a360:	6003      	str	r3, [r0, #0]
 801a362:	2001      	movs	r0, #1
 801a364:	4240      	negs	r0, r0
 801a366:	bd70      	pop	{r4, r5, r6, pc}
 801a368:	23b7      	movs	r3, #183	; 0xb7
 801a36a:	009b      	lsls	r3, r3, #2
 801a36c:	58c3      	ldr	r3, [r0, r3]
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d004      	beq.n	801a37c <_raise_r+0x28>
 801a372:	008a      	lsls	r2, r1, #2
 801a374:	189b      	adds	r3, r3, r2
 801a376:	681a      	ldr	r2, [r3, #0]
 801a378:	2a00      	cmp	r2, #0
 801a37a:	d108      	bne.n	801a38e <_raise_r+0x3a>
 801a37c:	0020      	movs	r0, r4
 801a37e:	f000 f831 	bl	801a3e4 <_getpid_r>
 801a382:	002a      	movs	r2, r5
 801a384:	0001      	movs	r1, r0
 801a386:	0020      	movs	r0, r4
 801a388:	f000 f81a 	bl	801a3c0 <_kill_r>
 801a38c:	e7eb      	b.n	801a366 <_raise_r+0x12>
 801a38e:	2000      	movs	r0, #0
 801a390:	2a01      	cmp	r2, #1
 801a392:	d0e8      	beq.n	801a366 <_raise_r+0x12>
 801a394:	1c51      	adds	r1, r2, #1
 801a396:	d103      	bne.n	801a3a0 <_raise_r+0x4c>
 801a398:	2316      	movs	r3, #22
 801a39a:	3001      	adds	r0, #1
 801a39c:	6023      	str	r3, [r4, #0]
 801a39e:	e7e2      	b.n	801a366 <_raise_r+0x12>
 801a3a0:	2400      	movs	r4, #0
 801a3a2:	0028      	movs	r0, r5
 801a3a4:	601c      	str	r4, [r3, #0]
 801a3a6:	4790      	blx	r2
 801a3a8:	0020      	movs	r0, r4
 801a3aa:	e7dc      	b.n	801a366 <_raise_r+0x12>

0801a3ac <raise>:
 801a3ac:	b510      	push	{r4, lr}
 801a3ae:	4b03      	ldr	r3, [pc, #12]	; (801a3bc <raise+0x10>)
 801a3b0:	0001      	movs	r1, r0
 801a3b2:	6818      	ldr	r0, [r3, #0]
 801a3b4:	f7ff ffce 	bl	801a354 <_raise_r>
 801a3b8:	bd10      	pop	{r4, pc}
 801a3ba:	46c0      	nop			; (mov r8, r8)
 801a3bc:	20000190 	.word	0x20000190

0801a3c0 <_kill_r>:
 801a3c0:	2300      	movs	r3, #0
 801a3c2:	b570      	push	{r4, r5, r6, lr}
 801a3c4:	4d06      	ldr	r5, [pc, #24]	; (801a3e0 <_kill_r+0x20>)
 801a3c6:	0004      	movs	r4, r0
 801a3c8:	0008      	movs	r0, r1
 801a3ca:	0011      	movs	r1, r2
 801a3cc:	602b      	str	r3, [r5, #0]
 801a3ce:	f000 f9b5 	bl	801a73c <_kill>
 801a3d2:	1c43      	adds	r3, r0, #1
 801a3d4:	d103      	bne.n	801a3de <_kill_r+0x1e>
 801a3d6:	682b      	ldr	r3, [r5, #0]
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d000      	beq.n	801a3de <_kill_r+0x1e>
 801a3dc:	6023      	str	r3, [r4, #0]
 801a3de:	bd70      	pop	{r4, r5, r6, pc}
 801a3e0:	20006bac 	.word	0x20006bac

0801a3e4 <_getpid_r>:
 801a3e4:	b510      	push	{r4, lr}
 801a3e6:	f000 f999 	bl	801a71c <_getpid>
 801a3ea:	bd10      	pop	{r4, pc}

0801a3ec <__sread>:
 801a3ec:	b570      	push	{r4, r5, r6, lr}
 801a3ee:	000c      	movs	r4, r1
 801a3f0:	250e      	movs	r5, #14
 801a3f2:	5f49      	ldrsh	r1, [r1, r5]
 801a3f4:	f000 f96e 	bl	801a6d4 <_read_r>
 801a3f8:	2800      	cmp	r0, #0
 801a3fa:	db03      	blt.n	801a404 <__sread+0x18>
 801a3fc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801a3fe:	181b      	adds	r3, r3, r0
 801a400:	6523      	str	r3, [r4, #80]	; 0x50
 801a402:	bd70      	pop	{r4, r5, r6, pc}
 801a404:	89a3      	ldrh	r3, [r4, #12]
 801a406:	4a02      	ldr	r2, [pc, #8]	; (801a410 <__sread+0x24>)
 801a408:	4013      	ands	r3, r2
 801a40a:	81a3      	strh	r3, [r4, #12]
 801a40c:	e7f9      	b.n	801a402 <__sread+0x16>
 801a40e:	46c0      	nop			; (mov r8, r8)
 801a410:	ffffefff 	.word	0xffffefff

0801a414 <__swrite>:
 801a414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a416:	001f      	movs	r7, r3
 801a418:	898b      	ldrh	r3, [r1, #12]
 801a41a:	0005      	movs	r5, r0
 801a41c:	000c      	movs	r4, r1
 801a41e:	0016      	movs	r6, r2
 801a420:	05db      	lsls	r3, r3, #23
 801a422:	d505      	bpl.n	801a430 <__swrite+0x1c>
 801a424:	230e      	movs	r3, #14
 801a426:	5ec9      	ldrsh	r1, [r1, r3]
 801a428:	2200      	movs	r2, #0
 801a42a:	2302      	movs	r3, #2
 801a42c:	f000 f93e 	bl	801a6ac <_lseek_r>
 801a430:	89a3      	ldrh	r3, [r4, #12]
 801a432:	4a05      	ldr	r2, [pc, #20]	; (801a448 <__swrite+0x34>)
 801a434:	0028      	movs	r0, r5
 801a436:	4013      	ands	r3, r2
 801a438:	81a3      	strh	r3, [r4, #12]
 801a43a:	0032      	movs	r2, r6
 801a43c:	230e      	movs	r3, #14
 801a43e:	5ee1      	ldrsh	r1, [r4, r3]
 801a440:	003b      	movs	r3, r7
 801a442:	f000 f889 	bl	801a558 <_write_r>
 801a446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a448:	ffffefff 	.word	0xffffefff

0801a44c <__sseek>:
 801a44c:	b570      	push	{r4, r5, r6, lr}
 801a44e:	000c      	movs	r4, r1
 801a450:	250e      	movs	r5, #14
 801a452:	5f49      	ldrsh	r1, [r1, r5]
 801a454:	f000 f92a 	bl	801a6ac <_lseek_r>
 801a458:	89a3      	ldrh	r3, [r4, #12]
 801a45a:	1c42      	adds	r2, r0, #1
 801a45c:	d103      	bne.n	801a466 <__sseek+0x1a>
 801a45e:	4a05      	ldr	r2, [pc, #20]	; (801a474 <__sseek+0x28>)
 801a460:	4013      	ands	r3, r2
 801a462:	81a3      	strh	r3, [r4, #12]
 801a464:	bd70      	pop	{r4, r5, r6, pc}
 801a466:	2280      	movs	r2, #128	; 0x80
 801a468:	0152      	lsls	r2, r2, #5
 801a46a:	4313      	orrs	r3, r2
 801a46c:	81a3      	strh	r3, [r4, #12]
 801a46e:	6520      	str	r0, [r4, #80]	; 0x50
 801a470:	e7f8      	b.n	801a464 <__sseek+0x18>
 801a472:	46c0      	nop			; (mov r8, r8)
 801a474:	ffffefff 	.word	0xffffefff

0801a478 <__sclose>:
 801a478:	b510      	push	{r4, lr}
 801a47a:	230e      	movs	r3, #14
 801a47c:	5ec9      	ldrsh	r1, [r1, r3]
 801a47e:	f000 f87f 	bl	801a580 <_close_r>
 801a482:	bd10      	pop	{r4, pc}

0801a484 <__swbuf_r>:
 801a484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a486:	0006      	movs	r6, r0
 801a488:	000d      	movs	r5, r1
 801a48a:	0014      	movs	r4, r2
 801a48c:	2800      	cmp	r0, #0
 801a48e:	d004      	beq.n	801a49a <__swbuf_r+0x16>
 801a490:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801a492:	2b00      	cmp	r3, #0
 801a494:	d101      	bne.n	801a49a <__swbuf_r+0x16>
 801a496:	f7ff fccf 	bl	8019e38 <__sinit>
 801a49a:	69a3      	ldr	r3, [r4, #24]
 801a49c:	60a3      	str	r3, [r4, #8]
 801a49e:	89a3      	ldrh	r3, [r4, #12]
 801a4a0:	071b      	lsls	r3, r3, #28
 801a4a2:	d52e      	bpl.n	801a502 <__swbuf_r+0x7e>
 801a4a4:	6923      	ldr	r3, [r4, #16]
 801a4a6:	2b00      	cmp	r3, #0
 801a4a8:	d02b      	beq.n	801a502 <__swbuf_r+0x7e>
 801a4aa:	230c      	movs	r3, #12
 801a4ac:	5ee2      	ldrsh	r2, [r4, r3]
 801a4ae:	2380      	movs	r3, #128	; 0x80
 801a4b0:	019b      	lsls	r3, r3, #6
 801a4b2:	b2ef      	uxtb	r7, r5
 801a4b4:	b2ed      	uxtb	r5, r5
 801a4b6:	421a      	tst	r2, r3
 801a4b8:	d02c      	beq.n	801a514 <__swbuf_r+0x90>
 801a4ba:	6823      	ldr	r3, [r4, #0]
 801a4bc:	6922      	ldr	r2, [r4, #16]
 801a4be:	1a98      	subs	r0, r3, r2
 801a4c0:	6963      	ldr	r3, [r4, #20]
 801a4c2:	4283      	cmp	r3, r0
 801a4c4:	dc05      	bgt.n	801a4d2 <__swbuf_r+0x4e>
 801a4c6:	0021      	movs	r1, r4
 801a4c8:	0030      	movs	r0, r6
 801a4ca:	f7ff fc3f 	bl	8019d4c <_fflush_r>
 801a4ce:	2800      	cmp	r0, #0
 801a4d0:	d11d      	bne.n	801a50e <__swbuf_r+0x8a>
 801a4d2:	68a3      	ldr	r3, [r4, #8]
 801a4d4:	3001      	adds	r0, #1
 801a4d6:	3b01      	subs	r3, #1
 801a4d8:	60a3      	str	r3, [r4, #8]
 801a4da:	6823      	ldr	r3, [r4, #0]
 801a4dc:	1c5a      	adds	r2, r3, #1
 801a4de:	6022      	str	r2, [r4, #0]
 801a4e0:	701f      	strb	r7, [r3, #0]
 801a4e2:	6963      	ldr	r3, [r4, #20]
 801a4e4:	4283      	cmp	r3, r0
 801a4e6:	d004      	beq.n	801a4f2 <__swbuf_r+0x6e>
 801a4e8:	89a3      	ldrh	r3, [r4, #12]
 801a4ea:	07db      	lsls	r3, r3, #31
 801a4ec:	d507      	bpl.n	801a4fe <__swbuf_r+0x7a>
 801a4ee:	2d0a      	cmp	r5, #10
 801a4f0:	d105      	bne.n	801a4fe <__swbuf_r+0x7a>
 801a4f2:	0021      	movs	r1, r4
 801a4f4:	0030      	movs	r0, r6
 801a4f6:	f7ff fc29 	bl	8019d4c <_fflush_r>
 801a4fa:	2800      	cmp	r0, #0
 801a4fc:	d107      	bne.n	801a50e <__swbuf_r+0x8a>
 801a4fe:	0028      	movs	r0, r5
 801a500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a502:	0021      	movs	r1, r4
 801a504:	0030      	movs	r0, r6
 801a506:	f7ff fb1d 	bl	8019b44 <__swsetup_r>
 801a50a:	2800      	cmp	r0, #0
 801a50c:	d0cd      	beq.n	801a4aa <__swbuf_r+0x26>
 801a50e:	2501      	movs	r5, #1
 801a510:	426d      	negs	r5, r5
 801a512:	e7f4      	b.n	801a4fe <__swbuf_r+0x7a>
 801a514:	4313      	orrs	r3, r2
 801a516:	81a3      	strh	r3, [r4, #12]
 801a518:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a51a:	4b02      	ldr	r3, [pc, #8]	; (801a524 <__swbuf_r+0xa0>)
 801a51c:	4013      	ands	r3, r2
 801a51e:	6663      	str	r3, [r4, #100]	; 0x64
 801a520:	e7cb      	b.n	801a4ba <__swbuf_r+0x36>
 801a522:	46c0      	nop			; (mov r8, r8)
 801a524:	ffffdfff 	.word	0xffffdfff

0801a528 <_wcrtomb_r>:
 801a528:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801a52a:	001d      	movs	r5, r3
 801a52c:	4b09      	ldr	r3, [pc, #36]	; (801a554 <_wcrtomb_r+0x2c>)
 801a52e:	0004      	movs	r4, r0
 801a530:	33e0      	adds	r3, #224	; 0xe0
 801a532:	681e      	ldr	r6, [r3, #0]
 801a534:	002b      	movs	r3, r5
 801a536:	2900      	cmp	r1, #0
 801a538:	d101      	bne.n	801a53e <_wcrtomb_r+0x16>
 801a53a:	000a      	movs	r2, r1
 801a53c:	a901      	add	r1, sp, #4
 801a53e:	0020      	movs	r0, r4
 801a540:	47b0      	blx	r6
 801a542:	1c43      	adds	r3, r0, #1
 801a544:	d103      	bne.n	801a54e <_wcrtomb_r+0x26>
 801a546:	2300      	movs	r3, #0
 801a548:	602b      	str	r3, [r5, #0]
 801a54a:	338a      	adds	r3, #138	; 0x8a
 801a54c:	6023      	str	r3, [r4, #0]
 801a54e:	b004      	add	sp, #16
 801a550:	bd70      	pop	{r4, r5, r6, pc}
 801a552:	46c0      	nop			; (mov r8, r8)
 801a554:	200009d8 	.word	0x200009d8

0801a558 <_write_r>:
 801a558:	b570      	push	{r4, r5, r6, lr}
 801a55a:	0004      	movs	r4, r0
 801a55c:	0008      	movs	r0, r1
 801a55e:	0011      	movs	r1, r2
 801a560:	001a      	movs	r2, r3
 801a562:	2300      	movs	r3, #0
 801a564:	4d05      	ldr	r5, [pc, #20]	; (801a57c <_write_r+0x24>)
 801a566:	602b      	str	r3, [r5, #0]
 801a568:	f000 f910 	bl	801a78c <_write>
 801a56c:	1c43      	adds	r3, r0, #1
 801a56e:	d103      	bne.n	801a578 <_write_r+0x20>
 801a570:	682b      	ldr	r3, [r5, #0]
 801a572:	2b00      	cmp	r3, #0
 801a574:	d000      	beq.n	801a578 <_write_r+0x20>
 801a576:	6023      	str	r3, [r4, #0]
 801a578:	bd70      	pop	{r4, r5, r6, pc}
 801a57a:	46c0      	nop			; (mov r8, r8)
 801a57c:	20006bac 	.word	0x20006bac

0801a580 <_close_r>:
 801a580:	2300      	movs	r3, #0
 801a582:	b570      	push	{r4, r5, r6, lr}
 801a584:	4d06      	ldr	r5, [pc, #24]	; (801a5a0 <_close_r+0x20>)
 801a586:	0004      	movs	r4, r0
 801a588:	0008      	movs	r0, r1
 801a58a:	602b      	str	r3, [r5, #0]
 801a58c:	f000 f8b6 	bl	801a6fc <_close>
 801a590:	1c43      	adds	r3, r0, #1
 801a592:	d103      	bne.n	801a59c <_close_r+0x1c>
 801a594:	682b      	ldr	r3, [r5, #0]
 801a596:	2b00      	cmp	r3, #0
 801a598:	d000      	beq.n	801a59c <_close_r+0x1c>
 801a59a:	6023      	str	r3, [r4, #0]
 801a59c:	bd70      	pop	{r4, r5, r6, pc}
 801a59e:	46c0      	nop			; (mov r8, r8)
 801a5a0:	20006bac 	.word	0x20006bac

0801a5a4 <_fclose_r>:
 801a5a4:	b570      	push	{r4, r5, r6, lr}
 801a5a6:	0005      	movs	r5, r0
 801a5a8:	1e0c      	subs	r4, r1, #0
 801a5aa:	d102      	bne.n	801a5b2 <_fclose_r+0xe>
 801a5ac:	2600      	movs	r6, #0
 801a5ae:	0030      	movs	r0, r6
 801a5b0:	bd70      	pop	{r4, r5, r6, pc}
 801a5b2:	2800      	cmp	r0, #0
 801a5b4:	d004      	beq.n	801a5c0 <_fclose_r+0x1c>
 801a5b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801a5b8:	2b00      	cmp	r3, #0
 801a5ba:	d101      	bne.n	801a5c0 <_fclose_r+0x1c>
 801a5bc:	f7ff fc3c 	bl	8019e38 <__sinit>
 801a5c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a5c2:	07db      	lsls	r3, r3, #31
 801a5c4:	d405      	bmi.n	801a5d2 <_fclose_r+0x2e>
 801a5c6:	89a3      	ldrh	r3, [r4, #12]
 801a5c8:	059b      	lsls	r3, r3, #22
 801a5ca:	d402      	bmi.n	801a5d2 <_fclose_r+0x2e>
 801a5cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a5ce:	f7fd ff35 	bl	801843c <__retarget_lock_acquire_recursive>
 801a5d2:	220c      	movs	r2, #12
 801a5d4:	5ea3      	ldrsh	r3, [r4, r2]
 801a5d6:	2b00      	cmp	r3, #0
 801a5d8:	d109      	bne.n	801a5ee <_fclose_r+0x4a>
 801a5da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a5dc:	3301      	adds	r3, #1
 801a5de:	0016      	movs	r6, r2
 801a5e0:	401e      	ands	r6, r3
 801a5e2:	421a      	tst	r2, r3
 801a5e4:	d1e2      	bne.n	801a5ac <_fclose_r+0x8>
 801a5e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a5e8:	f7fd ff29 	bl	801843e <__retarget_lock_release_recursive>
 801a5ec:	e7df      	b.n	801a5ae <_fclose_r+0xa>
 801a5ee:	0021      	movs	r1, r4
 801a5f0:	0028      	movs	r0, r5
 801a5f2:	f7ff fb13 	bl	8019c1c <__sflush_r>
 801a5f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801a5f8:	0006      	movs	r6, r0
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	d006      	beq.n	801a60c <_fclose_r+0x68>
 801a5fe:	0028      	movs	r0, r5
 801a600:	69e1      	ldr	r1, [r4, #28]
 801a602:	4798      	blx	r3
 801a604:	2800      	cmp	r0, #0
 801a606:	da01      	bge.n	801a60c <_fclose_r+0x68>
 801a608:	2601      	movs	r6, #1
 801a60a:	4276      	negs	r6, r6
 801a60c:	89a3      	ldrh	r3, [r4, #12]
 801a60e:	061b      	lsls	r3, r3, #24
 801a610:	d503      	bpl.n	801a61a <_fclose_r+0x76>
 801a612:	0028      	movs	r0, r5
 801a614:	6921      	ldr	r1, [r4, #16]
 801a616:	f7fd fadf 	bl	8017bd8 <_free_r>
 801a61a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a61c:	2900      	cmp	r1, #0
 801a61e:	d008      	beq.n	801a632 <_fclose_r+0x8e>
 801a620:	0023      	movs	r3, r4
 801a622:	3340      	adds	r3, #64	; 0x40
 801a624:	4299      	cmp	r1, r3
 801a626:	d002      	beq.n	801a62e <_fclose_r+0x8a>
 801a628:	0028      	movs	r0, r5
 801a62a:	f7fd fad5 	bl	8017bd8 <_free_r>
 801a62e:	2300      	movs	r3, #0
 801a630:	6323      	str	r3, [r4, #48]	; 0x30
 801a632:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801a634:	2900      	cmp	r1, #0
 801a636:	d004      	beq.n	801a642 <_fclose_r+0x9e>
 801a638:	0028      	movs	r0, r5
 801a63a:	f7fd facd 	bl	8017bd8 <_free_r>
 801a63e:	2300      	movs	r3, #0
 801a640:	6463      	str	r3, [r4, #68]	; 0x44
 801a642:	f7ff fbd9 	bl	8019df8 <__sfp_lock_acquire>
 801a646:	2300      	movs	r3, #0
 801a648:	81a3      	strh	r3, [r4, #12]
 801a64a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a64c:	07db      	lsls	r3, r3, #31
 801a64e:	d402      	bmi.n	801a656 <_fclose_r+0xb2>
 801a650:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a652:	f7fd fef4 	bl	801843e <__retarget_lock_release_recursive>
 801a656:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a658:	f7fd feef 	bl	801843a <__retarget_lock_close_recursive>
 801a65c:	f7ff fbd4 	bl	8019e08 <__sfp_lock_release>
 801a660:	e7a5      	b.n	801a5ae <_fclose_r+0xa>
	...

0801a664 <_fstat_r>:
 801a664:	2300      	movs	r3, #0
 801a666:	b570      	push	{r4, r5, r6, lr}
 801a668:	4d06      	ldr	r5, [pc, #24]	; (801a684 <_fstat_r+0x20>)
 801a66a:	0004      	movs	r4, r0
 801a66c:	0008      	movs	r0, r1
 801a66e:	0011      	movs	r1, r2
 801a670:	602b      	str	r3, [r5, #0]
 801a672:	f000 f84b 	bl	801a70c <_fstat>
 801a676:	1c43      	adds	r3, r0, #1
 801a678:	d103      	bne.n	801a682 <_fstat_r+0x1e>
 801a67a:	682b      	ldr	r3, [r5, #0]
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	d000      	beq.n	801a682 <_fstat_r+0x1e>
 801a680:	6023      	str	r3, [r4, #0]
 801a682:	bd70      	pop	{r4, r5, r6, pc}
 801a684:	20006bac 	.word	0x20006bac

0801a688 <_isatty_r>:
 801a688:	2300      	movs	r3, #0
 801a68a:	b570      	push	{r4, r5, r6, lr}
 801a68c:	4d06      	ldr	r5, [pc, #24]	; (801a6a8 <_isatty_r+0x20>)
 801a68e:	0004      	movs	r4, r0
 801a690:	0008      	movs	r0, r1
 801a692:	602b      	str	r3, [r5, #0]
 801a694:	f000 f84a 	bl	801a72c <_isatty>
 801a698:	1c43      	adds	r3, r0, #1
 801a69a:	d103      	bne.n	801a6a4 <_isatty_r+0x1c>
 801a69c:	682b      	ldr	r3, [r5, #0]
 801a69e:	2b00      	cmp	r3, #0
 801a6a0:	d000      	beq.n	801a6a4 <_isatty_r+0x1c>
 801a6a2:	6023      	str	r3, [r4, #0]
 801a6a4:	bd70      	pop	{r4, r5, r6, pc}
 801a6a6:	46c0      	nop			; (mov r8, r8)
 801a6a8:	20006bac 	.word	0x20006bac

0801a6ac <_lseek_r>:
 801a6ac:	b570      	push	{r4, r5, r6, lr}
 801a6ae:	0004      	movs	r4, r0
 801a6b0:	0008      	movs	r0, r1
 801a6b2:	0011      	movs	r1, r2
 801a6b4:	001a      	movs	r2, r3
 801a6b6:	2300      	movs	r3, #0
 801a6b8:	4d05      	ldr	r5, [pc, #20]	; (801a6d0 <_lseek_r+0x24>)
 801a6ba:	602b      	str	r3, [r5, #0]
 801a6bc:	f000 f846 	bl	801a74c <_lseek>
 801a6c0:	1c43      	adds	r3, r0, #1
 801a6c2:	d103      	bne.n	801a6cc <_lseek_r+0x20>
 801a6c4:	682b      	ldr	r3, [r5, #0]
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	d000      	beq.n	801a6cc <_lseek_r+0x20>
 801a6ca:	6023      	str	r3, [r4, #0]
 801a6cc:	bd70      	pop	{r4, r5, r6, pc}
 801a6ce:	46c0      	nop			; (mov r8, r8)
 801a6d0:	20006bac 	.word	0x20006bac

0801a6d4 <_read_r>:
 801a6d4:	b570      	push	{r4, r5, r6, lr}
 801a6d6:	0004      	movs	r4, r0
 801a6d8:	0008      	movs	r0, r1
 801a6da:	0011      	movs	r1, r2
 801a6dc:	001a      	movs	r2, r3
 801a6de:	2300      	movs	r3, #0
 801a6e0:	4d05      	ldr	r5, [pc, #20]	; (801a6f8 <_read_r+0x24>)
 801a6e2:	602b      	str	r3, [r5, #0]
 801a6e4:	f000 f83a 	bl	801a75c <_read>
 801a6e8:	1c43      	adds	r3, r0, #1
 801a6ea:	d103      	bne.n	801a6f4 <_read_r+0x20>
 801a6ec:	682b      	ldr	r3, [r5, #0]
 801a6ee:	2b00      	cmp	r3, #0
 801a6f0:	d000      	beq.n	801a6f4 <_read_r+0x20>
 801a6f2:	6023      	str	r3, [r4, #0]
 801a6f4:	bd70      	pop	{r4, r5, r6, pc}
 801a6f6:	46c0      	nop			; (mov r8, r8)
 801a6f8:	20006bac 	.word	0x20006bac

0801a6fc <_close>:
 801a6fc:	2258      	movs	r2, #88	; 0x58
 801a6fe:	2001      	movs	r0, #1
 801a700:	4b01      	ldr	r3, [pc, #4]	; (801a708 <_close+0xc>)
 801a702:	4240      	negs	r0, r0
 801a704:	601a      	str	r2, [r3, #0]
 801a706:	4770      	bx	lr
 801a708:	20006bac 	.word	0x20006bac

0801a70c <_fstat>:
 801a70c:	2258      	movs	r2, #88	; 0x58
 801a70e:	2001      	movs	r0, #1
 801a710:	4b01      	ldr	r3, [pc, #4]	; (801a718 <_fstat+0xc>)
 801a712:	4240      	negs	r0, r0
 801a714:	601a      	str	r2, [r3, #0]
 801a716:	4770      	bx	lr
 801a718:	20006bac 	.word	0x20006bac

0801a71c <_getpid>:
 801a71c:	2258      	movs	r2, #88	; 0x58
 801a71e:	2001      	movs	r0, #1
 801a720:	4b01      	ldr	r3, [pc, #4]	; (801a728 <_getpid+0xc>)
 801a722:	4240      	negs	r0, r0
 801a724:	601a      	str	r2, [r3, #0]
 801a726:	4770      	bx	lr
 801a728:	20006bac 	.word	0x20006bac

0801a72c <_isatty>:
 801a72c:	2258      	movs	r2, #88	; 0x58
 801a72e:	4b02      	ldr	r3, [pc, #8]	; (801a738 <_isatty+0xc>)
 801a730:	2000      	movs	r0, #0
 801a732:	601a      	str	r2, [r3, #0]
 801a734:	4770      	bx	lr
 801a736:	46c0      	nop			; (mov r8, r8)
 801a738:	20006bac 	.word	0x20006bac

0801a73c <_kill>:
 801a73c:	2258      	movs	r2, #88	; 0x58
 801a73e:	2001      	movs	r0, #1
 801a740:	4b01      	ldr	r3, [pc, #4]	; (801a748 <_kill+0xc>)
 801a742:	4240      	negs	r0, r0
 801a744:	601a      	str	r2, [r3, #0]
 801a746:	4770      	bx	lr
 801a748:	20006bac 	.word	0x20006bac

0801a74c <_lseek>:
 801a74c:	2258      	movs	r2, #88	; 0x58
 801a74e:	2001      	movs	r0, #1
 801a750:	4b01      	ldr	r3, [pc, #4]	; (801a758 <_lseek+0xc>)
 801a752:	4240      	negs	r0, r0
 801a754:	601a      	str	r2, [r3, #0]
 801a756:	4770      	bx	lr
 801a758:	20006bac 	.word	0x20006bac

0801a75c <_read>:
 801a75c:	2258      	movs	r2, #88	; 0x58
 801a75e:	2001      	movs	r0, #1
 801a760:	4b01      	ldr	r3, [pc, #4]	; (801a768 <_read+0xc>)
 801a762:	4240      	negs	r0, r0
 801a764:	601a      	str	r2, [r3, #0]
 801a766:	4770      	bx	lr
 801a768:	20006bac 	.word	0x20006bac

0801a76c <_sbrk>:
 801a76c:	4a05      	ldr	r2, [pc, #20]	; (801a784 <_sbrk+0x18>)
 801a76e:	0003      	movs	r3, r0
 801a770:	6811      	ldr	r1, [r2, #0]
 801a772:	2900      	cmp	r1, #0
 801a774:	d101      	bne.n	801a77a <_sbrk+0xe>
 801a776:	4904      	ldr	r1, [pc, #16]	; (801a788 <_sbrk+0x1c>)
 801a778:	6011      	str	r1, [r2, #0]
 801a77a:	6810      	ldr	r0, [r2, #0]
 801a77c:	18c3      	adds	r3, r0, r3
 801a77e:	6013      	str	r3, [r2, #0]
 801a780:	4770      	bx	lr
 801a782:	46c0      	nop			; (mov r8, r8)
 801a784:	20006664 	.word	0x20006664
 801a788:	20006bb0 	.word	0x20006bb0

0801a78c <_write>:
 801a78c:	2258      	movs	r2, #88	; 0x58
 801a78e:	2001      	movs	r0, #1
 801a790:	4b01      	ldr	r3, [pc, #4]	; (801a798 <_write+0xc>)
 801a792:	4240      	negs	r0, r0
 801a794:	601a      	str	r2, [r3, #0]
 801a796:	4770      	bx	lr
 801a798:	20006bac 	.word	0x20006bac

0801a79c <_exit>:
 801a79c:	e7fe      	b.n	801a79c <_exit>
	...

0801a7a0 <_init>:
 801a7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7a2:	46c0      	nop			; (mov r8, r8)
 801a7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a7a6:	bc08      	pop	{r3}
 801a7a8:	469e      	mov	lr, r3
 801a7aa:	4770      	bx	lr

0801a7ac <_fini>:
 801a7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7ae:	46c0      	nop			; (mov r8, r8)
 801a7b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a7b2:	bc08      	pop	{r3}
 801a7b4:	469e      	mov	lr, r3
 801a7b6:	4770      	bx	lr
